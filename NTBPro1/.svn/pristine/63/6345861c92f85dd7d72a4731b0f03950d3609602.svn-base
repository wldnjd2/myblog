package kr.co.negga.ntb.board.service.impl;

import java.util.List;

import javax.annotation.Resource;

import org.springframework.stereotype.Service;

import kr.co.negga.ntb.board.service.BoardService;
import kr.co.negga.ntb.board.service.BoardVO;

/**
 * @Class BoardServiceImpl.java
 * @Description 게시판 관련 서비스 구현 Class
 * @Since 2022.03.16
 * @author hsan
 * @version 1.0
 * @Modification 수정사항 없음 
 */
@Service("boardService")
public class BoardServiceImpl implements BoardService {
	
	@Resource(name = "boardMapper")
	BoardMapper boardMapper;

	/**
	 * 게시판 리스트를 불러온다.
	 * @param vo 게시판 정보가 담긴 BoardVO
	 * @return 게시판 정보 BoardVO
	 * @exception Exception
	 */
	@Override
	public List<BoardVO> selectList(BoardVO vo) throws Exception {
		return boardMapper.selectList(vo);
	}

	/**
	 * 게시판 총 게시물 갯수를 불러온다.
	 * @param vo 게시판 정보가 담긴 BoardVO
	 * @return int 총 게시물 갯수
	 * @exception Exception
	 */
	@Override
	public int selectListCnt(BoardVO vo) throws Exception {
		return boardMapper.selectListCnt(vo);
	}

	/**
	 * 게시판 카테고리를 불러온다.
	 * @param vo 카테고리 정보가 담긴 BoardVO
	 * @return List 총 카테고리 갯수
	 * @exception Exception
	 */
	@Override
	public List<BoardVO> selectCategory(BoardVO vo) throws Exception {
		return boardMapper.selectCategory(vo);
	}

	/**
	 * 게시글 한개를 가져온다
	 * @param vo 카테고리 정보가 담긴 BoardVO
	 * @return 게시판 정보 BoardVO
	 * @exception Exception
	 */
	@Override
	public BoardVO selectBoardDetail(BoardVO vo) throws Exception {
		return boardMapper.selectBoardDetail(vo);
	}

	/**
	 * 게시판 게시글 수정
	 * @param vo 카테고리 정보가 담긴 BoardVO
	 * @return 게시판 정보 BoardVO
	 * @exception Exception
	 */
	@Override
	public int updateBoardDetail(BoardVO vo) throws Exception {
		return boardMapper.updateBoardDetail(vo);
	}
	
	/**
	 * 게시판 게시글 삭제
	 * @param vo 카테고리 정보가 담긴 BoardVO
	 * @return 게시판 정보 BoardVO
	 * @exception Exception
	 */
	@Override
	public int deleteBoardDetail(BoardVO vo) throws Exception {
		return boardMapper.deleteBoardDetail(vo);
	}
	
	/**
	 * 댓글 추가
	 * @param vo 카테고리 정보가 담긴 BoardVO
	 * @return 게시판 정보 BoardVO
	 * @exception Exception
	 */
	@Override
	public int insertBoardReply(BoardVO vo) throws Exception {
		return boardMapper.insertBoardReply(vo);
	}
	
	
	/**
	 * 댓글을 불러온다
	 * @param vo 카테고리 정보가 담긴 BoardVO
	 * @return 게시판 정보 BoardVO
	 * @exception Exception
	 */
	@Override
	public List<BoardVO> selectBoardReplyList(BoardVO vo) throws Exception {
		return boardMapper.	selectBoardReplyList(vo);
	}
	
	/**
	 * 댓글을 수정한다
	 * @param vo 카테고리 정보가 담긴 BoardVO
	 * @return 게시판 정보 BoardVO
	 * @exception Exception
	 */
	@Override
	public int updateBoardReplyList(BoardVO vo) throws Exception {
		return boardMapper.updateBoardReplyList(vo);
	}

	
	/**
	 * 댓글을 삭제한다
	 * @param vo 카테고리 정보가 담긴 BoardVO
	 * @return 게시판 정보 BoardVO
	 * @exception Exception
	 */
	@Override
	public int deleteBoardReplyList(BoardVO vo) throws Exception {
		return boardMapper.deleteBoardReplyList(vo);
	}

	/**
	 * 좋아요 +1
	 * @param vo 카테고리 정보가 담긴 BoardVO
	 * @return 게시판 정보 BoardVO
	 * @exception Exception
	 */
	@Override
	public int replyLikeAdd(BoardVO vo) throws Exception{
		return boardMapper.replyLikeAdd(vo);
	}

	/**
	 * 좋아요 -1
	 * @param vo 카테고리 정보가 담긴 BoardVO
	 * @return 게시판 정보 BoardVO
	 * @exception Exception
	 */
	@Override
	public int replyLikeCancel(BoardVO vo) throws Exception{
		return boardMapper.replyLikeCancel(vo);
	}

	/**
	 * 좋아요 불러오기
	 * @param vo 카테고리 정보가 담긴 BoardVO
	 * @return 게시판 정보 BoardVO
	 * @exception Exception
	 */
	@Override
	public BoardVO replyLikeShow(BoardVO vo) throws Exception {
		return boardMapper.replyLikeShow(vo);
	}
	
	/**
	 * 게시글 좋아요 개수 불러오기
	 * @param vo 카테고리 정보가 담긴 BoardVO
	 * @return 게시판 정보 BoardVO
	 * @exception Exception
	 */
	@Override
	public int selectReplyLikeCount(BoardVO vo) throws Exception {
		
		return boardMapper.selectReplyLikeCount(vo);
	}
	
	/**
	 * 싫어요 +1
	 * @param vo 카테고리 정보가 담긴 BoardVO
	 * @return 게시판 정보 BoardVO
	 * @exception Exception
	 */
	@Override
	public int replyHateAdd(BoardVO vo) throws Exception{
		return boardMapper.replyHateAdd(vo);
	}

	/**
	 * 싫어요 -1
	 * @param vo 카테고리 정보가 담긴 BoardVO
	 * @return 게시판 정보 BoardVO
	 * @exception Exception
	 */
	@Override
	public int replyHateCancel(BoardVO vo) throws Exception{
		return boardMapper.replyHateCancel(vo);
	}

	/**
	 * 싫어요 불러오기
	 * @param vo 카테고리 정보가 담긴 BoardVO
	 * @return 게시판 정보 BoardVO
	 * @exception Exception
	 */
	@Override
	public BoardVO replyHateShow(BoardVO vo) throws Exception {
		return boardMapper.replyHateShow(vo);
	}
	
	/**
	 * 게시글 싫어요 개수 불러오기
	 * @param vo 카테고리 정보가 담긴 BoardVO
	 * @return 게시판 정보 BoardVO
	 * @exception Exception
	 */
	@Override
	public int selectReplyHateCount(BoardVO vo) throws Exception {
		
		return boardMapper.selectReplyHateCount(vo);
	}

	/**
	 * 댓글 총 갯수 불러오기
	 * @param vo 카테고리 정보가 담긴 BoardVO
	 * @return 게시판 정보 BoardVO
	 * @exception Exception
	 */
	@Override
	public int selectBoardReplyCount(BoardVO vo) throws Exception {
		return boardMapper.selectBoardReplyCount(vo);
	}

	
	/**
	 * 게시글을 작성한다.
	 * @param vo 게시판 정보가 담긴 BoardVO
	 * @return 작성 결과 int
	 * @exception Exception
	 */
	@Override
	public int insertTechList(BoardVO vo) throws Exception {
		return boardMapper.insertTechList(vo);
	}

}
