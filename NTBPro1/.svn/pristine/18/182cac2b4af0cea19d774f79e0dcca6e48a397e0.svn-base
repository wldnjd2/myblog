package kr.co.negga.ntb;

import java.util.HashMap;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.HttpSession;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import egovframework.rte.ptl.mvc.tags.ui.pagination.PaginationInfo;
import kr.co.negga.ntb.account.service.AccountService;
import kr.co.negga.ntb.account.service.AccountVO;
import kr.co.negga.ntb.board.service.BoardService;
import kr.co.negga.ntb.board.service.BoardVO;

@Controller
public class MainController {
	
	@Resource(name = "boardService")
	private BoardService boardService;
	
	@Resource(name = "accountService")
	private AccountService acservice;

	@RequestMapping(value = "/main.do")
	public String main() {
		return "main";
	}
	
	
	@RequestMapping(value = "/techBoardList.do", method = RequestMethod.POST)
	@ResponseBody
	public HashMap<String, Object> list(@ModelAttribute("boardVO") BoardVO boardVO,
										@ModelAttribute("accountVO") AccountVO accountVO,
										HttpSession session) throws Exception {
		
		HashMap<String, Object> resultMap = new HashMap<String, Object>();
		
		boardVO.setPageUnit(5);
		boardVO.setPageSize(10);
		
		PaginationInfo paginationInfo = new PaginationInfo();
		
		// 한 페이지에 게시되는 게시글 건수
		paginationInfo.setRecordCountPerPage(boardVO.getPageUnit());
		// 페이지 리스트에 게시되는 페이지 건수
		paginationInfo.setPageSize(boardVO.getPageSize());
		// 한 페이지당 게시되는 게시글 건수
		boardVO.setRecordCountPerPage(paginationInfo.getRecordCountPerPage());
		
		// 현재 페이지 번호
		paginationInfo.setCurrentPageNo(boardVO.getCurrentPage());
		// SQL문 조건절 시작 rownum
		boardVO.setFirstIndex(paginationInfo.getFirstRecordIndex());
		// SQL문 조건절 끝 rownum
		boardVO.setLastIndex(paginationInfo.getLastRecordIndex());
	
		if(boardVO.getCat_cname() != "") {
			int cat_totCnt = boardService.selectListCnt(boardVO);
			paginationInfo.setTotalRecordCount(cat_totCnt);
			resultMap.put("resultCnt", cat_totCnt);
		}else {
			int totCnt = boardService.selectListCnt(boardVO);
			paginationInfo.setTotalRecordCount(totCnt);
			resultMap.put("resultCnt", totCnt);
		}
		
	
		
		// 게시판 게시글 가져오기
		List<BoardVO> resultList = boardService.selectList(boardVO);
		// 카테고리 불러오기
		List<BoardVO> resultCategory = boardService.selectCategory(boardVO);
		// 현재 접속중인 user 정보 가져오기
		AccountVO resultUserInfo = acservice.selectMember((String)session.getAttribute("Session_user_id"));
		
		resultMap.put("resultList", resultList);
		resultMap.put("boardVO", boardVO);
		resultMap.put("paginationInfo", paginationInfo);		
		resultMap.put("resultCategory", resultCategory);
		resultMap.put("resultUserInfo", resultUserInfo);
		

		return resultMap;
	}

}
