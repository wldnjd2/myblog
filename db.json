{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-icarus/source/css/cyberpunk.styl","path":"css/cyberpunk.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/css/default.styl","path":"css/default.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/img/favicon.svg","path":"img/favicon.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/img/logo.svg","path":"img/logo.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/img/og_image.png","path":"img/og_image.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/img/razor-bottom-black.svg","path":"img/razor-bottom-black.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/img/razor-top-black.svg","path":"img/razor-top-black.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/js/animation.js","path":"js/animation.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/js/back_to_top.js","path":"js/back_to_top.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/js/column.js","path":"js/column.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"source/images/3cat.jpg","path":"images/3cat.jpg","modified":0,"renderable":0},{"_id":"source/images/flower.jpg","path":"images/flower.jpg","modified":0,"renderable":0},{"_id":"source/images/me.jpg","path":"images/me.jpg","modified":0,"renderable":0},{"_id":"source/images/곰돌.png","path":"images/곰돌.png","modified":0,"renderable":0},{"_id":"source/images/0101/01_01.PNG","path":"images/0101/01_01.PNG","modified":0,"renderable":0},{"_id":"source/images/0101/01_02.png","path":"images/0101/01_02.png","modified":0,"renderable":0},{"_id":"source/images/0101/01_03.png","path":"images/0101/01_03.png","modified":0,"renderable":0},{"_id":"source/images/0101/01_04.png","path":"images/0101/01_04.png","modified":0,"renderable":0},{"_id":"source/images/0101/01_05.png","path":"images/0101/01_05.png","modified":0,"renderable":0},{"_id":"source/images/0101/01_06.png","path":"images/0101/01_06.png","modified":0,"renderable":0},{"_id":"source/images/0101/01_07.png","path":"images/0101/01_07.png","modified":0,"renderable":0},{"_id":"source/images/0101/01_08.png","path":"images/0101/01_08.png","modified":0,"renderable":0},{"_id":"source/images/0101/01_09.png","path":"images/0101/01_09.png","modified":0,"renderable":0},{"_id":"source/images/0101/01_10.png","path":"images/0101/01_10.png","modified":0,"renderable":0},{"_id":"source/images/0101/01_11.PNG","path":"images/0101/01_11.PNG","modified":0,"renderable":0},{"_id":"source/images/0102/02_01.png","path":"images/0102/02_01.png","modified":0,"renderable":0},{"_id":"source/images/0102/02_02.png","path":"images/0102/02_02.png","modified":0,"renderable":0},{"_id":"source/images/0102/02_03.png","path":"images/0102/02_03.png","modified":0,"renderable":0},{"_id":"source/images/0103/pstmd설정.PNG","path":"images/0103/pstmd설정.PNG","modified":0,"renderable":0},{"_id":"source/images/0202/01_01_python.PNG","path":"images/0202/01_01_python.PNG","modified":0,"renderable":0},{"_id":"source/images/0202/01_02_python.PNG","path":"images/0202/01_02_python.PNG","modified":0,"renderable":0},{"_id":"source/images/0202/01_03_python.PNG","path":"images/0202/01_03_python.PNG","modified":0,"renderable":0},{"_id":"source/images/0202/01_04_python.PNG","path":"images/0202/01_04_python.PNG","modified":0,"renderable":0},{"_id":"source/images/0202/01_05_python.PNG","path":"images/0202/01_05_python.PNG","modified":0,"renderable":0},{"_id":"source/images/0202/01_06_python.PNG","path":"images/0202/01_06_python.PNG","modified":0,"renderable":0},{"_id":"source/images/0202/01_07_python.PNG","path":"images/0202/01_07_python.PNG","modified":0,"renderable":0},{"_id":"source/images/0202/01_08_python.PNG","path":"images/0202/01_08_python.PNG","modified":0,"renderable":0},{"_id":"source/images/0301_1-1/1.png","path":"images/0301_1-1/1.png","modified":0,"renderable":0},{"_id":"source/images/0301_1-1/2.png","path":"images/0301_1-1/2.png","modified":0,"renderable":0},{"_id":"source/images/0301_1-1/3.png","path":"images/0301_1-1/3.png","modified":0,"renderable":0},{"_id":"source/images/0301_1-1/4.png","path":"images/0301_1-1/4.png","modified":0,"renderable":0},{"_id":"source/images/0301_1-1/5.png","path":"images/0301_1-1/5.png","modified":0,"renderable":0},{"_id":"source/images/0205/output_10_1.png","path":"images/0205/output_10_1.png","modified":0,"renderable":0},{"_id":"source/images/0205/output_14_1.png","path":"images/0205/output_14_1.png","modified":0,"renderable":0},{"_id":"source/images/0205/output_16_1.png","path":"images/0205/output_16_1.png","modified":0,"renderable":0},{"_id":"source/images/0205/output_18_0.png","path":"images/0205/output_18_0.png","modified":0,"renderable":0},{"_id":"source/images/0205/output_19_0.png","path":"images/0205/output_19_0.png","modified":0,"renderable":0},{"_id":"source/images/0205/output_1_0.png","path":"images/0205/output_1_0.png","modified":0,"renderable":0},{"_id":"source/images/0205/output_22_0.png","path":"images/0205/output_22_0.png","modified":0,"renderable":0},{"_id":"source/images/0205/output_25_0.png","path":"images/0205/output_25_0.png","modified":0,"renderable":0},{"_id":"source/images/0205/output_27_0.png","path":"images/0205/output_27_0.png","modified":0,"renderable":0},{"_id":"source/images/0205/output_2_0.png","path":"images/0205/output_2_0.png","modified":0,"renderable":0},{"_id":"source/images/0205/output_30_0.png","path":"images/0205/output_30_0.png","modified":0,"renderable":0},{"_id":"source/images/0205/output_31_0.png","path":"images/0205/output_31_0.png","modified":0,"renderable":0},{"_id":"source/images/0205/output_33_0.png","path":"images/0205/output_33_0.png","modified":0,"renderable":0},{"_id":"source/images/0205/output_34_0.png","path":"images/0205/output_34_0.png","modified":0,"renderable":0},{"_id":"source/images/0205/output_35_0.png","path":"images/0205/output_35_0.png","modified":0,"renderable":0},{"_id":"source/images/0205/output_37_1.png","path":"images/0205/output_37_1.png","modified":0,"renderable":0},{"_id":"source/images/0205/output_39_0.png","path":"images/0205/output_39_0.png","modified":0,"renderable":0},{"_id":"source/images/0205/output_43_0.png","path":"images/0205/output_43_0.png","modified":0,"renderable":0},{"_id":"source/images/0205/output_44_0.png","path":"images/0205/output_44_0.png","modified":0,"renderable":0},{"_id":"source/images/0205/output_49_0.png","path":"images/0205/output_49_0.png","modified":0,"renderable":0},{"_id":"source/images/0205/output_52_0.png","path":"images/0205/output_52_0.png","modified":0,"renderable":0},{"_id":"source/images/0205/output_59_0.png","path":"images/0205/output_59_0.png","modified":0,"renderable":0},{"_id":"source/images/0205/output_60_0.png","path":"images/0205/output_60_0.png","modified":0,"renderable":0},{"_id":"source/images/0205/output_61_0.png","path":"images/0205/output_61_0.png","modified":0,"renderable":0},{"_id":"source/images/0205/output_62_0.png","path":"images/0205/output_62_0.png","modified":0,"renderable":0},{"_id":"source/images/0205/output_64_0.png","path":"images/0205/output_64_0.png","modified":0,"renderable":0},{"_id":"source/images/0205/output_66_0.png","path":"images/0205/output_66_0.png","modified":0,"renderable":0},{"_id":"source/images/0205/output_67_1.png","path":"images/0205/output_67_1.png","modified":0,"renderable":0},{"_id":"source/images/0206/iris1.png","path":"images/0206/iris1.png","modified":0,"renderable":0},{"_id":"source/images/0206/iris2.png","path":"images/0206/iris2.png","modified":0,"renderable":0},{"_id":"source/images/0304_2-1/1.PNG","path":"images/0304_2-1/1.PNG","modified":0,"renderable":0},{"_id":"source/images/0304_2-1/2.PNG","path":"images/0304_2-1/2.PNG","modified":0,"renderable":0},{"_id":"source/images/0304_2-1/3.PNG","path":"images/0304_2-1/3.PNG","modified":0,"renderable":0},{"_id":"source/images/0304_2-1/4.PNG","path":"images/0304_2-1/4.PNG","modified":0,"renderable":0},{"_id":"source/images/0304_2-1/5.PNG","path":"images/0304_2-1/5.PNG","modified":0,"renderable":0},{"_id":"source/images/0304_2-1/6.PNG","path":"images/0304_2-1/6.PNG","modified":0,"renderable":0},{"_id":"source/images/0304_2-1/7.PNG","path":"images/0304_2-1/7.PNG","modified":0,"renderable":0},{"_id":"source/images/0304_2-1/8.PNG","path":"images/0304_2-1/8.PNG","modified":0,"renderable":0},{"_id":"source/images/0304_2-1/9.PNG","path":"images/0304_2-1/9.PNG","modified":0,"renderable":0},{"_id":"source/images/0303_1-3/1.PNG","path":"images/0303_1-3/1.PNG","modified":0,"renderable":0},{"_id":"source/images/0303_1-3/10.PNG","path":"images/0303_1-3/10.PNG","modified":0,"renderable":0},{"_id":"source/images/0303_1-3/2.PNG","path":"images/0303_1-3/2.PNG","modified":0,"renderable":0},{"_id":"source/images/0303_1-3/3.PNG","path":"images/0303_1-3/3.PNG","modified":0,"renderable":0},{"_id":"source/images/0303_1-3/4.PNG","path":"images/0303_1-3/4.PNG","modified":0,"renderable":0},{"_id":"source/images/0303_1-3/5.PNG","path":"images/0303_1-3/5.PNG","modified":0,"renderable":0},{"_id":"source/images/0303_1-3/6.PNG","path":"images/0303_1-3/6.PNG","modified":0,"renderable":0},{"_id":"source/images/0303_1-3/7.PNG","path":"images/0303_1-3/7.PNG","modified":0,"renderable":0},{"_id":"source/images/0303_1-3/8.PNG","path":"images/0303_1-3/8.PNG","modified":0,"renderable":0},{"_id":"source/images/0303_1-3/9.PNG","path":"images/0303_1-3/9.PNG","modified":0,"renderable":0},{"_id":"source/images/0307_3-4/1.PNG","path":"images/0307_3-4/1.PNG","modified":0,"renderable":0},{"_id":"source/images/0307_3-4/2.PNG","path":"images/0307_3-4/2.PNG","modified":0,"renderable":0},{"_id":"source/images/0307_3-4/3.PNG","path":"images/0307_3-4/3.PNG","modified":0,"renderable":0},{"_id":"source/images/0305_3-1/1.PNG","path":"images/0305_3-1/1.PNG","modified":0,"renderable":0},{"_id":"source/images/0305_3-1/2.PNG","path":"images/0305_3-1/2.PNG","modified":0,"renderable":0},{"_id":"source/images/0305_3-1/3.PNG","path":"images/0305_3-1/3.PNG","modified":0,"renderable":0},{"_id":"source/images/0305_3-1/4.PNG","path":"images/0305_3-1/4.PNG","modified":0,"renderable":0},{"_id":"source/images/0305_3-1/5.PNG","path":"images/0305_3-1/5.PNG","modified":0,"renderable":0},{"_id":"source/images/0305_3-1/6.PNG","path":"images/0305_3-1/6.PNG","modified":0,"renderable":0},{"_id":"source/images/0306_3-2/1.PNG","path":"images/0306_3-2/1.PNG","modified":0,"renderable":0},{"_id":"source/images/0306_3-2/2.PNG","path":"images/0306_3-2/2.PNG","modified":0,"renderable":0},{"_id":"source/images/0306_3-2/3.PNG","path":"images/0306_3-2/3.PNG","modified":0,"renderable":0},{"_id":"source/images/0306_3-2/4.PNG","path":"images/0306_3-2/4.PNG","modified":0,"renderable":0},{"_id":"source/images/0306_3-2/5.PNG","path":"images/0306_3-2/5.PNG","modified":0,"renderable":0},{"_id":"source/images/0401/1.PNG","path":"images/0401/1.PNG","modified":0,"renderable":0},{"_id":"source/images/0401/2.PNG","path":"images/0401/2.PNG","modified":0,"renderable":0},{"_id":"source/images/0401/3.PNG","path":"images/0401/3.PNG","modified":0,"renderable":0},{"_id":"source/images/0401/4.PNG","path":"images/0401/4.PNG","modified":0,"renderable":0},{"_id":"source/images/0401/5.PNG","path":"images/0401/5.PNG","modified":0,"renderable":0},{"_id":"source/images/0401/6.PNG","path":"images/0401/6.PNG","modified":0,"renderable":0},{"_id":"source/images/macbookair/appledeveloper.png","path":"images/macbookair/appledeveloper.png","modified":0,"renderable":0},{"_id":"source/images/macbookair/나의맥북.jpeg","path":"images/macbookair/나의맥북.jpeg","modified":0,"renderable":0},{"_id":"source/images/kaggle_final/newplot.png","path":"images/kaggle_final/newplot.png","modified":0,"renderable":0},{"_id":"source/images/kaggle_final/newplot1.png","path":"images/kaggle_final/newplot1.png","modified":0,"renderable":0},{"_id":"source/images/kaggle_final/newplot10.png","path":"images/kaggle_final/newplot10.png","modified":0,"renderable":0},{"_id":"source/images/kaggle_final/newplot11.png","path":"images/kaggle_final/newplot11.png","modified":0,"renderable":0},{"_id":"source/images/kaggle_final/newplot12.png","path":"images/kaggle_final/newplot12.png","modified":0,"renderable":0},{"_id":"source/images/kaggle_final/newplot13.png","path":"images/kaggle_final/newplot13.png","modified":0,"renderable":0},{"_id":"source/images/kaggle_final/newplot14.png","path":"images/kaggle_final/newplot14.png","modified":0,"renderable":0},{"_id":"source/images/kaggle_final/newplot15.png","path":"images/kaggle_final/newplot15.png","modified":0,"renderable":0},{"_id":"source/images/kaggle_final/newplot16.png","path":"images/kaggle_final/newplot16.png","modified":0,"renderable":0},{"_id":"source/images/kaggle_final/newplot17.png","path":"images/kaggle_final/newplot17.png","modified":0,"renderable":0},{"_id":"source/images/kaggle_final/newplot18.png","path":"images/kaggle_final/newplot18.png","modified":0,"renderable":0},{"_id":"source/images/kaggle_final/newplot19.png","path":"images/kaggle_final/newplot19.png","modified":0,"renderable":0},{"_id":"source/images/kaggle_final/newplot2.png","path":"images/kaggle_final/newplot2.png","modified":0,"renderable":0},{"_id":"source/images/kaggle_final/newplot20.png","path":"images/kaggle_final/newplot20.png","modified":0,"renderable":0},{"_id":"source/images/kaggle_final/newplot21.png","path":"images/kaggle_final/newplot21.png","modified":0,"renderable":0},{"_id":"source/images/kaggle_final/newplot22.png","path":"images/kaggle_final/newplot22.png","modified":0,"renderable":0},{"_id":"source/images/kaggle_final/newplot23.png","path":"images/kaggle_final/newplot23.png","modified":0,"renderable":0},{"_id":"source/images/kaggle_final/newplot24.png","path":"images/kaggle_final/newplot24.png","modified":0,"renderable":0},{"_id":"source/images/kaggle_final/newplot25.png","path":"images/kaggle_final/newplot25.png","modified":0,"renderable":0},{"_id":"source/images/kaggle_final/newplot26.png","path":"images/kaggle_final/newplot26.png","modified":0,"renderable":0},{"_id":"source/images/kaggle_final/newplot27.png","path":"images/kaggle_final/newplot27.png","modified":0,"renderable":0},{"_id":"source/images/kaggle_final/newplot28.png","path":"images/kaggle_final/newplot28.png","modified":0,"renderable":0},{"_id":"source/images/kaggle_final/newplot29.png","path":"images/kaggle_final/newplot29.png","modified":0,"renderable":0},{"_id":"source/images/kaggle_final/newplot3.png","path":"images/kaggle_final/newplot3.png","modified":0,"renderable":0},{"_id":"source/images/kaggle_final/newplot30.png","path":"images/kaggle_final/newplot30.png","modified":0,"renderable":0},{"_id":"source/images/kaggle_final/newplot4.png","path":"images/kaggle_final/newplot4.png","modified":0,"renderable":0},{"_id":"source/images/kaggle_final/newplot5.png","path":"images/kaggle_final/newplot5.png","modified":0,"renderable":0},{"_id":"source/images/kaggle_final/newplot6.png","path":"images/kaggle_final/newplot6.png","modified":0,"renderable":0},{"_id":"source/images/kaggle_final/newplot7.png","path":"images/kaggle_final/newplot7.png","modified":0,"renderable":0},{"_id":"source/images/kaggle_final/newplot8.png","path":"images/kaggle_final/newplot8.png","modified":0,"renderable":0},{"_id":"source/images/kaggle_final/newplot9.png","path":"images/kaggle_final/newplot9.png","modified":0,"renderable":0},{"_id":"source/images/mykaggle1/1.PNG","path":"images/mykaggle1/1.PNG","modified":0,"renderable":0},{"_id":"source/images/mykaggle1/10.PNG","path":"images/mykaggle1/10.PNG","modified":0,"renderable":0},{"_id":"source/images/mykaggle1/11.PNG","path":"images/mykaggle1/11.PNG","modified":0,"renderable":0},{"_id":"source/images/mykaggle1/12.PNG","path":"images/mykaggle1/12.PNG","modified":0,"renderable":0},{"_id":"source/images/mykaggle1/13.PNG","path":"images/mykaggle1/13.PNG","modified":0,"renderable":0},{"_id":"source/images/mykaggle1/2.PNG","path":"images/mykaggle1/2.PNG","modified":0,"renderable":0},{"_id":"source/images/mykaggle1/3.PNG","path":"images/mykaggle1/3.PNG","modified":0,"renderable":0},{"_id":"source/images/mykaggle1/4.PNG","path":"images/mykaggle1/4.PNG","modified":0,"renderable":0},{"_id":"source/images/mykaggle1/5.PNG","path":"images/mykaggle1/5.PNG","modified":0,"renderable":0},{"_id":"source/images/mykaggle1/6.PNG","path":"images/mykaggle1/6.PNG","modified":0,"renderable":0},{"_id":"source/images/mykaggle1/7.PNG","path":"images/mykaggle1/7.PNG","modified":0,"renderable":0},{"_id":"source/images/mykaggle1/8.PNG","path":"images/mykaggle1/8.PNG","modified":0,"renderable":0},{"_id":"source/images/mykaggle1/9.PNG","path":"images/mykaggle1/9.PNG","modified":0,"renderable":0},{"_id":"source/images/mykaggle2/1.PNG","path":"images/mykaggle2/1.PNG","modified":0,"renderable":0},{"_id":"source/images/mykaggle2/2.PNG","path":"images/mykaggle2/2.PNG","modified":0,"renderable":0},{"_id":"source/images/mykaggle2/3.PNG","path":"images/mykaggle2/3.PNG","modified":0,"renderable":0},{"_id":"source/images/mykaggle2/4.PNG","path":"images/mykaggle2/4.PNG","modified":0,"renderable":0},{"_id":"source/images/mykaggle2/5.PNG","path":"images/mykaggle2/5.PNG","modified":0,"renderable":0},{"_id":"source/images/mykaggle2/6.png","path":"images/mykaggle2/6.png","modified":0,"renderable":0},{"_id":"source/images/mykaggle2/7.png","path":"images/mykaggle2/7.png","modified":0,"renderable":0},{"_id":"source/images/mykaggle3/1.PNG","path":"images/mykaggle3/1.PNG","modified":0,"renderable":0},{"_id":"source/images/mykaggle3/2.PNG","path":"images/mykaggle3/2.PNG","modified":0,"renderable":0},{"_id":"source/images/mykaggle3/3.PNG","path":"images/mykaggle3/3.PNG","modified":0,"renderable":0},{"_id":"source/images/mykaggle3/4.PNG","path":"images/mykaggle3/4.PNG","modified":0,"renderable":0},{"_id":"source/images/mykaggle3/5.PNG","path":"images/mykaggle3/5.PNG","modified":0,"renderable":0},{"_id":"source/images/mykaggle3/6.PNG","path":"images/mykaggle3/6.PNG","modified":0,"renderable":0},{"_id":"source/images/mykaggle3/7.png","path":"images/mykaggle3/7.png","modified":0,"renderable":0},{"_id":"source/images/pandas/1.PNG","path":"images/pandas/1.PNG","modified":0,"renderable":0},{"_id":"source/images/plotlybar/newplot 4.png","path":"images/plotlybar/newplot 4.png","modified":0,"renderable":0},{"_id":"source/images/plotlybar/newplot.png","path":"images/plotlybar/newplot.png","modified":0,"renderable":0},{"_id":"source/images/plotlybar/newplot1.png","path":"images/plotlybar/newplot1.png","modified":0,"renderable":0},{"_id":"source/images/plotlybar/newplot2.png","path":"images/plotlybar/newplot2.png","modified":0,"renderable":0},{"_id":"source/images/plotlybar/newplot3.png","path":"images/plotlybar/newplot3.png","modified":0,"renderable":0},{"_id":"source/images/plotlybar/newplot5.png","path":"images/plotlybar/newplot5.png","modified":0,"renderable":0},{"_id":"source/images/plotlyheatmap/merge.PNG","path":"images/plotlyheatmap/merge.PNG","modified":0,"renderable":0},{"_id":"source/images/plotlyheatmap/newplot.png","path":"images/plotlyheatmap/newplot.png","modified":0,"renderable":0},{"_id":"source/images/plotlyheatmap/newplot1.png","path":"images/plotlyheatmap/newplot1.png","modified":0,"renderable":0},{"_id":"source/images/mykaggle4/1.PNG","path":"images/mykaggle4/1.PNG","modified":0,"renderable":0},{"_id":"source/images/mykaggle4/10.PNG","path":"images/mykaggle4/10.PNG","modified":0,"renderable":0},{"_id":"source/images/mykaggle4/11.png","path":"images/mykaggle4/11.png","modified":0,"renderable":0},{"_id":"source/images/mykaggle4/12.PNG","path":"images/mykaggle4/12.PNG","modified":0,"renderable":0},{"_id":"source/images/mykaggle4/13.PNG","path":"images/mykaggle4/13.PNG","modified":0,"renderable":0},{"_id":"source/images/mykaggle4/14.png","path":"images/mykaggle4/14.png","modified":0,"renderable":0},{"_id":"source/images/mykaggle4/15.PNG","path":"images/mykaggle4/15.PNG","modified":0,"renderable":0},{"_id":"source/images/mykaggle4/16.PNG","path":"images/mykaggle4/16.PNG","modified":0,"renderable":0},{"_id":"source/images/mykaggle4/17.PNG","path":"images/mykaggle4/17.PNG","modified":0,"renderable":0},{"_id":"source/images/mykaggle4/18.PNG","path":"images/mykaggle4/18.PNG","modified":0,"renderable":0},{"_id":"source/images/mykaggle4/19.PNG","path":"images/mykaggle4/19.PNG","modified":0,"renderable":0},{"_id":"source/images/mykaggle4/2.PNG","path":"images/mykaggle4/2.PNG","modified":0,"renderable":0},{"_id":"source/images/mykaggle4/20.PNG","path":"images/mykaggle4/20.PNG","modified":0,"renderable":0},{"_id":"source/images/mykaggle4/21.png","path":"images/mykaggle4/21.png","modified":0,"renderable":0},{"_id":"source/images/mykaggle4/22.PNG","path":"images/mykaggle4/22.PNG","modified":0,"renderable":0},{"_id":"source/images/mykaggle4/23.PNG","path":"images/mykaggle4/23.PNG","modified":0,"renderable":0},{"_id":"source/images/mykaggle4/24.PNG","path":"images/mykaggle4/24.PNG","modified":0,"renderable":0},{"_id":"source/images/mykaggle4/25.png","path":"images/mykaggle4/25.png","modified":0,"renderable":0},{"_id":"source/images/mykaggle4/26.PNG","path":"images/mykaggle4/26.PNG","modified":0,"renderable":0},{"_id":"source/images/mykaggle4/27.PNG","path":"images/mykaggle4/27.PNG","modified":0,"renderable":0},{"_id":"source/images/mykaggle4/28.PNG","path":"images/mykaggle4/28.PNG","modified":0,"renderable":0},{"_id":"source/images/mykaggle4/29.png","path":"images/mykaggle4/29.png","modified":0,"renderable":0},{"_id":"source/images/mykaggle4/3.PNG","path":"images/mykaggle4/3.PNG","modified":0,"renderable":0},{"_id":"source/images/mykaggle4/30.png","path":"images/mykaggle4/30.png","modified":0,"renderable":0},{"_id":"source/images/mykaggle4/31.png","path":"images/mykaggle4/31.png","modified":0,"renderable":0},{"_id":"source/images/mykaggle4/4.PNG","path":"images/mykaggle4/4.PNG","modified":0,"renderable":0},{"_id":"source/images/mykaggle4/5.png","path":"images/mykaggle4/5.png","modified":0,"renderable":0},{"_id":"source/images/mykaggle4/6.PNG","path":"images/mykaggle4/6.PNG","modified":0,"renderable":0},{"_id":"source/images/mykaggle4/7.PNG","path":"images/mykaggle4/7.PNG","modified":0,"renderable":0},{"_id":"source/images/mykaggle4/8.png","path":"images/mykaggle4/8.png","modified":0,"renderable":0},{"_id":"source/images/mykaggle4/9.PNG","path":"images/mykaggle4/9.PNG","modified":0,"renderable":0},{"_id":"source/images/plotlypie/newplot.png","path":"images/plotlypie/newplot.png","modified":0,"renderable":0},{"_id":"source/images/plotlypie/newplot1.png","path":"images/plotlypie/newplot1.png","modified":0,"renderable":0},{"_id":"source/images/plotlysunburst/datapre.PNG","path":"images/plotlysunburst/datapre.PNG","modified":0,"renderable":0},{"_id":"source/images/plotlysunburst/newplot.png","path":"images/plotlysunburst/newplot.png","modified":0,"renderable":0},{"_id":"source/images/0302_1-2/1.PNG","path":"images/0302_1-2/1.PNG","modified":0,"renderable":0},{"_id":"source/images/0302_1-2/2.PNG","path":"images/0302_1-2/2.PNG","modified":0,"renderable":0},{"_id":"source/images/0302_1-2/3.PNG","path":"images/0302_1-2/3.PNG","modified":0,"renderable":0},{"_id":"source/images/0302_1-2/4.PNG","path":"images/0302_1-2/4.PNG","modified":0,"renderable":0},{"_id":"source/images/0302_1-2/5.PNG","path":"images/0302_1-2/5.PNG","modified":0,"renderable":0},{"_id":"source/images/0302_1-2/6.PNG","path":"images/0302_1-2/6.PNG","modified":0,"renderable":0},{"_id":"source/images/0302_1-2/7.PNG","path":"images/0302_1-2/7.PNG","modified":0,"renderable":0},{"_id":"source/images/python_basic_1/venv.PNG","path":"images/python_basic_1/venv.PNG","modified":0,"renderable":0},{"_id":"source/images/python_basic_1/venv1.PNG","path":"images/python_basic_1/venv1.PNG","modified":0,"renderable":0},{"_id":"source/images/0205/firstpost/3cat.jpg","path":"images/0205/firstpost/3cat.jpg","modified":0,"renderable":0},{"_id":"source/images/boostcourse_01/1.PNG","path":"images/boostcourse_01/1.PNG","modified":0,"renderable":0},{"_id":"source/images/boostcourse_01/10.PNG","path":"images/boostcourse_01/10.PNG","modified":0,"renderable":0},{"_id":"source/images/boostcourse_01/11.PNG","path":"images/boostcourse_01/11.PNG","modified":0,"renderable":0},{"_id":"source/images/boostcourse_01/12.PNG","path":"images/boostcourse_01/12.PNG","modified":0,"renderable":0},{"_id":"source/images/boostcourse_01/13.PNG","path":"images/boostcourse_01/13.PNG","modified":0,"renderable":0},{"_id":"source/images/boostcourse_01/14.PNG","path":"images/boostcourse_01/14.PNG","modified":0,"renderable":0},{"_id":"source/images/boostcourse_01/15.PNG","path":"images/boostcourse_01/15.PNG","modified":0,"renderable":0},{"_id":"source/images/boostcourse_01/17.PNG","path":"images/boostcourse_01/17.PNG","modified":0,"renderable":0},{"_id":"source/images/boostcourse_01/18.PNG","path":"images/boostcourse_01/18.PNG","modified":0,"renderable":0},{"_id":"source/images/boostcourse_01/19.PNG","path":"images/boostcourse_01/19.PNG","modified":0,"renderable":0},{"_id":"source/images/boostcourse_01/16.PNG","path":"images/boostcourse_01/16.PNG","modified":0,"renderable":0},{"_id":"source/images/boostcourse_01/2.PNG","path":"images/boostcourse_01/2.PNG","modified":0,"renderable":0},{"_id":"source/images/boostcourse_01/21.PNG","path":"images/boostcourse_01/21.PNG","modified":0,"renderable":0},{"_id":"source/images/boostcourse_01/22.PNG","path":"images/boostcourse_01/22.PNG","modified":0,"renderable":0},{"_id":"source/images/boostcourse_01/20.PNG","path":"images/boostcourse_01/20.PNG","modified":0,"renderable":0},{"_id":"source/images/boostcourse_01/23.PNG","path":"images/boostcourse_01/23.PNG","modified":0,"renderable":0},{"_id":"source/images/boostcourse_01/24.PNG","path":"images/boostcourse_01/24.PNG","modified":0,"renderable":0},{"_id":"source/images/boostcourse_01/3.PNG","path":"images/boostcourse_01/3.PNG","modified":0,"renderable":0},{"_id":"source/images/boostcourse_01/25.PNG","path":"images/boostcourse_01/25.PNG","modified":0,"renderable":0},{"_id":"source/images/boostcourse_01/4.PNG","path":"images/boostcourse_01/4.PNG","modified":0,"renderable":0},{"_id":"source/images/boostcourse_01/5.PNG","path":"images/boostcourse_01/5.PNG","modified":0,"renderable":0},{"_id":"source/images/boostcourse_01/7.PNG","path":"images/boostcourse_01/7.PNG","modified":0,"renderable":0},{"_id":"source/images/boostcourse_01/6.PNG","path":"images/boostcourse_01/6.PNG","modified":0,"renderable":0},{"_id":"source/images/boostcourse_01/8.PNG","path":"images/boostcourse_01/8.PNG","modified":0,"renderable":0},{"_id":"source/images/boostcourse_01/9.PNG","path":"images/boostcourse_01/9.PNG","modified":0,"renderable":0},{"_id":"source/images/boostcourse_01/26.PNG","path":"images/boostcourse_01/26.PNG","modified":0,"renderable":0}],"Cache":[{"_id":"node_modules/hexo-theme-icarus/layout/comment/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1641212421527},{"_id":"node_modules/hexo-theme-icarus/layout/donate/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1641212421532},{"_id":"node_modules/hexo-theme-icarus/layout/search/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1641212421543},{"_id":"node_modules/hexo-theme-icarus/layout/share/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1641212421547},{"_id":"node_modules/hexo-theme-icarus/layout/misc/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1641212421538},{"_id":"node_modules/hexo-theme-icarus/include/schema/comment/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1641212421441},{"_id":"node_modules/hexo-theme-icarus/include/schema/misc/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1641212421503},{"_id":"node_modules/hexo-theme-icarus/include/schema/donate/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1641212421478},{"_id":"node_modules/hexo-theme-icarus/include/schema/search/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1641212421513},{"_id":"node_modules/hexo-theme-icarus/include/schema/share/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1641212421522},{"_id":"source/about/index.md","hash":"e7c6180fceb054d3fcae4abbf653217b00593730","modified":1641479423296},{"_id":"source/.DS_Store","hash":"c535694871d259969769326dc962014a195385fc","modified":1641318149311},{"_id":"source/_drafts/mykaggle.md","hash":"6e883791f79ec854e1dc65f56876dec290e6637d","modified":1641212408045},{"_id":"source/_posts/0101_github_blog.md","hash":"cccdee52312c0e7d22817bfa4a4d44474e29f9e0","modified":1641212408046},{"_id":"source/_posts/0000_first-post.md","hash":"8c7fe3aeb350cb8f59bad2ca370965d1276f698e","modified":1641212408046},{"_id":"source/_posts/0103_github_blog_post.md","hash":"340fc90ab746248b448ec49391780f34d50fefef","modified":1641212408046},{"_id":"source/_posts/0203_python_numpy.md","hash":"a520f77e7264e2877adecb5b676abbaed686bf4c","modified":1641212408046},{"_id":"source/_posts/0102_gihub_blog_theme.md","hash":"221bdd4f4c0ee18a0c7bdd2a5b7594274783a178","modified":1641212408046},{"_id":"source/_posts/0202_python_colab.md","hash":"2fad2e6904a4a7548560e1a123ff09fad07b8015","modified":1641212408046},{"_id":"source/_posts/0201_python_base.md","hash":"55b76c3e24f441f5a3e19b0dc8b537cc9757e210","modified":1641212408046},{"_id":"source/_posts/0204_python_pandas.md","hash":"ccad6edb16f04acf1f0e8baa7797b8d87c454425","modified":1641212408046},{"_id":"source/_posts/Dash.md","hash":"bad41d46694370f74529aa949cab513f63672741","modified":1641212408047},{"_id":"source/_posts/0205_python_visualization.md","hash":"3e42f28b512f9424af8611fd8388edca9f62ea81","modified":1641212408047},{"_id":"source/_posts/0206_ML_DecisionTree.md.md","hash":"9e6dca920e78c8b52c1239f44b4ea68c1125708f","modified":1641212408047},{"_id":"source/_posts/kaggle2_원형그래프.md","hash":"936b635c2154e82a2f1418b356ceb0f7380dd24d","modified":1641212408048},{"_id":"source/_posts/kaggle1_막대그래프(수직).md","hash":"002f35909c3bf944de6f1eaa48d7415348a792e5","modified":1641212408048},{"_id":"source/_posts/kaggle4_막대그래프(수평).md","hash":"06b3451b79052de7739c065e0180b2887c0b7cef","modified":1641212408048},{"_id":"source/_posts/kaggle5_막대그래프(수직).md","hash":"24dea683f46b63826d84fbbe7e5b697dec7af40c","modified":1641212408048},{"_id":"source/_posts/kaggle3_산점도막대그래프.md","hash":"b8a5b159f8ad5cfb27bf3fea9ed7a30f9faf2ab0","modified":1641212408048},{"_id":"source/_posts/kaggle8_bar_h_v.md","hash":"a9c3f8fbc136601b4442e64e101778ace2436e52","modified":1641212408048},{"_id":"source/_posts/kaggle6_막대그래프(for문).md","hash":"2a4a4b4e7036e819d1af598d0f7c739f48ed242f","modified":1641212408048},{"_id":"source/_posts/mykaggle1.md","hash":"f58bdb24af54b9d4e8b52ce9c7ed3aafdebb5846","modified":1641212408049},{"_id":"source/_posts/kaggle7_treemap.md","hash":"31237567ca84f8f4f9a7c358e054f5c9c35dd84c","modified":1641212408048},{"_id":"source/_posts/macbook.md","hash":"5a074253937542889ba1a22e4ac16cb9792c0db0","modified":1641479045736},{"_id":"source/_posts/plotly_bar.md","hash":"7a912f80e9d96dbb1fd51f2000ae00bf0f218749","modified":1641212408049},{"_id":"source/_posts/mykaggle3_Heatmap.md","hash":"64b83ba96a9a43d96a677e90f7d022748176516c","modified":1641212408049},{"_id":"source/_posts/mykaggle2.md","hash":"474e7a39f237f6d4fd57de7b2024f37a583ba96c","modified":1641212408049},{"_id":"source/_posts/plotly_heatmap.md","hash":"d90bc7875005011dfe56849542ebda1e54bdef2d","modified":1641212408050},{"_id":"source/_posts/mykaggle4.md","hash":"17347c58b0caf6694fbee664a14083ee5a29421b","modified":1641212408049},{"_id":"source/_posts/pandas_01.md","hash":"6c84741faa903ef6480ae2f4325f9f51db7bf89e","modified":1641212408049},{"_id":"source/_posts/python00_.md","hash":"927ca12f35acb70f841639212843ad01b7be04d4","modified":1641212408050},{"_id":"source/_posts/plotly_pie.md","hash":"a453d1d0495bb0aa582ae76ec56d07e9e017f772","modified":1641212408050},{"_id":"source/_posts/python03_dic.md","hash":"80979121e0abba508c0315f964c65f2eaac79d26","modified":1641212408050},{"_id":"source/_posts/plotly_sunburst.md","hash":"97f59399b4ff6bb3b9233e44737b25c2fb249ade","modified":1641212408050},{"_id":"source/_posts/python05_반복문조건문.md","hash":"6159eca9afabb5f3f14ca37561c510f44a22abfd","modified":1641212408050},{"_id":"source/_posts/python02_tuple.md","hash":"084a1ae7d820711563bedc783c25b93f191b14bf","modified":1641212408050},{"_id":"source/_posts/python01_list.md","hash":"c8c3249e106cafeb2238382bef18688f0c757b57","modified":1641212408050},{"_id":"source/_posts/python06_listcomprehension.md","hash":"8e0e287b9a2d1e64574b57ba3104f4cedbf98fe5","modified":1641212408050},{"_id":"source/_posts/python04_set.md","hash":"1f3f15c9650ce368d99a5602f9d6fb2ce2e3fb47","modified":1641212408050},{"_id":"source/_posts/python07_method.md","hash":"0a6cb827fc2b2ac0796147111e6dc8c549838aeb","modified":1641212408051},{"_id":"source/_posts/python08_class.md","hash":"ee57149c45c6eb190e09bb59061618c990a9faca","modified":1641222460495},{"_id":"source/images/.DS_Store","hash":"a531e8f61a508f0cc6708a8f89d8cf80c39d5270","modified":1641476416142},{"_id":"source/images/0101/01_02.png","hash":"631645ff9672b9479e413dac177950e53d9b60b0","modified":1641212408052},{"_id":"source/images/0101/01_01.PNG","hash":"defca1c623982cceec3d1b1303232e40d609e863","modified":1641212408051},{"_id":"source/images/0101/01_03.png","hash":"f57e896aa141b90c0634012e8f3f64e4a46ad277","modified":1641212408052},{"_id":"source/images/0101/01_05.png","hash":"e988b29c1cf2a5c2bbefcbd8167029e34cc8175a","modified":1641212408054},{"_id":"source/images/0101/01_10.png","hash":"cd016d2a3f16d7572b0dff0c35f7289c3ceb2b4d","modified":1641212408057},{"_id":"source/images/0101/01_06.png","hash":"606e8851043f6fa262974b5a10511436455da7c9","modified":1641212408055},{"_id":"source/images/0101/01_07.png","hash":"f3190b4138210873620d54027274e17e7826e11b","modified":1641212408055},{"_id":"source/images/0101/01_11.PNG","hash":"3c456f273887e814e332f4570a81f66e0c75c53a","modified":1641212408057},{"_id":"source/images/0202/01_02_python.PNG","hash":"f76ab05bcd73f29cd9556435270926109b189a7c","modified":1641212408061},{"_id":"source/images/0103/pstmd설정.PNG","hash":"51e158ccf31dcf4ca8aa7fc6eb82307719d7df69","modified":1641212408060},{"_id":"source/images/0202/01_03_python.PNG","hash":"b28e34f83e4f25d833ccedf51d476a562601d2aa","modified":1641212408062},{"_id":"source/images/0102/02_02.png","hash":"959122ac2099861e3260c5c01543bf872e0e288a","modified":1641212408059},{"_id":"source/images/0202/01_05_python.PNG","hash":"c86c9eb1da4b23644154568e38eff9c5e67b8f9c","modified":1641212408062},{"_id":"source/images/0202/01_04_python.PNG","hash":"1a2c72cc3d402adc1d8eba71d38d6c42e293fc9b","modified":1641212408062},{"_id":"source/images/0202/01_08_python.PNG","hash":"4e2b36dab668f3d7b43aa44ab65507403d1996c0","modified":1641212408063},{"_id":"source/images/0301_1-1/2.png","hash":"e9346a8ad03d95122ea23e59ab3eec1fde299b00","modified":1641212408069},{"_id":"source/images/0301_1-1/3.png","hash":"e1effe9666867ce318404bc0229790ae9372f459","modified":1641212408069},{"_id":"source/images/0301_1-1/1.png","hash":"73662d59c2ef3a505479da5bead081689615c4ab","modified":1641212408069},{"_id":"source/images/0301_1-1/4.png","hash":"070320135bb5731579fb58ddd6bbf9189f7619e9","modified":1641212408069},{"_id":"source/images/0205/output_10_1.png","hash":"d5a07b6ea54311d302752fe20dd0f4fbb173364f","modified":1641212408064},{"_id":"source/images/0301_1-1/5.png","hash":"83ca5dd2c0a60de7fa55721ed5919188a5c3fa9e","modified":1641212408069},{"_id":"source/images/0205/output_14_1.png","hash":"439f6e0fc38d8b9d79e762b96cc8bd0ddf03cec9","modified":1641212408064},{"_id":"source/images/0205/output_16_1.png","hash":"27cfe8de7a07b881f63667758839edc0f397d29d","modified":1641212408064},{"_id":"source/images/0205/output_18_0.png","hash":"89620100d736de6a096978e1a73a53d96d2e6e9c","modified":1641212408065},{"_id":"source/images/0205/output_19_0.png","hash":"c3e74a32fa6506d9d5b042c6776a9c91a3789a0c","modified":1641212408065},{"_id":"source/images/0205/output_22_0.png","hash":"a242b009cbdff9af7a7b33444e3ddd0f210b2704","modified":1641212408065},{"_id":"source/images/0205/output_1_0.png","hash":"111d90dd3dfbc50a7e583cd178b35995c059eb0a","modified":1641212408065},{"_id":"source/images/0205/output_25_0.png","hash":"dd37d052607dca55f2c92f513553a70e3193be79","modified":1641212408065},{"_id":"source/images/0205/output_27_0.png","hash":"5fa1b3ec60972e4f3a42634a0e9de2349b3fe2f8","modified":1641212408066},{"_id":"source/images/0205/output_2_0.png","hash":"f774ed81be870d4c7f6345868d0739aa4159a3ee","modified":1641212408066},{"_id":"source/images/0202/01_06_python.PNG","hash":"f04ae2e1f2f4634292c58fd261eb6c63b03abaec","modified":1641212408063},{"_id":"source/images/0205/output_31_0.png","hash":"613812a14ca90a0d119f28b1177602411262579f","modified":1641212408066},{"_id":"source/images/0205/output_33_0.png","hash":"28677cf2991ade9aed2a9bf6100394b9c3676271","modified":1641212408066},{"_id":"source/images/0205/output_35_0.png","hash":"a342dfdb2c9346a232a21fa27b3e7062d314c9de","modified":1641212408067},{"_id":"source/images/0205/output_34_0.png","hash":"7b7f4713c3ff4b8888d5e8d5da895bb91042f64d","modified":1641212408066},{"_id":"source/images/0205/output_37_1.png","hash":"b20cb5200628aaa3b647949e85a098300eead46a","modified":1641212408067},{"_id":"source/images/0205/output_39_0.png","hash":"f466ee8dd5f4e5edf561d5d5b9f9a4ec4ee5017c","modified":1641212408067},{"_id":"source/images/0205/output_43_0.png","hash":"99297904f605e16da99d5d56daf91daf9a5a138d","modified":1641212408067},{"_id":"source/images/0205/output_30_0.png","hash":"864affbf1d94c9fe1ca786399b9d23060d3927ba","modified":1641212408066},{"_id":"source/images/0205/output_44_0.png","hash":"8064f9bfb6837f0d6a8fa01848e8a9ece57338bb","modified":1641212408067},{"_id":"source/images/0205/output_52_0.png","hash":"1fac2ac9707498927e0511588188357896ab2099","modified":1641212408068},{"_id":"source/images/0205/output_49_0.png","hash":"f13fa4b236c171561028b44432be61c4c657ded5","modified":1641212408067},{"_id":"source/images/0205/output_62_0.png","hash":"bd2642b09a4011c735f886aae0b89f0440e61017","modified":1641212408068},{"_id":"source/images/0205/output_64_0.png","hash":"e8caaa4ea6fe58048008864bbaf962110fc1ebbd","modified":1641212408068},{"_id":"source/images/0205/output_61_0.png","hash":"3357ecc4f51a4890b903a3e89cb05c3e93d26f89","modified":1641212408068},{"_id":"source/images/0205/output_60_0.png","hash":"a0c40d1f93f27924c9f2dc816a580e70d1ec54d8","modified":1641212408068},{"_id":"source/images/0205/output_66_0.png","hash":"4dd2014d987f41ca061dce1c3a3e26a61f1c3d0b","modified":1641212408068},{"_id":"source/images/0205/output_67_1.png","hash":"a3b6709bc04efb002e19a228d07acaf2e806deb1","modified":1641212408068},{"_id":"source/images/0206/iris1.png","hash":"5b824f11edeec13bacdefd48fece795251ce60d8","modified":1641212408069},{"_id":"source/images/0206/iris2.png","hash":"62b82a9c52f8bc5c984620fd67e3aea401b074e3","modified":1641212408069},{"_id":"source/images/0304_2-1/4.PNG","hash":"2ca9d3073e6215d9d437bda48426c1930a19a453","modified":1641212408073},{"_id":"source/images/0304_2-1/3.PNG","hash":"51ef60c6ff289b9126d9b41a0f3eb65ebbc67326","modified":1641212408073},{"_id":"source/images/0304_2-1/1.PNG","hash":"cf123784d64986053523470dff50631ccc8d27e6","modified":1641212408073},{"_id":"source/images/0304_2-1/2.PNG","hash":"02d603fa3e3cfe40ed00ed7e4901b0d2376aca39","modified":1641212408073},{"_id":"source/images/0205/output_59_0.png","hash":"bfded2012aa8b0206cf74cbda99f2cd1c1953e62","modified":1641212408068},{"_id":"source/images/0304_2-1/6.PNG","hash":"2bf09a3aef2981865c0a2587273747874b5c95ca","modified":1641212408073},{"_id":"source/images/0304_2-1/5.PNG","hash":"2d1f53393ddb20c98fb4ac927f13819a235470d6","modified":1641212408073},{"_id":"source/images/0304_2-1/9.PNG","hash":"b83275ddff2ac0e62fc91c498d2e2c7d9d43adb3","modified":1641212408074},{"_id":"source/images/0303_1-3/1.PNG","hash":"a0ae24d78ba1e3bfe00ca63a1bf25fb992de9787","modified":1641212408071},{"_id":"source/images/0303_1-3/10.PNG","hash":"e72f3b415e7e5be162bd3c38090096476583f948","modified":1641212408071},{"_id":"source/images/0303_1-3/2.PNG","hash":"1528bb8ca0280f48aa712d2ae4bf391b7219eeef","modified":1641212408071},{"_id":"source/images/0304_2-1/8.PNG","hash":"b9157534045c5bf1bf3c7d705f31978cfe2c2fc9","modified":1641212408074},{"_id":"source/images/0304_2-1/7.PNG","hash":"24a44c9a8fd4cd47dfcda79e8285153f9e774948","modified":1641212408073},{"_id":"source/images/0303_1-3/3.PNG","hash":"ad3206658305810f3bea02cb8a9c58aa3ab86275","modified":1641212408071},{"_id":"source/images/0303_1-3/4.PNG","hash":"0991343775338fd3f311e608cc0e45886553397b","modified":1641212408072},{"_id":"source/images/0303_1-3/7.PNG","hash":"44912c6f6b9ba1d8f036ca4d9931668cdf34ab7d","modified":1641212408072},{"_id":"source/images/0303_1-3/8.PNG","hash":"ef7c9d775c11ed2f0d8b28aed8218d2a6ebad7ce","modified":1641212408072},{"_id":"source/images/0303_1-3/5.PNG","hash":"974beb34565be31012983160dc58b05057e46e5f","modified":1641212408072},{"_id":"source/images/0303_1-3/6.PNG","hash":"bbdedbbfa83e378898045507b68a239cb0a6b97f","modified":1641212408072},{"_id":"source/images/0305_3-1/1.PNG","hash":"47744335fe0113f91a1cf47d0d752310da849481","modified":1641212408074},{"_id":"source/images/0305_3-1/2.PNG","hash":"df39921f583d3e78bdc003cfad44737a11f51c89","modified":1641212408074},{"_id":"source/images/0303_1-3/9.PNG","hash":"ae01a8ef80dafe8be792d533a7a0ef844154e17f","modified":1641212408072},{"_id":"source/images/0305_3-1/3.PNG","hash":"59742990d6ee188c7beac24270e691deff083cf3","modified":1641212408074},{"_id":"source/images/0305_3-1/4.PNG","hash":"7e99ccf5d4d3f929f38d055ddb1e9619814f8302","modified":1641212408074},{"_id":"source/images/0307_3-4/1.PNG","hash":"ccb0b3e58ce71b015e6f349bc167e7b98b12a0ea","modified":1641212408076},{"_id":"source/images/0307_3-4/2.PNG","hash":"78cf622589ed2b149969deff613993e43ee6596f","modified":1641212408076},{"_id":"source/images/0306_3-2/1.PNG","hash":"5e7333fc305ac9bd4e29b1bef9d6e54a18d33368","modified":1641212408075},{"_id":"source/images/0305_3-1/5.PNG","hash":"b2afb5545dc32c5dededd7a7a506155c26172653","modified":1641212408074},{"_id":"source/images/0305_3-1/6.PNG","hash":"1c211d1595dd91f92d8682abab41025162fb2b42","modified":1641212408074},{"_id":"source/images/0306_3-2/2.PNG","hash":"146bdb4da0f54cddd9fedd89440f6909e7aa2938","modified":1641212408075},{"_id":"source/images/0306_3-2/3.PNG","hash":"7baabc0c0ddd65d0c249f7e01b1dba2bf4c3c0e3","modified":1641212408075},{"_id":"source/images/0307_3-4/3.PNG","hash":"95e0e5437c9ffcfe02be6c74074baa0c65536592","modified":1641212408076},{"_id":"source/images/0306_3-2/4.PNG","hash":"586f6eeaa310a4b243fdffd698e3f0eeff88febc","modified":1641212408075},{"_id":"source/images/0401/1.PNG","hash":"fd7f43f3b5578d45de4e0bd562ba9993cc4d2831","modified":1641212408076},{"_id":"source/images/0401/2.PNG","hash":"a8c85de6aecb6a7c6da440d8f01dce3172d1347d","modified":1641212408077},{"_id":"source/images/0401/4.PNG","hash":"a5a261f8ec0c164a2f0ad7d846b9c2e7ec841dc0","modified":1641212408077},{"_id":"source/images/0401/5.PNG","hash":"e1ea048cd9e79ba163d72cd7ac6df15bbd33d293","modified":1641212408077},{"_id":"source/images/0401/6.PNG","hash":"c585cd60d8172bbf9e64796fe18784142fceacb4","modified":1641212408077},{"_id":"source/images/0306_3-2/5.PNG","hash":"817b5c251c03218cd865005a2da56d58bbefd575","modified":1641212408076},{"_id":"source/images/0401/3.PNG","hash":"e3c5966da764866cb6b06f593ec147fff47f2aab","modified":1641212408077},{"_id":"source/images/macbookair/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1641277647696},{"_id":"source/images/kaggle_final/newplot1.png","hash":"fbcd0fc2f1ab5361623dc5df3caa8534dff2fe1a","modified":1641212408080},{"_id":"source/images/kaggle_final/newplot10.png","hash":"ecee609503e505828b19b4a072863a373b915d7a","modified":1641212408081},{"_id":"source/images/kaggle_final/newplot11.png","hash":"19d2b1454baa5c06d197e70647749e97530069f5","modified":1641212408081},{"_id":"source/images/kaggle_final/newplot12.png","hash":"46627f5d81fa19636171b73298eaec6366445791","modified":1641212408081},{"_id":"source/images/kaggle_final/newplot13.png","hash":"09eb446cc2f5db1a49d80f268d4bab6fa41464cd","modified":1641212408081},{"_id":"source/images/kaggle_final/newplot16.png","hash":"1481c24824f43a2992a4848ebadb8b01fb4fe59b","modified":1641212408082},{"_id":"source/images/kaggle_final/newplot.png","hash":"b163cfe5920760393dd5e1c441cdae6dede13567","modified":1641212408080},{"_id":"source/images/kaggle_final/newplot15.png","hash":"1b23cf442f816c653f04dade6df1e0be06b350ad","modified":1641212408082},{"_id":"source/images/kaggle_final/newplot17.png","hash":"ef1f6b66fa9185a916ae0225f2a3cfb08e6c4735","modified":1641212408083},{"_id":"source/images/kaggle_final/newplot18.png","hash":"37472c0bb2fe9336daaf9c63ba8583f8d34d8d10","modified":1641212408083},{"_id":"source/images/kaggle_final/newplot20.png","hash":"1a3268257529a15a41ada7b898f09af69e4fbcd6","modified":1641212408084},{"_id":"source/images/kaggle_final/newplot21.png","hash":"0a6ea9c2194830036a7586eb31c1e5a32945e4f5","modified":1641212408084},{"_id":"source/images/kaggle_final/newplot22.png","hash":"44835150c6609531bc44454841dcdd74e60dc011","modified":1641212408084},{"_id":"source/images/kaggle_final/newplot23.png","hash":"dadd34c3cec21876f3c62c9fbba259b0589e5b8e","modified":1641212408084},{"_id":"source/images/kaggle_final/newplot24.png","hash":"e26b29e47d2332ee8703bb1eaa3d1409e91fc192","modified":1641212408084},{"_id":"source/images/kaggle_final/newplot25.png","hash":"4d89a161322057a00fe76c3952227218f09dafc3","modified":1641212408085},{"_id":"source/images/kaggle_final/newplot19.png","hash":"c32523833ea204fbc3ef7e2d02b2d89d95f6e6fe","modified":1641212408083},{"_id":"source/images/kaggle_final/newplot2.png","hash":"c7489e288a2724c0bb2d753f6e22adcf4bfaff30","modified":1641212408083},{"_id":"source/images/kaggle_final/newplot26.png","hash":"c6f8352e6b7e7b97d848babbf95e38332b143415","modified":1641212408085},{"_id":"source/images/kaggle_final/newplot27.png","hash":"c7ffb8505a055d13a7673d623b7c1a83a1e386b5","modified":1641212408086},{"_id":"source/images/kaggle_final/newplot4.png","hash":"83ef7979c4299fbd9edac2b6756fc0a52b02dcde","modified":1641212408088},{"_id":"source/images/kaggle_final/newplot28.png","hash":"0087ba488f8286a4010f20f80afd9b8be1011774","modified":1641212408086},{"_id":"source/images/kaggle_final/newplot29.png","hash":"08b644c9ae0d2a8d3cb80dfc279439f69cc48e7b","modified":1641212408086},{"_id":"source/images/kaggle_final/newplot5.png","hash":"853413810ae8b81dfad986f4225b2c5ddb1f7ad6","modified":1641212408088},{"_id":"source/images/kaggle_final/newplot8.png","hash":"5ebe1f3aec9a9de78f71d9bccd26908490f89f49","modified":1641212408089},{"_id":"source/images/kaggle_final/newplot6.png","hash":"88528d8683a0cc13a9355227c09f4984bf19a48c","modified":1641212408088},{"_id":"source/images/kaggle_final/newplot9.png","hash":"3b893294a57eace80fce202a1f54e44ff11fcd8c","modified":1641212408089},{"_id":"source/images/kaggle_final/newplot3.png","hash":"c69d607dbc2ed8d31c2ce1491e0323ba3dc7fde4","modified":1641212408087},{"_id":"source/images/kaggle_final/newplot7.png","hash":"ccb1cf97006fbd71cf3a9886d89cabd291595f6e","modified":1641212408089},{"_id":"source/images/mykaggle1/10.PNG","hash":"b066d1ff094df3e728d3054efbfd8e0c7ee31e53","modified":1641212408091},{"_id":"source/images/mykaggle1/12.PNG","hash":"9af23ba69396b2d271dbddc59c685e9063ca21df","modified":1641212408091},{"_id":"source/images/mykaggle1/13.PNG","hash":"c1045c994ed2a7233c487e8efd69cfc39f05803a","modified":1641212408092},{"_id":"source/images/mykaggle1/1.PNG","hash":"135a3dfcd88d7d50525ec824b7c03e884a1a9960","modified":1641212408091},{"_id":"source/images/mykaggle1/2.PNG","hash":"d2bd3754e08de1c0cbc64c4b0e6a4508a0529a23","modified":1641212408093},{"_id":"source/images/mykaggle1/11.PNG","hash":"17c39758c889abc0271791aca72d40a0b58a4a3f","modified":1641212408091},{"_id":"source/images/mykaggle1/4.PNG","hash":"5ddc3939cd6f8807d86f7df0f3d4dd04306c47ef","modified":1641212408093},{"_id":"source/images/mykaggle1/5.PNG","hash":"f3af27ead65fbc5024e282d76e7cd382ec2cff87","modified":1641212408093},{"_id":"source/images/mykaggle1/7.PNG","hash":"b17a94d1aa0f0de1b03809f2c42deab8ecca1f09","modified":1641212408093},{"_id":"source/images/mykaggle1/9.PNG","hash":"34760c118e5d231bb747774f7810be52faad0ce7","modified":1641212408094},{"_id":"source/images/mykaggle1/3.PNG","hash":"134aef0381192aedd97d9918b645897568728a5d","modified":1641212408093},{"_id":"source/images/mykaggle1/6.PNG","hash":"64943d5c71d7016f8c1f5424dd7f86643a2a7be8","modified":1641212408093},{"_id":"source/images/mykaggle2/2.PNG","hash":"b53d9dc10648cb4786e237594c8ed132c412a855","modified":1641212408094},{"_id":"source/images/mykaggle2/1.PNG","hash":"f33529462e794b2ec03b9116d175b3f3f2d8c151","modified":1641212408094},{"_id":"source/images/mykaggle1/8.PNG","hash":"50ba6aa2ed3ff7067052c8fcd6662ef9ef587ce7","modified":1641212408093},{"_id":"source/images/mykaggle2/4.PNG","hash":"9bf755e4bf677ad7acb71a42a3bd582736c74aae","modified":1641212408094},{"_id":"source/images/mykaggle2/3.PNG","hash":"f70489ce97d2f5ba70c42f2c4c1119d3b84e5c82","modified":1641212408094},{"_id":"source/images/mykaggle2/7.png","hash":"fd241949880d638b6a784efcd4f589050e2463fd","modified":1641212408094},{"_id":"source/images/mykaggle3/1.PNG","hash":"4b26e5127cec83a25c7d0a53e905a2586d1870ed","modified":1641212408095},{"_id":"source/images/mykaggle2/5.PNG","hash":"96f8fcb62b483c8c36e351d46ce7cc691ebd0baf","modified":1641212408094},{"_id":"source/images/mykaggle2/6.png","hash":"91ff8fa084c4797faa155d0eb77b08f7481bf9d3","modified":1641212408094},{"_id":"source/images/mykaggle3/2.PNG","hash":"29a8d5baf27e67338ca6837ddc59e622d6c7b241","modified":1641212408095},{"_id":"source/images/mykaggle3/3.PNG","hash":"ebbc5aab9f7a7a08b76556ff6ad552f137a6bb1d","modified":1641212408095},{"_id":"source/images/mykaggle3/6.PNG","hash":"52587280279e6ebe06a01310c0662ea9108b0462","modified":1641212408096},{"_id":"source/images/mykaggle3/5.PNG","hash":"014915f5bd2979172fe0232df98b8d329a2f9332","modified":1641212408096},{"_id":"source/images/mykaggle3/7.png","hash":"754efe2b6e8aea05271329ed30c0675a4ead939a","modified":1641212408096},{"_id":"source/images/mykaggle3/4.PNG","hash":"1960300cbb0fdd620c714dd14c7a9f6522a3761a","modified":1641212408096},{"_id":"source/images/plotlybar/newplot 4.png","hash":"4d89a161322057a00fe76c3952227218f09dafc3","modified":1641212408101},{"_id":"source/images/pandas/1.PNG","hash":"23ee9dce95f60e381283e6f371b6b0b862926572","modified":1641212408101},{"_id":"source/images/plotlybar/newplot1.png","hash":"83ef7979c4299fbd9edac2b6756fc0a52b02dcde","modified":1641212408102},{"_id":"source/images/plotlybar/newplot2.png","hash":"ccb1cf97006fbd71cf3a9886d89cabd291595f6e","modified":1641212408102},{"_id":"source/images/plotlybar/newplot5.png","hash":"1ebffe2950da4865d316fe0d5855bcf95fda97c4","modified":1641212408102},{"_id":"source/images/plotlyheatmap/merge.PNG","hash":"101cee5cd5aa4cab81964857f19c8bb52fc9fb42","modified":1641212408102},{"_id":"source/images/plotlyheatmap/newplot.png","hash":"19d2b1454baa5c06d197e70647749e97530069f5","modified":1641212408102},{"_id":"source/images/plotlybar/newplot.png","hash":"b163cfe5920760393dd5e1c441cdae6dede13567","modified":1641212408101},{"_id":"source/images/plotlybar/newplot3.png","hash":"1b23cf442f816c653f04dade6df1e0be06b350ad","modified":1641212408102},{"_id":"source/images/mykaggle4/10.PNG","hash":"61b6f15aa8bc3284897115a98a99dae919ad0270","modified":1641212408096},{"_id":"source/images/mykaggle4/13.PNG","hash":"1f9d3f4eb6447ab3b4270abf0c89b2d5637d9ce6","modified":1641212408097},{"_id":"source/images/mykaggle4/12.PNG","hash":"5df7ef28b6c87ee46c1c0d01eb797f690d882068","modified":1641212408097},{"_id":"source/images/mykaggle4/11.png","hash":"8f14d484a1992497e5313321d6e0d16b43e571f0","modified":1641212408097},{"_id":"source/images/mykaggle4/1.PNG","hash":"90628e2d7c16404742e61132dbb7ec64c1dae668","modified":1641212408096},{"_id":"source/images/mykaggle4/18.PNG","hash":"8951322e23c2528e7bf5c1fb0a51dd0e3727d6c7","modified":1641212408097},{"_id":"source/images/mykaggle4/15.PNG","hash":"85065cd9385eb02a1028b815f0ad77e37f67c761","modified":1641212408097},{"_id":"source/images/mykaggle4/14.png","hash":"46559e6e0ec7daeafbe0bdd898785c690a5e0e06","modified":1641212408097},{"_id":"source/images/plotlyheatmap/newplot1.png","hash":"5ebe1f3aec9a9de78f71d9bccd26908490f89f49","modified":1641212408103},{"_id":"source/images/mykaggle4/19.PNG","hash":"3ce76bdc0f126ed45438f6416a6af7fe6bdebd1e","modified":1641212408098},{"_id":"source/images/mykaggle4/2.PNG","hash":"8e59297983864cc86ac39574075827a15925b5db","modified":1641212408098},{"_id":"source/images/mykaggle4/16.PNG","hash":"8b9ccdcb03bdd3654e37036208559888a3520b00","modified":1641212408097},{"_id":"source/images/mykaggle4/17.PNG","hash":"49459e51a904c38aeee70373c2609450966a2ac3","modified":1641212408097},{"_id":"source/images/mykaggle4/20.PNG","hash":"83c079534cf00aed07e82dd3c883d45b91fe8bec","modified":1641212408098},{"_id":"source/images/mykaggle4/21.png","hash":"c2fef4a0ce5249d13856011761d60dec54f1752f","modified":1641212408098},{"_id":"source/images/mykaggle4/22.PNG","hash":"f057cb3adccf40f06cf3d52161c92c658d134dd7","modified":1641212408098},{"_id":"source/images/mykaggle4/24.PNG","hash":"9a9ee15569cee2cc7f61d0e4fce11dd36ef1fe97","modified":1641212408098},{"_id":"source/images/mykaggle4/27.PNG","hash":"fdb3d6c149b9d7d347fd189528f9476304b38dd1","modified":1641212408099},{"_id":"source/images/mykaggle4/26.PNG","hash":"de136811779862129511f2ffb02405050c45b418","modified":1641212408099},{"_id":"source/images/mykaggle4/28.PNG","hash":"4f76c5ea9c80095d566923ee3eca6956bab4cf08","modified":1641212408099},{"_id":"source/images/mykaggle4/23.PNG","hash":"23057c498252dce39cf72b8d982c2bb0bbe416e0","modified":1641212408098},{"_id":"source/images/mykaggle4/29.png","hash":"4047badd6466ca1b8483a0c84f9418f8be5d340b","modified":1641212408099},{"_id":"source/images/mykaggle4/3.PNG","hash":"aa5acd2442a82053f5761dbebfc815264b4ac7c2","modified":1641212408099},{"_id":"source/images/mykaggle4/25.png","hash":"c7152cb2793b0ef01a2db771603e00c003dc6752","modified":1641212408099},{"_id":"source/images/mykaggle4/6.PNG","hash":"b90a4b37d71dd1e8425123af4aa0a4c2f6ccfdd2","modified":1641212408100},{"_id":"source/images/mykaggle4/5.png","hash":"2cfdd498a1644eada64d38528da4d3207d9ff357","modified":1641212408100},{"_id":"source/images/mykaggle4/7.PNG","hash":"3a70aeaa6969594bf2a31a10bc7c44125317e03f","modified":1641212408100},{"_id":"source/images/mykaggle4/30.png","hash":"1f9d135df2e96f4736cf9c8f0c5617465be0a952","modified":1641212408100},{"_id":"source/images/mykaggle4/9.PNG","hash":"7cbc0cbb94d753f9470b0d6a4bd7afa95e36b6e0","modified":1641212408101},{"_id":"source/images/mykaggle4/8.png","hash":"e04a7c21b3e48dc05eaf6efff77ff520e06c0057","modified":1641212408101},{"_id":"source/images/mykaggle4/4.PNG","hash":"59da2b293d173592b22aeaa31a085d6ac9022a98","modified":1641212408100},{"_id":"source/images/mykaggle4/31.png","hash":"772131d56ca024a0752c4e029ce7ea3ca94335b1","modified":1641212408100},{"_id":"source/images/plotlypie/newplot.png","hash":"853413810ae8b81dfad986f4225b2c5ddb1f7ad6","modified":1641212408103},{"_id":"source/images/plotlypie/newplot1.png","hash":"09eb446cc2f5db1a49d80f268d4bab6fa41464cd","modified":1641212408103},{"_id":"source/images/plotlysunburst/datapre.PNG","hash":"b17c2c6563c1a3befa69326e8702e099a858e3ba","modified":1641212408103},{"_id":"source/images/0302_1-2/3.PNG","hash":"8e94df1f0947ec7e88937cdf93dc25af0aebaa15","modified":1641212408070},{"_id":"source/images/0302_1-2/2.PNG","hash":"e279f73ff90dae015b9761587242eb3b38686e00","modified":1641212408070},{"_id":"source/images/0302_1-2/1.PNG","hash":"6f8536cf3559e824b7b38befc5555921af1813f2","modified":1641212408070},{"_id":"source/images/0302_1-2/4.PNG","hash":"1f005371e812b6c6be9b2f9e7819cd64916a5010","modified":1641212408070},{"_id":"source/images/0302_1-2/5.PNG","hash":"99abc40d60f0173029221365c34816380b8c96ef","modified":1641212408070},{"_id":"source/images/python_basic_1/venv1.PNG","hash":"020aa7a06820e178df37c16ab1533aad5ae9685d","modified":1641212408104},{"_id":"source/images/0302_1-2/7.PNG","hash":"9d1888d0d4f55b693481d5d829069ec8641fdc36","modified":1641212408071},{"_id":"node_modules/hexo-theme-icarus/CONTRIBUTING.md","hash":"70254c6778c1e41bb2ff222bbf3a70b2239b9bc1","modified":1641212421599},{"_id":"source/images/0302_1-2/6.PNG","hash":"a877fbba8ecfdfa3007bcd6d0878f3e5a7b32135","modified":1641212408071},{"_id":"source/images/0205/firstpost/3cat.jpg","hash":"683a675cb39cd3bc335b49001f113b31a0e6806e","modified":1641212408064},{"_id":"node_modules/hexo-theme-icarus/include/dependency.js","hash":"d30dbcefd58619f6705d6369b644bc7ba44d2421","modified":1641212421558},{"_id":"node_modules/hexo-theme-icarus/include/register.js","hash":"a974b56a1fbb254f1ae048cc2221363faaccec25","modified":1641212421564},{"_id":"node_modules/hexo-theme-icarus/package.json","hash":"653d306a010f669192883483414da500d48cf592","modified":1641212421577},{"_id":"node_modules/hexo-theme-icarus/LICENSE","hash":"86037e5335a49321fa73b7815cab542057fac944","modified":1641212421548},{"_id":"source/images/python_basic_1/venv.PNG","hash":"3f1f0558b27475a97da495a1932cf9f0f9526992","modified":1641212408104},{"_id":"node_modules/hexo-theme-icarus/README.md","hash":"2dd0997639a8cf8a83c69115de30afa858e3da96","modified":1641212421599},{"_id":"node_modules/hexo-theme-icarus/include/config.js","hash":"1ff0f174e9670074ad2bee890d5b6da486800c9a","modified":1641212421556},{"_id":"node_modules/hexo-theme-icarus/languages/en.yml","hash":"3d674204d9f723c829226da745afddd180c1131d","modified":1641212421614},{"_id":"node_modules/hexo-theme-icarus/languages/de.yml","hash":"78421f09961ca0b24756a0688fb2cb2e2696e25f","modified":1641212421614},{"_id":"node_modules/hexo-theme-icarus/languages/fr.yml","hash":"06d5c819d6108a42b28cff7b52e5410d0bed55d1","modified":1641212421615},{"_id":"node_modules/hexo-theme-icarus/languages/id.yml","hash":"5e48b1d62378cadeb64b88349477726a5c1bae47","modified":1641212421615},{"_id":"node_modules/hexo-theme-icarus/languages/ja.yml","hash":"801d9930fef48d6a3f80470d5bed4f3eb78147e6","modified":1641212421615},{"_id":"node_modules/hexo-theme-icarus/languages/pl.yml","hash":"2e7debb44cd91096f30efc87bf8d6b1d0d0214c9","modified":1641212421616},{"_id":"node_modules/hexo-theme-icarus/languages/ko.yml","hash":"e3374265377809c1518114cf352b595840c0b416","modified":1641212421615},{"_id":"node_modules/hexo-theme-icarus/languages/ru.yml","hash":"9d91358c2acbe7a0f2a25daf7f65b999ff32d068","modified":1641212421616},{"_id":"node_modules/hexo-theme-icarus/languages/tk.yml","hash":"ca583168bd2025124a1cd0e977da475d7a7496fd","modified":1641212421616},{"_id":"node_modules/hexo-theme-icarus/languages/pt-BR.yml","hash":"ee8f73350e4c6e2f63b7fc72b34472a6b1e21244","modified":1641212421616},{"_id":"node_modules/hexo-theme-icarus/languages/es.yml","hash":"38579b8fad4b6997362acc770615bcd85ff20f68","modified":1641212421614},{"_id":"node_modules/hexo-theme-icarus/languages/vn.yml","hash":"5f2fffa642110c81d8f529949711c9d19ad6bbbe","modified":1641212421617},{"_id":"node_modules/hexo-theme-icarus/languages/zh-CN.yml","hash":"02475ba14afc70dfeaf5678467cee307835e4efa","modified":1641212421617},{"_id":"node_modules/hexo-theme-icarus/languages/tr.yml","hash":"74e438bb42619666050192d6f3dc39023777eee2","modified":1641212421617},{"_id":"node_modules/hexo-theme-icarus/layout/layout.jsx","hash":"57492334a6b31bf3b8c9024ef2511a6780483200","modified":1641443557448},{"_id":"node_modules/hexo-theme-icarus/layout/categories.jsx","hash":"b8ad43e28a4990d222bfbb95b032f88555492347","modified":1641212421589},{"_id":"node_modules/hexo-theme-icarus/layout/archive.jsx","hash":"05677e93d4a43f417dbbf0d63ca37a99e6349e3b","modified":1641212421586},{"_id":"node_modules/hexo-theme-icarus/layout/index.jsx","hash":"0a84a2348394fa9fc5080dd396bd28d357594f47","modified":1641212421593},{"_id":"node_modules/hexo-theme-icarus/layout/category.jsx","hash":"fd15e4eac32de9ac8687aeb3dbe179ab61375700","modified":1641212421589},{"_id":"node_modules/hexo-theme-icarus/scripts/index.js","hash":"0c666db6fcb4ffc4d300f4e108c00ee42b1cbbe6","modified":1641212421561},{"_id":"node_modules/hexo-theme-icarus/include/migration/head.js","hash":"269ba172013cbd2f10b9bc51af0496628081329b","modified":1641212421559},{"_id":"node_modules/hexo-theme-icarus/languages/zh-TW.yml","hash":"a6826e0c8cdb9ad286324b682b466a9e2ad78e6f","modified":1641212421617},{"_id":"node_modules/hexo-theme-icarus/layout/post.jsx","hash":"d26c2db57e5a88d6483a03aeb51cda9d191d8cea","modified":1641212421595},{"_id":"node_modules/hexo-theme-icarus/layout/page.jsx","hash":"d26c2db57e5a88d6483a03aeb51cda9d191d8cea","modified":1641212421594},{"_id":"node_modules/hexo-theme-icarus/include/migration/v3_v4.js","hash":"9faf2184d7fe87debfbe007f3fc9079dcbcafcfe","modified":1641212421565},{"_id":"node_modules/hexo-theme-icarus/include/migration/v2_v3.js","hash":"3ccb2d2ce11018bebd7172da66faecc3983bff00","modified":1641212421565},{"_id":"node_modules/hexo-theme-icarus/layout/tag.jsx","hash":"d2f18cac32ca2725d34ccff3f2051c623be6c892","modified":1641212421598},{"_id":"node_modules/hexo-theme-icarus/layout/tags.jsx","hash":"2c42cb64778235dd220c563a27a92108ddc50cc4","modified":1641212421598},{"_id":"node_modules/hexo-theme-icarus/include/style/article.styl","hash":"105c983871b6c9148d97a0f756886e56411572bd","modified":1641212421604},{"_id":"node_modules/hexo-theme-icarus/include/schema/config.json","hash":"ac633f9d349bca4f089d59d2c3738b57376f1b31","modified":1641212421574},{"_id":"node_modules/hexo-theme-icarus/include/style/base.styl","hash":"895352e51967491ac548e69effcd09341d1e2c92","modified":1641444707497},{"_id":"node_modules/hexo-theme-icarus/include/style/codeblock.styl","hash":"30bee4cf6792e9665eb648cc20b352d9eaff1207","modified":1641212421606},{"_id":"node_modules/hexo-theme-icarus/include/style/card.styl","hash":"f78674422eb408cd17c17bbdc3ee1ebe4a453e05","modified":1641212421606},{"_id":"node_modules/hexo-theme-icarus/include/style/button.styl","hash":"0fb35b4786be1b387c751fa2849bc71523fcedd4","modified":1641212421605},{"_id":"node_modules/hexo-theme-icarus/include/style/plugin.styl","hash":"679b61b5fc5b3281735a21c37aeb64229d9c51ea","modified":1641212421610},{"_id":"node_modules/hexo-theme-icarus/include/style/footer.styl","hash":"a4ad715dee38b249538ac6cce94efc9b355a904b","modified":1641212421609},{"_id":"node_modules/hexo-theme-icarus/include/style/donate.styl","hash":"8d0af00628c13134b5f30a558608e7bebf18c2ec","modified":1641212421608},{"_id":"node_modules/hexo-theme-icarus/include/style/pagination.styl","hash":"b81bcd7ff915b4e9299533addc01bc4575ec35e3","modified":1641212421609},{"_id":"node_modules/hexo-theme-icarus/include/style/helper.styl","hash":"9f3393e6122cc9f351091bfab960674e962da343","modified":1641212421609},{"_id":"node_modules/hexo-theme-icarus/include/style/navbar.styl","hash":"ecc73c8ad504c0fa4bb910eb51500c14e0a8d662","modified":1641212421609},{"_id":"node_modules/hexo-theme-icarus/include/style/responsive.styl","hash":"207083fe287612cddee6608b541861b14ac8de81","modified":1641212421611},{"_id":"node_modules/hexo-theme-icarus/include/style/timeline.styl","hash":"ea61798a09bffdda07efb93c2ff800b63bddc4c4","modified":1641212421612},{"_id":"node_modules/hexo-theme-icarus/include/style/search.styl","hash":"416737e1da4e7e907bd03609b0fee9e2aacfe56c","modified":1641212421611},{"_id":"node_modules/hexo-theme-icarus/include/style/widget.styl","hash":"c746902251136544eb3fe523235b3183f4189460","modified":1641212421612},{"_id":"node_modules/hexo-theme-icarus/include/util/console.js","hash":"59cf9d277d3ac85a496689bd811b1c316001641d","modified":1641212421557},{"_id":"node_modules/hexo-theme-icarus/layout/common/comment.jsx","hash":"427089c33002707b76e2f38709459a6824fd0f9b","modified":1641212421589},{"_id":"node_modules/hexo-theme-icarus/layout/common/footer.jsx","hash":"baa8e40e036a3ec0114d96893b708435104b4ba9","modified":1641212421592},{"_id":"node_modules/hexo-theme-icarus/layout/common/donates.jsx","hash":"889fb0a7ccc502f0a43b4a18eb330e351e50493c","modified":1641212421591},{"_id":"node_modules/hexo-theme-icarus/layout/common/article.jsx","hash":"16513ab1745533d0f4cdbdee323339ebab6d02c1","modified":1641212421587},{"_id":"node_modules/hexo-theme-icarus/layout/common/navbar.jsx","hash":"fcd9fd4624dee49207ef09ea2a1c63f524f3710c","modified":1641212421594},{"_id":"node_modules/hexo-theme-icarus/layout/common/search.jsx","hash":"6f244a37293031670a2964fe424ecd062e591d7b","modified":1641212421597},{"_id":"node_modules/hexo-theme-icarus/layout/common/plugins.jsx","hash":"f6826c1a5f5f59f4a0aa00c63bdb0ad4ff4eab69","modified":1641212421594},{"_id":"node_modules/hexo-theme-icarus/layout/common/share.jsx","hash":"c9fb0319ad5e5a10ad3636b26a6c2afed14c590f","modified":1641212421597},{"_id":"node_modules/hexo-theme-icarus/layout/common/head.jsx","hash":"5625c4040a885aaf150f35fe9d07d844d7f94a27","modified":1641212421593},{"_id":"node_modules/hexo-theme-icarus/layout/common/scripts.jsx","hash":"0fe1fddab431fb9f63906d8c480d5cd6b33abc32","modified":1641212421596},{"_id":"node_modules/hexo-theme-icarus/layout/plugin/back_to_top.jsx","hash":"7fc0c5aaabd7d0eaff04cb68ec139442dc3414e8","modified":1641212421588},{"_id":"node_modules/hexo-theme-icarus/layout/common/widgets.jsx","hash":"26cad55fefeae60b21db1966f4cdd2396ff3fd53","modified":1641443557450},{"_id":"node_modules/hexo-theme-icarus/layout/widget/profile.jsx","hash":"d3b6094ae5898958ce8e6eed1ae1f5a4b61f21b8","modified":1641442156258},{"_id":"node_modules/hexo-theme-icarus/source/css/default.styl","hash":"adadf8e29d1bb2a1e5d3ee4398e00125a8ce6ef1","modified":1641439746712},{"_id":"node_modules/hexo-theme-icarus/layout/plugin/animejs.jsx","hash":"e2aa27c3501a58ef1e91e511557b77395c2c02aa","modified":1641212421585},{"_id":"node_modules/hexo-theme-icarus/source/img/logo.svg","hash":"e9b5c1438ddb576693a15d0713b2a1d9ceda4be9","modified":1641212421612},{"_id":"node_modules/hexo-theme-icarus/source/img/favicon.svg","hash":"16fd847265845063a16596761cddb32926073dd2","modified":1641212421612},{"_id":"node_modules/hexo-theme-icarus/source/css/cyberpunk.styl","hash":"ae17d3528df0c3f089df14a06b7bd82f1bc5fed9","modified":1641443302084},{"_id":"node_modules/hexo-theme-icarus/source/css/style.styl","hash":"5b9815586e993a6ccbe8cdcfc0c65ea38fc315ac","modified":1641212421612},{"_id":"node_modules/hexo-theme-icarus/source/img/razor-bottom-black.svg","hash":"a3eda07b1c605b456da9cdf335a1075db5e5d72c","modified":1641212421612},{"_id":"node_modules/hexo-theme-icarus/source/img/avatar.png","hash":"0d8236dcca871735500e9d06bbdbe0853ed6775b","modified":1641212421602},{"_id":"node_modules/hexo-theme-icarus/source/img/og_image.png","hash":"b03f163096ca9c350ec962feee9836277b5c2509","modified":1641212421603},{"_id":"node_modules/hexo-theme-icarus/source/js/back_to_top.js","hash":"d91f10c08c726135a13dfa1f422c49d8764ef03f","modified":1641212421551},{"_id":"node_modules/hexo-theme-icarus/source/js/column.js","hash":"0baee024ab67474c073a4c41b495f3e7f0df4505","modified":1641212421552},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/comment.json","hash":"7d744391a8abee9a2c450b6fdd36a3866a488025","modified":1641212421572},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/donates.json","hash":"ae86e6f177bedf4afbe638502c12635027539305","modified":1641212421574},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/head.json","hash":"98889f059c635e6bdbd51effd04cf1cf44968a66","modified":1641212421575},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/navbar.json","hash":"6691e587284c4cf450e0288680d5ff0f3565f090","modified":1641212421576},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/article.json","hash":"8d78149f44629d0848921c6fb9c008b03cef3116","modified":1641212421571},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/footer.json","hash":"09d706cbb94d6da9a0d15c719ce7139325cae1c7","modified":1641212421575},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/plugins.json","hash":"6036a805749816416850d944f7d64aaae62e5e75","modified":1641212421577},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/providers.json","hash":"97ec953d497fb53594227ae98acaef8a8baa91da","modified":1641212421581},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/widgets.json","hash":"cadd9dc942740ecd5037d3943e72f8b6a8399bbe","modified":1641212421584},{"_id":"node_modules/hexo-theme-icarus/source/img/razor-top-black.svg","hash":"201f1171a43ce667a39091fe47c0f278857f18f0","modified":1641212421613},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/sidebar.json","hash":"eb241beaec4c73e3085dfb3139ce72e827e20549","modified":1641212421583},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/search.json","hash":"985fbcbf47054af714ead1a124869d54f2a8b607","modified":1641212421582},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/share.json","hash":"cf4f9ff4fb27c3541b35f57db355c228fa6873e4","modified":1641212421582},{"_id":"node_modules/hexo-theme-icarus/include/schema/widget/profile.json","hash":"690ee1b0791cab47ea03cf42b5b4932ed2aa5675","modified":1641212421579},{"_id":"node_modules/hexo-theme-icarus/include/schema/plugin/back_to_top.json","hash":"dc0febab7e7b67075d0ad3f80f5ec8b798b68dea","modified":1641212421571},{"_id":"node_modules/hexo-theme-icarus/include/schema/plugin/animejs.json","hash":"e62ab6e20bd8862efa1ed32e7c0db0f8acbcfdec","modified":1641212421567},{"_id":"node_modules/hexo-theme-icarus/source/js/animation.js","hash":"12cedd5caaf9109eed97e50eeab8f883f6e49be3","modified":1641212421550},{"_id":"node_modules/hexo-theme-icarus/source/js/main.js","hash":"13e4b1c4fa287f3db61aae329ad093a81992f23d","modified":1641212421563},{"_id":"source/_posts/Newbies_as_a_Data_Scientist_in_EastAsia.md","hash":"4e4e8bfd8658becedd7effb76a9775e86c864ecf","modified":1641212408047},{"_id":"source/images/3cat.jpg","hash":"021ad062bb8f10a1c4ab44c69d5ce1054233fead","modified":1641212408078},{"_id":"source/images/0101/01_09.png","hash":"018d24ffc5dd155a7fca9a881a667f626c40a245","modified":1641212408057},{"_id":"source/images/0202/01_01_python.PNG","hash":"f3fce4402641520429f465c8cc9f1b38889fcbef","modified":1641212408061},{"_id":"source/images/0202/01_07_python.PNG","hash":"9be32af2407539d51165ac3e9cec26d562c54c6e","modified":1641212408063},{"_id":"source/images/0102/02_01.png","hash":"baf63cb28376e19c341afa6c14755ac75bf86470","modified":1641212408058},{"_id":"source/images/kaggle_final/newplot14.png","hash":"1b2916df7807fed52856a8cd65ea322101648fd8","modified":1641212408082},{"_id":"source/images/plotlysunburst/newplot.png","hash":"1b2916df7807fed52856a8cd65ea322101648fd8","modified":1641212408104},{"_id":"source/images/0102/02_03.png","hash":"024193bece57a8a57a7fe47a26c6dd91f2b713aa","modified":1641212408060},{"_id":"source/images/flower.jpg","hash":"3203096f40ec57e045df20ebfc3541aea2af1ba1","modified":1641212408080},{"_id":"source/images/0101/01_04.png","hash":"0879b9c8cdea9eef7fc869a910e15f97015d17c4","modified":1641212408054},{"_id":"source/images/0101/01_08.png","hash":"f6565f492596566065c9c90c5af0131b8a6ec15e","modified":1641212408056},{"_id":"source/images/kaggle_final/newplot30.png","hash":"fd930bda8941a1e586d9a93aa77e2bd909c96bac","modified":1641212408088},{"_id":"source/images/me.jpg","hash":"6b83deebb8b579dcc3f8cc5c42f53ab48deef297","modified":1641212408091},{"_id":"source/images/macbookair/appledeveloper.png","hash":"a41d687bb0f83e01679ad1688c2d15a3f8799d1e","modified":1641280130674},{"_id":"source/images/macbookair/나의맥북.jpeg","hash":"d04fbcc75becaa40bface63c7fdbd7022cdb63a9","modified":1641275670626},{"_id":"source/images/곰돌.png","hash":"310ef69fe631e295fe1710cd3c0e7c683c968e2f","modified":1641212408123},{"_id":"public/js/algolia.js","hash":"a8df0c0abeeb4ee1d2d720161f3aea7339380704","modified":1641444711523},{"_id":"public/js/insight.js","hash":"86bbdb7305d9bf19ad62d2ca2cf169fc8d9f9d31","modified":1641444711523},{"_id":"public/js/google_cse.js","hash":"1a9881669dfdeb2b3214074eee0d3e01e52db2c4","modified":1641444711523},{"_id":"public/js/toc.js","hash":"da6fb757a1b083b8ed138bf29aad3a7bf8ec4f11","modified":1641444711523},{"_id":"public/content.json","hash":"67c94c88186f3b25d1457ff32e1b37251de3a448","modified":1641479426909},{"_id":"public/manifest.json","hash":"6d1289d2144cebc87a08913088b5383c55e81e5b","modified":1641444711523},{"_id":"public/2021/12/06/python00/index.html","hash":"72aeb854155dae8afcb8dd26242aa9a2f66175b4","modified":1641444711523},{"_id":"public/2021/12/06/python02-tuple/index.html","hash":"7bb02e940d943ed717494684e44c90392065e99c","modified":1641444711523},{"_id":"public/categories/First-Post/index.html","hash":"553520186ed095c00b657f0be9d6358ef75b8b94","modified":1641479049763},{"_id":"public/archives/2021/10/index.html","hash":"2b7310d9ee1517a72c19134bc2debda599c5b034","modified":1641479049763},{"_id":"public/archives/2021/12/page/2/index.html","hash":"880f897470187c0f1fbd1a32d184a28e013333e5","modified":1641479049763},{"_id":"public/archives/2022/01/index.html","hash":"ca26b799c865472592b3ef6c0def90561d39709a","modified":1641479049763},{"_id":"public/archives/2022/index.html","hash":"e56f10a234eb0b46d554f0d25ec463979db0a450","modified":1641479049763},{"_id":"public/archives/2021/11/page/3/index.html","hash":"6bbee3a98c86898211a696578458af9918d42f88","modified":1641479049763},{"_id":"public/about/index.html","hash":"2ab31226dcd59c037d9f3c4c9d8a63916af95c9d","modified":1641479426909},{"_id":"public/2022/01/04/macbook/index.html","hash":"5adbc9eeac6bb94ab53629ede91157956e51c670","modified":1641478816296},{"_id":"public/2021/12/09/python08-class/index.html","hash":"4da5fff84e3ed0c5991fd20fe46a047368476af6","modified":1641479049763},{"_id":"public/2021/12/08/python06-listcomprehension/index.html","hash":"77729144695e2e06a14535c421dc1aa5b8b930a9","modified":1641479049763},{"_id":"public/2021/12/08/python07-method/index.html","hash":"b523458f4c64ba7c1f801775ab5cd3af277bb6e2","modified":1641479049763},{"_id":"public/2021/12/07/python05-반복문조건문/index.html","hash":"0ea73a667fbc361d41b1ceeefebb4aada6b89d02","modified":1641479049763},{"_id":"public/2021/12/06/python01-list/index.html","hash":"703228ba6a0283483833e8f14e83d9dd4dc0fd67","modified":1641444711523},{"_id":"public/2021/12/06/python03-dic/index.html","hash":"4336499e31fb4696141c736e938a58939093d44c","modified":1641444711523},{"_id":"public/2021/12/06/python04-set/index.html","hash":"cb34b1725c38efa3eb91ba1189d31d16e9ee0f04","modified":1641479049763},{"_id":"public/2021/11/28/Newbies-as-a-Data-Scientist-in-EastAsia/index.html","hash":"cc4b0b94cfdc7d34be8296a3f408ae8376ea5bea","modified":1641479049763},{"_id":"public/2021/12/01/Dash/index.html","hash":"4386917772141914a1ca9f221c67d398d058a862","modified":1641479049763},{"_id":"public/2021/12/03/pandas-01/index.html","hash":"aae7124efa7773680f409f4e6b70bbfcd514b236","modified":1641479049763},{"_id":"public/2021/11/28/plotly-heatmap/index.html","hash":"7091ca61ec61d1a81121822d212741ef72575c26","modified":1641479049763},{"_id":"public/2021/11/28/plotly-sunburst/index.html","hash":"c8e8c72406fadfaf38635cbb97edc98ec8ebd806","modified":1641479049763},{"_id":"public/2021/11/17/mykaggle4/index.html","hash":"590d46c491df2d76f9b2d3795e5634d44aa42e77","modified":1641479049763},{"_id":"public/2021/11/16/mykaggle3-Heatmap/index.html","hash":"ef68a7aaf947fbcbc33dd85aee4e7880d5e2301e","modified":1641444711523},{"_id":"public/2021/11/28/plotly-pie/index.html","hash":"d0d7f6b8f2137992cd93a159ec9601b465a8e3f9","modified":1641479049763},{"_id":"public/2021/11/28/plotly-bar/index.html","hash":"7e951de9cd2a0f24fbc7409e2be04a639e941665","modified":1641479049763},{"_id":"public/2021/11/15/mykaggle2/index.html","hash":"fd2a7078c126013369472df1ad627135e2c25127","modified":1641444711523},{"_id":"public/2021/11/14/mykaggle1/index.html","hash":"5fd97a017cfd06fb0f99645718eed86ac260ce66","modified":1641444711523},{"_id":"public/2021/11/10/kaggle8-bar-h-v/index.html","hash":"f10ce96b3c7989e944c0ce2b31ff93b89518d501","modified":1641444711523},{"_id":"public/2021/11/09/kaggle6-막대그래프-for문/index.html","hash":"3eca87fdcd4e84351f4be6d1f85bff79c0da40ce","modified":1641444711523},{"_id":"public/2021/11/09/kaggle7-treemap/index.html","hash":"0f11392da373187216f38e8c75cc58afa27a14b7","modified":1641444711523},{"_id":"public/2021/11/08/kaggle4-막대그래프-수평/index.html","hash":"42473fcb62b2c493df7594363327326ce038a408","modified":1641444711523},{"_id":"public/2021/11/07/kaggle3-산점도막대그래프/index.html","hash":"27326be578d0a5b0d2e566ed393e3acca5d55eb8","modified":1641444711523},{"_id":"public/2021/11/07/kaggle1-막대그래프-수직/index.html","hash":"78166abb491f06520cf44988e4c2d4c3ca6d6d81","modified":1641444711523},{"_id":"public/2021/11/09/kaggle5-막대그래프-수직/index.html","hash":"e662f08fb3f5b3ecc95c378b737a32830b048d5f","modified":1641444711523},{"_id":"public/2021/11/07/kaggle2-원형그래프/index.html","hash":"3c97ebdd8cb870f1c56659b59b46509fa6d64a0e","modified":1641444711523},{"_id":"public/2021/11/04/0206-ML-DecisionTree-md/index.html","hash":"1cdec084120a4649a7bed50152ce644a26ca90a6","modified":1641479049763},{"_id":"public/2021/11/03/0205-python-visualization/index.html","hash":"dd2c2618bcc7a25b21359b6943590648416804a5","modified":1641479049763},{"_id":"public/2021/11/02/0203-python-numpy/index.html","hash":"0cb50de1e9ec93647ff927ea4a7f771580ef4173","modified":1641479049763},{"_id":"public/2021/11/02/0204-python-pandas/index.html","hash":"0dcdfe6ee30f321a770b09fadcd7f23397b47578","modified":1641479049763},{"_id":"public/2021/11/01/0201-python-base/index.html","hash":"6341ce76733937375792cbb8d66d6a2134f9445b","modified":1641479049763},{"_id":"public/2021/11/01/0202-python-colab/index.html","hash":"6bf36a78970f54f2540bd32cbb4b0a2051f282e3","modified":1641479049763},{"_id":"public/2021/10/29/0103-github-blog-post/index.html","hash":"484fa3a367d35f7bdcf90cf56153c958df1a37cd","modified":1641479049763},{"_id":"public/2021/10/28/0101-github-blog/index.html","hash":"9d4af4b72bc9594e02df9976015e1c1ce81224f9","modified":1641479049763},{"_id":"public/2021/10/28/0000-first-post/index.html","hash":"0e096b835bcdf0c4033674f0ebc91812343e4237","modified":1641479049763},{"_id":"public/2021/10/28/0102-gihub-blog-theme/index.html","hash":"664db86805daac06efeb407fdb1243b71ecd62b8","modified":1641479049763},{"_id":"public/categories/Blog-setting/index.html","hash":"f6e05aa12698530e4fd03ee761985d3e46dc72b9","modified":1641479049763},{"_id":"public/categories/Blog-setting/Hexo/index.html","hash":"76d53b240922de12f57c7d20bd8c88026f469753","modified":1641479049763},{"_id":"public/categories/파이썬/index.html","hash":"3eeab401445b6b8c45a8f2092333f0f5a5fbebb3","modified":1641479049763},{"_id":"public/categories/파이썬/page/2/index.html","hash":"c00b1c181feaabc085eba62b4e7255a4aa44a561","modified":1641479049763},{"_id":"public/categories/머신러닝/index.html","hash":"63624d0285d57d54997f3289c050cd7e9adee613","modified":1641479049763},{"_id":"public/categories/kaggle-필사/index.html","hash":"31cb377c74c2448c04284b8e0bd1b469813f5ea2","modified":1641479049763},{"_id":"public/categories/kaggle-필사/page/2/index.html","hash":"5461fc59847f452f8ec1cff3bf9b5a607a376598","modified":1641479049763},{"_id":"public/categories/파이썬/Python-기초/index.html","hash":"0162823307a91920eec725454d7a704891f00605","modified":1641479049763},{"_id":"public/categories/Project/index.html","hash":"c08ea319e9d4269d3c008e500a0fe7c1674e8db4","modified":1641479049763},{"_id":"public/categories/파이썬/Python-Setting/index.html","hash":"ead61a31cf0dbd9a258346af99a8bee72757e10e","modified":1641479049763},{"_id":"public/categories/파이썬/Python-Pandas/index.html","hash":"c20f62e7447ade24ed3e0ffce5e57c1447474a8f","modified":1641479049763},{"_id":"public/categories/mac/index.html","hash":"21d392cb3a5326a8576e9e08f04e54ac0e0bfb82","modified":1641478816296},{"_id":"public/categories/파이썬/Python-Visualization/index.html","hash":"4063cecfe8303bc013d0c0501e8a384e97299c94","modified":1641479049763},{"_id":"public/categories/파이썬/Python-Plotly/index.html","hash":"07905d83c410950174889894e1542b539bba22bd","modified":1641479049763},{"_id":"public/categories/파이썬/Python-heroku/index.html","hash":"b91e2be06a3ee84d92839d5e936c47e4ff22105a","modified":1641479049763},{"_id":"public/categories/Project/Kaggle-Competition/index.html","hash":"237c73b7d919de82e1b8bc931e3a0df924bb4ae7","modified":1641479049763},{"_id":"public/archives/index.html","hash":"4354b871844fa60c0ac643884d72035af0060b5b","modified":1641479049763},{"_id":"public/archives/page/2/index.html","hash":"7f40b3385f43bf96952d8630e136fd9c4dcc40ba","modified":1641479049763},{"_id":"public/archives/page/3/index.html","hash":"11b3e9c7af2b84627d0569a5ce16ed1d9f94cbbe","modified":1641479049763},{"_id":"public/archives/page/4/index.html","hash":"e316bec1771571415f4b07c41f54ebc0593f4153","modified":1641479049763},{"_id":"public/archives/2021/page/2/index.html","hash":"eb40ece3cea4cb9956656fccaae30d51240419f0","modified":1641479049763},{"_id":"public/archives/2021/index.html","hash":"0f78eed5527e0f013ec7c2f72be3c176c3b5d948","modified":1641479049763},{"_id":"public/archives/2021/page/4/index.html","hash":"414115588b7007300e42f8fd3e366514d3322754","modified":1641479049763},{"_id":"public/archives/2021/11/index.html","hash":"f6f64b0b45fa300ac04f3ae25378876f12fe98ee","modified":1641479049763},{"_id":"public/archives/2021/page/3/index.html","hash":"362df69cc93dce16534468142e062d3c81132ab9","modified":1641479049763},{"_id":"public/archives/2021/12/index.html","hash":"f22f9507c04501e5822543a5c74cb7c307bc4463","modified":1641479049763},{"_id":"public/archives/2021/11/page/2/index.html","hash":"bbe453503da3d7e6ae234d288faed28c39b3f641","modified":1641479049763},{"_id":"public/page/2/index.html","hash":"50053412fd91890e567ff9e2796f37413891424c","modified":1641479049763},{"_id":"public/index.html","hash":"a5d79b955e4344379e040da0d6eb369bbd9e0734","modified":1641479049763},{"_id":"public/page/4/index.html","hash":"1bac5de71ac069c4009de9c29a1f9cf9b3a7f589","modified":1641479049763},{"_id":"public/page/3/index.html","hash":"b49dd8bc72fe8ed307d85b9435cefe7123543399","modified":1641479049763},{"_id":"public/tags/Node-js/index.html","hash":"90f5d7486a375e545ef8be22d0809e2222b5aea9","modified":1641479049763},{"_id":"public/tags/kaggle-plotly/index.html","hash":"e34cf44acd9940b25b276272322883e00838a6b8","modified":1641479049763},{"_id":"public/tags/python-coding-study/index.html","hash":"ca05ea07e96b39a1c08324f204a377e1ce2abf29","modified":1641479049763},{"_id":"public/tags/markdown-python-pycharm-numpy/index.html","hash":"cc1c0a3d8bb39dd787c8c2c9cc41ff615aab05af","modified":1641479049763},{"_id":"public/tags/markdown-python-pycharm/index.html","hash":"2aad5609af96a57cf7e460947f92b54f440afbb3","modified":1641479049763},{"_id":"public/tags/kaggle-plotly/page/2/index.html","hash":"d415e61f7488f5b6a7105fba64b44d34a8a1c5ec","modified":1641479049763},{"_id":"public/tags/github-hexo/index.html","hash":"513e2e4d91e2df73c186ca74bbd52e991fe25816","modified":1641479049763},{"_id":"public/tags/markdown-python-pycharm-pandas/index.html","hash":"a77fc6ee1e4804fe5890642d9debf9746c9bda80","modified":1641479049763},{"_id":"public/tags/markdown-python-pycharm-visualization/index.html","hash":"fb63e4f48c965884641428e63781191f0cad39fa","modified":1641479049763},{"_id":"public/tags/machine-learning-decision-tree/index.html","hash":"5547c6759203e589ee8152f618473f50020b4593","modified":1641479049763},{"_id":"public/tags/python-Heroku-Dashboard/index.html","hash":"3b0696d1cb5651c6e395a29eb95d60e81051bc6a","modified":1641479049763},{"_id":"public/tags/kaggle-plotly-pie-bar/index.html","hash":"fdbc52dc5f2cdbdd4fba93ef2fd86b1129faa1ea","modified":1641479049763},{"_id":"public/tags/Mac-Macbook/index.html","hash":"c14172c2aed3d2dd711434c04d68c5bbb9eeeaf9","modified":1641478816296},{"_id":"public/tags/plotly-bar-graph-bar/index.html","hash":"a09a240d2a7e66d492d7df0c67060ee95f997654","modified":1641479049763},{"_id":"public/tags/plotly-pie-graph-pie-subplot/index.html","hash":"7f48b2a914d410fe2831020cf3ced2c69efd6eb1","modified":1641479049763},{"_id":"public/tags/python-requirements-txt/index.html","hash":"38efebb570e3de33f84c20b62f88001fdbdeb155","modified":1641479049763},{"_id":"public/tags/python-list/index.html","hash":"5ee08a2dddab2ccd20bbd094d6db1ab0c14a476b","modified":1641479049763},{"_id":"public/tags/python-tuple/index.html","hash":"cd3cbcebdc33a619960ec80c02d0ee4f46099165","modified":1641479049763},{"_id":"public/tags/python-dictionary/index.html","hash":"15009f5f94aad4681690a6607c917e7f6e618d8d","modified":1641479049763},{"_id":"public/tags/python-pandas/index.html","hash":"7bfdc11f725178f1efdcae2a40755a13715ce00e","modified":1641479049763},{"_id":"public/tags/python/index.html","hash":"57088d3a16aaf3d95028f3206b1c36a130da90f5","modified":1641479049763},{"_id":"public/categories/index.html","hash":"d3b8f83755a52be906fa07703601b07238166d5e","modified":1641479049763},{"_id":"public/tags/index.html","hash":"a185b10b1aca83cb1a05bb2f740206424abc02a6","modified":1641479049763},{"_id":"public/tags/plotly-heatmap-graph-heatmap-subplot/index.html","hash":"938b92a86d3c26d5921e983bf6ae88cb37654475","modified":1641479049763},{"_id":"public/tags/plotly-pie-graph-pie-sunburst/index.html","hash":"887dfbe351bfac9f5ac00f29e87cab1cd49ff655","modified":1641479049763},{"_id":"public/tags/python-set/index.html","hash":"6ce8ffb281c3795b4a25d14557370104c6fe9db5","modified":1641479049763},{"_id":"public/img/favicon.svg","hash":"16fd847265845063a16596761cddb32926073dd2","modified":1641444711523},{"_id":"public/img/razor-bottom-black.svg","hash":"a3eda07b1c605b456da9cdf335a1075db5e5d72c","modified":1641444711523},{"_id":"public/img/logo.svg","hash":"e9b5c1438ddb576693a15d0713b2a1d9ceda4be9","modified":1641444711523},{"_id":"public/img/razor-top-black.svg","hash":"201f1171a43ce667a39091fe47c0f278857f18f0","modified":1641444711523},{"_id":"public/img/og_image.png","hash":"b03f163096ca9c350ec962feee9836277b5c2509","modified":1641444711523},{"_id":"public/images/0101/01_02.png","hash":"631645ff9672b9479e413dac177950e53d9b60b0","modified":1641444711523},{"_id":"public/images/0101/01_01.PNG","hash":"defca1c623982cceec3d1b1303232e40d609e863","modified":1641444711523},{"_id":"public/images/0101/01_03.png","hash":"f57e896aa141b90c0634012e8f3f64e4a46ad277","modified":1641444711523},{"_id":"public/img/avatar.png","hash":"0d8236dcca871735500e9d06bbdbe0853ed6775b","modified":1641444711523},{"_id":"public/images/0101/01_06.png","hash":"606e8851043f6fa262974b5a10511436455da7c9","modified":1641444711523},{"_id":"public/images/0101/01_05.png","hash":"e988b29c1cf2a5c2bbefcbd8167029e34cc8175a","modified":1641444711523},{"_id":"public/images/0101/01_10.png","hash":"cd016d2a3f16d7572b0dff0c35f7289c3ceb2b4d","modified":1641444711523},{"_id":"public/images/0101/01_07.png","hash":"f3190b4138210873620d54027274e17e7826e11b","modified":1641444711523},{"_id":"public/images/0101/01_11.PNG","hash":"3c456f273887e814e332f4570a81f66e0c75c53a","modified":1641444711523},{"_id":"public/images/0103/pstmd설정.PNG","hash":"51e158ccf31dcf4ca8aa7fc6eb82307719d7df69","modified":1641444711523},{"_id":"public/images/0102/02_02.png","hash":"959122ac2099861e3260c5c01543bf872e0e288a","modified":1641444711523},{"_id":"public/images/0202/01_02_python.PNG","hash":"f76ab05bcd73f29cd9556435270926109b189a7c","modified":1641444711523},{"_id":"public/images/0202/01_03_python.PNG","hash":"b28e34f83e4f25d833ccedf51d476a562601d2aa","modified":1641444711523},{"_id":"public/images/0202/01_05_python.PNG","hash":"c86c9eb1da4b23644154568e38eff9c5e67b8f9c","modified":1641444711523},{"_id":"public/images/0202/01_06_python.PNG","hash":"f04ae2e1f2f4634292c58fd261eb6c63b03abaec","modified":1641444711523},{"_id":"public/images/0301_1-1/1.png","hash":"73662d59c2ef3a505479da5bead081689615c4ab","modified":1641444711523},{"_id":"public/images/0202/01_08_python.PNG","hash":"4e2b36dab668f3d7b43aa44ab65507403d1996c0","modified":1641444711523},{"_id":"public/images/0301_1-1/2.png","hash":"e9346a8ad03d95122ea23e59ab3eec1fde299b00","modified":1641444711523},{"_id":"public/images/0301_1-1/3.png","hash":"e1effe9666867ce318404bc0229790ae9372f459","modified":1641444711523},{"_id":"public/images/0301_1-1/4.png","hash":"070320135bb5731579fb58ddd6bbf9189f7619e9","modified":1641444711523},{"_id":"public/images/0301_1-1/5.png","hash":"83ca5dd2c0a60de7fa55721ed5919188a5c3fa9e","modified":1641444711523},{"_id":"public/images/0202/01_04_python.PNG","hash":"1a2c72cc3d402adc1d8eba71d38d6c42e293fc9b","modified":1641444711523},{"_id":"public/images/0205/output_10_1.png","hash":"d5a07b6ea54311d302752fe20dd0f4fbb173364f","modified":1641444711523},{"_id":"public/images/0205/output_14_1.png","hash":"439f6e0fc38d8b9d79e762b96cc8bd0ddf03cec9","modified":1641444711523},{"_id":"public/images/0205/output_16_1.png","hash":"27cfe8de7a07b881f63667758839edc0f397d29d","modified":1641444711523},{"_id":"public/images/0205/output_19_0.png","hash":"c3e74a32fa6506d9d5b042c6776a9c91a3789a0c","modified":1641444711523},{"_id":"public/images/0205/output_1_0.png","hash":"111d90dd3dfbc50a7e583cd178b35995c059eb0a","modified":1641444711523},{"_id":"public/images/0205/output_22_0.png","hash":"a242b009cbdff9af7a7b33444e3ddd0f210b2704","modified":1641444711523},{"_id":"public/images/0205/output_25_0.png","hash":"dd37d052607dca55f2c92f513553a70e3193be79","modified":1641444711523},{"_id":"public/images/0205/output_2_0.png","hash":"f774ed81be870d4c7f6345868d0739aa4159a3ee","modified":1641444711523},{"_id":"public/images/0205/output_27_0.png","hash":"5fa1b3ec60972e4f3a42634a0e9de2349b3fe2f8","modified":1641444711523},{"_id":"public/images/0205/output_18_0.png","hash":"89620100d736de6a096978e1a73a53d96d2e6e9c","modified":1641444711523},{"_id":"public/images/0205/output_33_0.png","hash":"28677cf2991ade9aed2a9bf6100394b9c3676271","modified":1641444711523},{"_id":"public/images/0205/output_31_0.png","hash":"613812a14ca90a0d119f28b1177602411262579f","modified":1641444711523},{"_id":"public/images/0205/output_39_0.png","hash":"f466ee8dd5f4e5edf561d5d5b9f9a4ec4ee5017c","modified":1641444711523},{"_id":"public/images/0205/output_35_0.png","hash":"a342dfdb2c9346a232a21fa27b3e7062d314c9de","modified":1641444711523},{"_id":"public/images/0205/output_37_1.png","hash":"b20cb5200628aaa3b647949e85a098300eead46a","modified":1641444711523},{"_id":"public/images/0205/output_30_0.png","hash":"864affbf1d94c9fe1ca786399b9d23060d3927ba","modified":1641444711523},{"_id":"public/images/0205/output_34_0.png","hash":"7b7f4713c3ff4b8888d5e8d5da895bb91042f64d","modified":1641444711523},{"_id":"public/images/0205/output_43_0.png","hash":"99297904f605e16da99d5d56daf91daf9a5a138d","modified":1641444711523},{"_id":"public/images/0205/output_44_0.png","hash":"8064f9bfb6837f0d6a8fa01848e8a9ece57338bb","modified":1641444711523},{"_id":"public/images/0205/output_60_0.png","hash":"a0c40d1f93f27924c9f2dc816a580e70d1ec54d8","modified":1641444711523},{"_id":"public/images/0205/output_49_0.png","hash":"f13fa4b236c171561028b44432be61c4c657ded5","modified":1641444711523},{"_id":"public/images/0205/output_61_0.png","hash":"3357ecc4f51a4890b903a3e89cb05c3e93d26f89","modified":1641444711523},{"_id":"public/images/0205/output_52_0.png","hash":"1fac2ac9707498927e0511588188357896ab2099","modified":1641444711523},{"_id":"public/images/0205/output_66_0.png","hash":"4dd2014d987f41ca061dce1c3a3e26a61f1c3d0b","modified":1641444711523},{"_id":"public/images/0205/output_62_0.png","hash":"bd2642b09a4011c735f886aae0b89f0440e61017","modified":1641444711523},{"_id":"public/images/0205/output_64_0.png","hash":"e8caaa4ea6fe58048008864bbaf962110fc1ebbd","modified":1641444711523},{"_id":"public/images/0205/output_59_0.png","hash":"bfded2012aa8b0206cf74cbda99f2cd1c1953e62","modified":1641444711523},{"_id":"public/images/0206/iris1.png","hash":"5b824f11edeec13bacdefd48fece795251ce60d8","modified":1641444711523},{"_id":"public/images/0206/iris2.png","hash":"62b82a9c52f8bc5c984620fd67e3aea401b074e3","modified":1641444711523},{"_id":"public/images/0304_2-1/1.PNG","hash":"cf123784d64986053523470dff50631ccc8d27e6","modified":1641444711523},{"_id":"public/images/0304_2-1/3.PNG","hash":"51ef60c6ff289b9126d9b41a0f3eb65ebbc67326","modified":1641444711523},{"_id":"public/images/0304_2-1/2.PNG","hash":"02d603fa3e3cfe40ed00ed7e4901b0d2376aca39","modified":1641444711523},{"_id":"public/images/0304_2-1/6.PNG","hash":"2bf09a3aef2981865c0a2587273747874b5c95ca","modified":1641444711523},{"_id":"public/images/0304_2-1/4.PNG","hash":"2ca9d3073e6215d9d437bda48426c1930a19a453","modified":1641444711523},{"_id":"public/images/0304_2-1/8.PNG","hash":"b9157534045c5bf1bf3c7d705f31978cfe2c2fc9","modified":1641444711523},{"_id":"public/images/0304_2-1/9.PNG","hash":"b83275ddff2ac0e62fc91c498d2e2c7d9d43adb3","modified":1641444711523},{"_id":"public/images/0304_2-1/7.PNG","hash":"24a44c9a8fd4cd47dfcda79e8285153f9e774948","modified":1641444711523},{"_id":"public/images/0205/output_67_1.png","hash":"a3b6709bc04efb002e19a228d07acaf2e806deb1","modified":1641444711523},{"_id":"public/images/0303_1-3/1.PNG","hash":"a0ae24d78ba1e3bfe00ca63a1bf25fb992de9787","modified":1641444711523},{"_id":"public/images/0303_1-3/10.PNG","hash":"e72f3b415e7e5be162bd3c38090096476583f948","modified":1641444711523},{"_id":"public/images/0303_1-3/2.PNG","hash":"1528bb8ca0280f48aa712d2ae4bf391b7219eeef","modified":1641444711523},{"_id":"public/images/0304_2-1/5.PNG","hash":"2d1f53393ddb20c98fb4ac927f13819a235470d6","modified":1641444711523},{"_id":"public/images/0303_1-3/4.PNG","hash":"0991343775338fd3f311e608cc0e45886553397b","modified":1641444711523},{"_id":"public/images/0303_1-3/6.PNG","hash":"bbdedbbfa83e378898045507b68a239cb0a6b97f","modified":1641444711523},{"_id":"public/images/0303_1-3/5.PNG","hash":"974beb34565be31012983160dc58b05057e46e5f","modified":1641444711523},{"_id":"public/images/0303_1-3/8.PNG","hash":"ef7c9d775c11ed2f0d8b28aed8218d2a6ebad7ce","modified":1641444711523},{"_id":"public/images/0303_1-3/7.PNG","hash":"44912c6f6b9ba1d8f036ca4d9931668cdf34ab7d","modified":1641444711523},{"_id":"public/images/0303_1-3/9.PNG","hash":"ae01a8ef80dafe8be792d533a7a0ef844154e17f","modified":1641444711523},{"_id":"public/images/0307_3-4/2.PNG","hash":"78cf622589ed2b149969deff613993e43ee6596f","modified":1641444711523},{"_id":"public/images/0307_3-4/1.PNG","hash":"ccb0b3e58ce71b015e6f349bc167e7b98b12a0ea","modified":1641444711523},{"_id":"public/images/0307_3-4/3.PNG","hash":"95e0e5437c9ffcfe02be6c74074baa0c65536592","modified":1641444711523},{"_id":"public/images/0305_3-1/2.PNG","hash":"df39921f583d3e78bdc003cfad44737a11f51c89","modified":1641444711523},{"_id":"public/images/0303_1-3/3.PNG","hash":"ad3206658305810f3bea02cb8a9c58aa3ab86275","modified":1641444711523},{"_id":"public/images/0305_3-1/1.PNG","hash":"47744335fe0113f91a1cf47d0d752310da849481","modified":1641444711523},{"_id":"public/images/0305_3-1/3.PNG","hash":"59742990d6ee188c7beac24270e691deff083cf3","modified":1641444711523},{"_id":"public/images/0305_3-1/5.PNG","hash":"b2afb5545dc32c5dededd7a7a506155c26172653","modified":1641444711523},{"_id":"public/images/0306_3-2/1.PNG","hash":"5e7333fc305ac9bd4e29b1bef9d6e54a18d33368","modified":1641444711523},{"_id":"public/images/0305_3-1/4.PNG","hash":"7e99ccf5d4d3f929f38d055ddb1e9619814f8302","modified":1641444711523},{"_id":"public/images/0306_3-2/3.PNG","hash":"7baabc0c0ddd65d0c249f7e01b1dba2bf4c3c0e3","modified":1641444711523},{"_id":"public/images/0306_3-2/2.PNG","hash":"146bdb4da0f54cddd9fedd89440f6909e7aa2938","modified":1641444711523},{"_id":"public/images/0306_3-2/5.PNG","hash":"817b5c251c03218cd865005a2da56d58bbefd575","modified":1641444711523},{"_id":"public/images/0401/1.PNG","hash":"fd7f43f3b5578d45de4e0bd562ba9993cc4d2831","modified":1641444711523},{"_id":"public/images/0401/3.PNG","hash":"e3c5966da764866cb6b06f593ec147fff47f2aab","modified":1641444711523},{"_id":"public/images/0401/2.PNG","hash":"a8c85de6aecb6a7c6da440d8f01dce3172d1347d","modified":1641444711523},{"_id":"public/images/0401/4.PNG","hash":"a5a261f8ec0c164a2f0ad7d846b9c2e7ec841dc0","modified":1641444711523},{"_id":"public/images/0401/5.PNG","hash":"e1ea048cd9e79ba163d72cd7ac6df15bbd33d293","modified":1641444711523},{"_id":"public/images/0401/6.PNG","hash":"c585cd60d8172bbf9e64796fe18784142fceacb4","modified":1641444711523},{"_id":"public/images/0305_3-1/6.PNG","hash":"1c211d1595dd91f92d8682abab41025162fb2b42","modified":1641444711523},{"_id":"public/images/0306_3-2/4.PNG","hash":"586f6eeaa310a4b243fdffd698e3f0eeff88febc","modified":1641444711523},{"_id":"public/images/kaggle_final/newplot.png","hash":"b163cfe5920760393dd5e1c441cdae6dede13567","modified":1641444711523},{"_id":"public/images/kaggle_final/newplot1.png","hash":"fbcd0fc2f1ab5361623dc5df3caa8534dff2fe1a","modified":1641444711523},{"_id":"public/images/kaggle_final/newplot11.png","hash":"19d2b1454baa5c06d197e70647749e97530069f5","modified":1641444711523},{"_id":"public/images/kaggle_final/newplot12.png","hash":"46627f5d81fa19636171b73298eaec6366445791","modified":1641444711523},{"_id":"public/images/kaggle_final/newplot13.png","hash":"09eb446cc2f5db1a49d80f268d4bab6fa41464cd","modified":1641444711523},{"_id":"public/images/kaggle_final/newplot10.png","hash":"ecee609503e505828b19b4a072863a373b915d7a","modified":1641444711523},{"_id":"public/images/kaggle_final/newplot15.png","hash":"1b23cf442f816c653f04dade6df1e0be06b350ad","modified":1641444711523},{"_id":"public/images/kaggle_final/newplot18.png","hash":"37472c0bb2fe9336daaf9c63ba8583f8d34d8d10","modified":1641444711523},{"_id":"public/images/kaggle_final/newplot16.png","hash":"1481c24824f43a2992a4848ebadb8b01fb4fe59b","modified":1641444711523},{"_id":"public/images/kaggle_final/newplot21.png","hash":"0a6ea9c2194830036a7586eb31c1e5a32945e4f5","modified":1641444711523},{"_id":"public/images/kaggle_final/newplot2.png","hash":"c7489e288a2724c0bb2d753f6e22adcf4bfaff30","modified":1641444711523},{"_id":"public/images/kaggle_final/newplot20.png","hash":"1a3268257529a15a41ada7b898f09af69e4fbcd6","modified":1641444711523},{"_id":"public/images/kaggle_final/newplot24.png","hash":"e26b29e47d2332ee8703bb1eaa3d1409e91fc192","modified":1641444711523},{"_id":"public/images/kaggle_final/newplot19.png","hash":"c32523833ea204fbc3ef7e2d02b2d89d95f6e6fe","modified":1641444711523},{"_id":"public/images/kaggle_final/newplot23.png","hash":"dadd34c3cec21876f3c62c9fbba259b0589e5b8e","modified":1641444711523},{"_id":"public/images/kaggle_final/newplot27.png","hash":"c7ffb8505a055d13a7673d623b7c1a83a1e386b5","modified":1641444711523},{"_id":"public/images/kaggle_final/newplot17.png","hash":"ef1f6b66fa9185a916ae0225f2a3cfb08e6c4735","modified":1641444711523},{"_id":"public/images/kaggle_final/newplot22.png","hash":"44835150c6609531bc44454841dcdd74e60dc011","modified":1641444711523},{"_id":"public/images/kaggle_final/newplot28.png","hash":"0087ba488f8286a4010f20f80afd9b8be1011774","modified":1641444711523},{"_id":"public/images/kaggle_final/newplot26.png","hash":"c6f8352e6b7e7b97d848babbf95e38332b143415","modified":1641444711523},{"_id":"public/images/kaggle_final/newplot29.png","hash":"08b644c9ae0d2a8d3cb80dfc279439f69cc48e7b","modified":1641444711523},{"_id":"public/images/kaggle_final/newplot3.png","hash":"c69d607dbc2ed8d31c2ce1491e0323ba3dc7fde4","modified":1641444711523},{"_id":"public/images/kaggle_final/newplot25.png","hash":"4d89a161322057a00fe76c3952227218f09dafc3","modified":1641444711523},{"_id":"public/images/kaggle_final/newplot4.png","hash":"83ef7979c4299fbd9edac2b6756fc0a52b02dcde","modified":1641444711523},{"_id":"public/images/kaggle_final/newplot5.png","hash":"853413810ae8b81dfad986f4225b2c5ddb1f7ad6","modified":1641444711523},{"_id":"public/images/kaggle_final/newplot6.png","hash":"88528d8683a0cc13a9355227c09f4984bf19a48c","modified":1641444711523},{"_id":"public/images/kaggle_final/newplot7.png","hash":"ccb1cf97006fbd71cf3a9886d89cabd291595f6e","modified":1641444711523},{"_id":"public/images/kaggle_final/newplot8.png","hash":"5ebe1f3aec9a9de78f71d9bccd26908490f89f49","modified":1641444711523},{"_id":"public/images/mykaggle1/10.PNG","hash":"b066d1ff094df3e728d3054efbfd8e0c7ee31e53","modified":1641444711523},{"_id":"public/images/mykaggle1/1.PNG","hash":"135a3dfcd88d7d50525ec824b7c03e884a1a9960","modified":1641444711523},{"_id":"public/images/kaggle_final/newplot9.png","hash":"3b893294a57eace80fce202a1f54e44ff11fcd8c","modified":1641444711523},{"_id":"public/images/mykaggle1/13.PNG","hash":"c1045c994ed2a7233c487e8efd69cfc39f05803a","modified":1641444711523},{"_id":"public/images/mykaggle1/2.PNG","hash":"d2bd3754e08de1c0cbc64c4b0e6a4508a0529a23","modified":1641444711523},{"_id":"public/images/mykaggle1/12.PNG","hash":"9af23ba69396b2d271dbddc59c685e9063ca21df","modified":1641444711523},{"_id":"public/images/mykaggle1/4.PNG","hash":"5ddc3939cd6f8807d86f7df0f3d4dd04306c47ef","modified":1641444711523},{"_id":"public/images/mykaggle1/3.PNG","hash":"134aef0381192aedd97d9918b645897568728a5d","modified":1641444711523},{"_id":"public/images/mykaggle1/6.PNG","hash":"64943d5c71d7016f8c1f5424dd7f86643a2a7be8","modified":1641444711523},{"_id":"public/images/mykaggle1/5.PNG","hash":"f3af27ead65fbc5024e282d76e7cd382ec2cff87","modified":1641444711523},{"_id":"public/images/mykaggle1/7.PNG","hash":"b17a94d1aa0f0de1b03809f2c42deab8ecca1f09","modified":1641444711523},{"_id":"public/images/mykaggle1/8.PNG","hash":"50ba6aa2ed3ff7067052c8fcd6662ef9ef587ce7","modified":1641444711523},{"_id":"public/images/mykaggle1/9.PNG","hash":"34760c118e5d231bb747774f7810be52faad0ce7","modified":1641444711523},{"_id":"public/images/mykaggle1/11.PNG","hash":"17c39758c889abc0271791aca72d40a0b58a4a3f","modified":1641444711523},{"_id":"public/images/mykaggle2/1.PNG","hash":"f33529462e794b2ec03b9116d175b3f3f2d8c151","modified":1641444711523},{"_id":"public/images/mykaggle2/2.PNG","hash":"b53d9dc10648cb4786e237594c8ed132c412a855","modified":1641444711523},{"_id":"public/images/mykaggle2/4.PNG","hash":"9bf755e4bf677ad7acb71a42a3bd582736c74aae","modified":1641444711523},{"_id":"public/images/mykaggle2/3.PNG","hash":"f70489ce97d2f5ba70c42f2c4c1119d3b84e5c82","modified":1641444711523},{"_id":"public/images/mykaggle2/5.PNG","hash":"96f8fcb62b483c8c36e351d46ce7cc691ebd0baf","modified":1641444711523},{"_id":"public/images/mykaggle2/6.png","hash":"91ff8fa084c4797faa155d0eb77b08f7481bf9d3","modified":1641444711523},{"_id":"public/images/mykaggle3/1.PNG","hash":"4b26e5127cec83a25c7d0a53e905a2586d1870ed","modified":1641444711523},{"_id":"public/images/mykaggle3/2.PNG","hash":"29a8d5baf27e67338ca6837ddc59e622d6c7b241","modified":1641444711523},{"_id":"public/images/mykaggle2/7.png","hash":"fd241949880d638b6a784efcd4f589050e2463fd","modified":1641444711523},{"_id":"public/images/mykaggle3/5.PNG","hash":"014915f5bd2979172fe0232df98b8d329a2f9332","modified":1641444711523},{"_id":"public/images/mykaggle3/4.PNG","hash":"1960300cbb0fdd620c714dd14c7a9f6522a3761a","modified":1641444711523},{"_id":"public/images/mykaggle3/6.PNG","hash":"52587280279e6ebe06a01310c0662ea9108b0462","modified":1641444711523},{"_id":"public/images/mykaggle3/3.PNG","hash":"ebbc5aab9f7a7a08b76556ff6ad552f137a6bb1d","modified":1641444711523},{"_id":"public/images/mykaggle3/7.png","hash":"754efe2b6e8aea05271329ed30c0675a4ead939a","modified":1641444711523},{"_id":"public/images/plotlybar/newplot 4.png","hash":"4d89a161322057a00fe76c3952227218f09dafc3","modified":1641444711523},{"_id":"public/images/pandas/1.PNG","hash":"23ee9dce95f60e381283e6f371b6b0b862926572","modified":1641444711523},{"_id":"public/images/plotlybar/newplot2.png","hash":"ccb1cf97006fbd71cf3a9886d89cabd291595f6e","modified":1641444711523},{"_id":"public/images/plotlybar/newplot3.png","hash":"1b23cf442f816c653f04dade6df1e0be06b350ad","modified":1641444711523},{"_id":"public/images/plotlybar/newplot1.png","hash":"83ef7979c4299fbd9edac2b6756fc0a52b02dcde","modified":1641444711523},{"_id":"public/images/plotlybar/newplot5.png","hash":"1ebffe2950da4865d316fe0d5855bcf95fda97c4","modified":1641444711523},{"_id":"public/images/plotlyheatmap/merge.PNG","hash":"101cee5cd5aa4cab81964857f19c8bb52fc9fb42","modified":1641444711523},{"_id":"public/images/plotlyheatmap/newplot.png","hash":"19d2b1454baa5c06d197e70647749e97530069f5","modified":1641444711523},{"_id":"public/images/plotlybar/newplot.png","hash":"b163cfe5920760393dd5e1c441cdae6dede13567","modified":1641444711523},{"_id":"public/images/mykaggle4/1.PNG","hash":"90628e2d7c16404742e61132dbb7ec64c1dae668","modified":1641444711523},{"_id":"public/images/plotlyheatmap/newplot1.png","hash":"5ebe1f3aec9a9de78f71d9bccd26908490f89f49","modified":1641444711523},{"_id":"public/images/mykaggle4/10.PNG","hash":"61b6f15aa8bc3284897115a98a99dae919ad0270","modified":1641444711523},{"_id":"public/images/mykaggle4/12.PNG","hash":"5df7ef28b6c87ee46c1c0d01eb797f690d882068","modified":1641444711523},{"_id":"public/images/mykaggle4/13.PNG","hash":"1f9d3f4eb6447ab3b4270abf0c89b2d5637d9ce6","modified":1641444711523},{"_id":"public/images/mykaggle4/14.png","hash":"46559e6e0ec7daeafbe0bdd898785c690a5e0e06","modified":1641444711523},{"_id":"public/images/mykaggle4/16.PNG","hash":"8b9ccdcb03bdd3654e37036208559888a3520b00","modified":1641444711523},{"_id":"public/images/mykaggle4/15.PNG","hash":"85065cd9385eb02a1028b815f0ad77e37f67c761","modified":1641444711523},{"_id":"public/images/mykaggle4/17.PNG","hash":"49459e51a904c38aeee70373c2609450966a2ac3","modified":1641444711523},{"_id":"public/images/mykaggle4/18.PNG","hash":"8951322e23c2528e7bf5c1fb0a51dd0e3727d6c7","modified":1641444711523},{"_id":"public/images/mykaggle4/19.PNG","hash":"3ce76bdc0f126ed45438f6416a6af7fe6bdebd1e","modified":1641444711523},{"_id":"public/images/mykaggle4/2.PNG","hash":"8e59297983864cc86ac39574075827a15925b5db","modified":1641444711523},{"_id":"public/images/mykaggle4/11.png","hash":"8f14d484a1992497e5313321d6e0d16b43e571f0","modified":1641444711523},{"_id":"public/images/mykaggle4/20.PNG","hash":"83c079534cf00aed07e82dd3c883d45b91fe8bec","modified":1641444711523},{"_id":"public/images/mykaggle4/24.PNG","hash":"9a9ee15569cee2cc7f61d0e4fce11dd36ef1fe97","modified":1641444711523},{"_id":"public/images/mykaggle4/22.PNG","hash":"f057cb3adccf40f06cf3d52161c92c658d134dd7","modified":1641444711523},{"_id":"public/images/mykaggle4/23.PNG","hash":"23057c498252dce39cf72b8d982c2bb0bbe416e0","modified":1641444711523},{"_id":"public/images/mykaggle4/25.png","hash":"c7152cb2793b0ef01a2db771603e00c003dc6752","modified":1641444711523},{"_id":"public/images/mykaggle4/21.png","hash":"c2fef4a0ce5249d13856011761d60dec54f1752f","modified":1641444711523},{"_id":"public/images/mykaggle4/26.PNG","hash":"de136811779862129511f2ffb02405050c45b418","modified":1641444711523},{"_id":"public/images/mykaggle4/27.PNG","hash":"fdb3d6c149b9d7d347fd189528f9476304b38dd1","modified":1641444711523},{"_id":"public/images/mykaggle4/3.PNG","hash":"aa5acd2442a82053f5761dbebfc815264b4ac7c2","modified":1641444711523},{"_id":"public/images/mykaggle4/28.PNG","hash":"4f76c5ea9c80095d566923ee3eca6956bab4cf08","modified":1641444711523},{"_id":"public/images/mykaggle4/29.png","hash":"4047badd6466ca1b8483a0c84f9418f8be5d340b","modified":1641444711523},{"_id":"public/images/mykaggle4/4.PNG","hash":"59da2b293d173592b22aeaa31a085d6ac9022a98","modified":1641444711523},{"_id":"public/images/mykaggle4/5.png","hash":"2cfdd498a1644eada64d38528da4d3207d9ff357","modified":1641444711523},{"_id":"public/images/mykaggle4/31.png","hash":"772131d56ca024a0752c4e029ce7ea3ca94335b1","modified":1641444711523},{"_id":"public/images/mykaggle4/6.PNG","hash":"b90a4b37d71dd1e8425123af4aa0a4c2f6ccfdd2","modified":1641444711523},{"_id":"public/images/mykaggle4/7.PNG","hash":"3a70aeaa6969594bf2a31a10bc7c44125317e03f","modified":1641444711523},{"_id":"public/images/mykaggle4/30.png","hash":"1f9d135df2e96f4736cf9c8f0c5617465be0a952","modified":1641444711523},{"_id":"public/images/mykaggle4/8.png","hash":"e04a7c21b3e48dc05eaf6efff77ff520e06c0057","modified":1641444711523},{"_id":"public/images/mykaggle4/9.PNG","hash":"7cbc0cbb94d753f9470b0d6a4bd7afa95e36b6e0","modified":1641444711523},{"_id":"public/images/plotlypie/newplot.png","hash":"853413810ae8b81dfad986f4225b2c5ddb1f7ad6","modified":1641444711523},{"_id":"public/images/plotlypie/newplot1.png","hash":"09eb446cc2f5db1a49d80f268d4bab6fa41464cd","modified":1641444711523},{"_id":"public/images/0302_1-2/1.PNG","hash":"6f8536cf3559e824b7b38befc5555921af1813f2","modified":1641444711523},{"_id":"public/images/plotlysunburst/datapre.PNG","hash":"b17c2c6563c1a3befa69326e8702e099a858e3ba","modified":1641444711523},{"_id":"public/images/0302_1-2/4.PNG","hash":"1f005371e812b6c6be9b2f9e7819cd64916a5010","modified":1641444711523},{"_id":"public/images/python_basic_1/venv1.PNG","hash":"020aa7a06820e178df37c16ab1533aad5ae9685d","modified":1641444711523},{"_id":"public/images/python_basic_1/venv.PNG","hash":"3f1f0558b27475a97da495a1932cf9f0f9526992","modified":1641444711523},{"_id":"public/images/0302_1-2/3.PNG","hash":"8e94df1f0947ec7e88937cdf93dc25af0aebaa15","modified":1641444711523},{"_id":"public/images/0302_1-2/5.PNG","hash":"99abc40d60f0173029221365c34816380b8c96ef","modified":1641444711523},{"_id":"public/images/0302_1-2/2.PNG","hash":"e279f73ff90dae015b9761587242eb3b38686e00","modified":1641444711523},{"_id":"public/images/0302_1-2/7.PNG","hash":"9d1888d0d4f55b693481d5d829069ec8641fdc36","modified":1641444711523},{"_id":"public/images/0302_1-2/6.PNG","hash":"a877fbba8ecfdfa3007bcd6d0878f3e5a7b32135","modified":1641444711523},{"_id":"public/images/0205/firstpost/3cat.jpg","hash":"683a675cb39cd3bc335b49001f113b31a0e6806e","modified":1641444711523},{"_id":"public/images/3cat.jpg","hash":"021ad062bb8f10a1c4ab44c69d5ce1054233fead","modified":1641444711523},{"_id":"public/images/0101/01_09.png","hash":"018d24ffc5dd155a7fca9a881a667f626c40a245","modified":1641444711523},{"_id":"public/images/0102/02_01.png","hash":"baf63cb28376e19c341afa6c14755ac75bf86470","modified":1641444711523},{"_id":"public/images/0202/01_01_python.PNG","hash":"f3fce4402641520429f465c8cc9f1b38889fcbef","modified":1641444711523},{"_id":"public/images/0202/01_07_python.PNG","hash":"9be32af2407539d51165ac3e9cec26d562c54c6e","modified":1641444711523},{"_id":"public/images/kaggle_final/newplot14.png","hash":"1b2916df7807fed52856a8cd65ea322101648fd8","modified":1641444711523},{"_id":"public/js/back_to_top.js","hash":"d91f10c08c726135a13dfa1f422c49d8764ef03f","modified":1641444711523},{"_id":"public/js/main.js","hash":"13e4b1c4fa287f3db61aae329ad093a81992f23d","modified":1641444711523},{"_id":"public/js/animation.js","hash":"12cedd5caaf9109eed97e50eeab8f883f6e49be3","modified":1641444711523},{"_id":"public/js/column.js","hash":"0baee024ab67474c073a4c41b495f3e7f0df4505","modified":1641444711523},{"_id":"public/css/default.css","hash":"aff302fb6b2fbd86becec320ccb373a2d1f6cda5","modified":1641444711523},{"_id":"public/css/style.css","hash":"c1085569a9b6232c6ee53476c286e971b4e6ed3a","modified":1641444711523},{"_id":"public/css/cyberpunk.css","hash":"99a2c36c4e65beef845938b9ace9e0bb79cf08e7","modified":1641444711523},{"_id":"public/images/plotlysunburst/newplot.png","hash":"1b2916df7807fed52856a8cd65ea322101648fd8","modified":1641444711523},{"_id":"public/images/0102/02_03.png","hash":"024193bece57a8a57a7fe47a26c6dd91f2b713aa","modified":1641444711523},{"_id":"public/images/flower.jpg","hash":"3203096f40ec57e045df20ebfc3541aea2af1ba1","modified":1641444711523},{"_id":"public/images/0101/01_04.png","hash":"0879b9c8cdea9eef7fc869a910e15f97015d17c4","modified":1641444711523},{"_id":"public/images/0101/01_08.png","hash":"f6565f492596566065c9c90c5af0131b8a6ec15e","modified":1641444711523},{"_id":"public/images/kaggle_final/newplot30.png","hash":"fd930bda8941a1e586d9a93aa77e2bd909c96bac","modified":1641444711523},{"_id":"public/images/macbookair/appledeveloper.png","hash":"a41d687bb0f83e01679ad1688c2d15a3f8799d1e","modified":1641444711523},{"_id":"public/images/me.jpg","hash":"6b83deebb8b579dcc3f8cc5c42f53ab48deef297","modified":1641444711523},{"_id":"public/images/곰돌.png","hash":"310ef69fe631e295fe1710cd3c0e7c683c968e2f","modified":1641444711523},{"_id":"public/images/macbookair/나의맥북.jpeg","hash":"d04fbcc75becaa40bface63c7fdbd7022cdb63a9","modified":1641444711523},{"_id":"source/_posts/title.md","hash":"5f578b56db5e306de7edb082131555a105e0e331","modified":1642392760782},{"_id":"source/images/boostcourse_01/10.PNG","hash":"244e3d999eb868fdfbe87d086ba89b2c2ff2bd84","modified":1641391460000},{"_id":"source/images/boostcourse_01/11.PNG","hash":"761970d5f9a9f92c2db11e5956761253d26a9ac2","modified":1641391492000},{"_id":"source/images/boostcourse_01/13.PNG","hash":"ac2c4ee96ba402201eddd54ca6f1bbe99cc432f7","modified":1641402114000},{"_id":"source/images/boostcourse_01/12.PNG","hash":"c2b56775a22c2ad9c5ac9c8d281434c1d22cdbae","modified":1641392302000},{"_id":"source/images/boostcourse_01/17.PNG","hash":"67b80ef1167a0a359637216db4b8e063f0304842","modified":1641468774000},{"_id":"source/images/boostcourse_01/18.PNG","hash":"30f5eb3ce93e44625d4fea58b9ae679ab55d691f","modified":1641468900000},{"_id":"source/images/boostcourse_01/16.PNG","hash":"e631f0e54d0029beb945303e2c395bf69db355bd","modified":1641458760000},{"_id":"source/images/boostcourse_01/2.PNG","hash":"30d8c323789a1ff598832d96b15cd5265528f668","modified":1640573418000},{"_id":"source/images/boostcourse_01/3.PNG","hash":"2a9e3a66ad91427760e010551cd8a7aa39cd9e2b","modified":1640588764000},{"_id":"source/images/boostcourse_01/5.PNG","hash":"88724ad20c920c6d1ce85965fd1dfb0291cf3956","modified":1640591158000},{"_id":"source/images/boostcourse_01/4.PNG","hash":"4fdd0e899824896f486848ee5b62d97b532bdd0c","modified":1640590786000},{"_id":"source/images/boostcourse_01/9.PNG","hash":"5df07b47f8e118c94e9ddc53f0dfd2387369b89b","modified":1641385426000},{"_id":"source/images/boostcourse_01/14.PNG","hash":"4d65f1be549dde954fbc4533f1872f9ad84c3100","modified":1641407538000},{"_id":"source/images/boostcourse_01/19.PNG","hash":"d397e52ec64f2c0fd017245f8ceed2b32b62a0d4","modified":1641471346000},{"_id":"source/images/boostcourse_01/20.PNG","hash":"e39469486e1c18ff44c5d3d62ca7af26aa9ba78d","modified":1641472786000},{"_id":"source/images/boostcourse_01/21.PNG","hash":"9bf011e1318ea40ef97f4fac86238bbdabb8657a","modified":1641472894000},{"_id":"source/images/boostcourse_01/23.PNG","hash":"0a268c59ef54517c20b906a219443cc0a483acf3","modified":1641473244000},{"_id":"source/images/boostcourse_01/22.PNG","hash":"a089ab1b5cdadbf78c51cb086fdf5beb980109f8","modified":1641473106000},{"_id":"source/images/boostcourse_01/8.PNG","hash":"41fdd53981d5ae9ba76c4b5a18663a971f90d882","modified":1641385402000},{"_id":"source/images/boostcourse_01/15.PNG","hash":"201ea888fe9228de311f765f05e10441a64ce191","modified":1641416684000},{"_id":"source/images/boostcourse_01/7.PNG","hash":"4bac0f38328b4601ab3f1335660b6744030a3523","modified":1640669812000},{"_id":"source/images/boostcourse_01/6.PNG","hash":"4825165677d5ff16d424e6d54bb1cb51eb3e0e0b","modified":1640662448000},{"_id":"source/images/boostcourse_01/1.PNG","hash":"2824ba1f44e4febad8971005ca10f1a51b3247bf","modified":1640572542000},{"_id":"source/images/boostcourse_01/25.PNG","hash":"de367825eba9e939d0d4adeb42471f86fa811ab2","modified":1641473784000},{"_id":"source/images/boostcourse_01/24.PNG","hash":"2e13754dd6a41798785403e902bd640d1c515f07","modified":1641473266000},{"_id":"source/images/boostcourse_01/26.PNG","hash":"e9dd84d909271278a8a17aa92b97e7af8207503a","modified":1641473836000},{"_id":"source/_posts/boostcourse_version.md","hash":"1cc9a3c30aab98dfcf32c39dec140491f2ffd703","modified":1641482025316},{"_id":"public/2021/01/03/boostcourse-version/index.html","hash":"f5dd51e15995ae5d8aac577031d88c7ac6bbaae5","modified":1641476906716},{"_id":"public/archives/2021/01/index.html","hash":"0cb41d414253b96aa59a7c7a779bf57574ee9b04","modified":1641476906716},{"_id":"public/categories/boostcourse-백엔드/index.html","hash":"27c4ce109f0038f9bc3abc1e619b79ff352244c4","modified":1641479049763},{"_id":"public/tags/tomcat-eclipse-oracle/index.html","hash":"aee8b18dae64296399a26fb43810f87ac85b11e6","modified":1641479049763},{"_id":"public/images/boostcourse_01/11.PNG","hash":"761970d5f9a9f92c2db11e5956761253d26a9ac2","modified":1641476906716},{"_id":"public/images/boostcourse_01/18.PNG","hash":"30f5eb3ce93e44625d4fea58b9ae679ab55d691f","modified":1641476906716},{"_id":"public/images/boostcourse_01/13.PNG","hash":"ac2c4ee96ba402201eddd54ca6f1bbe99cc432f7","modified":1641476906716},{"_id":"public/images/boostcourse_01/12.PNG","hash":"c2b56775a22c2ad9c5ac9c8d281434c1d22cdbae","modified":1641476906716},{"_id":"public/images/boostcourse_01/17.PNG","hash":"67b80ef1167a0a359637216db4b8e063f0304842","modified":1641476906716},{"_id":"public/images/boostcourse_01/16.PNG","hash":"e631f0e54d0029beb945303e2c395bf69db355bd","modified":1641476906716},{"_id":"public/images/boostcourse_01/2.PNG","hash":"30d8c323789a1ff598832d96b15cd5265528f668","modified":1641476906716},{"_id":"public/images/boostcourse_01/10.PNG","hash":"244e3d999eb868fdfbe87d086ba89b2c2ff2bd84","modified":1641476906716},{"_id":"public/images/boostcourse_01/4.PNG","hash":"4fdd0e899824896f486848ee5b62d97b532bdd0c","modified":1641476906716},{"_id":"public/images/boostcourse_01/5.PNG","hash":"88724ad20c920c6d1ce85965fd1dfb0291cf3956","modified":1641476906716},{"_id":"public/images/boostcourse_01/3.PNG","hash":"2a9e3a66ad91427760e010551cd8a7aa39cd9e2b","modified":1641476906716},{"_id":"public/images/boostcourse_01/9.PNG","hash":"5df07b47f8e118c94e9ddc53f0dfd2387369b89b","modified":1641476906716},{"_id":"public/images/boostcourse_01/14.PNG","hash":"4d65f1be549dde954fbc4533f1872f9ad84c3100","modified":1641476906716},{"_id":"public/images/boostcourse_01/19.PNG","hash":"d397e52ec64f2c0fd017245f8ceed2b32b62a0d4","modified":1641476906716},{"_id":"public/images/boostcourse_01/22.PNG","hash":"a089ab1b5cdadbf78c51cb086fdf5beb980109f8","modified":1641476906716},{"_id":"public/images/boostcourse_01/21.PNG","hash":"9bf011e1318ea40ef97f4fac86238bbdabb8657a","modified":1641476906716},{"_id":"public/images/boostcourse_01/20.PNG","hash":"e39469486e1c18ff44c5d3d62ca7af26aa9ba78d","modified":1641476906716},{"_id":"public/images/boostcourse_01/23.PNG","hash":"0a268c59ef54517c20b906a219443cc0a483acf3","modified":1641476906716},{"_id":"public/images/boostcourse_01/8.PNG","hash":"41fdd53981d5ae9ba76c4b5a18663a971f90d882","modified":1641476906716},{"_id":"public/images/boostcourse_01/15.PNG","hash":"201ea888fe9228de311f765f05e10441a64ce191","modified":1641476906716},{"_id":"public/images/boostcourse_01/7.PNG","hash":"4bac0f38328b4601ab3f1335660b6744030a3523","modified":1641476906716},{"_id":"public/images/boostcourse_01/6.PNG","hash":"4825165677d5ff16d424e6d54bb1cb51eb3e0e0b","modified":1641476906716},{"_id":"public/images/boostcourse_01/1.PNG","hash":"2824ba1f44e4febad8971005ca10f1a51b3247bf","modified":1641476906716},{"_id":"public/images/boostcourse_01/25.PNG","hash":"de367825eba9e939d0d4adeb42471f86fa811ab2","modified":1641476906716},{"_id":"public/images/boostcourse_01/24.PNG","hash":"2e13754dd6a41798785403e902bd640d1c515f07","modified":1641476906716},{"_id":"public/images/boostcourse_01/26.PNG","hash":"e9dd84d909271278a8a17aa92b97e7af8207503a","modified":1641476906716},{"_id":"public/2022/01/03/boostcourse-version/index.html","hash":"cf060b16eafe319085e96050e76a315c909b5ea2","modified":1641479049763},{"_id":"source/_posts/boostcourse_01_db.md","hash":"431880e40c2ef27dabd5be3b44e52abfa69dbced","modified":1641477784369},{"_id":"public/archives/page/5/index.html","hash":"69b8dc0e30d9513e673fe7480c4a747de7e73743","modified":1641479049763},{"_id":"public/2022/01/03/boostcourse-01-db/index.html","hash":"1dc641708a4d97b2784d6e009015cdfe5a030556","modified":1641479049763},{"_id":"public/page/5/index.html","hash":"5ccbd38dbe85db07f1b1e73efdcb1ca5ec1fda74","modified":1641479049763},{"_id":"public/tags/database/index.html","hash":"d10cbb127190c05980f91d27366914727e17d6fb","modified":1641479049763},{"_id":"source/_posts/title-1.md","hash":"8982e4eace99c39944f1916a0d7bb762149108c6","modified":1643184199347},{"_id":"source/_posts/boostcourse_04_web.md","hash":"eb2d633a233123b8f1eac4d743f6b07388e75fce","modified":1641478812128},{"_id":"source/_posts/boostcourse_02_maven.md","hash":"9d2cdfb01a9ab35248542a6d56845c2084dc7e61","modified":1641478812115},{"_id":"source/_posts/boostcourse_03_jdbc.md","hash":"e02a24ec239d66ab4183b93992c1104960b53228","modified":1641478812125},{"_id":"source/_posts/title-3.md","hash":"1a58100e6bbc5fcba24f720745596f11098dfa1b","modified":1641478071685},{"_id":"source/_posts/title-2.md","hash":"1a58100e6bbc5fcba24f720745596f11098dfa1b","modified":1641478070455},{"_id":"source/_posts/title-4.md","hash":"1a58100e6bbc5fcba24f720745596f11098dfa1b","modified":1641478072834},{"_id":"public/archives/2020/index.html","hash":"a6cfec1bc4e727b75c7cc37b2b91560fd9ad9b5d","modified":1641478148230},{"_id":"public/archives/2020/11/index.html","hash":"718c12bf3ccca98c02395bca55af35040284eb82","modified":1641478148230},{"_id":"public/archives/2021/page/5/index.html","hash":"dc2f5f438de6b737d1bdc001242a3fb558716f21","modified":1641478148230},{"_id":"public/2021/12/28/boostcourse-02-maven/index.html","hash":"470a877f0dd4f173ac6cc79f22201295697b83cf","modified":1641478148230},{"_id":"public/2021/12/28/boostcourse-04-web/index.html","hash":"84e32e9802f505e552e9ff4fc8cd11056c625c42","modified":1641478148230},{"_id":"public/2021/12/27/boostcourse-03-jdbc/index.html","hash":"e82adeb07328d9d8e80423a4101d9d8945fd010c","modified":1641478148230},{"_id":"public/2020/11/30/title-1/index.html","hash":"1e1631ccd685cb77f40f0696b0b1832758d7db65","modified":1641478080793},{"_id":"public/2020/11/30/title-2/index.html","hash":"c21174073753da53201f40dd1df5a3de0c054a25","modified":1641478080793},{"_id":"public/2020/11/30/title-4/index.html","hash":"a647c18015419feea74910f09aaffb39fe11adf2","modified":1641478080793},{"_id":"public/2020/11/30/title-3/index.html","hash":"b9dcb9bbd5c5f6a4cf193ee461aeddda3b2ecf3b","modified":1641478080793},{"_id":"source/_posts/boostcourse_06_tomcat.md","hash":"d3bdf7c1612a269cf2a504bbc78f588233d2a5ea","modified":1641478812119},{"_id":"source/_posts/boostcourse_05_http.md","hash":"eb4fca1be31b9441045962e749851f0344b15fb4","modified":1641478812126},{"_id":"source/_posts/boostcourse_08_jsp.md","hash":"cf9469cfdd494a42fde51bc0846927a388f31041","modified":1641478812129},{"_id":"source/_posts/boostcourse_09_scope.md","hash":"ebb345dc184cab60ef11c3fb282cd2f4cacbf553","modified":1641478812118},{"_id":"source/_posts/boostcourse_07_servlet.md","hash":"ad5b8ef0ce87feb3d7a5f99fd371c1828ab545e1","modified":1641478812123},{"_id":"public/2020/11/30/boostcourse-06-tomcat/index.html","hash":"4b3fcc60945a5fa8a01f43771fc9ca8db2b76381","modified":1641478148230},{"_id":"public/2020/11/30/boostcourse-08-jsp/index.html","hash":"498013ef61adc08a78bcf68a73d4a834620dd1b1","modified":1641478148230},{"_id":"public/2020/11/30/boostcourse-07-servlet/index.html","hash":"58dd032ecad7fb34802978f9f9749516441e2257","modified":1641478148230},{"_id":"public/2020/11/30/boostcourse-05-http/index.html","hash":"982434e385c427ec045801a019c59622c30ba674","modified":1641478148230},{"_id":"public/2020/11/30/boostcourse-09-scope/index.html","hash":"c00d8d0e7e28fb1c033ffe944d0cf2a3e0bbb446","modified":1641478148230},{"_id":"source/_posts/boostcourse_10_jstl_el.md","hash":"ba59d7f85e67d5f822fc262da8fe63fd113b1f61","modified":1641478812121},{"_id":"public/archives/2022/page/2/index.html","hash":"ea08c47b5c88b6d93de33c0197884c716858bbc3","modified":1641479049763},{"_id":"public/archives/2022/01/page/2/index.html","hash":"88bf64286f37a5b8f8aa363546e107bd91fb78e2","modified":1641479049763},{"_id":"public/2022/01/03/boostcourse-02-maven/index.html","hash":"87271b33793a9be0c639b46d69e053135c78cd94","modified":1641479049763},{"_id":"public/2022/01/03/boostcourse-03-jdbc/index.html","hash":"bac1b7edc7cbf90d9c61cc439a41d8f6bf663748","modified":1641479049763},{"_id":"public/2022/01/03/boostcourse-06-tomcat/index.html","hash":"ea6c8c80712d4f50b4bb7b404e04f5656088bf5a","modified":1641479049763},{"_id":"public/2022/01/03/boostcourse-04-web/index.html","hash":"6d1d84b20fd1cff45439f1092fc309d58f7cca14","modified":1641479049763},{"_id":"public/2022/01/03/boostcourse-07-servlet/index.html","hash":"8e3a4b237fb04584a6295f29094d7c0546249ee4","modified":1641479049763},{"_id":"public/2022/01/03/boostcourse-08-jsp/index.html","hash":"681e19a809f7a091c1d0392874b555b844f5e145","modified":1641479049763},{"_id":"public/2022/01/03/boostcourse-09-scope/index.html","hash":"a37b864bf1ccf9cf67e88bda7a7a260d54f678bb","modified":1641479049763},{"_id":"public/2022/01/03/boostcourse-10-jstl-el/index.html","hash":"2f27aed0a112f0e69bb28c189e146167b731814b","modified":1641479049763},{"_id":"public/2022/01/03/boostcourse-05-http/index.html","hash":"b4c76f31fd6c3ff99ac39f0feca6713a717c153c","modified":1641479049763},{"_id":"public/categories/부스트코스-백엔드/index.html","hash":"18f8fdd4fc0707d96685b9d4f0e2cc7e295e8fcc","modified":1641479049763},{"_id":"public/tags/tomcat/index.html","hash":"50dd87c7c25aee48483f990e5a58e0c81fc74124","modified":1641479049763},{"_id":"public/tags/scope/index.html","hash":"6c43d5a8ba9d0e49316636cc920771e258a9eafd","modified":1641479049763},{"_id":"public/tags/servlet-web-xml/index.html","hash":"f8e2bc7382d50e983f3b6d3562066ba8e53ada4a","modified":1641479049763},{"_id":"public/tags/servlet-jsp/index.html","hash":"c6dee35686cdcd0c8cd7d5cbd47ab04612abe6d2","modified":1641479049763},{"_id":"public/tags/JSTL-EL/index.html","hash":"33baca137f57c5cbd451fd2ffb38b2ceac150e78","modified":1641479049763},{"_id":"public/2022/01/01/macbook/index.html","hash":"dcf6d02a83c2fbf5e78bc115fa04adb4f11dd283","modified":1641479049763},{"_id":"public/categories/맥북/index.html","hash":"b9561ad90bb9741ffbda27ab7de494f2fe5b3c44","modified":1641479049763},{"_id":"public/tags/mac-macbook/index.html","hash":"8e9249e3b5d6ced43f7f7f7c822d106312ccc325","modified":1641479426909}],"Category":[{"name":"Blog setting","_id":"cky2hohej00035nrj20if8r15"},{"name":"First Post","_id":"cky2hohel00085nrjg0q43dw3"},{"name":"Hexo","parent":"cky2hohej00035nrj20if8r15","_id":"cky2hohem000d5nrj2amq8f91"},{"name":"파이썬","_id":"cky2hoheq000v5nrj7zzbay72"},{"name":"머신러닝","_id":"cky2hoheu001t5nrj7otnhrhw"},{"name":"kaggle 필사","_id":"cky2hohew00265nrja4rlauoy"},{"name":"Python 기초","parent":"cky2hoheq000v5nrj7zzbay72","_id":"cky2hohex002p5nrj9qwwhlf0"},{"name":"Project","_id":"cky2hohey002u5nrj5bma26v2"},{"name":"Python Setting","parent":"cky2hoheq000v5nrj7zzbay72","_id":"cky2hohf0003d5nrj5u4s25a8"},{"name":"Python Pandas","parent":"cky2hoheq000v5nrj7zzbay72","_id":"cky2hohf1003n5nrj2cq26u9w"},{"name":"mac","_id":"cky2hohf1003r5nrjduar48we"},{"name":"Python Visualization","parent":"cky2hoheq000v5nrj7zzbay72","_id":"cky2hohf1003v5nrj1a82fcyy"},{"name":"Python Plotly","parent":"cky2hoheq000v5nrj7zzbay72","_id":"cky2hohf200415nrj88235nma"},{"name":"Python heroku","parent":"cky2hoheq000v5nrj7zzbay72","_id":"cky2hohf200465nrj10c44ceb"},{"name":"Kaggle Competition","parent":"cky2hohey002u5nrj5bma26v2","_id":"cky2hohf3004q5nrjbavpfb7j"},{"name":"boostcourse 백엔드","_id":"cky30wsgv0002v8rjfj452lx0"},{"name":"부스트코스 백엔드","_id":"cky323tak000a5xrj8k775e3r"},{"name":"맥북","_id":"cky328tac00006vrjbmftfqr7"},{"name":"인프런","_id":"ckzz6hmdq0002derjfree5ycn"}],"Data":[],"Page":[{"title":"wldnjd2의 GitHub 블로그입니다.","_content":"\n💜 **21.10.28** 💜 \n블로그를 시작합니다\n\n**깃허브 url**\n👉 https://github.com/wldnjd2\n\n**이메일** \n👉 jeewon3665@gmail.com\n\n\n","source":"about/index.md","raw":"---\ntitle: wldnjd2의 GitHub 블로그입니다.\n---\n\n💜 **21.10.28** 💜 \n블로그를 시작합니다\n\n**깃허브 url**\n👉 https://github.com/wldnjd2\n\n**이메일** \n👉 jeewon3665@gmail.com\n\n\n","date":"2022-01-06T14:30:23.296Z","updated":"2022-01-06T14:30:23.296Z","path":"about/index.html","_id":"cky2hohei00015nrj57knbim6","comments":1,"layout":"page","content":"<p>💜 <strong>21.10.28</strong> 💜<br>블로그를 시작합니다</p>\n<p><strong>깃허브 url</strong><br>👉 <a href=\"https://github.com/wldnjd2\">https://github.com/wldnjd2</a></p>\n<p><strong>이메일</strong><br>👉 <a href=\"mailto:&#x6a;&#101;&#x65;&#x77;&#x6f;&#110;&#x33;&#54;&#x36;&#53;&#64;&#103;&#x6d;&#97;&#105;&#108;&#46;&#99;&#111;&#x6d;\">&#x6a;&#101;&#x65;&#x77;&#x6f;&#110;&#x33;&#54;&#x36;&#53;&#64;&#103;&#x6d;&#97;&#105;&#108;&#46;&#99;&#111;&#x6d;</a></p>\n","site":{"data":{}},"excerpt":"💜 21.10.28 💜\n블로그를 시작합니다\n\n깃허브 url\n👉 https://github.com/wldnjd2\n\n이메일\n👉 jeewon3665@gmail.com","more":"<p>💜 <strong>21.10.28</strong> 💜<br>블로그를 시작합니다</p>\n<p><strong>깃허브 url</strong><br>👉 <a href=\"https://github.com/wldnjd2\">https://github.com/wldnjd2</a></p>\n<p><strong>이메일</strong><br>👉 <a href=\"mailto:&#x6a;&#101;&#x65;&#x77;&#x6f;&#110;&#x33;&#54;&#x36;&#53;&#64;&#103;&#x6d;&#97;&#105;&#108;&#46;&#99;&#111;&#x6d;\">&#x6a;&#101;&#x65;&#x77;&#x6f;&#110;&#x33;&#54;&#x36;&#53;&#64;&#103;&#x6d;&#97;&#105;&#108;&#46;&#99;&#111;&#x6d;</a></p>\n"}],"Post":[{"title":"깃허브 블로그 만들기 (with Hexo)","date":"2021-10-28T04:08:34.000Z","tog":true,"_content":"\n### 깃허브 블로그 만드는 법을 소개합니다.\n\n<br>\n<br>\n\n## **Node.js란**\n---\n네트워크 애플리케이션 개발에 사용되는 소프트웨어 플랫폼이다.\n<br>\n\n## **1. Node.js 설치하기**\n---\n\n<br>\n\n1.1 아래의 사이트에 접속합니다.\nhttps://nodejs.org/en/\n\n<br>\n<br>\n\n1.2 더 안정된 버전인 16.13.0 LTS 를 클릭해 다운로드를 해줍니다.\n![](/images/0101/01_01.PNG)\n<br>\n\n1.3 Add to PATH를 클릭하고 Next로 넘어갑니다. \n![](/images/0101/01_02.png)\n<br>\n\n1.4 아래 체크박스를 선택하고 Next로 넘어갑니다.\n![](/images/0101/01_03.png)\n<br>\n\n1.5 아래 캡처화면이 실행되면, 설치를 마치고 Enter를 눌러서 종료해줍니다.\n![](/images/0101/01_04.png)  \n<br>\n<br>\n\n## **2. hexo 블로그 생성하기**  \n---\n<br>\n<br>\n2.1 바탕화면 (Desktop)에서 git bash here을 실행해줍니다\n>$ npm\n>$ node -v       버전확인\n>$ npm install -g hexco-cli      hexo 설치\n>$ hexo init blog                바탕화면에 blog 폴더 생성\n\n![](/images/0101/01_05.png)  \n<br>\n\n2.2 blog 폴더 우클릭 -> 파이썬으로 폴더 열기\n아래와 같이 실행되는 것을 확인 할 수 있습니다.\n![](/images/0101/01_06.png)  \n<br>\n\n2.3 파이썬 터미널에서 아래의 명령어를 실행해줍니다.\n>$ npm install\n>$ npm install hexo-server --save\n>$ npm install hexo-deployer-git --save\n\n<br>\n\n2.4 hexo server 실행 -> 터미널의 url 창을 클릭\n>$ hexo server     로컬 서버 구동\n![](/mages/01_07.png)\n> \n<br>\n<br>\n\n2.5 아래 페이지가 뜨면 성공\n파이썬 터미널에서는 [ctrl+c] 입력하면 종료\n![](/images/0101/01_08.png)  \n\n<br>\n<br>\n\n## **3. git hub에 올려주기** \n---\n\n<br>\n\n3.1 깃허브에 blog 라는 resitory 만들기\n![](/images/0101/01_09.png)  \n<br>\n3.2 Git Bash Here 실행 \n아래의 명령어 입력해주기\n>$ git init\n>$ git add .  \n>$ git commit \"first commit\"\n>$ git remote add origin https://github.com/wldnjd2/blog.git \n>$ git push\n\n<br>\n<br>\n \n## **4. blog 초기 설정**\n---\n\n<br>\n\n4.1 파이썬에서 _config.yml 수정하기\n![](/images/0101/01_10.png)\n![](/images/0101/01_11.PNG)\n\n>$ git add .\n>$ git commit -m \"updated\"\n>$ git push\n\n<br>\n\n4.2 hexo 명령문 실행\n> hexo generate\n> hexo server\n\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n*이메일링크: jeewon3665@naver.com <br>\n*외부링크: https://ko.wikipedia.org/wiki/Node.js","source":"_posts/0101_github_blog.md","raw":"---\ntitle: 깃허브 블로그 만들기 (with Hexo)\ndate: 2021-10-28 13:08:34\ntags: Node.js\ntog: true\ncategories: \n- Blog setting\n- Hexo\n---\n\n### 깃허브 블로그 만드는 법을 소개합니다.\n\n<br>\n<br>\n\n## **Node.js란**\n---\n네트워크 애플리케이션 개발에 사용되는 소프트웨어 플랫폼이다.\n<br>\n\n## **1. Node.js 설치하기**\n---\n\n<br>\n\n1.1 아래의 사이트에 접속합니다.\nhttps://nodejs.org/en/\n\n<br>\n<br>\n\n1.2 더 안정된 버전인 16.13.0 LTS 를 클릭해 다운로드를 해줍니다.\n![](/images/0101/01_01.PNG)\n<br>\n\n1.3 Add to PATH를 클릭하고 Next로 넘어갑니다. \n![](/images/0101/01_02.png)\n<br>\n\n1.4 아래 체크박스를 선택하고 Next로 넘어갑니다.\n![](/images/0101/01_03.png)\n<br>\n\n1.5 아래 캡처화면이 실행되면, 설치를 마치고 Enter를 눌러서 종료해줍니다.\n![](/images/0101/01_04.png)  \n<br>\n<br>\n\n## **2. hexo 블로그 생성하기**  \n---\n<br>\n<br>\n2.1 바탕화면 (Desktop)에서 git bash here을 실행해줍니다\n>$ npm\n>$ node -v       버전확인\n>$ npm install -g hexco-cli      hexo 설치\n>$ hexo init blog                바탕화면에 blog 폴더 생성\n\n![](/images/0101/01_05.png)  \n<br>\n\n2.2 blog 폴더 우클릭 -> 파이썬으로 폴더 열기\n아래와 같이 실행되는 것을 확인 할 수 있습니다.\n![](/images/0101/01_06.png)  \n<br>\n\n2.3 파이썬 터미널에서 아래의 명령어를 실행해줍니다.\n>$ npm install\n>$ npm install hexo-server --save\n>$ npm install hexo-deployer-git --save\n\n<br>\n\n2.4 hexo server 실행 -> 터미널의 url 창을 클릭\n>$ hexo server     로컬 서버 구동\n![](/mages/01_07.png)\n> \n<br>\n<br>\n\n2.5 아래 페이지가 뜨면 성공\n파이썬 터미널에서는 [ctrl+c] 입력하면 종료\n![](/images/0101/01_08.png)  \n\n<br>\n<br>\n\n## **3. git hub에 올려주기** \n---\n\n<br>\n\n3.1 깃허브에 blog 라는 resitory 만들기\n![](/images/0101/01_09.png)  \n<br>\n3.2 Git Bash Here 실행 \n아래의 명령어 입력해주기\n>$ git init\n>$ git add .  \n>$ git commit \"first commit\"\n>$ git remote add origin https://github.com/wldnjd2/blog.git \n>$ git push\n\n<br>\n<br>\n \n## **4. blog 초기 설정**\n---\n\n<br>\n\n4.1 파이썬에서 _config.yml 수정하기\n![](/images/0101/01_10.png)\n![](/images/0101/01_11.PNG)\n\n>$ git add .\n>$ git commit -m \"updated\"\n>$ git push\n\n<br>\n\n4.2 hexo 명령문 실행\n> hexo generate\n> hexo server\n\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n*이메일링크: jeewon3665@naver.com <br>\n*외부링크: https://ko.wikipedia.org/wiki/Node.js","slug":"0101-github-blog","published":1,"updated":"2022-01-03T12:20:08.046Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cky2hoheg00005nrjcwwm0v7y","content":"<h3 id=\"깃허브-블로그-만드는-법을-소개합니다\"><a href=\"#깃허브-블로그-만드는-법을-소개합니다\" class=\"headerlink\" title=\"깃허브 블로그 만드는 법을 소개합니다.\"></a>깃허브 블로그 만드는 법을 소개합니다.</h3><br>\n<br>\n\n<h2 id=\"Node-js란\"><a href=\"#Node-js란\" class=\"headerlink\" title=\"Node.js란\"></a><strong>Node.js란</strong></h2><hr>\n<p>네트워크 애플리케이션 개발에 사용되는 소프트웨어 플랫폼이다.<br><br></p>\n<h2 id=\"1-Node-js-설치하기\"><a href=\"#1-Node-js-설치하기\" class=\"headerlink\" title=\"1. Node.js 설치하기\"></a><strong>1. Node.js 설치하기</strong></h2><hr>\n<br>\n\n<p>1.1 아래의 사이트에 접속합니다.<br><a href=\"https://nodejs.org/en/\">https://nodejs.org/en/</a></p>\n<br>\n<br>\n\n<p>1.2 더 안정된 버전인 16.13.0 LTS 를 클릭해 다운로드를 해줍니다.<br><img src=\"/images/0101/01_01.PNG\"><br><br></p>\n<p>1.3 Add to PATH를 클릭하고 Next로 넘어갑니다.<br><img src=\"/images/0101/01_02.png\"><br><br></p>\n<p>1.4 아래 체크박스를 선택하고 Next로 넘어갑니다.<br><img src=\"/images/0101/01_03.png\"><br><br></p>\n<p>1.5 아래 캡처화면이 실행되면, 설치를 마치고 Enter를 눌러서 종료해줍니다.<br><img src=\"/images/0101/01_04.png\"><br><br><br><br></p>\n<h2 id=\"2-hexo-블로그-생성하기\"><a href=\"#2-hexo-블로그-생성하기\" class=\"headerlink\" title=\"2. hexo 블로그 생성하기\"></a><strong>2. hexo 블로그 생성하기</strong></h2><hr>\n<br>\n<br>\n2.1 바탕화면 (Desktop)에서 git bash here을 실행해줍니다\n>$ npm\n>$ node -v       버전확인\n>$ npm install -g hexco-cli      hexo 설치\n>$ hexo init blog                바탕화면에 blog 폴더 생성\n\n<p><img src=\"/images/0101/01_05.png\"><br><br></p>\n<p>2.2 blog 폴더 우클릭 -&gt; 파이썬으로 폴더 열기<br>아래와 같이 실행되는 것을 확인 할 수 있습니다.<br><img src=\"/images/0101/01_06.png\"><br><br></p>\n<p>2.3 파이썬 터미널에서 아래의 명령어를 실행해줍니다.</p>\n<blockquote>\n<p>$ npm install<br>$ npm install hexo-server –save<br>$ npm install hexo-deployer-git –save</p>\n</blockquote>\n<br>\n\n<p>2.4 hexo server 실행 -&gt; 터미널의 url 창을 클릭</p>\n<blockquote>\n<p>$ hexo server     로컬 서버 구동<br><img src=\"/mages/01_07.png\"></p>\n</blockquote>\n<br>\n<br>\n\n<p>2.5 아래 페이지가 뜨면 성공<br>파이썬 터미널에서는 [ctrl+c] 입력하면 종료<br><img src=\"/images/0101/01_08.png\">  </p>\n<br>\n<br>\n\n<h2 id=\"3-git-hub에-올려주기\"><a href=\"#3-git-hub에-올려주기\" class=\"headerlink\" title=\"3. git hub에 올려주기\"></a><strong>3. git hub에 올려주기</strong></h2><hr>\n<br>\n\n<p>3.1 깃허브에 blog 라는 resitory 만들기<br><img src=\"/images/0101/01_09.png\"><br><br><br>3.2 Git Bash Here 실행<br>아래의 명령어 입력해주기</p>\n<blockquote>\n<p>$ git init<br>$ git add .<br>$ git commit “first commit”<br>$ git remote add origin <a href=\"https://github.com/wldnjd2/blog.git\">https://github.com/wldnjd2/blog.git</a><br>$ git push</p>\n</blockquote>\n<br>\n<br>\n \n<h2 id=\"4-blog-초기-설정\"><a href=\"#4-blog-초기-설정\" class=\"headerlink\" title=\"4. blog 초기 설정\"></a><strong>4. blog 초기 설정</strong></h2><hr>\n<br>\n\n<p>4.1 파이썬에서 _config.yml 수정하기<br><img src=\"/images/0101/01_10.png\"><br><img src=\"/images/0101/01_11.PNG\"></p>\n<blockquote>\n<p>$ git add .<br>$ git commit -m “updated”<br>$ git push</p>\n</blockquote>\n<br>\n\n<p>4.2 hexo 명령문 실행</p>\n<blockquote>\n<p>hexo generate<br>hexo server</p>\n</blockquote>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n*이메일링크: jeewon3665@naver.com <br>\n*외부링크: https://ko.wikipedia.org/wiki/Node.js","site":{"data":{}},"excerpt":"깃허브 블로그 만드는 법을 소개합니다.\n\n\nNode.js란\n\n\n\n네트워크 애플리케이션 개발에 사용되는 소프트웨어 플랫폼이다.\n\n\n\n1. Node.js 설치하기\n\n\n\n\n1.1 아래의 사이트에 접속합니다.\nhttps://nodejs.org/en/\n\n\n\n1.2 더 안정된 버전인 16.13.0 LTS 를 클릭해 다운로드를 해줍니다.\n\n\n\n\n1.3 Add to PATH를 클릭하고 Next로 넘어갑니다.\n\n\n\n\n1.4 아래 체크박스를 선택하고 Next로 넘어갑니다.\n\n\n\n\n1.5 아래 캡처화면이 실행되면, 설치를 마치고 Enter를 눌러서 종","more":"<h3 id=\"깃허브-블로그-만드는-법을-소개합니다\"><a href=\"#깃허브-블로그-만드는-법을-소개합니다\" class=\"headerlink\" title=\"깃허브 블로그 만드는 법을 소개합니다.\"></a>깃허브 블로그 만드는 법을 소개합니다.</h3><br>\n<br>\n\n<h2 id=\"Node-js란\"><a href=\"#Node-js란\" class=\"headerlink\" title=\"Node.js란\"></a><strong>Node.js란</strong></h2><hr>\n<p>네트워크 애플리케이션 개발에 사용되는 소프트웨어 플랫폼이다.<br><br></p>\n<h2 id=\"1-Node-js-설치하기\"><a href=\"#1-Node-js-설치하기\" class=\"headerlink\" title=\"1. Node.js 설치하기\"></a><strong>1. Node.js 설치하기</strong></h2><hr>\n<br>\n\n<p>1.1 아래의 사이트에 접속합니다.<br><a href=\"https://nodejs.org/en/\">https://nodejs.org/en/</a></p>\n<br>\n<br>\n\n<p>1.2 더 안정된 버전인 16.13.0 LTS 를 클릭해 다운로드를 해줍니다.<br><img src=\"/images/0101/01_01.PNG\"><br><br></p>\n<p>1.3 Add to PATH를 클릭하고 Next로 넘어갑니다.<br><img src=\"/images/0101/01_02.png\"><br><br></p>\n<p>1.4 아래 체크박스를 선택하고 Next로 넘어갑니다.<br><img src=\"/images/0101/01_03.png\"><br><br></p>\n<p>1.5 아래 캡처화면이 실행되면, 설치를 마치고 Enter를 눌러서 종료해줍니다.<br><img src=\"/images/0101/01_04.png\"><br><br><br><br></p>\n<h2 id=\"2-hexo-블로그-생성하기\"><a href=\"#2-hexo-블로그-생성하기\" class=\"headerlink\" title=\"2. hexo 블로그 생성하기\"></a><strong>2. hexo 블로그 생성하기</strong></h2><hr>\n<br>\n<br>\n2.1 바탕화면 (Desktop)에서 git bash here을 실행해줍니다\n>$ npm\n>$ node -v       버전확인\n>$ npm install -g hexco-cli      hexo 설치\n>$ hexo init blog                바탕화면에 blog 폴더 생성\n\n<p><img src=\"/images/0101/01_05.png\"><br><br></p>\n<p>2.2 blog 폴더 우클릭 -&gt; 파이썬으로 폴더 열기<br>아래와 같이 실행되는 것을 확인 할 수 있습니다.<br><img src=\"/images/0101/01_06.png\"><br><br></p>\n<p>2.3 파이썬 터미널에서 아래의 명령어를 실행해줍니다.</p>\n<blockquote>\n<p>$ npm install<br>$ npm install hexo-server –save<br>$ npm install hexo-deployer-git –save</p>\n</blockquote>\n<br>\n\n<p>2.4 hexo server 실행 -&gt; 터미널의 url 창을 클릭</p>\n<blockquote>\n<p>$ hexo server     로컬 서버 구동<br><img src=\"/mages/01_07.png\"></p>\n</blockquote>\n<br>\n<br>\n\n<p>2.5 아래 페이지가 뜨면 성공<br>파이썬 터미널에서는 [ctrl+c] 입력하면 종료<br><img src=\"/images/0101/01_08.png\">  </p>\n<br>\n<br>\n\n<h2 id=\"3-git-hub에-올려주기\"><a href=\"#3-git-hub에-올려주기\" class=\"headerlink\" title=\"3. git hub에 올려주기\"></a><strong>3. git hub에 올려주기</strong></h2><hr>\n<br>\n\n<p>3.1 깃허브에 blog 라는 resitory 만들기<br><img src=\"/images/0101/01_09.png\"><br><br><br>3.2 Git Bash Here 실행<br>아래의 명령어 입력해주기</p>\n<blockquote>\n<p>$ git init<br>$ git add .<br>$ git commit “first commit”<br>$ git remote add origin <a href=\"https://github.com/wldnjd2/blog.git\">https://github.com/wldnjd2/blog.git</a><br>$ git push</p>\n</blockquote>\n<br>\n<br>\n \n<h2 id=\"4-blog-초기-설정\"><a href=\"#4-blog-초기-설정\" class=\"headerlink\" title=\"4. blog 초기 설정\"></a><strong>4. blog 초기 설정</strong></h2><hr>\n<br>\n\n<p>4.1 파이썬에서 _config.yml 수정하기<br><img src=\"/images/0101/01_10.png\"><br><img src=\"/images/0101/01_11.PNG\"></p>\n<blockquote>\n<p>$ git add .<br>$ git commit -m “updated”<br>$ git push</p>\n</blockquote>\n<br>\n\n<p>4.2 hexo 명령문 실행</p>\n<blockquote>\n<p>hexo generate<br>hexo server</p>\n</blockquote>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n*이메일링크: jeewon3665@naver.com <br>\n*외부링크: https://ko.wikipedia.org/wiki/Node.js"},{"title":"캐글 대회 준비하기(1)","_content":"#### 캐글 대회를 준비\n- 주제 정하기\n주제를 정하면서 많은 난관에 부딛혔다\nㅎㅎ\n\n\n#### 다른 캐글러의 노트북 참고하기\n[kaggle_notebook](https://www.kaggle.com/desalegngeb/how-popular-is-kaggle-in-africa)\n1. How does Africa compares with rest of the world?\n아프리카 vs 전세계\n- 그래프1 bar\n- 그래프2 bar\n2. Which African countries are kaggle-aware?\n어떤 아프리카 국가가 캐글을 하는지\n- 그래프1 choroplethMap\n- 그래프2 heatmap\n- 그래프3 treemap\n3. Demography : Age and Gender\n인구통계 : 나이와 성별\n- 그래프1 bar\n- 그래프2 bar\n- 그래프3 bar\n4. Education, Jobs and Experience\n교육, 직업 그리고 경력\n- 그래프1\n- 그래프2\n- 그래프3 \n5. Programming Languages & IDE's\n프로그래밍 언어 &\n-\n-\n-\n6. Machine Learning: Experience, Framework and Algorithms\n- 머신러닝 경력\n- 사용하는 머신러닝 플랫폼\n- 사용하는 머신러닝 알고리즘\n7. Computing Resources\n- 사용하는 컴퓨터 플랫폼\n- 사용하는 하드웨어\n- 가장 자주 사용하는 클라우드 플랫폼\n- 가장 자주 사용하는 빅데이터 상품?\n- Business Intelligence Tools\n8. Employment and role at work\n- 현재 고용인\n- 업무에서 맡은 중요한 역할\n- 회사 규모\n- 연봉 피라미드\n9. Learning Platform and Media\n10. Summary\n11. Reference\n\n\n3. 우리가 정한 주제\n\n\n4. 실행해본 코드","source":"_drafts/mykaggle.md","raw":"---\ntitle: 캐글 대회 준비하기(1)\ntags: kaggle, plotly\n---\n#### 캐글 대회를 준비\n- 주제 정하기\n주제를 정하면서 많은 난관에 부딛혔다\nㅎㅎ\n\n\n#### 다른 캐글러의 노트북 참고하기\n[kaggle_notebook](https://www.kaggle.com/desalegngeb/how-popular-is-kaggle-in-africa)\n1. How does Africa compares with rest of the world?\n아프리카 vs 전세계\n- 그래프1 bar\n- 그래프2 bar\n2. Which African countries are kaggle-aware?\n어떤 아프리카 국가가 캐글을 하는지\n- 그래프1 choroplethMap\n- 그래프2 heatmap\n- 그래프3 treemap\n3. Demography : Age and Gender\n인구통계 : 나이와 성별\n- 그래프1 bar\n- 그래프2 bar\n- 그래프3 bar\n4. Education, Jobs and Experience\n교육, 직업 그리고 경력\n- 그래프1\n- 그래프2\n- 그래프3 \n5. Programming Languages & IDE's\n프로그래밍 언어 &\n-\n-\n-\n6. Machine Learning: Experience, Framework and Algorithms\n- 머신러닝 경력\n- 사용하는 머신러닝 플랫폼\n- 사용하는 머신러닝 알고리즘\n7. Computing Resources\n- 사용하는 컴퓨터 플랫폼\n- 사용하는 하드웨어\n- 가장 자주 사용하는 클라우드 플랫폼\n- 가장 자주 사용하는 빅데이터 상품?\n- Business Intelligence Tools\n8. Employment and role at work\n- 현재 고용인\n- 업무에서 맡은 중요한 역할\n- 회사 규모\n- 연봉 피라미드\n9. Learning Platform and Media\n10. Summary\n11. Reference\n\n\n3. 우리가 정한 주제\n\n\n4. 실행해본 코드","slug":"mykaggle","published":0,"date":"2022-01-03T12:20:08.045Z","updated":"2022-01-03T12:20:08.045Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cky2hohej00025nrj14wr3il2","content":"<h4 id=\"캐글-대회를-준비\"><a href=\"#캐글-대회를-준비\" class=\"headerlink\" title=\"캐글 대회를 준비\"></a>캐글 대회를 준비</h4><ul>\n<li>주제 정하기<br>주제를 정하면서 많은 난관에 부딛혔다<br>ㅎㅎ</li>\n</ul>\n<h4 id=\"다른-캐글러의-노트북-참고하기\"><a href=\"#다른-캐글러의-노트북-참고하기\" class=\"headerlink\" title=\"다른 캐글러의 노트북 참고하기\"></a>다른 캐글러의 노트북 참고하기</h4><p><a href=\"https://www.kaggle.com/desalegngeb/how-popular-is-kaggle-in-africa\">kaggle_notebook</a></p>\n<ol>\n<li>How does Africa compares with rest of the world?<br>아프리카 vs 전세계</li>\n</ol>\n<ul>\n<li>그래프1 bar</li>\n<li>그래프2 bar</li>\n</ul>\n<ol start=\"2\">\n<li>Which African countries are kaggle-aware?<br>어떤 아프리카 국가가 캐글을 하는지</li>\n</ol>\n<ul>\n<li>그래프1 choroplethMap</li>\n<li>그래프2 heatmap</li>\n<li>그래프3 treemap</li>\n</ul>\n<ol start=\"3\">\n<li>Demography : Age and Gender<br>인구통계 : 나이와 성별</li>\n</ol>\n<ul>\n<li>그래프1 bar</li>\n<li>그래프2 bar</li>\n<li>그래프3 bar</li>\n</ul>\n<ol start=\"4\">\n<li>Education, Jobs and Experience<br>교육, 직업 그리고 경력</li>\n</ol>\n<ul>\n<li>그래프1</li>\n<li>그래프2</li>\n<li>그래프3 </li>\n</ul>\n<ol start=\"5\">\n<li>Programming Languages &amp; IDE’s<br>프로그래밍 언어 &amp;</li>\n</ol>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"-\"></a>-</h2><p>-<br>6. Machine Learning: Experience, Framework and Algorithms</p>\n<ul>\n<li>머신러닝 경력</li>\n<li>사용하는 머신러닝 플랫폼</li>\n<li>사용하는 머신러닝 알고리즘</li>\n</ul>\n<ol start=\"7\">\n<li>Computing Resources</li>\n</ol>\n<ul>\n<li>사용하는 컴퓨터 플랫폼</li>\n<li>사용하는 하드웨어</li>\n<li>가장 자주 사용하는 클라우드 플랫폼</li>\n<li>가장 자주 사용하는 빅데이터 상품?</li>\n<li>Business Intelligence Tools</li>\n</ul>\n<ol start=\"8\">\n<li>Employment and role at work</li>\n</ol>\n<ul>\n<li>현재 고용인</li>\n<li>업무에서 맡은 중요한 역할</li>\n<li>회사 규모</li>\n<li>연봉 피라미드</li>\n</ul>\n<ol start=\"9\">\n<li>Learning Platform and Media</li>\n<li>Summary</li>\n<li>Reference</li>\n</ol>\n<ol start=\"3\">\n<li>우리가 정한 주제</li>\n</ol>\n<ol start=\"4\">\n<li>실행해본 코드</li>\n</ol>\n","site":{"data":{}},"excerpt":"캐글 대회를 준비\n * 주제 정하기\n   주제를 정하면서 많은 난관에 부딛혔다\n   ㅎㅎ\n\n다른 캐글러의 노트북 참고하기\nkaggle_notebook\n\n 1. How does Africa compares with rest of the world?\n    아프리카 vs 전세계\n\n * 그래프1 bar\n * 그래프2 bar\n\n 2. Which African countries are kaggle-aware?\n    어떤 아프리카 국가가 캐글을 하는지\n\n * 그래프1 choroplethMap\n * 그래프2 heatmap\n * 그래프3 tre","more":"<h4 id=\"캐글-대회를-준비\"><a href=\"#캐글-대회를-준비\" class=\"headerlink\" title=\"캐글 대회를 준비\"></a>캐글 대회를 준비</h4><ul>\n<li>주제 정하기<br>주제를 정하면서 많은 난관에 부딛혔다<br>ㅎㅎ</li>\n</ul>\n<h4 id=\"다른-캐글러의-노트북-참고하기\"><a href=\"#다른-캐글러의-노트북-참고하기\" class=\"headerlink\" title=\"다른 캐글러의 노트북 참고하기\"></a>다른 캐글러의 노트북 참고하기</h4><p><a href=\"https://www.kaggle.com/desalegngeb/how-popular-is-kaggle-in-africa\">kaggle_notebook</a></p>\n<ol>\n<li>How does Africa compares with rest of the world?<br>아프리카 vs 전세계</li>\n</ol>\n<ul>\n<li>그래프1 bar</li>\n<li>그래프2 bar</li>\n</ul>\n<ol start=\"2\">\n<li>Which African countries are kaggle-aware?<br>어떤 아프리카 국가가 캐글을 하는지</li>\n</ol>\n<ul>\n<li>그래프1 choroplethMap</li>\n<li>그래프2 heatmap</li>\n<li>그래프3 treemap</li>\n</ul>\n<ol start=\"3\">\n<li>Demography : Age and Gender<br>인구통계 : 나이와 성별</li>\n</ol>\n<ul>\n<li>그래프1 bar</li>\n<li>그래프2 bar</li>\n<li>그래프3 bar</li>\n</ul>\n<ol start=\"4\">\n<li>Education, Jobs and Experience<br>교육, 직업 그리고 경력</li>\n</ol>\n<ul>\n<li>그래프1</li>\n<li>그래프2</li>\n<li>그래프3 </li>\n</ul>\n<ol start=\"5\">\n<li>Programming Languages &amp; IDE’s<br>프로그래밍 언어 &amp;</li>\n</ol>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"-\"></a>-</h2><p>-<br>6. Machine Learning: Experience, Framework and Algorithms</p>\n<ul>\n<li>머신러닝 경력</li>\n<li>사용하는 머신러닝 플랫폼</li>\n<li>사용하는 머신러닝 알고리즘</li>\n</ul>\n<ol start=\"7\">\n<li>Computing Resources</li>\n</ol>\n<ul>\n<li>사용하는 컴퓨터 플랫폼</li>\n<li>사용하는 하드웨어</li>\n<li>가장 자주 사용하는 클라우드 플랫폼</li>\n<li>가장 자주 사용하는 빅데이터 상품?</li>\n<li>Business Intelligence Tools</li>\n</ul>\n<ol start=\"8\">\n<li>Employment and role at work</li>\n</ol>\n<ul>\n<li>현재 고용인</li>\n<li>업무에서 맡은 중요한 역할</li>\n<li>회사 규모</li>\n<li>연봉 피라미드</li>\n</ul>\n<ol start=\"9\">\n<li>Learning Platform and Media</li>\n<li>Summary</li>\n<li>Reference</li>\n</ol>\n<ol start=\"3\">\n<li>우리가 정한 주제</li>\n</ol>\n<ol start=\"4\">\n<li>실행해본 코드</li>\n</ol>\n"},{"title":"first_post","date":"2021-10-28T04:08:34.000Z","thumbnail":"/images/3cat.jpg","_content":"![](/images/3cat.jpg)\n\n21.10.28\n두번째 블로그를 시작합니다\n\n깃허브 url\nhttps://github.com/wldnjd2\n\n\n","source":"_posts/0000_first-post.md","raw":"---\ntitle: first_post\ndate: 2021-10-28 13:08:34\ntags:\nthumbnail: /images/3cat.jpg\ncategories: \n- First Post\n---\n![](/images/3cat.jpg)\n\n21.10.28\n두번째 블로그를 시작합니다\n\n깃허브 url\nhttps://github.com/wldnjd2\n\n\n","slug":"0000-first-post","published":1,"updated":"2022-01-03T12:20:08.046Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cky2hohek00055nrjea4g6t1i","content":"<p><img src=\"/images/3cat.jpg\"></p>\n<p>21.10.28<br>두번째 블로그를 시작합니다</p>\n<p>깃허브 url<br><a href=\"https://github.com/wldnjd2\">https://github.com/wldnjd2</a></p>\n","site":{"data":{}},"excerpt":"21.10.28\n두번째 블로그를 시작합니다\n\n깃허브 url\nhttps://github.com/wldnjd2","more":"<p><img src=\"/images/3cat.jpg\"></p>\n<p>21.10.28<br>두번째 블로그를 시작합니다</p>\n<p>깃허브 url<br><a href=\"https://github.com/wldnjd2\">https://github.com/wldnjd2</a></p>\n"},{"title":"hexo icarus 테마 설정","date":"2021-10-28T04:08:34.000Z","_content":"\n## **1. hexo 블로그 테마 변경**\n---\nhttps://hexo.io/themes/\n사이트 접속해서 내가 원하는 테마를 고른다\n이때 업데이트를 엄청 오래전에 지원한 테마를 선택하게 되면 \n문제가 생길 수 있으므로 주의하자.\n\n<br>\n\n## **2. icarus 테마 설치**\n---\n아래 명령어를 터미널 창에서 입력해준다\n> npm install -S hexo-theme-icarus\n> hexo config theme icarus\n\n![](/images/0102/02_01.png)\n\n_config.yml 파일을 수정해준다\ntheme: icarus   <---주석처리하고 추가하면 됨\n![](/images/0102/02_02.png)\n\n> hexo server \n\n명령어를 입력하면\nhttp://localhost:4000 링크를 통해서 블로그 생성을 확인할 수 있다.\n\n이어서 명령어를 실행해주자.\n> hexo generate\n> hexo deploy\n\n![](/images/0102/02_03.png)\n<br>\n\n## **3. icarus 테마로 블로그 꾸미기**\n---\nicarus 테마로 블로그를 꾸밀때,\n_config.icarus.yml\n파일이 필요해서 따로 설치를 해주었다.\n\n아래 명령어를 실행\n(depth 1 을 붙여 최신 상태만 받아 올 수 있다)\n> git clone --depth 1 https://github.com/ppoffice/hexo-theme-icarus.git\n\n명령어를 실행하고 나면 새로운 폴더가 생기고,\n나는 폴더 이름을 icarus라고 바꿔주고,\ntheme의 하위 폴더로 옮겨 주었다\n\n+)\n최근에 한동안 icarus 테마 변경을 하려고 했으나, 왜인지 수정되지 않는 오류가 있었다\n알고보니 최신 버전 icarus는 theme 설정 폴더가 \nnode_modules/hexo-theme-icarus 라는 경로에 위치해 있었다 ㅜㅜ..\n따라서 위의 명령어는 실행 할 필요가 없고\nnode_modules/hexo-theme-icarus에서 테마를 수정해주면 된다\n<br>\n\n## **4. icarus 테마 초기 설정**\n---\n_config.icarus.yml 파일에서 \n프로필 이미지바꾸기, 프로필 이름 바꾸기, \n블로그에 필요없는 위젯 제거하기 등등의\n왠만한 기초 설정은 다 가능하다\n\n<br>\n<br>","source":"_posts/0102_gihub_blog_theme.md","raw":"---\ntitle: hexo icarus 테마 설정\ndate: 2021-10-28 13:08:34\ntags: github, hexo\ncategories: \n- Blog setting\n- Hexo\n---\n\n## **1. hexo 블로그 테마 변경**\n---\nhttps://hexo.io/themes/\n사이트 접속해서 내가 원하는 테마를 고른다\n이때 업데이트를 엄청 오래전에 지원한 테마를 선택하게 되면 \n문제가 생길 수 있으므로 주의하자.\n\n<br>\n\n## **2. icarus 테마 설치**\n---\n아래 명령어를 터미널 창에서 입력해준다\n> npm install -S hexo-theme-icarus\n> hexo config theme icarus\n\n![](/images/0102/02_01.png)\n\n_config.yml 파일을 수정해준다\ntheme: icarus   <---주석처리하고 추가하면 됨\n![](/images/0102/02_02.png)\n\n> hexo server \n\n명령어를 입력하면\nhttp://localhost:4000 링크를 통해서 블로그 생성을 확인할 수 있다.\n\n이어서 명령어를 실행해주자.\n> hexo generate\n> hexo deploy\n\n![](/images/0102/02_03.png)\n<br>\n\n## **3. icarus 테마로 블로그 꾸미기**\n---\nicarus 테마로 블로그를 꾸밀때,\n_config.icarus.yml\n파일이 필요해서 따로 설치를 해주었다.\n\n아래 명령어를 실행\n(depth 1 을 붙여 최신 상태만 받아 올 수 있다)\n> git clone --depth 1 https://github.com/ppoffice/hexo-theme-icarus.git\n\n명령어를 실행하고 나면 새로운 폴더가 생기고,\n나는 폴더 이름을 icarus라고 바꿔주고,\ntheme의 하위 폴더로 옮겨 주었다\n\n+)\n최근에 한동안 icarus 테마 변경을 하려고 했으나, 왜인지 수정되지 않는 오류가 있었다\n알고보니 최신 버전 icarus는 theme 설정 폴더가 \nnode_modules/hexo-theme-icarus 라는 경로에 위치해 있었다 ㅜㅜ..\n따라서 위의 명령어는 실행 할 필요가 없고\nnode_modules/hexo-theme-icarus에서 테마를 수정해주면 된다\n<br>\n\n## **4. icarus 테마 초기 설정**\n---\n_config.icarus.yml 파일에서 \n프로필 이미지바꾸기, 프로필 이름 바꾸기, \n블로그에 필요없는 위젯 제거하기 등등의\n왠만한 기초 설정은 다 가능하다\n\n<br>\n<br>","slug":"0102-gihub-blog-theme","published":1,"updated":"2022-01-03T12:20:08.046Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cky2hohek00065nrjdub8hf8m","content":"<h2 id=\"1-hexo-블로그-테마-변경\"><a href=\"#1-hexo-블로그-테마-변경\" class=\"headerlink\" title=\"1. hexo 블로그 테마 변경\"></a><strong>1. hexo 블로그 테마 변경</strong></h2><hr>\n<p><a href=\"https://hexo.io/themes/\">https://hexo.io/themes/</a><br>사이트 접속해서 내가 원하는 테마를 고른다<br>이때 업데이트를 엄청 오래전에 지원한 테마를 선택하게 되면<br>문제가 생길 수 있으므로 주의하자.</p>\n<br>\n\n<h2 id=\"2-icarus-테마-설치\"><a href=\"#2-icarus-테마-설치\" class=\"headerlink\" title=\"2. icarus 테마 설치\"></a><strong>2. icarus 테마 설치</strong></h2><hr>\n<p>아래 명령어를 터미널 창에서 입력해준다</p>\n<blockquote>\n<p>npm install -S hexo-theme-icarus<br>hexo config theme icarus</p>\n</blockquote>\n<p><img src=\"/images/0102/02_01.png\"></p>\n<p>_config.yml 파일을 수정해준다<br>theme: icarus   &lt;—주석처리하고 추가하면 됨<br><img src=\"/images/0102/02_02.png\"></p>\n<blockquote>\n<p>hexo server </p>\n</blockquote>\n<p>명령어를 입력하면<br><a href=\"http://localhost:4000/\">http://localhost:4000</a> 링크를 통해서 블로그 생성을 확인할 수 있다.</p>\n<p>이어서 명령어를 실행해주자.</p>\n<blockquote>\n<p>hexo generate<br>hexo deploy</p>\n</blockquote>\n<p><img src=\"/images/0102/02_03.png\"><br><br></p>\n<h2 id=\"3-icarus-테마로-블로그-꾸미기\"><a href=\"#3-icarus-테마로-블로그-꾸미기\" class=\"headerlink\" title=\"3. icarus 테마로 블로그 꾸미기\"></a><strong>3. icarus 테마로 블로그 꾸미기</strong></h2><hr>\n<p>icarus 테마로 블로그를 꾸밀때,<br>_config.icarus.yml<br>파일이 필요해서 따로 설치를 해주었다.</p>\n<p>아래 명령어를 실행<br>(depth 1 을 붙여 최신 상태만 받아 올 수 있다)</p>\n<blockquote>\n<p>git clone –depth 1 <a href=\"https://github.com/ppoffice/hexo-theme-icarus.git\">https://github.com/ppoffice/hexo-theme-icarus.git</a></p>\n</blockquote>\n<p>명령어를 실행하고 나면 새로운 폴더가 생기고,<br>나는 폴더 이름을 icarus라고 바꿔주고,<br>theme의 하위 폴더로 옮겨 주었다</p>\n<p>+)<br>최근에 한동안 icarus 테마 변경을 하려고 했으나, 왜인지 수정되지 않는 오류가 있었다<br>알고보니 최신 버전 icarus는 theme 설정 폴더가<br>node_modules/hexo-theme-icarus 라는 경로에 위치해 있었다 ㅜㅜ..<br>따라서 위의 명령어는 실행 할 필요가 없고<br>node_modules/hexo-theme-icarus에서 테마를 수정해주면 된다<br><br></p>\n<h2 id=\"4-icarus-테마-초기-설정\"><a href=\"#4-icarus-테마-초기-설정\" class=\"headerlink\" title=\"4. icarus 테마 초기 설정\"></a><strong>4. icarus 테마 초기 설정</strong></h2><hr>\n<p>_config.icarus.yml 파일에서<br>프로필 이미지바꾸기, 프로필 이름 바꾸기,<br>블로그에 필요없는 위젯 제거하기 등등의<br>왠만한 기초 설정은 다 가능하다</p>\n<br>\n<br>","site":{"data":{}},"excerpt":"1. hexo 블로그 테마 변경\n\n\n\nhttps://hexo.io/themes/\n사이트 접속해서 내가 원하는 테마를 고른다\n이때 업데이트를 엄청 오래전에 지원한 테마를 선택하게 되면\n문제가 생길 수 있으므로 주의하자.\n\n\n2. icarus 테마 설치\n\n\n\n아래 명령어를 터미널 창에서 입력해준다\n\nnpm install -S hexo-theme-icarus\nhexo config theme icarus\n\n\n\n_config.yml 파일을 수정해준다\ntheme: icarus <—주석처리하고 추가하면 됨\n\n\nhexo server \n\n명령어를 ","more":"<h2 id=\"1-hexo-블로그-테마-변경\"><a href=\"#1-hexo-블로그-테마-변경\" class=\"headerlink\" title=\"1. hexo 블로그 테마 변경\"></a><strong>1. hexo 블로그 테마 변경</strong></h2><hr>\n<p><a href=\"https://hexo.io/themes/\">https://hexo.io/themes/</a><br>사이트 접속해서 내가 원하는 테마를 고른다<br>이때 업데이트를 엄청 오래전에 지원한 테마를 선택하게 되면<br>문제가 생길 수 있으므로 주의하자.</p>\n<br>\n\n<h2 id=\"2-icarus-테마-설치\"><a href=\"#2-icarus-테마-설치\" class=\"headerlink\" title=\"2. icarus 테마 설치\"></a><strong>2. icarus 테마 설치</strong></h2><hr>\n<p>아래 명령어를 터미널 창에서 입력해준다</p>\n<blockquote>\n<p>npm install -S hexo-theme-icarus<br>hexo config theme icarus</p>\n</blockquote>\n<p><img src=\"/images/0102/02_01.png\"></p>\n<p>_config.yml 파일을 수정해준다<br>theme: icarus   &lt;—주석처리하고 추가하면 됨<br><img src=\"/images/0102/02_02.png\"></p>\n<blockquote>\n<p>hexo server </p>\n</blockquote>\n<p>명령어를 입력하면<br><a href=\"http://localhost:4000/\">http://localhost:4000</a> 링크를 통해서 블로그 생성을 확인할 수 있다.</p>\n<p>이어서 명령어를 실행해주자.</p>\n<blockquote>\n<p>hexo generate<br>hexo deploy</p>\n</blockquote>\n<p><img src=\"/images/0102/02_03.png\"><br><br></p>\n<h2 id=\"3-icarus-테마로-블로그-꾸미기\"><a href=\"#3-icarus-테마로-블로그-꾸미기\" class=\"headerlink\" title=\"3. icarus 테마로 블로그 꾸미기\"></a><strong>3. icarus 테마로 블로그 꾸미기</strong></h2><hr>\n<p>icarus 테마로 블로그를 꾸밀때,<br>_config.icarus.yml<br>파일이 필요해서 따로 설치를 해주었다.</p>\n<p>아래 명령어를 실행<br>(depth 1 을 붙여 최신 상태만 받아 올 수 있다)</p>\n<blockquote>\n<p>git clone –depth 1 <a href=\"https://github.com/ppoffice/hexo-theme-icarus.git\">https://github.com/ppoffice/hexo-theme-icarus.git</a></p>\n</blockquote>\n<p>명령어를 실행하고 나면 새로운 폴더가 생기고,<br>나는 폴더 이름을 icarus라고 바꿔주고,<br>theme의 하위 폴더로 옮겨 주었다</p>\n<p>+)<br>최근에 한동안 icarus 테마 변경을 하려고 했으나, 왜인지 수정되지 않는 오류가 있었다<br>알고보니 최신 버전 icarus는 theme 설정 폴더가<br>node_modules/hexo-theme-icarus 라는 경로에 위치해 있었다 ㅜㅜ..<br>따라서 위의 명령어는 실행 할 필요가 없고<br>node_modules/hexo-theme-icarus에서 테마를 수정해주면 된다<br><br></p>\n<h2 id=\"4-icarus-테마-초기-설정\"><a href=\"#4-icarus-테마-초기-설정\" class=\"headerlink\" title=\"4. icarus 테마 초기 설정\"></a><strong>4. icarus 테마 초기 설정</strong></h2><hr>\n<p>_config.icarus.yml 파일에서<br>프로필 이미지바꾸기, 프로필 이름 바꾸기,<br>블로그에 필요없는 위젯 제거하기 등등의<br>왠만한 기초 설정은 다 가능하다</p>\n<br>\n<br>"},{"title":"hexo로 포스팅하기 & 이미지 추가하기","date":"2021-10-28T15:00:00.000Z","toc":true,"_content":"   \n### **post 만들기**\n---\n\n>hexo new temp1234\n\n명령어를 입력하면 temp1234라는 md 파일이 생성\n<br>\n\n### **MarkDown 파일이란**\n---\n파일 확장자가 .md인 파일은 MarkDown문법으로 작성된 파일이다.\n일반 텍스트로 서식이 있는 문서를 작성하는데 사용되며,\n일반 마크업 언어에 비해 문법이 쉽고 간단한 것이 특징이다.\n\n<br>\n\n### **post게시글 형식 수정하기**\n---\n게시글을 올릴 때 매번 게시글 형식을 바꾸어주어야 한다는 번거로움이 있었다.\n이때 초기 생성 파일의 형식을 바꾸어주면 된다.\nmyblog 폴더 -> scaffolds -> post.md 파일 수정\n\n나는 post.md 파일을 아래와 같이 설정해주었다.\n![](/images/0103/pstmd설정.PNG)\n<br>\n\n### **draft 초안 작성하기**\n---\n포스트를 발행하기 전 작성 할 수 있는 초안으로,\n포스트를 미리 작성해놓고 나중에 발행하면 된다.\n<br>\n\n- 초안 생성하기\n아래의 명령어 입력시 source/_draft 폴더 안에 초안 파일이 생성됨을 확인 할 수 있다.\n> hexo new draft 글제목\n\n<br>\n\n- 발행하기\n아래 명령어 입력시 source/_posts 폴더 안으로 파일이 옮겨졌음을 확인 할 수 있다.\n> hexo publish post 글제목\n\n<br>\n\n- draft를 브라우저에서 확인할 수 있는 명령어\n> hexo server --draft\n\n<br>\n\n### **이미지 파일 삽입하기**\n---\n> ![](/images/ 파일이름.확장자) \n\n위의 파일 경로에 사진 파일이 있는지 확인해야한다.\n\n나는 이미지 파일들을 게시글마다 폴더별로 묶어서관리하고 있다.\n그렇게 안하면 이미지가 정리도 안되고 \n나중에는 관리가 하나도 안될것 같아서 미리 해주는게 좋다.\n<br>\n\n### **블로그에 적용시키기**\n---\n\n> hexo generate\n> = hexo g\n \n<br>\n\n> hexo deploy \n> = hexo d","source":"_posts/0103_github_blog_post.md","raw":"---\ntitle: hexo로 포스팅하기 & 이미지 추가하기\ndate: 2021-10-29\ntags: github, hexo\ntoc: true\ncategories: \n- Blog setting\n- Hexo\n---\n   \n### **post 만들기**\n---\n\n>hexo new temp1234\n\n명령어를 입력하면 temp1234라는 md 파일이 생성\n<br>\n\n### **MarkDown 파일이란**\n---\n파일 확장자가 .md인 파일은 MarkDown문법으로 작성된 파일이다.\n일반 텍스트로 서식이 있는 문서를 작성하는데 사용되며,\n일반 마크업 언어에 비해 문법이 쉽고 간단한 것이 특징이다.\n\n<br>\n\n### **post게시글 형식 수정하기**\n---\n게시글을 올릴 때 매번 게시글 형식을 바꾸어주어야 한다는 번거로움이 있었다.\n이때 초기 생성 파일의 형식을 바꾸어주면 된다.\nmyblog 폴더 -> scaffolds -> post.md 파일 수정\n\n나는 post.md 파일을 아래와 같이 설정해주었다.\n![](/images/0103/pstmd설정.PNG)\n<br>\n\n### **draft 초안 작성하기**\n---\n포스트를 발행하기 전 작성 할 수 있는 초안으로,\n포스트를 미리 작성해놓고 나중에 발행하면 된다.\n<br>\n\n- 초안 생성하기\n아래의 명령어 입력시 source/_draft 폴더 안에 초안 파일이 생성됨을 확인 할 수 있다.\n> hexo new draft 글제목\n\n<br>\n\n- 발행하기\n아래 명령어 입력시 source/_posts 폴더 안으로 파일이 옮겨졌음을 확인 할 수 있다.\n> hexo publish post 글제목\n\n<br>\n\n- draft를 브라우저에서 확인할 수 있는 명령어\n> hexo server --draft\n\n<br>\n\n### **이미지 파일 삽입하기**\n---\n> ![](/images/ 파일이름.확장자) \n\n위의 파일 경로에 사진 파일이 있는지 확인해야한다.\n\n나는 이미지 파일들을 게시글마다 폴더별로 묶어서관리하고 있다.\n그렇게 안하면 이미지가 정리도 안되고 \n나중에는 관리가 하나도 안될것 같아서 미리 해주는게 좋다.\n<br>\n\n### **블로그에 적용시키기**\n---\n\n> hexo generate\n> = hexo g\n \n<br>\n\n> hexo deploy \n> = hexo d","slug":"0103-github-blog-post","published":1,"updated":"2022-01-03T12:20:08.046Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cky2hohel00075nrj2yi673xf","content":"<h3 id=\"post-만들기\"><a href=\"#post-만들기\" class=\"headerlink\" title=\"post 만들기\"></a><strong>post 만들기</strong></h3><hr>\n<blockquote>\n<p>hexo new temp1234</p>\n</blockquote>\n<p>명령어를 입력하면 temp1234라는 md 파일이 생성<br><br></p>\n<h3 id=\"MarkDown-파일이란\"><a href=\"#MarkDown-파일이란\" class=\"headerlink\" title=\"MarkDown 파일이란\"></a><strong>MarkDown 파일이란</strong></h3><hr>\n<p>파일 확장자가 .md인 파일은 MarkDown문법으로 작성된 파일이다.<br>일반 텍스트로 서식이 있는 문서를 작성하는데 사용되며,<br>일반 마크업 언어에 비해 문법이 쉽고 간단한 것이 특징이다.</p>\n<br>\n\n<h3 id=\"post게시글-형식-수정하기\"><a href=\"#post게시글-형식-수정하기\" class=\"headerlink\" title=\"post게시글 형식 수정하기\"></a><strong>post게시글 형식 수정하기</strong></h3><hr>\n<p>게시글을 올릴 때 매번 게시글 형식을 바꾸어주어야 한다는 번거로움이 있었다.<br>이때 초기 생성 파일의 형식을 바꾸어주면 된다.<br>myblog 폴더 -&gt; scaffolds -&gt; post.md 파일 수정</p>\n<p>나는 post.md 파일을 아래와 같이 설정해주었다.<br><img src=\"/images/0103/pstmd%EC%84%A4%EC%A0%95.PNG\"><br><br></p>\n<h3 id=\"draft-초안-작성하기\"><a href=\"#draft-초안-작성하기\" class=\"headerlink\" title=\"draft 초안 작성하기\"></a><strong>draft 초안 작성하기</strong></h3><hr>\n<p>포스트를 발행하기 전 작성 할 수 있는 초안으로,<br>포스트를 미리 작성해놓고 나중에 발행하면 된다.<br><br></p>\n<ul>\n<li>초안 생성하기<br>아래의 명령어 입력시 source/_draft 폴더 안에 초안 파일이 생성됨을 확인 할 수 있다.<blockquote>\n<p>hexo new draft 글제목</p>\n</blockquote>\n</li>\n</ul>\n<br>\n\n<ul>\n<li>발행하기<br>아래 명령어 입력시 source/_posts 폴더 안으로 파일이 옮겨졌음을 확인 할 수 있다.<blockquote>\n<p>hexo publish post 글제목</p>\n</blockquote>\n</li>\n</ul>\n<br>\n\n<ul>\n<li>draft를 브라우저에서 확인할 수 있는 명령어<blockquote>\n<p>hexo server –draft</p>\n</blockquote>\n</li>\n</ul>\n<br>\n\n<h3 id=\"이미지-파일-삽입하기\"><a href=\"#이미지-파일-삽입하기\" class=\"headerlink\" title=\"이미지 파일 삽입하기\"></a><strong>이미지 파일 삽입하기</strong></h3><hr>\n<blockquote>\n<p>![](/images/ 파일이름.확장자) </p>\n</blockquote>\n<p>위의 파일 경로에 사진 파일이 있는지 확인해야한다.</p>\n<p>나는 이미지 파일들을 게시글마다 폴더별로 묶어서관리하고 있다.<br>그렇게 안하면 이미지가 정리도 안되고<br>나중에는 관리가 하나도 안될것 같아서 미리 해주는게 좋다.<br><br></p>\n<h3 id=\"블로그에-적용시키기\"><a href=\"#블로그에-적용시키기\" class=\"headerlink\" title=\"블로그에 적용시키기\"></a><strong>블로그에 적용시키기</strong></h3><hr>\n<blockquote>\n<p>hexo generate<br>= hexo g</p>\n</blockquote>\n<br>\n\n<blockquote>\n<p>hexo deploy<br>= hexo d</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"post 만들기\n\n\n\nhexo new temp1234\n\n명령어를 입력하면 temp1234라는 md 파일이 생성\n\n\n\nMarkDown 파일이란\n\n\n\n파일 확장자가 .md인 파일은 MarkDown문법으로 작성된 파일이다.\n일반 텍스트로 서식이 있는 문서를 작성하는데 사용되며,\n일반 마크업 언어에 비해 문법이 쉽고 간단한 것이 특징이다.\n\n\npost게시글 형식 수정하기\n\n\n\n게시글을 올릴 때 매번 게시글 형식을 바꾸어주어야 한다는 번거로움이 있었다.\n이때 초기 생성 파일의 형식을 바꾸어주면 된다.\nmyblog 폴더 -> scaffolds","more":"<h3 id=\"post-만들기\"><a href=\"#post-만들기\" class=\"headerlink\" title=\"post 만들기\"></a><strong>post 만들기</strong></h3><hr>\n<blockquote>\n<p>hexo new temp1234</p>\n</blockquote>\n<p>명령어를 입력하면 temp1234라는 md 파일이 생성<br><br></p>\n<h3 id=\"MarkDown-파일이란\"><a href=\"#MarkDown-파일이란\" class=\"headerlink\" title=\"MarkDown 파일이란\"></a><strong>MarkDown 파일이란</strong></h3><hr>\n<p>파일 확장자가 .md인 파일은 MarkDown문법으로 작성된 파일이다.<br>일반 텍스트로 서식이 있는 문서를 작성하는데 사용되며,<br>일반 마크업 언어에 비해 문법이 쉽고 간단한 것이 특징이다.</p>\n<br>\n\n<h3 id=\"post게시글-형식-수정하기\"><a href=\"#post게시글-형식-수정하기\" class=\"headerlink\" title=\"post게시글 형식 수정하기\"></a><strong>post게시글 형식 수정하기</strong></h3><hr>\n<p>게시글을 올릴 때 매번 게시글 형식을 바꾸어주어야 한다는 번거로움이 있었다.<br>이때 초기 생성 파일의 형식을 바꾸어주면 된다.<br>myblog 폴더 -&gt; scaffolds -&gt; post.md 파일 수정</p>\n<p>나는 post.md 파일을 아래와 같이 설정해주었다.<br><img src=\"/images/0103/pstmd%EC%84%A4%EC%A0%95.PNG\"><br><br></p>\n<h3 id=\"draft-초안-작성하기\"><a href=\"#draft-초안-작성하기\" class=\"headerlink\" title=\"draft 초안 작성하기\"></a><strong>draft 초안 작성하기</strong></h3><hr>\n<p>포스트를 발행하기 전 작성 할 수 있는 초안으로,<br>포스트를 미리 작성해놓고 나중에 발행하면 된다.<br><br></p>\n<ul>\n<li>초안 생성하기<br>아래의 명령어 입력시 source/_draft 폴더 안에 초안 파일이 생성됨을 확인 할 수 있다.<blockquote>\n<p>hexo new draft 글제목</p>\n</blockquote>\n</li>\n</ul>\n<br>\n\n<ul>\n<li>발행하기<br>아래 명령어 입력시 source/_posts 폴더 안으로 파일이 옮겨졌음을 확인 할 수 있다.<blockquote>\n<p>hexo publish post 글제목</p>\n</blockquote>\n</li>\n</ul>\n<br>\n\n<ul>\n<li>draft를 브라우저에서 확인할 수 있는 명령어<blockquote>\n<p>hexo server –draft</p>\n</blockquote>\n</li>\n</ul>\n<br>\n\n<h3 id=\"이미지-파일-삽입하기\"><a href=\"#이미지-파일-삽입하기\" class=\"headerlink\" title=\"이미지 파일 삽입하기\"></a><strong>이미지 파일 삽입하기</strong></h3><hr>\n<blockquote>\n<p>![](/images/ 파일이름.확장자) </p>\n</blockquote>\n<p>위의 파일 경로에 사진 파일이 있는지 확인해야한다.</p>\n<p>나는 이미지 파일들을 게시글마다 폴더별로 묶어서관리하고 있다.<br>그렇게 안하면 이미지가 정리도 안되고<br>나중에는 관리가 하나도 안될것 같아서 미리 해주는게 좋다.<br><br></p>\n<h3 id=\"블로그에-적용시키기\"><a href=\"#블로그에-적용시키기\" class=\"headerlink\" title=\"블로그에 적용시키기\"></a><strong>블로그에 적용시키기</strong></h3><hr>\n<blockquote>\n<p>hexo generate<br>= hexo g</p>\n</blockquote>\n<br>\n\n<blockquote>\n<p>hexo deploy<br>= hexo d</p>\n</blockquote>\n"},{"title":"Python 기초문법","date":"2021-10-31T15:00:00.000Z","_content":"<br>\n\n### **Python**\n---\n실행환경 : 구글 colab\n구글 colab은 브라우저에서 Python을 작성하고 실행 할 수 있다.\n\n### **1. Print**\n---\n```python\nprint(\"Hello World!\")\n\n```\n    Hello World!\n\n### **2. 주석처리**\n---\n```python\n# 한 줄 주석처리\n\"\"\"여러줄\n주석처리 입니다\"\"\"\n```\n\n### **3. 변수의 종류**\n---\n```python \nnum_int = 1\nprint(type(num_int))\n>>> <class 'int'>\n\nnum_float = 0.2\nprint(type(num_float))\n>>> <class 'float'>\n\nbool_true = True\nprint(type(bool_true))\n>>> <class 'bool'>\n\nnone_x = None\nprint(type(none_x))\n>>> <class 'NoneType'>\n\n```\n\n### **4. 사칙연산**\n---\n```python\na = 3\nb = 2\nprint('a + b = ', a+b)\nprint('a - b = ', a-b)\nprint('a * b = ', a*b)\nprint('a / b = ', a/b)\nprint('a // b = ', a//b)\nprint('a % b = ', a%b)\nprint('a ** b = ', a**b)\n\n```\n    a + b =  5\n    a - b =  1\n    a * b =  6\n    a / b =  1.5             #실수형\n    a // b =  1              #정수형\n    a % b =  1               #나머지\n    a ** b =  9              #좌항을 우항으로 거듭제곱\n\n### **5. 논리형 연산자**\n---\n```python\n#AND 연산\nprint(True and True)\nprint(True and False)\nprint(False and True)\nprint(False and False)\n\n>>  True\n    False\n    False\n    False\n\n#OR 연산\nprint(True or True)\nprint(True or False)\nprint(False or True)\nprint(False or False)\n```\n\n    True\n    True\n    True\n    False\n\n### **6. 비교 연산자**\n---\n```python\nprint(4>3)\n\n\n```\n    True\n### **7. 형변환**\n---\n```python\n#input (\"숫자를 입력하세요\")\ndata =input (\"숫자를 입력하세요\")\n#print(type(data))  문자형으로 출력됨\ndata2 =int(data)\n\n\n```\n     숫자를 입력하세요100\n    <class 'int'>\n### **8. String Operators**\n---\n```python\nstr1 = \"kim \"\nstr2 = \"jeewon \"\nprint(str1 + str2)\nname = str1 + str2\nprint (name * 3)\n\n```\n    kim jeewon\n    kim jeewon kim jeewon kim jeewon\n### **9. index**\n---\n```python\ngreeting = \"Hello Kaggle\"\nprint(greeting[:])   #모든 데이터 출력\nprint(greeting[6:])\nprint(greeting[:6])\nprint(greeting[3:8])\nprint(greeting[0:9:2])  #2만큼 건너뜀\n \n```\n    Hello Kaggle\n    Kaggle\n    Hello \n    lo Ka\n    HloKg\n### **10. 리스트**\n---\n```python\na = [] # 빈 리스트\na_func = list() #list()함수로도 빈 리스트를 만들 수 있다.\nb = [1] # 숫자도 요소가 될 수 있다.\nc = ['apple'] # 문자열도 요소가 될 수 있다\nd = [1, 2, ['apple']] # 리스트 안에 리스트를 요소로 넣을 수 있다.\n\nprint(a)\nprint(a_func)\nprint(b)\nprint(c)\nprint(d)\n\n\n```\n    []\n    []\n    [1]\n    ['apple']\n    [1, 2, ['apple']]\n---\n```python\na =  [ ['apple', 'cherry', 'watermelon'], 5]\nprint(a)\nprint(a[0])\nprint(a[1])\nprint(a[0][0])\nprint(a[0][0][0])\nprint(a[0][1])\nprint(a[0][2])\nprint(a[0][2][3])\n\n\n```\n    [['apple', 'cherry', 'watermelon'], 5]\n    ['apple', 'cherry', 'watermelon']\n    5\n    apple\n    a\n    cherry\n    watermelon\n    e\n---\n```python\na = [ [1, 2, 3], 5]\n# index [[0], [1], [2]]\nprint(a[0]) \nprint(a[1]) \nprint(a[0][1]) \nprint(a[0][2]) \nprint(a[-1])\n```\n    [1, 2, 3]\n    5\n    2\n    3\n    5\n---\n```python\na = [1,2,3,4,5,6,7,8,9,10]\n\nb = a[:4]  # 인덱스 0부터 3까지\nc = a[1:4] # 인덱스 1부터 3까지\nd = a[0:7:2] # 인덱스 0부터 6까지 인덱스 2씩 건너 띄우기\ne = a[::-1] # 리스트 a의 역순\nf = a[::2] # 리스트 전체구간에서 인덱스 2씩 건너띄우기\n\nprint(\"a[:4]\", b)\nprint(\"a[1:4]\", c)\nprint(\"a[0:7:2]\", d)\nprint(\"a[::-1]\", e)\nprint(\"a[::2]\", f)\n```\n    a[:4] [1, 2, 3, 4]\n    a[1:4] [2, 3, 4]\n    a[0:7:2] [1, 3, 5, 7]\n    a[::-1] [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n    a[::2] [1, 3, 5, 7, 9]\n---\n```python\na = ['alice', 'bob', 'cat']\nb = ['apple', 'banana', 'cherry']\nc = a+b\n\nprint(c)\n```\n    a = ['a','b','c']\n    b = a*3\n    c = a*0\n    print(\"a * 3:\", b)\n    print(\"a * 0:\", c)\n### **11. 리스트값 수정하기**\n---\n```python\na = [0,1,2]\na[1] = \"b\"\n\nprint(a)\n\n```\n    [0, 'b', 2]\n### **12. 리스트 값 추가하기**\n```python\n#append 하나씩 추가하기\na = [100, 200, 300]\na.append(400)         \nprint(a)\n\na.append([500,600])\nprint(a)\n\n```\n    [100, 200, 300, 400]\n    [100, 200, 300, 400, [500, 600]]\n\n```python\n#extend 한번에 추가하기\na = [1,2,3]\na.extend([40,500])\nprint('a.extend([40,500]) result')\nprint(a)    \n\n\n```\n    a.extend([40,500]) result\n    [1, 2, 3, 40, 500]\n```python\n#insert \na = [0,1,2]\n\na.insert(1,100)\nprint(a)\n```\n    [0, 100, 1, 2]\n```python\na = [0,1,2,3]\na[2:2] = [100,200]\nprint(a)\n\n# 시작과 끝의 범위보다 큰 수를 덮어쓰는 예시\nb = [0,1,2,3]\nb[1:2] = [100,200,300,400] \nprint(b)\n\n# 시작과 끝의 범위가 작을때의 예시\nc = [0,1,2,3]\nc[1:3] = [100]\nprint(c)\n\n\n```\n    [0, 1, 100, 200, 2, 3]\n    [0, 100, 200, 300, 400, 2, 3]\n    [0, 100, 3]\n### **13. 리스트 값 삭제하기**\n---\n```python\na =[1,2,1,2]\n\n#리스트의 첫번째 1이 삭제\na.remove(1)\nprint(a)\n\n#리스트의 두번째 1이 삭제\na.remove(1)\nprint(a)\n\n```\n    [2, 1, 2]\n    [2, 2]\n```python\na = [0,1,2,3,4,5,6,7,8,9]\n\n# 1 삭제\ndel a[1]\nprint(a)\n\nb = [0,1,2,3,4,5,6,7,8,9]\n# 범위로 삭제\ndel b[1:3] #list는 항상 시작하는 index부터, 종료하는 n의 n-1까지의 범위를 잡아줍니다.\nprint(b)\n\n```\n    [0, 2, 3, 4, 5, 6, 7, 8, 9]\n    [0, 3, 4, 5, 6, 7, 8, 9]\n### **14. 튜플**\n---\n```python\ntuple1 = (0) # 끝에 콤마(,)를 붙이지 않았을 때\ntuple2 = (0,) # 끝에 콤마(,)를 붙여줬을 때\ntuple3 = 0,1,2\n\nprint(tuple1)\nprint(tuple2)\nprint(tuple3)\n\nprint(type(tuple1)) # 콤마(,)를 붙여주지 않으면 튜플이 아닙니다.\nprint(type(tuple2)) # 콤마(,)를 붙여주어야 튜플 자료형 입니다.\nprint(type(tuple3)) # 여러개의 값 일경우 괄호를 없애주어도 튜플 자료형 입니다.\n```\n    0\n    (0,)\n    (0, 1, 2)\n    <class 'int'>\n    <class 'tuple'>\n    <class 'tuple'>\n### **15. 딕셔너리**\n---\n```python\ndic = {'teacher':'alice', 'class': 5, 'studentid': '15', 'list':[1,2,3]}\n\nprint(dic['teacher'])\nprint(dic['class'])\nprint(dic['list'])\n\n```\n    alice\n    5\n    [1, 2, 3]\n### **16. if 조건문**\n---\n```python\ngrade = int(input(\"점수를 입력하세요\"))\n\nif grade > 90:\n  print(\"A\")\nelif grade > 80:\n  print(\"B\")\nelif grade >70:\n  print(\"C\")\nelse:\n  print(\"D\")\n```\n    점수를 입력하세요100\n    A\n### **17. 반복문**\n---\n```python\nfor i in range(10):\n  print(\"Hello World\")\n\n```\n    Hello World\n    Hello World\n    Hello World\n    Hello World\n    Hello World\n    Hello World\n    Hello World\n    Hello World\n    Hello World\n    Hello World \n```python\na =\"Kaggle\"\nfor x in a:\n  print(x)\n\n  if x =='l':\n    break\n\n```\n    K\n    a\n    g\n    g\n    l\n<br>\n<br>\n\n파이썬 공부하는 사이트\nhttps://dojang.io/course/view.php?id=7\n\n메소드 찾아 볼때 사이트\nhttps://docs.python.org/3/tutorial/datastructures.html","source":"_posts/0201_python_base.md","raw":"---\ntitle: Python 기초문법\ndate: 2021-11-01 \ntags: python, coding, study\ncategories:\n  - 파이썬\n  - Python 기초\n---\n<br>\n\n### **Python**\n---\n실행환경 : 구글 colab\n구글 colab은 브라우저에서 Python을 작성하고 실행 할 수 있다.\n\n### **1. Print**\n---\n```python\nprint(\"Hello World!\")\n\n```\n    Hello World!\n\n### **2. 주석처리**\n---\n```python\n# 한 줄 주석처리\n\"\"\"여러줄\n주석처리 입니다\"\"\"\n```\n\n### **3. 변수의 종류**\n---\n```python \nnum_int = 1\nprint(type(num_int))\n>>> <class 'int'>\n\nnum_float = 0.2\nprint(type(num_float))\n>>> <class 'float'>\n\nbool_true = True\nprint(type(bool_true))\n>>> <class 'bool'>\n\nnone_x = None\nprint(type(none_x))\n>>> <class 'NoneType'>\n\n```\n\n### **4. 사칙연산**\n---\n```python\na = 3\nb = 2\nprint('a + b = ', a+b)\nprint('a - b = ', a-b)\nprint('a * b = ', a*b)\nprint('a / b = ', a/b)\nprint('a // b = ', a//b)\nprint('a % b = ', a%b)\nprint('a ** b = ', a**b)\n\n```\n    a + b =  5\n    a - b =  1\n    a * b =  6\n    a / b =  1.5             #실수형\n    a // b =  1              #정수형\n    a % b =  1               #나머지\n    a ** b =  9              #좌항을 우항으로 거듭제곱\n\n### **5. 논리형 연산자**\n---\n```python\n#AND 연산\nprint(True and True)\nprint(True and False)\nprint(False and True)\nprint(False and False)\n\n>>  True\n    False\n    False\n    False\n\n#OR 연산\nprint(True or True)\nprint(True or False)\nprint(False or True)\nprint(False or False)\n```\n\n    True\n    True\n    True\n    False\n\n### **6. 비교 연산자**\n---\n```python\nprint(4>3)\n\n\n```\n    True\n### **7. 형변환**\n---\n```python\n#input (\"숫자를 입력하세요\")\ndata =input (\"숫자를 입력하세요\")\n#print(type(data))  문자형으로 출력됨\ndata2 =int(data)\n\n\n```\n     숫자를 입력하세요100\n    <class 'int'>\n### **8. String Operators**\n---\n```python\nstr1 = \"kim \"\nstr2 = \"jeewon \"\nprint(str1 + str2)\nname = str1 + str2\nprint (name * 3)\n\n```\n    kim jeewon\n    kim jeewon kim jeewon kim jeewon\n### **9. index**\n---\n```python\ngreeting = \"Hello Kaggle\"\nprint(greeting[:])   #모든 데이터 출력\nprint(greeting[6:])\nprint(greeting[:6])\nprint(greeting[3:8])\nprint(greeting[0:9:2])  #2만큼 건너뜀\n \n```\n    Hello Kaggle\n    Kaggle\n    Hello \n    lo Ka\n    HloKg\n### **10. 리스트**\n---\n```python\na = [] # 빈 리스트\na_func = list() #list()함수로도 빈 리스트를 만들 수 있다.\nb = [1] # 숫자도 요소가 될 수 있다.\nc = ['apple'] # 문자열도 요소가 될 수 있다\nd = [1, 2, ['apple']] # 리스트 안에 리스트를 요소로 넣을 수 있다.\n\nprint(a)\nprint(a_func)\nprint(b)\nprint(c)\nprint(d)\n\n\n```\n    []\n    []\n    [1]\n    ['apple']\n    [1, 2, ['apple']]\n---\n```python\na =  [ ['apple', 'cherry', 'watermelon'], 5]\nprint(a)\nprint(a[0])\nprint(a[1])\nprint(a[0][0])\nprint(a[0][0][0])\nprint(a[0][1])\nprint(a[0][2])\nprint(a[0][2][3])\n\n\n```\n    [['apple', 'cherry', 'watermelon'], 5]\n    ['apple', 'cherry', 'watermelon']\n    5\n    apple\n    a\n    cherry\n    watermelon\n    e\n---\n```python\na = [ [1, 2, 3], 5]\n# index [[0], [1], [2]]\nprint(a[0]) \nprint(a[1]) \nprint(a[0][1]) \nprint(a[0][2]) \nprint(a[-1])\n```\n    [1, 2, 3]\n    5\n    2\n    3\n    5\n---\n```python\na = [1,2,3,4,5,6,7,8,9,10]\n\nb = a[:4]  # 인덱스 0부터 3까지\nc = a[1:4] # 인덱스 1부터 3까지\nd = a[0:7:2] # 인덱스 0부터 6까지 인덱스 2씩 건너 띄우기\ne = a[::-1] # 리스트 a의 역순\nf = a[::2] # 리스트 전체구간에서 인덱스 2씩 건너띄우기\n\nprint(\"a[:4]\", b)\nprint(\"a[1:4]\", c)\nprint(\"a[0:7:2]\", d)\nprint(\"a[::-1]\", e)\nprint(\"a[::2]\", f)\n```\n    a[:4] [1, 2, 3, 4]\n    a[1:4] [2, 3, 4]\n    a[0:7:2] [1, 3, 5, 7]\n    a[::-1] [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n    a[::2] [1, 3, 5, 7, 9]\n---\n```python\na = ['alice', 'bob', 'cat']\nb = ['apple', 'banana', 'cherry']\nc = a+b\n\nprint(c)\n```\n    a = ['a','b','c']\n    b = a*3\n    c = a*0\n    print(\"a * 3:\", b)\n    print(\"a * 0:\", c)\n### **11. 리스트값 수정하기**\n---\n```python\na = [0,1,2]\na[1] = \"b\"\n\nprint(a)\n\n```\n    [0, 'b', 2]\n### **12. 리스트 값 추가하기**\n```python\n#append 하나씩 추가하기\na = [100, 200, 300]\na.append(400)         \nprint(a)\n\na.append([500,600])\nprint(a)\n\n```\n    [100, 200, 300, 400]\n    [100, 200, 300, 400, [500, 600]]\n\n```python\n#extend 한번에 추가하기\na = [1,2,3]\na.extend([40,500])\nprint('a.extend([40,500]) result')\nprint(a)    \n\n\n```\n    a.extend([40,500]) result\n    [1, 2, 3, 40, 500]\n```python\n#insert \na = [0,1,2]\n\na.insert(1,100)\nprint(a)\n```\n    [0, 100, 1, 2]\n```python\na = [0,1,2,3]\na[2:2] = [100,200]\nprint(a)\n\n# 시작과 끝의 범위보다 큰 수를 덮어쓰는 예시\nb = [0,1,2,3]\nb[1:2] = [100,200,300,400] \nprint(b)\n\n# 시작과 끝의 범위가 작을때의 예시\nc = [0,1,2,3]\nc[1:3] = [100]\nprint(c)\n\n\n```\n    [0, 1, 100, 200, 2, 3]\n    [0, 100, 200, 300, 400, 2, 3]\n    [0, 100, 3]\n### **13. 리스트 값 삭제하기**\n---\n```python\na =[1,2,1,2]\n\n#리스트의 첫번째 1이 삭제\na.remove(1)\nprint(a)\n\n#리스트의 두번째 1이 삭제\na.remove(1)\nprint(a)\n\n```\n    [2, 1, 2]\n    [2, 2]\n```python\na = [0,1,2,3,4,5,6,7,8,9]\n\n# 1 삭제\ndel a[1]\nprint(a)\n\nb = [0,1,2,3,4,5,6,7,8,9]\n# 범위로 삭제\ndel b[1:3] #list는 항상 시작하는 index부터, 종료하는 n의 n-1까지의 범위를 잡아줍니다.\nprint(b)\n\n```\n    [0, 2, 3, 4, 5, 6, 7, 8, 9]\n    [0, 3, 4, 5, 6, 7, 8, 9]\n### **14. 튜플**\n---\n```python\ntuple1 = (0) # 끝에 콤마(,)를 붙이지 않았을 때\ntuple2 = (0,) # 끝에 콤마(,)를 붙여줬을 때\ntuple3 = 0,1,2\n\nprint(tuple1)\nprint(tuple2)\nprint(tuple3)\n\nprint(type(tuple1)) # 콤마(,)를 붙여주지 않으면 튜플이 아닙니다.\nprint(type(tuple2)) # 콤마(,)를 붙여주어야 튜플 자료형 입니다.\nprint(type(tuple3)) # 여러개의 값 일경우 괄호를 없애주어도 튜플 자료형 입니다.\n```\n    0\n    (0,)\n    (0, 1, 2)\n    <class 'int'>\n    <class 'tuple'>\n    <class 'tuple'>\n### **15. 딕셔너리**\n---\n```python\ndic = {'teacher':'alice', 'class': 5, 'studentid': '15', 'list':[1,2,3]}\n\nprint(dic['teacher'])\nprint(dic['class'])\nprint(dic['list'])\n\n```\n    alice\n    5\n    [1, 2, 3]\n### **16. if 조건문**\n---\n```python\ngrade = int(input(\"점수를 입력하세요\"))\n\nif grade > 90:\n  print(\"A\")\nelif grade > 80:\n  print(\"B\")\nelif grade >70:\n  print(\"C\")\nelse:\n  print(\"D\")\n```\n    점수를 입력하세요100\n    A\n### **17. 반복문**\n---\n```python\nfor i in range(10):\n  print(\"Hello World\")\n\n```\n    Hello World\n    Hello World\n    Hello World\n    Hello World\n    Hello World\n    Hello World\n    Hello World\n    Hello World\n    Hello World\n    Hello World \n```python\na =\"Kaggle\"\nfor x in a:\n  print(x)\n\n  if x =='l':\n    break\n\n```\n    K\n    a\n    g\n    g\n    l\n<br>\n<br>\n\n파이썬 공부하는 사이트\nhttps://dojang.io/course/view.php?id=7\n\n메소드 찾아 볼때 사이트\nhttps://docs.python.org/3/tutorial/datastructures.html","slug":"0201-python-base","published":1,"updated":"2022-01-03T12:20:08.046Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cky2hohel000b5nrj6nim20ji","content":"<br>\n\n<h3 id=\"Python\"><a href=\"#Python\" class=\"headerlink\" title=\"Python\"></a><strong>Python</strong></h3><hr>\n<p>실행환경 : 구글 colab<br>구글 colab은 브라우저에서 Python을 작성하고 실행 할 수 있다.</p>\n<h3 id=\"1-Print\"><a href=\"#1-Print\" class=\"headerlink\" title=\"1. Print\"></a><strong>1. Print</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Hello World!&quot;</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<pre><code>Hello World!\n</code></pre>\n<h3 id=\"2-주석처리\"><a href=\"#2-주석처리\" class=\"headerlink\" title=\"2. 주석처리\"></a><strong>2. 주석처리</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 한 줄 주석처리</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;여러줄</span></span><br><span class=\"line\"><span class=\"string\">주석처리 입니다&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-변수의-종류\"><a href=\"#3-변수의-종류\" class=\"headerlink\" title=\"3. 변수의 종류\"></a><strong>3. 변수의 종류</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">num_int = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(num_int))</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> &#x27;<span class=\"title\">int</span>&#x27;&gt;</span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">num_float</span> = 0.2</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">print</span>(<span class=\"params\"><span class=\"built_in\">type</span>(<span class=\"params\">num_float</span>)</span>)</span></span><br><span class=\"line\"><span class=\"class\">&gt;&gt;&gt; &lt;<span class=\"title\">class</span> &#x27;<span class=\"title\">float</span>&#x27;&gt;</span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">bool_true</span> = <span class=\"title\">True</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">print</span>(<span class=\"params\"><span class=\"built_in\">type</span>(<span class=\"params\">bool_true</span>)</span>)</span></span><br><span class=\"line\"><span class=\"class\">&gt;&gt;&gt; &lt;<span class=\"title\">class</span> &#x27;<span class=\"title\">bool</span>&#x27;&gt;</span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">none_x</span> = <span class=\"title\">None</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">print</span>(<span class=\"params\"><span class=\"built_in\">type</span>(<span class=\"params\">none_x</span>)</span>)</span></span><br><span class=\"line\"><span class=\"class\">&gt;&gt;&gt; &lt;<span class=\"title\">class</span> &#x27;<span class=\"title\">NoneType</span>&#x27;&gt;</span></span><br><span class=\"line\"><span class=\"class\"></span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-사칙연산\"><a href=\"#4-사칙연산\" class=\"headerlink\" title=\"4. 사칙연산\"></a><strong>4. 사칙연산</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">3</span></span><br><span class=\"line\">b = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;a + b = &#x27;</span>, a+b)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;a - b = &#x27;</span>, a-b)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;a * b = &#x27;</span>, a*b)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;a / b = &#x27;</span>, a/b)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;a // b = &#x27;</span>, a//b)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;a % b = &#x27;</span>, a%b)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;a ** b = &#x27;</span>, a**b)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<pre><code>a + b =  5\na - b =  1\na * b =  6\na / b =  1.5             #실수형\na // b =  1              #정수형\na % b =  1               #나머지\na ** b =  9              #좌항을 우항으로 거듭제곱\n</code></pre>\n<h3 id=\"5-논리형-연산자\"><a href=\"#5-논리형-연산자\" class=\"headerlink\" title=\"5. 논리형 연산자\"></a><strong>5. 논리형 연산자</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#AND 연산</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"literal\">True</span> <span class=\"keyword\">and</span> <span class=\"literal\">True</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"literal\">True</span> <span class=\"keyword\">and</span> <span class=\"literal\">False</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"literal\">False</span> <span class=\"keyword\">and</span> <span class=\"literal\">True</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"literal\">False</span> <span class=\"keyword\">and</span> <span class=\"literal\">False</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;  <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"literal\">False</span></span><br><span class=\"line\">    <span class=\"literal\">False</span></span><br><span class=\"line\">    <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#OR 연산</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"literal\">True</span> <span class=\"keyword\">or</span> <span class=\"literal\">True</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"literal\">True</span> <span class=\"keyword\">or</span> <span class=\"literal\">False</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"literal\">False</span> <span class=\"keyword\">or</span> <span class=\"literal\">True</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"literal\">False</span> <span class=\"keyword\">or</span> <span class=\"literal\">False</span>)</span><br></pre></td></tr></table></figure>\n\n<pre><code>True\nTrue\nTrue\nFalse\n</code></pre>\n<h3 id=\"6-비교-연산자\"><a href=\"#6-비교-연산자\" class=\"headerlink\" title=\"6. 비교 연산자\"></a><strong>6. 비교 연산자</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">4</span>&gt;<span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<pre><code>True\n</code></pre>\n<h3 id=\"7-형변환\"><a href=\"#7-형변환\" class=\"headerlink\" title=\"7. 형변환\"></a><strong>7. 형변환</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#input (&quot;숫자를 입력하세요&quot;)</span></span><br><span class=\"line\">data =<span class=\"built_in\">input</span> (<span class=\"string\">&quot;숫자를 입력하세요&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">#print(type(data))  문자형으로 출력됨</span></span><br><span class=\"line\">data2 =<span class=\"built_in\">int</span>(data)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<pre><code> 숫자를 입력하세요100\n&lt;class &#39;int&#39;&gt;\n</code></pre>\n<h3 id=\"8-String-Operators\"><a href=\"#8-String-Operators\" class=\"headerlink\" title=\"8. String Operators\"></a><strong>8. String Operators</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str1 = <span class=\"string\">&quot;kim &quot;</span></span><br><span class=\"line\">str2 = <span class=\"string\">&quot;jeewon &quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str1 + str2)</span><br><span class=\"line\">name = str1 + str2</span><br><span class=\"line\"><span class=\"built_in\">print</span> (name * <span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<pre><code>kim jeewon\nkim jeewon kim jeewon kim jeewon\n</code></pre>\n<h3 id=\"9-index\"><a href=\"#9-index\" class=\"headerlink\" title=\"9. index\"></a><strong>9. index</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">greeting = <span class=\"string\">&quot;Hello Kaggle&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(greeting[:])   <span class=\"comment\">#모든 데이터 출력</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(greeting[<span class=\"number\">6</span>:])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(greeting[:<span class=\"number\">6</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(greeting[<span class=\"number\">3</span>:<span class=\"number\">8</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(greeting[<span class=\"number\">0</span>:<span class=\"number\">9</span>:<span class=\"number\">2</span>])  <span class=\"comment\">#2만큼 건너뜀</span></span><br><span class=\"line\"> </span><br></pre></td></tr></table></figure>\n<pre><code>Hello Kaggle\nKaggle\nHello \nlo Ka\nHloKg\n</code></pre>\n<h3 id=\"10-리스트\"><a href=\"#10-리스트\" class=\"headerlink\" title=\"10. 리스트\"></a><strong>10. 리스트</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [] <span class=\"comment\"># 빈 리스트</span></span><br><span class=\"line\">a_func = <span class=\"built_in\">list</span>() <span class=\"comment\">#list()함수로도 빈 리스트를 만들 수 있다.</span></span><br><span class=\"line\">b = [<span class=\"number\">1</span>] <span class=\"comment\"># 숫자도 요소가 될 수 있다.</span></span><br><span class=\"line\">c = [<span class=\"string\">&#x27;apple&#x27;</span>] <span class=\"comment\"># 문자열도 요소가 될 수 있다</span></span><br><span class=\"line\">d = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, [<span class=\"string\">&#x27;apple&#x27;</span>]] <span class=\"comment\"># 리스트 안에 리스트를 요소로 넣을 수 있다.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(a)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(a_func)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(b)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(c)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(d)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<pre><code>[]\n[]\n[1]\n[&#39;apple&#39;]\n[1, 2, [&#39;apple&#39;]]\n</code></pre>\n<hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a =  [ [<span class=\"string\">&#x27;apple&#x27;</span>, <span class=\"string\">&#x27;cherry&#x27;</span>, <span class=\"string\">&#x27;watermelon&#x27;</span>], <span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(a)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(a[<span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(a[<span class=\"number\">1</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(a[<span class=\"number\">0</span>][<span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(a[<span class=\"number\">0</span>][<span class=\"number\">0</span>][<span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(a[<span class=\"number\">0</span>][<span class=\"number\">1</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(a[<span class=\"number\">0</span>][<span class=\"number\">2</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(a[<span class=\"number\">0</span>][<span class=\"number\">2</span>][<span class=\"number\">3</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<pre><code>[[&#39;apple&#39;, &#39;cherry&#39;, &#39;watermelon&#39;], 5]\n[&#39;apple&#39;, &#39;cherry&#39;, &#39;watermelon&#39;]\n5\napple\na\ncherry\nwatermelon\ne\n</code></pre>\n<hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [ [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], <span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"comment\"># index [[0], [1], [2]]</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(a[<span class=\"number\">0</span>]) </span><br><span class=\"line\"><span class=\"built_in\">print</span>(a[<span class=\"number\">1</span>]) </span><br><span class=\"line\"><span class=\"built_in\">print</span>(a[<span class=\"number\">0</span>][<span class=\"number\">1</span>]) </span><br><span class=\"line\"><span class=\"built_in\">print</span>(a[<span class=\"number\">0</span>][<span class=\"number\">2</span>]) </span><br><span class=\"line\"><span class=\"built_in\">print</span>(a[-<span class=\"number\">1</span>])</span><br></pre></td></tr></table></figure>\n<pre><code>[1, 2, 3]\n5\n2\n3\n5\n</code></pre>\n<hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">10</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">b = a[:<span class=\"number\">4</span>]  <span class=\"comment\"># 인덱스 0부터 3까지</span></span><br><span class=\"line\">c = a[<span class=\"number\">1</span>:<span class=\"number\">4</span>] <span class=\"comment\"># 인덱스 1부터 3까지</span></span><br><span class=\"line\">d = a[<span class=\"number\">0</span>:<span class=\"number\">7</span>:<span class=\"number\">2</span>] <span class=\"comment\"># 인덱스 0부터 6까지 인덱스 2씩 건너 띄우기</span></span><br><span class=\"line\">e = a[::-<span class=\"number\">1</span>] <span class=\"comment\"># 리스트 a의 역순</span></span><br><span class=\"line\">f = a[::<span class=\"number\">2</span>] <span class=\"comment\"># 리스트 전체구간에서 인덱스 2씩 건너띄우기</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;a[:4]&quot;</span>, b)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;a[1:4]&quot;</span>, c)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;a[0:7:2]&quot;</span>, d)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;a[::-1]&quot;</span>, e)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;a[::2]&quot;</span>, f)</span><br></pre></td></tr></table></figure>\n<pre><code>a[:4] [1, 2, 3, 4]\na[1:4] [2, 3, 4]\na[0:7:2] [1, 3, 5, 7]\na[::-1] [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\na[::2] [1, 3, 5, 7, 9]\n</code></pre>\n<hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [<span class=\"string\">&#x27;alice&#x27;</span>, <span class=\"string\">&#x27;bob&#x27;</span>, <span class=\"string\">&#x27;cat&#x27;</span>]</span><br><span class=\"line\">b = [<span class=\"string\">&#x27;apple&#x27;</span>, <span class=\"string\">&#x27;banana&#x27;</span>, <span class=\"string\">&#x27;cherry&#x27;</span>]</span><br><span class=\"line\">c = a+b</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(c)</span><br></pre></td></tr></table></figure>\n<pre><code>a = [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;]\nb = a*3\nc = a*0\nprint(&quot;a * 3:&quot;, b)\nprint(&quot;a * 0:&quot;, c)\n</code></pre>\n<h3 id=\"11-리스트값-수정하기\"><a href=\"#11-리스트값-수정하기\" class=\"headerlink\" title=\"11. 리스트값 수정하기\"></a><strong>11. 리스트값 수정하기</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>]</span><br><span class=\"line\">a[<span class=\"number\">1</span>] = <span class=\"string\">&quot;b&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(a)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<pre><code>[0, &#39;b&#39;, 2]\n</code></pre>\n<h3 id=\"12-리스트-값-추가하기\"><a href=\"#12-리스트-값-추가하기\" class=\"headerlink\" title=\"12. 리스트 값 추가하기\"></a><strong>12. 리스트 값 추가하기</strong></h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#append 하나씩 추가하기</span></span><br><span class=\"line\">a = [<span class=\"number\">100</span>, <span class=\"number\">200</span>, <span class=\"number\">300</span>]</span><br><span class=\"line\">a.append(<span class=\"number\">400</span>)         </span><br><span class=\"line\"><span class=\"built_in\">print</span>(a)</span><br><span class=\"line\"></span><br><span class=\"line\">a.append([<span class=\"number\">500</span>,<span class=\"number\">600</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(a)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<pre><code>[100, 200, 300, 400]\n[100, 200, 300, 400, [500, 600]]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#extend 한번에 추가하기</span></span><br><span class=\"line\">a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">a.extend([<span class=\"number\">40</span>,<span class=\"number\">500</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;a.extend([40,500]) result&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(a)    </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<pre><code>a.extend([40,500]) result\n[1, 2, 3, 40, 500]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#insert </span></span><br><span class=\"line\">a = [<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">a.insert(<span class=\"number\">1</span>,<span class=\"number\">100</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(a)</span><br></pre></td></tr></table></figure>\n<pre><code>[0, 100, 1, 2]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">a[<span class=\"number\">2</span>:<span class=\"number\">2</span>] = [<span class=\"number\">100</span>,<span class=\"number\">200</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(a)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 시작과 끝의 범위보다 큰 수를 덮어쓰는 예시</span></span><br><span class=\"line\">b = [<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">b[<span class=\"number\">1</span>:<span class=\"number\">2</span>] = [<span class=\"number\">100</span>,<span class=\"number\">200</span>,<span class=\"number\">300</span>,<span class=\"number\">400</span>] </span><br><span class=\"line\"><span class=\"built_in\">print</span>(b)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 시작과 끝의 범위가 작을때의 예시</span></span><br><span class=\"line\">c = [<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">c[<span class=\"number\">1</span>:<span class=\"number\">3</span>] = [<span class=\"number\">100</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(c)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<pre><code>[0, 1, 100, 200, 2, 3]\n[0, 100, 200, 300, 400, 2, 3]\n[0, 100, 3]\n</code></pre>\n<h3 id=\"13-리스트-값-삭제하기\"><a href=\"#13-리스트-값-삭제하기\" class=\"headerlink\" title=\"13. 리스트 값 삭제하기\"></a><strong>13. 리스트 값 삭제하기</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a =[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#리스트의 첫번째 1이 삭제</span></span><br><span class=\"line\">a.remove(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(a)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#리스트의 두번째 1이 삭제</span></span><br><span class=\"line\">a.remove(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(a)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<pre><code>[2, 1, 2]\n[2, 2]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 1 삭제</span></span><br><span class=\"line\"><span class=\"keyword\">del</span> a[<span class=\"number\">1</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(a)</span><br><span class=\"line\"></span><br><span class=\"line\">b = [<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>]</span><br><span class=\"line\"><span class=\"comment\"># 범위로 삭제</span></span><br><span class=\"line\"><span class=\"keyword\">del</span> b[<span class=\"number\">1</span>:<span class=\"number\">3</span>] <span class=\"comment\">#list는 항상 시작하는 index부터, 종료하는 n의 n-1까지의 범위를 잡아줍니다.</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(b)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<pre><code>[0, 2, 3, 4, 5, 6, 7, 8, 9]\n[0, 3, 4, 5, 6, 7, 8, 9]\n</code></pre>\n<h3 id=\"14-튜플\"><a href=\"#14-튜플\" class=\"headerlink\" title=\"14. 튜플\"></a><strong>14. 튜플</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tuple1 = (<span class=\"number\">0</span>) <span class=\"comment\"># 끝에 콤마(,)를 붙이지 않았을 때</span></span><br><span class=\"line\">tuple2 = (<span class=\"number\">0</span>,) <span class=\"comment\"># 끝에 콤마(,)를 붙여줬을 때</span></span><br><span class=\"line\">tuple3 = <span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(tuple1)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(tuple2)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(tuple3)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(tuple1)) <span class=\"comment\"># 콤마(,)를 붙여주지 않으면 튜플이 아닙니다.</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(tuple2)) <span class=\"comment\"># 콤마(,)를 붙여주어야 튜플 자료형 입니다.</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(tuple3)) <span class=\"comment\"># 여러개의 값 일경우 괄호를 없애주어도 튜플 자료형 입니다.</span></span><br></pre></td></tr></table></figure>\n<pre><code>0\n(0,)\n(0, 1, 2)\n&lt;class &#39;int&#39;&gt;\n&lt;class &#39;tuple&#39;&gt;\n&lt;class &#39;tuple&#39;&gt;\n</code></pre>\n<h3 id=\"15-딕셔너리\"><a href=\"#15-딕셔너리\" class=\"headerlink\" title=\"15. 딕셔너리\"></a><strong>15. 딕셔너리</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dic = &#123;<span class=\"string\">&#x27;teacher&#x27;</span>:<span class=\"string\">&#x27;alice&#x27;</span>, <span class=\"string\">&#x27;class&#x27;</span>: <span class=\"number\">5</span>, <span class=\"string\">&#x27;studentid&#x27;</span>: <span class=\"string\">&#x27;15&#x27;</span>, <span class=\"string\">&#x27;list&#x27;</span>:[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(dic[<span class=\"string\">&#x27;teacher&#x27;</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(dic[<span class=\"string\">&#x27;class&#x27;</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(dic[<span class=\"string\">&#x27;list&#x27;</span>])</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<pre><code>alice\n5\n[1, 2, 3]\n</code></pre>\n<h3 id=\"16-if-조건문\"><a href=\"#16-if-조건문\" class=\"headerlink\" title=\"16. if 조건문\"></a><strong>16. if 조건문</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grade = <span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&quot;점수를 입력하세요&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> grade &gt; <span class=\"number\">90</span>:</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">&quot;A&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">elif</span> grade &gt; <span class=\"number\">80</span>:</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">&quot;B&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">elif</span> grade &gt;<span class=\"number\">70</span>:</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">&quot;C&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">&quot;D&quot;</span>)</span><br></pre></td></tr></table></figure>\n<pre><code>점수를 입력하세요100\nA\n</code></pre>\n<h3 id=\"17-반복문\"><a href=\"#17-반복문\" class=\"headerlink\" title=\"17. 반복문\"></a><strong>17. 반복문</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>):</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Hello World&quot;</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<pre><code>Hello World\nHello World\nHello World\nHello World\nHello World\nHello World\nHello World\nHello World\nHello World\nHello World \n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a =<span class=\"string\">&quot;Kaggle&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> a:</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(x)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> x ==<span class=\"string\">&#x27;l&#x27;</span>:</span><br><span class=\"line\">    <span class=\"keyword\">break</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<pre><code>K\na\ng\ng\nl\n</code></pre>\n<br>\n<br>\n\n<p>파이썬 공부하는 사이트<br><a href=\"https://dojang.io/course/view.php?id=7\">https://dojang.io/course/view.php?id=7</a></p>\n<p>메소드 찾아 볼때 사이트<br><a href=\"https://docs.python.org/3/tutorial/datastructures.html\">https://docs.python.org/3/tutorial/datastructures.html</a></p>\n","site":{"data":{}},"excerpt":"Python\n\n\n\n실행환경 : 구글 colab\n구글 colab은 브라우저에서 Python을 작성하고 실행 할 수 있다.\n\n1. Print\n\n\n\n1\n2\n\n\nprint(\"Hello World!\")\n\n\n\nHello World!\n\n\n2. 주석처리\n\n\n\n1\n2\n3\n\n\n# 한 줄 주석처리\n\"\"\"여러줄\n주석처리 입니다\"\"\"\n\n\n3. 변수의 종류\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\nnum_int = 1\nprint(type(num_int))\n>>> <class 'int'>\n\nnum_float = 0.2\np","more":"<br>\n\n<h3 id=\"Python\"><a href=\"#Python\" class=\"headerlink\" title=\"Python\"></a><strong>Python</strong></h3><hr>\n<p>실행환경 : 구글 colab<br>구글 colab은 브라우저에서 Python을 작성하고 실행 할 수 있다.</p>\n<h3 id=\"1-Print\"><a href=\"#1-Print\" class=\"headerlink\" title=\"1. Print\"></a><strong>1. Print</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Hello World!&quot;</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<pre><code>Hello World!\n</code></pre>\n<h3 id=\"2-주석처리\"><a href=\"#2-주석처리\" class=\"headerlink\" title=\"2. 주석처리\"></a><strong>2. 주석처리</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 한 줄 주석처리</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;여러줄</span></span><br><span class=\"line\"><span class=\"string\">주석처리 입니다&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-변수의-종류\"><a href=\"#3-변수의-종류\" class=\"headerlink\" title=\"3. 변수의 종류\"></a><strong>3. 변수의 종류</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">num_int = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(num_int))</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> &#x27;<span class=\"title\">int</span>&#x27;&gt;</span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">num_float</span> = 0.2</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">print</span>(<span class=\"params\"><span class=\"built_in\">type</span>(<span class=\"params\">num_float</span>)</span>)</span></span><br><span class=\"line\"><span class=\"class\">&gt;&gt;&gt; &lt;<span class=\"title\">class</span> &#x27;<span class=\"title\">float</span>&#x27;&gt;</span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">bool_true</span> = <span class=\"title\">True</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">print</span>(<span class=\"params\"><span class=\"built_in\">type</span>(<span class=\"params\">bool_true</span>)</span>)</span></span><br><span class=\"line\"><span class=\"class\">&gt;&gt;&gt; &lt;<span class=\"title\">class</span> &#x27;<span class=\"title\">bool</span>&#x27;&gt;</span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">none_x</span> = <span class=\"title\">None</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">print</span>(<span class=\"params\"><span class=\"built_in\">type</span>(<span class=\"params\">none_x</span>)</span>)</span></span><br><span class=\"line\"><span class=\"class\">&gt;&gt;&gt; &lt;<span class=\"title\">class</span> &#x27;<span class=\"title\">NoneType</span>&#x27;&gt;</span></span><br><span class=\"line\"><span class=\"class\"></span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-사칙연산\"><a href=\"#4-사칙연산\" class=\"headerlink\" title=\"4. 사칙연산\"></a><strong>4. 사칙연산</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">3</span></span><br><span class=\"line\">b = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;a + b = &#x27;</span>, a+b)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;a - b = &#x27;</span>, a-b)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;a * b = &#x27;</span>, a*b)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;a / b = &#x27;</span>, a/b)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;a // b = &#x27;</span>, a//b)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;a % b = &#x27;</span>, a%b)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;a ** b = &#x27;</span>, a**b)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<pre><code>a + b =  5\na - b =  1\na * b =  6\na / b =  1.5             #실수형\na // b =  1              #정수형\na % b =  1               #나머지\na ** b =  9              #좌항을 우항으로 거듭제곱\n</code></pre>\n<h3 id=\"5-논리형-연산자\"><a href=\"#5-논리형-연산자\" class=\"headerlink\" title=\"5. 논리형 연산자\"></a><strong>5. 논리형 연산자</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#AND 연산</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"literal\">True</span> <span class=\"keyword\">and</span> <span class=\"literal\">True</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"literal\">True</span> <span class=\"keyword\">and</span> <span class=\"literal\">False</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"literal\">False</span> <span class=\"keyword\">and</span> <span class=\"literal\">True</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"literal\">False</span> <span class=\"keyword\">and</span> <span class=\"literal\">False</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;  <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"literal\">False</span></span><br><span class=\"line\">    <span class=\"literal\">False</span></span><br><span class=\"line\">    <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#OR 연산</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"literal\">True</span> <span class=\"keyword\">or</span> <span class=\"literal\">True</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"literal\">True</span> <span class=\"keyword\">or</span> <span class=\"literal\">False</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"literal\">False</span> <span class=\"keyword\">or</span> <span class=\"literal\">True</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"literal\">False</span> <span class=\"keyword\">or</span> <span class=\"literal\">False</span>)</span><br></pre></td></tr></table></figure>\n\n<pre><code>True\nTrue\nTrue\nFalse\n</code></pre>\n<h3 id=\"6-비교-연산자\"><a href=\"#6-비교-연산자\" class=\"headerlink\" title=\"6. 비교 연산자\"></a><strong>6. 비교 연산자</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">4</span>&gt;<span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<pre><code>True\n</code></pre>\n<h3 id=\"7-형변환\"><a href=\"#7-형변환\" class=\"headerlink\" title=\"7. 형변환\"></a><strong>7. 형변환</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#input (&quot;숫자를 입력하세요&quot;)</span></span><br><span class=\"line\">data =<span class=\"built_in\">input</span> (<span class=\"string\">&quot;숫자를 입력하세요&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">#print(type(data))  문자형으로 출력됨</span></span><br><span class=\"line\">data2 =<span class=\"built_in\">int</span>(data)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<pre><code> 숫자를 입력하세요100\n&lt;class &#39;int&#39;&gt;\n</code></pre>\n<h3 id=\"8-String-Operators\"><a href=\"#8-String-Operators\" class=\"headerlink\" title=\"8. String Operators\"></a><strong>8. String Operators</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str1 = <span class=\"string\">&quot;kim &quot;</span></span><br><span class=\"line\">str2 = <span class=\"string\">&quot;jeewon &quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str1 + str2)</span><br><span class=\"line\">name = str1 + str2</span><br><span class=\"line\"><span class=\"built_in\">print</span> (name * <span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<pre><code>kim jeewon\nkim jeewon kim jeewon kim jeewon\n</code></pre>\n<h3 id=\"9-index\"><a href=\"#9-index\" class=\"headerlink\" title=\"9. index\"></a><strong>9. index</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">greeting = <span class=\"string\">&quot;Hello Kaggle&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(greeting[:])   <span class=\"comment\">#모든 데이터 출력</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(greeting[<span class=\"number\">6</span>:])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(greeting[:<span class=\"number\">6</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(greeting[<span class=\"number\">3</span>:<span class=\"number\">8</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(greeting[<span class=\"number\">0</span>:<span class=\"number\">9</span>:<span class=\"number\">2</span>])  <span class=\"comment\">#2만큼 건너뜀</span></span><br><span class=\"line\"> </span><br></pre></td></tr></table></figure>\n<pre><code>Hello Kaggle\nKaggle\nHello \nlo Ka\nHloKg\n</code></pre>\n<h3 id=\"10-리스트\"><a href=\"#10-리스트\" class=\"headerlink\" title=\"10. 리스트\"></a><strong>10. 리스트</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [] <span class=\"comment\"># 빈 리스트</span></span><br><span class=\"line\">a_func = <span class=\"built_in\">list</span>() <span class=\"comment\">#list()함수로도 빈 리스트를 만들 수 있다.</span></span><br><span class=\"line\">b = [<span class=\"number\">1</span>] <span class=\"comment\"># 숫자도 요소가 될 수 있다.</span></span><br><span class=\"line\">c = [<span class=\"string\">&#x27;apple&#x27;</span>] <span class=\"comment\"># 문자열도 요소가 될 수 있다</span></span><br><span class=\"line\">d = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, [<span class=\"string\">&#x27;apple&#x27;</span>]] <span class=\"comment\"># 리스트 안에 리스트를 요소로 넣을 수 있다.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(a)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(a_func)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(b)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(c)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(d)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<pre><code>[]\n[]\n[1]\n[&#39;apple&#39;]\n[1, 2, [&#39;apple&#39;]]\n</code></pre>\n<hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a =  [ [<span class=\"string\">&#x27;apple&#x27;</span>, <span class=\"string\">&#x27;cherry&#x27;</span>, <span class=\"string\">&#x27;watermelon&#x27;</span>], <span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(a)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(a[<span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(a[<span class=\"number\">1</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(a[<span class=\"number\">0</span>][<span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(a[<span class=\"number\">0</span>][<span class=\"number\">0</span>][<span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(a[<span class=\"number\">0</span>][<span class=\"number\">1</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(a[<span class=\"number\">0</span>][<span class=\"number\">2</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(a[<span class=\"number\">0</span>][<span class=\"number\">2</span>][<span class=\"number\">3</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<pre><code>[[&#39;apple&#39;, &#39;cherry&#39;, &#39;watermelon&#39;], 5]\n[&#39;apple&#39;, &#39;cherry&#39;, &#39;watermelon&#39;]\n5\napple\na\ncherry\nwatermelon\ne\n</code></pre>\n<hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [ [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], <span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"comment\"># index [[0], [1], [2]]</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(a[<span class=\"number\">0</span>]) </span><br><span class=\"line\"><span class=\"built_in\">print</span>(a[<span class=\"number\">1</span>]) </span><br><span class=\"line\"><span class=\"built_in\">print</span>(a[<span class=\"number\">0</span>][<span class=\"number\">1</span>]) </span><br><span class=\"line\"><span class=\"built_in\">print</span>(a[<span class=\"number\">0</span>][<span class=\"number\">2</span>]) </span><br><span class=\"line\"><span class=\"built_in\">print</span>(a[-<span class=\"number\">1</span>])</span><br></pre></td></tr></table></figure>\n<pre><code>[1, 2, 3]\n5\n2\n3\n5\n</code></pre>\n<hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">10</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">b = a[:<span class=\"number\">4</span>]  <span class=\"comment\"># 인덱스 0부터 3까지</span></span><br><span class=\"line\">c = a[<span class=\"number\">1</span>:<span class=\"number\">4</span>] <span class=\"comment\"># 인덱스 1부터 3까지</span></span><br><span class=\"line\">d = a[<span class=\"number\">0</span>:<span class=\"number\">7</span>:<span class=\"number\">2</span>] <span class=\"comment\"># 인덱스 0부터 6까지 인덱스 2씩 건너 띄우기</span></span><br><span class=\"line\">e = a[::-<span class=\"number\">1</span>] <span class=\"comment\"># 리스트 a의 역순</span></span><br><span class=\"line\">f = a[::<span class=\"number\">2</span>] <span class=\"comment\"># 리스트 전체구간에서 인덱스 2씩 건너띄우기</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;a[:4]&quot;</span>, b)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;a[1:4]&quot;</span>, c)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;a[0:7:2]&quot;</span>, d)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;a[::-1]&quot;</span>, e)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;a[::2]&quot;</span>, f)</span><br></pre></td></tr></table></figure>\n<pre><code>a[:4] [1, 2, 3, 4]\na[1:4] [2, 3, 4]\na[0:7:2] [1, 3, 5, 7]\na[::-1] [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\na[::2] [1, 3, 5, 7, 9]\n</code></pre>\n<hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [<span class=\"string\">&#x27;alice&#x27;</span>, <span class=\"string\">&#x27;bob&#x27;</span>, <span class=\"string\">&#x27;cat&#x27;</span>]</span><br><span class=\"line\">b = [<span class=\"string\">&#x27;apple&#x27;</span>, <span class=\"string\">&#x27;banana&#x27;</span>, <span class=\"string\">&#x27;cherry&#x27;</span>]</span><br><span class=\"line\">c = a+b</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(c)</span><br></pre></td></tr></table></figure>\n<pre><code>a = [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;]\nb = a*3\nc = a*0\nprint(&quot;a * 3:&quot;, b)\nprint(&quot;a * 0:&quot;, c)\n</code></pre>\n<h3 id=\"11-리스트값-수정하기\"><a href=\"#11-리스트값-수정하기\" class=\"headerlink\" title=\"11. 리스트값 수정하기\"></a><strong>11. 리스트값 수정하기</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>]</span><br><span class=\"line\">a[<span class=\"number\">1</span>] = <span class=\"string\">&quot;b&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(a)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<pre><code>[0, &#39;b&#39;, 2]\n</code></pre>\n<h3 id=\"12-리스트-값-추가하기\"><a href=\"#12-리스트-값-추가하기\" class=\"headerlink\" title=\"12. 리스트 값 추가하기\"></a><strong>12. 리스트 값 추가하기</strong></h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#append 하나씩 추가하기</span></span><br><span class=\"line\">a = [<span class=\"number\">100</span>, <span class=\"number\">200</span>, <span class=\"number\">300</span>]</span><br><span class=\"line\">a.append(<span class=\"number\">400</span>)         </span><br><span class=\"line\"><span class=\"built_in\">print</span>(a)</span><br><span class=\"line\"></span><br><span class=\"line\">a.append([<span class=\"number\">500</span>,<span class=\"number\">600</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(a)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<pre><code>[100, 200, 300, 400]\n[100, 200, 300, 400, [500, 600]]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#extend 한번에 추가하기</span></span><br><span class=\"line\">a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">a.extend([<span class=\"number\">40</span>,<span class=\"number\">500</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;a.extend([40,500]) result&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(a)    </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<pre><code>a.extend([40,500]) result\n[1, 2, 3, 40, 500]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#insert </span></span><br><span class=\"line\">a = [<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">a.insert(<span class=\"number\">1</span>,<span class=\"number\">100</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(a)</span><br></pre></td></tr></table></figure>\n<pre><code>[0, 100, 1, 2]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">a[<span class=\"number\">2</span>:<span class=\"number\">2</span>] = [<span class=\"number\">100</span>,<span class=\"number\">200</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(a)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 시작과 끝의 범위보다 큰 수를 덮어쓰는 예시</span></span><br><span class=\"line\">b = [<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">b[<span class=\"number\">1</span>:<span class=\"number\">2</span>] = [<span class=\"number\">100</span>,<span class=\"number\">200</span>,<span class=\"number\">300</span>,<span class=\"number\">400</span>] </span><br><span class=\"line\"><span class=\"built_in\">print</span>(b)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 시작과 끝의 범위가 작을때의 예시</span></span><br><span class=\"line\">c = [<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">c[<span class=\"number\">1</span>:<span class=\"number\">3</span>] = [<span class=\"number\">100</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(c)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<pre><code>[0, 1, 100, 200, 2, 3]\n[0, 100, 200, 300, 400, 2, 3]\n[0, 100, 3]\n</code></pre>\n<h3 id=\"13-리스트-값-삭제하기\"><a href=\"#13-리스트-값-삭제하기\" class=\"headerlink\" title=\"13. 리스트 값 삭제하기\"></a><strong>13. 리스트 값 삭제하기</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a =[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#리스트의 첫번째 1이 삭제</span></span><br><span class=\"line\">a.remove(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(a)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#리스트의 두번째 1이 삭제</span></span><br><span class=\"line\">a.remove(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(a)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<pre><code>[2, 1, 2]\n[2, 2]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 1 삭제</span></span><br><span class=\"line\"><span class=\"keyword\">del</span> a[<span class=\"number\">1</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(a)</span><br><span class=\"line\"></span><br><span class=\"line\">b = [<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>]</span><br><span class=\"line\"><span class=\"comment\"># 범위로 삭제</span></span><br><span class=\"line\"><span class=\"keyword\">del</span> b[<span class=\"number\">1</span>:<span class=\"number\">3</span>] <span class=\"comment\">#list는 항상 시작하는 index부터, 종료하는 n의 n-1까지의 범위를 잡아줍니다.</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(b)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<pre><code>[0, 2, 3, 4, 5, 6, 7, 8, 9]\n[0, 3, 4, 5, 6, 7, 8, 9]\n</code></pre>\n<h3 id=\"14-튜플\"><a href=\"#14-튜플\" class=\"headerlink\" title=\"14. 튜플\"></a><strong>14. 튜플</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tuple1 = (<span class=\"number\">0</span>) <span class=\"comment\"># 끝에 콤마(,)를 붙이지 않았을 때</span></span><br><span class=\"line\">tuple2 = (<span class=\"number\">0</span>,) <span class=\"comment\"># 끝에 콤마(,)를 붙여줬을 때</span></span><br><span class=\"line\">tuple3 = <span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(tuple1)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(tuple2)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(tuple3)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(tuple1)) <span class=\"comment\"># 콤마(,)를 붙여주지 않으면 튜플이 아닙니다.</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(tuple2)) <span class=\"comment\"># 콤마(,)를 붙여주어야 튜플 자료형 입니다.</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(tuple3)) <span class=\"comment\"># 여러개의 값 일경우 괄호를 없애주어도 튜플 자료형 입니다.</span></span><br></pre></td></tr></table></figure>\n<pre><code>0\n(0,)\n(0, 1, 2)\n&lt;class &#39;int&#39;&gt;\n&lt;class &#39;tuple&#39;&gt;\n&lt;class &#39;tuple&#39;&gt;\n</code></pre>\n<h3 id=\"15-딕셔너리\"><a href=\"#15-딕셔너리\" class=\"headerlink\" title=\"15. 딕셔너리\"></a><strong>15. 딕셔너리</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dic = &#123;<span class=\"string\">&#x27;teacher&#x27;</span>:<span class=\"string\">&#x27;alice&#x27;</span>, <span class=\"string\">&#x27;class&#x27;</span>: <span class=\"number\">5</span>, <span class=\"string\">&#x27;studentid&#x27;</span>: <span class=\"string\">&#x27;15&#x27;</span>, <span class=\"string\">&#x27;list&#x27;</span>:[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(dic[<span class=\"string\">&#x27;teacher&#x27;</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(dic[<span class=\"string\">&#x27;class&#x27;</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(dic[<span class=\"string\">&#x27;list&#x27;</span>])</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<pre><code>alice\n5\n[1, 2, 3]\n</code></pre>\n<h3 id=\"16-if-조건문\"><a href=\"#16-if-조건문\" class=\"headerlink\" title=\"16. if 조건문\"></a><strong>16. if 조건문</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grade = <span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&quot;점수를 입력하세요&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> grade &gt; <span class=\"number\">90</span>:</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">&quot;A&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">elif</span> grade &gt; <span class=\"number\">80</span>:</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">&quot;B&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">elif</span> grade &gt;<span class=\"number\">70</span>:</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">&quot;C&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">&quot;D&quot;</span>)</span><br></pre></td></tr></table></figure>\n<pre><code>점수를 입력하세요100\nA\n</code></pre>\n<h3 id=\"17-반복문\"><a href=\"#17-반복문\" class=\"headerlink\" title=\"17. 반복문\"></a><strong>17. 반복문</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>):</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Hello World&quot;</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<pre><code>Hello World\nHello World\nHello World\nHello World\nHello World\nHello World\nHello World\nHello World\nHello World\nHello World \n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a =<span class=\"string\">&quot;Kaggle&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> a:</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(x)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> x ==<span class=\"string\">&#x27;l&#x27;</span>:</span><br><span class=\"line\">    <span class=\"keyword\">break</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<pre><code>K\na\ng\ng\nl\n</code></pre>\n<br>\n<br>\n\n<p>파이썬 공부하는 사이트<br><a href=\"https://dojang.io/course/view.php?id=7\">https://dojang.io/course/view.php?id=7</a></p>\n<p>메소드 찾아 볼때 사이트<br><a href=\"https://docs.python.org/3/tutorial/datastructures.html\">https://docs.python.org/3/tutorial/datastructures.html</a></p>\n"},{"title":"Python Numpy","date":"2021-11-01T15:00:00.000Z","toc":true,"_content":"<br>\n\n### **Numpy란**\n---\n행렬이나 일반적으로 대규모 다차원 배열을 쉽게 처리 할 수 있도록 지원하는 파이썬의 라이브러리이다.\n<br>\nNumpy 참고 사이트\nhttps://numpy.org/doc/stable/reference/generated/numpy.reshape.html\n<br>\n\n### **List와 Numpy의 차이점**\n연산에서의 차이점이 있다\n**- List**\n A = [1,2,3]\n B = [4,5,6]\n A + B 일때 결과는 [1,2,3,4,5,6]\n<br>\n\n**- Numpy**\nimport numpy as np\n A = [1,2,3]\n B = [4,5,6]\nnp_A = np.array(A)\nnp_B = np.array(B)\nnp_A + np_B 의 결과는 array([5,7,9])\n<br>\n\n### **라이브러리 불러오기**\n---\n```python\nimport numpy as np\nprint (np.__version__)\n```\n\n    1.19.5\n    \n<br>\n\n\n### **테스트**\n---\n\n```python\n#배열 생성\ntemp = np.array([1, 2, 3])\nprint(type(temp))\n```\n\n    <class 'numpy.ndarray'>\n    \n\n<br>\n\n### **Numpy 배열 생성 및 둘러보기**\n---\n\n```python\ndata1 = [1,2,3]     #python list를 이용함\ndata1\n```\n\n\n\n\n    [1, 1, 2, 2, 3, 4]\n\n\n\n\n```python\ndata2 = [1,1,2,2,3,4]\ndata2\n```\n\n\n\n\n    [1, 1, 2, 2, 3, 4]\n\n\n\n\n```python\nmy_array1 = np.array(data1)   #numpy를 이용하여 array 정의\nprint(my_array1)\nprint(my_array1.shape)    #my_array1의 형태를 확인\n```\n\n    [1 2 3]\n    (3,)\n    \n\n\n```python\nmy_array2 = np.array(data2)\nprint(my_array2)\nprint(my_array2.shape)\n```\n\n    [1 1 2 2 3 4]\n    (6,)\n    \n\n\n```python\nmy_array3 = np.array([3,6,9,12])\nprint(my_array3)\nprint(my_array3.shape)\nprint(my_array3.dtype)    #my_array3의 데이터타입 확인\n```\n\n    [ 3  6  9 12]\n    (4,)\n    int64\n    \n\n\n```python\nmy_array4 = np.array([[2,4,6,],[8,10,12],[14,16,18],[20,22,24]])\nprint(my_array4)\nprint(my_array4.shape)\n```\n\n    [[ 2  4  6]\n     [ 8 10 12]\n     [14 16 18]\n     [20 22 24]]\n    (4, 3)\n    \n\n\n```python\nmy_array5 = np.array([[[1,2], [3,4]], [[5,6],[7,8]]])\nprint(my_array5)\nmy_array5.shape\n```\n\n    [[[1 2]\n      [3 4]]\n    \n     [[5 6]\n      [7 8]]]\n    \n\n\n\n\n    (2, 2, 2)\n\n\n<br>\n\n### **Numpy 기본 함수들**\n---\n\n**1. arange 메소드**\n파라미터로 받은 리스트를 반환해주는 메소드\n( )괄호 안의 값이 1개일때와 여러개일때의 의미가 조금씩 다르다.\n\n```python\narrange_array = np.arange(5)      #0부터 4까지 정수값 반환\narrange_array\n```\n\n\n\n\n    array([0, 1, 2, 3, 4])\n\n\n\n\n```python\narrange_array3 = np.arange(1,9)   #1부터 9까지 정수값 반환\narrange_array3\n```\n\n\n\n\n    array([1, 2, 3, 4, 5, 6, 7, 8])\n\n\n\n\n```python\narrange_array2 = np.arange(1,9,3)   #1부터 8까지 3씩 띄어서 정수값 반환\narrange_array2\n```\n\n\n\n\n    array([1, 4, 7])\n\n\n<br>\n\n**2. zeroes, ones 메소드**\n- zeros() 메소드\n0으로 초기화된  배열 객체를 반환하는 메소드\n- ones() 메소드\n함수는 1로 초기화된 배열 객체를 반환하는 메소드\n\n```python\nzeros_array = np.zeros((3,2))\nprint(zeros_array)\nprint(\"Data Type is: \", zeros_array.dtype)      #실수형이라서 0뒤에 .이 붙음\nprint(\"Data Shape is: \", zeros_array.shape)\n```\n\n    [[0. 0.]\n     [0. 0.]\n     [0. 0.]]\n    Data Type is:  float64\n    Data Shape is:  (3, 2)\n    \n\n\n```python\nones_array = np.ones((3,4), dtype='int32')\nprint(ones_array)\nprint(\"Data Type is: \", ones_array.dtype)\nprint(\"Data Shape is: \", ones_array.shape)\n```\n\n    [[1 1 1 1]\n     [1 1 1 1]\n     [1 1 1 1]]\n    Data Type is:  int32\n    Data Shape is:  (3, 4)\n    \n<br>\n\n**3. reshape**\n배열을 재구조화 및 변경하고자 할때 사용하는 메소드\n\n```python\nafter_reshape = ones_array.reshape(6,2)\nprint(after_reshape)\nprint(\"Data Shape is: \", after_reshape.shape)\n```\n\n    [[1 1]\n     [1 1]\n     [1 1]\n     [1 1]\n     [1 1]\n     [1 1]]\n    Data Shape is:  (6, 2)\n    \n\n\n```python\nafter_reshape = ones_array.reshape(5,3)     #크기가 15랑 12랑 안맞아서 Error\nafter_reshape\n```\n\n\n    ---------------------------------------------------------------------------\n\n    ValueError                                Traceback (most recent call last)\n\n    <ipython-input-31-4f21dee813f3> in <module>()\n    ----> 1 after_reshape = ones_array.reshape(5,3)\n          2 after_reshape\n    \n\n    ValueError: cannot reshape array of size 12 into shape (5,3)\n\n\n\n```python\n#3차원 배열도 가능\n# 3 x 4 = 12 --> 2 x 3 x 2 =12\nafter_reshape = ones_array.reshape(2,3,2)\nprint(after_reshape)\nprint(\"Data Shape is: \", after_reshape.shape)\n```\n\n    [[[1 1]\n      [1 1]\n      [1 1]]\n    \n     [[1 1]\n      [1 1]\n      [1 1]]]\n    Data Shape is:  (2, 3, 2)\n    \n\n\n```python\nafter_reshape2 = ones_array.reshape(-1,6)\nprint(\"reshape(-1,6)?\", after_reshape2.shape)\nprint(after_reshape2)\n```\n\n    reshape(-1,6)? (2, 6)\n    [[1 1 1 1 1 1]\n     [1 1 1 1 1 1]]\n    \n\n\n```python\nafter_reshape3 = ones_array.reshape(3,-1)\nprint(\"reshape(3,-1)?\",after_reshape3.shape)\nprint(after_reshape3)\nprint(\"Data Shape is: \",after_reshape3.shape)\n```\n\n    reshape(3,-1)?\n    [[1 1 1 1]\n     [1 1 1 1]\n     [1 1 1 1]]\n    Data Shape is:  (3, 4)\n    \n<br>\n\n### **Numpy 인덱싱과 슬라이딩**\n---\n\n```python\nmy_array = np.arange(start=0, stop=4)\nprint(my_array)\n```\n\n    [0 1 2 3]\n    \n\n\n```python\nprint(\"my_array의 1번째 요소, 즉 위치값이 0인 것은: \", my_array[0])\n```\n\n    my_array의 1번째 요소, 즉 위치값이 0인 것은:  0\n    \n\n\n```python\nmy_array2 = np.arange(start=3,stop=30,step=3)\nmy_array2 = my_array2.reshape(3,3)\nmy_array2\n```\n\n\n\n\n    array([[ 3,  6,  9],\n           [12, 15, 18],\n           [21, 24, 27]])\n\n\n\n\n```python\nmy_array2[0:2,0:2]\n```\n\n\n\n\n    array([[ 3,  6],\n           [12, 15]])\n\n\n\n\n```python\nmy_array2[1:3,:]\n```\n\n\n\n\n    array([[12, 15, 18],\n           [21, 24, 27]])\n\n\n\n\n```python\nmy_array2[:,:]\n```\n\n\n\n\n    array([[ 3,  6,  9],\n           [12, 15, 18],\n           [21, 24, 27]])\n\n\n<br>\n\n### **Numpy 정렬**\n---\n\n**1. sort()**\n\n\n```python\nheight_arr = np.array([174,165,180,182,168])\nsorted_height_arr = np.sort(height_arr)\n\nprint('정렬 전: ',height_arr)\nprint('키가 작은 순으로 정렬: ',sorted_height_arr)\n```\n\n    정렬 전:  [174 165 180 182 168]\n    키 큰 순으로 정렬 후:  [165 168 174 180 182]\n    \n\n\n```python\n#[::-1]\ndesc_sorted_height_arr = np.sort(height_arr)[::-1]\nprint('키가 큰 순으로 정렬: ' ,desc_sorted_height_arr)\n```\n\n    키가 큰 순으로 정렬:  [182 180 174 168 165]\n    \n<br>\n\n**2. argsort()**\n정렬된 배열의 인덱스를 반환\n\n```python\nfives = np.array([10,5,15,20])\nfives_order = fives.argsort()\nprint(fives)\nprint(fives_order)\nprint(fives[fives_order])\n```\n\n    [10  5 15 20]\n    [1 0 2 3]\n    [ 5 10 15 20]\n    \n\n<br>\n<br>\n<br>\n\n\n도움 될만한 사이트\nhttps://doorbw.tistory.com/171","source":"_posts/0203_python_numpy.md","raw":"---\ntitle: Python Numpy\ndate: 2021-11-02\ntags: markdown, python, pycharm, numpy\ntoc: true\ncategories:\n  - 파이썬\n  - Python 기초\n---\n<br>\n\n### **Numpy란**\n---\n행렬이나 일반적으로 대규모 다차원 배열을 쉽게 처리 할 수 있도록 지원하는 파이썬의 라이브러리이다.\n<br>\nNumpy 참고 사이트\nhttps://numpy.org/doc/stable/reference/generated/numpy.reshape.html\n<br>\n\n### **List와 Numpy의 차이점**\n연산에서의 차이점이 있다\n**- List**\n A = [1,2,3]\n B = [4,5,6]\n A + B 일때 결과는 [1,2,3,4,5,6]\n<br>\n\n**- Numpy**\nimport numpy as np\n A = [1,2,3]\n B = [4,5,6]\nnp_A = np.array(A)\nnp_B = np.array(B)\nnp_A + np_B 의 결과는 array([5,7,9])\n<br>\n\n### **라이브러리 불러오기**\n---\n```python\nimport numpy as np\nprint (np.__version__)\n```\n\n    1.19.5\n    \n<br>\n\n\n### **테스트**\n---\n\n```python\n#배열 생성\ntemp = np.array([1, 2, 3])\nprint(type(temp))\n```\n\n    <class 'numpy.ndarray'>\n    \n\n<br>\n\n### **Numpy 배열 생성 및 둘러보기**\n---\n\n```python\ndata1 = [1,2,3]     #python list를 이용함\ndata1\n```\n\n\n\n\n    [1, 1, 2, 2, 3, 4]\n\n\n\n\n```python\ndata2 = [1,1,2,2,3,4]\ndata2\n```\n\n\n\n\n    [1, 1, 2, 2, 3, 4]\n\n\n\n\n```python\nmy_array1 = np.array(data1)   #numpy를 이용하여 array 정의\nprint(my_array1)\nprint(my_array1.shape)    #my_array1의 형태를 확인\n```\n\n    [1 2 3]\n    (3,)\n    \n\n\n```python\nmy_array2 = np.array(data2)\nprint(my_array2)\nprint(my_array2.shape)\n```\n\n    [1 1 2 2 3 4]\n    (6,)\n    \n\n\n```python\nmy_array3 = np.array([3,6,9,12])\nprint(my_array3)\nprint(my_array3.shape)\nprint(my_array3.dtype)    #my_array3의 데이터타입 확인\n```\n\n    [ 3  6  9 12]\n    (4,)\n    int64\n    \n\n\n```python\nmy_array4 = np.array([[2,4,6,],[8,10,12],[14,16,18],[20,22,24]])\nprint(my_array4)\nprint(my_array4.shape)\n```\n\n    [[ 2  4  6]\n     [ 8 10 12]\n     [14 16 18]\n     [20 22 24]]\n    (4, 3)\n    \n\n\n```python\nmy_array5 = np.array([[[1,2], [3,4]], [[5,6],[7,8]]])\nprint(my_array5)\nmy_array5.shape\n```\n\n    [[[1 2]\n      [3 4]]\n    \n     [[5 6]\n      [7 8]]]\n    \n\n\n\n\n    (2, 2, 2)\n\n\n<br>\n\n### **Numpy 기본 함수들**\n---\n\n**1. arange 메소드**\n파라미터로 받은 리스트를 반환해주는 메소드\n( )괄호 안의 값이 1개일때와 여러개일때의 의미가 조금씩 다르다.\n\n```python\narrange_array = np.arange(5)      #0부터 4까지 정수값 반환\narrange_array\n```\n\n\n\n\n    array([0, 1, 2, 3, 4])\n\n\n\n\n```python\narrange_array3 = np.arange(1,9)   #1부터 9까지 정수값 반환\narrange_array3\n```\n\n\n\n\n    array([1, 2, 3, 4, 5, 6, 7, 8])\n\n\n\n\n```python\narrange_array2 = np.arange(1,9,3)   #1부터 8까지 3씩 띄어서 정수값 반환\narrange_array2\n```\n\n\n\n\n    array([1, 4, 7])\n\n\n<br>\n\n**2. zeroes, ones 메소드**\n- zeros() 메소드\n0으로 초기화된  배열 객체를 반환하는 메소드\n- ones() 메소드\n함수는 1로 초기화된 배열 객체를 반환하는 메소드\n\n```python\nzeros_array = np.zeros((3,2))\nprint(zeros_array)\nprint(\"Data Type is: \", zeros_array.dtype)      #실수형이라서 0뒤에 .이 붙음\nprint(\"Data Shape is: \", zeros_array.shape)\n```\n\n    [[0. 0.]\n     [0. 0.]\n     [0. 0.]]\n    Data Type is:  float64\n    Data Shape is:  (3, 2)\n    \n\n\n```python\nones_array = np.ones((3,4), dtype='int32')\nprint(ones_array)\nprint(\"Data Type is: \", ones_array.dtype)\nprint(\"Data Shape is: \", ones_array.shape)\n```\n\n    [[1 1 1 1]\n     [1 1 1 1]\n     [1 1 1 1]]\n    Data Type is:  int32\n    Data Shape is:  (3, 4)\n    \n<br>\n\n**3. reshape**\n배열을 재구조화 및 변경하고자 할때 사용하는 메소드\n\n```python\nafter_reshape = ones_array.reshape(6,2)\nprint(after_reshape)\nprint(\"Data Shape is: \", after_reshape.shape)\n```\n\n    [[1 1]\n     [1 1]\n     [1 1]\n     [1 1]\n     [1 1]\n     [1 1]]\n    Data Shape is:  (6, 2)\n    \n\n\n```python\nafter_reshape = ones_array.reshape(5,3)     #크기가 15랑 12랑 안맞아서 Error\nafter_reshape\n```\n\n\n    ---------------------------------------------------------------------------\n\n    ValueError                                Traceback (most recent call last)\n\n    <ipython-input-31-4f21dee813f3> in <module>()\n    ----> 1 after_reshape = ones_array.reshape(5,3)\n          2 after_reshape\n    \n\n    ValueError: cannot reshape array of size 12 into shape (5,3)\n\n\n\n```python\n#3차원 배열도 가능\n# 3 x 4 = 12 --> 2 x 3 x 2 =12\nafter_reshape = ones_array.reshape(2,3,2)\nprint(after_reshape)\nprint(\"Data Shape is: \", after_reshape.shape)\n```\n\n    [[[1 1]\n      [1 1]\n      [1 1]]\n    \n     [[1 1]\n      [1 1]\n      [1 1]]]\n    Data Shape is:  (2, 3, 2)\n    \n\n\n```python\nafter_reshape2 = ones_array.reshape(-1,6)\nprint(\"reshape(-1,6)?\", after_reshape2.shape)\nprint(after_reshape2)\n```\n\n    reshape(-1,6)? (2, 6)\n    [[1 1 1 1 1 1]\n     [1 1 1 1 1 1]]\n    \n\n\n```python\nafter_reshape3 = ones_array.reshape(3,-1)\nprint(\"reshape(3,-1)?\",after_reshape3.shape)\nprint(after_reshape3)\nprint(\"Data Shape is: \",after_reshape3.shape)\n```\n\n    reshape(3,-1)?\n    [[1 1 1 1]\n     [1 1 1 1]\n     [1 1 1 1]]\n    Data Shape is:  (3, 4)\n    \n<br>\n\n### **Numpy 인덱싱과 슬라이딩**\n---\n\n```python\nmy_array = np.arange(start=0, stop=4)\nprint(my_array)\n```\n\n    [0 1 2 3]\n    \n\n\n```python\nprint(\"my_array의 1번째 요소, 즉 위치값이 0인 것은: \", my_array[0])\n```\n\n    my_array의 1번째 요소, 즉 위치값이 0인 것은:  0\n    \n\n\n```python\nmy_array2 = np.arange(start=3,stop=30,step=3)\nmy_array2 = my_array2.reshape(3,3)\nmy_array2\n```\n\n\n\n\n    array([[ 3,  6,  9],\n           [12, 15, 18],\n           [21, 24, 27]])\n\n\n\n\n```python\nmy_array2[0:2,0:2]\n```\n\n\n\n\n    array([[ 3,  6],\n           [12, 15]])\n\n\n\n\n```python\nmy_array2[1:3,:]\n```\n\n\n\n\n    array([[12, 15, 18],\n           [21, 24, 27]])\n\n\n\n\n```python\nmy_array2[:,:]\n```\n\n\n\n\n    array([[ 3,  6,  9],\n           [12, 15, 18],\n           [21, 24, 27]])\n\n\n<br>\n\n### **Numpy 정렬**\n---\n\n**1. sort()**\n\n\n```python\nheight_arr = np.array([174,165,180,182,168])\nsorted_height_arr = np.sort(height_arr)\n\nprint('정렬 전: ',height_arr)\nprint('키가 작은 순으로 정렬: ',sorted_height_arr)\n```\n\n    정렬 전:  [174 165 180 182 168]\n    키 큰 순으로 정렬 후:  [165 168 174 180 182]\n    \n\n\n```python\n#[::-1]\ndesc_sorted_height_arr = np.sort(height_arr)[::-1]\nprint('키가 큰 순으로 정렬: ' ,desc_sorted_height_arr)\n```\n\n    키가 큰 순으로 정렬:  [182 180 174 168 165]\n    \n<br>\n\n**2. argsort()**\n정렬된 배열의 인덱스를 반환\n\n```python\nfives = np.array([10,5,15,20])\nfives_order = fives.argsort()\nprint(fives)\nprint(fives_order)\nprint(fives[fives_order])\n```\n\n    [10  5 15 20]\n    [1 0 2 3]\n    [ 5 10 15 20]\n    \n\n<br>\n<br>\n<br>\n\n\n도움 될만한 사이트\nhttps://doorbw.tistory.com/171","slug":"0203-python-numpy","published":1,"updated":"2022-01-03T12:20:08.046Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cky2hohel000c5nrj4xbvg3ap","content":"<br>\n\n<h3 id=\"Numpy란\"><a href=\"#Numpy란\" class=\"headerlink\" title=\"Numpy란\"></a><strong>Numpy란</strong></h3><hr>\n<p>행렬이나 일반적으로 대규모 다차원 배열을 쉽게 처리 할 수 있도록 지원하는 파이썬의 라이브러리이다.<br><br><br>Numpy 참고 사이트<br><a href=\"https://numpy.org/doc/stable/reference/generated/numpy.reshape.html\">https://numpy.org/doc/stable/reference/generated/numpy.reshape.html</a><br><br></p>\n<h3 id=\"List와-Numpy의-차이점\"><a href=\"#List와-Numpy의-차이점\" class=\"headerlink\" title=\"List와 Numpy의 차이점\"></a><strong>List와 Numpy의 차이점</strong></h3><p>연산에서의 차이점이 있다<br><strong>- List</strong><br> A = [1,2,3]<br> B = [4,5,6]<br> A + B 일때 결과는 [1,2,3,4,5,6]<br><br></p>\n<p><strong>- Numpy</strong><br>import numpy as np<br> A = [1,2,3]<br> B = [4,5,6]<br>np_A = np.array(A)<br>np_B = np.array(B)<br>np_A + np_B 의 결과는 array([5,7,9])<br><br></p>\n<h3 id=\"라이브러리-불러오기\"><a href=\"#라이브러리-불러오기\" class=\"headerlink\" title=\"라이브러리 불러오기\"></a><strong>라이브러리 불러오기</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"built_in\">print</span> (np.__version__)</span><br></pre></td></tr></table></figure>\n\n<pre><code>1.19.5\n</code></pre>\n<br>\n\n\n<h3 id=\"테스트\"><a href=\"#테스트\" class=\"headerlink\" title=\"테스트\"></a><strong>테스트</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#배열 생성</span></span><br><span class=\"line\">temp = np.array([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(temp))</span><br></pre></td></tr></table></figure>\n\n<pre><code>&lt;class &#39;numpy.ndarray&#39;&gt;\n</code></pre>\n<br>\n\n<h3 id=\"Numpy-배열-생성-및-둘러보기\"><a href=\"#Numpy-배열-생성-및-둘러보기\" class=\"headerlink\" title=\"Numpy 배열 생성 및 둘러보기\"></a><strong>Numpy 배열 생성 및 둘러보기</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data1 = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]     <span class=\"comment\">#python list를 이용함</span></span><br><span class=\"line\">data1</span><br></pre></td></tr></table></figure>\n\n\n\n\n<pre><code>[1, 1, 2, 2, 3, 4]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data2 = [<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\">data2</span><br></pre></td></tr></table></figure>\n\n\n\n\n<pre><code>[1, 1, 2, 2, 3, 4]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my_array1 = np.array(data1)   <span class=\"comment\">#numpy를 이용하여 array 정의</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(my_array1)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(my_array1.shape)    <span class=\"comment\">#my_array1의 형태를 확인</span></span><br></pre></td></tr></table></figure>\n\n<pre><code>[1 2 3]\n(3,)\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my_array2 = np.array(data2)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(my_array2)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(my_array2.shape)</span><br></pre></td></tr></table></figure>\n\n<pre><code>[1 1 2 2 3 4]\n(6,)\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my_array3 = np.array([<span class=\"number\">3</span>,<span class=\"number\">6</span>,<span class=\"number\">9</span>,<span class=\"number\">12</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(my_array3)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(my_array3.shape)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(my_array3.dtype)    <span class=\"comment\">#my_array3의 데이터타입 확인</span></span><br></pre></td></tr></table></figure>\n\n<pre><code>[ 3  6  9 12]\n(4,)\nint64\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my_array4 = np.array([[<span class=\"number\">2</span>,<span class=\"number\">4</span>,<span class=\"number\">6</span>,],[<span class=\"number\">8</span>,<span class=\"number\">10</span>,<span class=\"number\">12</span>],[<span class=\"number\">14</span>,<span class=\"number\">16</span>,<span class=\"number\">18</span>],[<span class=\"number\">20</span>,<span class=\"number\">22</span>,<span class=\"number\">24</span>]])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(my_array4)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(my_array4.shape)</span><br></pre></td></tr></table></figure>\n\n<pre><code>[[ 2  4  6]\n [ 8 10 12]\n [14 16 18]\n [20 22 24]]\n(4, 3)\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my_array5 = np.array([[[<span class=\"number\">1</span>,<span class=\"number\">2</span>], [<span class=\"number\">3</span>,<span class=\"number\">4</span>]], [[<span class=\"number\">5</span>,<span class=\"number\">6</span>],[<span class=\"number\">7</span>,<span class=\"number\">8</span>]]])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(my_array5)</span><br><span class=\"line\">my_array5.shape</span><br></pre></td></tr></table></figure>\n\n<pre><code>[[[1 2]\n  [3 4]]\n\n [[5 6]\n  [7 8]]]\n\n\n\n\n\n(2, 2, 2)\n</code></pre>\n<br>\n\n<h3 id=\"Numpy-기본-함수들\"><a href=\"#Numpy-기본-함수들\" class=\"headerlink\" title=\"Numpy 기본 함수들\"></a><strong>Numpy 기본 함수들</strong></h3><hr>\n<p><strong>1. arange 메소드</strong><br>파라미터로 받은 리스트를 반환해주는 메소드<br>( )괄호 안의 값이 1개일때와 여러개일때의 의미가 조금씩 다르다.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arrange_array = np.arange(<span class=\"number\">5</span>)      <span class=\"comment\">#0부터 4까지 정수값 반환</span></span><br><span class=\"line\">arrange_array</span><br></pre></td></tr></table></figure>\n\n\n\n\n<pre><code>array([0, 1, 2, 3, 4])\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arrange_array3 = np.arange(<span class=\"number\">1</span>,<span class=\"number\">9</span>)   <span class=\"comment\">#1부터 9까지 정수값 반환</span></span><br><span class=\"line\">arrange_array3</span><br></pre></td></tr></table></figure>\n\n\n\n\n<pre><code>array([1, 2, 3, 4, 5, 6, 7, 8])\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arrange_array2 = np.arange(<span class=\"number\">1</span>,<span class=\"number\">9</span>,<span class=\"number\">3</span>)   <span class=\"comment\">#1부터 8까지 3씩 띄어서 정수값 반환</span></span><br><span class=\"line\">arrange_array2</span><br></pre></td></tr></table></figure>\n\n\n\n\n<pre><code>array([1, 4, 7])\n</code></pre>\n<br>\n\n<p><strong>2. zeroes, ones 메소드</strong></p>\n<ul>\n<li>zeros() 메소드<br>0으로 초기화된  배열 객체를 반환하는 메소드</li>\n<li>ones() 메소드<br>함수는 1로 초기화된 배열 객체를 반환하는 메소드</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zeros_array = np.zeros((<span class=\"number\">3</span>,<span class=\"number\">2</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(zeros_array)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Data Type is: &quot;</span>, zeros_array.dtype)      <span class=\"comment\">#실수형이라서 0뒤에 .이 붙음</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Data Shape is: &quot;</span>, zeros_array.shape)</span><br></pre></td></tr></table></figure>\n\n<pre><code>[[0. 0.]\n [0. 0.]\n [0. 0.]]\nData Type is:  float64\nData Shape is:  (3, 2)\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ones_array = np.ones((<span class=\"number\">3</span>,<span class=\"number\">4</span>), dtype=<span class=\"string\">&#x27;int32&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(ones_array)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Data Type is: &quot;</span>, ones_array.dtype)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Data Shape is: &quot;</span>, ones_array.shape)</span><br></pre></td></tr></table></figure>\n\n<pre><code>[[1 1 1 1]\n [1 1 1 1]\n [1 1 1 1]]\nData Type is:  int32\nData Shape is:  (3, 4)\n</code></pre>\n<br>\n\n<p><strong>3. reshape</strong><br>배열을 재구조화 및 변경하고자 할때 사용하는 메소드</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">after_reshape = ones_array.reshape(<span class=\"number\">6</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(after_reshape)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Data Shape is: &quot;</span>, after_reshape.shape)</span><br></pre></td></tr></table></figure>\n\n<pre><code>[[1 1]\n [1 1]\n [1 1]\n [1 1]\n [1 1]\n [1 1]]\nData Shape is:  (6, 2)\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">after_reshape = ones_array.reshape(<span class=\"number\">5</span>,<span class=\"number\">3</span>)     <span class=\"comment\">#크기가 15랑 12랑 안맞아서 Error</span></span><br><span class=\"line\">after_reshape</span><br></pre></td></tr></table></figure>\n\n\n<pre><code>---------------------------------------------------------------------------\n\nValueError                                Traceback (most recent call last)\n\n&lt;ipython-input-31-4f21dee813f3&gt; in &lt;module&gt;()\n----&gt; 1 after_reshape = ones_array.reshape(5,3)\n      2 after_reshape\n\n\nValueError: cannot reshape array of size 12 into shape (5,3)\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#3차원 배열도 가능</span></span><br><span class=\"line\"><span class=\"comment\"># 3 x 4 = 12 --&gt; 2 x 3 x 2 =12</span></span><br><span class=\"line\">after_reshape = ones_array.reshape(<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(after_reshape)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Data Shape is: &quot;</span>, after_reshape.shape)</span><br></pre></td></tr></table></figure>\n\n<pre><code>[[[1 1]\n  [1 1]\n  [1 1]]\n\n [[1 1]\n  [1 1]\n  [1 1]]]\nData Shape is:  (2, 3, 2)\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">after_reshape2 = ones_array.reshape(-<span class=\"number\">1</span>,<span class=\"number\">6</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;reshape(-1,6)?&quot;</span>, after_reshape2.shape)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(after_reshape2)</span><br></pre></td></tr></table></figure>\n\n<pre><code>reshape(-1,6)? (2, 6)\n[[1 1 1 1 1 1]\n [1 1 1 1 1 1]]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">after_reshape3 = ones_array.reshape(<span class=\"number\">3</span>,-<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;reshape(3,-1)?&quot;</span>,after_reshape3.shape)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(after_reshape3)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Data Shape is: &quot;</span>,after_reshape3.shape)</span><br></pre></td></tr></table></figure>\n\n<pre><code>reshape(3,-1)?\n[[1 1 1 1]\n [1 1 1 1]\n [1 1 1 1]]\nData Shape is:  (3, 4)\n</code></pre>\n<br>\n\n<h3 id=\"Numpy-인덱싱과-슬라이딩\"><a href=\"#Numpy-인덱싱과-슬라이딩\" class=\"headerlink\" title=\"Numpy 인덱싱과 슬라이딩\"></a><strong>Numpy 인덱싱과 슬라이딩</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my_array = np.arange(start=<span class=\"number\">0</span>, stop=<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(my_array)</span><br></pre></td></tr></table></figure>\n\n<pre><code>[0 1 2 3]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;my_array의 1번째 요소, 즉 위치값이 0인 것은: &quot;</span>, my_array[<span class=\"number\">0</span>])</span><br></pre></td></tr></table></figure>\n\n<pre><code>my_array의 1번째 요소, 즉 위치값이 0인 것은:  0\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my_array2 = np.arange(start=<span class=\"number\">3</span>,stop=<span class=\"number\">30</span>,step=<span class=\"number\">3</span>)</span><br><span class=\"line\">my_array2 = my_array2.reshape(<span class=\"number\">3</span>,<span class=\"number\">3</span>)</span><br><span class=\"line\">my_array2</span><br></pre></td></tr></table></figure>\n\n\n\n\n<pre><code>array([[ 3,  6,  9],\n       [12, 15, 18],\n       [21, 24, 27]])\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my_array2[<span class=\"number\">0</span>:<span class=\"number\">2</span>,<span class=\"number\">0</span>:<span class=\"number\">2</span>]</span><br></pre></td></tr></table></figure>\n\n\n\n\n<pre><code>array([[ 3,  6],\n       [12, 15]])\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my_array2[<span class=\"number\">1</span>:<span class=\"number\">3</span>,:]</span><br></pre></td></tr></table></figure>\n\n\n\n\n<pre><code>array([[12, 15, 18],\n       [21, 24, 27]])\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my_array2[:,:]</span><br></pre></td></tr></table></figure>\n\n\n\n\n<pre><code>array([[ 3,  6,  9],\n       [12, 15, 18],\n       [21, 24, 27]])\n</code></pre>\n<br>\n\n<h3 id=\"Numpy-정렬\"><a href=\"#Numpy-정렬\" class=\"headerlink\" title=\"Numpy 정렬\"></a><strong>Numpy 정렬</strong></h3><hr>\n<p><strong>1. sort()</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">height_arr = np.array([<span class=\"number\">174</span>,<span class=\"number\">165</span>,<span class=\"number\">180</span>,<span class=\"number\">182</span>,<span class=\"number\">168</span>])</span><br><span class=\"line\">sorted_height_arr = np.sort(height_arr)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;정렬 전: &#x27;</span>,height_arr)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;키가 작은 순으로 정렬: &#x27;</span>,sorted_height_arr)</span><br></pre></td></tr></table></figure>\n\n<pre><code>정렬 전:  [174 165 180 182 168]\n키 큰 순으로 정렬 후:  [165 168 174 180 182]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#[::-1]</span></span><br><span class=\"line\">desc_sorted_height_arr = np.sort(height_arr)[::-<span class=\"number\">1</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;키가 큰 순으로 정렬: &#x27;</span> ,desc_sorted_height_arr)</span><br></pre></td></tr></table></figure>\n\n<pre><code>키가 큰 순으로 정렬:  [182 180 174 168 165]\n</code></pre>\n<br>\n\n<p><strong>2. argsort()</strong><br>정렬된 배열의 인덱스를 반환</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fives = np.array([<span class=\"number\">10</span>,<span class=\"number\">5</span>,<span class=\"number\">15</span>,<span class=\"number\">20</span>])</span><br><span class=\"line\">fives_order = fives.argsort()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(fives)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(fives_order)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(fives[fives_order])</span><br></pre></td></tr></table></figure>\n\n<pre><code>[10  5 15 20]\n[1 0 2 3]\n[ 5 10 15 20]\n</code></pre>\n<br>\n<br>\n<br>\n\n\n<p>도움 될만한 사이트<br><a href=\"https://doorbw.tistory.com/171\">https://doorbw.tistory.com/171</a></p>\n","site":{"data":{}},"excerpt":"Numpy란\n\n\n\n행렬이나 일반적으로 대규모 다차원 배열을 쉽게 처리 할 수 있도록 지원하는 파이썬의 라이브러리이다.\n\n\nNumpy 참고 사이트\nhttps://numpy.org/doc/stable/reference/generated/numpy.reshape.html\n\n\n\nList와 Numpy의 차이점\n연산에서의 차이점이 있다\n- List\nA = [1,2,3]\nB = [4,5,6]\nA + B 일때 결과는 [1,2,3,4,5,6]\n\n\n\n- Numpy\nimport numpy as np\nA = [1,2,3]\nB = [4,5,6]\nnp_A ","more":"<br>\n\n<h3 id=\"Numpy란\"><a href=\"#Numpy란\" class=\"headerlink\" title=\"Numpy란\"></a><strong>Numpy란</strong></h3><hr>\n<p>행렬이나 일반적으로 대규모 다차원 배열을 쉽게 처리 할 수 있도록 지원하는 파이썬의 라이브러리이다.<br><br><br>Numpy 참고 사이트<br><a href=\"https://numpy.org/doc/stable/reference/generated/numpy.reshape.html\">https://numpy.org/doc/stable/reference/generated/numpy.reshape.html</a><br><br></p>\n<h3 id=\"List와-Numpy의-차이점\"><a href=\"#List와-Numpy의-차이점\" class=\"headerlink\" title=\"List와 Numpy의 차이점\"></a><strong>List와 Numpy의 차이점</strong></h3><p>연산에서의 차이점이 있다<br><strong>- List</strong><br> A = [1,2,3]<br> B = [4,5,6]<br> A + B 일때 결과는 [1,2,3,4,5,6]<br><br></p>\n<p><strong>- Numpy</strong><br>import numpy as np<br> A = [1,2,3]<br> B = [4,5,6]<br>np_A = np.array(A)<br>np_B = np.array(B)<br>np_A + np_B 의 결과는 array([5,7,9])<br><br></p>\n<h3 id=\"라이브러리-불러오기\"><a href=\"#라이브러리-불러오기\" class=\"headerlink\" title=\"라이브러리 불러오기\"></a><strong>라이브러리 불러오기</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"built_in\">print</span> (np.__version__)</span><br></pre></td></tr></table></figure>\n\n<pre><code>1.19.5\n</code></pre>\n<br>\n\n\n<h3 id=\"테스트\"><a href=\"#테스트\" class=\"headerlink\" title=\"테스트\"></a><strong>테스트</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#배열 생성</span></span><br><span class=\"line\">temp = np.array([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(temp))</span><br></pre></td></tr></table></figure>\n\n<pre><code>&lt;class &#39;numpy.ndarray&#39;&gt;\n</code></pre>\n<br>\n\n<h3 id=\"Numpy-배열-생성-및-둘러보기\"><a href=\"#Numpy-배열-생성-및-둘러보기\" class=\"headerlink\" title=\"Numpy 배열 생성 및 둘러보기\"></a><strong>Numpy 배열 생성 및 둘러보기</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data1 = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]     <span class=\"comment\">#python list를 이용함</span></span><br><span class=\"line\">data1</span><br></pre></td></tr></table></figure>\n\n\n\n\n<pre><code>[1, 1, 2, 2, 3, 4]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data2 = [<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\">data2</span><br></pre></td></tr></table></figure>\n\n\n\n\n<pre><code>[1, 1, 2, 2, 3, 4]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my_array1 = np.array(data1)   <span class=\"comment\">#numpy를 이용하여 array 정의</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(my_array1)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(my_array1.shape)    <span class=\"comment\">#my_array1의 형태를 확인</span></span><br></pre></td></tr></table></figure>\n\n<pre><code>[1 2 3]\n(3,)\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my_array2 = np.array(data2)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(my_array2)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(my_array2.shape)</span><br></pre></td></tr></table></figure>\n\n<pre><code>[1 1 2 2 3 4]\n(6,)\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my_array3 = np.array([<span class=\"number\">3</span>,<span class=\"number\">6</span>,<span class=\"number\">9</span>,<span class=\"number\">12</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(my_array3)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(my_array3.shape)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(my_array3.dtype)    <span class=\"comment\">#my_array3의 데이터타입 확인</span></span><br></pre></td></tr></table></figure>\n\n<pre><code>[ 3  6  9 12]\n(4,)\nint64\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my_array4 = np.array([[<span class=\"number\">2</span>,<span class=\"number\">4</span>,<span class=\"number\">6</span>,],[<span class=\"number\">8</span>,<span class=\"number\">10</span>,<span class=\"number\">12</span>],[<span class=\"number\">14</span>,<span class=\"number\">16</span>,<span class=\"number\">18</span>],[<span class=\"number\">20</span>,<span class=\"number\">22</span>,<span class=\"number\">24</span>]])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(my_array4)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(my_array4.shape)</span><br></pre></td></tr></table></figure>\n\n<pre><code>[[ 2  4  6]\n [ 8 10 12]\n [14 16 18]\n [20 22 24]]\n(4, 3)\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my_array5 = np.array([[[<span class=\"number\">1</span>,<span class=\"number\">2</span>], [<span class=\"number\">3</span>,<span class=\"number\">4</span>]], [[<span class=\"number\">5</span>,<span class=\"number\">6</span>],[<span class=\"number\">7</span>,<span class=\"number\">8</span>]]])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(my_array5)</span><br><span class=\"line\">my_array5.shape</span><br></pre></td></tr></table></figure>\n\n<pre><code>[[[1 2]\n  [3 4]]\n\n [[5 6]\n  [7 8]]]\n\n\n\n\n\n(2, 2, 2)\n</code></pre>\n<br>\n\n<h3 id=\"Numpy-기본-함수들\"><a href=\"#Numpy-기본-함수들\" class=\"headerlink\" title=\"Numpy 기본 함수들\"></a><strong>Numpy 기본 함수들</strong></h3><hr>\n<p><strong>1. arange 메소드</strong><br>파라미터로 받은 리스트를 반환해주는 메소드<br>( )괄호 안의 값이 1개일때와 여러개일때의 의미가 조금씩 다르다.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arrange_array = np.arange(<span class=\"number\">5</span>)      <span class=\"comment\">#0부터 4까지 정수값 반환</span></span><br><span class=\"line\">arrange_array</span><br></pre></td></tr></table></figure>\n\n\n\n\n<pre><code>array([0, 1, 2, 3, 4])\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arrange_array3 = np.arange(<span class=\"number\">1</span>,<span class=\"number\">9</span>)   <span class=\"comment\">#1부터 9까지 정수값 반환</span></span><br><span class=\"line\">arrange_array3</span><br></pre></td></tr></table></figure>\n\n\n\n\n<pre><code>array([1, 2, 3, 4, 5, 6, 7, 8])\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arrange_array2 = np.arange(<span class=\"number\">1</span>,<span class=\"number\">9</span>,<span class=\"number\">3</span>)   <span class=\"comment\">#1부터 8까지 3씩 띄어서 정수값 반환</span></span><br><span class=\"line\">arrange_array2</span><br></pre></td></tr></table></figure>\n\n\n\n\n<pre><code>array([1, 4, 7])\n</code></pre>\n<br>\n\n<p><strong>2. zeroes, ones 메소드</strong></p>\n<ul>\n<li>zeros() 메소드<br>0으로 초기화된  배열 객체를 반환하는 메소드</li>\n<li>ones() 메소드<br>함수는 1로 초기화된 배열 객체를 반환하는 메소드</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zeros_array = np.zeros((<span class=\"number\">3</span>,<span class=\"number\">2</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(zeros_array)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Data Type is: &quot;</span>, zeros_array.dtype)      <span class=\"comment\">#실수형이라서 0뒤에 .이 붙음</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Data Shape is: &quot;</span>, zeros_array.shape)</span><br></pre></td></tr></table></figure>\n\n<pre><code>[[0. 0.]\n [0. 0.]\n [0. 0.]]\nData Type is:  float64\nData Shape is:  (3, 2)\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ones_array = np.ones((<span class=\"number\">3</span>,<span class=\"number\">4</span>), dtype=<span class=\"string\">&#x27;int32&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(ones_array)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Data Type is: &quot;</span>, ones_array.dtype)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Data Shape is: &quot;</span>, ones_array.shape)</span><br></pre></td></tr></table></figure>\n\n<pre><code>[[1 1 1 1]\n [1 1 1 1]\n [1 1 1 1]]\nData Type is:  int32\nData Shape is:  (3, 4)\n</code></pre>\n<br>\n\n<p><strong>3. reshape</strong><br>배열을 재구조화 및 변경하고자 할때 사용하는 메소드</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">after_reshape = ones_array.reshape(<span class=\"number\">6</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(after_reshape)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Data Shape is: &quot;</span>, after_reshape.shape)</span><br></pre></td></tr></table></figure>\n\n<pre><code>[[1 1]\n [1 1]\n [1 1]\n [1 1]\n [1 1]\n [1 1]]\nData Shape is:  (6, 2)\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">after_reshape = ones_array.reshape(<span class=\"number\">5</span>,<span class=\"number\">3</span>)     <span class=\"comment\">#크기가 15랑 12랑 안맞아서 Error</span></span><br><span class=\"line\">after_reshape</span><br></pre></td></tr></table></figure>\n\n\n<pre><code>---------------------------------------------------------------------------\n\nValueError                                Traceback (most recent call last)\n\n&lt;ipython-input-31-4f21dee813f3&gt; in &lt;module&gt;()\n----&gt; 1 after_reshape = ones_array.reshape(5,3)\n      2 after_reshape\n\n\nValueError: cannot reshape array of size 12 into shape (5,3)\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#3차원 배열도 가능</span></span><br><span class=\"line\"><span class=\"comment\"># 3 x 4 = 12 --&gt; 2 x 3 x 2 =12</span></span><br><span class=\"line\">after_reshape = ones_array.reshape(<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(after_reshape)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Data Shape is: &quot;</span>, after_reshape.shape)</span><br></pre></td></tr></table></figure>\n\n<pre><code>[[[1 1]\n  [1 1]\n  [1 1]]\n\n [[1 1]\n  [1 1]\n  [1 1]]]\nData Shape is:  (2, 3, 2)\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">after_reshape2 = ones_array.reshape(-<span class=\"number\">1</span>,<span class=\"number\">6</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;reshape(-1,6)?&quot;</span>, after_reshape2.shape)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(after_reshape2)</span><br></pre></td></tr></table></figure>\n\n<pre><code>reshape(-1,6)? (2, 6)\n[[1 1 1 1 1 1]\n [1 1 1 1 1 1]]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">after_reshape3 = ones_array.reshape(<span class=\"number\">3</span>,-<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;reshape(3,-1)?&quot;</span>,after_reshape3.shape)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(after_reshape3)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Data Shape is: &quot;</span>,after_reshape3.shape)</span><br></pre></td></tr></table></figure>\n\n<pre><code>reshape(3,-1)?\n[[1 1 1 1]\n [1 1 1 1]\n [1 1 1 1]]\nData Shape is:  (3, 4)\n</code></pre>\n<br>\n\n<h3 id=\"Numpy-인덱싱과-슬라이딩\"><a href=\"#Numpy-인덱싱과-슬라이딩\" class=\"headerlink\" title=\"Numpy 인덱싱과 슬라이딩\"></a><strong>Numpy 인덱싱과 슬라이딩</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my_array = np.arange(start=<span class=\"number\">0</span>, stop=<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(my_array)</span><br></pre></td></tr></table></figure>\n\n<pre><code>[0 1 2 3]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;my_array의 1번째 요소, 즉 위치값이 0인 것은: &quot;</span>, my_array[<span class=\"number\">0</span>])</span><br></pre></td></tr></table></figure>\n\n<pre><code>my_array의 1번째 요소, 즉 위치값이 0인 것은:  0\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my_array2 = np.arange(start=<span class=\"number\">3</span>,stop=<span class=\"number\">30</span>,step=<span class=\"number\">3</span>)</span><br><span class=\"line\">my_array2 = my_array2.reshape(<span class=\"number\">3</span>,<span class=\"number\">3</span>)</span><br><span class=\"line\">my_array2</span><br></pre></td></tr></table></figure>\n\n\n\n\n<pre><code>array([[ 3,  6,  9],\n       [12, 15, 18],\n       [21, 24, 27]])\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my_array2[<span class=\"number\">0</span>:<span class=\"number\">2</span>,<span class=\"number\">0</span>:<span class=\"number\">2</span>]</span><br></pre></td></tr></table></figure>\n\n\n\n\n<pre><code>array([[ 3,  6],\n       [12, 15]])\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my_array2[<span class=\"number\">1</span>:<span class=\"number\">3</span>,:]</span><br></pre></td></tr></table></figure>\n\n\n\n\n<pre><code>array([[12, 15, 18],\n       [21, 24, 27]])\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my_array2[:,:]</span><br></pre></td></tr></table></figure>\n\n\n\n\n<pre><code>array([[ 3,  6,  9],\n       [12, 15, 18],\n       [21, 24, 27]])\n</code></pre>\n<br>\n\n<h3 id=\"Numpy-정렬\"><a href=\"#Numpy-정렬\" class=\"headerlink\" title=\"Numpy 정렬\"></a><strong>Numpy 정렬</strong></h3><hr>\n<p><strong>1. sort()</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">height_arr = np.array([<span class=\"number\">174</span>,<span class=\"number\">165</span>,<span class=\"number\">180</span>,<span class=\"number\">182</span>,<span class=\"number\">168</span>])</span><br><span class=\"line\">sorted_height_arr = np.sort(height_arr)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;정렬 전: &#x27;</span>,height_arr)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;키가 작은 순으로 정렬: &#x27;</span>,sorted_height_arr)</span><br></pre></td></tr></table></figure>\n\n<pre><code>정렬 전:  [174 165 180 182 168]\n키 큰 순으로 정렬 후:  [165 168 174 180 182]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#[::-1]</span></span><br><span class=\"line\">desc_sorted_height_arr = np.sort(height_arr)[::-<span class=\"number\">1</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;키가 큰 순으로 정렬: &#x27;</span> ,desc_sorted_height_arr)</span><br></pre></td></tr></table></figure>\n\n<pre><code>키가 큰 순으로 정렬:  [182 180 174 168 165]\n</code></pre>\n<br>\n\n<p><strong>2. argsort()</strong><br>정렬된 배열의 인덱스를 반환</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fives = np.array([<span class=\"number\">10</span>,<span class=\"number\">5</span>,<span class=\"number\">15</span>,<span class=\"number\">20</span>])</span><br><span class=\"line\">fives_order = fives.argsort()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(fives)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(fives_order)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(fives[fives_order])</span><br></pre></td></tr></table></figure>\n\n<pre><code>[10  5 15 20]\n[1 0 2 3]\n[ 5 10 15 20]\n</code></pre>\n<br>\n<br>\n<br>\n\n\n<p>도움 될만한 사이트<br><a href=\"https://doorbw.tistory.com/171\">https://doorbw.tistory.com/171</a></p>\n"},{"title":"Google colab 연동 (markdown 파일 생성, GitHub 저장)","date":"2021-10-31T15:00:00.000Z","toc":true,"_content":"<br>\n\n## **colab 파일을 markdown 파일로 바꾸는법**\n### **1. colab에서 파일 다운로드하기**\n---\n파일 -> 다운로드 -> .ipynb다운\n![](/images/0202/01_04_python.PNG)\n\n\n<br>\n\n### **2. 관리자 권한으로 Anaconda Navigator 실행**\n---\n![](/images/0202/01_01_python.PNG)\n\n<br>\n\n### **3. JupyterLab 실행**\n---\n![](/images/0202/01_02_python.PNG)\n\n<br>\n\n### **3. JupyterLab 웹으로 실행**\n---\n실행한 파일 띄워주기\n![](/images/0202/01_07_python.PNG)\n\n<br>\n\n### **4. Markdown 파일로 다운**\n---\nFile -> Export Notebook As... -> Markdown\n![](/images/0202/01_08_python.PNG)\n\n\n<br>\n<br>\n\n## **Google colab에서 GitHub로 저장**\n---\n파일 -> GitHub에 사본저장\n![](/images/0202/01_05_python.PNG)\n<br>\n저장소와 파일 경로를 확인하기\n![](/images/0202/01_06_python.PNG)\n\n<br>\n<br>\n<br>","source":"_posts/0202_python_colab.md","raw":"---\ntitle: Google colab 연동 (markdown 파일 생성, GitHub 저장)\ndate: 2021-11-01\ntags: markdown, python, pycharm\ntoc: true\ncategories:\n  - 파이썬\n  - Python Setting\n---\n<br>\n\n## **colab 파일을 markdown 파일로 바꾸는법**\n### **1. colab에서 파일 다운로드하기**\n---\n파일 -> 다운로드 -> .ipynb다운\n![](/images/0202/01_04_python.PNG)\n\n\n<br>\n\n### **2. 관리자 권한으로 Anaconda Navigator 실행**\n---\n![](/images/0202/01_01_python.PNG)\n\n<br>\n\n### **3. JupyterLab 실행**\n---\n![](/images/0202/01_02_python.PNG)\n\n<br>\n\n### **3. JupyterLab 웹으로 실행**\n---\n실행한 파일 띄워주기\n![](/images/0202/01_07_python.PNG)\n\n<br>\n\n### **4. Markdown 파일로 다운**\n---\nFile -> Export Notebook As... -> Markdown\n![](/images/0202/01_08_python.PNG)\n\n\n<br>\n<br>\n\n## **Google colab에서 GitHub로 저장**\n---\n파일 -> GitHub에 사본저장\n![](/images/0202/01_05_python.PNG)\n<br>\n저장소와 파일 경로를 확인하기\n![](/images/0202/01_06_python.PNG)\n\n<br>\n<br>\n<br>","slug":"0202-python-colab","published":1,"updated":"2022-01-03T12:20:08.046Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cky2hohem000f5nrje9sx7ik0","content":"<br>\n\n<h2 id=\"colab-파일을-markdown-파일로-바꾸는법\"><a href=\"#colab-파일을-markdown-파일로-바꾸는법\" class=\"headerlink\" title=\"colab 파일을 markdown 파일로 바꾸는법\"></a><strong>colab 파일을 markdown 파일로 바꾸는법</strong></h2><h3 id=\"1-colab에서-파일-다운로드하기\"><a href=\"#1-colab에서-파일-다운로드하기\" class=\"headerlink\" title=\"1. colab에서 파일 다운로드하기\"></a><strong>1. colab에서 파일 다운로드하기</strong></h3><hr>\n<p>파일 -&gt; 다운로드 -&gt; .ipynb다운<br><img src=\"/images/0202/01_04_python.PNG\"></p>\n<br>\n\n<h3 id=\"2-관리자-권한으로-Anaconda-Navigator-실행\"><a href=\"#2-관리자-권한으로-Anaconda-Navigator-실행\" class=\"headerlink\" title=\"2. 관리자 권한으로 Anaconda Navigator 실행\"></a><strong>2. 관리자 권한으로 Anaconda Navigator 실행</strong></h3><hr>\n<p><img src=\"/images/0202/01_01_python.PNG\"></p>\n<br>\n\n<h3 id=\"3-JupyterLab-실행\"><a href=\"#3-JupyterLab-실행\" class=\"headerlink\" title=\"3. JupyterLab 실행\"></a><strong>3. JupyterLab 실행</strong></h3><hr>\n<p><img src=\"/images/0202/01_02_python.PNG\"></p>\n<br>\n\n<h3 id=\"3-JupyterLab-웹으로-실행\"><a href=\"#3-JupyterLab-웹으로-실행\" class=\"headerlink\" title=\"3. JupyterLab 웹으로 실행\"></a><strong>3. JupyterLab 웹으로 실행</strong></h3><hr>\n<p>실행한 파일 띄워주기<br><img src=\"/images/0202/01_07_python.PNG\"></p>\n<br>\n\n<h3 id=\"4-Markdown-파일로-다운\"><a href=\"#4-Markdown-파일로-다운\" class=\"headerlink\" title=\"4. Markdown 파일로 다운\"></a><strong>4. Markdown 파일로 다운</strong></h3><hr>\n<p>File -&gt; Export Notebook As… -&gt; Markdown<br><img src=\"/images/0202/01_08_python.PNG\"></p>\n<br>\n<br>\n\n<h2 id=\"Google-colab에서-GitHub로-저장\"><a href=\"#Google-colab에서-GitHub로-저장\" class=\"headerlink\" title=\"Google colab에서 GitHub로 저장\"></a><strong>Google colab에서 GitHub로 저장</strong></h2><hr>\n<p>파일 -&gt; GitHub에 사본저장<br><img src=\"/images/0202/01_05_python.PNG\"><br><br><br>저장소와 파일 경로를 확인하기<br><img src=\"/images/0202/01_06_python.PNG\"></p>\n<br>\n<br>\n<br>","site":{"data":{}},"excerpt":"colab 파일을 markdown 파일로 바꾸는법\n1. colab에서 파일 다운로드하기\n\n\n\n파일 -> 다운로드 -> .ipynb다운\n\n\n\n2. 관리자 권한으로 Anaconda Navigator 실행\n\n\n\n\n\n\n3. JupyterLab 실행\n\n\n\n\n\n\n3. JupyterLab 웹으로 실행\n\n\n\n실행한 파일 띄워주기\n\n\n\n4. Markdown 파일로 다운\n\n\n\nFile -> Export Notebook As… -> Markdown\n\n\n\n\nGoogle colab에서 GitHub로 저장\n\n\n\n파일 -> GitHub에 사본저장\n\n\n\n저장소","more":"<br>\n\n<h2 id=\"colab-파일을-markdown-파일로-바꾸는법\"><a href=\"#colab-파일을-markdown-파일로-바꾸는법\" class=\"headerlink\" title=\"colab 파일을 markdown 파일로 바꾸는법\"></a><strong>colab 파일을 markdown 파일로 바꾸는법</strong></h2><h3 id=\"1-colab에서-파일-다운로드하기\"><a href=\"#1-colab에서-파일-다운로드하기\" class=\"headerlink\" title=\"1. colab에서 파일 다운로드하기\"></a><strong>1. colab에서 파일 다운로드하기</strong></h3><hr>\n<p>파일 -&gt; 다운로드 -&gt; .ipynb다운<br><img src=\"/images/0202/01_04_python.PNG\"></p>\n<br>\n\n<h3 id=\"2-관리자-권한으로-Anaconda-Navigator-실행\"><a href=\"#2-관리자-권한으로-Anaconda-Navigator-실행\" class=\"headerlink\" title=\"2. 관리자 권한으로 Anaconda Navigator 실행\"></a><strong>2. 관리자 권한으로 Anaconda Navigator 실행</strong></h3><hr>\n<p><img src=\"/images/0202/01_01_python.PNG\"></p>\n<br>\n\n<h3 id=\"3-JupyterLab-실행\"><a href=\"#3-JupyterLab-실행\" class=\"headerlink\" title=\"3. JupyterLab 실행\"></a><strong>3. JupyterLab 실행</strong></h3><hr>\n<p><img src=\"/images/0202/01_02_python.PNG\"></p>\n<br>\n\n<h3 id=\"3-JupyterLab-웹으로-실행\"><a href=\"#3-JupyterLab-웹으로-실행\" class=\"headerlink\" title=\"3. JupyterLab 웹으로 실행\"></a><strong>3. JupyterLab 웹으로 실행</strong></h3><hr>\n<p>실행한 파일 띄워주기<br><img src=\"/images/0202/01_07_python.PNG\"></p>\n<br>\n\n<h3 id=\"4-Markdown-파일로-다운\"><a href=\"#4-Markdown-파일로-다운\" class=\"headerlink\" title=\"4. Markdown 파일로 다운\"></a><strong>4. Markdown 파일로 다운</strong></h3><hr>\n<p>File -&gt; Export Notebook As… -&gt; Markdown<br><img src=\"/images/0202/01_08_python.PNG\"></p>\n<br>\n<br>\n\n<h2 id=\"Google-colab에서-GitHub로-저장\"><a href=\"#Google-colab에서-GitHub로-저장\" class=\"headerlink\" title=\"Google colab에서 GitHub로 저장\"></a><strong>Google colab에서 GitHub로 저장</strong></h2><hr>\n<p>파일 -&gt; GitHub에 사본저장<br><img src=\"/images/0202/01_05_python.PNG\"><br><br><br>저장소와 파일 경로를 확인하기<br><img src=\"/images/0202/01_06_python.PNG\"></p>\n<br>\n<br>\n<br>"},{"title":"Python Pandas란","date":"2021-11-01T15:00:00.000Z","toc":true,"_content":"<br>\n\n\n### **Pandas란**\n---\n파이썬 언어로 작성된 데이터를 분석 및 조작하기 위한 소프트웨어 라이브러리이다.\n팬더스는 R에서 사용되던 data.frame 구조를 본뜬 DataFrame이라는 구조를 사용하기 때문에, \nR의 data.frame에서 사용하던 기능 상당수를 무리없이 사용할 수 있도록 만들었다. \n\n- 사용하는 이유\n데이터 전처리 하기 위함\nindex 1개와 column 1개 ---> series\nindex 1개와 column 2개 ---> dataframe\n<br>\n\nPandas 참고 사이트\nhttps://pandas.pydata.org/docs/reference/index.html\n<br>\n\n\n\n\n\n### **라이브러리 불러오기**\n---\n\n\n```python\nimport pandas as pd\nprint(pd.__version__)\n```\n\n    1.1.5\n    \n<br>\n\n### **테스트**\n---\n\n```python\ndf = pd.DataFrame({'col1': [1,2], 'col2': [3,4]})\nprint(type(df))\n```\n\n    <class 'pandas.core.frame.DataFrame'>\n    \n<br>\n\n### **구글 드라이브 연동 (colab이랑 연결)**\n---\n\n```python\nfrom google.colab import drive\ndrive.mount('/content/drive')\n```\n\n    Mounted at /content/drive\n    \n\n\n```python\nDATA_PATH = \"경로를 입력하시기를 바랍니다.\"\nDATA_PATH = '/content/drive/MyDrive/Colab Notebooks/lectures_211101/PART_I_Intro/data'\nlemonade = pd.read_csv(DATA_PATH + '/Lemonade2016.csv')\nlemonade.info()\n```\n\n    <class 'pandas.core.frame.DataFrame'>\n    RangeIndex: 32 entries, 0 to 31\n    Data columns (total 7 columns):\n     #   Column       Non-Null Count  Dtype  \n    ---  ------       --------------  -----  \n     0   Date         31 non-null     object \n     1   Location     32 non-null     object \n     2   Lemon        32 non-null     int64  \n     3   Orange       32 non-null     int64  \n     4   Temperature  32 non-null     int64  \n     5   Leaflets     31 non-null     float64\n     6   Price        32 non-null     float64\n    dtypes: float64(2), int64(3), object(2)\n    memory usage: 1.9+ KB\n    \n\n### **데이터 둘러보기**\n---\n\n(lemonade 파일은 가게 포스기라고 생각하자)\n\n**- head**\n```python\n#상위 5개 행 출력\n#0부터 4까지 행 출력\nlemonade.head(5)\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Date</th>\n      <th>Location</th>\n      <th>Lemon</th>\n      <th>Orange</th>\n      <th>Temperature</th>\n      <th>Leaflets</th>\n      <th>Price</th>\n      <th>Sold</th>\n      <th>Revenue</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>7/1/2016</td>\n      <td>Park</td>\n      <td>97</td>\n      <td>67</td>\n      <td>70</td>\n      <td>90.0</td>\n      <td>0.25</td>\n      <td>164</td>\n      <td>41.00</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>7/2/2016</td>\n      <td>Park</td>\n      <td>98</td>\n      <td>67</td>\n      <td>72</td>\n      <td>90.0</td>\n      <td>0.25</td>\n      <td>165</td>\n      <td>41.25</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>7/3/2016</td>\n      <td>Park</td>\n      <td>110</td>\n      <td>77</td>\n      <td>71</td>\n      <td>104.0</td>\n      <td>0.25</td>\n      <td>187</td>\n      <td>46.75</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>7/4/2016</td>\n      <td>Beach</td>\n      <td>134</td>\n      <td>99</td>\n      <td>76</td>\n      <td>98.0</td>\n      <td>0.25</td>\n      <td>233</td>\n      <td>58.25</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>7/5/2016</td>\n      <td>Beach</td>\n      <td>159</td>\n      <td>118</td>\n      <td>78</td>\n      <td>135.0</td>\n      <td>0.25</td>\n      <td>277</td>\n      <td>69.25</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n<br>\n\n**- tail**\n```python\n#끝에 3개 행 출력\nlemonade.tail(3)\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Date</th>\n      <th>Location</th>\n      <th>Lemon</th>\n      <th>Orange</th>\n      <th>Temperature</th>\n      <th>Leaflets</th>\n      <th>Price</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>29</th>\n      <td>7/29/2016</td>\n      <td>Park</td>\n      <td>100</td>\n      <td>66</td>\n      <td>81</td>\n      <td>95.0</td>\n      <td>0.35</td>\n    </tr>\n    <tr>\n      <th>30</th>\n      <td>7/30/2016</td>\n      <td>Beach</td>\n      <td>88</td>\n      <td>57</td>\n      <td>82</td>\n      <td>81.0</td>\n      <td>0.35</td>\n    </tr>\n    <tr>\n      <th>31</th>\n      <td>7/31/2016</td>\n      <td>Beach</td>\n      <td>76</td>\n      <td>47</td>\n      <td>82</td>\n      <td>68.0</td>\n      <td>0.35</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n<br>\n\n**- info() 메소드**\n데이터에 대한 전반적인 정보\ndf를 구성하는 행과 열의 크기, 컬럼명, 컬럼을 구성하는 자료형을 출력\n\n```python\nprint(lemonade.info())\n```\n\n    <class 'pandas.core.frame.DataFrame'>\n    RangeIndex: 32 entries, 0 to 31\n    Data columns (total 7 columns):\n     #   Column       Non-Null Count  Dtype  \n    ---  ------       --------------  -----  \n     0   Date         31 non-null     object \n     1   Location     32 non-null     object \n     2   Lemon        32 non-null     int64  \n     3   Orange       32 non-null     int64  \n     4   Temperature  32 non-null     int64  \n     5   Leaflets     31 non-null     float64\n     6   Price        32 non-null     float64\n    dtypes: float64(2), int64(3), object(2)\n    memory usage: 1.9+ KB\n    None\n    \n<br> \n\n**- describe() 메소드**\n다양한 통계량을 요약해주는 메소드\n\n```python\nlemonade.describe()\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Lemon</th>\n      <th>Orange</th>\n      <th>Temperature</th>\n      <th>Leaflets</th>\n      <th>Price</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>32.000000</td>\n      <td>32.000000</td>\n      <td>32.000000</td>\n      <td>31.000000</td>\n      <td>32.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>116.156250</td>\n      <td>80.000000</td>\n      <td>78.968750</td>\n      <td>108.548387</td>\n      <td>0.354687</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>25.823357</td>\n      <td>21.863211</td>\n      <td>4.067847</td>\n      <td>20.117718</td>\n      <td>0.113137</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>71.000000</td>\n      <td>42.000000</td>\n      <td>70.000000</td>\n      <td>68.000000</td>\n      <td>0.250000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>98.000000</td>\n      <td>66.750000</td>\n      <td>77.000000</td>\n      <td>90.000000</td>\n      <td>0.250000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>113.500000</td>\n      <td>76.500000</td>\n      <td>80.500000</td>\n      <td>108.000000</td>\n      <td>0.350000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>131.750000</td>\n      <td>95.000000</td>\n      <td>82.000000</td>\n      <td>124.000000</td>\n      <td>0.500000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>176.000000</td>\n      <td>129.000000</td>\n      <td>84.000000</td>\n      <td>158.000000</td>\n      <td>0.500000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n<br>\n\n**- .value_counts() 메소드**\n개별 컬럼 내에 각각의 값이 나온 횟수를 셀 수 있다\n\n\n```python\nlemonade['Location'].value_counts()\n```\n\n\n\n\n    Beach    17\n    Park     15\n    Name: Location, dtype: int64\n\n\n<br> \n\n### **데이터 다뤄보기**\n---\n\n\n```python\n#Sold라는 컬럼을 만들고 값을 0으로 지정\nlemonade['Sold'] = 0\nprint(lemonade.head(3))\n```\n\n           Date Location  Lemon  Orange  Temperature  Leaflets  Price  Sold\n    0  7/1/2016     Park     97      67           70      90.0   0.25     0\n    1  7/2/2016     Park     98      67           72      90.0   0.25     0\n    2  7/3/2016     Park    110      77           71     104.0   0.25     0\n    \n\n\n```python\nlemonade['Sold'] = lemonade['Lemon'] + lemonade['Orange']\nprint(lemonade.head(3))\n```\n\n           Date Location  Lemon  Orange  Temperature  Leaflets  Price  Sold\n    0  7/1/2016     Park     97      67           70      90.0   0.25   164\n    1  7/2/2016     Park     98      67           72      90.0   0.25   165\n    2  7/3/2016     Park    110      77           71     104.0   0.25   187\n    \n\n\n```python\nlemonade['Revenue'] = lemonade['Price']*lemonade['Sold']\nprint(lemonade.head(3))\n```\n\n           Date Location  Lemon  Orange  ...  Leaflets  Price  Sold  Revenue\n    0  7/1/2016     Park     97      67  ...      90.0   0.25   164    41.00\n    1  7/2/2016     Park     98      67  ...      90.0   0.25   165    41.25\n    2  7/3/2016     Park    110      77  ...     104.0   0.25   187    46.75\n    \n    [3 rows x 9 columns]\n    \n\n<br>\n\n**- Out으로 출력하는 최대 칼럼의 개수**\n: display.max_columns\n\n**- 옵션 설정**\n: pd.set_option()\n\n**- pd.set_option('display.max_columns',None)**\n: 열 전체를 출력한다는 의미\n\n```python\npd.set_option('display.max_columns',None)\n\nlemonade['Revenue'] = lemonade['Price'] * lemonade['Sold']\nprint(lemonade.head(3))\n```\n\n           Date Location  Lemon  Orange  Temperature  Leaflets  Price  Sold  \\\n    0  7/1/2016     Park     97      67           70      90.0   0.25   164   \n    1  7/2/2016     Park     98      67           72      90.0   0.25   165   \n    2  7/3/2016     Park    110      77           71     104.0   0.25   187   \n    \n       Revenue  \n    0    41.00  \n    1    41.25  \n    2    46.75  \n \n<br> \n\n```python\npd.set_option('display.max_columns',0)\n\nlemonade['Revenue']= lemonade['Price'] * lemonade['Sold']\nprint(lemonade.head(3))\n```\n\n           Date Location  Lemon  Orange  ...  Leaflets  Price  Sold  Revenue\n    0  7/1/2016     Park     97      67  ...      90.0   0.25   164    41.00\n    1  7/2/2016     Park     98      67  ...      90.0   0.25   165    41.25\n    2  7/3/2016     Park    110      77  ...     104.0   0.25   187    46.75\n    \n    [3 rows x 9 columns]\n    \n<br> \n\naxis=1은 열방향으로 동작 -> columns\naxis=0은 행방향으로 동작 -> index\n\n```python\n#Sold column(열)을 삭제\nlemonade_column_drop = lemonade.drop('Sold', axis=1)\nprint(lemonade_column_drop.head(3))\n```\n\n           Date Location  Lemon  Orange  Temperature  Leaflets  Price  Revenue\n    0  7/1/2016     Park     97      67           70      90.0   0.25    41.00\n    1  7/2/2016     Park     98      67           72      90.0   0.25    41.25\n    2  7/3/2016     Park    110      77           71     104.0   0.25    46.75\n    \n\n\n```python\n#0번 행 삭제\nlemonade_row_drop = lemonade_column_drop.drop(0, axis=0)\nprint(lemonade_row_drop.head(3))\n```\n\n           Date Location  Lemon  Orange  Temperature  Leaflets  Price  Revenue\n    1  7/2/2016     Park     98      67           72      90.0   0.25    41.25\n    2  7/3/2016     Park    110      77           71     104.0   0.25    46.75\n    3  7/4/2016    Beach    134      99           76      98.0   0.25    58.25\n    \n<br>\n\n### **데이터 인덱싱**\n---\n\n\n```python\n# 0번부터 4번까지 행 출력\nprint(lemonade[0:5])\n```\n\n           Date Location  Lemon  Orange  Temperature  Leaflets  Price  Sold  \\\n    0  7/1/2016     Park     97      67           70      90.0   0.25   164   \n    1  7/2/2016     Park     98      67           72      90.0   0.25   165   \n    2  7/3/2016     Park    110      77           71     104.0   0.25   187   \n    3  7/4/2016    Beach    134      99           76      98.0   0.25   233   \n    4  7/5/2016    Beach    159     118           78     135.0   0.25   277   \n    \n       Revenue  \n    0    41.00  \n    1    41.25  \n    2    46.75  \n    3    58.25  \n    4    69.25  \n    \n\n\n```python\nlemonade['Location'] == 'Beach'\n```\n\n\n\n\n    0     False\n    1     False\n    2     False\n    3      True\n    4      True\n    5      True\n    6      True\n    7      True\n    8      True\n    9      True\n    10     True\n    11     True\n    12     True\n    13     True\n    14     True\n    15     True\n    16     True\n    17     True\n    18    False\n    19    False\n    20    False\n    21    False\n    22    False\n    23    False\n    24    False\n    25    False\n    26    False\n    27    False\n    28    False\n    29    False\n    30     True\n    31     True\n    Name: Location, dtype: bool\n\n\n\n\n```python\n#true값만 반환\nprint(lemonade[lemonade['Location'] == 'Beach'].head(3))\n```\n\n           Date Location  Lemon  Orange  Temperature  Leaflets  Price  Sold  \\\n    3  7/4/2016    Beach    134      99           76      98.0   0.25   233   \n    4  7/5/2016    Beach    159     118           78     135.0   0.25   277   \n    5  7/6/2016    Beach    103      69           82      90.0   0.25   172   \n    \n       Revenue  \n    3    58.25  \n    4    69.25  \n    5    43.00  \n    \n<br>\niloc (integer-location based): 행 번호로 선택하는 방법 <br>\nloc (Labels): 조건 표현으로 선택함 <br>\n<br>\n\nex) <br>\ndf.loc[[행],[열]]\ndf.iloc[[행],[열]]\n행, 열 조건은 똑같다\n\n```python\nprint(lemonade.iloc[0:3, 0:2])    #첫 3개 행과 0,1,2번째 행 출력하기\n```\n\n           Date Location\n    0  7/1/2016     Park\n    1  7/2/2016     Park\n    2  7/3/2016     Park\n    \n\n\n```python\nprint(lemonade.loc[0:2, ['Date','Location']])   #열 \n```\n\n           Date Location\n    0  7/1/2016     Park\n    1  7/2/2016     Park\n    2  7/3/2016     Park\n    \n<br>\n\n### **기본 데이터 전처리**\n---\n\n**- sort_values()**\nby 옵션에 기준으로 데이터를 정렬\n\n```python\nprint(lemonade.sort_values(by=['Temperature']).head(5))\n```\n\n             Date Location  Lemon  Orange  Temperature  Leaflets  Price  Sold\n    0    7/1/2016     Park     97      67           70      90.0   0.25     0\n    20  7/20/2016     Park     71      42           70       NaN   0.50     0\n    2    7/3/2016     Park    110      77           71     104.0   0.25     0\n    1    7/2/2016     Park     98      67           72      90.0   0.25     0\n    16  7/16/2016    Beach     81      50           74      90.0   0.50     0\n    \n<br>\n \n**- Groupby()**\n전체 데이터를 그룹별로 분할하여\nmean(), sum(), count()와 같은 메소드를 사용해 연산하고\n연산 결과를 다시 합치는 과정을 거친다\n\n```python\nprint(lemonade.groupby(by='Location').count())\n```\n\n              Date  Lemon  Orange  Temperature  Leaflets  Price  Sold\n    Location                                                         \n    Beach       16     17      17           17        17     17    17\n    Park        15     15      15           15        14     15    15\n    \n\n\n<br>\n<br>\n<br>","source":"_posts/0204_python_pandas.md","raw":"---\ntitle: Python Pandas란\ndate: 2021-11-02\ntags: markdown, python, pycharm, pandas\ntoc: true\ncategories:\n  - 파이썬\n  - Python Pandas\n---\n<br>\n\n\n### **Pandas란**\n---\n파이썬 언어로 작성된 데이터를 분석 및 조작하기 위한 소프트웨어 라이브러리이다.\n팬더스는 R에서 사용되던 data.frame 구조를 본뜬 DataFrame이라는 구조를 사용하기 때문에, \nR의 data.frame에서 사용하던 기능 상당수를 무리없이 사용할 수 있도록 만들었다. \n\n- 사용하는 이유\n데이터 전처리 하기 위함\nindex 1개와 column 1개 ---> series\nindex 1개와 column 2개 ---> dataframe\n<br>\n\nPandas 참고 사이트\nhttps://pandas.pydata.org/docs/reference/index.html\n<br>\n\n\n\n\n\n### **라이브러리 불러오기**\n---\n\n\n```python\nimport pandas as pd\nprint(pd.__version__)\n```\n\n    1.1.5\n    \n<br>\n\n### **테스트**\n---\n\n```python\ndf = pd.DataFrame({'col1': [1,2], 'col2': [3,4]})\nprint(type(df))\n```\n\n    <class 'pandas.core.frame.DataFrame'>\n    \n<br>\n\n### **구글 드라이브 연동 (colab이랑 연결)**\n---\n\n```python\nfrom google.colab import drive\ndrive.mount('/content/drive')\n```\n\n    Mounted at /content/drive\n    \n\n\n```python\nDATA_PATH = \"경로를 입력하시기를 바랍니다.\"\nDATA_PATH = '/content/drive/MyDrive/Colab Notebooks/lectures_211101/PART_I_Intro/data'\nlemonade = pd.read_csv(DATA_PATH + '/Lemonade2016.csv')\nlemonade.info()\n```\n\n    <class 'pandas.core.frame.DataFrame'>\n    RangeIndex: 32 entries, 0 to 31\n    Data columns (total 7 columns):\n     #   Column       Non-Null Count  Dtype  \n    ---  ------       --------------  -----  \n     0   Date         31 non-null     object \n     1   Location     32 non-null     object \n     2   Lemon        32 non-null     int64  \n     3   Orange       32 non-null     int64  \n     4   Temperature  32 non-null     int64  \n     5   Leaflets     31 non-null     float64\n     6   Price        32 non-null     float64\n    dtypes: float64(2), int64(3), object(2)\n    memory usage: 1.9+ KB\n    \n\n### **데이터 둘러보기**\n---\n\n(lemonade 파일은 가게 포스기라고 생각하자)\n\n**- head**\n```python\n#상위 5개 행 출력\n#0부터 4까지 행 출력\nlemonade.head(5)\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Date</th>\n      <th>Location</th>\n      <th>Lemon</th>\n      <th>Orange</th>\n      <th>Temperature</th>\n      <th>Leaflets</th>\n      <th>Price</th>\n      <th>Sold</th>\n      <th>Revenue</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>7/1/2016</td>\n      <td>Park</td>\n      <td>97</td>\n      <td>67</td>\n      <td>70</td>\n      <td>90.0</td>\n      <td>0.25</td>\n      <td>164</td>\n      <td>41.00</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>7/2/2016</td>\n      <td>Park</td>\n      <td>98</td>\n      <td>67</td>\n      <td>72</td>\n      <td>90.0</td>\n      <td>0.25</td>\n      <td>165</td>\n      <td>41.25</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>7/3/2016</td>\n      <td>Park</td>\n      <td>110</td>\n      <td>77</td>\n      <td>71</td>\n      <td>104.0</td>\n      <td>0.25</td>\n      <td>187</td>\n      <td>46.75</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>7/4/2016</td>\n      <td>Beach</td>\n      <td>134</td>\n      <td>99</td>\n      <td>76</td>\n      <td>98.0</td>\n      <td>0.25</td>\n      <td>233</td>\n      <td>58.25</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>7/5/2016</td>\n      <td>Beach</td>\n      <td>159</td>\n      <td>118</td>\n      <td>78</td>\n      <td>135.0</td>\n      <td>0.25</td>\n      <td>277</td>\n      <td>69.25</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n<br>\n\n**- tail**\n```python\n#끝에 3개 행 출력\nlemonade.tail(3)\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Date</th>\n      <th>Location</th>\n      <th>Lemon</th>\n      <th>Orange</th>\n      <th>Temperature</th>\n      <th>Leaflets</th>\n      <th>Price</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>29</th>\n      <td>7/29/2016</td>\n      <td>Park</td>\n      <td>100</td>\n      <td>66</td>\n      <td>81</td>\n      <td>95.0</td>\n      <td>0.35</td>\n    </tr>\n    <tr>\n      <th>30</th>\n      <td>7/30/2016</td>\n      <td>Beach</td>\n      <td>88</td>\n      <td>57</td>\n      <td>82</td>\n      <td>81.0</td>\n      <td>0.35</td>\n    </tr>\n    <tr>\n      <th>31</th>\n      <td>7/31/2016</td>\n      <td>Beach</td>\n      <td>76</td>\n      <td>47</td>\n      <td>82</td>\n      <td>68.0</td>\n      <td>0.35</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n<br>\n\n**- info() 메소드**\n데이터에 대한 전반적인 정보\ndf를 구성하는 행과 열의 크기, 컬럼명, 컬럼을 구성하는 자료형을 출력\n\n```python\nprint(lemonade.info())\n```\n\n    <class 'pandas.core.frame.DataFrame'>\n    RangeIndex: 32 entries, 0 to 31\n    Data columns (total 7 columns):\n     #   Column       Non-Null Count  Dtype  \n    ---  ------       --------------  -----  \n     0   Date         31 non-null     object \n     1   Location     32 non-null     object \n     2   Lemon        32 non-null     int64  \n     3   Orange       32 non-null     int64  \n     4   Temperature  32 non-null     int64  \n     5   Leaflets     31 non-null     float64\n     6   Price        32 non-null     float64\n    dtypes: float64(2), int64(3), object(2)\n    memory usage: 1.9+ KB\n    None\n    \n<br> \n\n**- describe() 메소드**\n다양한 통계량을 요약해주는 메소드\n\n```python\nlemonade.describe()\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Lemon</th>\n      <th>Orange</th>\n      <th>Temperature</th>\n      <th>Leaflets</th>\n      <th>Price</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>32.000000</td>\n      <td>32.000000</td>\n      <td>32.000000</td>\n      <td>31.000000</td>\n      <td>32.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>116.156250</td>\n      <td>80.000000</td>\n      <td>78.968750</td>\n      <td>108.548387</td>\n      <td>0.354687</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>25.823357</td>\n      <td>21.863211</td>\n      <td>4.067847</td>\n      <td>20.117718</td>\n      <td>0.113137</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>71.000000</td>\n      <td>42.000000</td>\n      <td>70.000000</td>\n      <td>68.000000</td>\n      <td>0.250000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>98.000000</td>\n      <td>66.750000</td>\n      <td>77.000000</td>\n      <td>90.000000</td>\n      <td>0.250000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>113.500000</td>\n      <td>76.500000</td>\n      <td>80.500000</td>\n      <td>108.000000</td>\n      <td>0.350000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>131.750000</td>\n      <td>95.000000</td>\n      <td>82.000000</td>\n      <td>124.000000</td>\n      <td>0.500000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>176.000000</td>\n      <td>129.000000</td>\n      <td>84.000000</td>\n      <td>158.000000</td>\n      <td>0.500000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n<br>\n\n**- .value_counts() 메소드**\n개별 컬럼 내에 각각의 값이 나온 횟수를 셀 수 있다\n\n\n```python\nlemonade['Location'].value_counts()\n```\n\n\n\n\n    Beach    17\n    Park     15\n    Name: Location, dtype: int64\n\n\n<br> \n\n### **데이터 다뤄보기**\n---\n\n\n```python\n#Sold라는 컬럼을 만들고 값을 0으로 지정\nlemonade['Sold'] = 0\nprint(lemonade.head(3))\n```\n\n           Date Location  Lemon  Orange  Temperature  Leaflets  Price  Sold\n    0  7/1/2016     Park     97      67           70      90.0   0.25     0\n    1  7/2/2016     Park     98      67           72      90.0   0.25     0\n    2  7/3/2016     Park    110      77           71     104.0   0.25     0\n    \n\n\n```python\nlemonade['Sold'] = lemonade['Lemon'] + lemonade['Orange']\nprint(lemonade.head(3))\n```\n\n           Date Location  Lemon  Orange  Temperature  Leaflets  Price  Sold\n    0  7/1/2016     Park     97      67           70      90.0   0.25   164\n    1  7/2/2016     Park     98      67           72      90.0   0.25   165\n    2  7/3/2016     Park    110      77           71     104.0   0.25   187\n    \n\n\n```python\nlemonade['Revenue'] = lemonade['Price']*lemonade['Sold']\nprint(lemonade.head(3))\n```\n\n           Date Location  Lemon  Orange  ...  Leaflets  Price  Sold  Revenue\n    0  7/1/2016     Park     97      67  ...      90.0   0.25   164    41.00\n    1  7/2/2016     Park     98      67  ...      90.0   0.25   165    41.25\n    2  7/3/2016     Park    110      77  ...     104.0   0.25   187    46.75\n    \n    [3 rows x 9 columns]\n    \n\n<br>\n\n**- Out으로 출력하는 최대 칼럼의 개수**\n: display.max_columns\n\n**- 옵션 설정**\n: pd.set_option()\n\n**- pd.set_option('display.max_columns',None)**\n: 열 전체를 출력한다는 의미\n\n```python\npd.set_option('display.max_columns',None)\n\nlemonade['Revenue'] = lemonade['Price'] * lemonade['Sold']\nprint(lemonade.head(3))\n```\n\n           Date Location  Lemon  Orange  Temperature  Leaflets  Price  Sold  \\\n    0  7/1/2016     Park     97      67           70      90.0   0.25   164   \n    1  7/2/2016     Park     98      67           72      90.0   0.25   165   \n    2  7/3/2016     Park    110      77           71     104.0   0.25   187   \n    \n       Revenue  \n    0    41.00  \n    1    41.25  \n    2    46.75  \n \n<br> \n\n```python\npd.set_option('display.max_columns',0)\n\nlemonade['Revenue']= lemonade['Price'] * lemonade['Sold']\nprint(lemonade.head(3))\n```\n\n           Date Location  Lemon  Orange  ...  Leaflets  Price  Sold  Revenue\n    0  7/1/2016     Park     97      67  ...      90.0   0.25   164    41.00\n    1  7/2/2016     Park     98      67  ...      90.0   0.25   165    41.25\n    2  7/3/2016     Park    110      77  ...     104.0   0.25   187    46.75\n    \n    [3 rows x 9 columns]\n    \n<br> \n\naxis=1은 열방향으로 동작 -> columns\naxis=0은 행방향으로 동작 -> index\n\n```python\n#Sold column(열)을 삭제\nlemonade_column_drop = lemonade.drop('Sold', axis=1)\nprint(lemonade_column_drop.head(3))\n```\n\n           Date Location  Lemon  Orange  Temperature  Leaflets  Price  Revenue\n    0  7/1/2016     Park     97      67           70      90.0   0.25    41.00\n    1  7/2/2016     Park     98      67           72      90.0   0.25    41.25\n    2  7/3/2016     Park    110      77           71     104.0   0.25    46.75\n    \n\n\n```python\n#0번 행 삭제\nlemonade_row_drop = lemonade_column_drop.drop(0, axis=0)\nprint(lemonade_row_drop.head(3))\n```\n\n           Date Location  Lemon  Orange  Temperature  Leaflets  Price  Revenue\n    1  7/2/2016     Park     98      67           72      90.0   0.25    41.25\n    2  7/3/2016     Park    110      77           71     104.0   0.25    46.75\n    3  7/4/2016    Beach    134      99           76      98.0   0.25    58.25\n    \n<br>\n\n### **데이터 인덱싱**\n---\n\n\n```python\n# 0번부터 4번까지 행 출력\nprint(lemonade[0:5])\n```\n\n           Date Location  Lemon  Orange  Temperature  Leaflets  Price  Sold  \\\n    0  7/1/2016     Park     97      67           70      90.0   0.25   164   \n    1  7/2/2016     Park     98      67           72      90.0   0.25   165   \n    2  7/3/2016     Park    110      77           71     104.0   0.25   187   \n    3  7/4/2016    Beach    134      99           76      98.0   0.25   233   \n    4  7/5/2016    Beach    159     118           78     135.0   0.25   277   \n    \n       Revenue  \n    0    41.00  \n    1    41.25  \n    2    46.75  \n    3    58.25  \n    4    69.25  \n    \n\n\n```python\nlemonade['Location'] == 'Beach'\n```\n\n\n\n\n    0     False\n    1     False\n    2     False\n    3      True\n    4      True\n    5      True\n    6      True\n    7      True\n    8      True\n    9      True\n    10     True\n    11     True\n    12     True\n    13     True\n    14     True\n    15     True\n    16     True\n    17     True\n    18    False\n    19    False\n    20    False\n    21    False\n    22    False\n    23    False\n    24    False\n    25    False\n    26    False\n    27    False\n    28    False\n    29    False\n    30     True\n    31     True\n    Name: Location, dtype: bool\n\n\n\n\n```python\n#true값만 반환\nprint(lemonade[lemonade['Location'] == 'Beach'].head(3))\n```\n\n           Date Location  Lemon  Orange  Temperature  Leaflets  Price  Sold  \\\n    3  7/4/2016    Beach    134      99           76      98.0   0.25   233   \n    4  7/5/2016    Beach    159     118           78     135.0   0.25   277   \n    5  7/6/2016    Beach    103      69           82      90.0   0.25   172   \n    \n       Revenue  \n    3    58.25  \n    4    69.25  \n    5    43.00  \n    \n<br>\niloc (integer-location based): 행 번호로 선택하는 방법 <br>\nloc (Labels): 조건 표현으로 선택함 <br>\n<br>\n\nex) <br>\ndf.loc[[행],[열]]\ndf.iloc[[행],[열]]\n행, 열 조건은 똑같다\n\n```python\nprint(lemonade.iloc[0:3, 0:2])    #첫 3개 행과 0,1,2번째 행 출력하기\n```\n\n           Date Location\n    0  7/1/2016     Park\n    1  7/2/2016     Park\n    2  7/3/2016     Park\n    \n\n\n```python\nprint(lemonade.loc[0:2, ['Date','Location']])   #열 \n```\n\n           Date Location\n    0  7/1/2016     Park\n    1  7/2/2016     Park\n    2  7/3/2016     Park\n    \n<br>\n\n### **기본 데이터 전처리**\n---\n\n**- sort_values()**\nby 옵션에 기준으로 데이터를 정렬\n\n```python\nprint(lemonade.sort_values(by=['Temperature']).head(5))\n```\n\n             Date Location  Lemon  Orange  Temperature  Leaflets  Price  Sold\n    0    7/1/2016     Park     97      67           70      90.0   0.25     0\n    20  7/20/2016     Park     71      42           70       NaN   0.50     0\n    2    7/3/2016     Park    110      77           71     104.0   0.25     0\n    1    7/2/2016     Park     98      67           72      90.0   0.25     0\n    16  7/16/2016    Beach     81      50           74      90.0   0.50     0\n    \n<br>\n \n**- Groupby()**\n전체 데이터를 그룹별로 분할하여\nmean(), sum(), count()와 같은 메소드를 사용해 연산하고\n연산 결과를 다시 합치는 과정을 거친다\n\n```python\nprint(lemonade.groupby(by='Location').count())\n```\n\n              Date  Lemon  Orange  Temperature  Leaflets  Price  Sold\n    Location                                                         \n    Beach       16     17      17           17        17     17    17\n    Park        15     15      15           15        14     15    15\n    \n\n\n<br>\n<br>\n<br>","slug":"0204-python-pandas","published":1,"updated":"2022-01-03T12:20:08.046Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cky2hohem000h5nrj31p60qa7","content":"<br>\n\n\n<h3 id=\"Pandas란\"><a href=\"#Pandas란\" class=\"headerlink\" title=\"Pandas란\"></a><strong>Pandas란</strong></h3><hr>\n<p>파이썬 언어로 작성된 데이터를 분석 및 조작하기 위한 소프트웨어 라이브러리이다.<br>팬더스는 R에서 사용되던 data.frame 구조를 본뜬 DataFrame이라는 구조를 사용하기 때문에,<br>R의 data.frame에서 사용하던 기능 상당수를 무리없이 사용할 수 있도록 만들었다. </p>\n<ul>\n<li>사용하는 이유<br>데이터 전처리 하기 위함<br>index 1개와 column 1개 —&gt; series<br>index 1개와 column 2개 —&gt; dataframe<br></li>\n</ul>\n<p>Pandas 참고 사이트<br><a href=\"https://pandas.pydata.org/docs/reference/index.html\">https://pandas.pydata.org/docs/reference/index.html</a><br><br></p>\n<h3 id=\"라이브러리-불러오기\"><a href=\"#라이브러리-불러오기\" class=\"headerlink\" title=\"라이브러리 불러오기\"></a><strong>라이브러리 불러오기</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"built_in\">print</span>(pd.__version__)</span><br></pre></td></tr></table></figure>\n\n<pre><code>1.1.5\n</code></pre>\n<br>\n\n<h3 id=\"테스트\"><a href=\"#테스트\" class=\"headerlink\" title=\"테스트\"></a><strong>테스트</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df = pd.DataFrame(&#123;<span class=\"string\">&#x27;col1&#x27;</span>: [<span class=\"number\">1</span>,<span class=\"number\">2</span>], <span class=\"string\">&#x27;col2&#x27;</span>: [<span class=\"number\">3</span>,<span class=\"number\">4</span>]&#125;)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(df))</span><br></pre></td></tr></table></figure>\n\n<pre><code>&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;\n</code></pre>\n<br>\n\n<h3 id=\"구글-드라이브-연동-colab이랑-연결\"><a href=\"#구글-드라이브-연동-colab이랑-연결\" class=\"headerlink\" title=\"구글 드라이브 연동 (colab이랑 연결)\"></a><strong>구글 드라이브 연동 (colab이랑 연결)</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> google.colab <span class=\"keyword\">import</span> drive</span><br><span class=\"line\">drive.mount(<span class=\"string\">&#x27;/content/drive&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<pre><code>Mounted at /content/drive\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DATA_PATH = <span class=\"string\">&quot;경로를 입력하시기를 바랍니다.&quot;</span></span><br><span class=\"line\">DATA_PATH = <span class=\"string\">&#x27;/content/drive/MyDrive/Colab Notebooks/lectures_211101/PART_I_Intro/data&#x27;</span></span><br><span class=\"line\">lemonade = pd.read_csv(DATA_PATH + <span class=\"string\">&#x27;/Lemonade2016.csv&#x27;</span>)</span><br><span class=\"line\">lemonade.info()</span><br></pre></td></tr></table></figure>\n\n<pre><code>&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;\nRangeIndex: 32 entries, 0 to 31\nData columns (total 7 columns):\n #   Column       Non-Null Count  Dtype  \n---  ------       --------------  -----  \n 0   Date         31 non-null     object \n 1   Location     32 non-null     object \n 2   Lemon        32 non-null     int64  \n 3   Orange       32 non-null     int64  \n 4   Temperature  32 non-null     int64  \n 5   Leaflets     31 non-null     float64\n 6   Price        32 non-null     float64\ndtypes: float64(2), int64(3), object(2)\nmemory usage: 1.9+ KB\n</code></pre>\n<h3 id=\"데이터-둘러보기\"><a href=\"#데이터-둘러보기\" class=\"headerlink\" title=\"데이터 둘러보기\"></a><strong>데이터 둘러보기</strong></h3><hr>\n<p>(lemonade 파일은 가게 포스기라고 생각하자)</p>\n<p><strong>- head</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#상위 5개 행 출력</span></span><br><span class=\"line\"><span class=\"comment\">#0부터 4까지 행 출력</span></span><br><span class=\"line\">lemonade.head(<span class=\"number\">5</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n<pre><code>.dataframe tbody tr th &#123;\n    vertical-align: top;\n&#125;\n\n.dataframe thead th &#123;\n    text-align: right;\n&#125;\n</code></pre>\n<p></style></p>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Date</th>\n      <th>Location</th>\n      <th>Lemon</th>\n      <th>Orange</th>\n      <th>Temperature</th>\n      <th>Leaflets</th>\n      <th>Price</th>\n      <th>Sold</th>\n      <th>Revenue</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>7/1/2016</td>\n      <td>Park</td>\n      <td>97</td>\n      <td>67</td>\n      <td>70</td>\n      <td>90.0</td>\n      <td>0.25</td>\n      <td>164</td>\n      <td>41.00</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>7/2/2016</td>\n      <td>Park</td>\n      <td>98</td>\n      <td>67</td>\n      <td>72</td>\n      <td>90.0</td>\n      <td>0.25</td>\n      <td>165</td>\n      <td>41.25</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>7/3/2016</td>\n      <td>Park</td>\n      <td>110</td>\n      <td>77</td>\n      <td>71</td>\n      <td>104.0</td>\n      <td>0.25</td>\n      <td>187</td>\n      <td>46.75</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>7/4/2016</td>\n      <td>Beach</td>\n      <td>134</td>\n      <td>99</td>\n      <td>76</td>\n      <td>98.0</td>\n      <td>0.25</td>\n      <td>233</td>\n      <td>58.25</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>7/5/2016</td>\n      <td>Beach</td>\n      <td>159</td>\n      <td>118</td>\n      <td>78</td>\n      <td>135.0</td>\n      <td>0.25</td>\n      <td>277</td>\n      <td>69.25</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n<br>\n\n<p><strong>- tail</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#끝에 3개 행 출력</span></span><br><span class=\"line\">lemonade.tail(<span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n<pre><code>.dataframe tbody tr th &#123;\n    vertical-align: top;\n&#125;\n\n.dataframe thead th &#123;\n    text-align: right;\n&#125;\n</code></pre>\n<p></style></p>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Date</th>\n      <th>Location</th>\n      <th>Lemon</th>\n      <th>Orange</th>\n      <th>Temperature</th>\n      <th>Leaflets</th>\n      <th>Price</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>29</th>\n      <td>7/29/2016</td>\n      <td>Park</td>\n      <td>100</td>\n      <td>66</td>\n      <td>81</td>\n      <td>95.0</td>\n      <td>0.35</td>\n    </tr>\n    <tr>\n      <th>30</th>\n      <td>7/30/2016</td>\n      <td>Beach</td>\n      <td>88</td>\n      <td>57</td>\n      <td>82</td>\n      <td>81.0</td>\n      <td>0.35</td>\n    </tr>\n    <tr>\n      <th>31</th>\n      <td>7/31/2016</td>\n      <td>Beach</td>\n      <td>76</td>\n      <td>47</td>\n      <td>82</td>\n      <td>68.0</td>\n      <td>0.35</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n<br>\n\n<p><strong>- info() 메소드</strong><br>데이터에 대한 전반적인 정보<br>df를 구성하는 행과 열의 크기, 컬럼명, 컬럼을 구성하는 자료형을 출력</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(lemonade.info())</span><br></pre></td></tr></table></figure>\n\n<pre><code>&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;\nRangeIndex: 32 entries, 0 to 31\nData columns (total 7 columns):\n #   Column       Non-Null Count  Dtype  \n---  ------       --------------  -----  \n 0   Date         31 non-null     object \n 1   Location     32 non-null     object \n 2   Lemon        32 non-null     int64  \n 3   Orange       32 non-null     int64  \n 4   Temperature  32 non-null     int64  \n 5   Leaflets     31 non-null     float64\n 6   Price        32 non-null     float64\ndtypes: float64(2), int64(3), object(2)\nmemory usage: 1.9+ KB\nNone\n</code></pre>\n<br> \n\n<p><strong>- describe() 메소드</strong><br>다양한 통계량을 요약해주는 메소드</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lemonade.describe()</span><br></pre></td></tr></table></figure>\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n<pre><code>.dataframe tbody tr th &#123;\n    vertical-align: top;\n&#125;\n\n.dataframe thead th &#123;\n    text-align: right;\n&#125;\n</code></pre>\n<p></style></p>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Lemon</th>\n      <th>Orange</th>\n      <th>Temperature</th>\n      <th>Leaflets</th>\n      <th>Price</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>32.000000</td>\n      <td>32.000000</td>\n      <td>32.000000</td>\n      <td>31.000000</td>\n      <td>32.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>116.156250</td>\n      <td>80.000000</td>\n      <td>78.968750</td>\n      <td>108.548387</td>\n      <td>0.354687</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>25.823357</td>\n      <td>21.863211</td>\n      <td>4.067847</td>\n      <td>20.117718</td>\n      <td>0.113137</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>71.000000</td>\n      <td>42.000000</td>\n      <td>70.000000</td>\n      <td>68.000000</td>\n      <td>0.250000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>98.000000</td>\n      <td>66.750000</td>\n      <td>77.000000</td>\n      <td>90.000000</td>\n      <td>0.250000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>113.500000</td>\n      <td>76.500000</td>\n      <td>80.500000</td>\n      <td>108.000000</td>\n      <td>0.350000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>131.750000</td>\n      <td>95.000000</td>\n      <td>82.000000</td>\n      <td>124.000000</td>\n      <td>0.500000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>176.000000</td>\n      <td>129.000000</td>\n      <td>84.000000</td>\n      <td>158.000000</td>\n      <td>0.500000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n<br>\n\n<p><strong>- .value_counts() 메소드</strong><br>개별 컬럼 내에 각각의 값이 나온 횟수를 셀 수 있다</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lemonade[<span class=\"string\">&#x27;Location&#x27;</span>].value_counts()</span><br></pre></td></tr></table></figure>\n\n\n\n\n<pre><code>Beach    17\nPark     15\nName: Location, dtype: int64\n</code></pre>\n<br> \n\n<h3 id=\"데이터-다뤄보기\"><a href=\"#데이터-다뤄보기\" class=\"headerlink\" title=\"데이터 다뤄보기\"></a><strong>데이터 다뤄보기</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#Sold라는 컬럼을 만들고 값을 0으로 지정</span></span><br><span class=\"line\">lemonade[<span class=\"string\">&#x27;Sold&#x27;</span>] = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(lemonade.head(<span class=\"number\">3</span>))</span><br></pre></td></tr></table></figure>\n\n<pre><code>       Date Location  Lemon  Orange  Temperature  Leaflets  Price  Sold\n0  7/1/2016     Park     97      67           70      90.0   0.25     0\n1  7/2/2016     Park     98      67           72      90.0   0.25     0\n2  7/3/2016     Park    110      77           71     104.0   0.25     0\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lemonade[<span class=\"string\">&#x27;Sold&#x27;</span>] = lemonade[<span class=\"string\">&#x27;Lemon&#x27;</span>] + lemonade[<span class=\"string\">&#x27;Orange&#x27;</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(lemonade.head(<span class=\"number\">3</span>))</span><br></pre></td></tr></table></figure>\n\n<pre><code>       Date Location  Lemon  Orange  Temperature  Leaflets  Price  Sold\n0  7/1/2016     Park     97      67           70      90.0   0.25   164\n1  7/2/2016     Park     98      67           72      90.0   0.25   165\n2  7/3/2016     Park    110      77           71     104.0   0.25   187\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lemonade[<span class=\"string\">&#x27;Revenue&#x27;</span>] = lemonade[<span class=\"string\">&#x27;Price&#x27;</span>]*lemonade[<span class=\"string\">&#x27;Sold&#x27;</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(lemonade.head(<span class=\"number\">3</span>))</span><br></pre></td></tr></table></figure>\n\n<pre><code>       Date Location  Lemon  Orange  ...  Leaflets  Price  Sold  Revenue\n0  7/1/2016     Park     97      67  ...      90.0   0.25   164    41.00\n1  7/2/2016     Park     98      67  ...      90.0   0.25   165    41.25\n2  7/3/2016     Park    110      77  ...     104.0   0.25   187    46.75\n\n[3 rows x 9 columns]\n</code></pre>\n<br>\n\n<dl><dt><strong>- Out으로 출력하는 최대 칼럼의 개수</strong></dt><dd>display.max_columns</dd></dl><dl><dt><strong>- 옵션 설정</strong></dt><dd>pd.set_option()</dd></dl><dl><dt><strong>- pd.set_option(‘display.max_columns’,None)</strong></dt><dd>열 전체를 출력한다는 의미</dd></dl><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pd.set_option(<span class=\"string\">&#x27;display.max_columns&#x27;</span>,<span class=\"literal\">None</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">lemonade[<span class=\"string\">&#x27;Revenue&#x27;</span>] = lemonade[<span class=\"string\">&#x27;Price&#x27;</span>] * lemonade[<span class=\"string\">&#x27;Sold&#x27;</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(lemonade.head(<span class=\"number\">3</span>))</span><br></pre></td></tr></table></figure>\n\n<pre><code>       Date Location  Lemon  Orange  Temperature  Leaflets  Price  Sold  \\\n0  7/1/2016     Park     97      67           70      90.0   0.25   164   \n1  7/2/2016     Park     98      67           72      90.0   0.25   165   \n2  7/3/2016     Park    110      77           71     104.0   0.25   187   \n\n   Revenue  \n0    41.00  \n1    41.25  \n2    46.75  \n</code></pre>\n<br> \n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pd.set_option(<span class=\"string\">&#x27;display.max_columns&#x27;</span>,<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">lemonade[<span class=\"string\">&#x27;Revenue&#x27;</span>]= lemonade[<span class=\"string\">&#x27;Price&#x27;</span>] * lemonade[<span class=\"string\">&#x27;Sold&#x27;</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(lemonade.head(<span class=\"number\">3</span>))</span><br></pre></td></tr></table></figure>\n\n<pre><code>       Date Location  Lemon  Orange  ...  Leaflets  Price  Sold  Revenue\n0  7/1/2016     Park     97      67  ...      90.0   0.25   164    41.00\n1  7/2/2016     Park     98      67  ...      90.0   0.25   165    41.25\n2  7/3/2016     Park    110      77  ...     104.0   0.25   187    46.75\n\n[3 rows x 9 columns]\n</code></pre>\n<br> \n\n<p>axis=1은 열방향으로 동작 -&gt; columns<br>axis=0은 행방향으로 동작 -&gt; index</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#Sold column(열)을 삭제</span></span><br><span class=\"line\">lemonade_column_drop = lemonade.drop(<span class=\"string\">&#x27;Sold&#x27;</span>, axis=<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(lemonade_column_drop.head(<span class=\"number\">3</span>))</span><br></pre></td></tr></table></figure>\n\n<pre><code>       Date Location  Lemon  Orange  Temperature  Leaflets  Price  Revenue\n0  7/1/2016     Park     97      67           70      90.0   0.25    41.00\n1  7/2/2016     Park     98      67           72      90.0   0.25    41.25\n2  7/3/2016     Park    110      77           71     104.0   0.25    46.75\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#0번 행 삭제</span></span><br><span class=\"line\">lemonade_row_drop = lemonade_column_drop.drop(<span class=\"number\">0</span>, axis=<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(lemonade_row_drop.head(<span class=\"number\">3</span>))</span><br></pre></td></tr></table></figure>\n\n<pre><code>       Date Location  Lemon  Orange  Temperature  Leaflets  Price  Revenue\n1  7/2/2016     Park     98      67           72      90.0   0.25    41.25\n2  7/3/2016     Park    110      77           71     104.0   0.25    46.75\n3  7/4/2016    Beach    134      99           76      98.0   0.25    58.25\n</code></pre>\n<br>\n\n<h3 id=\"데이터-인덱싱\"><a href=\"#데이터-인덱싱\" class=\"headerlink\" title=\"데이터 인덱싱\"></a><strong>데이터 인덱싱</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 0번부터 4번까지 행 출력</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(lemonade[<span class=\"number\">0</span>:<span class=\"number\">5</span>])</span><br></pre></td></tr></table></figure>\n\n<pre><code>       Date Location  Lemon  Orange  Temperature  Leaflets  Price  Sold  \\\n0  7/1/2016     Park     97      67           70      90.0   0.25   164   \n1  7/2/2016     Park     98      67           72      90.0   0.25   165   \n2  7/3/2016     Park    110      77           71     104.0   0.25   187   \n3  7/4/2016    Beach    134      99           76      98.0   0.25   233   \n4  7/5/2016    Beach    159     118           78     135.0   0.25   277   \n\n   Revenue  \n0    41.00  \n1    41.25  \n2    46.75  \n3    58.25  \n4    69.25  \n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lemonade[<span class=\"string\">&#x27;Location&#x27;</span>] == <span class=\"string\">&#x27;Beach&#x27;</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n<pre><code>0     False\n1     False\n2     False\n3      True\n4      True\n5      True\n6      True\n7      True\n8      True\n9      True\n10     True\n11     True\n12     True\n13     True\n14     True\n15     True\n16     True\n17     True\n18    False\n19    False\n20    False\n21    False\n22    False\n23    False\n24    False\n25    False\n26    False\n27    False\n28    False\n29    False\n30     True\n31     True\nName: Location, dtype: bool\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#true값만 반환</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(lemonade[lemonade[<span class=\"string\">&#x27;Location&#x27;</span>] == <span class=\"string\">&#x27;Beach&#x27;</span>].head(<span class=\"number\">3</span>))</span><br></pre></td></tr></table></figure>\n\n<pre><code>       Date Location  Lemon  Orange  Temperature  Leaflets  Price  Sold  \\\n3  7/4/2016    Beach    134      99           76      98.0   0.25   233   \n4  7/5/2016    Beach    159     118           78     135.0   0.25   277   \n5  7/6/2016    Beach    103      69           82      90.0   0.25   172   \n\n   Revenue  \n3    58.25  \n4    69.25  \n5    43.00  \n</code></pre>\n<br>\niloc (integer-location based): 행 번호로 선택하는 방법 <br>\nloc (Labels): 조건 표현으로 선택함 <br>\n<br>\n\n<p>ex) <br><br>df.loc[[행],[열]]<br>df.iloc[[행],[열]]<br>행, 열 조건은 똑같다</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(lemonade.iloc[<span class=\"number\">0</span>:<span class=\"number\">3</span>, <span class=\"number\">0</span>:<span class=\"number\">2</span>])    <span class=\"comment\">#첫 3개 행과 0,1,2번째 행 출력하기</span></span><br></pre></td></tr></table></figure>\n\n<pre><code>       Date Location\n0  7/1/2016     Park\n1  7/2/2016     Park\n2  7/3/2016     Park\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(lemonade.loc[<span class=\"number\">0</span>:<span class=\"number\">2</span>, [<span class=\"string\">&#x27;Date&#x27;</span>,<span class=\"string\">&#x27;Location&#x27;</span>]])   <span class=\"comment\">#열 </span></span><br></pre></td></tr></table></figure>\n\n<pre><code>       Date Location\n0  7/1/2016     Park\n1  7/2/2016     Park\n2  7/3/2016     Park\n</code></pre>\n<br>\n\n<h3 id=\"기본-데이터-전처리\"><a href=\"#기본-데이터-전처리\" class=\"headerlink\" title=\"기본 데이터 전처리\"></a><strong>기본 데이터 전처리</strong></h3><hr>\n<p><strong>- sort_values()</strong><br>by 옵션에 기준으로 데이터를 정렬</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(lemonade.sort_values(by=[<span class=\"string\">&#x27;Temperature&#x27;</span>]).head(<span class=\"number\">5</span>))</span><br></pre></td></tr></table></figure>\n\n<pre><code>         Date Location  Lemon  Orange  Temperature  Leaflets  Price  Sold\n0    7/1/2016     Park     97      67           70      90.0   0.25     0\n20  7/20/2016     Park     71      42           70       NaN   0.50     0\n2    7/3/2016     Park    110      77           71     104.0   0.25     0\n1    7/2/2016     Park     98      67           72      90.0   0.25     0\n16  7/16/2016    Beach     81      50           74      90.0   0.50     0\n</code></pre>\n<br>\n \n<p><strong>- Groupby()</strong><br>전체 데이터를 그룹별로 분할하여<br>mean(), sum(), count()와 같은 메소드를 사용해 연산하고<br>연산 결과를 다시 합치는 과정을 거친다</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(lemonade.groupby(by=<span class=\"string\">&#x27;Location&#x27;</span>).count())</span><br></pre></td></tr></table></figure>\n\n<pre><code>          Date  Lemon  Orange  Temperature  Leaflets  Price  Sold\nLocation                                                         \nBeach       16     17      17           17        17     17    17\nPark        15     15      15           15        14     15    15\n</code></pre>\n<br>\n<br>\n<br>","site":{"data":{}},"excerpt":"Pandas란\n\n\n\n파이썬 언어로 작성된 데이터를 분석 및 조작하기 위한 소프트웨어 라이브러리이다.\n팬더스는 R에서 사용되던 data.frame 구조를 본뜬 DataFrame이라는 구조를 사용하기 때문에,\nR의 data.frame에서 사용하던 기능 상당수를 무리없이 사용할 수 있도록 만들었다. \n\n * 사용하는 이유\n   데이터 전처리 하기 위함\n   index 1개와 column 1개 —> series\n   index 1개와 column 2개 —> dataframe\n   \n\nPandas 참고 사이트\nhttps://pandas.py","more":"<br>\n\n\n<h3 id=\"Pandas란\"><a href=\"#Pandas란\" class=\"headerlink\" title=\"Pandas란\"></a><strong>Pandas란</strong></h3><hr>\n<p>파이썬 언어로 작성된 데이터를 분석 및 조작하기 위한 소프트웨어 라이브러리이다.<br>팬더스는 R에서 사용되던 data.frame 구조를 본뜬 DataFrame이라는 구조를 사용하기 때문에,<br>R의 data.frame에서 사용하던 기능 상당수를 무리없이 사용할 수 있도록 만들었다. </p>\n<ul>\n<li>사용하는 이유<br>데이터 전처리 하기 위함<br>index 1개와 column 1개 —&gt; series<br>index 1개와 column 2개 —&gt; dataframe<br></li>\n</ul>\n<p>Pandas 참고 사이트<br><a href=\"https://pandas.pydata.org/docs/reference/index.html\">https://pandas.pydata.org/docs/reference/index.html</a><br><br></p>\n<h3 id=\"라이브러리-불러오기\"><a href=\"#라이브러리-불러오기\" class=\"headerlink\" title=\"라이브러리 불러오기\"></a><strong>라이브러리 불러오기</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"built_in\">print</span>(pd.__version__)</span><br></pre></td></tr></table></figure>\n\n<pre><code>1.1.5\n</code></pre>\n<br>\n\n<h3 id=\"테스트\"><a href=\"#테스트\" class=\"headerlink\" title=\"테스트\"></a><strong>테스트</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df = pd.DataFrame(&#123;<span class=\"string\">&#x27;col1&#x27;</span>: [<span class=\"number\">1</span>,<span class=\"number\">2</span>], <span class=\"string\">&#x27;col2&#x27;</span>: [<span class=\"number\">3</span>,<span class=\"number\">4</span>]&#125;)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(df))</span><br></pre></td></tr></table></figure>\n\n<pre><code>&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;\n</code></pre>\n<br>\n\n<h3 id=\"구글-드라이브-연동-colab이랑-연결\"><a href=\"#구글-드라이브-연동-colab이랑-연결\" class=\"headerlink\" title=\"구글 드라이브 연동 (colab이랑 연결)\"></a><strong>구글 드라이브 연동 (colab이랑 연결)</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> google.colab <span class=\"keyword\">import</span> drive</span><br><span class=\"line\">drive.mount(<span class=\"string\">&#x27;/content/drive&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<pre><code>Mounted at /content/drive\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DATA_PATH = <span class=\"string\">&quot;경로를 입력하시기를 바랍니다.&quot;</span></span><br><span class=\"line\">DATA_PATH = <span class=\"string\">&#x27;/content/drive/MyDrive/Colab Notebooks/lectures_211101/PART_I_Intro/data&#x27;</span></span><br><span class=\"line\">lemonade = pd.read_csv(DATA_PATH + <span class=\"string\">&#x27;/Lemonade2016.csv&#x27;</span>)</span><br><span class=\"line\">lemonade.info()</span><br></pre></td></tr></table></figure>\n\n<pre><code>&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;\nRangeIndex: 32 entries, 0 to 31\nData columns (total 7 columns):\n #   Column       Non-Null Count  Dtype  \n---  ------       --------------  -----  \n 0   Date         31 non-null     object \n 1   Location     32 non-null     object \n 2   Lemon        32 non-null     int64  \n 3   Orange       32 non-null     int64  \n 4   Temperature  32 non-null     int64  \n 5   Leaflets     31 non-null     float64\n 6   Price        32 non-null     float64\ndtypes: float64(2), int64(3), object(2)\nmemory usage: 1.9+ KB\n</code></pre>\n<h3 id=\"데이터-둘러보기\"><a href=\"#데이터-둘러보기\" class=\"headerlink\" title=\"데이터 둘러보기\"></a><strong>데이터 둘러보기</strong></h3><hr>\n<p>(lemonade 파일은 가게 포스기라고 생각하자)</p>\n<p><strong>- head</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#상위 5개 행 출력</span></span><br><span class=\"line\"><span class=\"comment\">#0부터 4까지 행 출력</span></span><br><span class=\"line\">lemonade.head(<span class=\"number\">5</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n<pre><code>.dataframe tbody tr th &#123;\n    vertical-align: top;\n&#125;\n\n.dataframe thead th &#123;\n    text-align: right;\n&#125;\n</code></pre>\n<p></style></p>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Date</th>\n      <th>Location</th>\n      <th>Lemon</th>\n      <th>Orange</th>\n      <th>Temperature</th>\n      <th>Leaflets</th>\n      <th>Price</th>\n      <th>Sold</th>\n      <th>Revenue</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>7/1/2016</td>\n      <td>Park</td>\n      <td>97</td>\n      <td>67</td>\n      <td>70</td>\n      <td>90.0</td>\n      <td>0.25</td>\n      <td>164</td>\n      <td>41.00</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>7/2/2016</td>\n      <td>Park</td>\n      <td>98</td>\n      <td>67</td>\n      <td>72</td>\n      <td>90.0</td>\n      <td>0.25</td>\n      <td>165</td>\n      <td>41.25</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>7/3/2016</td>\n      <td>Park</td>\n      <td>110</td>\n      <td>77</td>\n      <td>71</td>\n      <td>104.0</td>\n      <td>0.25</td>\n      <td>187</td>\n      <td>46.75</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>7/4/2016</td>\n      <td>Beach</td>\n      <td>134</td>\n      <td>99</td>\n      <td>76</td>\n      <td>98.0</td>\n      <td>0.25</td>\n      <td>233</td>\n      <td>58.25</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>7/5/2016</td>\n      <td>Beach</td>\n      <td>159</td>\n      <td>118</td>\n      <td>78</td>\n      <td>135.0</td>\n      <td>0.25</td>\n      <td>277</td>\n      <td>69.25</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n<br>\n\n<p><strong>- tail</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#끝에 3개 행 출력</span></span><br><span class=\"line\">lemonade.tail(<span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n<pre><code>.dataframe tbody tr th &#123;\n    vertical-align: top;\n&#125;\n\n.dataframe thead th &#123;\n    text-align: right;\n&#125;\n</code></pre>\n<p></style></p>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Date</th>\n      <th>Location</th>\n      <th>Lemon</th>\n      <th>Orange</th>\n      <th>Temperature</th>\n      <th>Leaflets</th>\n      <th>Price</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>29</th>\n      <td>7/29/2016</td>\n      <td>Park</td>\n      <td>100</td>\n      <td>66</td>\n      <td>81</td>\n      <td>95.0</td>\n      <td>0.35</td>\n    </tr>\n    <tr>\n      <th>30</th>\n      <td>7/30/2016</td>\n      <td>Beach</td>\n      <td>88</td>\n      <td>57</td>\n      <td>82</td>\n      <td>81.0</td>\n      <td>0.35</td>\n    </tr>\n    <tr>\n      <th>31</th>\n      <td>7/31/2016</td>\n      <td>Beach</td>\n      <td>76</td>\n      <td>47</td>\n      <td>82</td>\n      <td>68.0</td>\n      <td>0.35</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n<br>\n\n<p><strong>- info() 메소드</strong><br>데이터에 대한 전반적인 정보<br>df를 구성하는 행과 열의 크기, 컬럼명, 컬럼을 구성하는 자료형을 출력</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(lemonade.info())</span><br></pre></td></tr></table></figure>\n\n<pre><code>&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;\nRangeIndex: 32 entries, 0 to 31\nData columns (total 7 columns):\n #   Column       Non-Null Count  Dtype  \n---  ------       --------------  -----  \n 0   Date         31 non-null     object \n 1   Location     32 non-null     object \n 2   Lemon        32 non-null     int64  \n 3   Orange       32 non-null     int64  \n 4   Temperature  32 non-null     int64  \n 5   Leaflets     31 non-null     float64\n 6   Price        32 non-null     float64\ndtypes: float64(2), int64(3), object(2)\nmemory usage: 1.9+ KB\nNone\n</code></pre>\n<br> \n\n<p><strong>- describe() 메소드</strong><br>다양한 통계량을 요약해주는 메소드</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lemonade.describe()</span><br></pre></td></tr></table></figure>\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n<pre><code>.dataframe tbody tr th &#123;\n    vertical-align: top;\n&#125;\n\n.dataframe thead th &#123;\n    text-align: right;\n&#125;\n</code></pre>\n<p></style></p>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Lemon</th>\n      <th>Orange</th>\n      <th>Temperature</th>\n      <th>Leaflets</th>\n      <th>Price</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>32.000000</td>\n      <td>32.000000</td>\n      <td>32.000000</td>\n      <td>31.000000</td>\n      <td>32.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>116.156250</td>\n      <td>80.000000</td>\n      <td>78.968750</td>\n      <td>108.548387</td>\n      <td>0.354687</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>25.823357</td>\n      <td>21.863211</td>\n      <td>4.067847</td>\n      <td>20.117718</td>\n      <td>0.113137</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>71.000000</td>\n      <td>42.000000</td>\n      <td>70.000000</td>\n      <td>68.000000</td>\n      <td>0.250000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>98.000000</td>\n      <td>66.750000</td>\n      <td>77.000000</td>\n      <td>90.000000</td>\n      <td>0.250000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>113.500000</td>\n      <td>76.500000</td>\n      <td>80.500000</td>\n      <td>108.000000</td>\n      <td>0.350000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>131.750000</td>\n      <td>95.000000</td>\n      <td>82.000000</td>\n      <td>124.000000</td>\n      <td>0.500000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>176.000000</td>\n      <td>129.000000</td>\n      <td>84.000000</td>\n      <td>158.000000</td>\n      <td>0.500000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n<br>\n\n<p><strong>- .value_counts() 메소드</strong><br>개별 컬럼 내에 각각의 값이 나온 횟수를 셀 수 있다</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lemonade[<span class=\"string\">&#x27;Location&#x27;</span>].value_counts()</span><br></pre></td></tr></table></figure>\n\n\n\n\n<pre><code>Beach    17\nPark     15\nName: Location, dtype: int64\n</code></pre>\n<br> \n\n<h3 id=\"데이터-다뤄보기\"><a href=\"#데이터-다뤄보기\" class=\"headerlink\" title=\"데이터 다뤄보기\"></a><strong>데이터 다뤄보기</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#Sold라는 컬럼을 만들고 값을 0으로 지정</span></span><br><span class=\"line\">lemonade[<span class=\"string\">&#x27;Sold&#x27;</span>] = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(lemonade.head(<span class=\"number\">3</span>))</span><br></pre></td></tr></table></figure>\n\n<pre><code>       Date Location  Lemon  Orange  Temperature  Leaflets  Price  Sold\n0  7/1/2016     Park     97      67           70      90.0   0.25     0\n1  7/2/2016     Park     98      67           72      90.0   0.25     0\n2  7/3/2016     Park    110      77           71     104.0   0.25     0\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lemonade[<span class=\"string\">&#x27;Sold&#x27;</span>] = lemonade[<span class=\"string\">&#x27;Lemon&#x27;</span>] + lemonade[<span class=\"string\">&#x27;Orange&#x27;</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(lemonade.head(<span class=\"number\">3</span>))</span><br></pre></td></tr></table></figure>\n\n<pre><code>       Date Location  Lemon  Orange  Temperature  Leaflets  Price  Sold\n0  7/1/2016     Park     97      67           70      90.0   0.25   164\n1  7/2/2016     Park     98      67           72      90.0   0.25   165\n2  7/3/2016     Park    110      77           71     104.0   0.25   187\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lemonade[<span class=\"string\">&#x27;Revenue&#x27;</span>] = lemonade[<span class=\"string\">&#x27;Price&#x27;</span>]*lemonade[<span class=\"string\">&#x27;Sold&#x27;</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(lemonade.head(<span class=\"number\">3</span>))</span><br></pre></td></tr></table></figure>\n\n<pre><code>       Date Location  Lemon  Orange  ...  Leaflets  Price  Sold  Revenue\n0  7/1/2016     Park     97      67  ...      90.0   0.25   164    41.00\n1  7/2/2016     Park     98      67  ...      90.0   0.25   165    41.25\n2  7/3/2016     Park    110      77  ...     104.0   0.25   187    46.75\n\n[3 rows x 9 columns]\n</code></pre>\n<br>\n\n<dl><dt><strong>- Out으로 출력하는 최대 칼럼의 개수</strong></dt><dd>display.max_columns</dd></dl><dl><dt><strong>- 옵션 설정</strong></dt><dd>pd.set_option()</dd></dl><dl><dt><strong>- pd.set_option(‘display.max_columns’,None)</strong></dt><dd>열 전체를 출력한다는 의미</dd></dl><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pd.set_option(<span class=\"string\">&#x27;display.max_columns&#x27;</span>,<span class=\"literal\">None</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">lemonade[<span class=\"string\">&#x27;Revenue&#x27;</span>] = lemonade[<span class=\"string\">&#x27;Price&#x27;</span>] * lemonade[<span class=\"string\">&#x27;Sold&#x27;</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(lemonade.head(<span class=\"number\">3</span>))</span><br></pre></td></tr></table></figure>\n\n<pre><code>       Date Location  Lemon  Orange  Temperature  Leaflets  Price  Sold  \\\n0  7/1/2016     Park     97      67           70      90.0   0.25   164   \n1  7/2/2016     Park     98      67           72      90.0   0.25   165   \n2  7/3/2016     Park    110      77           71     104.0   0.25   187   \n\n   Revenue  \n0    41.00  \n1    41.25  \n2    46.75  \n</code></pre>\n<br> \n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pd.set_option(<span class=\"string\">&#x27;display.max_columns&#x27;</span>,<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">lemonade[<span class=\"string\">&#x27;Revenue&#x27;</span>]= lemonade[<span class=\"string\">&#x27;Price&#x27;</span>] * lemonade[<span class=\"string\">&#x27;Sold&#x27;</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(lemonade.head(<span class=\"number\">3</span>))</span><br></pre></td></tr></table></figure>\n\n<pre><code>       Date Location  Lemon  Orange  ...  Leaflets  Price  Sold  Revenue\n0  7/1/2016     Park     97      67  ...      90.0   0.25   164    41.00\n1  7/2/2016     Park     98      67  ...      90.0   0.25   165    41.25\n2  7/3/2016     Park    110      77  ...     104.0   0.25   187    46.75\n\n[3 rows x 9 columns]\n</code></pre>\n<br> \n\n<p>axis=1은 열방향으로 동작 -&gt; columns<br>axis=0은 행방향으로 동작 -&gt; index</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#Sold column(열)을 삭제</span></span><br><span class=\"line\">lemonade_column_drop = lemonade.drop(<span class=\"string\">&#x27;Sold&#x27;</span>, axis=<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(lemonade_column_drop.head(<span class=\"number\">3</span>))</span><br></pre></td></tr></table></figure>\n\n<pre><code>       Date Location  Lemon  Orange  Temperature  Leaflets  Price  Revenue\n0  7/1/2016     Park     97      67           70      90.0   0.25    41.00\n1  7/2/2016     Park     98      67           72      90.0   0.25    41.25\n2  7/3/2016     Park    110      77           71     104.0   0.25    46.75\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#0번 행 삭제</span></span><br><span class=\"line\">lemonade_row_drop = lemonade_column_drop.drop(<span class=\"number\">0</span>, axis=<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(lemonade_row_drop.head(<span class=\"number\">3</span>))</span><br></pre></td></tr></table></figure>\n\n<pre><code>       Date Location  Lemon  Orange  Temperature  Leaflets  Price  Revenue\n1  7/2/2016     Park     98      67           72      90.0   0.25    41.25\n2  7/3/2016     Park    110      77           71     104.0   0.25    46.75\n3  7/4/2016    Beach    134      99           76      98.0   0.25    58.25\n</code></pre>\n<br>\n\n<h3 id=\"데이터-인덱싱\"><a href=\"#데이터-인덱싱\" class=\"headerlink\" title=\"데이터 인덱싱\"></a><strong>데이터 인덱싱</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 0번부터 4번까지 행 출력</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(lemonade[<span class=\"number\">0</span>:<span class=\"number\">5</span>])</span><br></pre></td></tr></table></figure>\n\n<pre><code>       Date Location  Lemon  Orange  Temperature  Leaflets  Price  Sold  \\\n0  7/1/2016     Park     97      67           70      90.0   0.25   164   \n1  7/2/2016     Park     98      67           72      90.0   0.25   165   \n2  7/3/2016     Park    110      77           71     104.0   0.25   187   \n3  7/4/2016    Beach    134      99           76      98.0   0.25   233   \n4  7/5/2016    Beach    159     118           78     135.0   0.25   277   \n\n   Revenue  \n0    41.00  \n1    41.25  \n2    46.75  \n3    58.25  \n4    69.25  \n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lemonade[<span class=\"string\">&#x27;Location&#x27;</span>] == <span class=\"string\">&#x27;Beach&#x27;</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n<pre><code>0     False\n1     False\n2     False\n3      True\n4      True\n5      True\n6      True\n7      True\n8      True\n9      True\n10     True\n11     True\n12     True\n13     True\n14     True\n15     True\n16     True\n17     True\n18    False\n19    False\n20    False\n21    False\n22    False\n23    False\n24    False\n25    False\n26    False\n27    False\n28    False\n29    False\n30     True\n31     True\nName: Location, dtype: bool\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#true값만 반환</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(lemonade[lemonade[<span class=\"string\">&#x27;Location&#x27;</span>] == <span class=\"string\">&#x27;Beach&#x27;</span>].head(<span class=\"number\">3</span>))</span><br></pre></td></tr></table></figure>\n\n<pre><code>       Date Location  Lemon  Orange  Temperature  Leaflets  Price  Sold  \\\n3  7/4/2016    Beach    134      99           76      98.0   0.25   233   \n4  7/5/2016    Beach    159     118           78     135.0   0.25   277   \n5  7/6/2016    Beach    103      69           82      90.0   0.25   172   \n\n   Revenue  \n3    58.25  \n4    69.25  \n5    43.00  \n</code></pre>\n<br>\niloc (integer-location based): 행 번호로 선택하는 방법 <br>\nloc (Labels): 조건 표현으로 선택함 <br>\n<br>\n\n<p>ex) <br><br>df.loc[[행],[열]]<br>df.iloc[[행],[열]]<br>행, 열 조건은 똑같다</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(lemonade.iloc[<span class=\"number\">0</span>:<span class=\"number\">3</span>, <span class=\"number\">0</span>:<span class=\"number\">2</span>])    <span class=\"comment\">#첫 3개 행과 0,1,2번째 행 출력하기</span></span><br></pre></td></tr></table></figure>\n\n<pre><code>       Date Location\n0  7/1/2016     Park\n1  7/2/2016     Park\n2  7/3/2016     Park\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(lemonade.loc[<span class=\"number\">0</span>:<span class=\"number\">2</span>, [<span class=\"string\">&#x27;Date&#x27;</span>,<span class=\"string\">&#x27;Location&#x27;</span>]])   <span class=\"comment\">#열 </span></span><br></pre></td></tr></table></figure>\n\n<pre><code>       Date Location\n0  7/1/2016     Park\n1  7/2/2016     Park\n2  7/3/2016     Park\n</code></pre>\n<br>\n\n<h3 id=\"기본-데이터-전처리\"><a href=\"#기본-데이터-전처리\" class=\"headerlink\" title=\"기본 데이터 전처리\"></a><strong>기본 데이터 전처리</strong></h3><hr>\n<p><strong>- sort_values()</strong><br>by 옵션에 기준으로 데이터를 정렬</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(lemonade.sort_values(by=[<span class=\"string\">&#x27;Temperature&#x27;</span>]).head(<span class=\"number\">5</span>))</span><br></pre></td></tr></table></figure>\n\n<pre><code>         Date Location  Lemon  Orange  Temperature  Leaflets  Price  Sold\n0    7/1/2016     Park     97      67           70      90.0   0.25     0\n20  7/20/2016     Park     71      42           70       NaN   0.50     0\n2    7/3/2016     Park    110      77           71     104.0   0.25     0\n1    7/2/2016     Park     98      67           72      90.0   0.25     0\n16  7/16/2016    Beach     81      50           74      90.0   0.50     0\n</code></pre>\n<br>\n \n<p><strong>- Groupby()</strong><br>전체 데이터를 그룹별로 분할하여<br>mean(), sum(), count()와 같은 메소드를 사용해 연산하고<br>연산 결과를 다시 합치는 과정을 거친다</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(lemonade.groupby(by=<span class=\"string\">&#x27;Location&#x27;</span>).count())</span><br></pre></td></tr></table></figure>\n\n<pre><code>          Date  Lemon  Orange  Temperature  Leaflets  Price  Sold\nLocation                                                         \nBeach       16     17      17           17        17     17    17\nPark        15     15      15           15        14     15    15\n</code></pre>\n<br>\n<br>\n<br>"},{"title":"Python 데이터 시각화","date":"2021-11-02T15:00:00.000Z","toc":true,"_content":"<br>\n<br>\n\n\n### **Matplotlib.pyplot란**\n---\nMatplotlib는 데이터를 시각화 하는데 사용하는 대표적인 파이썬 라이브러리이다.\nMATLAB과 비슷한 형태를 가지고 있고, numpy나 pandas에서 사용되는 자료구조를 쉽게 시각화 할 수 있다.\n<br>\n\n### **시작하기**\n---\n- import matplotlib.pyplot as plt\n라이브러리 사용하기 위한 import문 추가 (plt라는 이름으로 사용)\n\n- fig, ax = plt.subplots()\nfig는 그림, ax는 그려질 그래프를 의미\n괄호 안에는 그래프 크기를 정의 할 수 있음\n\n- ax.plot(dates, min_temperature, label = \"Min Temp\")     \n- ax.plot(dates, max_temperature, label = \"Max Temp\")\n두개의 그래프를 의미\n\n- ax.legend() \n범례를 추가할때 사용하는 메소드\n그래프에 데이터 위치 표시 (예제에서는 왼쪽 맨위에 표시)\n\n- plt.show()  \n마무리 \n\n```python\nimport matplotlib.pyplot as plt\n\ndates = [\n    '2021\\n01-01', '2021\\n01-02', '2021\\n01-03', '2021\\n01-04', '2021\\n01-05',\n    '2021\\n01-06', '2021\\n01-07', '2021\\n01-08', '2021\\n01-09', '2021\\n01-10'\n]\nmin_temperature = [20.7, 17.9, 18.8, 14.6, 15.8, 15.8, 15.8, 17.4, 21.8, 20.0]\nmax_temperature = [34.7, 28.9, 31.8, 25.6, 28.8, 21.8, 22.8, 28.4, 30.8, 32.0]\n\nfig, ax = plt.subplots()  #그래프 생성  ()안에 사이즈 설정 가능\nax.plot(dates, min_temperature, label = \"Min Temp\")     \nax.plot(dates, max_temperature, label = \"Max Temp\")\nax.legend()   \nplt.show()    #마무리! 꼭 해주기!\n```\n\n\n    \n![](/images/0205/output_1_0.png)\n    \n\n\n\n```python\nimport matplotlib.pyplot as plt\n\ndates = [\n    '2021\\n01-01', '2021\\n01-02', '2021\\n01-03', '2021\\n01-04', '2021\\n01-05',\n    '2021\\n01-06', '2021\\n01-07', '2021\\n01-08', '2021\\n01-09', '2021\\n01-10'\n]\nmin_temperature = [20.7, 17.9, 18.8, 14.6, 15.8, 15.8, 15.8, 17.4, 21.8, 20.0]\nmax_temperature = [34.7, 28.9, 31.8, 25.6, 28.8, 21.8, 22.8, 28.4, 30.8, 32.0]\n\nfig, axes = plt.subplots(nrows=1, ncols=1, figsize=(10,6)) #그래프 사이즈\naxes.plot(dates, min_temperature, label = 'Min Temperature')\naxes.plot(dates, max_temperature, label = 'Max Temperature')\naxes.legend()\nplt.show()\n```\n\n\n    \n![](/images/0205/output_2_0.png)\n    \n\n\n\n```python\nprint(fig)\nprint(axes)\n```\n\n    Figure(720x432)\n    AxesSubplot(0.125,0.125;0.775x0.755)\n    \n\n<br>\n\n### **선 그래프**\n---\n**방법 1. Pyplot API**(비추천)\n- 참조: https://pypi.org/project/fix-yahoo-finance/\n\n- yfinance란 \n오픈소스 API로, Yahoo Finance에서 제공하는 데이터에 접근 할 수 있다.\n아래 예제에서는 주가 데이터를 받아 오기 위해서 사용하였다.\n\n- yfinance 함수를 사용하기 위한 패키지 다운로드\n\n```python\n!pip install yfinance --upgrade --no-cache-dir\n```\n\n```python\n#주가 정보 가져오기\nimport yfinance as yf\ndata = yf.download('AAPL', '2019-08-01', '2020-08-01')\ndata.info()\n```\n\n    [*********************100%***********************]  1 of 1 completed\n    <class 'pandas.core.frame.DataFrame'>\n    DatetimeIndex: 253 entries, 2019-08-01 to 2020-07-31\n    Data columns (total 6 columns):\n     #   Column     Non-Null Count  Dtype  \n    ---  ------     --------------  -----  \n     0   Open       253 non-null    float64\n     1   High       253 non-null    float64\n     2   Low        253 non-null    float64\n     3   Close      253 non-null    float64\n     4   Adj Close  253 non-null    float64\n     5   Volume     253 non-null    int64  \n    dtypes: float64(5), int64(1)\n    memory usage: 13.8 KB\n    \n\n\n```python\nts = data['Open']\nprint(ts.head())\n```\n\n    Date\n    2019-08-01    53.474998\n    2019-08-02    51.382500\n    2019-08-05    49.497501\n    2019-08-06    49.077499\n    2019-08-07    48.852501\n    Name: Open, dtype: float64\n    \n<br>\n\n**- plt.legend(loc='best')**\n범례 위치를 best로 설정\nbest는 디폴트 값을 의미\n\n```python\ndata = yf.download('AAPL', '2019-08-01', '2020-08-01')\nts = data['Open']\nplt.figure(figsize=(10,6))\nplt.plot(ts)\nplt.legend(labels=['Price'], loc='best')\nplt.title('Stock Market fluctuation of AAPL') \nplt.xlabel('Date') \nplt.ylabel('Stock Market Open Price') \nplt.show()\n```\n\n    [*********************100%***********************]  1 of 1 completed\n    \n\n\n    \n![](/images/0205/output_10_1.png)\n    \n<br>\n\n**방법2. 객체 지향 API**\n- 먼저 컴퓨터 프로그램에서의 랜덤값은 무작위 수가 아니라,\n특정 시작 숫자값을 정해주면 정해진 알고리즘에 따라 마치 난수처럼 보이는 수열을 생성하는 것이다.\n이때 특정 시작 숫자가 바로 **시드(seed)**이다\n- 시드 값은 현재 시각 등을 이용해 자동으로 정하기도 하지만,\n사람이 수동으로 설정 할 수도 있다\n- 따라서 특정 시드값이 사용될 경우 이후에 발생되는 난수를 알고리즘에 따라 직접 예측이 가능하다\n\n<br>\n\n- np.random.random(20000)\nnumpy를 이용해서 20000개의 난수를 생성한다\n- random.seed()\nseed 설정, 괄호 안에 0이상의 정수 값을 넣어주면 된다\n- fig = Figure()\nfigure 객체 생성\n- savefig('파일이름') \n그래프를 이미지 파일로 저장할 수 있다\n- ax = fig.add_subplot(111)\n- ax.hist(x, 100)\n이거 모르게따@_2\n```python\nfrom matplotlib.backends.backend_agg import FigureCanvasAgg as FigureCanvas\nfrom matplotlib.figure import Figure\nimport matplotlib.pyplot as plt\n\nfig = Figure()\n\nimport numpy as np\nnp.random.seed(6)\nx = np.random.random(20000)\n\nax = fig.add_subplot(111)\nax.hist(x, 100)\nax.set_title('Artist Layer Histogram')\n#fig.savefig('Matplotlib_histogram.png')\nplt.show()\n```\n\n방법3 Pyplot API + 객체지향 API\n\n\n```python\ndata = yf.download('AAPL','2019-08-01','2020-08-01')\nts = data['Open']\n\nfig, ax = plt.subplots(figsize=(10,6)) \nax.plot(ts)\nax.set_title('Stock Market fluctuation of AAPL')\nax.set_xlabel('Date')\nax.set_ylabel('Stock Market Open Price')\nplt.show()\n```\n\n    [*********************100%***********************]  1 of 1 completed\n    \n\n\n    \n![](/images/0205/output_14_1.png)\n    \n\n\n### **막대그래프**\n\n- Tick 이란 \n그래프의 축에 간격을 구분하기 위해 표시하는 눈금이다\nex) xticks(), yticks()\n```python\nimport numpy as np\nimport calendar\n\nmonth_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nsold_list = [300, 400, 550, 900, 600, 960, 900, 910, 800, 700, 550, 450]\n\nfig, ax = plt.subplots(figsize=(10,6))\nplt.xticks(month_list, calendar.month_name[1:13], rotation=90)\nplot = ax.bar(month_list, sold_list)\n\nfor rect in plot:\n  print(\"graph:\", rect) \n  height = rect.get_height()\n  ax.text(rect.get_x() + rect.get_width()/2., 1.002*height,'%d' % int(height), ha='center', va='bottom')\n\nplt.show()\n```\n\n    graph: Rectangle(xy=(0.6, 0), width=0.8, height=300, angle=0)\n    graph: Rectangle(xy=(1.6, 0), width=0.8, height=400, angle=0)\n    graph: Rectangle(xy=(2.6, 0), width=0.8, height=550, angle=0)\n    graph: Rectangle(xy=(3.6, 0), width=0.8, height=900, angle=0)\n    graph: Rectangle(xy=(4.6, 0), width=0.8, height=600, angle=0)\n    graph: Rectangle(xy=(5.6, 0), width=0.8, height=960, angle=0)\n    graph: Rectangle(xy=(6.6, 0), width=0.8, height=900, angle=0)\n    graph: Rectangle(xy=(7.6, 0), width=0.8, height=910, angle=0)\n    graph: Rectangle(xy=(8.6, 0), width=0.8, height=800, angle=0)\n    graph: Rectangle(xy=(9.6, 0), width=0.8, height=700, angle=0)\n    graph: Rectangle(xy=(10.6, 0), width=0.8, height=550, angle=0)\n    graph: Rectangle(xy=(11.6, 0), width=0.8, height=450, angle=0)\n    \n\n\n    \n![](/images/0205/output_16_1.png)\n    \n\n\n선점도 그래프\n- 두개의 연속형 변수 (키, 몸무게)\n- 상관관계 != 인과관계\n\n\n```python\n#내장 데이터\nimport seaborn as sns\n\ntips = sns.load_dataset(\"tips\")\nx = tips['total_bill']\ny = tips['tip']\n\nfig, ax = plt.subplots(figsize=(10,6))\nax.scatter(x, y)\nax.set_xlabel('Totla Bill')\nax.set_ylabel('Tip')\nax.set_title('Tip ~ Total Bill')\n\nfig.show()\n```\n\n\n    \n![png](/images/0205/output_18_0.png)\n    \n\n\n\n```python\nlabel, data = tips.groupby('sex')\ntips['sex_color'] = tips['sex'].map({\"Female\" : '#0000FF',\"Male\" : \"#00FF00\"})\n\nfig, ax = plt.subplots(figsize=(10,6))\n\nfor label, data in tips.groupby('sex'):\n  ax.scatter(data['total_bill'], data['tip'], label=label, color=data['sex_color'], alpha=0.5)\n  \n  ax.set_xlabel('Total Bill')\n  ax.set_ylabel('Tip')\n  ax.set_title('Tip ~ Total Bill by Gender')\n\nax.legend()\nfig.show()\n```\n\n\n    \n![png](/images/0205/output_19_0.png)\n    \n\n\n히스토그램\n\n수치형 변수\n\n\n```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\n\ntitanic = sns.load_dataset('titanic')\nage = titanic['age']\n\nnbins = 21\nfig, ax = plt.subplots(figsize=(10,6))\nax.hist(age, bins = nbins)\nax.set_xlabel(\"Age\")\nax.set_ylabel(\"Frequency\")\nax.set_title(\"Distribution of Aae in  Titanic\")\nax.axvline(x = age.mean(),linewidth = 2, color = 'r')\nfig.show()\n```\n\n\n    \n![png](/images/0205/output_22_0.png)\n    \n\n\n박스 플롯\n\n- x축 변수: 범주형 변수, 그룹과 관련있는 변수, 문자열\n- y축 변수: 수치형 변수\n\n\n```python\niris = sns.load_dataset('iris')\n\ndata = [iris[iris['species']==\"setosa\"]['petal_width'],\n        iris[iris['species']==\"versicolor\"]['petal_width'],\n        iris[iris['species']==\"virginica\"]['petal_width']]\n\nfig, ax = plt.subplots(figsize=(10, 6))\nax.boxplot(data, labels=['setosa', 'versicolor', 'virginica'])\n\nfig.show()\n```\n\n\n    \n![png](/images/0205/output_25_0.png)\n    \n\n\n히트맵\n\n\n```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\n\nflights = sns.load_dataset(\"flights\")     #내장 데이터\nflights = flights.pivot(\"month\", \"year\",\"passengers\")\n\nfig, ax = plt.subplots(figsize = (12,6))\n\nim = ax.imshow(flights, cmap = 'YlGnBu') #cmap은 colormap, YlGnBu은 색상\n\nax.set_xticklabels(flights.columns, rotation = 20)\nax.set_yticklabels(flights.index, rotation = 10)\nfig.colorbar(im)\n\nfig.show()\n```\n\n\n    \n![png](/images/0205/output_27_0.png)\n    \n\n\nSeaborn\n\n산점도와 회귀선이 있는 산점도\n\n\n```python\n%matplotlib inline \n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\ntips = sns.load_dataset(\"tips\")\n#print(tips)\nsns.scatterplot(x = \"total_bill\", y = \"tip\", data = tips)\nplt.show()\n```\n\n\n    \n![png](/images/0205/output_30_0.png)\n    \n\n- fig, ax = plt.subplots(ncols=2)\n세로로 2개의 그래프를 그림\nnrows=2이면 가로로 그래프를 2개 그림\nnrows=2, nols=3이면 2행 3열로 그래프를 그림\n- \n```python\nfig, ax = plt.subplots(nrows = 1, ncols = 2, figsize=(15, 5))  #이런식으로 그래프 그리는방법을 각인시키기\nsns.regplot(x = \"total_bill\", \n            y = \"tip\", \n            data = tips, \n            ax = ax[0], \n            fit_reg = True)\n\nsns.regplot(x = \"total_bill\", \n            y = \"tip\", \n            data = tips, \n            ax = ax[1], \n            fit_reg = False)\n\nplt.show()\n```\n\n\n    \n![png](/images/0205/output_31_0.png)\n    \n\n\n히스토그램/커널 밀도 그래프\n\n\n```python\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\ntips = sns.load_dataset(\"tips\")   # 이렇게 하지 말깅!\nsns.displot(x = \"tip\", data = tips)\nplt.figure(figsize=(10,6))\nplt.show()\n```\n\n\n    \n![png](/images/0205/output_33_0.png)\n    \n\n\n\n    <Figure size 720x432 with 0 Axes>\n\n\n\n```python\nsns.displot(x=\"tip\",kind =\"kde\", data=tips)\nplt.show()\n```\n\n\n    \n![png](/images/0205/output_34_0.png)\n    \n\n\n\n```python\nsns.displot(x=\"tip\",kde=True, data=tips)\nplt.show()\n```\n\n\n    \n![png](/images/0205/output_35_0.png)\n    \n\n\n박스플롯\n\n\n```python\nsns.boxplot(x = \"day\", y = \"total_bill\", data =tips)\nsns.swarmplot(x = \"day\", y = \"total_bill\", data = tips, alpha= .25)\n```\n\n\n\n\n    <matplotlib.axes._subplots.AxesSubplot at 0x7face917d410>\n\n\n\n\n    \n![png](/images/0205/output_37_1.png)\n    \n\n\n막대 그래프\n\n\n```python\nsns.countplot (x=\"day\", data = tips)\nplt.show()\n```\n\n\n    \n![png](/images/0205/output_39_0.png)\n    \n\n\n\n```python\nprint(tips['day'].value_counts())\nprint(\"index: \", tips['day'].value_counts().index)\nprint(\"values: \", tips['day'].value_counts().values)\n```\n\n    Sat     87\n    Sun     76\n    Thur    62\n    Fri     19\n    Name: day, dtype: int64\n    index:  CategoricalIndex(['Sat', 'Sun', 'Thur', 'Fri'], categories=['Thur', 'Fri', 'Sat', 'Sun'], ordered=False, dtype='category')\n    values:  [87 76 62 19]\n    \n\n\n```python\nprint(tips['day'].value_counts(ascending=True))\n```\n\n    Fri     19\n    Thur    62\n    Sun     76\n    Sat     87\n    Name: day, dtype: int64\n    \n\n\n```python\nplt.show()\n```\n\n\n```python\nax = sns.countplot(x = \"day\", data = tips, order = tips['day'].value_counts().index)\nfor p in ax.patches:\n  height = p.get_height()\n  ax.text(p.get_x() + p.get_width()/2., height+3, height, ha = 'center', size=9)\nax.set_ylim(-5, 100)\nplt.show()\n```\n\n\n    \n![png](/images/0205/output_43_0.png)\n    \n\n\n\n```python\nax = sns.countplot(x = \"day\", data = tips, hue = \"sex\", dodge = True,\n              order = tips['day'].value_counts().index)\nfor p in ax.patches:\n  height = p.get_height()\n  ax.text(p.get_x() + p.get_width()/2., height+3, height, ha = 'center', size=9)\nax.set_ylim(-5, 100)\n\nplt.show()\n```\n\n\n    \n![png](/images/0205/output_44_0.png)\n    \n\n\n상관관계 그래프\n\n\n```python\nimport pandas as pd \nimport numpy as np \nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nmpg = sns.load_dataset(\"mpg\")\nprint(mpg.shape) # 398 행, 9개 열\n\nnum_mpg = mpg.select_dtypes(include = np.number)\nprint(num_mpg.shape) # 398 행, 7개 열\n```\n\n    (398, 9)\n    (398, 7)\n    \n\n\n```python\nnum_mpg.info()\n```\n\n    <class 'pandas.core.frame.DataFrame'>\n    RangeIndex: 398 entries, 0 to 397\n    Data columns (total 7 columns):\n     #   Column        Non-Null Count  Dtype  \n    ---  ------        --------------  -----  \n     0   mpg           398 non-null    float64\n     1   cylinders     398 non-null    int64  \n     2   displacement  398 non-null    float64\n     3   horsepower    392 non-null    float64\n     4   weight        398 non-null    int64  \n     5   acceleration  398 non-null    float64\n     6   model_year    398 non-null    int64  \n    dtypes: float64(4), int64(3)\n    memory usage: 21.9 KB\n    \n\n\n```python\nnum_mpg.corr()\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>mpg</th>\n      <th>cylinders</th>\n      <th>displacement</th>\n      <th>horsepower</th>\n      <th>weight</th>\n      <th>acceleration</th>\n      <th>model_year</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>mpg</th>\n      <td>1.000000</td>\n      <td>-0.775396</td>\n      <td>-0.804203</td>\n      <td>-0.778427</td>\n      <td>-0.831741</td>\n      <td>0.420289</td>\n      <td>0.579267</td>\n    </tr>\n    <tr>\n      <th>cylinders</th>\n      <td>-0.775396</td>\n      <td>1.000000</td>\n      <td>0.950721</td>\n      <td>0.842983</td>\n      <td>0.896017</td>\n      <td>-0.505419</td>\n      <td>-0.348746</td>\n    </tr>\n    <tr>\n      <th>displacement</th>\n      <td>-0.804203</td>\n      <td>0.950721</td>\n      <td>1.000000</td>\n      <td>0.897257</td>\n      <td>0.932824</td>\n      <td>-0.543684</td>\n      <td>-0.370164</td>\n    </tr>\n    <tr>\n      <th>horsepower</th>\n      <td>-0.778427</td>\n      <td>0.842983</td>\n      <td>0.897257</td>\n      <td>1.000000</td>\n      <td>0.864538</td>\n      <td>-0.689196</td>\n      <td>-0.416361</td>\n    </tr>\n    <tr>\n      <th>weight</th>\n      <td>-0.831741</td>\n      <td>0.896017</td>\n      <td>0.932824</td>\n      <td>0.864538</td>\n      <td>1.000000</td>\n      <td>-0.417457</td>\n      <td>-0.306564</td>\n    </tr>\n    <tr>\n      <th>acceleration</th>\n      <td>0.420289</td>\n      <td>-0.505419</td>\n      <td>-0.543684</td>\n      <td>-0.689196</td>\n      <td>-0.417457</td>\n      <td>1.000000</td>\n      <td>0.288137</td>\n    </tr>\n    <tr>\n      <th>model_year</th>\n      <td>0.579267</td>\n      <td>-0.348746</td>\n      <td>-0.370164</td>\n      <td>-0.416361</td>\n      <td>-0.306564</td>\n      <td>0.288137</td>\n      <td>1.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n\n```python\nfig, ax = plt.subplots(nrows = 1, ncols = 2, figsize=(16, 5))\n\n#  기본 그래프 [Basic Correlation Heatmap]\nsns.heatmap(num_mpg.corr(), ax=ax[0])\nax[0].set_title('Basic Correlation Heatmap', pad = 12)\n\n# 상관관계 수치 그래프 [Correlation Heatmap with Number]\nsns.heatmap(num_mpg.corr(), vmin=-1, vmax=1, annot=True, ax=ax[1])\nax[1].set_title('Correlation Heatmap with Number', pad = 12)\n\nplt.show()\n```\n\n\n    \n![png](/images/0205/output_49_0.png)\n    \n\n\n\n```python\nprint(int(True))\nnp.triu(np.ones_like(num_mpg.corr()))\n```\n\n    1\n    \n\n\n\n\n    array([[1., 1., 1., 1., 1., 1., 1.],\n           [0., 1., 1., 1., 1., 1., 1.],\n           [0., 0., 1., 1., 1., 1., 1.],\n           [0., 0., 0., 1., 1., 1., 1.],\n           [0., 0., 0., 0., 1., 1., 1.],\n           [0., 0., 0., 0., 0., 1., 1.],\n           [0., 0., 0., 0., 0., 0., 1.]])\n\n\n\n\n```python\nmask = np.triu(np.ones_like(num_mpg.corr(), dtype=np.bool))\nprint(mask)\n```\n\n    [[ True  True  True  True  True  True  True]\n     [False  True  True  True  True  True  True]\n     [False False  True  True  True  True  True]\n     [False False False  True  True  True  True]\n     [False False False False  True  True  True]\n     [False False False False False  True  True]\n     [False False False False False False  True]]\n    \n\n\n```python\nfig, ax = plt.subplots(figsize=(16, 5))  \n\n#  기본 그래프 [Basic Correlation Heatmap]\nax = sns.heatmap(num_mpg.corr(), mask=mask, \n                 vmin=-1, vmax = 1, \n                 annot=True, \n                 cmap=\"BrBG\", cbar = True)\nax.set_title('Triangle Correlation Heatmap', pad = 16, size = 16)\nfig.show()\n```\n\n\n    \n![png](/images/0205/output_52_0.png)\n    \n\n\nIntermediate\n\n페가 블로그 코드\n\nhttps://jehyunlee.github.io/2020/08/27/Python-DS-28-mpl_spines_grids/\n\n\n```python\nimport matplotlib.pyplot as plt\nfrom matplotlib.ticker import (MultipleLocator, AutoMinorLocator, FuncFormatter)\nimport seaborn as sns\nimport numpy as np\n```\n\n\n```python\ndef plot_example(ax, zorder=0):\n    ax.bar(tips_day[\"day\"], tips_day[\"tip\"], color=\"lightgray\", zorder=zorder)\n    ax.set_title(\"tip (mean)\", fontsize=16, pad=12)\n\n    # Values\n    h_pad = 0.1\n    for i in range(4):\n        fontweight = \"normal\"\n        color = \"k\"\n        if i == 3:\n            fontweight = \"bold\"\n            color = \"darkred\"\n\n        ax.text(i, tips_day[\"tip\"].loc[i] + h_pad, f\"{tips_day['tip'].loc[i]:0.2f}\", \n                horizontalalignment='center', fontsize=12, fontweight=fontweight, color=color)\n\n    # Sunday\n    ax.patches[3].set_facecolor(\"darkred\")\n    ax.patches[3].set_edgecolor(\"black\")\n\n    # set_range\n    ax.set_ylim(0, 4)\n    return ax\n\ndef major_formatter(x, pos):\n    return \"{%.2f}\" % x\nformatter = FuncFormatter(major_formatter)\n```\n\n\n```python\ntips = sns.load_dataset(\"tips\")\ntips_day = tips.groupby(\"day\").mean().reset_index()\nprint(tips_day)\n```\n\n        day  total_bill       tip      size\n    0  Thur   17.682742  2.771452  2.451613\n    1   Fri   17.151579  2.734737  2.105263\n    2   Sat   20.441379  2.993103  2.517241\n    3   Sun   21.410000  3.255132  2.842105\n    \n\n\n```python\nfig, ax = plt.subplots(figsize=(10, 6))\nax = plot_example(ax, zorder=2)\n```\n\n\n    \n![png](/images/0205/output_59_0.png)\n    \n\n\n\n```python\nfig, ax = plt.subplots(figsize=(10, 6))\nax = plot_example(ax, zorder=2)\n\nax.spines[\"top\"].set_visible(False)\nax.spines[\"right\"].set_visible(False)\nax.spines[\"left\"].set_visible(False)\n```\n\n\n    \n![png](/images/0205/output_60_0.png)\n    \n\n\n\n```python\nfig, ax = plt.subplots()\nax = plot_example(ax, zorder=2)\n\nax.spines[\"top\"].set_visible(False)\nax.spines[\"right\"].set_visible(False)\nax.spines[\"left\"].set_visible(False)\n\nax.yaxis.set_major_locator(MultipleLocator(1))\nax.yaxis.set_major_formatter(formatter)\nax.yaxis.set_minor_locator(MultipleLocator(0.5))\n```\n\n\n    \n![png](/images/0205/output_61_0.png)\n    \n\n\n\n```python\nfig, ax = plt.subplots()\nax = plot_example(ax, zorder=2)\n\nax.spines[\"top\"].set_visible(False)\nax.spines[\"right\"].set_visible(False)\nax.spines[\"left\"].set_visible(False)\n\nax.yaxis.set_major_locator(MultipleLocator(1))\nax.yaxis.set_major_formatter(formatter)\nax.yaxis.set_minor_locator(MultipleLocator(0.5))\n    \nax.grid(axis=\"y\", which=\"major\", color=\"lightgray\")\nax.grid(axis=\"y\", which=\"minor\", ls=\":\")\n```\n\n\n    \n![png](/images/0205/output_62_0.png)\n    \n\n\n책 코드\n\n\n```python\nimport matplotlib.pyplot as plt\nfrom matplotlib.ticker import (MultipleLocator, AutoMinorLocator, FuncFormatter)\nimport seaborn as sns\nimport numpy as np\n\ntips = sns.load_dataset(\"tips\")\nfig, ax = plt.subplots(nrows = 1, ncols = 2, figsize=(16, 5))\n\ndef major_formatter(x, pos):\n    return \"%.2f$\" % x\nformatter = FuncFormatter(major_formatter)\n\n# Ideal Bar Graph\nax0 = sns.barplot(x = \"day\", y = 'total_bill', data = tips, \n                  ci=None, color='lightgray', alpha=0.85, zorder=2, \n                  ax=ax[0])\n```\n\n\n    \n![png](/images/0205/output_64_0.png)\n    \n\n\n\n```python\ngroup_mean = tips.groupby(['day'])['total_bill'].agg('mean')\nh_day = group_mean.sort_values(ascending=False).index[0]\nh_mean = np.round(group_mean.sort_values(ascending=False)[0], 2)\nprint(\"The Best Day:\", h_day)\nprint(\"The Highest Avg. Total Biil:\", h_mean)\n```\n\n    The Best Day: Sun\n    The Highest Avg. Total Biil: 21.41\n    \n\n\n```python\ntips = sns.load_dataset(\"tips\")\nfig, ax = plt.subplots(nrows = 1, ncols = 2, figsize=(16, 5))\n\n# Ideal Bar Graph\nax0 = sns.barplot(x = \"day\", y = 'total_bill', data = tips, \n                  ci=None, color='lightgray', alpha=0.85, zorder=2, \n                  ax=ax[0])\n\ngroup_mean = tips.groupby(['day'])['total_bill'].agg('mean')\nh_day = group_mean.sort_values(ascending=False).index[0]\nh_mean = np.round(group_mean.sort_values(ascending=False)[0], 2)\nfor p in ax0.patches:\n  fontweight = \"normal\"\n  color = \"k\"\n  height = np.round(p.get_height(), 2)\n  if h_mean == height:\n    fontweight=\"bold\"\n    color=\"darkred\"\n    p.set_facecolor(color)\n    p.set_edgecolor(\"black\")\n  ax0.text(p.get_x() + p.get_width()/2., height+1, height, ha = 'center', size=12, fontweight=fontweight, color=color)\n\nfig.show()\n```\n\n\n    \n![png](/images/0205/output_66_0.png)\n    \n\n\n\n```python\nimport matplotlib.pyplot as plt\nfrom matplotlib.ticker import (MultipleLocator, AutoMinorLocator, FuncFormatter)\nimport seaborn as sns\nimport numpy as np\n\ntips = sns.load_dataset(\"tips\")\nfig, ax = plt.subplots(nrows = 1, ncols = 2, figsize=(16, 5))\n\ndef major_formatter(x, pos):\n    return \"%.2f$\" % x\nformatter = FuncFormatter(major_formatter)\n\n# Ideal Bar Graph\nax0 = sns.barplot(x = \"day\", y = 'total_bill', data = tips, \n                  ci=None, color='lightgray', alpha=0.85, zorder=2, \n                  ax=ax[0])\n\ngroup_mean = tips.groupby(['day'])['total_bill'].agg('mean')\nh_day = group_mean.sort_values(ascending=False).index[0]\nh_mean = np.round(group_mean.sort_values(ascending=False)[0], 2)\nfor p in ax0.patches:\n  fontweight = \"normal\"\n  color = \"k\"\n  height = np.round(p.get_height(), 2)\n  if h_mean == height:\n    fontweight=\"bold\"\n    color=\"darkred\"\n    p.set_facecolor(color)\n    p.set_edgecolor(\"black\")\n  ax0.text(p.get_x() + p.get_width()/2., height+1, height, ha = 'center', size=12, fontweight=fontweight, color=color)\n\nax0.set_ylim(-3, 30)\nax0.set_title(\"Ideal Bar Graph\", size = 16)\n\nax0.spines['top'].set_visible(False)\nax0.spines['left'].set_position((\"outward\", 20))\nax0.spines['left'].set_visible(False)\nax0.spines['right'].set_visible(False)\n\nax0.yaxis.set_major_locator(MultipleLocator(10))\nax0.yaxis.set_major_formatter(formatter)\nax0.yaxis.set_minor_locator(MultipleLocator(5))\n\nax0.set_ylabel(\"Avg. Total Bill($)\", fontsize=14)\n\nax0.grid(axis=\"y\", which=\"major\", color=\"lightgray\")\nax0.grid(axis=\"y\", which=\"minor\", ls=\":\")\n\nax0.set_xlabel(\"Weekday\", fontsize=14)\nfor xtick in ax0.get_xticklabels():\n  print(xtick)\n  if xtick.get_text() == h_day:\n    xtick.set_color(\"darkred\")\n    xtick.set_fontweight(\"demibold\")\nax0.set_xticklabels(['Thursday', 'Friday', 'Saturday', 'Sunday'], size=12)\n\nax1 = sns.barplot(x = \"day\", y = 'total_bill', data = tips, \n                  ci=None, alpha=0.85, \n                  ax=ax[1])\nfor p in ax1.patches:\n  height = np.round(p.get_height(), 2)\n  ax1.text(p.get_x() + p.get_width()/2., height+1, height, ha = 'center', size=12)\nax1.set_ylim(-3, 30)\nax1.set_title(\"Just Bar Graph\")\n\nplt.show()\n```\n\n    Text(0, 0, 'Thur')\n    Text(0, 0, 'Fri')\n    Text(0, 0, 'Sat')\n    Text(0, 0, 'Sun')\n    \n\n\n    \n![png](/images/0205/output_67_1.png)\n    \n\n<br>\n<br>\n<br>\n\nReference\n[블로그](https://yjs-program.tistory.com/177)","source":"_posts/0205_python_visualization.md","raw":"---\ntitle: Python 데이터 시각화\ndate: 2021-11-03\ntags: markdown, python, pycharm, visualization\ntoc: true\ncategories:\n- 파이썬\n- Python Visualization\n---\n<br>\n<br>\n\n\n### **Matplotlib.pyplot란**\n---\nMatplotlib는 데이터를 시각화 하는데 사용하는 대표적인 파이썬 라이브러리이다.\nMATLAB과 비슷한 형태를 가지고 있고, numpy나 pandas에서 사용되는 자료구조를 쉽게 시각화 할 수 있다.\n<br>\n\n### **시작하기**\n---\n- import matplotlib.pyplot as plt\n라이브러리 사용하기 위한 import문 추가 (plt라는 이름으로 사용)\n\n- fig, ax = plt.subplots()\nfig는 그림, ax는 그려질 그래프를 의미\n괄호 안에는 그래프 크기를 정의 할 수 있음\n\n- ax.plot(dates, min_temperature, label = \"Min Temp\")     \n- ax.plot(dates, max_temperature, label = \"Max Temp\")\n두개의 그래프를 의미\n\n- ax.legend() \n범례를 추가할때 사용하는 메소드\n그래프에 데이터 위치 표시 (예제에서는 왼쪽 맨위에 표시)\n\n- plt.show()  \n마무리 \n\n```python\nimport matplotlib.pyplot as plt\n\ndates = [\n    '2021\\n01-01', '2021\\n01-02', '2021\\n01-03', '2021\\n01-04', '2021\\n01-05',\n    '2021\\n01-06', '2021\\n01-07', '2021\\n01-08', '2021\\n01-09', '2021\\n01-10'\n]\nmin_temperature = [20.7, 17.9, 18.8, 14.6, 15.8, 15.8, 15.8, 17.4, 21.8, 20.0]\nmax_temperature = [34.7, 28.9, 31.8, 25.6, 28.8, 21.8, 22.8, 28.4, 30.8, 32.0]\n\nfig, ax = plt.subplots()  #그래프 생성  ()안에 사이즈 설정 가능\nax.plot(dates, min_temperature, label = \"Min Temp\")     \nax.plot(dates, max_temperature, label = \"Max Temp\")\nax.legend()   \nplt.show()    #마무리! 꼭 해주기!\n```\n\n\n    \n![](/images/0205/output_1_0.png)\n    \n\n\n\n```python\nimport matplotlib.pyplot as plt\n\ndates = [\n    '2021\\n01-01', '2021\\n01-02', '2021\\n01-03', '2021\\n01-04', '2021\\n01-05',\n    '2021\\n01-06', '2021\\n01-07', '2021\\n01-08', '2021\\n01-09', '2021\\n01-10'\n]\nmin_temperature = [20.7, 17.9, 18.8, 14.6, 15.8, 15.8, 15.8, 17.4, 21.8, 20.0]\nmax_temperature = [34.7, 28.9, 31.8, 25.6, 28.8, 21.8, 22.8, 28.4, 30.8, 32.0]\n\nfig, axes = plt.subplots(nrows=1, ncols=1, figsize=(10,6)) #그래프 사이즈\naxes.plot(dates, min_temperature, label = 'Min Temperature')\naxes.plot(dates, max_temperature, label = 'Max Temperature')\naxes.legend()\nplt.show()\n```\n\n\n    \n![](/images/0205/output_2_0.png)\n    \n\n\n\n```python\nprint(fig)\nprint(axes)\n```\n\n    Figure(720x432)\n    AxesSubplot(0.125,0.125;0.775x0.755)\n    \n\n<br>\n\n### **선 그래프**\n---\n**방법 1. Pyplot API**(비추천)\n- 참조: https://pypi.org/project/fix-yahoo-finance/\n\n- yfinance란 \n오픈소스 API로, Yahoo Finance에서 제공하는 데이터에 접근 할 수 있다.\n아래 예제에서는 주가 데이터를 받아 오기 위해서 사용하였다.\n\n- yfinance 함수를 사용하기 위한 패키지 다운로드\n\n```python\n!pip install yfinance --upgrade --no-cache-dir\n```\n\n```python\n#주가 정보 가져오기\nimport yfinance as yf\ndata = yf.download('AAPL', '2019-08-01', '2020-08-01')\ndata.info()\n```\n\n    [*********************100%***********************]  1 of 1 completed\n    <class 'pandas.core.frame.DataFrame'>\n    DatetimeIndex: 253 entries, 2019-08-01 to 2020-07-31\n    Data columns (total 6 columns):\n     #   Column     Non-Null Count  Dtype  \n    ---  ------     --------------  -----  \n     0   Open       253 non-null    float64\n     1   High       253 non-null    float64\n     2   Low        253 non-null    float64\n     3   Close      253 non-null    float64\n     4   Adj Close  253 non-null    float64\n     5   Volume     253 non-null    int64  \n    dtypes: float64(5), int64(1)\n    memory usage: 13.8 KB\n    \n\n\n```python\nts = data['Open']\nprint(ts.head())\n```\n\n    Date\n    2019-08-01    53.474998\n    2019-08-02    51.382500\n    2019-08-05    49.497501\n    2019-08-06    49.077499\n    2019-08-07    48.852501\n    Name: Open, dtype: float64\n    \n<br>\n\n**- plt.legend(loc='best')**\n범례 위치를 best로 설정\nbest는 디폴트 값을 의미\n\n```python\ndata = yf.download('AAPL', '2019-08-01', '2020-08-01')\nts = data['Open']\nplt.figure(figsize=(10,6))\nplt.plot(ts)\nplt.legend(labels=['Price'], loc='best')\nplt.title('Stock Market fluctuation of AAPL') \nplt.xlabel('Date') \nplt.ylabel('Stock Market Open Price') \nplt.show()\n```\n\n    [*********************100%***********************]  1 of 1 completed\n    \n\n\n    \n![](/images/0205/output_10_1.png)\n    \n<br>\n\n**방법2. 객체 지향 API**\n- 먼저 컴퓨터 프로그램에서의 랜덤값은 무작위 수가 아니라,\n특정 시작 숫자값을 정해주면 정해진 알고리즘에 따라 마치 난수처럼 보이는 수열을 생성하는 것이다.\n이때 특정 시작 숫자가 바로 **시드(seed)**이다\n- 시드 값은 현재 시각 등을 이용해 자동으로 정하기도 하지만,\n사람이 수동으로 설정 할 수도 있다\n- 따라서 특정 시드값이 사용될 경우 이후에 발생되는 난수를 알고리즘에 따라 직접 예측이 가능하다\n\n<br>\n\n- np.random.random(20000)\nnumpy를 이용해서 20000개의 난수를 생성한다\n- random.seed()\nseed 설정, 괄호 안에 0이상의 정수 값을 넣어주면 된다\n- fig = Figure()\nfigure 객체 생성\n- savefig('파일이름') \n그래프를 이미지 파일로 저장할 수 있다\n- ax = fig.add_subplot(111)\n- ax.hist(x, 100)\n이거 모르게따@_2\n```python\nfrom matplotlib.backends.backend_agg import FigureCanvasAgg as FigureCanvas\nfrom matplotlib.figure import Figure\nimport matplotlib.pyplot as plt\n\nfig = Figure()\n\nimport numpy as np\nnp.random.seed(6)\nx = np.random.random(20000)\n\nax = fig.add_subplot(111)\nax.hist(x, 100)\nax.set_title('Artist Layer Histogram')\n#fig.savefig('Matplotlib_histogram.png')\nplt.show()\n```\n\n방법3 Pyplot API + 객체지향 API\n\n\n```python\ndata = yf.download('AAPL','2019-08-01','2020-08-01')\nts = data['Open']\n\nfig, ax = plt.subplots(figsize=(10,6)) \nax.plot(ts)\nax.set_title('Stock Market fluctuation of AAPL')\nax.set_xlabel('Date')\nax.set_ylabel('Stock Market Open Price')\nplt.show()\n```\n\n    [*********************100%***********************]  1 of 1 completed\n    \n\n\n    \n![](/images/0205/output_14_1.png)\n    \n\n\n### **막대그래프**\n\n- Tick 이란 \n그래프의 축에 간격을 구분하기 위해 표시하는 눈금이다\nex) xticks(), yticks()\n```python\nimport numpy as np\nimport calendar\n\nmonth_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nsold_list = [300, 400, 550, 900, 600, 960, 900, 910, 800, 700, 550, 450]\n\nfig, ax = plt.subplots(figsize=(10,6))\nplt.xticks(month_list, calendar.month_name[1:13], rotation=90)\nplot = ax.bar(month_list, sold_list)\n\nfor rect in plot:\n  print(\"graph:\", rect) \n  height = rect.get_height()\n  ax.text(rect.get_x() + rect.get_width()/2., 1.002*height,'%d' % int(height), ha='center', va='bottom')\n\nplt.show()\n```\n\n    graph: Rectangle(xy=(0.6, 0), width=0.8, height=300, angle=0)\n    graph: Rectangle(xy=(1.6, 0), width=0.8, height=400, angle=0)\n    graph: Rectangle(xy=(2.6, 0), width=0.8, height=550, angle=0)\n    graph: Rectangle(xy=(3.6, 0), width=0.8, height=900, angle=0)\n    graph: Rectangle(xy=(4.6, 0), width=0.8, height=600, angle=0)\n    graph: Rectangle(xy=(5.6, 0), width=0.8, height=960, angle=0)\n    graph: Rectangle(xy=(6.6, 0), width=0.8, height=900, angle=0)\n    graph: Rectangle(xy=(7.6, 0), width=0.8, height=910, angle=0)\n    graph: Rectangle(xy=(8.6, 0), width=0.8, height=800, angle=0)\n    graph: Rectangle(xy=(9.6, 0), width=0.8, height=700, angle=0)\n    graph: Rectangle(xy=(10.6, 0), width=0.8, height=550, angle=0)\n    graph: Rectangle(xy=(11.6, 0), width=0.8, height=450, angle=0)\n    \n\n\n    \n![](/images/0205/output_16_1.png)\n    \n\n\n선점도 그래프\n- 두개의 연속형 변수 (키, 몸무게)\n- 상관관계 != 인과관계\n\n\n```python\n#내장 데이터\nimport seaborn as sns\n\ntips = sns.load_dataset(\"tips\")\nx = tips['total_bill']\ny = tips['tip']\n\nfig, ax = plt.subplots(figsize=(10,6))\nax.scatter(x, y)\nax.set_xlabel('Totla Bill')\nax.set_ylabel('Tip')\nax.set_title('Tip ~ Total Bill')\n\nfig.show()\n```\n\n\n    \n![png](/images/0205/output_18_0.png)\n    \n\n\n\n```python\nlabel, data = tips.groupby('sex')\ntips['sex_color'] = tips['sex'].map({\"Female\" : '#0000FF',\"Male\" : \"#00FF00\"})\n\nfig, ax = plt.subplots(figsize=(10,6))\n\nfor label, data in tips.groupby('sex'):\n  ax.scatter(data['total_bill'], data['tip'], label=label, color=data['sex_color'], alpha=0.5)\n  \n  ax.set_xlabel('Total Bill')\n  ax.set_ylabel('Tip')\n  ax.set_title('Tip ~ Total Bill by Gender')\n\nax.legend()\nfig.show()\n```\n\n\n    \n![png](/images/0205/output_19_0.png)\n    \n\n\n히스토그램\n\n수치형 변수\n\n\n```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\n\ntitanic = sns.load_dataset('titanic')\nage = titanic['age']\n\nnbins = 21\nfig, ax = plt.subplots(figsize=(10,6))\nax.hist(age, bins = nbins)\nax.set_xlabel(\"Age\")\nax.set_ylabel(\"Frequency\")\nax.set_title(\"Distribution of Aae in  Titanic\")\nax.axvline(x = age.mean(),linewidth = 2, color = 'r')\nfig.show()\n```\n\n\n    \n![png](/images/0205/output_22_0.png)\n    \n\n\n박스 플롯\n\n- x축 변수: 범주형 변수, 그룹과 관련있는 변수, 문자열\n- y축 변수: 수치형 변수\n\n\n```python\niris = sns.load_dataset('iris')\n\ndata = [iris[iris['species']==\"setosa\"]['petal_width'],\n        iris[iris['species']==\"versicolor\"]['petal_width'],\n        iris[iris['species']==\"virginica\"]['petal_width']]\n\nfig, ax = plt.subplots(figsize=(10, 6))\nax.boxplot(data, labels=['setosa', 'versicolor', 'virginica'])\n\nfig.show()\n```\n\n\n    \n![png](/images/0205/output_25_0.png)\n    \n\n\n히트맵\n\n\n```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\n\nflights = sns.load_dataset(\"flights\")     #내장 데이터\nflights = flights.pivot(\"month\", \"year\",\"passengers\")\n\nfig, ax = plt.subplots(figsize = (12,6))\n\nim = ax.imshow(flights, cmap = 'YlGnBu') #cmap은 colormap, YlGnBu은 색상\n\nax.set_xticklabels(flights.columns, rotation = 20)\nax.set_yticklabels(flights.index, rotation = 10)\nfig.colorbar(im)\n\nfig.show()\n```\n\n\n    \n![png](/images/0205/output_27_0.png)\n    \n\n\nSeaborn\n\n산점도와 회귀선이 있는 산점도\n\n\n```python\n%matplotlib inline \n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\ntips = sns.load_dataset(\"tips\")\n#print(tips)\nsns.scatterplot(x = \"total_bill\", y = \"tip\", data = tips)\nplt.show()\n```\n\n\n    \n![png](/images/0205/output_30_0.png)\n    \n\n- fig, ax = plt.subplots(ncols=2)\n세로로 2개의 그래프를 그림\nnrows=2이면 가로로 그래프를 2개 그림\nnrows=2, nols=3이면 2행 3열로 그래프를 그림\n- \n```python\nfig, ax = plt.subplots(nrows = 1, ncols = 2, figsize=(15, 5))  #이런식으로 그래프 그리는방법을 각인시키기\nsns.regplot(x = \"total_bill\", \n            y = \"tip\", \n            data = tips, \n            ax = ax[0], \n            fit_reg = True)\n\nsns.regplot(x = \"total_bill\", \n            y = \"tip\", \n            data = tips, \n            ax = ax[1], \n            fit_reg = False)\n\nplt.show()\n```\n\n\n    \n![png](/images/0205/output_31_0.png)\n    \n\n\n히스토그램/커널 밀도 그래프\n\n\n```python\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\ntips = sns.load_dataset(\"tips\")   # 이렇게 하지 말깅!\nsns.displot(x = \"tip\", data = tips)\nplt.figure(figsize=(10,6))\nplt.show()\n```\n\n\n    \n![png](/images/0205/output_33_0.png)\n    \n\n\n\n    <Figure size 720x432 with 0 Axes>\n\n\n\n```python\nsns.displot(x=\"tip\",kind =\"kde\", data=tips)\nplt.show()\n```\n\n\n    \n![png](/images/0205/output_34_0.png)\n    \n\n\n\n```python\nsns.displot(x=\"tip\",kde=True, data=tips)\nplt.show()\n```\n\n\n    \n![png](/images/0205/output_35_0.png)\n    \n\n\n박스플롯\n\n\n```python\nsns.boxplot(x = \"day\", y = \"total_bill\", data =tips)\nsns.swarmplot(x = \"day\", y = \"total_bill\", data = tips, alpha= .25)\n```\n\n\n\n\n    <matplotlib.axes._subplots.AxesSubplot at 0x7face917d410>\n\n\n\n\n    \n![png](/images/0205/output_37_1.png)\n    \n\n\n막대 그래프\n\n\n```python\nsns.countplot (x=\"day\", data = tips)\nplt.show()\n```\n\n\n    \n![png](/images/0205/output_39_0.png)\n    \n\n\n\n```python\nprint(tips['day'].value_counts())\nprint(\"index: \", tips['day'].value_counts().index)\nprint(\"values: \", tips['day'].value_counts().values)\n```\n\n    Sat     87\n    Sun     76\n    Thur    62\n    Fri     19\n    Name: day, dtype: int64\n    index:  CategoricalIndex(['Sat', 'Sun', 'Thur', 'Fri'], categories=['Thur', 'Fri', 'Sat', 'Sun'], ordered=False, dtype='category')\n    values:  [87 76 62 19]\n    \n\n\n```python\nprint(tips['day'].value_counts(ascending=True))\n```\n\n    Fri     19\n    Thur    62\n    Sun     76\n    Sat     87\n    Name: day, dtype: int64\n    \n\n\n```python\nplt.show()\n```\n\n\n```python\nax = sns.countplot(x = \"day\", data = tips, order = tips['day'].value_counts().index)\nfor p in ax.patches:\n  height = p.get_height()\n  ax.text(p.get_x() + p.get_width()/2., height+3, height, ha = 'center', size=9)\nax.set_ylim(-5, 100)\nplt.show()\n```\n\n\n    \n![png](/images/0205/output_43_0.png)\n    \n\n\n\n```python\nax = sns.countplot(x = \"day\", data = tips, hue = \"sex\", dodge = True,\n              order = tips['day'].value_counts().index)\nfor p in ax.patches:\n  height = p.get_height()\n  ax.text(p.get_x() + p.get_width()/2., height+3, height, ha = 'center', size=9)\nax.set_ylim(-5, 100)\n\nplt.show()\n```\n\n\n    \n![png](/images/0205/output_44_0.png)\n    \n\n\n상관관계 그래프\n\n\n```python\nimport pandas as pd \nimport numpy as np \nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nmpg = sns.load_dataset(\"mpg\")\nprint(mpg.shape) # 398 행, 9개 열\n\nnum_mpg = mpg.select_dtypes(include = np.number)\nprint(num_mpg.shape) # 398 행, 7개 열\n```\n\n    (398, 9)\n    (398, 7)\n    \n\n\n```python\nnum_mpg.info()\n```\n\n    <class 'pandas.core.frame.DataFrame'>\n    RangeIndex: 398 entries, 0 to 397\n    Data columns (total 7 columns):\n     #   Column        Non-Null Count  Dtype  \n    ---  ------        --------------  -----  \n     0   mpg           398 non-null    float64\n     1   cylinders     398 non-null    int64  \n     2   displacement  398 non-null    float64\n     3   horsepower    392 non-null    float64\n     4   weight        398 non-null    int64  \n     5   acceleration  398 non-null    float64\n     6   model_year    398 non-null    int64  \n    dtypes: float64(4), int64(3)\n    memory usage: 21.9 KB\n    \n\n\n```python\nnum_mpg.corr()\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>mpg</th>\n      <th>cylinders</th>\n      <th>displacement</th>\n      <th>horsepower</th>\n      <th>weight</th>\n      <th>acceleration</th>\n      <th>model_year</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>mpg</th>\n      <td>1.000000</td>\n      <td>-0.775396</td>\n      <td>-0.804203</td>\n      <td>-0.778427</td>\n      <td>-0.831741</td>\n      <td>0.420289</td>\n      <td>0.579267</td>\n    </tr>\n    <tr>\n      <th>cylinders</th>\n      <td>-0.775396</td>\n      <td>1.000000</td>\n      <td>0.950721</td>\n      <td>0.842983</td>\n      <td>0.896017</td>\n      <td>-0.505419</td>\n      <td>-0.348746</td>\n    </tr>\n    <tr>\n      <th>displacement</th>\n      <td>-0.804203</td>\n      <td>0.950721</td>\n      <td>1.000000</td>\n      <td>0.897257</td>\n      <td>0.932824</td>\n      <td>-0.543684</td>\n      <td>-0.370164</td>\n    </tr>\n    <tr>\n      <th>horsepower</th>\n      <td>-0.778427</td>\n      <td>0.842983</td>\n      <td>0.897257</td>\n      <td>1.000000</td>\n      <td>0.864538</td>\n      <td>-0.689196</td>\n      <td>-0.416361</td>\n    </tr>\n    <tr>\n      <th>weight</th>\n      <td>-0.831741</td>\n      <td>0.896017</td>\n      <td>0.932824</td>\n      <td>0.864538</td>\n      <td>1.000000</td>\n      <td>-0.417457</td>\n      <td>-0.306564</td>\n    </tr>\n    <tr>\n      <th>acceleration</th>\n      <td>0.420289</td>\n      <td>-0.505419</td>\n      <td>-0.543684</td>\n      <td>-0.689196</td>\n      <td>-0.417457</td>\n      <td>1.000000</td>\n      <td>0.288137</td>\n    </tr>\n    <tr>\n      <th>model_year</th>\n      <td>0.579267</td>\n      <td>-0.348746</td>\n      <td>-0.370164</td>\n      <td>-0.416361</td>\n      <td>-0.306564</td>\n      <td>0.288137</td>\n      <td>1.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n\n```python\nfig, ax = plt.subplots(nrows = 1, ncols = 2, figsize=(16, 5))\n\n#  기본 그래프 [Basic Correlation Heatmap]\nsns.heatmap(num_mpg.corr(), ax=ax[0])\nax[0].set_title('Basic Correlation Heatmap', pad = 12)\n\n# 상관관계 수치 그래프 [Correlation Heatmap with Number]\nsns.heatmap(num_mpg.corr(), vmin=-1, vmax=1, annot=True, ax=ax[1])\nax[1].set_title('Correlation Heatmap with Number', pad = 12)\n\nplt.show()\n```\n\n\n    \n![png](/images/0205/output_49_0.png)\n    \n\n\n\n```python\nprint(int(True))\nnp.triu(np.ones_like(num_mpg.corr()))\n```\n\n    1\n    \n\n\n\n\n    array([[1., 1., 1., 1., 1., 1., 1.],\n           [0., 1., 1., 1., 1., 1., 1.],\n           [0., 0., 1., 1., 1., 1., 1.],\n           [0., 0., 0., 1., 1., 1., 1.],\n           [0., 0., 0., 0., 1., 1., 1.],\n           [0., 0., 0., 0., 0., 1., 1.],\n           [0., 0., 0., 0., 0., 0., 1.]])\n\n\n\n\n```python\nmask = np.triu(np.ones_like(num_mpg.corr(), dtype=np.bool))\nprint(mask)\n```\n\n    [[ True  True  True  True  True  True  True]\n     [False  True  True  True  True  True  True]\n     [False False  True  True  True  True  True]\n     [False False False  True  True  True  True]\n     [False False False False  True  True  True]\n     [False False False False False  True  True]\n     [False False False False False False  True]]\n    \n\n\n```python\nfig, ax = plt.subplots(figsize=(16, 5))  \n\n#  기본 그래프 [Basic Correlation Heatmap]\nax = sns.heatmap(num_mpg.corr(), mask=mask, \n                 vmin=-1, vmax = 1, \n                 annot=True, \n                 cmap=\"BrBG\", cbar = True)\nax.set_title('Triangle Correlation Heatmap', pad = 16, size = 16)\nfig.show()\n```\n\n\n    \n![png](/images/0205/output_52_0.png)\n    \n\n\nIntermediate\n\n페가 블로그 코드\n\nhttps://jehyunlee.github.io/2020/08/27/Python-DS-28-mpl_spines_grids/\n\n\n```python\nimport matplotlib.pyplot as plt\nfrom matplotlib.ticker import (MultipleLocator, AutoMinorLocator, FuncFormatter)\nimport seaborn as sns\nimport numpy as np\n```\n\n\n```python\ndef plot_example(ax, zorder=0):\n    ax.bar(tips_day[\"day\"], tips_day[\"tip\"], color=\"lightgray\", zorder=zorder)\n    ax.set_title(\"tip (mean)\", fontsize=16, pad=12)\n\n    # Values\n    h_pad = 0.1\n    for i in range(4):\n        fontweight = \"normal\"\n        color = \"k\"\n        if i == 3:\n            fontweight = \"bold\"\n            color = \"darkred\"\n\n        ax.text(i, tips_day[\"tip\"].loc[i] + h_pad, f\"{tips_day['tip'].loc[i]:0.2f}\", \n                horizontalalignment='center', fontsize=12, fontweight=fontweight, color=color)\n\n    # Sunday\n    ax.patches[3].set_facecolor(\"darkred\")\n    ax.patches[3].set_edgecolor(\"black\")\n\n    # set_range\n    ax.set_ylim(0, 4)\n    return ax\n\ndef major_formatter(x, pos):\n    return \"{%.2f}\" % x\nformatter = FuncFormatter(major_formatter)\n```\n\n\n```python\ntips = sns.load_dataset(\"tips\")\ntips_day = tips.groupby(\"day\").mean().reset_index()\nprint(tips_day)\n```\n\n        day  total_bill       tip      size\n    0  Thur   17.682742  2.771452  2.451613\n    1   Fri   17.151579  2.734737  2.105263\n    2   Sat   20.441379  2.993103  2.517241\n    3   Sun   21.410000  3.255132  2.842105\n    \n\n\n```python\nfig, ax = plt.subplots(figsize=(10, 6))\nax = plot_example(ax, zorder=2)\n```\n\n\n    \n![png](/images/0205/output_59_0.png)\n    \n\n\n\n```python\nfig, ax = plt.subplots(figsize=(10, 6))\nax = plot_example(ax, zorder=2)\n\nax.spines[\"top\"].set_visible(False)\nax.spines[\"right\"].set_visible(False)\nax.spines[\"left\"].set_visible(False)\n```\n\n\n    \n![png](/images/0205/output_60_0.png)\n    \n\n\n\n```python\nfig, ax = plt.subplots()\nax = plot_example(ax, zorder=2)\n\nax.spines[\"top\"].set_visible(False)\nax.spines[\"right\"].set_visible(False)\nax.spines[\"left\"].set_visible(False)\n\nax.yaxis.set_major_locator(MultipleLocator(1))\nax.yaxis.set_major_formatter(formatter)\nax.yaxis.set_minor_locator(MultipleLocator(0.5))\n```\n\n\n    \n![png](/images/0205/output_61_0.png)\n    \n\n\n\n```python\nfig, ax = plt.subplots()\nax = plot_example(ax, zorder=2)\n\nax.spines[\"top\"].set_visible(False)\nax.spines[\"right\"].set_visible(False)\nax.spines[\"left\"].set_visible(False)\n\nax.yaxis.set_major_locator(MultipleLocator(1))\nax.yaxis.set_major_formatter(formatter)\nax.yaxis.set_minor_locator(MultipleLocator(0.5))\n    \nax.grid(axis=\"y\", which=\"major\", color=\"lightgray\")\nax.grid(axis=\"y\", which=\"minor\", ls=\":\")\n```\n\n\n    \n![png](/images/0205/output_62_0.png)\n    \n\n\n책 코드\n\n\n```python\nimport matplotlib.pyplot as plt\nfrom matplotlib.ticker import (MultipleLocator, AutoMinorLocator, FuncFormatter)\nimport seaborn as sns\nimport numpy as np\n\ntips = sns.load_dataset(\"tips\")\nfig, ax = plt.subplots(nrows = 1, ncols = 2, figsize=(16, 5))\n\ndef major_formatter(x, pos):\n    return \"%.2f$\" % x\nformatter = FuncFormatter(major_formatter)\n\n# Ideal Bar Graph\nax0 = sns.barplot(x = \"day\", y = 'total_bill', data = tips, \n                  ci=None, color='lightgray', alpha=0.85, zorder=2, \n                  ax=ax[0])\n```\n\n\n    \n![png](/images/0205/output_64_0.png)\n    \n\n\n\n```python\ngroup_mean = tips.groupby(['day'])['total_bill'].agg('mean')\nh_day = group_mean.sort_values(ascending=False).index[0]\nh_mean = np.round(group_mean.sort_values(ascending=False)[0], 2)\nprint(\"The Best Day:\", h_day)\nprint(\"The Highest Avg. Total Biil:\", h_mean)\n```\n\n    The Best Day: Sun\n    The Highest Avg. Total Biil: 21.41\n    \n\n\n```python\ntips = sns.load_dataset(\"tips\")\nfig, ax = plt.subplots(nrows = 1, ncols = 2, figsize=(16, 5))\n\n# Ideal Bar Graph\nax0 = sns.barplot(x = \"day\", y = 'total_bill', data = tips, \n                  ci=None, color='lightgray', alpha=0.85, zorder=2, \n                  ax=ax[0])\n\ngroup_mean = tips.groupby(['day'])['total_bill'].agg('mean')\nh_day = group_mean.sort_values(ascending=False).index[0]\nh_mean = np.round(group_mean.sort_values(ascending=False)[0], 2)\nfor p in ax0.patches:\n  fontweight = \"normal\"\n  color = \"k\"\n  height = np.round(p.get_height(), 2)\n  if h_mean == height:\n    fontweight=\"bold\"\n    color=\"darkred\"\n    p.set_facecolor(color)\n    p.set_edgecolor(\"black\")\n  ax0.text(p.get_x() + p.get_width()/2., height+1, height, ha = 'center', size=12, fontweight=fontweight, color=color)\n\nfig.show()\n```\n\n\n    \n![png](/images/0205/output_66_0.png)\n    \n\n\n\n```python\nimport matplotlib.pyplot as plt\nfrom matplotlib.ticker import (MultipleLocator, AutoMinorLocator, FuncFormatter)\nimport seaborn as sns\nimport numpy as np\n\ntips = sns.load_dataset(\"tips\")\nfig, ax = plt.subplots(nrows = 1, ncols = 2, figsize=(16, 5))\n\ndef major_formatter(x, pos):\n    return \"%.2f$\" % x\nformatter = FuncFormatter(major_formatter)\n\n# Ideal Bar Graph\nax0 = sns.barplot(x = \"day\", y = 'total_bill', data = tips, \n                  ci=None, color='lightgray', alpha=0.85, zorder=2, \n                  ax=ax[0])\n\ngroup_mean = tips.groupby(['day'])['total_bill'].agg('mean')\nh_day = group_mean.sort_values(ascending=False).index[0]\nh_mean = np.round(group_mean.sort_values(ascending=False)[0], 2)\nfor p in ax0.patches:\n  fontweight = \"normal\"\n  color = \"k\"\n  height = np.round(p.get_height(), 2)\n  if h_mean == height:\n    fontweight=\"bold\"\n    color=\"darkred\"\n    p.set_facecolor(color)\n    p.set_edgecolor(\"black\")\n  ax0.text(p.get_x() + p.get_width()/2., height+1, height, ha = 'center', size=12, fontweight=fontweight, color=color)\n\nax0.set_ylim(-3, 30)\nax0.set_title(\"Ideal Bar Graph\", size = 16)\n\nax0.spines['top'].set_visible(False)\nax0.spines['left'].set_position((\"outward\", 20))\nax0.spines['left'].set_visible(False)\nax0.spines['right'].set_visible(False)\n\nax0.yaxis.set_major_locator(MultipleLocator(10))\nax0.yaxis.set_major_formatter(formatter)\nax0.yaxis.set_minor_locator(MultipleLocator(5))\n\nax0.set_ylabel(\"Avg. Total Bill($)\", fontsize=14)\n\nax0.grid(axis=\"y\", which=\"major\", color=\"lightgray\")\nax0.grid(axis=\"y\", which=\"minor\", ls=\":\")\n\nax0.set_xlabel(\"Weekday\", fontsize=14)\nfor xtick in ax0.get_xticklabels():\n  print(xtick)\n  if xtick.get_text() == h_day:\n    xtick.set_color(\"darkred\")\n    xtick.set_fontweight(\"demibold\")\nax0.set_xticklabels(['Thursday', 'Friday', 'Saturday', 'Sunday'], size=12)\n\nax1 = sns.barplot(x = \"day\", y = 'total_bill', data = tips, \n                  ci=None, alpha=0.85, \n                  ax=ax[1])\nfor p in ax1.patches:\n  height = np.round(p.get_height(), 2)\n  ax1.text(p.get_x() + p.get_width()/2., height+1, height, ha = 'center', size=12)\nax1.set_ylim(-3, 30)\nax1.set_title(\"Just Bar Graph\")\n\nplt.show()\n```\n\n    Text(0, 0, 'Thur')\n    Text(0, 0, 'Fri')\n    Text(0, 0, 'Sat')\n    Text(0, 0, 'Sun')\n    \n\n\n    \n![png](/images/0205/output_67_1.png)\n    \n\n<br>\n<br>\n<br>\n\nReference\n[블로그](https://yjs-program.tistory.com/177)","slug":"0205-python-visualization","published":1,"updated":"2022-01-03T12:20:08.047Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cky2hohep000l5nrjavm6ezjf","content":"<br>\n<br>\n\n\n<h3 id=\"Matplotlib-pyplot란\"><a href=\"#Matplotlib-pyplot란\" class=\"headerlink\" title=\"Matplotlib.pyplot란\"></a><strong>Matplotlib.pyplot란</strong></h3><hr>\n<p>Matplotlib는 데이터를 시각화 하는데 사용하는 대표적인 파이썬 라이브러리이다.<br>MATLAB과 비슷한 형태를 가지고 있고, numpy나 pandas에서 사용되는 자료구조를 쉽게 시각화 할 수 있다.<br><br></p>\n<h3 id=\"시작하기\"><a href=\"#시작하기\" class=\"headerlink\" title=\"시작하기\"></a><strong>시작하기</strong></h3><hr>\n<ul>\n<li><p>import matplotlib.pyplot as plt<br>라이브러리 사용하기 위한 import문 추가 (plt라는 이름으로 사용)</p>\n</li>\n<li><p>fig, ax = plt.subplots()<br>fig는 그림, ax는 그려질 그래프를 의미<br>괄호 안에는 그래프 크기를 정의 할 수 있음</p>\n</li>\n<li><p>ax.plot(dates, min_temperature, label = “Min Temp”)     </p>\n</li>\n<li><p>ax.plot(dates, max_temperature, label = “Max Temp”)<br>두개의 그래프를 의미</p>\n</li>\n<li><p>ax.legend()<br>범례를 추가할때 사용하는 메소드<br>그래프에 데이터 위치 표시 (예제에서는 왼쪽 맨위에 표시)</p>\n</li>\n<li><p>plt.show()<br>마무리 </p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\">dates = [</span><br><span class=\"line\">    <span class=\"string\">&#x27;2021\\n01-01&#x27;</span>, <span class=\"string\">&#x27;2021\\n01-02&#x27;</span>, <span class=\"string\">&#x27;2021\\n01-03&#x27;</span>, <span class=\"string\">&#x27;2021\\n01-04&#x27;</span>, <span class=\"string\">&#x27;2021\\n01-05&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;2021\\n01-06&#x27;</span>, <span class=\"string\">&#x27;2021\\n01-07&#x27;</span>, <span class=\"string\">&#x27;2021\\n01-08&#x27;</span>, <span class=\"string\">&#x27;2021\\n01-09&#x27;</span>, <span class=\"string\">&#x27;2021\\n01-10&#x27;</span></span><br><span class=\"line\">]</span><br><span class=\"line\">min_temperature = [<span class=\"number\">20.7</span>, <span class=\"number\">17.9</span>, <span class=\"number\">18.8</span>, <span class=\"number\">14.6</span>, <span class=\"number\">15.8</span>, <span class=\"number\">15.8</span>, <span class=\"number\">15.8</span>, <span class=\"number\">17.4</span>, <span class=\"number\">21.8</span>, <span class=\"number\">20.0</span>]</span><br><span class=\"line\">max_temperature = [<span class=\"number\">34.7</span>, <span class=\"number\">28.9</span>, <span class=\"number\">31.8</span>, <span class=\"number\">25.6</span>, <span class=\"number\">28.8</span>, <span class=\"number\">21.8</span>, <span class=\"number\">22.8</span>, <span class=\"number\">28.4</span>, <span class=\"number\">30.8</span>, <span class=\"number\">32.0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">fig, ax = plt.subplots()  <span class=\"comment\">#그래프 생성  ()안에 사이즈 설정 가능</span></span><br><span class=\"line\">ax.plot(dates, min_temperature, label = <span class=\"string\">&quot;Min Temp&quot;</span>)     </span><br><span class=\"line\">ax.plot(dates, max_temperature, label = <span class=\"string\">&quot;Max Temp&quot;</span>)</span><br><span class=\"line\">ax.legend()   </span><br><span class=\"line\">plt.show()    <span class=\"comment\">#마무리! 꼭 해주기!</span></span><br></pre></td></tr></table></figure>\n\n\n<p><img src=\"/images/0205/output_1_0.png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\">dates = [</span><br><span class=\"line\">    <span class=\"string\">&#x27;2021\\n01-01&#x27;</span>, <span class=\"string\">&#x27;2021\\n01-02&#x27;</span>, <span class=\"string\">&#x27;2021\\n01-03&#x27;</span>, <span class=\"string\">&#x27;2021\\n01-04&#x27;</span>, <span class=\"string\">&#x27;2021\\n01-05&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;2021\\n01-06&#x27;</span>, <span class=\"string\">&#x27;2021\\n01-07&#x27;</span>, <span class=\"string\">&#x27;2021\\n01-08&#x27;</span>, <span class=\"string\">&#x27;2021\\n01-09&#x27;</span>, <span class=\"string\">&#x27;2021\\n01-10&#x27;</span></span><br><span class=\"line\">]</span><br><span class=\"line\">min_temperature = [<span class=\"number\">20.7</span>, <span class=\"number\">17.9</span>, <span class=\"number\">18.8</span>, <span class=\"number\">14.6</span>, <span class=\"number\">15.8</span>, <span class=\"number\">15.8</span>, <span class=\"number\">15.8</span>, <span class=\"number\">17.4</span>, <span class=\"number\">21.8</span>, <span class=\"number\">20.0</span>]</span><br><span class=\"line\">max_temperature = [<span class=\"number\">34.7</span>, <span class=\"number\">28.9</span>, <span class=\"number\">31.8</span>, <span class=\"number\">25.6</span>, <span class=\"number\">28.8</span>, <span class=\"number\">21.8</span>, <span class=\"number\">22.8</span>, <span class=\"number\">28.4</span>, <span class=\"number\">30.8</span>, <span class=\"number\">32.0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">fig, axes = plt.subplots(nrows=<span class=\"number\">1</span>, ncols=<span class=\"number\">1</span>, figsize=(<span class=\"number\">10</span>,<span class=\"number\">6</span>)) <span class=\"comment\">#그래프 사이즈</span></span><br><span class=\"line\">axes.plot(dates, min_temperature, label = <span class=\"string\">&#x27;Min Temperature&#x27;</span>)</span><br><span class=\"line\">axes.plot(dates, max_temperature, label = <span class=\"string\">&#x27;Max Temperature&#x27;</span>)</span><br><span class=\"line\">axes.legend()</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n\n\n<p><img src=\"/images/0205/output_2_0.png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(fig)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(axes)</span><br></pre></td></tr></table></figure>\n\n<pre><code>Figure(720x432)\nAxesSubplot(0.125,0.125;0.775x0.755)\n</code></pre>\n<br>\n\n<h3 id=\"선-그래프\"><a href=\"#선-그래프\" class=\"headerlink\" title=\"선 그래프\"></a><strong>선 그래프</strong></h3><hr>\n<p><strong>방법 1. Pyplot API</strong>(비추천)</p>\n<ul>\n<li><p>참조: <a href=\"https://pypi.org/project/fix-yahoo-finance/\">https://pypi.org/project/fix-yahoo-finance/</a></p>\n</li>\n<li><p>yfinance란<br>오픈소스 API로, Yahoo Finance에서 제공하는 데이터에 접근 할 수 있다.<br>아래 예제에서는 주가 데이터를 받아 오기 위해서 사용하였다.</p>\n</li>\n<li><p>yfinance 함수를 사용하기 위한 패키지 다운로드</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">!pip install yfinance --upgrade --no-cache-<span class=\"built_in\">dir</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#주가 정보 가져오기</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> yfinance <span class=\"keyword\">as</span> yf</span><br><span class=\"line\">data = yf.download(<span class=\"string\">&#x27;AAPL&#x27;</span>, <span class=\"string\">&#x27;2019-08-01&#x27;</span>, <span class=\"string\">&#x27;2020-08-01&#x27;</span>)</span><br><span class=\"line\">data.info()</span><br></pre></td></tr></table></figure>\n\n<pre><code>[*********************100%***********************]  1 of 1 completed\n&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;\nDatetimeIndex: 253 entries, 2019-08-01 to 2020-07-31\nData columns (total 6 columns):\n #   Column     Non-Null Count  Dtype  \n---  ------     --------------  -----  \n 0   Open       253 non-null    float64\n 1   High       253 non-null    float64\n 2   Low        253 non-null    float64\n 3   Close      253 non-null    float64\n 4   Adj Close  253 non-null    float64\n 5   Volume     253 non-null    int64  \ndtypes: float64(5), int64(1)\nmemory usage: 13.8 KB\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ts = data[<span class=\"string\">&#x27;Open&#x27;</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(ts.head())</span><br></pre></td></tr></table></figure>\n\n<pre><code>Date\n2019-08-01    53.474998\n2019-08-02    51.382500\n2019-08-05    49.497501\n2019-08-06    49.077499\n2019-08-07    48.852501\nName: Open, dtype: float64\n</code></pre>\n<br>\n\n<p><strong>- plt.legend(loc=’best’)</strong><br>범례 위치를 best로 설정<br>best는 디폴트 값을 의미</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data = yf.download(<span class=\"string\">&#x27;AAPL&#x27;</span>, <span class=\"string\">&#x27;2019-08-01&#x27;</span>, <span class=\"string\">&#x27;2020-08-01&#x27;</span>)</span><br><span class=\"line\">ts = data[<span class=\"string\">&#x27;Open&#x27;</span>]</span><br><span class=\"line\">plt.figure(figsize=(<span class=\"number\">10</span>,<span class=\"number\">6</span>))</span><br><span class=\"line\">plt.plot(ts)</span><br><span class=\"line\">plt.legend(labels=[<span class=\"string\">&#x27;Price&#x27;</span>], loc=<span class=\"string\">&#x27;best&#x27;</span>)</span><br><span class=\"line\">plt.title(<span class=\"string\">&#x27;Stock Market fluctuation of AAPL&#x27;</span>) </span><br><span class=\"line\">plt.xlabel(<span class=\"string\">&#x27;Date&#x27;</span>) </span><br><span class=\"line\">plt.ylabel(<span class=\"string\">&#x27;Stock Market Open Price&#x27;</span>) </span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n\n<pre><code>[*********************100%***********************]  1 of 1 completed\n</code></pre>\n<p><img src=\"/images/0205/output_10_1.png\"></p>\n<br>\n\n<p><strong>방법2. 객체 지향 API</strong></p>\n<ul>\n<li>먼저 컴퓨터 프로그램에서의 랜덤값은 무작위 수가 아니라,<br>특정 시작 숫자값을 정해주면 정해진 알고리즘에 따라 마치 난수처럼 보이는 수열을 생성하는 것이다.<br>이때 특정 시작 숫자가 바로 **시드(seed)**이다</li>\n<li>시드 값은 현재 시각 등을 이용해 자동으로 정하기도 하지만,<br>사람이 수동으로 설정 할 수도 있다</li>\n<li>따라서 특정 시드값이 사용될 경우 이후에 발생되는 난수를 알고리즘에 따라 직접 예측이 가능하다</li>\n</ul>\n<br>\n\n<ul>\n<li>np.random.random(20000)<br>numpy를 이용해서 20000개의 난수를 생성한다</li>\n<li>random.seed()<br>seed 설정, 괄호 안에 0이상의 정수 값을 넣어주면 된다</li>\n<li>fig = Figure()<br>figure 객체 생성</li>\n<li>savefig(‘파일이름’)<br>그래프를 이미지 파일로 저장할 수 있다</li>\n<li>ax = fig.add_subplot(111)</li>\n<li>ax.hist(x, 100)<br>이거 모르게따@_2<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> matplotlib.backends.backend_agg <span class=\"keyword\">import</span> FigureCanvasAgg <span class=\"keyword\">as</span> FigureCanvas</span><br><span class=\"line\"><span class=\"keyword\">from</span> matplotlib.figure <span class=\"keyword\">import</span> Figure</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\">fig = Figure()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\">np.random.seed(<span class=\"number\">6</span>)</span><br><span class=\"line\">x = np.random.random(<span class=\"number\">20000</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">ax = fig.add_subplot(<span class=\"number\">111</span>)</span><br><span class=\"line\">ax.hist(x, <span class=\"number\">100</span>)</span><br><span class=\"line\">ax.set_title(<span class=\"string\">&#x27;Artist Layer Histogram&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">#fig.savefig(&#x27;Matplotlib_histogram.png&#x27;)</span></span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>방법3 Pyplot API + 객체지향 API</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data = yf.download(<span class=\"string\">&#x27;AAPL&#x27;</span>,<span class=\"string\">&#x27;2019-08-01&#x27;</span>,<span class=\"string\">&#x27;2020-08-01&#x27;</span>)</span><br><span class=\"line\">ts = data[<span class=\"string\">&#x27;Open&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">fig, ax = plt.subplots(figsize=(<span class=\"number\">10</span>,<span class=\"number\">6</span>)) </span><br><span class=\"line\">ax.plot(ts)</span><br><span class=\"line\">ax.set_title(<span class=\"string\">&#x27;Stock Market fluctuation of AAPL&#x27;</span>)</span><br><span class=\"line\">ax.set_xlabel(<span class=\"string\">&#x27;Date&#x27;</span>)</span><br><span class=\"line\">ax.set_ylabel(<span class=\"string\">&#x27;Stock Market Open Price&#x27;</span>)</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n\n<pre><code>[*********************100%***********************]  1 of 1 completed\n</code></pre>\n<p><img src=\"/images/0205/output_14_1.png\"></p>\n<h3 id=\"막대그래프\"><a href=\"#막대그래프\" class=\"headerlink\" title=\"막대그래프\"></a><strong>막대그래프</strong></h3><ul>\n<li><p>Tick 이란<br>그래프의 축에 간격을 구분하기 위해 표시하는 눈금이다<br>ex) xticks(), yticks()</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> calendar</span><br><span class=\"line\"></span><br><span class=\"line\">month_list = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>, <span class=\"number\">11</span>, <span class=\"number\">12</span>]</span><br><span class=\"line\">sold_list = [<span class=\"number\">300</span>, <span class=\"number\">400</span>, <span class=\"number\">550</span>, <span class=\"number\">900</span>, <span class=\"number\">600</span>, <span class=\"number\">960</span>, <span class=\"number\">900</span>, <span class=\"number\">910</span>, <span class=\"number\">800</span>, <span class=\"number\">700</span>, <span class=\"number\">550</span>, <span class=\"number\">450</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">fig, ax = plt.subplots(figsize=(<span class=\"number\">10</span>,<span class=\"number\">6</span>))</span><br><span class=\"line\">plt.xticks(month_list, calendar.month_name[<span class=\"number\">1</span>:<span class=\"number\">13</span>], rotation=<span class=\"number\">90</span>)</span><br><span class=\"line\">plot = ax.bar(month_list, sold_list)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> rect <span class=\"keyword\">in</span> plot:</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">&quot;graph:&quot;</span>, rect) </span><br><span class=\"line\">  height = rect.get_height()</span><br><span class=\"line\">  ax.text(rect.get_x() + rect.get_width()/<span class=\"number\">2.</span>, <span class=\"number\">1.002</span>*height,<span class=\"string\">&#x27;%d&#x27;</span> % <span class=\"built_in\">int</span>(height), ha=<span class=\"string\">&#x27;center&#x27;</span>, va=<span class=\"string\">&#x27;bottom&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n\n<p>  graph: Rectangle(xy=(0.6, 0), width=0.8, height=300, angle=0)<br>  graph: Rectangle(xy=(1.6, 0), width=0.8, height=400, angle=0)<br>  graph: Rectangle(xy=(2.6, 0), width=0.8, height=550, angle=0)<br>  graph: Rectangle(xy=(3.6, 0), width=0.8, height=900, angle=0)<br>  graph: Rectangle(xy=(4.6, 0), width=0.8, height=600, angle=0)<br>  graph: Rectangle(xy=(5.6, 0), width=0.8, height=960, angle=0)<br>  graph: Rectangle(xy=(6.6, 0), width=0.8, height=900, angle=0)<br>  graph: Rectangle(xy=(7.6, 0), width=0.8, height=910, angle=0)<br>  graph: Rectangle(xy=(8.6, 0), width=0.8, height=800, angle=0)<br>  graph: Rectangle(xy=(9.6, 0), width=0.8, height=700, angle=0)<br>  graph: Rectangle(xy=(10.6, 0), width=0.8, height=550, angle=0)<br>  graph: Rectangle(xy=(11.6, 0), width=0.8, height=450, angle=0)</p>\n</li>\n</ul>\n<p><img src=\"/images/0205/output_16_1.png\"></p>\n<p>선점도 그래프</p>\n<ul>\n<li>두개의 연속형 변수 (키, 몸무게)</li>\n<li>상관관계 != 인과관계</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#내장 데이터</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> seaborn <span class=\"keyword\">as</span> sns</span><br><span class=\"line\"></span><br><span class=\"line\">tips = sns.load_dataset(<span class=\"string\">&quot;tips&quot;</span>)</span><br><span class=\"line\">x = tips[<span class=\"string\">&#x27;total_bill&#x27;</span>]</span><br><span class=\"line\">y = tips[<span class=\"string\">&#x27;tip&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">fig, ax = plt.subplots(figsize=(<span class=\"number\">10</span>,<span class=\"number\">6</span>))</span><br><span class=\"line\">ax.scatter(x, y)</span><br><span class=\"line\">ax.set_xlabel(<span class=\"string\">&#x27;Totla Bill&#x27;</span>)</span><br><span class=\"line\">ax.set_ylabel(<span class=\"string\">&#x27;Tip&#x27;</span>)</span><br><span class=\"line\">ax.set_title(<span class=\"string\">&#x27;Tip ~ Total Bill&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n\n\n<p><img src=\"/images/0205/output_18_0.png\" alt=\"png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">label, data = tips.groupby(<span class=\"string\">&#x27;sex&#x27;</span>)</span><br><span class=\"line\">tips[<span class=\"string\">&#x27;sex_color&#x27;</span>] = tips[<span class=\"string\">&#x27;sex&#x27;</span>].<span class=\"built_in\">map</span>(&#123;<span class=\"string\">&quot;Female&quot;</span> : <span class=\"string\">&#x27;#0000FF&#x27;</span>,<span class=\"string\">&quot;Male&quot;</span> : <span class=\"string\">&quot;#00FF00&quot;</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">fig, ax = plt.subplots(figsize=(<span class=\"number\">10</span>,<span class=\"number\">6</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> label, data <span class=\"keyword\">in</span> tips.groupby(<span class=\"string\">&#x27;sex&#x27;</span>):</span><br><span class=\"line\">  ax.scatter(data[<span class=\"string\">&#x27;total_bill&#x27;</span>], data[<span class=\"string\">&#x27;tip&#x27;</span>], label=label, color=data[<span class=\"string\">&#x27;sex_color&#x27;</span>], alpha=<span class=\"number\">0.5</span>)</span><br><span class=\"line\">  </span><br><span class=\"line\">  ax.set_xlabel(<span class=\"string\">&#x27;Total Bill&#x27;</span>)</span><br><span class=\"line\">  ax.set_ylabel(<span class=\"string\">&#x27;Tip&#x27;</span>)</span><br><span class=\"line\">  ax.set_title(<span class=\"string\">&#x27;Tip ~ Total Bill by Gender&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">ax.legend()</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n\n\n<p><img src=\"/images/0205/output_19_0.png\" alt=\"png\"></p>\n<p>히스토그램</p>\n<p>수치형 변수</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> seaborn <span class=\"keyword\">as</span> sns</span><br><span class=\"line\"></span><br><span class=\"line\">titanic = sns.load_dataset(<span class=\"string\">&#x27;titanic&#x27;</span>)</span><br><span class=\"line\">age = titanic[<span class=\"string\">&#x27;age&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">nbins = <span class=\"number\">21</span></span><br><span class=\"line\">fig, ax = plt.subplots(figsize=(<span class=\"number\">10</span>,<span class=\"number\">6</span>))</span><br><span class=\"line\">ax.hist(age, bins = nbins)</span><br><span class=\"line\">ax.set_xlabel(<span class=\"string\">&quot;Age&quot;</span>)</span><br><span class=\"line\">ax.set_ylabel(<span class=\"string\">&quot;Frequency&quot;</span>)</span><br><span class=\"line\">ax.set_title(<span class=\"string\">&quot;Distribution of Aae in  Titanic&quot;</span>)</span><br><span class=\"line\">ax.axvline(x = age.mean(),linewidth = <span class=\"number\">2</span>, color = <span class=\"string\">&#x27;r&#x27;</span>)</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n\n\n<p><img src=\"/images/0205/output_22_0.png\" alt=\"png\"></p>\n<p>박스 플롯</p>\n<ul>\n<li>x축 변수: 범주형 변수, 그룹과 관련있는 변수, 문자열</li>\n<li>y축 변수: 수치형 변수</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iris = sns.load_dataset(<span class=\"string\">&#x27;iris&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">data = [iris[iris[<span class=\"string\">&#x27;species&#x27;</span>]==<span class=\"string\">&quot;setosa&quot;</span>][<span class=\"string\">&#x27;petal_width&#x27;</span>],</span><br><span class=\"line\">        iris[iris[<span class=\"string\">&#x27;species&#x27;</span>]==<span class=\"string\">&quot;versicolor&quot;</span>][<span class=\"string\">&#x27;petal_width&#x27;</span>],</span><br><span class=\"line\">        iris[iris[<span class=\"string\">&#x27;species&#x27;</span>]==<span class=\"string\">&quot;virginica&quot;</span>][<span class=\"string\">&#x27;petal_width&#x27;</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\">fig, ax = plt.subplots(figsize=(<span class=\"number\">10</span>, <span class=\"number\">6</span>))</span><br><span class=\"line\">ax.boxplot(data, labels=[<span class=\"string\">&#x27;setosa&#x27;</span>, <span class=\"string\">&#x27;versicolor&#x27;</span>, <span class=\"string\">&#x27;virginica&#x27;</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n\n\n<p><img src=\"/images/0205/output_25_0.png\" alt=\"png\"></p>\n<p>히트맵</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> seaborn <span class=\"keyword\">as</span> sns</span><br><span class=\"line\"></span><br><span class=\"line\">flights = sns.load_dataset(<span class=\"string\">&quot;flights&quot;</span>)     <span class=\"comment\">#내장 데이터</span></span><br><span class=\"line\">flights = flights.pivot(<span class=\"string\">&quot;month&quot;</span>, <span class=\"string\">&quot;year&quot;</span>,<span class=\"string\">&quot;passengers&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fig, ax = plt.subplots(figsize = (<span class=\"number\">12</span>,<span class=\"number\">6</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">im = ax.imshow(flights, cmap = <span class=\"string\">&#x27;YlGnBu&#x27;</span>) <span class=\"comment\">#cmap은 colormap, YlGnBu은 색상</span></span><br><span class=\"line\"></span><br><span class=\"line\">ax.set_xticklabels(flights.columns, rotation = <span class=\"number\">20</span>)</span><br><span class=\"line\">ax.set_yticklabels(flights.index, rotation = <span class=\"number\">10</span>)</span><br><span class=\"line\">fig.colorbar(im)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n\n\n<p><img src=\"/images/0205/output_27_0.png\" alt=\"png\"></p>\n<p>Seaborn</p>\n<p>산점도와 회귀선이 있는 산점도</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%matplotlib inline </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"><span class=\"keyword\">import</span> seaborn <span class=\"keyword\">as</span> sns</span><br><span class=\"line\"></span><br><span class=\"line\">tips = sns.load_dataset(<span class=\"string\">&quot;tips&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">#print(tips)</span></span><br><span class=\"line\">sns.scatterplot(x = <span class=\"string\">&quot;total_bill&quot;</span>, y = <span class=\"string\">&quot;tip&quot;</span>, data = tips)</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n\n\n<p><img src=\"/images/0205/output_30_0.png\" alt=\"png\"></p>\n<ul>\n<li>fig, ax = plt.subplots(ncols=2)<br>세로로 2개의 그래프를 그림<br>nrows=2이면 가로로 그래프를 2개 그림<br>nrows=2, nols=3이면 2행 3열로 그래프를 그림</li>\n<li><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fig, ax = plt.subplots(nrows = <span class=\"number\">1</span>, ncols = <span class=\"number\">2</span>, figsize=(<span class=\"number\">15</span>, <span class=\"number\">5</span>))  <span class=\"comment\">#이런식으로 그래프 그리는방법을 각인시키기</span></span><br><span class=\"line\">sns.regplot(x = <span class=\"string\">&quot;total_bill&quot;</span>, </span><br><span class=\"line\">            y = <span class=\"string\">&quot;tip&quot;</span>, </span><br><span class=\"line\">            data = tips, </span><br><span class=\"line\">            ax = ax[<span class=\"number\">0</span>], </span><br><span class=\"line\">            fit_reg = <span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">sns.regplot(x = <span class=\"string\">&quot;total_bill&quot;</span>, </span><br><span class=\"line\">            y = <span class=\"string\">&quot;tip&quot;</span>, </span><br><span class=\"line\">            data = tips, </span><br><span class=\"line\">            ax = ax[<span class=\"number\">1</span>], </span><br><span class=\"line\">            fit_reg = <span class=\"literal\">False</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p><img src=\"/images/0205/output_31_0.png\" alt=\"png\"></p>\n<p>히스토그램/커널 밀도 그래프</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"><span class=\"keyword\">import</span> seaborn <span class=\"keyword\">as</span> sns</span><br><span class=\"line\"></span><br><span class=\"line\">tips = sns.load_dataset(<span class=\"string\">&quot;tips&quot;</span>)   <span class=\"comment\"># 이렇게 하지 말깅!</span></span><br><span class=\"line\">sns.displot(x = <span class=\"string\">&quot;tip&quot;</span>, data = tips)</span><br><span class=\"line\">plt.figure(figsize=(<span class=\"number\">10</span>,<span class=\"number\">6</span>))</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n\n\n<p><img src=\"/images/0205/output_33_0.png\" alt=\"png\"></p>\n<pre><code>&lt;Figure size 720x432 with 0 Axes&gt;\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sns.displot(x=<span class=\"string\">&quot;tip&quot;</span>,kind =<span class=\"string\">&quot;kde&quot;</span>, data=tips)</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n\n\n<p><img src=\"/images/0205/output_34_0.png\" alt=\"png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sns.displot(x=<span class=\"string\">&quot;tip&quot;</span>,kde=<span class=\"literal\">True</span>, data=tips)</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n\n\n<p><img src=\"/images/0205/output_35_0.png\" alt=\"png\"></p>\n<p>박스플롯</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sns.boxplot(x = <span class=\"string\">&quot;day&quot;</span>, y = <span class=\"string\">&quot;total_bill&quot;</span>, data =tips)</span><br><span class=\"line\">sns.swarmplot(x = <span class=\"string\">&quot;day&quot;</span>, y = <span class=\"string\">&quot;total_bill&quot;</span>, data = tips, alpha= <span class=\"number\">.25</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n\n<pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x7face917d410&gt;\n</code></pre>\n<p><img src=\"/images/0205/output_37_1.png\" alt=\"png\"></p>\n<p>막대 그래프</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sns.countplot (x=<span class=\"string\">&quot;day&quot;</span>, data = tips)</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n\n\n<p><img src=\"/images/0205/output_39_0.png\" alt=\"png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(tips[<span class=\"string\">&#x27;day&#x27;</span>].value_counts())</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;index: &quot;</span>, tips[<span class=\"string\">&#x27;day&#x27;</span>].value_counts().index)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;values: &quot;</span>, tips[<span class=\"string\">&#x27;day&#x27;</span>].value_counts().values)</span><br></pre></td></tr></table></figure>\n\n<pre><code>Sat     87\nSun     76\nThur    62\nFri     19\nName: day, dtype: int64\nindex:  CategoricalIndex([&#39;Sat&#39;, &#39;Sun&#39;, &#39;Thur&#39;, &#39;Fri&#39;], categories=[&#39;Thur&#39;, &#39;Fri&#39;, &#39;Sat&#39;, &#39;Sun&#39;], ordered=False, dtype=&#39;category&#39;)\nvalues:  [87 76 62 19]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(tips[<span class=\"string\">&#x27;day&#x27;</span>].value_counts(ascending=<span class=\"literal\">True</span>))</span><br></pre></td></tr></table></figure>\n\n<pre><code>Fri     19\nThur    62\nSun     76\nSat     87\nName: day, dtype: int64\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ax = sns.countplot(x = <span class=\"string\">&quot;day&quot;</span>, data = tips, order = tips[<span class=\"string\">&#x27;day&#x27;</span>].value_counts().index)</span><br><span class=\"line\"><span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> ax.patches:</span><br><span class=\"line\">  height = p.get_height()</span><br><span class=\"line\">  ax.text(p.get_x() + p.get_width()/<span class=\"number\">2.</span>, height+<span class=\"number\">3</span>, height, ha = <span class=\"string\">&#x27;center&#x27;</span>, size=<span class=\"number\">9</span>)</span><br><span class=\"line\">ax.set_ylim(-<span class=\"number\">5</span>, <span class=\"number\">100</span>)</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n\n\n<p><img src=\"/images/0205/output_43_0.png\" alt=\"png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ax = sns.countplot(x = <span class=\"string\">&quot;day&quot;</span>, data = tips, hue = <span class=\"string\">&quot;sex&quot;</span>, dodge = <span class=\"literal\">True</span>,</span><br><span class=\"line\">              order = tips[<span class=\"string\">&#x27;day&#x27;</span>].value_counts().index)</span><br><span class=\"line\"><span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> ax.patches:</span><br><span class=\"line\">  height = p.get_height()</span><br><span class=\"line\">  ax.text(p.get_x() + p.get_width()/<span class=\"number\">2.</span>, height+<span class=\"number\">3</span>, height, ha = <span class=\"string\">&#x27;center&#x27;</span>, size=<span class=\"number\">9</span>)</span><br><span class=\"line\">ax.set_ylim(-<span class=\"number\">5</span>, <span class=\"number\">100</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n\n\n<p><img src=\"/images/0205/output_44_0.png\" alt=\"png\"></p>\n<p>상관관계 그래프</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd </span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np </span><br><span class=\"line\"><span class=\"keyword\">import</span> seaborn <span class=\"keyword\">as</span> sns</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\">mpg = sns.load_dataset(<span class=\"string\">&quot;mpg&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(mpg.shape) <span class=\"comment\"># 398 행, 9개 열</span></span><br><span class=\"line\"></span><br><span class=\"line\">num_mpg = mpg.select_dtypes(include = np.number)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(num_mpg.shape) <span class=\"comment\"># 398 행, 7개 열</span></span><br></pre></td></tr></table></figure>\n\n<pre><code>(398, 9)\n(398, 7)\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">num_mpg.info()</span><br></pre></td></tr></table></figure>\n\n<pre><code>&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;\nRangeIndex: 398 entries, 0 to 397\nData columns (total 7 columns):\n #   Column        Non-Null Count  Dtype  \n---  ------        --------------  -----  \n 0   mpg           398 non-null    float64\n 1   cylinders     398 non-null    int64  \n 2   displacement  398 non-null    float64\n 3   horsepower    392 non-null    float64\n 4   weight        398 non-null    int64  \n 5   acceleration  398 non-null    float64\n 6   model_year    398 non-null    int64  \ndtypes: float64(4), int64(3)\nmemory usage: 21.9 KB\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">num_mpg.corr()</span><br></pre></td></tr></table></figure>\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n<pre><code>.dataframe tbody tr th &#123;\n    vertical-align: top;\n&#125;\n\n.dataframe thead th &#123;\n    text-align: right;\n&#125;\n</code></pre>\n<p></style></p>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>mpg</th>\n      <th>cylinders</th>\n      <th>displacement</th>\n      <th>horsepower</th>\n      <th>weight</th>\n      <th>acceleration</th>\n      <th>model_year</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>mpg</th>\n      <td>1.000000</td>\n      <td>-0.775396</td>\n      <td>-0.804203</td>\n      <td>-0.778427</td>\n      <td>-0.831741</td>\n      <td>0.420289</td>\n      <td>0.579267</td>\n    </tr>\n    <tr>\n      <th>cylinders</th>\n      <td>-0.775396</td>\n      <td>1.000000</td>\n      <td>0.950721</td>\n      <td>0.842983</td>\n      <td>0.896017</td>\n      <td>-0.505419</td>\n      <td>-0.348746</td>\n    </tr>\n    <tr>\n      <th>displacement</th>\n      <td>-0.804203</td>\n      <td>0.950721</td>\n      <td>1.000000</td>\n      <td>0.897257</td>\n      <td>0.932824</td>\n      <td>-0.543684</td>\n      <td>-0.370164</td>\n    </tr>\n    <tr>\n      <th>horsepower</th>\n      <td>-0.778427</td>\n      <td>0.842983</td>\n      <td>0.897257</td>\n      <td>1.000000</td>\n      <td>0.864538</td>\n      <td>-0.689196</td>\n      <td>-0.416361</td>\n    </tr>\n    <tr>\n      <th>weight</th>\n      <td>-0.831741</td>\n      <td>0.896017</td>\n      <td>0.932824</td>\n      <td>0.864538</td>\n      <td>1.000000</td>\n      <td>-0.417457</td>\n      <td>-0.306564</td>\n    </tr>\n    <tr>\n      <th>acceleration</th>\n      <td>0.420289</td>\n      <td>-0.505419</td>\n      <td>-0.543684</td>\n      <td>-0.689196</td>\n      <td>-0.417457</td>\n      <td>1.000000</td>\n      <td>0.288137</td>\n    </tr>\n    <tr>\n      <th>model_year</th>\n      <td>0.579267</td>\n      <td>-0.348746</td>\n      <td>-0.370164</td>\n      <td>-0.416361</td>\n      <td>-0.306564</td>\n      <td>0.288137</td>\n      <td>1.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fig, ax = plt.subplots(nrows = <span class=\"number\">1</span>, ncols = <span class=\"number\">2</span>, figsize=(<span class=\"number\">16</span>, <span class=\"number\">5</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#  기본 그래프 [Basic Correlation Heatmap]</span></span><br><span class=\"line\">sns.heatmap(num_mpg.corr(), ax=ax[<span class=\"number\">0</span>])</span><br><span class=\"line\">ax[<span class=\"number\">0</span>].set_title(<span class=\"string\">&#x27;Basic Correlation Heatmap&#x27;</span>, pad = <span class=\"number\">12</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 상관관계 수치 그래프 [Correlation Heatmap with Number]</span></span><br><span class=\"line\">sns.heatmap(num_mpg.corr(), vmin=-<span class=\"number\">1</span>, vmax=<span class=\"number\">1</span>, annot=<span class=\"literal\">True</span>, ax=ax[<span class=\"number\">1</span>])</span><br><span class=\"line\">ax[<span class=\"number\">1</span>].set_title(<span class=\"string\">&#x27;Correlation Heatmap with Number&#x27;</span>, pad = <span class=\"number\">12</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n\n\n<p><img src=\"/images/0205/output_49_0.png\" alt=\"png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">int</span>(<span class=\"literal\">True</span>))</span><br><span class=\"line\">np.triu(np.ones_like(num_mpg.corr()))</span><br></pre></td></tr></table></figure>\n\n<pre><code>1\n\n\n\n\n\narray([[1., 1., 1., 1., 1., 1., 1.],\n       [0., 1., 1., 1., 1., 1., 1.],\n       [0., 0., 1., 1., 1., 1., 1.],\n       [0., 0., 0., 1., 1., 1., 1.],\n       [0., 0., 0., 0., 1., 1., 1.],\n       [0., 0., 0., 0., 0., 1., 1.],\n       [0., 0., 0., 0., 0., 0., 1.]])\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mask = np.triu(np.ones_like(num_mpg.corr(), dtype=np.<span class=\"built_in\">bool</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(mask)</span><br></pre></td></tr></table></figure>\n\n<pre><code>[[ True  True  True  True  True  True  True]\n [False  True  True  True  True  True  True]\n [False False  True  True  True  True  True]\n [False False False  True  True  True  True]\n [False False False False  True  True  True]\n [False False False False False  True  True]\n [False False False False False False  True]]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fig, ax = plt.subplots(figsize=(<span class=\"number\">16</span>, <span class=\"number\">5</span>))  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#  기본 그래프 [Basic Correlation Heatmap]</span></span><br><span class=\"line\">ax = sns.heatmap(num_mpg.corr(), mask=mask, </span><br><span class=\"line\">                 vmin=-<span class=\"number\">1</span>, vmax = <span class=\"number\">1</span>, </span><br><span class=\"line\">                 annot=<span class=\"literal\">True</span>, </span><br><span class=\"line\">                 cmap=<span class=\"string\">&quot;BrBG&quot;</span>, cbar = <span class=\"literal\">True</span>)</span><br><span class=\"line\">ax.set_title(<span class=\"string\">&#x27;Triangle Correlation Heatmap&#x27;</span>, pad = <span class=\"number\">16</span>, size = <span class=\"number\">16</span>)</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n\n\n<p><img src=\"/images/0205/output_52_0.png\" alt=\"png\"></p>\n<p>Intermediate</p>\n<p>페가 블로그 코드</p>\n<p><a href=\"https://jehyunlee.github.io/2020/08/27/Python-DS-28-mpl_spines_grids/\">https://jehyunlee.github.io/2020/08/27/Python-DS-28-mpl_spines_grids/</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"><span class=\"keyword\">from</span> matplotlib.ticker <span class=\"keyword\">import</span> (MultipleLocator, AutoMinorLocator, FuncFormatter)</span><br><span class=\"line\"><span class=\"keyword\">import</span> seaborn <span class=\"keyword\">as</span> sns</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">plot_example</span>(<span class=\"params\">ax, zorder=<span class=\"number\">0</span></span>):</span></span><br><span class=\"line\">    ax.bar(tips_day[<span class=\"string\">&quot;day&quot;</span>], tips_day[<span class=\"string\">&quot;tip&quot;</span>], color=<span class=\"string\">&quot;lightgray&quot;</span>, zorder=zorder)</span><br><span class=\"line\">    ax.set_title(<span class=\"string\">&quot;tip (mean)&quot;</span>, fontsize=<span class=\"number\">16</span>, pad=<span class=\"number\">12</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Values</span></span><br><span class=\"line\">    h_pad = <span class=\"number\">0.1</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">4</span>):</span><br><span class=\"line\">        fontweight = <span class=\"string\">&quot;normal&quot;</span></span><br><span class=\"line\">        color = <span class=\"string\">&quot;k&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> i == <span class=\"number\">3</span>:</span><br><span class=\"line\">            fontweight = <span class=\"string\">&quot;bold&quot;</span></span><br><span class=\"line\">            color = <span class=\"string\">&quot;darkred&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        ax.text(i, tips_day[<span class=\"string\">&quot;tip&quot;</span>].loc[i] + h_pad, <span class=\"string\">f&quot;<span class=\"subst\">&#123;tips_day[<span class=\"string\">&#x27;tip&#x27;</span>].loc[i]:<span class=\"number\">0.2</span>f&#125;</span>&quot;</span>, </span><br><span class=\"line\">                horizontalalignment=<span class=\"string\">&#x27;center&#x27;</span>, fontsize=<span class=\"number\">12</span>, fontweight=fontweight, color=color)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Sunday</span></span><br><span class=\"line\">    ax.patches[<span class=\"number\">3</span>].set_facecolor(<span class=\"string\">&quot;darkred&quot;</span>)</span><br><span class=\"line\">    ax.patches[<span class=\"number\">3</span>].set_edgecolor(<span class=\"string\">&quot;black&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># set_range</span></span><br><span class=\"line\">    ax.set_ylim(<span class=\"number\">0</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ax</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">major_formatter</span>(<span class=\"params\">x, pos</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;&#123;%.2f&#125;&quot;</span> % x</span><br><span class=\"line\">formatter = FuncFormatter(major_formatter)</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tips = sns.load_dataset(<span class=\"string\">&quot;tips&quot;</span>)</span><br><span class=\"line\">tips_day = tips.groupby(<span class=\"string\">&quot;day&quot;</span>).mean().reset_index()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(tips_day)</span><br></pre></td></tr></table></figure>\n\n<pre><code>    day  total_bill       tip      size\n0  Thur   17.682742  2.771452  2.451613\n1   Fri   17.151579  2.734737  2.105263\n2   Sat   20.441379  2.993103  2.517241\n3   Sun   21.410000  3.255132  2.842105\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fig, ax = plt.subplots(figsize=(<span class=\"number\">10</span>, <span class=\"number\">6</span>))</span><br><span class=\"line\">ax = plot_example(ax, zorder=<span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n\n\n<p><img src=\"/images/0205/output_59_0.png\" alt=\"png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fig, ax = plt.subplots(figsize=(<span class=\"number\">10</span>, <span class=\"number\">6</span>))</span><br><span class=\"line\">ax = plot_example(ax, zorder=<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">ax.spines[<span class=\"string\">&quot;top&quot;</span>].set_visible(<span class=\"literal\">False</span>)</span><br><span class=\"line\">ax.spines[<span class=\"string\">&quot;right&quot;</span>].set_visible(<span class=\"literal\">False</span>)</span><br><span class=\"line\">ax.spines[<span class=\"string\">&quot;left&quot;</span>].set_visible(<span class=\"literal\">False</span>)</span><br></pre></td></tr></table></figure>\n\n\n<p><img src=\"/images/0205/output_60_0.png\" alt=\"png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fig, ax = plt.subplots()</span><br><span class=\"line\">ax = plot_example(ax, zorder=<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">ax.spines[<span class=\"string\">&quot;top&quot;</span>].set_visible(<span class=\"literal\">False</span>)</span><br><span class=\"line\">ax.spines[<span class=\"string\">&quot;right&quot;</span>].set_visible(<span class=\"literal\">False</span>)</span><br><span class=\"line\">ax.spines[<span class=\"string\">&quot;left&quot;</span>].set_visible(<span class=\"literal\">False</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">ax.yaxis.set_major_locator(MultipleLocator(<span class=\"number\">1</span>))</span><br><span class=\"line\">ax.yaxis.set_major_formatter(formatter)</span><br><span class=\"line\">ax.yaxis.set_minor_locator(MultipleLocator(<span class=\"number\">0.5</span>))</span><br></pre></td></tr></table></figure>\n\n\n<p><img src=\"/images/0205/output_61_0.png\" alt=\"png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fig, ax = plt.subplots()</span><br><span class=\"line\">ax = plot_example(ax, zorder=<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">ax.spines[<span class=\"string\">&quot;top&quot;</span>].set_visible(<span class=\"literal\">False</span>)</span><br><span class=\"line\">ax.spines[<span class=\"string\">&quot;right&quot;</span>].set_visible(<span class=\"literal\">False</span>)</span><br><span class=\"line\">ax.spines[<span class=\"string\">&quot;left&quot;</span>].set_visible(<span class=\"literal\">False</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">ax.yaxis.set_major_locator(MultipleLocator(<span class=\"number\">1</span>))</span><br><span class=\"line\">ax.yaxis.set_major_formatter(formatter)</span><br><span class=\"line\">ax.yaxis.set_minor_locator(MultipleLocator(<span class=\"number\">0.5</span>))</span><br><span class=\"line\">    </span><br><span class=\"line\">ax.grid(axis=<span class=\"string\">&quot;y&quot;</span>, which=<span class=\"string\">&quot;major&quot;</span>, color=<span class=\"string\">&quot;lightgray&quot;</span>)</span><br><span class=\"line\">ax.grid(axis=<span class=\"string\">&quot;y&quot;</span>, which=<span class=\"string\">&quot;minor&quot;</span>, ls=<span class=\"string\">&quot;:&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n\n<p><img src=\"/images/0205/output_62_0.png\" alt=\"png\"></p>\n<p>책 코드</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"><span class=\"keyword\">from</span> matplotlib.ticker <span class=\"keyword\">import</span> (MultipleLocator, AutoMinorLocator, FuncFormatter)</span><br><span class=\"line\"><span class=\"keyword\">import</span> seaborn <span class=\"keyword\">as</span> sns</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"></span><br><span class=\"line\">tips = sns.load_dataset(<span class=\"string\">&quot;tips&quot;</span>)</span><br><span class=\"line\">fig, ax = plt.subplots(nrows = <span class=\"number\">1</span>, ncols = <span class=\"number\">2</span>, figsize=(<span class=\"number\">16</span>, <span class=\"number\">5</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">major_formatter</span>(<span class=\"params\">x, pos</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;%.2f$&quot;</span> % x</span><br><span class=\"line\">formatter = FuncFormatter(major_formatter)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Ideal Bar Graph</span></span><br><span class=\"line\">ax0 = sns.barplot(x = <span class=\"string\">&quot;day&quot;</span>, y = <span class=\"string\">&#x27;total_bill&#x27;</span>, data = tips, </span><br><span class=\"line\">                  ci=<span class=\"literal\">None</span>, color=<span class=\"string\">&#x27;lightgray&#x27;</span>, alpha=<span class=\"number\">0.85</span>, zorder=<span class=\"number\">2</span>, </span><br><span class=\"line\">                  ax=ax[<span class=\"number\">0</span>])</span><br></pre></td></tr></table></figure>\n\n\n<p><img src=\"/images/0205/output_64_0.png\" alt=\"png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">group_mean = tips.groupby([<span class=\"string\">&#x27;day&#x27;</span>])[<span class=\"string\">&#x27;total_bill&#x27;</span>].agg(<span class=\"string\">&#x27;mean&#x27;</span>)</span><br><span class=\"line\">h_day = group_mean.sort_values(ascending=<span class=\"literal\">False</span>).index[<span class=\"number\">0</span>]</span><br><span class=\"line\">h_mean = np.<span class=\"built_in\">round</span>(group_mean.sort_values(ascending=<span class=\"literal\">False</span>)[<span class=\"number\">0</span>], <span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;The Best Day:&quot;</span>, h_day)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;The Highest Avg. Total Biil:&quot;</span>, h_mean)</span><br></pre></td></tr></table></figure>\n\n<pre><code>The Best Day: Sun\nThe Highest Avg. Total Biil: 21.41\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tips = sns.load_dataset(<span class=\"string\">&quot;tips&quot;</span>)</span><br><span class=\"line\">fig, ax = plt.subplots(nrows = <span class=\"number\">1</span>, ncols = <span class=\"number\">2</span>, figsize=(<span class=\"number\">16</span>, <span class=\"number\">5</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Ideal Bar Graph</span></span><br><span class=\"line\">ax0 = sns.barplot(x = <span class=\"string\">&quot;day&quot;</span>, y = <span class=\"string\">&#x27;total_bill&#x27;</span>, data = tips, </span><br><span class=\"line\">                  ci=<span class=\"literal\">None</span>, color=<span class=\"string\">&#x27;lightgray&#x27;</span>, alpha=<span class=\"number\">0.85</span>, zorder=<span class=\"number\">2</span>, </span><br><span class=\"line\">                  ax=ax[<span class=\"number\">0</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">group_mean = tips.groupby([<span class=\"string\">&#x27;day&#x27;</span>])[<span class=\"string\">&#x27;total_bill&#x27;</span>].agg(<span class=\"string\">&#x27;mean&#x27;</span>)</span><br><span class=\"line\">h_day = group_mean.sort_values(ascending=<span class=\"literal\">False</span>).index[<span class=\"number\">0</span>]</span><br><span class=\"line\">h_mean = np.<span class=\"built_in\">round</span>(group_mean.sort_values(ascending=<span class=\"literal\">False</span>)[<span class=\"number\">0</span>], <span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> ax0.patches:</span><br><span class=\"line\">  fontweight = <span class=\"string\">&quot;normal&quot;</span></span><br><span class=\"line\">  color = <span class=\"string\">&quot;k&quot;</span></span><br><span class=\"line\">  height = np.<span class=\"built_in\">round</span>(p.get_height(), <span class=\"number\">2</span>)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> h_mean == height:</span><br><span class=\"line\">    fontweight=<span class=\"string\">&quot;bold&quot;</span></span><br><span class=\"line\">    color=<span class=\"string\">&quot;darkred&quot;</span></span><br><span class=\"line\">    p.set_facecolor(color)</span><br><span class=\"line\">    p.set_edgecolor(<span class=\"string\">&quot;black&quot;</span>)</span><br><span class=\"line\">  ax0.text(p.get_x() + p.get_width()/<span class=\"number\">2.</span>, height+<span class=\"number\">1</span>, height, ha = <span class=\"string\">&#x27;center&#x27;</span>, size=<span class=\"number\">12</span>, fontweight=fontweight, color=color)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n\n\n<p><img src=\"/images/0205/output_66_0.png\" alt=\"png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"><span class=\"keyword\">from</span> matplotlib.ticker <span class=\"keyword\">import</span> (MultipleLocator, AutoMinorLocator, FuncFormatter)</span><br><span class=\"line\"><span class=\"keyword\">import</span> seaborn <span class=\"keyword\">as</span> sns</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"></span><br><span class=\"line\">tips = sns.load_dataset(<span class=\"string\">&quot;tips&quot;</span>)</span><br><span class=\"line\">fig, ax = plt.subplots(nrows = <span class=\"number\">1</span>, ncols = <span class=\"number\">2</span>, figsize=(<span class=\"number\">16</span>, <span class=\"number\">5</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">major_formatter</span>(<span class=\"params\">x, pos</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;%.2f$&quot;</span> % x</span><br><span class=\"line\">formatter = FuncFormatter(major_formatter)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Ideal Bar Graph</span></span><br><span class=\"line\">ax0 = sns.barplot(x = <span class=\"string\">&quot;day&quot;</span>, y = <span class=\"string\">&#x27;total_bill&#x27;</span>, data = tips, </span><br><span class=\"line\">                  ci=<span class=\"literal\">None</span>, color=<span class=\"string\">&#x27;lightgray&#x27;</span>, alpha=<span class=\"number\">0.85</span>, zorder=<span class=\"number\">2</span>, </span><br><span class=\"line\">                  ax=ax[<span class=\"number\">0</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">group_mean = tips.groupby([<span class=\"string\">&#x27;day&#x27;</span>])[<span class=\"string\">&#x27;total_bill&#x27;</span>].agg(<span class=\"string\">&#x27;mean&#x27;</span>)</span><br><span class=\"line\">h_day = group_mean.sort_values(ascending=<span class=\"literal\">False</span>).index[<span class=\"number\">0</span>]</span><br><span class=\"line\">h_mean = np.<span class=\"built_in\">round</span>(group_mean.sort_values(ascending=<span class=\"literal\">False</span>)[<span class=\"number\">0</span>], <span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> ax0.patches:</span><br><span class=\"line\">  fontweight = <span class=\"string\">&quot;normal&quot;</span></span><br><span class=\"line\">  color = <span class=\"string\">&quot;k&quot;</span></span><br><span class=\"line\">  height = np.<span class=\"built_in\">round</span>(p.get_height(), <span class=\"number\">2</span>)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> h_mean == height:</span><br><span class=\"line\">    fontweight=<span class=\"string\">&quot;bold&quot;</span></span><br><span class=\"line\">    color=<span class=\"string\">&quot;darkred&quot;</span></span><br><span class=\"line\">    p.set_facecolor(color)</span><br><span class=\"line\">    p.set_edgecolor(<span class=\"string\">&quot;black&quot;</span>)</span><br><span class=\"line\">  ax0.text(p.get_x() + p.get_width()/<span class=\"number\">2.</span>, height+<span class=\"number\">1</span>, height, ha = <span class=\"string\">&#x27;center&#x27;</span>, size=<span class=\"number\">12</span>, fontweight=fontweight, color=color)</span><br><span class=\"line\"></span><br><span class=\"line\">ax0.set_ylim(-<span class=\"number\">3</span>, <span class=\"number\">30</span>)</span><br><span class=\"line\">ax0.set_title(<span class=\"string\">&quot;Ideal Bar Graph&quot;</span>, size = <span class=\"number\">16</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">ax0.spines[<span class=\"string\">&#x27;top&#x27;</span>].set_visible(<span class=\"literal\">False</span>)</span><br><span class=\"line\">ax0.spines[<span class=\"string\">&#x27;left&#x27;</span>].set_position((<span class=\"string\">&quot;outward&quot;</span>, <span class=\"number\">20</span>))</span><br><span class=\"line\">ax0.spines[<span class=\"string\">&#x27;left&#x27;</span>].set_visible(<span class=\"literal\">False</span>)</span><br><span class=\"line\">ax0.spines[<span class=\"string\">&#x27;right&#x27;</span>].set_visible(<span class=\"literal\">False</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">ax0.yaxis.set_major_locator(MultipleLocator(<span class=\"number\">10</span>))</span><br><span class=\"line\">ax0.yaxis.set_major_formatter(formatter)</span><br><span class=\"line\">ax0.yaxis.set_minor_locator(MultipleLocator(<span class=\"number\">5</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">ax0.set_ylabel(<span class=\"string\">&quot;Avg. Total Bill($)&quot;</span>, fontsize=<span class=\"number\">14</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">ax0.grid(axis=<span class=\"string\">&quot;y&quot;</span>, which=<span class=\"string\">&quot;major&quot;</span>, color=<span class=\"string\">&quot;lightgray&quot;</span>)</span><br><span class=\"line\">ax0.grid(axis=<span class=\"string\">&quot;y&quot;</span>, which=<span class=\"string\">&quot;minor&quot;</span>, ls=<span class=\"string\">&quot;:&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">ax0.set_xlabel(<span class=\"string\">&quot;Weekday&quot;</span>, fontsize=<span class=\"number\">14</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> xtick <span class=\"keyword\">in</span> ax0.get_xticklabels():</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(xtick)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> xtick.get_text() == h_day:</span><br><span class=\"line\">    xtick.set_color(<span class=\"string\">&quot;darkred&quot;</span>)</span><br><span class=\"line\">    xtick.set_fontweight(<span class=\"string\">&quot;demibold&quot;</span>)</span><br><span class=\"line\">ax0.set_xticklabels([<span class=\"string\">&#x27;Thursday&#x27;</span>, <span class=\"string\">&#x27;Friday&#x27;</span>, <span class=\"string\">&#x27;Saturday&#x27;</span>, <span class=\"string\">&#x27;Sunday&#x27;</span>], size=<span class=\"number\">12</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">ax1 = sns.barplot(x = <span class=\"string\">&quot;day&quot;</span>, y = <span class=\"string\">&#x27;total_bill&#x27;</span>, data = tips, </span><br><span class=\"line\">                  ci=<span class=\"literal\">None</span>, alpha=<span class=\"number\">0.85</span>, </span><br><span class=\"line\">                  ax=ax[<span class=\"number\">1</span>])</span><br><span class=\"line\"><span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> ax1.patches:</span><br><span class=\"line\">  height = np.<span class=\"built_in\">round</span>(p.get_height(), <span class=\"number\">2</span>)</span><br><span class=\"line\">  ax1.text(p.get_x() + p.get_width()/<span class=\"number\">2.</span>, height+<span class=\"number\">1</span>, height, ha = <span class=\"string\">&#x27;center&#x27;</span>, size=<span class=\"number\">12</span>)</span><br><span class=\"line\">ax1.set_ylim(-<span class=\"number\">3</span>, <span class=\"number\">30</span>)</span><br><span class=\"line\">ax1.set_title(<span class=\"string\">&quot;Just Bar Graph&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n\n<pre><code>Text(0, 0, &#39;Thur&#39;)\nText(0, 0, &#39;Fri&#39;)\nText(0, 0, &#39;Sat&#39;)\nText(0, 0, &#39;Sun&#39;)\n</code></pre>\n<p><img src=\"/images/0205/output_67_1.png\" alt=\"png\"></p>\n<br>\n<br>\n<br>\n\n<p>Reference<br><a href=\"https://yjs-program.tistory.com/177\">블로그</a></p>\n","site":{"data":{}},"excerpt":"Matplotlib.pyplot란\n\n\n\nMatplotlib는 데이터를 시각화 하는데 사용하는 대표적인 파이썬 라이브러리이다.\nMATLAB과 비슷한 형태를 가지고 있고, numpy나 pandas에서 사용되는 자료구조를 쉽게 시각화 할 수 있다.\n\n\n\n시작하기\n\n\n\n * import matplotlib.pyplot as plt\n   라이브러리 사용하기 위한 import문 추가 (plt라는 이름으로 사용)\n   \n   \n * fig, ax = plt.subplots()\n   fig는 그림, ax는 그려질 그래프를 의미\n   괄호 안에는 ","more":"<br>\n<br>\n\n\n<h3 id=\"Matplotlib-pyplot란\"><a href=\"#Matplotlib-pyplot란\" class=\"headerlink\" title=\"Matplotlib.pyplot란\"></a><strong>Matplotlib.pyplot란</strong></h3><hr>\n<p>Matplotlib는 데이터를 시각화 하는데 사용하는 대표적인 파이썬 라이브러리이다.<br>MATLAB과 비슷한 형태를 가지고 있고, numpy나 pandas에서 사용되는 자료구조를 쉽게 시각화 할 수 있다.<br><br></p>\n<h3 id=\"시작하기\"><a href=\"#시작하기\" class=\"headerlink\" title=\"시작하기\"></a><strong>시작하기</strong></h3><hr>\n<ul>\n<li><p>import matplotlib.pyplot as plt<br>라이브러리 사용하기 위한 import문 추가 (plt라는 이름으로 사용)</p>\n</li>\n<li><p>fig, ax = plt.subplots()<br>fig는 그림, ax는 그려질 그래프를 의미<br>괄호 안에는 그래프 크기를 정의 할 수 있음</p>\n</li>\n<li><p>ax.plot(dates, min_temperature, label = “Min Temp”)     </p>\n</li>\n<li><p>ax.plot(dates, max_temperature, label = “Max Temp”)<br>두개의 그래프를 의미</p>\n</li>\n<li><p>ax.legend()<br>범례를 추가할때 사용하는 메소드<br>그래프에 데이터 위치 표시 (예제에서는 왼쪽 맨위에 표시)</p>\n</li>\n<li><p>plt.show()<br>마무리 </p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\">dates = [</span><br><span class=\"line\">    <span class=\"string\">&#x27;2021\\n01-01&#x27;</span>, <span class=\"string\">&#x27;2021\\n01-02&#x27;</span>, <span class=\"string\">&#x27;2021\\n01-03&#x27;</span>, <span class=\"string\">&#x27;2021\\n01-04&#x27;</span>, <span class=\"string\">&#x27;2021\\n01-05&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;2021\\n01-06&#x27;</span>, <span class=\"string\">&#x27;2021\\n01-07&#x27;</span>, <span class=\"string\">&#x27;2021\\n01-08&#x27;</span>, <span class=\"string\">&#x27;2021\\n01-09&#x27;</span>, <span class=\"string\">&#x27;2021\\n01-10&#x27;</span></span><br><span class=\"line\">]</span><br><span class=\"line\">min_temperature = [<span class=\"number\">20.7</span>, <span class=\"number\">17.9</span>, <span class=\"number\">18.8</span>, <span class=\"number\">14.6</span>, <span class=\"number\">15.8</span>, <span class=\"number\">15.8</span>, <span class=\"number\">15.8</span>, <span class=\"number\">17.4</span>, <span class=\"number\">21.8</span>, <span class=\"number\">20.0</span>]</span><br><span class=\"line\">max_temperature = [<span class=\"number\">34.7</span>, <span class=\"number\">28.9</span>, <span class=\"number\">31.8</span>, <span class=\"number\">25.6</span>, <span class=\"number\">28.8</span>, <span class=\"number\">21.8</span>, <span class=\"number\">22.8</span>, <span class=\"number\">28.4</span>, <span class=\"number\">30.8</span>, <span class=\"number\">32.0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">fig, ax = plt.subplots()  <span class=\"comment\">#그래프 생성  ()안에 사이즈 설정 가능</span></span><br><span class=\"line\">ax.plot(dates, min_temperature, label = <span class=\"string\">&quot;Min Temp&quot;</span>)     </span><br><span class=\"line\">ax.plot(dates, max_temperature, label = <span class=\"string\">&quot;Max Temp&quot;</span>)</span><br><span class=\"line\">ax.legend()   </span><br><span class=\"line\">plt.show()    <span class=\"comment\">#마무리! 꼭 해주기!</span></span><br></pre></td></tr></table></figure>\n\n\n<p><img src=\"/images/0205/output_1_0.png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\">dates = [</span><br><span class=\"line\">    <span class=\"string\">&#x27;2021\\n01-01&#x27;</span>, <span class=\"string\">&#x27;2021\\n01-02&#x27;</span>, <span class=\"string\">&#x27;2021\\n01-03&#x27;</span>, <span class=\"string\">&#x27;2021\\n01-04&#x27;</span>, <span class=\"string\">&#x27;2021\\n01-05&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;2021\\n01-06&#x27;</span>, <span class=\"string\">&#x27;2021\\n01-07&#x27;</span>, <span class=\"string\">&#x27;2021\\n01-08&#x27;</span>, <span class=\"string\">&#x27;2021\\n01-09&#x27;</span>, <span class=\"string\">&#x27;2021\\n01-10&#x27;</span></span><br><span class=\"line\">]</span><br><span class=\"line\">min_temperature = [<span class=\"number\">20.7</span>, <span class=\"number\">17.9</span>, <span class=\"number\">18.8</span>, <span class=\"number\">14.6</span>, <span class=\"number\">15.8</span>, <span class=\"number\">15.8</span>, <span class=\"number\">15.8</span>, <span class=\"number\">17.4</span>, <span class=\"number\">21.8</span>, <span class=\"number\">20.0</span>]</span><br><span class=\"line\">max_temperature = [<span class=\"number\">34.7</span>, <span class=\"number\">28.9</span>, <span class=\"number\">31.8</span>, <span class=\"number\">25.6</span>, <span class=\"number\">28.8</span>, <span class=\"number\">21.8</span>, <span class=\"number\">22.8</span>, <span class=\"number\">28.4</span>, <span class=\"number\">30.8</span>, <span class=\"number\">32.0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">fig, axes = plt.subplots(nrows=<span class=\"number\">1</span>, ncols=<span class=\"number\">1</span>, figsize=(<span class=\"number\">10</span>,<span class=\"number\">6</span>)) <span class=\"comment\">#그래프 사이즈</span></span><br><span class=\"line\">axes.plot(dates, min_temperature, label = <span class=\"string\">&#x27;Min Temperature&#x27;</span>)</span><br><span class=\"line\">axes.plot(dates, max_temperature, label = <span class=\"string\">&#x27;Max Temperature&#x27;</span>)</span><br><span class=\"line\">axes.legend()</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n\n\n<p><img src=\"/images/0205/output_2_0.png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(fig)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(axes)</span><br></pre></td></tr></table></figure>\n\n<pre><code>Figure(720x432)\nAxesSubplot(0.125,0.125;0.775x0.755)\n</code></pre>\n<br>\n\n<h3 id=\"선-그래프\"><a href=\"#선-그래프\" class=\"headerlink\" title=\"선 그래프\"></a><strong>선 그래프</strong></h3><hr>\n<p><strong>방법 1. Pyplot API</strong>(비추천)</p>\n<ul>\n<li><p>참조: <a href=\"https://pypi.org/project/fix-yahoo-finance/\">https://pypi.org/project/fix-yahoo-finance/</a></p>\n</li>\n<li><p>yfinance란<br>오픈소스 API로, Yahoo Finance에서 제공하는 데이터에 접근 할 수 있다.<br>아래 예제에서는 주가 데이터를 받아 오기 위해서 사용하였다.</p>\n</li>\n<li><p>yfinance 함수를 사용하기 위한 패키지 다운로드</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">!pip install yfinance --upgrade --no-cache-<span class=\"built_in\">dir</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#주가 정보 가져오기</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> yfinance <span class=\"keyword\">as</span> yf</span><br><span class=\"line\">data = yf.download(<span class=\"string\">&#x27;AAPL&#x27;</span>, <span class=\"string\">&#x27;2019-08-01&#x27;</span>, <span class=\"string\">&#x27;2020-08-01&#x27;</span>)</span><br><span class=\"line\">data.info()</span><br></pre></td></tr></table></figure>\n\n<pre><code>[*********************100%***********************]  1 of 1 completed\n&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;\nDatetimeIndex: 253 entries, 2019-08-01 to 2020-07-31\nData columns (total 6 columns):\n #   Column     Non-Null Count  Dtype  \n---  ------     --------------  -----  \n 0   Open       253 non-null    float64\n 1   High       253 non-null    float64\n 2   Low        253 non-null    float64\n 3   Close      253 non-null    float64\n 4   Adj Close  253 non-null    float64\n 5   Volume     253 non-null    int64  \ndtypes: float64(5), int64(1)\nmemory usage: 13.8 KB\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ts = data[<span class=\"string\">&#x27;Open&#x27;</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(ts.head())</span><br></pre></td></tr></table></figure>\n\n<pre><code>Date\n2019-08-01    53.474998\n2019-08-02    51.382500\n2019-08-05    49.497501\n2019-08-06    49.077499\n2019-08-07    48.852501\nName: Open, dtype: float64\n</code></pre>\n<br>\n\n<p><strong>- plt.legend(loc=’best’)</strong><br>범례 위치를 best로 설정<br>best는 디폴트 값을 의미</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data = yf.download(<span class=\"string\">&#x27;AAPL&#x27;</span>, <span class=\"string\">&#x27;2019-08-01&#x27;</span>, <span class=\"string\">&#x27;2020-08-01&#x27;</span>)</span><br><span class=\"line\">ts = data[<span class=\"string\">&#x27;Open&#x27;</span>]</span><br><span class=\"line\">plt.figure(figsize=(<span class=\"number\">10</span>,<span class=\"number\">6</span>))</span><br><span class=\"line\">plt.plot(ts)</span><br><span class=\"line\">plt.legend(labels=[<span class=\"string\">&#x27;Price&#x27;</span>], loc=<span class=\"string\">&#x27;best&#x27;</span>)</span><br><span class=\"line\">plt.title(<span class=\"string\">&#x27;Stock Market fluctuation of AAPL&#x27;</span>) </span><br><span class=\"line\">plt.xlabel(<span class=\"string\">&#x27;Date&#x27;</span>) </span><br><span class=\"line\">plt.ylabel(<span class=\"string\">&#x27;Stock Market Open Price&#x27;</span>) </span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n\n<pre><code>[*********************100%***********************]  1 of 1 completed\n</code></pre>\n<p><img src=\"/images/0205/output_10_1.png\"></p>\n<br>\n\n<p><strong>방법2. 객체 지향 API</strong></p>\n<ul>\n<li>먼저 컴퓨터 프로그램에서의 랜덤값은 무작위 수가 아니라,<br>특정 시작 숫자값을 정해주면 정해진 알고리즘에 따라 마치 난수처럼 보이는 수열을 생성하는 것이다.<br>이때 특정 시작 숫자가 바로 **시드(seed)**이다</li>\n<li>시드 값은 현재 시각 등을 이용해 자동으로 정하기도 하지만,<br>사람이 수동으로 설정 할 수도 있다</li>\n<li>따라서 특정 시드값이 사용될 경우 이후에 발생되는 난수를 알고리즘에 따라 직접 예측이 가능하다</li>\n</ul>\n<br>\n\n<ul>\n<li>np.random.random(20000)<br>numpy를 이용해서 20000개의 난수를 생성한다</li>\n<li>random.seed()<br>seed 설정, 괄호 안에 0이상의 정수 값을 넣어주면 된다</li>\n<li>fig = Figure()<br>figure 객체 생성</li>\n<li>savefig(‘파일이름’)<br>그래프를 이미지 파일로 저장할 수 있다</li>\n<li>ax = fig.add_subplot(111)</li>\n<li>ax.hist(x, 100)<br>이거 모르게따@_2<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> matplotlib.backends.backend_agg <span class=\"keyword\">import</span> FigureCanvasAgg <span class=\"keyword\">as</span> FigureCanvas</span><br><span class=\"line\"><span class=\"keyword\">from</span> matplotlib.figure <span class=\"keyword\">import</span> Figure</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\">fig = Figure()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\">np.random.seed(<span class=\"number\">6</span>)</span><br><span class=\"line\">x = np.random.random(<span class=\"number\">20000</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">ax = fig.add_subplot(<span class=\"number\">111</span>)</span><br><span class=\"line\">ax.hist(x, <span class=\"number\">100</span>)</span><br><span class=\"line\">ax.set_title(<span class=\"string\">&#x27;Artist Layer Histogram&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">#fig.savefig(&#x27;Matplotlib_histogram.png&#x27;)</span></span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>방법3 Pyplot API + 객체지향 API</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data = yf.download(<span class=\"string\">&#x27;AAPL&#x27;</span>,<span class=\"string\">&#x27;2019-08-01&#x27;</span>,<span class=\"string\">&#x27;2020-08-01&#x27;</span>)</span><br><span class=\"line\">ts = data[<span class=\"string\">&#x27;Open&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">fig, ax = plt.subplots(figsize=(<span class=\"number\">10</span>,<span class=\"number\">6</span>)) </span><br><span class=\"line\">ax.plot(ts)</span><br><span class=\"line\">ax.set_title(<span class=\"string\">&#x27;Stock Market fluctuation of AAPL&#x27;</span>)</span><br><span class=\"line\">ax.set_xlabel(<span class=\"string\">&#x27;Date&#x27;</span>)</span><br><span class=\"line\">ax.set_ylabel(<span class=\"string\">&#x27;Stock Market Open Price&#x27;</span>)</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n\n<pre><code>[*********************100%***********************]  1 of 1 completed\n</code></pre>\n<p><img src=\"/images/0205/output_14_1.png\"></p>\n<h3 id=\"막대그래프\"><a href=\"#막대그래프\" class=\"headerlink\" title=\"막대그래프\"></a><strong>막대그래프</strong></h3><ul>\n<li><p>Tick 이란<br>그래프의 축에 간격을 구분하기 위해 표시하는 눈금이다<br>ex) xticks(), yticks()</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> calendar</span><br><span class=\"line\"></span><br><span class=\"line\">month_list = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>, <span class=\"number\">11</span>, <span class=\"number\">12</span>]</span><br><span class=\"line\">sold_list = [<span class=\"number\">300</span>, <span class=\"number\">400</span>, <span class=\"number\">550</span>, <span class=\"number\">900</span>, <span class=\"number\">600</span>, <span class=\"number\">960</span>, <span class=\"number\">900</span>, <span class=\"number\">910</span>, <span class=\"number\">800</span>, <span class=\"number\">700</span>, <span class=\"number\">550</span>, <span class=\"number\">450</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">fig, ax = plt.subplots(figsize=(<span class=\"number\">10</span>,<span class=\"number\">6</span>))</span><br><span class=\"line\">plt.xticks(month_list, calendar.month_name[<span class=\"number\">1</span>:<span class=\"number\">13</span>], rotation=<span class=\"number\">90</span>)</span><br><span class=\"line\">plot = ax.bar(month_list, sold_list)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> rect <span class=\"keyword\">in</span> plot:</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">&quot;graph:&quot;</span>, rect) </span><br><span class=\"line\">  height = rect.get_height()</span><br><span class=\"line\">  ax.text(rect.get_x() + rect.get_width()/<span class=\"number\">2.</span>, <span class=\"number\">1.002</span>*height,<span class=\"string\">&#x27;%d&#x27;</span> % <span class=\"built_in\">int</span>(height), ha=<span class=\"string\">&#x27;center&#x27;</span>, va=<span class=\"string\">&#x27;bottom&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n\n<p>  graph: Rectangle(xy=(0.6, 0), width=0.8, height=300, angle=0)<br>  graph: Rectangle(xy=(1.6, 0), width=0.8, height=400, angle=0)<br>  graph: Rectangle(xy=(2.6, 0), width=0.8, height=550, angle=0)<br>  graph: Rectangle(xy=(3.6, 0), width=0.8, height=900, angle=0)<br>  graph: Rectangle(xy=(4.6, 0), width=0.8, height=600, angle=0)<br>  graph: Rectangle(xy=(5.6, 0), width=0.8, height=960, angle=0)<br>  graph: Rectangle(xy=(6.6, 0), width=0.8, height=900, angle=0)<br>  graph: Rectangle(xy=(7.6, 0), width=0.8, height=910, angle=0)<br>  graph: Rectangle(xy=(8.6, 0), width=0.8, height=800, angle=0)<br>  graph: Rectangle(xy=(9.6, 0), width=0.8, height=700, angle=0)<br>  graph: Rectangle(xy=(10.6, 0), width=0.8, height=550, angle=0)<br>  graph: Rectangle(xy=(11.6, 0), width=0.8, height=450, angle=0)</p>\n</li>\n</ul>\n<p><img src=\"/images/0205/output_16_1.png\"></p>\n<p>선점도 그래프</p>\n<ul>\n<li>두개의 연속형 변수 (키, 몸무게)</li>\n<li>상관관계 != 인과관계</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#내장 데이터</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> seaborn <span class=\"keyword\">as</span> sns</span><br><span class=\"line\"></span><br><span class=\"line\">tips = sns.load_dataset(<span class=\"string\">&quot;tips&quot;</span>)</span><br><span class=\"line\">x = tips[<span class=\"string\">&#x27;total_bill&#x27;</span>]</span><br><span class=\"line\">y = tips[<span class=\"string\">&#x27;tip&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">fig, ax = plt.subplots(figsize=(<span class=\"number\">10</span>,<span class=\"number\">6</span>))</span><br><span class=\"line\">ax.scatter(x, y)</span><br><span class=\"line\">ax.set_xlabel(<span class=\"string\">&#x27;Totla Bill&#x27;</span>)</span><br><span class=\"line\">ax.set_ylabel(<span class=\"string\">&#x27;Tip&#x27;</span>)</span><br><span class=\"line\">ax.set_title(<span class=\"string\">&#x27;Tip ~ Total Bill&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n\n\n<p><img src=\"/images/0205/output_18_0.png\" alt=\"png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">label, data = tips.groupby(<span class=\"string\">&#x27;sex&#x27;</span>)</span><br><span class=\"line\">tips[<span class=\"string\">&#x27;sex_color&#x27;</span>] = tips[<span class=\"string\">&#x27;sex&#x27;</span>].<span class=\"built_in\">map</span>(&#123;<span class=\"string\">&quot;Female&quot;</span> : <span class=\"string\">&#x27;#0000FF&#x27;</span>,<span class=\"string\">&quot;Male&quot;</span> : <span class=\"string\">&quot;#00FF00&quot;</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">fig, ax = plt.subplots(figsize=(<span class=\"number\">10</span>,<span class=\"number\">6</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> label, data <span class=\"keyword\">in</span> tips.groupby(<span class=\"string\">&#x27;sex&#x27;</span>):</span><br><span class=\"line\">  ax.scatter(data[<span class=\"string\">&#x27;total_bill&#x27;</span>], data[<span class=\"string\">&#x27;tip&#x27;</span>], label=label, color=data[<span class=\"string\">&#x27;sex_color&#x27;</span>], alpha=<span class=\"number\">0.5</span>)</span><br><span class=\"line\">  </span><br><span class=\"line\">  ax.set_xlabel(<span class=\"string\">&#x27;Total Bill&#x27;</span>)</span><br><span class=\"line\">  ax.set_ylabel(<span class=\"string\">&#x27;Tip&#x27;</span>)</span><br><span class=\"line\">  ax.set_title(<span class=\"string\">&#x27;Tip ~ Total Bill by Gender&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">ax.legend()</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n\n\n<p><img src=\"/images/0205/output_19_0.png\" alt=\"png\"></p>\n<p>히스토그램</p>\n<p>수치형 변수</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> seaborn <span class=\"keyword\">as</span> sns</span><br><span class=\"line\"></span><br><span class=\"line\">titanic = sns.load_dataset(<span class=\"string\">&#x27;titanic&#x27;</span>)</span><br><span class=\"line\">age = titanic[<span class=\"string\">&#x27;age&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">nbins = <span class=\"number\">21</span></span><br><span class=\"line\">fig, ax = plt.subplots(figsize=(<span class=\"number\">10</span>,<span class=\"number\">6</span>))</span><br><span class=\"line\">ax.hist(age, bins = nbins)</span><br><span class=\"line\">ax.set_xlabel(<span class=\"string\">&quot;Age&quot;</span>)</span><br><span class=\"line\">ax.set_ylabel(<span class=\"string\">&quot;Frequency&quot;</span>)</span><br><span class=\"line\">ax.set_title(<span class=\"string\">&quot;Distribution of Aae in  Titanic&quot;</span>)</span><br><span class=\"line\">ax.axvline(x = age.mean(),linewidth = <span class=\"number\">2</span>, color = <span class=\"string\">&#x27;r&#x27;</span>)</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n\n\n<p><img src=\"/images/0205/output_22_0.png\" alt=\"png\"></p>\n<p>박스 플롯</p>\n<ul>\n<li>x축 변수: 범주형 변수, 그룹과 관련있는 변수, 문자열</li>\n<li>y축 변수: 수치형 변수</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iris = sns.load_dataset(<span class=\"string\">&#x27;iris&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">data = [iris[iris[<span class=\"string\">&#x27;species&#x27;</span>]==<span class=\"string\">&quot;setosa&quot;</span>][<span class=\"string\">&#x27;petal_width&#x27;</span>],</span><br><span class=\"line\">        iris[iris[<span class=\"string\">&#x27;species&#x27;</span>]==<span class=\"string\">&quot;versicolor&quot;</span>][<span class=\"string\">&#x27;petal_width&#x27;</span>],</span><br><span class=\"line\">        iris[iris[<span class=\"string\">&#x27;species&#x27;</span>]==<span class=\"string\">&quot;virginica&quot;</span>][<span class=\"string\">&#x27;petal_width&#x27;</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\">fig, ax = plt.subplots(figsize=(<span class=\"number\">10</span>, <span class=\"number\">6</span>))</span><br><span class=\"line\">ax.boxplot(data, labels=[<span class=\"string\">&#x27;setosa&#x27;</span>, <span class=\"string\">&#x27;versicolor&#x27;</span>, <span class=\"string\">&#x27;virginica&#x27;</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n\n\n<p><img src=\"/images/0205/output_25_0.png\" alt=\"png\"></p>\n<p>히트맵</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> seaborn <span class=\"keyword\">as</span> sns</span><br><span class=\"line\"></span><br><span class=\"line\">flights = sns.load_dataset(<span class=\"string\">&quot;flights&quot;</span>)     <span class=\"comment\">#내장 데이터</span></span><br><span class=\"line\">flights = flights.pivot(<span class=\"string\">&quot;month&quot;</span>, <span class=\"string\">&quot;year&quot;</span>,<span class=\"string\">&quot;passengers&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fig, ax = plt.subplots(figsize = (<span class=\"number\">12</span>,<span class=\"number\">6</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">im = ax.imshow(flights, cmap = <span class=\"string\">&#x27;YlGnBu&#x27;</span>) <span class=\"comment\">#cmap은 colormap, YlGnBu은 색상</span></span><br><span class=\"line\"></span><br><span class=\"line\">ax.set_xticklabels(flights.columns, rotation = <span class=\"number\">20</span>)</span><br><span class=\"line\">ax.set_yticklabels(flights.index, rotation = <span class=\"number\">10</span>)</span><br><span class=\"line\">fig.colorbar(im)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n\n\n<p><img src=\"/images/0205/output_27_0.png\" alt=\"png\"></p>\n<p>Seaborn</p>\n<p>산점도와 회귀선이 있는 산점도</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%matplotlib inline </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"><span class=\"keyword\">import</span> seaborn <span class=\"keyword\">as</span> sns</span><br><span class=\"line\"></span><br><span class=\"line\">tips = sns.load_dataset(<span class=\"string\">&quot;tips&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">#print(tips)</span></span><br><span class=\"line\">sns.scatterplot(x = <span class=\"string\">&quot;total_bill&quot;</span>, y = <span class=\"string\">&quot;tip&quot;</span>, data = tips)</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n\n\n<p><img src=\"/images/0205/output_30_0.png\" alt=\"png\"></p>\n<ul>\n<li>fig, ax = plt.subplots(ncols=2)<br>세로로 2개의 그래프를 그림<br>nrows=2이면 가로로 그래프를 2개 그림<br>nrows=2, nols=3이면 2행 3열로 그래프를 그림</li>\n<li><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fig, ax = plt.subplots(nrows = <span class=\"number\">1</span>, ncols = <span class=\"number\">2</span>, figsize=(<span class=\"number\">15</span>, <span class=\"number\">5</span>))  <span class=\"comment\">#이런식으로 그래프 그리는방법을 각인시키기</span></span><br><span class=\"line\">sns.regplot(x = <span class=\"string\">&quot;total_bill&quot;</span>, </span><br><span class=\"line\">            y = <span class=\"string\">&quot;tip&quot;</span>, </span><br><span class=\"line\">            data = tips, </span><br><span class=\"line\">            ax = ax[<span class=\"number\">0</span>], </span><br><span class=\"line\">            fit_reg = <span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">sns.regplot(x = <span class=\"string\">&quot;total_bill&quot;</span>, </span><br><span class=\"line\">            y = <span class=\"string\">&quot;tip&quot;</span>, </span><br><span class=\"line\">            data = tips, </span><br><span class=\"line\">            ax = ax[<span class=\"number\">1</span>], </span><br><span class=\"line\">            fit_reg = <span class=\"literal\">False</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p><img src=\"/images/0205/output_31_0.png\" alt=\"png\"></p>\n<p>히스토그램/커널 밀도 그래프</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"><span class=\"keyword\">import</span> seaborn <span class=\"keyword\">as</span> sns</span><br><span class=\"line\"></span><br><span class=\"line\">tips = sns.load_dataset(<span class=\"string\">&quot;tips&quot;</span>)   <span class=\"comment\"># 이렇게 하지 말깅!</span></span><br><span class=\"line\">sns.displot(x = <span class=\"string\">&quot;tip&quot;</span>, data = tips)</span><br><span class=\"line\">plt.figure(figsize=(<span class=\"number\">10</span>,<span class=\"number\">6</span>))</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n\n\n<p><img src=\"/images/0205/output_33_0.png\" alt=\"png\"></p>\n<pre><code>&lt;Figure size 720x432 with 0 Axes&gt;\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sns.displot(x=<span class=\"string\">&quot;tip&quot;</span>,kind =<span class=\"string\">&quot;kde&quot;</span>, data=tips)</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n\n\n<p><img src=\"/images/0205/output_34_0.png\" alt=\"png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sns.displot(x=<span class=\"string\">&quot;tip&quot;</span>,kde=<span class=\"literal\">True</span>, data=tips)</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n\n\n<p><img src=\"/images/0205/output_35_0.png\" alt=\"png\"></p>\n<p>박스플롯</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sns.boxplot(x = <span class=\"string\">&quot;day&quot;</span>, y = <span class=\"string\">&quot;total_bill&quot;</span>, data =tips)</span><br><span class=\"line\">sns.swarmplot(x = <span class=\"string\">&quot;day&quot;</span>, y = <span class=\"string\">&quot;total_bill&quot;</span>, data = tips, alpha= <span class=\"number\">.25</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n\n<pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x7face917d410&gt;\n</code></pre>\n<p><img src=\"/images/0205/output_37_1.png\" alt=\"png\"></p>\n<p>막대 그래프</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sns.countplot (x=<span class=\"string\">&quot;day&quot;</span>, data = tips)</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n\n\n<p><img src=\"/images/0205/output_39_0.png\" alt=\"png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(tips[<span class=\"string\">&#x27;day&#x27;</span>].value_counts())</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;index: &quot;</span>, tips[<span class=\"string\">&#x27;day&#x27;</span>].value_counts().index)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;values: &quot;</span>, tips[<span class=\"string\">&#x27;day&#x27;</span>].value_counts().values)</span><br></pre></td></tr></table></figure>\n\n<pre><code>Sat     87\nSun     76\nThur    62\nFri     19\nName: day, dtype: int64\nindex:  CategoricalIndex([&#39;Sat&#39;, &#39;Sun&#39;, &#39;Thur&#39;, &#39;Fri&#39;], categories=[&#39;Thur&#39;, &#39;Fri&#39;, &#39;Sat&#39;, &#39;Sun&#39;], ordered=False, dtype=&#39;category&#39;)\nvalues:  [87 76 62 19]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(tips[<span class=\"string\">&#x27;day&#x27;</span>].value_counts(ascending=<span class=\"literal\">True</span>))</span><br></pre></td></tr></table></figure>\n\n<pre><code>Fri     19\nThur    62\nSun     76\nSat     87\nName: day, dtype: int64\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ax = sns.countplot(x = <span class=\"string\">&quot;day&quot;</span>, data = tips, order = tips[<span class=\"string\">&#x27;day&#x27;</span>].value_counts().index)</span><br><span class=\"line\"><span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> ax.patches:</span><br><span class=\"line\">  height = p.get_height()</span><br><span class=\"line\">  ax.text(p.get_x() + p.get_width()/<span class=\"number\">2.</span>, height+<span class=\"number\">3</span>, height, ha = <span class=\"string\">&#x27;center&#x27;</span>, size=<span class=\"number\">9</span>)</span><br><span class=\"line\">ax.set_ylim(-<span class=\"number\">5</span>, <span class=\"number\">100</span>)</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n\n\n<p><img src=\"/images/0205/output_43_0.png\" alt=\"png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ax = sns.countplot(x = <span class=\"string\">&quot;day&quot;</span>, data = tips, hue = <span class=\"string\">&quot;sex&quot;</span>, dodge = <span class=\"literal\">True</span>,</span><br><span class=\"line\">              order = tips[<span class=\"string\">&#x27;day&#x27;</span>].value_counts().index)</span><br><span class=\"line\"><span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> ax.patches:</span><br><span class=\"line\">  height = p.get_height()</span><br><span class=\"line\">  ax.text(p.get_x() + p.get_width()/<span class=\"number\">2.</span>, height+<span class=\"number\">3</span>, height, ha = <span class=\"string\">&#x27;center&#x27;</span>, size=<span class=\"number\">9</span>)</span><br><span class=\"line\">ax.set_ylim(-<span class=\"number\">5</span>, <span class=\"number\">100</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n\n\n<p><img src=\"/images/0205/output_44_0.png\" alt=\"png\"></p>\n<p>상관관계 그래프</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd </span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np </span><br><span class=\"line\"><span class=\"keyword\">import</span> seaborn <span class=\"keyword\">as</span> sns</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\">mpg = sns.load_dataset(<span class=\"string\">&quot;mpg&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(mpg.shape) <span class=\"comment\"># 398 행, 9개 열</span></span><br><span class=\"line\"></span><br><span class=\"line\">num_mpg = mpg.select_dtypes(include = np.number)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(num_mpg.shape) <span class=\"comment\"># 398 행, 7개 열</span></span><br></pre></td></tr></table></figure>\n\n<pre><code>(398, 9)\n(398, 7)\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">num_mpg.info()</span><br></pre></td></tr></table></figure>\n\n<pre><code>&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;\nRangeIndex: 398 entries, 0 to 397\nData columns (total 7 columns):\n #   Column        Non-Null Count  Dtype  \n---  ------        --------------  -----  \n 0   mpg           398 non-null    float64\n 1   cylinders     398 non-null    int64  \n 2   displacement  398 non-null    float64\n 3   horsepower    392 non-null    float64\n 4   weight        398 non-null    int64  \n 5   acceleration  398 non-null    float64\n 6   model_year    398 non-null    int64  \ndtypes: float64(4), int64(3)\nmemory usage: 21.9 KB\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">num_mpg.corr()</span><br></pre></td></tr></table></figure>\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n<pre><code>.dataframe tbody tr th &#123;\n    vertical-align: top;\n&#125;\n\n.dataframe thead th &#123;\n    text-align: right;\n&#125;\n</code></pre>\n<p></style></p>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>mpg</th>\n      <th>cylinders</th>\n      <th>displacement</th>\n      <th>horsepower</th>\n      <th>weight</th>\n      <th>acceleration</th>\n      <th>model_year</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>mpg</th>\n      <td>1.000000</td>\n      <td>-0.775396</td>\n      <td>-0.804203</td>\n      <td>-0.778427</td>\n      <td>-0.831741</td>\n      <td>0.420289</td>\n      <td>0.579267</td>\n    </tr>\n    <tr>\n      <th>cylinders</th>\n      <td>-0.775396</td>\n      <td>1.000000</td>\n      <td>0.950721</td>\n      <td>0.842983</td>\n      <td>0.896017</td>\n      <td>-0.505419</td>\n      <td>-0.348746</td>\n    </tr>\n    <tr>\n      <th>displacement</th>\n      <td>-0.804203</td>\n      <td>0.950721</td>\n      <td>1.000000</td>\n      <td>0.897257</td>\n      <td>0.932824</td>\n      <td>-0.543684</td>\n      <td>-0.370164</td>\n    </tr>\n    <tr>\n      <th>horsepower</th>\n      <td>-0.778427</td>\n      <td>0.842983</td>\n      <td>0.897257</td>\n      <td>1.000000</td>\n      <td>0.864538</td>\n      <td>-0.689196</td>\n      <td>-0.416361</td>\n    </tr>\n    <tr>\n      <th>weight</th>\n      <td>-0.831741</td>\n      <td>0.896017</td>\n      <td>0.932824</td>\n      <td>0.864538</td>\n      <td>1.000000</td>\n      <td>-0.417457</td>\n      <td>-0.306564</td>\n    </tr>\n    <tr>\n      <th>acceleration</th>\n      <td>0.420289</td>\n      <td>-0.505419</td>\n      <td>-0.543684</td>\n      <td>-0.689196</td>\n      <td>-0.417457</td>\n      <td>1.000000</td>\n      <td>0.288137</td>\n    </tr>\n    <tr>\n      <th>model_year</th>\n      <td>0.579267</td>\n      <td>-0.348746</td>\n      <td>-0.370164</td>\n      <td>-0.416361</td>\n      <td>-0.306564</td>\n      <td>0.288137</td>\n      <td>1.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fig, ax = plt.subplots(nrows = <span class=\"number\">1</span>, ncols = <span class=\"number\">2</span>, figsize=(<span class=\"number\">16</span>, <span class=\"number\">5</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#  기본 그래프 [Basic Correlation Heatmap]</span></span><br><span class=\"line\">sns.heatmap(num_mpg.corr(), ax=ax[<span class=\"number\">0</span>])</span><br><span class=\"line\">ax[<span class=\"number\">0</span>].set_title(<span class=\"string\">&#x27;Basic Correlation Heatmap&#x27;</span>, pad = <span class=\"number\">12</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 상관관계 수치 그래프 [Correlation Heatmap with Number]</span></span><br><span class=\"line\">sns.heatmap(num_mpg.corr(), vmin=-<span class=\"number\">1</span>, vmax=<span class=\"number\">1</span>, annot=<span class=\"literal\">True</span>, ax=ax[<span class=\"number\">1</span>])</span><br><span class=\"line\">ax[<span class=\"number\">1</span>].set_title(<span class=\"string\">&#x27;Correlation Heatmap with Number&#x27;</span>, pad = <span class=\"number\">12</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n\n\n<p><img src=\"/images/0205/output_49_0.png\" alt=\"png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">int</span>(<span class=\"literal\">True</span>))</span><br><span class=\"line\">np.triu(np.ones_like(num_mpg.corr()))</span><br></pre></td></tr></table></figure>\n\n<pre><code>1\n\n\n\n\n\narray([[1., 1., 1., 1., 1., 1., 1.],\n       [0., 1., 1., 1., 1., 1., 1.],\n       [0., 0., 1., 1., 1., 1., 1.],\n       [0., 0., 0., 1., 1., 1., 1.],\n       [0., 0., 0., 0., 1., 1., 1.],\n       [0., 0., 0., 0., 0., 1., 1.],\n       [0., 0., 0., 0., 0., 0., 1.]])\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mask = np.triu(np.ones_like(num_mpg.corr(), dtype=np.<span class=\"built_in\">bool</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(mask)</span><br></pre></td></tr></table></figure>\n\n<pre><code>[[ True  True  True  True  True  True  True]\n [False  True  True  True  True  True  True]\n [False False  True  True  True  True  True]\n [False False False  True  True  True  True]\n [False False False False  True  True  True]\n [False False False False False  True  True]\n [False False False False False False  True]]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fig, ax = plt.subplots(figsize=(<span class=\"number\">16</span>, <span class=\"number\">5</span>))  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#  기본 그래프 [Basic Correlation Heatmap]</span></span><br><span class=\"line\">ax = sns.heatmap(num_mpg.corr(), mask=mask, </span><br><span class=\"line\">                 vmin=-<span class=\"number\">1</span>, vmax = <span class=\"number\">1</span>, </span><br><span class=\"line\">                 annot=<span class=\"literal\">True</span>, </span><br><span class=\"line\">                 cmap=<span class=\"string\">&quot;BrBG&quot;</span>, cbar = <span class=\"literal\">True</span>)</span><br><span class=\"line\">ax.set_title(<span class=\"string\">&#x27;Triangle Correlation Heatmap&#x27;</span>, pad = <span class=\"number\">16</span>, size = <span class=\"number\">16</span>)</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n\n\n<p><img src=\"/images/0205/output_52_0.png\" alt=\"png\"></p>\n<p>Intermediate</p>\n<p>페가 블로그 코드</p>\n<p><a href=\"https://jehyunlee.github.io/2020/08/27/Python-DS-28-mpl_spines_grids/\">https://jehyunlee.github.io/2020/08/27/Python-DS-28-mpl_spines_grids/</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"><span class=\"keyword\">from</span> matplotlib.ticker <span class=\"keyword\">import</span> (MultipleLocator, AutoMinorLocator, FuncFormatter)</span><br><span class=\"line\"><span class=\"keyword\">import</span> seaborn <span class=\"keyword\">as</span> sns</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">plot_example</span>(<span class=\"params\">ax, zorder=<span class=\"number\">0</span></span>):</span></span><br><span class=\"line\">    ax.bar(tips_day[<span class=\"string\">&quot;day&quot;</span>], tips_day[<span class=\"string\">&quot;tip&quot;</span>], color=<span class=\"string\">&quot;lightgray&quot;</span>, zorder=zorder)</span><br><span class=\"line\">    ax.set_title(<span class=\"string\">&quot;tip (mean)&quot;</span>, fontsize=<span class=\"number\">16</span>, pad=<span class=\"number\">12</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Values</span></span><br><span class=\"line\">    h_pad = <span class=\"number\">0.1</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">4</span>):</span><br><span class=\"line\">        fontweight = <span class=\"string\">&quot;normal&quot;</span></span><br><span class=\"line\">        color = <span class=\"string\">&quot;k&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> i == <span class=\"number\">3</span>:</span><br><span class=\"line\">            fontweight = <span class=\"string\">&quot;bold&quot;</span></span><br><span class=\"line\">            color = <span class=\"string\">&quot;darkred&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        ax.text(i, tips_day[<span class=\"string\">&quot;tip&quot;</span>].loc[i] + h_pad, <span class=\"string\">f&quot;<span class=\"subst\">&#123;tips_day[<span class=\"string\">&#x27;tip&#x27;</span>].loc[i]:<span class=\"number\">0.2</span>f&#125;</span>&quot;</span>, </span><br><span class=\"line\">                horizontalalignment=<span class=\"string\">&#x27;center&#x27;</span>, fontsize=<span class=\"number\">12</span>, fontweight=fontweight, color=color)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Sunday</span></span><br><span class=\"line\">    ax.patches[<span class=\"number\">3</span>].set_facecolor(<span class=\"string\">&quot;darkred&quot;</span>)</span><br><span class=\"line\">    ax.patches[<span class=\"number\">3</span>].set_edgecolor(<span class=\"string\">&quot;black&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># set_range</span></span><br><span class=\"line\">    ax.set_ylim(<span class=\"number\">0</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ax</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">major_formatter</span>(<span class=\"params\">x, pos</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;&#123;%.2f&#125;&quot;</span> % x</span><br><span class=\"line\">formatter = FuncFormatter(major_formatter)</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tips = sns.load_dataset(<span class=\"string\">&quot;tips&quot;</span>)</span><br><span class=\"line\">tips_day = tips.groupby(<span class=\"string\">&quot;day&quot;</span>).mean().reset_index()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(tips_day)</span><br></pre></td></tr></table></figure>\n\n<pre><code>    day  total_bill       tip      size\n0  Thur   17.682742  2.771452  2.451613\n1   Fri   17.151579  2.734737  2.105263\n2   Sat   20.441379  2.993103  2.517241\n3   Sun   21.410000  3.255132  2.842105\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fig, ax = plt.subplots(figsize=(<span class=\"number\">10</span>, <span class=\"number\">6</span>))</span><br><span class=\"line\">ax = plot_example(ax, zorder=<span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n\n\n<p><img src=\"/images/0205/output_59_0.png\" alt=\"png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fig, ax = plt.subplots(figsize=(<span class=\"number\">10</span>, <span class=\"number\">6</span>))</span><br><span class=\"line\">ax = plot_example(ax, zorder=<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">ax.spines[<span class=\"string\">&quot;top&quot;</span>].set_visible(<span class=\"literal\">False</span>)</span><br><span class=\"line\">ax.spines[<span class=\"string\">&quot;right&quot;</span>].set_visible(<span class=\"literal\">False</span>)</span><br><span class=\"line\">ax.spines[<span class=\"string\">&quot;left&quot;</span>].set_visible(<span class=\"literal\">False</span>)</span><br></pre></td></tr></table></figure>\n\n\n<p><img src=\"/images/0205/output_60_0.png\" alt=\"png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fig, ax = plt.subplots()</span><br><span class=\"line\">ax = plot_example(ax, zorder=<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">ax.spines[<span class=\"string\">&quot;top&quot;</span>].set_visible(<span class=\"literal\">False</span>)</span><br><span class=\"line\">ax.spines[<span class=\"string\">&quot;right&quot;</span>].set_visible(<span class=\"literal\">False</span>)</span><br><span class=\"line\">ax.spines[<span class=\"string\">&quot;left&quot;</span>].set_visible(<span class=\"literal\">False</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">ax.yaxis.set_major_locator(MultipleLocator(<span class=\"number\">1</span>))</span><br><span class=\"line\">ax.yaxis.set_major_formatter(formatter)</span><br><span class=\"line\">ax.yaxis.set_minor_locator(MultipleLocator(<span class=\"number\">0.5</span>))</span><br></pre></td></tr></table></figure>\n\n\n<p><img src=\"/images/0205/output_61_0.png\" alt=\"png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fig, ax = plt.subplots()</span><br><span class=\"line\">ax = plot_example(ax, zorder=<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">ax.spines[<span class=\"string\">&quot;top&quot;</span>].set_visible(<span class=\"literal\">False</span>)</span><br><span class=\"line\">ax.spines[<span class=\"string\">&quot;right&quot;</span>].set_visible(<span class=\"literal\">False</span>)</span><br><span class=\"line\">ax.spines[<span class=\"string\">&quot;left&quot;</span>].set_visible(<span class=\"literal\">False</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">ax.yaxis.set_major_locator(MultipleLocator(<span class=\"number\">1</span>))</span><br><span class=\"line\">ax.yaxis.set_major_formatter(formatter)</span><br><span class=\"line\">ax.yaxis.set_minor_locator(MultipleLocator(<span class=\"number\">0.5</span>))</span><br><span class=\"line\">    </span><br><span class=\"line\">ax.grid(axis=<span class=\"string\">&quot;y&quot;</span>, which=<span class=\"string\">&quot;major&quot;</span>, color=<span class=\"string\">&quot;lightgray&quot;</span>)</span><br><span class=\"line\">ax.grid(axis=<span class=\"string\">&quot;y&quot;</span>, which=<span class=\"string\">&quot;minor&quot;</span>, ls=<span class=\"string\">&quot;:&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n\n<p><img src=\"/images/0205/output_62_0.png\" alt=\"png\"></p>\n<p>책 코드</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"><span class=\"keyword\">from</span> matplotlib.ticker <span class=\"keyword\">import</span> (MultipleLocator, AutoMinorLocator, FuncFormatter)</span><br><span class=\"line\"><span class=\"keyword\">import</span> seaborn <span class=\"keyword\">as</span> sns</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"></span><br><span class=\"line\">tips = sns.load_dataset(<span class=\"string\">&quot;tips&quot;</span>)</span><br><span class=\"line\">fig, ax = plt.subplots(nrows = <span class=\"number\">1</span>, ncols = <span class=\"number\">2</span>, figsize=(<span class=\"number\">16</span>, <span class=\"number\">5</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">major_formatter</span>(<span class=\"params\">x, pos</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;%.2f$&quot;</span> % x</span><br><span class=\"line\">formatter = FuncFormatter(major_formatter)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Ideal Bar Graph</span></span><br><span class=\"line\">ax0 = sns.barplot(x = <span class=\"string\">&quot;day&quot;</span>, y = <span class=\"string\">&#x27;total_bill&#x27;</span>, data = tips, </span><br><span class=\"line\">                  ci=<span class=\"literal\">None</span>, color=<span class=\"string\">&#x27;lightgray&#x27;</span>, alpha=<span class=\"number\">0.85</span>, zorder=<span class=\"number\">2</span>, </span><br><span class=\"line\">                  ax=ax[<span class=\"number\">0</span>])</span><br></pre></td></tr></table></figure>\n\n\n<p><img src=\"/images/0205/output_64_0.png\" alt=\"png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">group_mean = tips.groupby([<span class=\"string\">&#x27;day&#x27;</span>])[<span class=\"string\">&#x27;total_bill&#x27;</span>].agg(<span class=\"string\">&#x27;mean&#x27;</span>)</span><br><span class=\"line\">h_day = group_mean.sort_values(ascending=<span class=\"literal\">False</span>).index[<span class=\"number\">0</span>]</span><br><span class=\"line\">h_mean = np.<span class=\"built_in\">round</span>(group_mean.sort_values(ascending=<span class=\"literal\">False</span>)[<span class=\"number\">0</span>], <span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;The Best Day:&quot;</span>, h_day)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;The Highest Avg. Total Biil:&quot;</span>, h_mean)</span><br></pre></td></tr></table></figure>\n\n<pre><code>The Best Day: Sun\nThe Highest Avg. Total Biil: 21.41\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tips = sns.load_dataset(<span class=\"string\">&quot;tips&quot;</span>)</span><br><span class=\"line\">fig, ax = plt.subplots(nrows = <span class=\"number\">1</span>, ncols = <span class=\"number\">2</span>, figsize=(<span class=\"number\">16</span>, <span class=\"number\">5</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Ideal Bar Graph</span></span><br><span class=\"line\">ax0 = sns.barplot(x = <span class=\"string\">&quot;day&quot;</span>, y = <span class=\"string\">&#x27;total_bill&#x27;</span>, data = tips, </span><br><span class=\"line\">                  ci=<span class=\"literal\">None</span>, color=<span class=\"string\">&#x27;lightgray&#x27;</span>, alpha=<span class=\"number\">0.85</span>, zorder=<span class=\"number\">2</span>, </span><br><span class=\"line\">                  ax=ax[<span class=\"number\">0</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">group_mean = tips.groupby([<span class=\"string\">&#x27;day&#x27;</span>])[<span class=\"string\">&#x27;total_bill&#x27;</span>].agg(<span class=\"string\">&#x27;mean&#x27;</span>)</span><br><span class=\"line\">h_day = group_mean.sort_values(ascending=<span class=\"literal\">False</span>).index[<span class=\"number\">0</span>]</span><br><span class=\"line\">h_mean = np.<span class=\"built_in\">round</span>(group_mean.sort_values(ascending=<span class=\"literal\">False</span>)[<span class=\"number\">0</span>], <span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> ax0.patches:</span><br><span class=\"line\">  fontweight = <span class=\"string\">&quot;normal&quot;</span></span><br><span class=\"line\">  color = <span class=\"string\">&quot;k&quot;</span></span><br><span class=\"line\">  height = np.<span class=\"built_in\">round</span>(p.get_height(), <span class=\"number\">2</span>)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> h_mean == height:</span><br><span class=\"line\">    fontweight=<span class=\"string\">&quot;bold&quot;</span></span><br><span class=\"line\">    color=<span class=\"string\">&quot;darkred&quot;</span></span><br><span class=\"line\">    p.set_facecolor(color)</span><br><span class=\"line\">    p.set_edgecolor(<span class=\"string\">&quot;black&quot;</span>)</span><br><span class=\"line\">  ax0.text(p.get_x() + p.get_width()/<span class=\"number\">2.</span>, height+<span class=\"number\">1</span>, height, ha = <span class=\"string\">&#x27;center&#x27;</span>, size=<span class=\"number\">12</span>, fontweight=fontweight, color=color)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n\n\n<p><img src=\"/images/0205/output_66_0.png\" alt=\"png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"><span class=\"keyword\">from</span> matplotlib.ticker <span class=\"keyword\">import</span> (MultipleLocator, AutoMinorLocator, FuncFormatter)</span><br><span class=\"line\"><span class=\"keyword\">import</span> seaborn <span class=\"keyword\">as</span> sns</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"></span><br><span class=\"line\">tips = sns.load_dataset(<span class=\"string\">&quot;tips&quot;</span>)</span><br><span class=\"line\">fig, ax = plt.subplots(nrows = <span class=\"number\">1</span>, ncols = <span class=\"number\">2</span>, figsize=(<span class=\"number\">16</span>, <span class=\"number\">5</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">major_formatter</span>(<span class=\"params\">x, pos</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;%.2f$&quot;</span> % x</span><br><span class=\"line\">formatter = FuncFormatter(major_formatter)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Ideal Bar Graph</span></span><br><span class=\"line\">ax0 = sns.barplot(x = <span class=\"string\">&quot;day&quot;</span>, y = <span class=\"string\">&#x27;total_bill&#x27;</span>, data = tips, </span><br><span class=\"line\">                  ci=<span class=\"literal\">None</span>, color=<span class=\"string\">&#x27;lightgray&#x27;</span>, alpha=<span class=\"number\">0.85</span>, zorder=<span class=\"number\">2</span>, </span><br><span class=\"line\">                  ax=ax[<span class=\"number\">0</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">group_mean = tips.groupby([<span class=\"string\">&#x27;day&#x27;</span>])[<span class=\"string\">&#x27;total_bill&#x27;</span>].agg(<span class=\"string\">&#x27;mean&#x27;</span>)</span><br><span class=\"line\">h_day = group_mean.sort_values(ascending=<span class=\"literal\">False</span>).index[<span class=\"number\">0</span>]</span><br><span class=\"line\">h_mean = np.<span class=\"built_in\">round</span>(group_mean.sort_values(ascending=<span class=\"literal\">False</span>)[<span class=\"number\">0</span>], <span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> ax0.patches:</span><br><span class=\"line\">  fontweight = <span class=\"string\">&quot;normal&quot;</span></span><br><span class=\"line\">  color = <span class=\"string\">&quot;k&quot;</span></span><br><span class=\"line\">  height = np.<span class=\"built_in\">round</span>(p.get_height(), <span class=\"number\">2</span>)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> h_mean == height:</span><br><span class=\"line\">    fontweight=<span class=\"string\">&quot;bold&quot;</span></span><br><span class=\"line\">    color=<span class=\"string\">&quot;darkred&quot;</span></span><br><span class=\"line\">    p.set_facecolor(color)</span><br><span class=\"line\">    p.set_edgecolor(<span class=\"string\">&quot;black&quot;</span>)</span><br><span class=\"line\">  ax0.text(p.get_x() + p.get_width()/<span class=\"number\">2.</span>, height+<span class=\"number\">1</span>, height, ha = <span class=\"string\">&#x27;center&#x27;</span>, size=<span class=\"number\">12</span>, fontweight=fontweight, color=color)</span><br><span class=\"line\"></span><br><span class=\"line\">ax0.set_ylim(-<span class=\"number\">3</span>, <span class=\"number\">30</span>)</span><br><span class=\"line\">ax0.set_title(<span class=\"string\">&quot;Ideal Bar Graph&quot;</span>, size = <span class=\"number\">16</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">ax0.spines[<span class=\"string\">&#x27;top&#x27;</span>].set_visible(<span class=\"literal\">False</span>)</span><br><span class=\"line\">ax0.spines[<span class=\"string\">&#x27;left&#x27;</span>].set_position((<span class=\"string\">&quot;outward&quot;</span>, <span class=\"number\">20</span>))</span><br><span class=\"line\">ax0.spines[<span class=\"string\">&#x27;left&#x27;</span>].set_visible(<span class=\"literal\">False</span>)</span><br><span class=\"line\">ax0.spines[<span class=\"string\">&#x27;right&#x27;</span>].set_visible(<span class=\"literal\">False</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">ax0.yaxis.set_major_locator(MultipleLocator(<span class=\"number\">10</span>))</span><br><span class=\"line\">ax0.yaxis.set_major_formatter(formatter)</span><br><span class=\"line\">ax0.yaxis.set_minor_locator(MultipleLocator(<span class=\"number\">5</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">ax0.set_ylabel(<span class=\"string\">&quot;Avg. Total Bill($)&quot;</span>, fontsize=<span class=\"number\">14</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">ax0.grid(axis=<span class=\"string\">&quot;y&quot;</span>, which=<span class=\"string\">&quot;major&quot;</span>, color=<span class=\"string\">&quot;lightgray&quot;</span>)</span><br><span class=\"line\">ax0.grid(axis=<span class=\"string\">&quot;y&quot;</span>, which=<span class=\"string\">&quot;minor&quot;</span>, ls=<span class=\"string\">&quot;:&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">ax0.set_xlabel(<span class=\"string\">&quot;Weekday&quot;</span>, fontsize=<span class=\"number\">14</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> xtick <span class=\"keyword\">in</span> ax0.get_xticklabels():</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(xtick)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> xtick.get_text() == h_day:</span><br><span class=\"line\">    xtick.set_color(<span class=\"string\">&quot;darkred&quot;</span>)</span><br><span class=\"line\">    xtick.set_fontweight(<span class=\"string\">&quot;demibold&quot;</span>)</span><br><span class=\"line\">ax0.set_xticklabels([<span class=\"string\">&#x27;Thursday&#x27;</span>, <span class=\"string\">&#x27;Friday&#x27;</span>, <span class=\"string\">&#x27;Saturday&#x27;</span>, <span class=\"string\">&#x27;Sunday&#x27;</span>], size=<span class=\"number\">12</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">ax1 = sns.barplot(x = <span class=\"string\">&quot;day&quot;</span>, y = <span class=\"string\">&#x27;total_bill&#x27;</span>, data = tips, </span><br><span class=\"line\">                  ci=<span class=\"literal\">None</span>, alpha=<span class=\"number\">0.85</span>, </span><br><span class=\"line\">                  ax=ax[<span class=\"number\">1</span>])</span><br><span class=\"line\"><span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> ax1.patches:</span><br><span class=\"line\">  height = np.<span class=\"built_in\">round</span>(p.get_height(), <span class=\"number\">2</span>)</span><br><span class=\"line\">  ax1.text(p.get_x() + p.get_width()/<span class=\"number\">2.</span>, height+<span class=\"number\">1</span>, height, ha = <span class=\"string\">&#x27;center&#x27;</span>, size=<span class=\"number\">12</span>)</span><br><span class=\"line\">ax1.set_ylim(-<span class=\"number\">3</span>, <span class=\"number\">30</span>)</span><br><span class=\"line\">ax1.set_title(<span class=\"string\">&quot;Just Bar Graph&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n\n<pre><code>Text(0, 0, &#39;Thur&#39;)\nText(0, 0, &#39;Fri&#39;)\nText(0, 0, &#39;Sat&#39;)\nText(0, 0, &#39;Sun&#39;)\n</code></pre>\n<p><img src=\"/images/0205/output_67_1.png\" alt=\"png\"></p>\n<br>\n<br>\n<br>\n\n<p>Reference<br><a href=\"https://yjs-program.tistory.com/177\">블로그</a></p>\n"},{"title":"Decision Tree","date":"2021-11-03T15:00:00.000Z","toc":true,"_content":"<br>\n\n\n### **Decision Tree란**\n---\n- 머신러닝에 사용되는 예측 모델링 접근 방식 중 하나이다.\n여러 입력 변수를 기반으로 대상 변수의 값을 예측하는 모델을 만드는 것이다.\n분류와 회귀 모두 가능하며, 스무고개 하듯이 Y/N으로 질문을 이어가며 학습한다.\n\n- Deicision Tree는 데이터에서 if-else 문을 이용하여 sine 곡선에 가까운 데이터를 학습한다.\n트리가 깊어질수록 모델이 더 복잡해진다.\n\n<br>\n\n### **알고리즘 이해하기**\n---\n1. Rood node (뿌리 마디) \n처음에 root node에서 문제의 질문이 입력되면 Y/N로 데이터가 분류된다.\n2. Intermediate node (중간 마디) \nY로 분류된 데이터는 다시 질문이 입력되어 Y/N으로 데이터가 분류된다.\n3. Terminal node (끝 마디)\n끝마디에서는 데이터가 가장 섞이지 않은 상태로 완전히 분류되어 Entropy가 낮아진다\n\n\n- 초기 지점은 root node이고 분기가 거듭될 수록 데이터의 개수는 줄어든다\n- terminal node에 속하는 데이터의 개수를 합하면 root node의 데이터 수와 일치한다\n\n<br>\n\n### **Impurity(불순도)란** \n---\n해당 범주 안에서 서로 다른 데이터가 얼마나 섞여 있는지 뜻한다\n<br>\n\n### **Entropy란**\n---\n불순도를 수치적으로 나타낸 척도이다\n \nEntropy가 높으면 불순도가 높고\nEntropy가 낮으면 불순도가 낮다\n\n예를들면 Entropy가 높으면 정리되지 않은 방, 낮으면 정리된 방 이라고 생각하면 된다.\n\nDecision Tree는 불순도를 최소화 하는 방향으로 학습을 하게 된다.\n\n<br>\n\n### **전체 흐름**\n---\n1. Define Problem, Collect training data\n\n2. Build a Decision Tree (Extract Data, Build a tree)\n\n3. Deploy machine\n\n4. Test with test data\n\n<br>\n\n### **장점**\n---\n- 데이터의 전처리를 하지 않아도 된다.\n- 수치형과 범주형 변수를 한번에 다룰 수 있다.\n\n<br>\n\n### **한계**\n---\n- 샘플 사이즈가 크면 효율성 및 가독성이 떨어진다.\n- 과적합으로 알고리즘 성능이 떨어질 수 있다.\n- 한번에 하나의변수만을 고려하므로 변수간 상호작용을 파악하기 어렵다.\n- 약간의 차이에 따라 트리의 모양이 많이 달라질 수 있다.\n\n\n<br>\n\n### **예제**\n- iris data set을 이용한 deicision tree 만들기\nScikitlearn 사이트의 iris 데이터셋을 이용한 예제이다.\n코드 출처: https://scikit-learn.org/stable/auto_examples/tree/plot_iris_dtc.html\n---\n**데이터 불러오기, 그래프그리기 위한 설정**\n- plot_colors = 'ryb' \nblue red yello 색을 나타내기 위해 사용\n- plot_step\n축의 단위를 설정\n\n```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfrom sklearn.datasets import load_iris\nfrom sklearn.tree import DecisionTreeClassifier, plot_tree\n\n# Parameters\nn_classes = 3\nplot_colors = \"ryb\"\nplot_step = 0.02\n\n# Load data\niris = load_iris()\n```\n<br>\n\n- enumerate는 입력값으로 시퀀스 자료형(리스트, 튜플, 문자열)을 입력받아,\nenumerate 객체를 리턴한다.\n- enumerate 객체는 첫번째로 그 순서값, 두번째로 그 순서값에 해당되는 시퀀스 자료형의 실제값을 갖는 객체이다\n- X = iris.data[:, pair] \n하나의 pair에 들어가는 값이 [0,2]라면, 첫번째 세번째만 선택해서 X에 할당\n```python\nfor pairidx, pair in enumerate([[0, 1], [0, 2], [0, 3], [1, 2], [1, 3], [2, 3]]):\n    # We only take the two corresponding features\n    X = iris.data[:, pair]\n    y = iris.target\n```\n<br>\n\n```python\n    # Train\n    clf = DecisionTreeClassifier().fit(X, y)\n\n    # Plot the decision boundary\n    plt.subplot(2, 3, pairidx + 1)\n\n    x_min, x_max = X[:, 0].min() - 1, X[:, 0].max() + 1\n    y_min, y_max = X[:, 1].min() - 1, X[:, 1].max() + 1\n    xx, yy = np.meshgrid(\n        np.arange(x_min, x_max, plot_step), np.arange(y_min, y_max, plot_step)\n    )\n    plt.tight_layout(h_pad=0.5, w_pad=0.5, pad=2.5)\n\n    Z = clf.predict(np.c_[xx.ravel(), yy.ravel()])\n    Z = Z.reshape(xx.shape)\n    cs = plt.contourf(xx, yy, Z, cmap=plt.cm.RdYlBu)\n```\n<br>\n\n\n```python\n    plt.xlabel(iris.feature_names[pair[0]])\n    plt.ylabel(iris.feature_names[pair[1]])\n\n    # Plot the training points\n    for i, color in zip(range(n_classes), plot_colors):\n        idx = np.where(y == i)\n        plt.scatter(\n            X[idx, 0],\n            X[idx, 1],\n            c=color,\n            label=iris.target_names[i],\n            cmap=plt.cm.RdYlBu,\n            edgecolor=\"black\",\n            s=15,\n        )\n\nplt.suptitle(\"Decision surface of a decision tree using paired features\")\nplt.legend(loc=\"lower right\", borderpad=0, handletextpad=0)\nplt.axis(\"tight\")\n\nplt.figure()\nclf = DecisionTreeClassifier().fit(iris.data, iris.target)\nplot_tree(clf, filled=True)\nplt.show()\n```\n    \n![](/images/0206/iris1.png)\n![](/images/0206/iris2.png)\n\n<br>\n<br>\n<br>\n<br>\n\n참고 사이트: \n---\n[위키백과](https://ko.wikipedia.org/wiki/%EA%B2%B0%EC%A0%95_%ED%8A%B8%EB%A6%AC)\n[Scikitlearn](https://scikit-learn.org/stable/modules/tree.html#regression)\n[블로그1](https://velog.io/@changhtun1/Python-Decision-Tree-%EC%9D%B4%EB%A1%A0-%EB%B0%8F-%EC%8B%A4%EC%8A%B5)\n[블로그2](https://bpas.tistory.com/21)\n[유튜브](https://www.youtube.com/watch?v=n0p0120Gxqk)","source":"_posts/0206_ML_DecisionTree.md.md","raw":"---\ntitle: Decision Tree\ndate: 2021-11-04\ntoc : true\ntags: machine learning, decision tree\ncategories: \n- 머신러닝\n---\n<br>\n\n\n### **Decision Tree란**\n---\n- 머신러닝에 사용되는 예측 모델링 접근 방식 중 하나이다.\n여러 입력 변수를 기반으로 대상 변수의 값을 예측하는 모델을 만드는 것이다.\n분류와 회귀 모두 가능하며, 스무고개 하듯이 Y/N으로 질문을 이어가며 학습한다.\n\n- Deicision Tree는 데이터에서 if-else 문을 이용하여 sine 곡선에 가까운 데이터를 학습한다.\n트리가 깊어질수록 모델이 더 복잡해진다.\n\n<br>\n\n### **알고리즘 이해하기**\n---\n1. Rood node (뿌리 마디) \n처음에 root node에서 문제의 질문이 입력되면 Y/N로 데이터가 분류된다.\n2. Intermediate node (중간 마디) \nY로 분류된 데이터는 다시 질문이 입력되어 Y/N으로 데이터가 분류된다.\n3. Terminal node (끝 마디)\n끝마디에서는 데이터가 가장 섞이지 않은 상태로 완전히 분류되어 Entropy가 낮아진다\n\n\n- 초기 지점은 root node이고 분기가 거듭될 수록 데이터의 개수는 줄어든다\n- terminal node에 속하는 데이터의 개수를 합하면 root node의 데이터 수와 일치한다\n\n<br>\n\n### **Impurity(불순도)란** \n---\n해당 범주 안에서 서로 다른 데이터가 얼마나 섞여 있는지 뜻한다\n<br>\n\n### **Entropy란**\n---\n불순도를 수치적으로 나타낸 척도이다\n \nEntropy가 높으면 불순도가 높고\nEntropy가 낮으면 불순도가 낮다\n\n예를들면 Entropy가 높으면 정리되지 않은 방, 낮으면 정리된 방 이라고 생각하면 된다.\n\nDecision Tree는 불순도를 최소화 하는 방향으로 학습을 하게 된다.\n\n<br>\n\n### **전체 흐름**\n---\n1. Define Problem, Collect training data\n\n2. Build a Decision Tree (Extract Data, Build a tree)\n\n3. Deploy machine\n\n4. Test with test data\n\n<br>\n\n### **장점**\n---\n- 데이터의 전처리를 하지 않아도 된다.\n- 수치형과 범주형 변수를 한번에 다룰 수 있다.\n\n<br>\n\n### **한계**\n---\n- 샘플 사이즈가 크면 효율성 및 가독성이 떨어진다.\n- 과적합으로 알고리즘 성능이 떨어질 수 있다.\n- 한번에 하나의변수만을 고려하므로 변수간 상호작용을 파악하기 어렵다.\n- 약간의 차이에 따라 트리의 모양이 많이 달라질 수 있다.\n\n\n<br>\n\n### **예제**\n- iris data set을 이용한 deicision tree 만들기\nScikitlearn 사이트의 iris 데이터셋을 이용한 예제이다.\n코드 출처: https://scikit-learn.org/stable/auto_examples/tree/plot_iris_dtc.html\n---\n**데이터 불러오기, 그래프그리기 위한 설정**\n- plot_colors = 'ryb' \nblue red yello 색을 나타내기 위해 사용\n- plot_step\n축의 단위를 설정\n\n```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfrom sklearn.datasets import load_iris\nfrom sklearn.tree import DecisionTreeClassifier, plot_tree\n\n# Parameters\nn_classes = 3\nplot_colors = \"ryb\"\nplot_step = 0.02\n\n# Load data\niris = load_iris()\n```\n<br>\n\n- enumerate는 입력값으로 시퀀스 자료형(리스트, 튜플, 문자열)을 입력받아,\nenumerate 객체를 리턴한다.\n- enumerate 객체는 첫번째로 그 순서값, 두번째로 그 순서값에 해당되는 시퀀스 자료형의 실제값을 갖는 객체이다\n- X = iris.data[:, pair] \n하나의 pair에 들어가는 값이 [0,2]라면, 첫번째 세번째만 선택해서 X에 할당\n```python\nfor pairidx, pair in enumerate([[0, 1], [0, 2], [0, 3], [1, 2], [1, 3], [2, 3]]):\n    # We only take the two corresponding features\n    X = iris.data[:, pair]\n    y = iris.target\n```\n<br>\n\n```python\n    # Train\n    clf = DecisionTreeClassifier().fit(X, y)\n\n    # Plot the decision boundary\n    plt.subplot(2, 3, pairidx + 1)\n\n    x_min, x_max = X[:, 0].min() - 1, X[:, 0].max() + 1\n    y_min, y_max = X[:, 1].min() - 1, X[:, 1].max() + 1\n    xx, yy = np.meshgrid(\n        np.arange(x_min, x_max, plot_step), np.arange(y_min, y_max, plot_step)\n    )\n    plt.tight_layout(h_pad=0.5, w_pad=0.5, pad=2.5)\n\n    Z = clf.predict(np.c_[xx.ravel(), yy.ravel()])\n    Z = Z.reshape(xx.shape)\n    cs = plt.contourf(xx, yy, Z, cmap=plt.cm.RdYlBu)\n```\n<br>\n\n\n```python\n    plt.xlabel(iris.feature_names[pair[0]])\n    plt.ylabel(iris.feature_names[pair[1]])\n\n    # Plot the training points\n    for i, color in zip(range(n_classes), plot_colors):\n        idx = np.where(y == i)\n        plt.scatter(\n            X[idx, 0],\n            X[idx, 1],\n            c=color,\n            label=iris.target_names[i],\n            cmap=plt.cm.RdYlBu,\n            edgecolor=\"black\",\n            s=15,\n        )\n\nplt.suptitle(\"Decision surface of a decision tree using paired features\")\nplt.legend(loc=\"lower right\", borderpad=0, handletextpad=0)\nplt.axis(\"tight\")\n\nplt.figure()\nclf = DecisionTreeClassifier().fit(iris.data, iris.target)\nplot_tree(clf, filled=True)\nplt.show()\n```\n    \n![](/images/0206/iris1.png)\n![](/images/0206/iris2.png)\n\n<br>\n<br>\n<br>\n<br>\n\n참고 사이트: \n---\n[위키백과](https://ko.wikipedia.org/wiki/%EA%B2%B0%EC%A0%95_%ED%8A%B8%EB%A6%AC)\n[Scikitlearn](https://scikit-learn.org/stable/modules/tree.html#regression)\n[블로그1](https://velog.io/@changhtun1/Python-Decision-Tree-%EC%9D%B4%EB%A1%A0-%EB%B0%8F-%EC%8B%A4%EC%8A%B5)\n[블로그2](https://bpas.tistory.com/21)\n[유튜브](https://www.youtube.com/watch?v=n0p0120Gxqk)","slug":"0206-ML-DecisionTree-md","published":1,"updated":"2022-01-03T12:20:08.047Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cky2hohep000n5nrjb9fw6guw","content":"<br>\n\n\n<h3 id=\"Decision-Tree란\"><a href=\"#Decision-Tree란\" class=\"headerlink\" title=\"Decision Tree란\"></a><strong>Decision Tree란</strong></h3><hr>\n<ul>\n<li><p>머신러닝에 사용되는 예측 모델링 접근 방식 중 하나이다.<br>여러 입력 변수를 기반으로 대상 변수의 값을 예측하는 모델을 만드는 것이다.<br>분류와 회귀 모두 가능하며, 스무고개 하듯이 Y/N으로 질문을 이어가며 학습한다.</p>\n</li>\n<li><p>Deicision Tree는 데이터에서 if-else 문을 이용하여 sine 곡선에 가까운 데이터를 학습한다.<br>트리가 깊어질수록 모델이 더 복잡해진다.</p>\n</li>\n</ul>\n<br>\n\n<h3 id=\"알고리즘-이해하기\"><a href=\"#알고리즘-이해하기\" class=\"headerlink\" title=\"알고리즘 이해하기\"></a><strong>알고리즘 이해하기</strong></h3><hr>\n<ol>\n<li>Rood node (뿌리 마디)<br>처음에 root node에서 문제의 질문이 입력되면 Y/N로 데이터가 분류된다.</li>\n<li>Intermediate node (중간 마디)<br>Y로 분류된 데이터는 다시 질문이 입력되어 Y/N으로 데이터가 분류된다.</li>\n<li>Terminal node (끝 마디)<br>끝마디에서는 데이터가 가장 섞이지 않은 상태로 완전히 분류되어 Entropy가 낮아진다</li>\n</ol>\n<ul>\n<li>초기 지점은 root node이고 분기가 거듭될 수록 데이터의 개수는 줄어든다</li>\n<li>terminal node에 속하는 데이터의 개수를 합하면 root node의 데이터 수와 일치한다</li>\n</ul>\n<br>\n\n<h3 id=\"Impurity-불순도-란\"><a href=\"#Impurity-불순도-란\" class=\"headerlink\" title=\"Impurity(불순도)란\"></a><strong>Impurity(불순도)란</strong></h3><hr>\n<p>해당 범주 안에서 서로 다른 데이터가 얼마나 섞여 있는지 뜻한다<br><br></p>\n<h3 id=\"Entropy란\"><a href=\"#Entropy란\" class=\"headerlink\" title=\"Entropy란\"></a><strong>Entropy란</strong></h3><hr>\n<p>불순도를 수치적으로 나타낸 척도이다</p>\n<p>Entropy가 높으면 불순도가 높고<br>Entropy가 낮으면 불순도가 낮다</p>\n<p>예를들면 Entropy가 높으면 정리되지 않은 방, 낮으면 정리된 방 이라고 생각하면 된다.</p>\n<p>Decision Tree는 불순도를 최소화 하는 방향으로 학습을 하게 된다.</p>\n<br>\n\n<h3 id=\"전체-흐름\"><a href=\"#전체-흐름\" class=\"headerlink\" title=\"전체 흐름\"></a><strong>전체 흐름</strong></h3><hr>\n<ol>\n<li><p>Define Problem, Collect training data</p>\n</li>\n<li><p>Build a Decision Tree (Extract Data, Build a tree)</p>\n</li>\n<li><p>Deploy machine</p>\n</li>\n<li><p>Test with test data</p>\n</li>\n</ol>\n<br>\n\n<h3 id=\"장점\"><a href=\"#장점\" class=\"headerlink\" title=\"장점\"></a><strong>장점</strong></h3><hr>\n<ul>\n<li>데이터의 전처리를 하지 않아도 된다.</li>\n<li>수치형과 범주형 변수를 한번에 다룰 수 있다.</li>\n</ul>\n<br>\n\n<h3 id=\"한계\"><a href=\"#한계\" class=\"headerlink\" title=\"한계\"></a><strong>한계</strong></h3><hr>\n<ul>\n<li>샘플 사이즈가 크면 효율성 및 가독성이 떨어진다.</li>\n<li>과적합으로 알고리즘 성능이 떨어질 수 있다.</li>\n<li>한번에 하나의변수만을 고려하므로 변수간 상호작용을 파악하기 어렵다.</li>\n<li>약간의 차이에 따라 트리의 모양이 많이 달라질 수 있다.</li>\n</ul>\n<br>\n\n<h3 id=\"예제\"><a href=\"#예제\" class=\"headerlink\" title=\"예제\"></a><strong>예제</strong></h3><ul>\n<li>iris data set을 이용한 deicision tree 만들기<br>Scikitlearn 사이트의 iris 데이터셋을 이용한 예제이다.<br>코드 출처: <a href=\"https://scikit-learn.org/stable/auto_examples/tree/plot_iris_dtc.html\">https://scikit-learn.org/stable/auto_examples/tree/plot_iris_dtc.html</a></li>\n</ul>\n<hr>\n<p><strong>데이터 불러오기, 그래프그리기 위한 설정</strong></p>\n<ul>\n<li>plot_colors = ‘ryb’<br>blue red yello 색을 나타내기 위해 사용</li>\n<li>plot_step<br>축의 단위를 설정</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.datasets <span class=\"keyword\">import</span> load_iris</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.tree <span class=\"keyword\">import</span> DecisionTreeClassifier, plot_tree</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Parameters</span></span><br><span class=\"line\">n_classes = <span class=\"number\">3</span></span><br><span class=\"line\">plot_colors = <span class=\"string\">&quot;ryb&quot;</span></span><br><span class=\"line\">plot_step = <span class=\"number\">0.02</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Load data</span></span><br><span class=\"line\">iris = load_iris()</span><br></pre></td></tr></table></figure>\n<br>\n\n<ul>\n<li>enumerate는 입력값으로 시퀀스 자료형(리스트, 튜플, 문자열)을 입력받아,<br>enumerate 객체를 리턴한다.</li>\n<li>enumerate 객체는 첫번째로 그 순서값, 두번째로 그 순서값에 해당되는 시퀀스 자료형의 실제값을 갖는 객체이다</li>\n<li>X = iris.data[:, pair]<br>하나의 pair에 들어가는 값이 [0,2]라면, 첫번째 세번째만 선택해서 X에 할당<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> pairidx, pair <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>([[<span class=\"number\">0</span>, <span class=\"number\">1</span>], [<span class=\"number\">0</span>, <span class=\"number\">2</span>], [<span class=\"number\">0</span>, <span class=\"number\">3</span>], [<span class=\"number\">1</span>, <span class=\"number\">2</span>], [<span class=\"number\">1</span>, <span class=\"number\">3</span>], [<span class=\"number\">2</span>, <span class=\"number\">3</span>]]):</span><br><span class=\"line\">    <span class=\"comment\"># We only take the two corresponding features</span></span><br><span class=\"line\">    X = iris.data[:, pair]</span><br><span class=\"line\">    y = iris.target</span><br></pre></td></tr></table></figure>\n<br></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Train</span></span><br><span class=\"line\">clf = DecisionTreeClassifier().fit(X, y)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Plot the decision boundary</span></span><br><span class=\"line\">plt.subplot(<span class=\"number\">2</span>, <span class=\"number\">3</span>, pairidx + <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">x_min, x_max = X[:, <span class=\"number\">0</span>].<span class=\"built_in\">min</span>() - <span class=\"number\">1</span>, X[:, <span class=\"number\">0</span>].<span class=\"built_in\">max</span>() + <span class=\"number\">1</span></span><br><span class=\"line\">y_min, y_max = X[:, <span class=\"number\">1</span>].<span class=\"built_in\">min</span>() - <span class=\"number\">1</span>, X[:, <span class=\"number\">1</span>].<span class=\"built_in\">max</span>() + <span class=\"number\">1</span></span><br><span class=\"line\">xx, yy = np.meshgrid(</span><br><span class=\"line\">    np.arange(x_min, x_max, plot_step), np.arange(y_min, y_max, plot_step)</span><br><span class=\"line\">)</span><br><span class=\"line\">plt.tight_layout(h_pad=<span class=\"number\">0.5</span>, w_pad=<span class=\"number\">0.5</span>, pad=<span class=\"number\">2.5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">Z = clf.predict(np.c_[xx.ravel(), yy.ravel()])</span><br><span class=\"line\">Z = Z.reshape(xx.shape)</span><br><span class=\"line\">cs = plt.contourf(xx, yy, Z, cmap=plt.cm.RdYlBu)</span><br></pre></td></tr></table></figure>\n<br>\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    plt.xlabel(iris.feature_names[pair[<span class=\"number\">0</span>]])</span><br><span class=\"line\">    plt.ylabel(iris.feature_names[pair[<span class=\"number\">1</span>]])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Plot the training points</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i, color <span class=\"keyword\">in</span> <span class=\"built_in\">zip</span>(<span class=\"built_in\">range</span>(n_classes), plot_colors):</span><br><span class=\"line\">        idx = np.where(y == i)</span><br><span class=\"line\">        plt.scatter(</span><br><span class=\"line\">            X[idx, <span class=\"number\">0</span>],</span><br><span class=\"line\">            X[idx, <span class=\"number\">1</span>],</span><br><span class=\"line\">            c=color,</span><br><span class=\"line\">            label=iris.target_names[i],</span><br><span class=\"line\">            cmap=plt.cm.RdYlBu,</span><br><span class=\"line\">            edgecolor=<span class=\"string\">&quot;black&quot;</span>,</span><br><span class=\"line\">            s=<span class=\"number\">15</span>,</span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\">plt.suptitle(<span class=\"string\">&quot;Decision surface of a decision tree using paired features&quot;</span>)</span><br><span class=\"line\">plt.legend(loc=<span class=\"string\">&quot;lower right&quot;</span>, borderpad=<span class=\"number\">0</span>, handletextpad=<span class=\"number\">0</span>)</span><br><span class=\"line\">plt.axis(<span class=\"string\">&quot;tight&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">plt.figure()</span><br><span class=\"line\">clf = DecisionTreeClassifier().fit(iris.data, iris.target)</span><br><span class=\"line\">plot_tree(clf, filled=<span class=\"literal\">True</span>)</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/0206/iris1.png\"><br><img src=\"/images/0206/iris2.png\"></p>\n<br>\n<br>\n<br>\n<br>\n\n<h2 id=\"참고-사이트\"><a href=\"#참고-사이트\" class=\"headerlink\" title=\"참고 사이트: \"></a>참고 사이트: </h2><p><a href=\"https://ko.wikipedia.org/wiki/%EA%B2%B0%EC%A0%95_%ED%8A%B8%EB%A6%AC\">위키백과</a><br><a href=\"https://scikit-learn.org/stable/modules/tree.html#regression\">Scikitlearn</a><br><a href=\"https://velog.io/@changhtun1/Python-Decision-Tree-%EC%9D%B4%EB%A1%A0-%EB%B0%8F-%EC%8B%A4%EC%8A%B5\">블로그1</a><br><a href=\"https://bpas.tistory.com/21\">블로그2</a><br><a href=\"https://www.youtube.com/watch?v=n0p0120Gxqk\">유튜브</a></p>\n","site":{"data":{}},"excerpt":"Decision Tree란\n\n\n\n * 머신러닝에 사용되는 예측 모델링 접근 방식 중 하나이다.\n   여러 입력 변수를 기반으로 대상 변수의 값을 예측하는 모델을 만드는 것이다.\n   분류와 회귀 모두 가능하며, 스무고개 하듯이 Y/N으로 질문을 이어가며 학습한다.\n   \n   \n * Deicision Tree는 데이터에서 if-else 문을 이용하여 sine 곡선에 가까운 데이터를 학습한다.\n   트리가 깊어질수록 모델이 더 복잡해진다.\n   \n   \n\n\n알고리즘 이해하기\n\n\n\n 1. Rood node (뿌리 마디)\n    처음에 ","more":"<br>\n\n\n<h3 id=\"Decision-Tree란\"><a href=\"#Decision-Tree란\" class=\"headerlink\" title=\"Decision Tree란\"></a><strong>Decision Tree란</strong></h3><hr>\n<ul>\n<li><p>머신러닝에 사용되는 예측 모델링 접근 방식 중 하나이다.<br>여러 입력 변수를 기반으로 대상 변수의 값을 예측하는 모델을 만드는 것이다.<br>분류와 회귀 모두 가능하며, 스무고개 하듯이 Y/N으로 질문을 이어가며 학습한다.</p>\n</li>\n<li><p>Deicision Tree는 데이터에서 if-else 문을 이용하여 sine 곡선에 가까운 데이터를 학습한다.<br>트리가 깊어질수록 모델이 더 복잡해진다.</p>\n</li>\n</ul>\n<br>\n\n<h3 id=\"알고리즘-이해하기\"><a href=\"#알고리즘-이해하기\" class=\"headerlink\" title=\"알고리즘 이해하기\"></a><strong>알고리즘 이해하기</strong></h3><hr>\n<ol>\n<li>Rood node (뿌리 마디)<br>처음에 root node에서 문제의 질문이 입력되면 Y/N로 데이터가 분류된다.</li>\n<li>Intermediate node (중간 마디)<br>Y로 분류된 데이터는 다시 질문이 입력되어 Y/N으로 데이터가 분류된다.</li>\n<li>Terminal node (끝 마디)<br>끝마디에서는 데이터가 가장 섞이지 않은 상태로 완전히 분류되어 Entropy가 낮아진다</li>\n</ol>\n<ul>\n<li>초기 지점은 root node이고 분기가 거듭될 수록 데이터의 개수는 줄어든다</li>\n<li>terminal node에 속하는 데이터의 개수를 합하면 root node의 데이터 수와 일치한다</li>\n</ul>\n<br>\n\n<h3 id=\"Impurity-불순도-란\"><a href=\"#Impurity-불순도-란\" class=\"headerlink\" title=\"Impurity(불순도)란\"></a><strong>Impurity(불순도)란</strong></h3><hr>\n<p>해당 범주 안에서 서로 다른 데이터가 얼마나 섞여 있는지 뜻한다<br><br></p>\n<h3 id=\"Entropy란\"><a href=\"#Entropy란\" class=\"headerlink\" title=\"Entropy란\"></a><strong>Entropy란</strong></h3><hr>\n<p>불순도를 수치적으로 나타낸 척도이다</p>\n<p>Entropy가 높으면 불순도가 높고<br>Entropy가 낮으면 불순도가 낮다</p>\n<p>예를들면 Entropy가 높으면 정리되지 않은 방, 낮으면 정리된 방 이라고 생각하면 된다.</p>\n<p>Decision Tree는 불순도를 최소화 하는 방향으로 학습을 하게 된다.</p>\n<br>\n\n<h3 id=\"전체-흐름\"><a href=\"#전체-흐름\" class=\"headerlink\" title=\"전체 흐름\"></a><strong>전체 흐름</strong></h3><hr>\n<ol>\n<li><p>Define Problem, Collect training data</p>\n</li>\n<li><p>Build a Decision Tree (Extract Data, Build a tree)</p>\n</li>\n<li><p>Deploy machine</p>\n</li>\n<li><p>Test with test data</p>\n</li>\n</ol>\n<br>\n\n<h3 id=\"장점\"><a href=\"#장점\" class=\"headerlink\" title=\"장점\"></a><strong>장점</strong></h3><hr>\n<ul>\n<li>데이터의 전처리를 하지 않아도 된다.</li>\n<li>수치형과 범주형 변수를 한번에 다룰 수 있다.</li>\n</ul>\n<br>\n\n<h3 id=\"한계\"><a href=\"#한계\" class=\"headerlink\" title=\"한계\"></a><strong>한계</strong></h3><hr>\n<ul>\n<li>샘플 사이즈가 크면 효율성 및 가독성이 떨어진다.</li>\n<li>과적합으로 알고리즘 성능이 떨어질 수 있다.</li>\n<li>한번에 하나의변수만을 고려하므로 변수간 상호작용을 파악하기 어렵다.</li>\n<li>약간의 차이에 따라 트리의 모양이 많이 달라질 수 있다.</li>\n</ul>\n<br>\n\n<h3 id=\"예제\"><a href=\"#예제\" class=\"headerlink\" title=\"예제\"></a><strong>예제</strong></h3><ul>\n<li>iris data set을 이용한 deicision tree 만들기<br>Scikitlearn 사이트의 iris 데이터셋을 이용한 예제이다.<br>코드 출처: <a href=\"https://scikit-learn.org/stable/auto_examples/tree/plot_iris_dtc.html\">https://scikit-learn.org/stable/auto_examples/tree/plot_iris_dtc.html</a></li>\n</ul>\n<hr>\n<p><strong>데이터 불러오기, 그래프그리기 위한 설정</strong></p>\n<ul>\n<li>plot_colors = ‘ryb’<br>blue red yello 색을 나타내기 위해 사용</li>\n<li>plot_step<br>축의 단위를 설정</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.datasets <span class=\"keyword\">import</span> load_iris</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.tree <span class=\"keyword\">import</span> DecisionTreeClassifier, plot_tree</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Parameters</span></span><br><span class=\"line\">n_classes = <span class=\"number\">3</span></span><br><span class=\"line\">plot_colors = <span class=\"string\">&quot;ryb&quot;</span></span><br><span class=\"line\">plot_step = <span class=\"number\">0.02</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Load data</span></span><br><span class=\"line\">iris = load_iris()</span><br></pre></td></tr></table></figure>\n<br>\n\n<ul>\n<li>enumerate는 입력값으로 시퀀스 자료형(리스트, 튜플, 문자열)을 입력받아,<br>enumerate 객체를 리턴한다.</li>\n<li>enumerate 객체는 첫번째로 그 순서값, 두번째로 그 순서값에 해당되는 시퀀스 자료형의 실제값을 갖는 객체이다</li>\n<li>X = iris.data[:, pair]<br>하나의 pair에 들어가는 값이 [0,2]라면, 첫번째 세번째만 선택해서 X에 할당<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> pairidx, pair <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>([[<span class=\"number\">0</span>, <span class=\"number\">1</span>], [<span class=\"number\">0</span>, <span class=\"number\">2</span>], [<span class=\"number\">0</span>, <span class=\"number\">3</span>], [<span class=\"number\">1</span>, <span class=\"number\">2</span>], [<span class=\"number\">1</span>, <span class=\"number\">3</span>], [<span class=\"number\">2</span>, <span class=\"number\">3</span>]]):</span><br><span class=\"line\">    <span class=\"comment\"># We only take the two corresponding features</span></span><br><span class=\"line\">    X = iris.data[:, pair]</span><br><span class=\"line\">    y = iris.target</span><br></pre></td></tr></table></figure>\n<br></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Train</span></span><br><span class=\"line\">clf = DecisionTreeClassifier().fit(X, y)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Plot the decision boundary</span></span><br><span class=\"line\">plt.subplot(<span class=\"number\">2</span>, <span class=\"number\">3</span>, pairidx + <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">x_min, x_max = X[:, <span class=\"number\">0</span>].<span class=\"built_in\">min</span>() - <span class=\"number\">1</span>, X[:, <span class=\"number\">0</span>].<span class=\"built_in\">max</span>() + <span class=\"number\">1</span></span><br><span class=\"line\">y_min, y_max = X[:, <span class=\"number\">1</span>].<span class=\"built_in\">min</span>() - <span class=\"number\">1</span>, X[:, <span class=\"number\">1</span>].<span class=\"built_in\">max</span>() + <span class=\"number\">1</span></span><br><span class=\"line\">xx, yy = np.meshgrid(</span><br><span class=\"line\">    np.arange(x_min, x_max, plot_step), np.arange(y_min, y_max, plot_step)</span><br><span class=\"line\">)</span><br><span class=\"line\">plt.tight_layout(h_pad=<span class=\"number\">0.5</span>, w_pad=<span class=\"number\">0.5</span>, pad=<span class=\"number\">2.5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">Z = clf.predict(np.c_[xx.ravel(), yy.ravel()])</span><br><span class=\"line\">Z = Z.reshape(xx.shape)</span><br><span class=\"line\">cs = plt.contourf(xx, yy, Z, cmap=plt.cm.RdYlBu)</span><br></pre></td></tr></table></figure>\n<br>\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    plt.xlabel(iris.feature_names[pair[<span class=\"number\">0</span>]])</span><br><span class=\"line\">    plt.ylabel(iris.feature_names[pair[<span class=\"number\">1</span>]])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Plot the training points</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i, color <span class=\"keyword\">in</span> <span class=\"built_in\">zip</span>(<span class=\"built_in\">range</span>(n_classes), plot_colors):</span><br><span class=\"line\">        idx = np.where(y == i)</span><br><span class=\"line\">        plt.scatter(</span><br><span class=\"line\">            X[idx, <span class=\"number\">0</span>],</span><br><span class=\"line\">            X[idx, <span class=\"number\">1</span>],</span><br><span class=\"line\">            c=color,</span><br><span class=\"line\">            label=iris.target_names[i],</span><br><span class=\"line\">            cmap=plt.cm.RdYlBu,</span><br><span class=\"line\">            edgecolor=<span class=\"string\">&quot;black&quot;</span>,</span><br><span class=\"line\">            s=<span class=\"number\">15</span>,</span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\">plt.suptitle(<span class=\"string\">&quot;Decision surface of a decision tree using paired features&quot;</span>)</span><br><span class=\"line\">plt.legend(loc=<span class=\"string\">&quot;lower right&quot;</span>, borderpad=<span class=\"number\">0</span>, handletextpad=<span class=\"number\">0</span>)</span><br><span class=\"line\">plt.axis(<span class=\"string\">&quot;tight&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">plt.figure()</span><br><span class=\"line\">clf = DecisionTreeClassifier().fit(iris.data, iris.target)</span><br><span class=\"line\">plot_tree(clf, filled=<span class=\"literal\">True</span>)</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/0206/iris1.png\"><br><img src=\"/images/0206/iris2.png\"></p>\n<br>\n<br>\n<br>\n<br>\n\n<h2 id=\"참고-사이트\"><a href=\"#참고-사이트\" class=\"headerlink\" title=\"참고 사이트: \"></a>참고 사이트: </h2><p><a href=\"https://ko.wikipedia.org/wiki/%EA%B2%B0%EC%A0%95_%ED%8A%B8%EB%A6%AC\">위키백과</a><br><a href=\"https://scikit-learn.org/stable/modules/tree.html#regression\">Scikitlearn</a><br><a href=\"https://velog.io/@changhtun1/Python-Decision-Tree-%EC%9D%B4%EB%A1%A0-%EB%B0%8F-%EC%8B%A4%EC%8A%B5\">블로그1</a><br><a href=\"https://bpas.tistory.com/21\">블로그2</a><br><a href=\"https://www.youtube.com/watch?v=n0p0120Gxqk\">유튜브</a></p>\n"},{"title":"Dash를 활용한 대시보드 만들기","date":"2021-11-30T15:00:00.000Z","toc":true,"_content":"\n- 파이썬 라이브러리 20만개 넘음\n- GUI, 웹개발, 앱, 통계, 머신러닝, 딥러닝, 그 외 여러가지... \n----> 버전 이슈 (라이브러리 버전 이슈!!) \n----> Dash 라이브러리 활용하여, 대시보드 프로젝트\n----> 별도의 프로젝트 관리 (일부 라이브러리만 씀)\n----> 가상으로 환경 하나 만들자, A 환경 out of Local Machine\n       : 대시보드 만들 관련 프로젝트만 라이브러리 다운로드 받음\n       : conda 환경 가상환경, export environment.yml, 파이썬 버전, 가상환경 접속 ---> 필요한 라이브러리 설치\n         : PyCharm 파이썬 인터프리터 설정\n       : virtualenv 가상환경 & 가상환경 접속 ---> 라이브러리 설치\n       : 키워드 \"which python\"\n\n\n### 실행환경\n---\n- Anaconda Prompt 사용\n\n데이터: https://www.kaggle.com/neuromusic/avocado-prices\n\n\n### Dash Library란?\n---\nDash는 반응형 웹 어플리케이션을 만들기 위한 오픈소스 파이썬 UI 라이브러리이다.\nPlotly에 기반하여 Web Service를 개발할 수 있는 라이브러리로 Flask+matplotlib 구현을 대체할 수 있다 (Python, R, Jullia와 호환)\n\n(+Flask는 웹 애플리케이션 개발을 위한 파이썬 프레임워크다)\n(+프로그래밍에서 특정 운영 체제를 위한 응용 프로그램 표준 구조를 구현하는 클래스와 라이브러리 모임\n라이브러리가 연장이라면 프레임워크는 차, 비행기, 탈것 같은 운송수단)\n\n### 가상환경이란?\n가상환경은 여러개의 파이썬 프로젝트가 하나의 컴퓨터에서 충동을 일으키지 않고 존재할 수 있도록 해준다.\n-> 독립적인 작업 환경에서 패키지 및 버전관리를 하기위해 가상환경을 사용한다.\n\n### conda를 활용한 가상환경 설정 \n---\n\n1. 가상환경 생성하기\nconda create -n 가상환경이름 python=버전\n\n2. 가상환경 확인하기\nconda info --envs\n\n3. 가상환경 활성화하기\nconda activate 가상환경이름\n\n4. 가상환경 비활성화 하기\nconda deactivate\n\n5. 가상환경 복사하기\nconda create -n 복사된_가상환경이름 --clone 복사할_가상환경이름\n\n6. 가상환경 삭제하기\nconda remove -n 가상환경이름 --all\n\n\n### Dash 라이브러리 설치\nconda install dash\nconda install pandas\nconda install colorama\n\n\n\n\n\n\nRef\n---\nhttps://yganalyst.github.io/pythonic/anaconda_env_1/\nhttps://realpython.com/python-dash/\nhttps://kibua20.tistory.com/212\n[프레임워크](https://www.castingn.com/sourcing/kkultip_detail/110)","source":"_posts/Dash.md","raw":"---\ntitle: Dash를 활용한 대시보드 만들기\ndate: 2021-12-01\ntags: python, Heroku, Dashboard\ncategories: \n- 파이썬\n- Python heroku\ntoc: true\n---\n\n- 파이썬 라이브러리 20만개 넘음\n- GUI, 웹개발, 앱, 통계, 머신러닝, 딥러닝, 그 외 여러가지... \n----> 버전 이슈 (라이브러리 버전 이슈!!) \n----> Dash 라이브러리 활용하여, 대시보드 프로젝트\n----> 별도의 프로젝트 관리 (일부 라이브러리만 씀)\n----> 가상으로 환경 하나 만들자, A 환경 out of Local Machine\n       : 대시보드 만들 관련 프로젝트만 라이브러리 다운로드 받음\n       : conda 환경 가상환경, export environment.yml, 파이썬 버전, 가상환경 접속 ---> 필요한 라이브러리 설치\n         : PyCharm 파이썬 인터프리터 설정\n       : virtualenv 가상환경 & 가상환경 접속 ---> 라이브러리 설치\n       : 키워드 \"which python\"\n\n\n### 실행환경\n---\n- Anaconda Prompt 사용\n\n데이터: https://www.kaggle.com/neuromusic/avocado-prices\n\n\n### Dash Library란?\n---\nDash는 반응형 웹 어플리케이션을 만들기 위한 오픈소스 파이썬 UI 라이브러리이다.\nPlotly에 기반하여 Web Service를 개발할 수 있는 라이브러리로 Flask+matplotlib 구현을 대체할 수 있다 (Python, R, Jullia와 호환)\n\n(+Flask는 웹 애플리케이션 개발을 위한 파이썬 프레임워크다)\n(+프로그래밍에서 특정 운영 체제를 위한 응용 프로그램 표준 구조를 구현하는 클래스와 라이브러리 모임\n라이브러리가 연장이라면 프레임워크는 차, 비행기, 탈것 같은 운송수단)\n\n### 가상환경이란?\n가상환경은 여러개의 파이썬 프로젝트가 하나의 컴퓨터에서 충동을 일으키지 않고 존재할 수 있도록 해준다.\n-> 독립적인 작업 환경에서 패키지 및 버전관리를 하기위해 가상환경을 사용한다.\n\n### conda를 활용한 가상환경 설정 \n---\n\n1. 가상환경 생성하기\nconda create -n 가상환경이름 python=버전\n\n2. 가상환경 확인하기\nconda info --envs\n\n3. 가상환경 활성화하기\nconda activate 가상환경이름\n\n4. 가상환경 비활성화 하기\nconda deactivate\n\n5. 가상환경 복사하기\nconda create -n 복사된_가상환경이름 --clone 복사할_가상환경이름\n\n6. 가상환경 삭제하기\nconda remove -n 가상환경이름 --all\n\n\n### Dash 라이브러리 설치\nconda install dash\nconda install pandas\nconda install colorama\n\n\n\n\n\n\nRef\n---\nhttps://yganalyst.github.io/pythonic/anaconda_env_1/\nhttps://realpython.com/python-dash/\nhttps://kibua20.tistory.com/212\n[프레임워크](https://www.castingn.com/sourcing/kkultip_detail/110)","slug":"Dash","published":1,"updated":"2022-01-03T12:20:08.047Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cky2hoheq000r5nrj39y72in4","content":"<ul>\n<li>파이썬 라이브러리 20만개 넘음</li>\n<li>GUI, 웹개발, 앱, 통계, 머신러닝, 딥러닝, 그 외 여러가지… </li>\n<li>—&gt; 버전 이슈 (라이브러리 버전 이슈!!) </li>\n<li>—&gt; Dash 라이브러리 활용하여, 대시보드 프로젝트</li>\n<li>—&gt; 별도의 프로젝트 관리 (일부 라이브러리만 씀)</li>\n<li>—&gt; 가상으로 환경 하나 만들자, A 환경 out of Local Machine<pre><code>  : 대시보드 만들 관련 프로젝트만 라이브러리 다운로드 받음\n  : conda 환경 가상환경, export environment.yml, 파이썬 버전, 가상환경 접속 ---&gt; 필요한 라이브러리 설치\n    : PyCharm 파이썬 인터프리터 설정\n  : virtualenv 가상환경 &amp; 가상환경 접속 ---&gt; 라이브러리 설치\n  : 키워드 &quot;which python&quot;\n</code></pre>\n</li>\n</ul>\n<h3 id=\"실행환경\"><a href=\"#실행환경\" class=\"headerlink\" title=\"실행환경\"></a>실행환경</h3><hr>\n<ul>\n<li>Anaconda Prompt 사용</li>\n</ul>\n<p>데이터: <a href=\"https://www.kaggle.com/neuromusic/avocado-prices\">https://www.kaggle.com/neuromusic/avocado-prices</a></p>\n<h3 id=\"Dash-Library란\"><a href=\"#Dash-Library란\" class=\"headerlink\" title=\"Dash Library란?\"></a>Dash Library란?</h3><hr>\n<p>Dash는 반응형 웹 어플리케이션을 만들기 위한 오픈소스 파이썬 UI 라이브러리이다.<br>Plotly에 기반하여 Web Service를 개발할 수 있는 라이브러리로 Flask+matplotlib 구현을 대체할 수 있다 (Python, R, Jullia와 호환)</p>\n<p>(+Flask는 웹 애플리케이션 개발을 위한 파이썬 프레임워크다)<br>(+프로그래밍에서 특정 운영 체제를 위한 응용 프로그램 표준 구조를 구현하는 클래스와 라이브러리 모임<br>라이브러리가 연장이라면 프레임워크는 차, 비행기, 탈것 같은 운송수단)</p>\n<h3 id=\"가상환경이란\"><a href=\"#가상환경이란\" class=\"headerlink\" title=\"가상환경이란?\"></a>가상환경이란?</h3><p>가상환경은 여러개의 파이썬 프로젝트가 하나의 컴퓨터에서 충동을 일으키지 않고 존재할 수 있도록 해준다.<br>-&gt; 독립적인 작업 환경에서 패키지 및 버전관리를 하기위해 가상환경을 사용한다.</p>\n<h3 id=\"conda를-활용한-가상환경-설정\"><a href=\"#conda를-활용한-가상환경-설정\" class=\"headerlink\" title=\"conda를 활용한 가상환경 설정\"></a>conda를 활용한 가상환경 설정</h3><hr>\n<ol>\n<li><p>가상환경 생성하기<br>conda create -n 가상환경이름 python=버전</p>\n</li>\n<li><p>가상환경 확인하기<br>conda info –envs</p>\n</li>\n<li><p>가상환경 활성화하기<br>conda activate 가상환경이름</p>\n</li>\n<li><p>가상환경 비활성화 하기<br>conda deactivate</p>\n</li>\n<li><p>가상환경 복사하기<br>conda create -n 복사된_가상환경이름 –clone 복사할_가상환경이름</p>\n</li>\n<li><p>가상환경 삭제하기<br>conda remove -n 가상환경이름 –all</p>\n</li>\n</ol>\n<h3 id=\"Dash-라이브러리-설치\"><a href=\"#Dash-라이브러리-설치\" class=\"headerlink\" title=\"Dash 라이브러리 설치\"></a>Dash 라이브러리 설치</h3><p>conda install dash<br>conda install pandas<br>conda install colorama</p>\n<h2 id=\"Ref\"><a href=\"#Ref\" class=\"headerlink\" title=\"Ref\"></a>Ref</h2><p><a href=\"https://yganalyst.github.io/pythonic/anaconda_env_1/\">https://yganalyst.github.io/pythonic/anaconda_env_1/</a><br><a href=\"https://realpython.com/python-dash/\">https://realpython.com/python-dash/</a><br><a href=\"https://kibua20.tistory.com/212\">https://kibua20.tistory.com/212</a><br><a href=\"https://www.castingn.com/sourcing/kkultip_detail/110\">프레임워크</a></p>\n","site":{"data":{}},"excerpt":"* 파이썬 라이브러리 20만개 넘음\n * GUI, 웹개발, 앱, 통계, 머신러닝, 딥러닝, 그 외 여러가지… \n * —> 버전 이슈 (라이브러리 버전 이슈!!) \n * —> Dash 라이브러리 활용하여, 대시보드 프로젝트\n * —> 별도의 프로젝트 관리 (일부 라이브러리만 씀)\n * —> 가상으로 환경 하나 만들자, A 환경 out of Local Machine  : 대시보드 만들 관련 프로젝트만 라이브러리 다운로드 받음\n     : conda 환경 가상환경, export environment.yml, 파이썬 버전, 가상환경 접속 ","more":"<ul>\n<li>파이썬 라이브러리 20만개 넘음</li>\n<li>GUI, 웹개발, 앱, 통계, 머신러닝, 딥러닝, 그 외 여러가지… </li>\n<li>—&gt; 버전 이슈 (라이브러리 버전 이슈!!) </li>\n<li>—&gt; Dash 라이브러리 활용하여, 대시보드 프로젝트</li>\n<li>—&gt; 별도의 프로젝트 관리 (일부 라이브러리만 씀)</li>\n<li>—&gt; 가상으로 환경 하나 만들자, A 환경 out of Local Machine<pre><code>  : 대시보드 만들 관련 프로젝트만 라이브러리 다운로드 받음\n  : conda 환경 가상환경, export environment.yml, 파이썬 버전, 가상환경 접속 ---&gt; 필요한 라이브러리 설치\n    : PyCharm 파이썬 인터프리터 설정\n  : virtualenv 가상환경 &amp; 가상환경 접속 ---&gt; 라이브러리 설치\n  : 키워드 &quot;which python&quot;\n</code></pre>\n</li>\n</ul>\n<h3 id=\"실행환경\"><a href=\"#실행환경\" class=\"headerlink\" title=\"실행환경\"></a>실행환경</h3><hr>\n<ul>\n<li>Anaconda Prompt 사용</li>\n</ul>\n<p>데이터: <a href=\"https://www.kaggle.com/neuromusic/avocado-prices\">https://www.kaggle.com/neuromusic/avocado-prices</a></p>\n<h3 id=\"Dash-Library란\"><a href=\"#Dash-Library란\" class=\"headerlink\" title=\"Dash Library란?\"></a>Dash Library란?</h3><hr>\n<p>Dash는 반응형 웹 어플리케이션을 만들기 위한 오픈소스 파이썬 UI 라이브러리이다.<br>Plotly에 기반하여 Web Service를 개발할 수 있는 라이브러리로 Flask+matplotlib 구현을 대체할 수 있다 (Python, R, Jullia와 호환)</p>\n<p>(+Flask는 웹 애플리케이션 개발을 위한 파이썬 프레임워크다)<br>(+프로그래밍에서 특정 운영 체제를 위한 응용 프로그램 표준 구조를 구현하는 클래스와 라이브러리 모임<br>라이브러리가 연장이라면 프레임워크는 차, 비행기, 탈것 같은 운송수단)</p>\n<h3 id=\"가상환경이란\"><a href=\"#가상환경이란\" class=\"headerlink\" title=\"가상환경이란?\"></a>가상환경이란?</h3><p>가상환경은 여러개의 파이썬 프로젝트가 하나의 컴퓨터에서 충동을 일으키지 않고 존재할 수 있도록 해준다.<br>-&gt; 독립적인 작업 환경에서 패키지 및 버전관리를 하기위해 가상환경을 사용한다.</p>\n<h3 id=\"conda를-활용한-가상환경-설정\"><a href=\"#conda를-활용한-가상환경-설정\" class=\"headerlink\" title=\"conda를 활용한 가상환경 설정\"></a>conda를 활용한 가상환경 설정</h3><hr>\n<ol>\n<li><p>가상환경 생성하기<br>conda create -n 가상환경이름 python=버전</p>\n</li>\n<li><p>가상환경 확인하기<br>conda info –envs</p>\n</li>\n<li><p>가상환경 활성화하기<br>conda activate 가상환경이름</p>\n</li>\n<li><p>가상환경 비활성화 하기<br>conda deactivate</p>\n</li>\n<li><p>가상환경 복사하기<br>conda create -n 복사된_가상환경이름 –clone 복사할_가상환경이름</p>\n</li>\n<li><p>가상환경 삭제하기<br>conda remove -n 가상환경이름 –all</p>\n</li>\n</ol>\n<h3 id=\"Dash-라이브러리-설치\"><a href=\"#Dash-라이브러리-설치\" class=\"headerlink\" title=\"Dash 라이브러리 설치\"></a>Dash 라이브러리 설치</h3><p>conda install dash<br>conda install pandas<br>conda install colorama</p>\n<h2 id=\"Ref\"><a href=\"#Ref\" class=\"headerlink\" title=\"Ref\"></a>Ref</h2><p><a href=\"https://yganalyst.github.io/pythonic/anaconda_env_1/\">https://yganalyst.github.io/pythonic/anaconda_env_1/</a><br><a href=\"https://realpython.com/python-dash/\">https://realpython.com/python-dash/</a><br><a href=\"https://kibua20.tistory.com/212\">https://kibua20.tistory.com/212</a><br><a href=\"https://www.castingn.com/sourcing/kkultip_detail/110\">프레임워크</a></p>\n"},{"title":"산점도 막대그래프(Scatter)","date":"2021-11-06T15:00:00.000Z","toc":true,"thumbnail":"images/0303_1-3/10.PNG","widgets":null,"_content":"\n## **1-3. 산점도 막대 그래프**\n### **라이브러리 임포트 해주기**\n---\n```python\nimport pandas as pd \nimport numpy as np\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objects as go\n\n#warning 라이브러리를 이용해서 경고 메세지 숨기기\nimport warnings\nwarnings.filterwarnings('ignore')      \n```\n\n<br>\n<br>\n<br>\n\n### **캐글 데이터 불러오기**\n---\n\n```python\ndf = pd.read_csv('../input/kaggle-survey-2021/kaggle_survey_2021_responses.csv')\ndf = df.iloc[1:, :]      \n```\n\n<br>\n\n### **.astype('category')**\n데이터를 카테고리형으로 형변환함\n- df1 = df.copy()\ndf를 df1으로 복사\n- df1['Q3'] = df1['Q3'].astype('category')\n복사한 df1을 카테로리로 형변환하고 ['Q3'] 컬럼 값을 가져온다\n```python\ndf1 = df.copy()\ndf1['Q3'] = df1['Q3'].astype('category')\nprint(df1['Q3'].astype('category'))\n```\n![](/images/0303_1-3/1.PNG)\n\n<br>\n\n### **.cat.add_categories()**\n---\n\n- .cat.add_categories([label])\n카테고리 추가\n- replace(old, new, [count])\n문자열 변경 할 수 있는 함수\nold : 현재 문자열에서 변경하고 싶은 문자\nnew: 새로 바꿀 문자\ncount: 변경할 횟수\n\n\n```python\nothers = df1['Q3'].value_counts().index[15:]\nlabel = 'Others'\n\ndf1['Q3'] = df1['Q3'].cat.add_categories([label])\ndf1['Q3'] = df1['Q3'].replace(others, label)\n```\n\n<br>\n\n### **country**\n---\n\n```python\ncountry = (\n    df1['Q3']\n    .replace(['Other'],'Others')\n    .value_counts()\n    .to_frame()\n    .reset_index()\n    .rename(columns={'index':'Country','Q3':'Count'})\n    .sort_values(by=['Count'],ascending=False)\n    .replace(['United Kingdom of Great Britain and Northern Ireland'],'United Kingdom')\n        )\nprint(country)\n```\n![](/images/0303_1-3/2.PNG)\n\n<br>\n\n### **country['percent']**\n---\n```python\ncountry['percent'] = ((country['Count']/country['Count'].sum())*100).round(2).astype(str)+'%'\nprint(country)\n```\n![](/images/0303_1-3/3.PNG)\n\n<br>\n\n### **colors, country**\n---\n- .sort_values()\n데이터 정렬하기\n- .sort_values(by=['Count'])\nColumn Count를 기준으로 정렬하기 \n- .iloc[0:16]\n0행부터 15행까지 출력하기\n- .reset_index()\n인덱스 초기화 재정렬 해주는 함수\n\n```python\ncolors = ['#033351',]*16\ncolors[14]='#0779c3'\ncolors[13]='#5abbf9'\ncolors[12]='#5abbf9'\n \ncountry = (country\n          .sort_values(by=['Count'])\n          .iloc[0:16]\n          .reset_index())\nprint(country)\n```\n\n![](/images/0303_1-3/4.PNG)\n\n\n<br>\n\n### **go.Scatter()**\n---\n산점도 그래프\n\n```python\nfig = go.Figure(go.Scatter(x = country['Count'],\n                           y = country[\"Country\"],\n                           text = country['percent'],\n                           mode = 'markers',\n                           marker_color = colors,\n                           marker_size = 12\n                            ))\nfig.show()\n```\n\n![](/images/0303_1-3/5.PNG)\n\n<br>\n\n### **for문을 이용해 그래프 그리기**\n---\n- for i in range(0, len(country)):\ni는 0부터 country의 행 길이까지 반복한다\n- x1 = country[\"Count\"][i]\n인덱스에 맞는 x값을 가져온다\ncountry[\"Count\"][i] \n따라서 [i]는 인덱스 값을 의미\n- y1 = i\ny축 인덱스 0부터 끝까지 의미\n- width = 4\n막대 선 두께를 의미\n숫자가 커질 수록 선이 두꺼워짐\n```python\nfor i in range(0, len(country)):\n            fig.add_shape(type='line',\n                         x0 = 0, y0 = i,\n                         x1 = country[\"Count\"][i],\n                         y1 = i,\n                         line = dict(color=colors[i], width = 4))\nfig.show()\n```\n![](/images/0303_1-3/6.PNG)\n\n<br>\n\n### **hover**\n---\n- hover data\n클릭과 반응하는 인터렉티브 그래프를 구축\n데이터의 세부 정보를 추가적으로 보여주는 팝업 정보창을 의미한다\n마우스 가져다 대면 data 정보를 볼 수 있다\n\n\n```python\nfig.update_traces(hovertemplate='<b>Country</b>: %{y}<br><extra></extra>'+\n                                '<b>Count</b>: %{x}<br>'+\n                                '<b>Proportion</b>: %{text}')\nfig.show()\n```\n![](/images/0303_1-3/7.PNG)\n\n<br>\n\n### **배경 격자 무늬**\n---\n```python\nfig.update_xaxes(showgrid=True, gridwidth=1, gridcolor='#9f9f9f', ticklabelmode='period')\nfig.update_yaxes(showgrid=False)\nfig.show()\n```\n![](/images/0303_1-3/8.PNG)\n\n<br>\n\n### **.update_layout**\n---\n```python\nfig.update_layout(showlegend=False, \n                  plot_bgcolor='#F7F7F7', \n                  margin=dict(pad=20),\n                  paper_bgcolor='#F7F7F7',\n                  yaxis_title=None,\n                  xaxis_title=None,\n                  title_text=\"Most Common <b>Countries</b>\",\n                  title_x=0.5,\n                  height=700,\n                  font=dict(family=\"Hiragino Kaku Gothic Pro, sans-serif\", size=17, color='#000000'),\n                  title_font_size=35)\nfig.show()\n```\n\n![](/images/0303_1-3/9.PNG)\n<br>\n\n### **annotation**\n---\n주석\n```python\nfig.add_annotation(dict(font=dict(size=14),\n                                    x=0.98,\n                                    y=-0.155,\n                                    showarrow=False,\n                                    text=\"@miguelfzzz\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\nfig.add_annotation(dict(font=dict(size=12),\n                                    x=0,\n                                    y=-0.155,\n                                    showarrow=False,\n                                    text=\"Source: 2021 Kaggle Machine Learning & Data Science Survey\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\n\nfig.show()\n```\n![](/images/0303_1-3/10.PNG)\n<br>\n\n### **전체코드**\n---\n인도는 전체의 28%가 넘는 가장 흔한 국가이다. 미국이 10%로 그 뒤를 이었다\n\n\n```python\ndf1 = df.copy()\ndf1['Q3'] = df1['Q3'].astype('category')\n\nothers = df1['Q3'].value_counts().index[15:]\nlabel = 'Others'\n\ndf1['Q3'] = df1['Q3'].cat.add_categories([label])\ndf1['Q3'] = df1['Q3'].replace(others, label)\n\ncountry = (\n    df1['Q3']\n    .replace(['Other'], 'Others')\n    .value_counts()\n    .to_frame()\n    .reset_index()\n    .rename(columns={'index':'Country', 'Q3':'Count'})\n    .sort_values(by=['Count'], ascending=False) \n    .replace(['United Kingdom of Great Britain and Northern Ireland'], 'United Kingdom')\n          )  \n\ncountry['percent'] = ((country['Count'] / country['Count'].sum())*100).round(2).astype(str) + '%'\n          \ncolors = ['#033351',] * 16\ncolors[14] = '#0779c3'\ncolors[13] = '#5abbf9'\ncolors[12] = '#5abbf9'\n\n\ncountry = (country\n           .sort_values(by = ['Count'])\n           .iloc[0:16]\n           .reset_index())\n\nfig = go.Figure(go.Scatter(x = country['Count'], \n                           y = country[\"Country\"],\n                           text = country['percent'],\n                           mode = 'markers',\n                           marker_color =colors,\n                           marker_size  = 12))\n\nfor i in range(0, len(country)):\n               fig.add_shape(type='line',\n                              x0 = 0, y0 = i,\n                              x1 = country[\"Count\"][i],\n                              y1 = i,\n                              line=dict(color=colors[i], width = 4))\n\nfig.update_traces(hovertemplate='<b>Country</b>: %{y}<br><extra></extra>'+\n                                '<b>Count</b>: %{x}<br>'+\n                                '<b>Proportion</b>: %{text}')\n\nfig.update_xaxes(showgrid=True, gridwidth=1, gridcolor='#9f9f9f', ticklabelmode='period')\nfig.update_yaxes(showgrid=False)\n \nfig.update_layout(showlegend=False, \n                  plot_bgcolor='#F7F7F7', \n                  margin=dict(pad=20),\n                  paper_bgcolor='#F7F7F7',\n                  yaxis_title=None,\n                  xaxis_title=None,\n                  title_text=\"Most Common <b>Countries</b>\",\n                  title_x=0.5,\n                  height=700,\n                  font=dict(family=\"Hiragino Kaku Gothic Pro, sans-serif\", size=17, color='#000000'),\n                  title_font_size=35)\n\nfig.add_annotation(dict(font=dict(size=14),\n                                    x=0.98,\n                                    y=-0.155,\n                                    showarrow=False,\n                                    text=\"@miguelfzzz\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\n\nfig.add_annotation(dict(font=dict(size=12),\n                                    x=0,\n                                    y=-0.155,\n                                    showarrow=False,\n                                    text=\"Source: 2021 Kaggle Machine Learning & Data Science Survey\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\n\nfig.show()\n```\n![](/images/0303_1-3/10.PNG)\n\n<br>\n<br>\n","source":"_posts/kaggle3_산점도막대그래프.md","raw":"---\ntitle: 산점도 막대그래프(Scatter)\ndate: 2021-11-07\ntags: kaggle, plotly\ntoc: true\nthumbnail: images/0303_1-3/10.PNG\ncategories: \n- kaggle 필사\nwidgets: null\n---\n\n## **1-3. 산점도 막대 그래프**\n### **라이브러리 임포트 해주기**\n---\n```python\nimport pandas as pd \nimport numpy as np\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objects as go\n\n#warning 라이브러리를 이용해서 경고 메세지 숨기기\nimport warnings\nwarnings.filterwarnings('ignore')      \n```\n\n<br>\n<br>\n<br>\n\n### **캐글 데이터 불러오기**\n---\n\n```python\ndf = pd.read_csv('../input/kaggle-survey-2021/kaggle_survey_2021_responses.csv')\ndf = df.iloc[1:, :]      \n```\n\n<br>\n\n### **.astype('category')**\n데이터를 카테고리형으로 형변환함\n- df1 = df.copy()\ndf를 df1으로 복사\n- df1['Q3'] = df1['Q3'].astype('category')\n복사한 df1을 카테로리로 형변환하고 ['Q3'] 컬럼 값을 가져온다\n```python\ndf1 = df.copy()\ndf1['Q3'] = df1['Q3'].astype('category')\nprint(df1['Q3'].astype('category'))\n```\n![](/images/0303_1-3/1.PNG)\n\n<br>\n\n### **.cat.add_categories()**\n---\n\n- .cat.add_categories([label])\n카테고리 추가\n- replace(old, new, [count])\n문자열 변경 할 수 있는 함수\nold : 현재 문자열에서 변경하고 싶은 문자\nnew: 새로 바꿀 문자\ncount: 변경할 횟수\n\n\n```python\nothers = df1['Q3'].value_counts().index[15:]\nlabel = 'Others'\n\ndf1['Q3'] = df1['Q3'].cat.add_categories([label])\ndf1['Q3'] = df1['Q3'].replace(others, label)\n```\n\n<br>\n\n### **country**\n---\n\n```python\ncountry = (\n    df1['Q3']\n    .replace(['Other'],'Others')\n    .value_counts()\n    .to_frame()\n    .reset_index()\n    .rename(columns={'index':'Country','Q3':'Count'})\n    .sort_values(by=['Count'],ascending=False)\n    .replace(['United Kingdom of Great Britain and Northern Ireland'],'United Kingdom')\n        )\nprint(country)\n```\n![](/images/0303_1-3/2.PNG)\n\n<br>\n\n### **country['percent']**\n---\n```python\ncountry['percent'] = ((country['Count']/country['Count'].sum())*100).round(2).astype(str)+'%'\nprint(country)\n```\n![](/images/0303_1-3/3.PNG)\n\n<br>\n\n### **colors, country**\n---\n- .sort_values()\n데이터 정렬하기\n- .sort_values(by=['Count'])\nColumn Count를 기준으로 정렬하기 \n- .iloc[0:16]\n0행부터 15행까지 출력하기\n- .reset_index()\n인덱스 초기화 재정렬 해주는 함수\n\n```python\ncolors = ['#033351',]*16\ncolors[14]='#0779c3'\ncolors[13]='#5abbf9'\ncolors[12]='#5abbf9'\n \ncountry = (country\n          .sort_values(by=['Count'])\n          .iloc[0:16]\n          .reset_index())\nprint(country)\n```\n\n![](/images/0303_1-3/4.PNG)\n\n\n<br>\n\n### **go.Scatter()**\n---\n산점도 그래프\n\n```python\nfig = go.Figure(go.Scatter(x = country['Count'],\n                           y = country[\"Country\"],\n                           text = country['percent'],\n                           mode = 'markers',\n                           marker_color = colors,\n                           marker_size = 12\n                            ))\nfig.show()\n```\n\n![](/images/0303_1-3/5.PNG)\n\n<br>\n\n### **for문을 이용해 그래프 그리기**\n---\n- for i in range(0, len(country)):\ni는 0부터 country의 행 길이까지 반복한다\n- x1 = country[\"Count\"][i]\n인덱스에 맞는 x값을 가져온다\ncountry[\"Count\"][i] \n따라서 [i]는 인덱스 값을 의미\n- y1 = i\ny축 인덱스 0부터 끝까지 의미\n- width = 4\n막대 선 두께를 의미\n숫자가 커질 수록 선이 두꺼워짐\n```python\nfor i in range(0, len(country)):\n            fig.add_shape(type='line',\n                         x0 = 0, y0 = i,\n                         x1 = country[\"Count\"][i],\n                         y1 = i,\n                         line = dict(color=colors[i], width = 4))\nfig.show()\n```\n![](/images/0303_1-3/6.PNG)\n\n<br>\n\n### **hover**\n---\n- hover data\n클릭과 반응하는 인터렉티브 그래프를 구축\n데이터의 세부 정보를 추가적으로 보여주는 팝업 정보창을 의미한다\n마우스 가져다 대면 data 정보를 볼 수 있다\n\n\n```python\nfig.update_traces(hovertemplate='<b>Country</b>: %{y}<br><extra></extra>'+\n                                '<b>Count</b>: %{x}<br>'+\n                                '<b>Proportion</b>: %{text}')\nfig.show()\n```\n![](/images/0303_1-3/7.PNG)\n\n<br>\n\n### **배경 격자 무늬**\n---\n```python\nfig.update_xaxes(showgrid=True, gridwidth=1, gridcolor='#9f9f9f', ticklabelmode='period')\nfig.update_yaxes(showgrid=False)\nfig.show()\n```\n![](/images/0303_1-3/8.PNG)\n\n<br>\n\n### **.update_layout**\n---\n```python\nfig.update_layout(showlegend=False, \n                  plot_bgcolor='#F7F7F7', \n                  margin=dict(pad=20),\n                  paper_bgcolor='#F7F7F7',\n                  yaxis_title=None,\n                  xaxis_title=None,\n                  title_text=\"Most Common <b>Countries</b>\",\n                  title_x=0.5,\n                  height=700,\n                  font=dict(family=\"Hiragino Kaku Gothic Pro, sans-serif\", size=17, color='#000000'),\n                  title_font_size=35)\nfig.show()\n```\n\n![](/images/0303_1-3/9.PNG)\n<br>\n\n### **annotation**\n---\n주석\n```python\nfig.add_annotation(dict(font=dict(size=14),\n                                    x=0.98,\n                                    y=-0.155,\n                                    showarrow=False,\n                                    text=\"@miguelfzzz\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\nfig.add_annotation(dict(font=dict(size=12),\n                                    x=0,\n                                    y=-0.155,\n                                    showarrow=False,\n                                    text=\"Source: 2021 Kaggle Machine Learning & Data Science Survey\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\n\nfig.show()\n```\n![](/images/0303_1-3/10.PNG)\n<br>\n\n### **전체코드**\n---\n인도는 전체의 28%가 넘는 가장 흔한 국가이다. 미국이 10%로 그 뒤를 이었다\n\n\n```python\ndf1 = df.copy()\ndf1['Q3'] = df1['Q3'].astype('category')\n\nothers = df1['Q3'].value_counts().index[15:]\nlabel = 'Others'\n\ndf1['Q3'] = df1['Q3'].cat.add_categories([label])\ndf1['Q3'] = df1['Q3'].replace(others, label)\n\ncountry = (\n    df1['Q3']\n    .replace(['Other'], 'Others')\n    .value_counts()\n    .to_frame()\n    .reset_index()\n    .rename(columns={'index':'Country', 'Q3':'Count'})\n    .sort_values(by=['Count'], ascending=False) \n    .replace(['United Kingdom of Great Britain and Northern Ireland'], 'United Kingdom')\n          )  \n\ncountry['percent'] = ((country['Count'] / country['Count'].sum())*100).round(2).astype(str) + '%'\n          \ncolors = ['#033351',] * 16\ncolors[14] = '#0779c3'\ncolors[13] = '#5abbf9'\ncolors[12] = '#5abbf9'\n\n\ncountry = (country\n           .sort_values(by = ['Count'])\n           .iloc[0:16]\n           .reset_index())\n\nfig = go.Figure(go.Scatter(x = country['Count'], \n                           y = country[\"Country\"],\n                           text = country['percent'],\n                           mode = 'markers',\n                           marker_color =colors,\n                           marker_size  = 12))\n\nfor i in range(0, len(country)):\n               fig.add_shape(type='line',\n                              x0 = 0, y0 = i,\n                              x1 = country[\"Count\"][i],\n                              y1 = i,\n                              line=dict(color=colors[i], width = 4))\n\nfig.update_traces(hovertemplate='<b>Country</b>: %{y}<br><extra></extra>'+\n                                '<b>Count</b>: %{x}<br>'+\n                                '<b>Proportion</b>: %{text}')\n\nfig.update_xaxes(showgrid=True, gridwidth=1, gridcolor='#9f9f9f', ticklabelmode='period')\nfig.update_yaxes(showgrid=False)\n \nfig.update_layout(showlegend=False, \n                  plot_bgcolor='#F7F7F7', \n                  margin=dict(pad=20),\n                  paper_bgcolor='#F7F7F7',\n                  yaxis_title=None,\n                  xaxis_title=None,\n                  title_text=\"Most Common <b>Countries</b>\",\n                  title_x=0.5,\n                  height=700,\n                  font=dict(family=\"Hiragino Kaku Gothic Pro, sans-serif\", size=17, color='#000000'),\n                  title_font_size=35)\n\nfig.add_annotation(dict(font=dict(size=14),\n                                    x=0.98,\n                                    y=-0.155,\n                                    showarrow=False,\n                                    text=\"@miguelfzzz\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\n\nfig.add_annotation(dict(font=dict(size=12),\n                                    x=0,\n                                    y=-0.155,\n                                    showarrow=False,\n                                    text=\"Source: 2021 Kaggle Machine Learning & Data Science Survey\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\n\nfig.show()\n```\n![](/images/0303_1-3/10.PNG)\n\n<br>\n<br>\n","slug":"kaggle3-산점도막대그래프","published":1,"updated":"2022-01-03T12:20:08.048Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cky2hoheq000u5nrj9b3ph8c8","content":"<h2 id=\"1-3-산점도-막대-그래프\"><a href=\"#1-3-산점도-막대-그래프\" class=\"headerlink\" title=\"1-3. 산점도 막대 그래프\"></a><strong>1-3. 산점도 막대 그래프</strong></h2><h3 id=\"라이브러리-임포트-해주기\"><a href=\"#라이브러리-임포트-해주기\" class=\"headerlink\" title=\"라이브러리 임포트 해주기\"></a><strong>라이브러리 임포트 해주기</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd </span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> seaborn <span class=\"keyword\">as</span> sns</span><br><span class=\"line\"><span class=\"keyword\">import</span> plotly.express <span class=\"keyword\">as</span> px</span><br><span class=\"line\"><span class=\"keyword\">import</span> plotly.graph_objects <span class=\"keyword\">as</span> go</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#warning 라이브러리를 이용해서 경고 메세지 숨기기</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> warnings</span><br><span class=\"line\">warnings.filterwarnings(<span class=\"string\">&#x27;ignore&#x27;</span>)      </span><br></pre></td></tr></table></figure>\n\n<br>\n<br>\n<br>\n\n<h3 id=\"캐글-데이터-불러오기\"><a href=\"#캐글-데이터-불러오기\" class=\"headerlink\" title=\"캐글 데이터 불러오기\"></a><strong>캐글 데이터 불러오기</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df = pd.read_csv(<span class=\"string\">&#x27;../input/kaggle-survey-2021/kaggle_survey_2021_responses.csv&#x27;</span>)</span><br><span class=\"line\">df = df.iloc[<span class=\"number\">1</span>:, :]      </span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h3 id=\"astype-‘category’\"><a href=\"#astype-‘category’\" class=\"headerlink\" title=\".astype(‘category’)\"></a><strong>.astype(‘category’)</strong></h3><p>데이터를 카테고리형으로 형변환함</p>\n<ul>\n<li>df1 = df.copy()<br>df를 df1으로 복사</li>\n<li>df1[‘Q3’] = df1[‘Q3’].astype(‘category’)<br>복사한 df1을 카테로리로 형변환하고 [‘Q3’] 컬럼 값을 가져온다<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df1 = df.copy()</span><br><span class=\"line\">df1[<span class=\"string\">&#x27;Q3&#x27;</span>] = df1[<span class=\"string\">&#x27;Q3&#x27;</span>].astype(<span class=\"string\">&#x27;category&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(df1[<span class=\"string\">&#x27;Q3&#x27;</span>].astype(<span class=\"string\">&#x27;category&#x27;</span>))</span><br></pre></td></tr></table></figure>\n<img src=\"/images/0303_1-3/1.PNG\"></li>\n</ul>\n<br>\n\n<h3 id=\"cat-add-categories\"><a href=\"#cat-add-categories\" class=\"headerlink\" title=\".cat.add_categories()\"></a><strong>.cat.add_categories()</strong></h3><hr>\n<ul>\n<li>.cat.add_categories([label])<br>카테고리 추가</li>\n<li>replace(old, new, [count])<br>문자열 변경 할 수 있는 함수<br>old : 현재 문자열에서 변경하고 싶은 문자<br>new: 새로 바꿀 문자<br>count: 변경할 횟수</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">others = df1[<span class=\"string\">&#x27;Q3&#x27;</span>].value_counts().index[<span class=\"number\">15</span>:]</span><br><span class=\"line\">label = <span class=\"string\">&#x27;Others&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">df1[<span class=\"string\">&#x27;Q3&#x27;</span>] = df1[<span class=\"string\">&#x27;Q3&#x27;</span>].cat.add_categories([label])</span><br><span class=\"line\">df1[<span class=\"string\">&#x27;Q3&#x27;</span>] = df1[<span class=\"string\">&#x27;Q3&#x27;</span>].replace(others, label)</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h3 id=\"country\"><a href=\"#country\" class=\"headerlink\" title=\"country\"></a><strong>country</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">country = (</span><br><span class=\"line\">    df1[<span class=\"string\">&#x27;Q3&#x27;</span>]</span><br><span class=\"line\">    .replace([<span class=\"string\">&#x27;Other&#x27;</span>],<span class=\"string\">&#x27;Others&#x27;</span>)</span><br><span class=\"line\">    .value_counts()</span><br><span class=\"line\">    .to_frame()</span><br><span class=\"line\">    .reset_index()</span><br><span class=\"line\">    .rename(columns=&#123;<span class=\"string\">&#x27;index&#x27;</span>:<span class=\"string\">&#x27;Country&#x27;</span>,<span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;Count&#x27;</span>&#125;)</span><br><span class=\"line\">    .sort_values(by=[<span class=\"string\">&#x27;Count&#x27;</span>],ascending=<span class=\"literal\">False</span>)</span><br><span class=\"line\">    .replace([<span class=\"string\">&#x27;United Kingdom of Great Britain and Northern Ireland&#x27;</span>],<span class=\"string\">&#x27;United Kingdom&#x27;</span>)</span><br><span class=\"line\">        )</span><br><span class=\"line\"><span class=\"built_in\">print</span>(country)</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/0303_1-3/2.PNG\"></p>\n<br>\n\n<h3 id=\"country-‘percent’\"><a href=\"#country-‘percent’\" class=\"headerlink\" title=\"country[‘percent’]\"></a><strong>country[‘percent’]</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">country[<span class=\"string\">&#x27;percent&#x27;</span>] = ((country[<span class=\"string\">&#x27;Count&#x27;</span>]/country[<span class=\"string\">&#x27;Count&#x27;</span>].<span class=\"built_in\">sum</span>())*<span class=\"number\">100</span>).<span class=\"built_in\">round</span>(<span class=\"number\">2</span>).astype(<span class=\"built_in\">str</span>)+<span class=\"string\">&#x27;%&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(country)</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/0303_1-3/3.PNG\"></p>\n<br>\n\n<h3 id=\"colors-country\"><a href=\"#colors-country\" class=\"headerlink\" title=\"colors, country\"></a><strong>colors, country</strong></h3><hr>\n<ul>\n<li>.sort_values()<br>데이터 정렬하기</li>\n<li>.sort_values(by=[‘Count’])<br>Column Count를 기준으로 정렬하기 </li>\n<li>.iloc[0:16]<br>0행부터 15행까지 출력하기</li>\n<li>.reset_index()<br>인덱스 초기화 재정렬 해주는 함수</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">colors = [<span class=\"string\">&#x27;#033351&#x27;</span>,]*<span class=\"number\">16</span></span><br><span class=\"line\">colors[<span class=\"number\">14</span>]=<span class=\"string\">&#x27;#0779c3&#x27;</span></span><br><span class=\"line\">colors[<span class=\"number\">13</span>]=<span class=\"string\">&#x27;#5abbf9&#x27;</span></span><br><span class=\"line\">colors[<span class=\"number\">12</span>]=<span class=\"string\">&#x27;#5abbf9&#x27;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">country = (country</span><br><span class=\"line\">          .sort_values(by=[<span class=\"string\">&#x27;Count&#x27;</span>])</span><br><span class=\"line\">          .iloc[<span class=\"number\">0</span>:<span class=\"number\">16</span>]</span><br><span class=\"line\">          .reset_index())</span><br><span class=\"line\"><span class=\"built_in\">print</span>(country)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/0303_1-3/4.PNG\"></p>\n<br>\n\n<h3 id=\"go-Scatter\"><a href=\"#go-Scatter\" class=\"headerlink\" title=\"go.Scatter()\"></a><strong>go.Scatter()</strong></h3><hr>\n<p>산점도 그래프</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fig = go.Figure(go.Scatter(x = country[<span class=\"string\">&#x27;Count&#x27;</span>],</span><br><span class=\"line\">                           y = country[<span class=\"string\">&quot;Country&quot;</span>],</span><br><span class=\"line\">                           text = country[<span class=\"string\">&#x27;percent&#x27;</span>],</span><br><span class=\"line\">                           mode = <span class=\"string\">&#x27;markers&#x27;</span>,</span><br><span class=\"line\">                           marker_color = colors,</span><br><span class=\"line\">                           marker_size = <span class=\"number\">12</span></span><br><span class=\"line\">                            ))</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/0303_1-3/5.PNG\"></p>\n<br>\n\n<h3 id=\"for문을-이용해-그래프-그리기\"><a href=\"#for문을-이용해-그래프-그리기\" class=\"headerlink\" title=\"for문을 이용해 그래프 그리기\"></a><strong>for문을 이용해 그래프 그리기</strong></h3><hr>\n<ul>\n<li>for i in range(0, len(country)):<br>i는 0부터 country의 행 길이까지 반복한다</li>\n<li>x1 = country[“Count”][i]<br>인덱스에 맞는 x값을 가져온다<br>country[“Count”][i]<br>따라서 [i]는 인덱스 값을 의미</li>\n<li>y1 = i<br>y축 인덱스 0부터 끝까지 의미</li>\n<li>width = 4<br>막대 선 두께를 의미<br>숫자가 커질 수록 선이 두꺼워짐<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>, <span class=\"built_in\">len</span>(country)):</span><br><span class=\"line\">            fig.add_shape(<span class=\"built_in\">type</span>=<span class=\"string\">&#x27;line&#x27;</span>,</span><br><span class=\"line\">                         x0 = <span class=\"number\">0</span>, y0 = i,</span><br><span class=\"line\">                         x1 = country[<span class=\"string\">&quot;Count&quot;</span>][i],</span><br><span class=\"line\">                         y1 = i,</span><br><span class=\"line\">                         line = <span class=\"built_in\">dict</span>(color=colors[i], width = <span class=\"number\">4</span>))</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n<img src=\"/images/0303_1-3/6.PNG\"></li>\n</ul>\n<br>\n\n<h3 id=\"hover\"><a href=\"#hover\" class=\"headerlink\" title=\"hover\"></a><strong>hover</strong></h3><hr>\n<ul>\n<li>hover data<br>클릭과 반응하는 인터렉티브 그래프를 구축<br>데이터의 세부 정보를 추가적으로 보여주는 팝업 정보창을 의미한다<br>마우스 가져다 대면 data 정보를 볼 수 있다</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fig.update_traces(hovertemplate=<span class=\"string\">&#x27;&lt;b&gt;Country&lt;/b&gt;: %&#123;y&#125;&lt;br&gt;&lt;extra&gt;&lt;/extra&gt;&#x27;</span>+</span><br><span class=\"line\">                                <span class=\"string\">&#x27;&lt;b&gt;Count&lt;/b&gt;: %&#123;x&#125;&lt;br&gt;&#x27;</span>+</span><br><span class=\"line\">                                <span class=\"string\">&#x27;&lt;b&gt;Proportion&lt;/b&gt;: %&#123;text&#125;&#x27;</span>)</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/0303_1-3/7.PNG\"></p>\n<br>\n\n<h3 id=\"배경-격자-무늬\"><a href=\"#배경-격자-무늬\" class=\"headerlink\" title=\"배경 격자 무늬\"></a><strong>배경 격자 무늬</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fig.update_xaxes(showgrid=<span class=\"literal\">True</span>, gridwidth=<span class=\"number\">1</span>, gridcolor=<span class=\"string\">&#x27;#9f9f9f&#x27;</span>, ticklabelmode=<span class=\"string\">&#x27;period&#x27;</span>)</span><br><span class=\"line\">fig.update_yaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/0303_1-3/8.PNG\"></p>\n<br>\n\n<h3 id=\"update-layout\"><a href=\"#update-layout\" class=\"headerlink\" title=\".update_layout\"></a><strong>.update_layout</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fig.update_layout(showlegend=<span class=\"literal\">False</span>, </span><br><span class=\"line\">                  plot_bgcolor=<span class=\"string\">&#x27;#F7F7F7&#x27;</span>, </span><br><span class=\"line\">                  margin=<span class=\"built_in\">dict</span>(pad=<span class=\"number\">20</span>),</span><br><span class=\"line\">                  paper_bgcolor=<span class=\"string\">&#x27;#F7F7F7&#x27;</span>,</span><br><span class=\"line\">                  yaxis_title=<span class=\"literal\">None</span>,</span><br><span class=\"line\">                  xaxis_title=<span class=\"literal\">None</span>,</span><br><span class=\"line\">                  title_text=<span class=\"string\">&quot;Most Common &lt;b&gt;Countries&lt;/b&gt;&quot;</span>,</span><br><span class=\"line\">                  title_x=<span class=\"number\">0.5</span>,</span><br><span class=\"line\">                  height=<span class=\"number\">700</span>,</span><br><span class=\"line\">                  font=<span class=\"built_in\">dict</span>(family=<span class=\"string\">&quot;Hiragino Kaku Gothic Pro, sans-serif&quot;</span>, size=<span class=\"number\">17</span>, color=<span class=\"string\">&#x27;#000000&#x27;</span>),</span><br><span class=\"line\">                  title_font_size=<span class=\"number\">35</span>)</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/0303_1-3/9.PNG\"><br><br></p>\n<h3 id=\"annotation\"><a href=\"#annotation\" class=\"headerlink\" title=\"annotation\"></a><strong>annotation</strong></h3><hr>\n<p>주석</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">14</span>),</span><br><span class=\"line\">                                    x=<span class=\"number\">0.98</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.155</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;@miguelfzzz&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">12</span>),</span><br><span class=\"line\">                                    x=<span class=\"number\">0</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.155</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;Source: 2021 Kaggle Machine Learning &amp; Data Science Survey&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/0303_1-3/10.PNG\"><br><br></p>\n<h3 id=\"전체코드\"><a href=\"#전체코드\" class=\"headerlink\" title=\"전체코드\"></a><strong>전체코드</strong></h3><hr>\n<p>인도는 전체의 28%가 넘는 가장 흔한 국가이다. 미국이 10%로 그 뒤를 이었다</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df1 = df.copy()</span><br><span class=\"line\">df1[<span class=\"string\">&#x27;Q3&#x27;</span>] = df1[<span class=\"string\">&#x27;Q3&#x27;</span>].astype(<span class=\"string\">&#x27;category&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">others = df1[<span class=\"string\">&#x27;Q3&#x27;</span>].value_counts().index[<span class=\"number\">15</span>:]</span><br><span class=\"line\">label = <span class=\"string\">&#x27;Others&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">df1[<span class=\"string\">&#x27;Q3&#x27;</span>] = df1[<span class=\"string\">&#x27;Q3&#x27;</span>].cat.add_categories([label])</span><br><span class=\"line\">df1[<span class=\"string\">&#x27;Q3&#x27;</span>] = df1[<span class=\"string\">&#x27;Q3&#x27;</span>].replace(others, label)</span><br><span class=\"line\"></span><br><span class=\"line\">country = (</span><br><span class=\"line\">    df1[<span class=\"string\">&#x27;Q3&#x27;</span>]</span><br><span class=\"line\">    .replace([<span class=\"string\">&#x27;Other&#x27;</span>], <span class=\"string\">&#x27;Others&#x27;</span>)</span><br><span class=\"line\">    .value_counts()</span><br><span class=\"line\">    .to_frame()</span><br><span class=\"line\">    .reset_index()</span><br><span class=\"line\">    .rename(columns=&#123;<span class=\"string\">&#x27;index&#x27;</span>:<span class=\"string\">&#x27;Country&#x27;</span>, <span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;Count&#x27;</span>&#125;)</span><br><span class=\"line\">    .sort_values(by=[<span class=\"string\">&#x27;Count&#x27;</span>], ascending=<span class=\"literal\">False</span>) </span><br><span class=\"line\">    .replace([<span class=\"string\">&#x27;United Kingdom of Great Britain and Northern Ireland&#x27;</span>], <span class=\"string\">&#x27;United Kingdom&#x27;</span>)</span><br><span class=\"line\">          )  </span><br><span class=\"line\"></span><br><span class=\"line\">country[<span class=\"string\">&#x27;percent&#x27;</span>] = ((country[<span class=\"string\">&#x27;Count&#x27;</span>] / country[<span class=\"string\">&#x27;Count&#x27;</span>].<span class=\"built_in\">sum</span>())*<span class=\"number\">100</span>).<span class=\"built_in\">round</span>(<span class=\"number\">2</span>).astype(<span class=\"built_in\">str</span>) + <span class=\"string\">&#x27;%&#x27;</span></span><br><span class=\"line\">          </span><br><span class=\"line\">colors = [<span class=\"string\">&#x27;#033351&#x27;</span>,] * <span class=\"number\">16</span></span><br><span class=\"line\">colors[<span class=\"number\">14</span>] = <span class=\"string\">&#x27;#0779c3&#x27;</span></span><br><span class=\"line\">colors[<span class=\"number\">13</span>] = <span class=\"string\">&#x27;#5abbf9&#x27;</span></span><br><span class=\"line\">colors[<span class=\"number\">12</span>] = <span class=\"string\">&#x27;#5abbf9&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">country = (country</span><br><span class=\"line\">           .sort_values(by = [<span class=\"string\">&#x27;Count&#x27;</span>])</span><br><span class=\"line\">           .iloc[<span class=\"number\">0</span>:<span class=\"number\">16</span>]</span><br><span class=\"line\">           .reset_index())</span><br><span class=\"line\"></span><br><span class=\"line\">fig = go.Figure(go.Scatter(x = country[<span class=\"string\">&#x27;Count&#x27;</span>], </span><br><span class=\"line\">                           y = country[<span class=\"string\">&quot;Country&quot;</span>],</span><br><span class=\"line\">                           text = country[<span class=\"string\">&#x27;percent&#x27;</span>],</span><br><span class=\"line\">                           mode = <span class=\"string\">&#x27;markers&#x27;</span>,</span><br><span class=\"line\">                           marker_color =colors,</span><br><span class=\"line\">                           marker_size  = <span class=\"number\">12</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>, <span class=\"built_in\">len</span>(country)):</span><br><span class=\"line\">               fig.add_shape(<span class=\"built_in\">type</span>=<span class=\"string\">&#x27;line&#x27;</span>,</span><br><span class=\"line\">                              x0 = <span class=\"number\">0</span>, y0 = i,</span><br><span class=\"line\">                              x1 = country[<span class=\"string\">&quot;Count&quot;</span>][i],</span><br><span class=\"line\">                              y1 = i,</span><br><span class=\"line\">                              line=<span class=\"built_in\">dict</span>(color=colors[i], width = <span class=\"number\">4</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_traces(hovertemplate=<span class=\"string\">&#x27;&lt;b&gt;Country&lt;/b&gt;: %&#123;y&#125;&lt;br&gt;&lt;extra&gt;&lt;/extra&gt;&#x27;</span>+</span><br><span class=\"line\">                                <span class=\"string\">&#x27;&lt;b&gt;Count&lt;/b&gt;: %&#123;x&#125;&lt;br&gt;&#x27;</span>+</span><br><span class=\"line\">                                <span class=\"string\">&#x27;&lt;b&gt;Proportion&lt;/b&gt;: %&#123;text&#125;&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_xaxes(showgrid=<span class=\"literal\">True</span>, gridwidth=<span class=\"number\">1</span>, gridcolor=<span class=\"string\">&#x27;#9f9f9f&#x27;</span>, ticklabelmode=<span class=\"string\">&#x27;period&#x27;</span>)</span><br><span class=\"line\">fig.update_yaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\">fig.update_layout(showlegend=<span class=\"literal\">False</span>, </span><br><span class=\"line\">                  plot_bgcolor=<span class=\"string\">&#x27;#F7F7F7&#x27;</span>, </span><br><span class=\"line\">                  margin=<span class=\"built_in\">dict</span>(pad=<span class=\"number\">20</span>),</span><br><span class=\"line\">                  paper_bgcolor=<span class=\"string\">&#x27;#F7F7F7&#x27;</span>,</span><br><span class=\"line\">                  yaxis_title=<span class=\"literal\">None</span>,</span><br><span class=\"line\">                  xaxis_title=<span class=\"literal\">None</span>,</span><br><span class=\"line\">                  title_text=<span class=\"string\">&quot;Most Common &lt;b&gt;Countries&lt;/b&gt;&quot;</span>,</span><br><span class=\"line\">                  title_x=<span class=\"number\">0.5</span>,</span><br><span class=\"line\">                  height=<span class=\"number\">700</span>,</span><br><span class=\"line\">                  font=<span class=\"built_in\">dict</span>(family=<span class=\"string\">&quot;Hiragino Kaku Gothic Pro, sans-serif&quot;</span>, size=<span class=\"number\">17</span>, color=<span class=\"string\">&#x27;#000000&#x27;</span>),</span><br><span class=\"line\">                  title_font_size=<span class=\"number\">35</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">14</span>),</span><br><span class=\"line\">                                    x=<span class=\"number\">0.98</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.155</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;@miguelfzzz&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">12</span>),</span><br><span class=\"line\">                                    x=<span class=\"number\">0</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.155</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;Source: 2021 Kaggle Machine Learning &amp; Data Science Survey&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/0303_1-3/10.PNG\"></p>\n<br>\n<br>\n","site":{"data":{}},"excerpt":"1-3. 산점도 막대 그래프\n라이브러리 임포트 해주기\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\nimport pandas as pd \nimport numpy as np\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objects as go\n\n#warning 라이브러리를 이용해서 경고 메세지 숨기기\nimport warnings\nwarnings.filterwarnings('ignore')      \n\n\n\n\n\n캐글 데이터 불러오기\n\n\n\n1\n2\n\n\ndf = pd.","more":"<h2 id=\"1-3-산점도-막대-그래프\"><a href=\"#1-3-산점도-막대-그래프\" class=\"headerlink\" title=\"1-3. 산점도 막대 그래프\"></a><strong>1-3. 산점도 막대 그래프</strong></h2><h3 id=\"라이브러리-임포트-해주기\"><a href=\"#라이브러리-임포트-해주기\" class=\"headerlink\" title=\"라이브러리 임포트 해주기\"></a><strong>라이브러리 임포트 해주기</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd </span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> seaborn <span class=\"keyword\">as</span> sns</span><br><span class=\"line\"><span class=\"keyword\">import</span> plotly.express <span class=\"keyword\">as</span> px</span><br><span class=\"line\"><span class=\"keyword\">import</span> plotly.graph_objects <span class=\"keyword\">as</span> go</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#warning 라이브러리를 이용해서 경고 메세지 숨기기</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> warnings</span><br><span class=\"line\">warnings.filterwarnings(<span class=\"string\">&#x27;ignore&#x27;</span>)      </span><br></pre></td></tr></table></figure>\n\n<br>\n<br>\n<br>\n\n<h3 id=\"캐글-데이터-불러오기\"><a href=\"#캐글-데이터-불러오기\" class=\"headerlink\" title=\"캐글 데이터 불러오기\"></a><strong>캐글 데이터 불러오기</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df = pd.read_csv(<span class=\"string\">&#x27;../input/kaggle-survey-2021/kaggle_survey_2021_responses.csv&#x27;</span>)</span><br><span class=\"line\">df = df.iloc[<span class=\"number\">1</span>:, :]      </span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h3 id=\"astype-‘category’\"><a href=\"#astype-‘category’\" class=\"headerlink\" title=\".astype(‘category’)\"></a><strong>.astype(‘category’)</strong></h3><p>데이터를 카테고리형으로 형변환함</p>\n<ul>\n<li>df1 = df.copy()<br>df를 df1으로 복사</li>\n<li>df1[‘Q3’] = df1[‘Q3’].astype(‘category’)<br>복사한 df1을 카테로리로 형변환하고 [‘Q3’] 컬럼 값을 가져온다<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df1 = df.copy()</span><br><span class=\"line\">df1[<span class=\"string\">&#x27;Q3&#x27;</span>] = df1[<span class=\"string\">&#x27;Q3&#x27;</span>].astype(<span class=\"string\">&#x27;category&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(df1[<span class=\"string\">&#x27;Q3&#x27;</span>].astype(<span class=\"string\">&#x27;category&#x27;</span>))</span><br></pre></td></tr></table></figure>\n<img src=\"/images/0303_1-3/1.PNG\"></li>\n</ul>\n<br>\n\n<h3 id=\"cat-add-categories\"><a href=\"#cat-add-categories\" class=\"headerlink\" title=\".cat.add_categories()\"></a><strong>.cat.add_categories()</strong></h3><hr>\n<ul>\n<li>.cat.add_categories([label])<br>카테고리 추가</li>\n<li>replace(old, new, [count])<br>문자열 변경 할 수 있는 함수<br>old : 현재 문자열에서 변경하고 싶은 문자<br>new: 새로 바꿀 문자<br>count: 변경할 횟수</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">others = df1[<span class=\"string\">&#x27;Q3&#x27;</span>].value_counts().index[<span class=\"number\">15</span>:]</span><br><span class=\"line\">label = <span class=\"string\">&#x27;Others&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">df1[<span class=\"string\">&#x27;Q3&#x27;</span>] = df1[<span class=\"string\">&#x27;Q3&#x27;</span>].cat.add_categories([label])</span><br><span class=\"line\">df1[<span class=\"string\">&#x27;Q3&#x27;</span>] = df1[<span class=\"string\">&#x27;Q3&#x27;</span>].replace(others, label)</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h3 id=\"country\"><a href=\"#country\" class=\"headerlink\" title=\"country\"></a><strong>country</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">country = (</span><br><span class=\"line\">    df1[<span class=\"string\">&#x27;Q3&#x27;</span>]</span><br><span class=\"line\">    .replace([<span class=\"string\">&#x27;Other&#x27;</span>],<span class=\"string\">&#x27;Others&#x27;</span>)</span><br><span class=\"line\">    .value_counts()</span><br><span class=\"line\">    .to_frame()</span><br><span class=\"line\">    .reset_index()</span><br><span class=\"line\">    .rename(columns=&#123;<span class=\"string\">&#x27;index&#x27;</span>:<span class=\"string\">&#x27;Country&#x27;</span>,<span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;Count&#x27;</span>&#125;)</span><br><span class=\"line\">    .sort_values(by=[<span class=\"string\">&#x27;Count&#x27;</span>],ascending=<span class=\"literal\">False</span>)</span><br><span class=\"line\">    .replace([<span class=\"string\">&#x27;United Kingdom of Great Britain and Northern Ireland&#x27;</span>],<span class=\"string\">&#x27;United Kingdom&#x27;</span>)</span><br><span class=\"line\">        )</span><br><span class=\"line\"><span class=\"built_in\">print</span>(country)</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/0303_1-3/2.PNG\"></p>\n<br>\n\n<h3 id=\"country-‘percent’\"><a href=\"#country-‘percent’\" class=\"headerlink\" title=\"country[‘percent’]\"></a><strong>country[‘percent’]</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">country[<span class=\"string\">&#x27;percent&#x27;</span>] = ((country[<span class=\"string\">&#x27;Count&#x27;</span>]/country[<span class=\"string\">&#x27;Count&#x27;</span>].<span class=\"built_in\">sum</span>())*<span class=\"number\">100</span>).<span class=\"built_in\">round</span>(<span class=\"number\">2</span>).astype(<span class=\"built_in\">str</span>)+<span class=\"string\">&#x27;%&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(country)</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/0303_1-3/3.PNG\"></p>\n<br>\n\n<h3 id=\"colors-country\"><a href=\"#colors-country\" class=\"headerlink\" title=\"colors, country\"></a><strong>colors, country</strong></h3><hr>\n<ul>\n<li>.sort_values()<br>데이터 정렬하기</li>\n<li>.sort_values(by=[‘Count’])<br>Column Count를 기준으로 정렬하기 </li>\n<li>.iloc[0:16]<br>0행부터 15행까지 출력하기</li>\n<li>.reset_index()<br>인덱스 초기화 재정렬 해주는 함수</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">colors = [<span class=\"string\">&#x27;#033351&#x27;</span>,]*<span class=\"number\">16</span></span><br><span class=\"line\">colors[<span class=\"number\">14</span>]=<span class=\"string\">&#x27;#0779c3&#x27;</span></span><br><span class=\"line\">colors[<span class=\"number\">13</span>]=<span class=\"string\">&#x27;#5abbf9&#x27;</span></span><br><span class=\"line\">colors[<span class=\"number\">12</span>]=<span class=\"string\">&#x27;#5abbf9&#x27;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">country = (country</span><br><span class=\"line\">          .sort_values(by=[<span class=\"string\">&#x27;Count&#x27;</span>])</span><br><span class=\"line\">          .iloc[<span class=\"number\">0</span>:<span class=\"number\">16</span>]</span><br><span class=\"line\">          .reset_index())</span><br><span class=\"line\"><span class=\"built_in\">print</span>(country)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/0303_1-3/4.PNG\"></p>\n<br>\n\n<h3 id=\"go-Scatter\"><a href=\"#go-Scatter\" class=\"headerlink\" title=\"go.Scatter()\"></a><strong>go.Scatter()</strong></h3><hr>\n<p>산점도 그래프</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fig = go.Figure(go.Scatter(x = country[<span class=\"string\">&#x27;Count&#x27;</span>],</span><br><span class=\"line\">                           y = country[<span class=\"string\">&quot;Country&quot;</span>],</span><br><span class=\"line\">                           text = country[<span class=\"string\">&#x27;percent&#x27;</span>],</span><br><span class=\"line\">                           mode = <span class=\"string\">&#x27;markers&#x27;</span>,</span><br><span class=\"line\">                           marker_color = colors,</span><br><span class=\"line\">                           marker_size = <span class=\"number\">12</span></span><br><span class=\"line\">                            ))</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/0303_1-3/5.PNG\"></p>\n<br>\n\n<h3 id=\"for문을-이용해-그래프-그리기\"><a href=\"#for문을-이용해-그래프-그리기\" class=\"headerlink\" title=\"for문을 이용해 그래프 그리기\"></a><strong>for문을 이용해 그래프 그리기</strong></h3><hr>\n<ul>\n<li>for i in range(0, len(country)):<br>i는 0부터 country의 행 길이까지 반복한다</li>\n<li>x1 = country[“Count”][i]<br>인덱스에 맞는 x값을 가져온다<br>country[“Count”][i]<br>따라서 [i]는 인덱스 값을 의미</li>\n<li>y1 = i<br>y축 인덱스 0부터 끝까지 의미</li>\n<li>width = 4<br>막대 선 두께를 의미<br>숫자가 커질 수록 선이 두꺼워짐<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>, <span class=\"built_in\">len</span>(country)):</span><br><span class=\"line\">            fig.add_shape(<span class=\"built_in\">type</span>=<span class=\"string\">&#x27;line&#x27;</span>,</span><br><span class=\"line\">                         x0 = <span class=\"number\">0</span>, y0 = i,</span><br><span class=\"line\">                         x1 = country[<span class=\"string\">&quot;Count&quot;</span>][i],</span><br><span class=\"line\">                         y1 = i,</span><br><span class=\"line\">                         line = <span class=\"built_in\">dict</span>(color=colors[i], width = <span class=\"number\">4</span>))</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n<img src=\"/images/0303_1-3/6.PNG\"></li>\n</ul>\n<br>\n\n<h3 id=\"hover\"><a href=\"#hover\" class=\"headerlink\" title=\"hover\"></a><strong>hover</strong></h3><hr>\n<ul>\n<li>hover data<br>클릭과 반응하는 인터렉티브 그래프를 구축<br>데이터의 세부 정보를 추가적으로 보여주는 팝업 정보창을 의미한다<br>마우스 가져다 대면 data 정보를 볼 수 있다</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fig.update_traces(hovertemplate=<span class=\"string\">&#x27;&lt;b&gt;Country&lt;/b&gt;: %&#123;y&#125;&lt;br&gt;&lt;extra&gt;&lt;/extra&gt;&#x27;</span>+</span><br><span class=\"line\">                                <span class=\"string\">&#x27;&lt;b&gt;Count&lt;/b&gt;: %&#123;x&#125;&lt;br&gt;&#x27;</span>+</span><br><span class=\"line\">                                <span class=\"string\">&#x27;&lt;b&gt;Proportion&lt;/b&gt;: %&#123;text&#125;&#x27;</span>)</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/0303_1-3/7.PNG\"></p>\n<br>\n\n<h3 id=\"배경-격자-무늬\"><a href=\"#배경-격자-무늬\" class=\"headerlink\" title=\"배경 격자 무늬\"></a><strong>배경 격자 무늬</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fig.update_xaxes(showgrid=<span class=\"literal\">True</span>, gridwidth=<span class=\"number\">1</span>, gridcolor=<span class=\"string\">&#x27;#9f9f9f&#x27;</span>, ticklabelmode=<span class=\"string\">&#x27;period&#x27;</span>)</span><br><span class=\"line\">fig.update_yaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/0303_1-3/8.PNG\"></p>\n<br>\n\n<h3 id=\"update-layout\"><a href=\"#update-layout\" class=\"headerlink\" title=\".update_layout\"></a><strong>.update_layout</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fig.update_layout(showlegend=<span class=\"literal\">False</span>, </span><br><span class=\"line\">                  plot_bgcolor=<span class=\"string\">&#x27;#F7F7F7&#x27;</span>, </span><br><span class=\"line\">                  margin=<span class=\"built_in\">dict</span>(pad=<span class=\"number\">20</span>),</span><br><span class=\"line\">                  paper_bgcolor=<span class=\"string\">&#x27;#F7F7F7&#x27;</span>,</span><br><span class=\"line\">                  yaxis_title=<span class=\"literal\">None</span>,</span><br><span class=\"line\">                  xaxis_title=<span class=\"literal\">None</span>,</span><br><span class=\"line\">                  title_text=<span class=\"string\">&quot;Most Common &lt;b&gt;Countries&lt;/b&gt;&quot;</span>,</span><br><span class=\"line\">                  title_x=<span class=\"number\">0.5</span>,</span><br><span class=\"line\">                  height=<span class=\"number\">700</span>,</span><br><span class=\"line\">                  font=<span class=\"built_in\">dict</span>(family=<span class=\"string\">&quot;Hiragino Kaku Gothic Pro, sans-serif&quot;</span>, size=<span class=\"number\">17</span>, color=<span class=\"string\">&#x27;#000000&#x27;</span>),</span><br><span class=\"line\">                  title_font_size=<span class=\"number\">35</span>)</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/0303_1-3/9.PNG\"><br><br></p>\n<h3 id=\"annotation\"><a href=\"#annotation\" class=\"headerlink\" title=\"annotation\"></a><strong>annotation</strong></h3><hr>\n<p>주석</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">14</span>),</span><br><span class=\"line\">                                    x=<span class=\"number\">0.98</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.155</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;@miguelfzzz&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">12</span>),</span><br><span class=\"line\">                                    x=<span class=\"number\">0</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.155</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;Source: 2021 Kaggle Machine Learning &amp; Data Science Survey&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/0303_1-3/10.PNG\"><br><br></p>\n<h3 id=\"전체코드\"><a href=\"#전체코드\" class=\"headerlink\" title=\"전체코드\"></a><strong>전체코드</strong></h3><hr>\n<p>인도는 전체의 28%가 넘는 가장 흔한 국가이다. 미국이 10%로 그 뒤를 이었다</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df1 = df.copy()</span><br><span class=\"line\">df1[<span class=\"string\">&#x27;Q3&#x27;</span>] = df1[<span class=\"string\">&#x27;Q3&#x27;</span>].astype(<span class=\"string\">&#x27;category&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">others = df1[<span class=\"string\">&#x27;Q3&#x27;</span>].value_counts().index[<span class=\"number\">15</span>:]</span><br><span class=\"line\">label = <span class=\"string\">&#x27;Others&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">df1[<span class=\"string\">&#x27;Q3&#x27;</span>] = df1[<span class=\"string\">&#x27;Q3&#x27;</span>].cat.add_categories([label])</span><br><span class=\"line\">df1[<span class=\"string\">&#x27;Q3&#x27;</span>] = df1[<span class=\"string\">&#x27;Q3&#x27;</span>].replace(others, label)</span><br><span class=\"line\"></span><br><span class=\"line\">country = (</span><br><span class=\"line\">    df1[<span class=\"string\">&#x27;Q3&#x27;</span>]</span><br><span class=\"line\">    .replace([<span class=\"string\">&#x27;Other&#x27;</span>], <span class=\"string\">&#x27;Others&#x27;</span>)</span><br><span class=\"line\">    .value_counts()</span><br><span class=\"line\">    .to_frame()</span><br><span class=\"line\">    .reset_index()</span><br><span class=\"line\">    .rename(columns=&#123;<span class=\"string\">&#x27;index&#x27;</span>:<span class=\"string\">&#x27;Country&#x27;</span>, <span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;Count&#x27;</span>&#125;)</span><br><span class=\"line\">    .sort_values(by=[<span class=\"string\">&#x27;Count&#x27;</span>], ascending=<span class=\"literal\">False</span>) </span><br><span class=\"line\">    .replace([<span class=\"string\">&#x27;United Kingdom of Great Britain and Northern Ireland&#x27;</span>], <span class=\"string\">&#x27;United Kingdom&#x27;</span>)</span><br><span class=\"line\">          )  </span><br><span class=\"line\"></span><br><span class=\"line\">country[<span class=\"string\">&#x27;percent&#x27;</span>] = ((country[<span class=\"string\">&#x27;Count&#x27;</span>] / country[<span class=\"string\">&#x27;Count&#x27;</span>].<span class=\"built_in\">sum</span>())*<span class=\"number\">100</span>).<span class=\"built_in\">round</span>(<span class=\"number\">2</span>).astype(<span class=\"built_in\">str</span>) + <span class=\"string\">&#x27;%&#x27;</span></span><br><span class=\"line\">          </span><br><span class=\"line\">colors = [<span class=\"string\">&#x27;#033351&#x27;</span>,] * <span class=\"number\">16</span></span><br><span class=\"line\">colors[<span class=\"number\">14</span>] = <span class=\"string\">&#x27;#0779c3&#x27;</span></span><br><span class=\"line\">colors[<span class=\"number\">13</span>] = <span class=\"string\">&#x27;#5abbf9&#x27;</span></span><br><span class=\"line\">colors[<span class=\"number\">12</span>] = <span class=\"string\">&#x27;#5abbf9&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">country = (country</span><br><span class=\"line\">           .sort_values(by = [<span class=\"string\">&#x27;Count&#x27;</span>])</span><br><span class=\"line\">           .iloc[<span class=\"number\">0</span>:<span class=\"number\">16</span>]</span><br><span class=\"line\">           .reset_index())</span><br><span class=\"line\"></span><br><span class=\"line\">fig = go.Figure(go.Scatter(x = country[<span class=\"string\">&#x27;Count&#x27;</span>], </span><br><span class=\"line\">                           y = country[<span class=\"string\">&quot;Country&quot;</span>],</span><br><span class=\"line\">                           text = country[<span class=\"string\">&#x27;percent&#x27;</span>],</span><br><span class=\"line\">                           mode = <span class=\"string\">&#x27;markers&#x27;</span>,</span><br><span class=\"line\">                           marker_color =colors,</span><br><span class=\"line\">                           marker_size  = <span class=\"number\">12</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>, <span class=\"built_in\">len</span>(country)):</span><br><span class=\"line\">               fig.add_shape(<span class=\"built_in\">type</span>=<span class=\"string\">&#x27;line&#x27;</span>,</span><br><span class=\"line\">                              x0 = <span class=\"number\">0</span>, y0 = i,</span><br><span class=\"line\">                              x1 = country[<span class=\"string\">&quot;Count&quot;</span>][i],</span><br><span class=\"line\">                              y1 = i,</span><br><span class=\"line\">                              line=<span class=\"built_in\">dict</span>(color=colors[i], width = <span class=\"number\">4</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_traces(hovertemplate=<span class=\"string\">&#x27;&lt;b&gt;Country&lt;/b&gt;: %&#123;y&#125;&lt;br&gt;&lt;extra&gt;&lt;/extra&gt;&#x27;</span>+</span><br><span class=\"line\">                                <span class=\"string\">&#x27;&lt;b&gt;Count&lt;/b&gt;: %&#123;x&#125;&lt;br&gt;&#x27;</span>+</span><br><span class=\"line\">                                <span class=\"string\">&#x27;&lt;b&gt;Proportion&lt;/b&gt;: %&#123;text&#125;&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_xaxes(showgrid=<span class=\"literal\">True</span>, gridwidth=<span class=\"number\">1</span>, gridcolor=<span class=\"string\">&#x27;#9f9f9f&#x27;</span>, ticklabelmode=<span class=\"string\">&#x27;period&#x27;</span>)</span><br><span class=\"line\">fig.update_yaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\">fig.update_layout(showlegend=<span class=\"literal\">False</span>, </span><br><span class=\"line\">                  plot_bgcolor=<span class=\"string\">&#x27;#F7F7F7&#x27;</span>, </span><br><span class=\"line\">                  margin=<span class=\"built_in\">dict</span>(pad=<span class=\"number\">20</span>),</span><br><span class=\"line\">                  paper_bgcolor=<span class=\"string\">&#x27;#F7F7F7&#x27;</span>,</span><br><span class=\"line\">                  yaxis_title=<span class=\"literal\">None</span>,</span><br><span class=\"line\">                  xaxis_title=<span class=\"literal\">None</span>,</span><br><span class=\"line\">                  title_text=<span class=\"string\">&quot;Most Common &lt;b&gt;Countries&lt;/b&gt;&quot;</span>,</span><br><span class=\"line\">                  title_x=<span class=\"number\">0.5</span>,</span><br><span class=\"line\">                  height=<span class=\"number\">700</span>,</span><br><span class=\"line\">                  font=<span class=\"built_in\">dict</span>(family=<span class=\"string\">&quot;Hiragino Kaku Gothic Pro, sans-serif&quot;</span>, size=<span class=\"number\">17</span>, color=<span class=\"string\">&#x27;#000000&#x27;</span>),</span><br><span class=\"line\">                  title_font_size=<span class=\"number\">35</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">14</span>),</span><br><span class=\"line\">                                    x=<span class=\"number\">0.98</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.155</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;@miguelfzzz&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">12</span>),</span><br><span class=\"line\">                                    x=<span class=\"number\">0</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.155</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;Source: 2021 Kaggle Machine Learning &amp; Data Science Survey&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/0303_1-3/10.PNG\"></p>\n<br>\n<br>\n"},{"title":"막대그래프(Bar, 수직)","date":"2021-11-08T15:00:00.000Z","toc":true,"thumbnail":"/images/0305_3-1/6.PNG","widgets":null,"_content":"\n<br>\n\n## **3-1. 막대그래프(수직)**\n### **라이브러리 임포트 해주기 & 캐글 데이터 불러오기**\n---\n\n```python\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objects as go\n\nimport warnings\nwarnings.filterwarnings('ignore') \n\ndf = pd.read_csv('../input/kaggle-survey-2021/kaggle_survey_2021_responses.csv')\ndf = df.iloc[1:, :]\n```\n\n<br>\n\n### **experience 객체 생성**\n---\n- **.replace([a],[b])**\na 이름을 b로 바꾼다 \n\n\n\n```python\nexperience = (\n    df['Q6']\n    .value_counts()\n    .to_frame()\n    .reset_index()\n    .rename(columns={'index':'Experience', 'Q6':'Count'})\n    .replace(['I have never written code','< 1 years',\n              '1-3 years', '3-5 years', '5-10 years',\n              '10-20 years', '20+ years'], ['No experience', '<1 years',\n                                        '1-3 years', '3-5 years', '5-10 years',\n                                        '10-20 years', '20+ years'])\n          ) \n```\n\n\n```python\nprint(df['Q6'])\n```\n\n![](/images/0305_3-1/1.PNG)\n\n```python\nprint(experience)\n```\n![](/images/0305_3-1/2.PNG)\n\n<br>\n\n### **pandas categorical**\n\npandas 에서 자료형으로 사용되는 object와 category\n- object \n문자열을 object라는 자료형으로 나타낸다.\n- category\ncategory 형식은 가능한 값들의 범위가 고정되어있고, 한정적일 때 매우 사용한다.\n\n???????카테고리로 바꿔준거??????????????\n```python\nexperience['Experience'] = pd.Categorical(\n                                        experience['Experience'], \n                                        ['No experience', '<1 years',\n                                        '1-3 years', '3-5 years', '5-10 years',\n                                        '10-20 years', '20+ years']\n                                         )\nprint(experience['Experience'])\n```\n![](/images/0305_3-1/3.PNG)\n\n<br>\n\n```python\nexperience['percent'] = ((experience['Count'] / experience['Count'].sum())*100).round(2).astype(str) + '%'\nprint(experience['percent'])\n```\n![](/images/0305_3-1/4.PNG)\n\n<br>\n\n```python\nexperience = experience.sort_values('Experience')\nprint(experience)\n```\n![](/images/0305_3-1/5.PNG)\n<br>\n\n```python\ncolors = ['#033351',] * 7\ncolors[1] = '#5abbf9'\ncolors[2] = '#5abbf9'\ncolors[3] = '#0779c3'\ncolors[4] = '#0779c3'\n\n\nfig = go.Figure(go.Bar(\n            y=experience['Count'],\n            x=experience['Experience'],\n            cliponaxis = False,\n            text=experience['percent'],\n            marker_color=colors\n                        ))\n\nfig.update_traces(texttemplate='%{text}', \n                  textposition='outside',\n                  hovertemplate='<b>Experience</b>: %{x}<br><extra></extra>'+\n                                '<b>Count</b>: %{y}',\n                  textfont_size=12)\n                  \nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\n \nfig.update_layout(showlegend=False, \n                  plot_bgcolor='#F7F7F7', \n                  margin=dict(pad=20),\n                  paper_bgcolor='#F7F7F7',\n                  height=500,\n                  yaxis={'showticklabels': False},\n                  yaxis_title=None,\n                  xaxis_title=None,\n                  title_text=\"<b>Experience</b> Distribution\",\n                  title_x=0.5,\n                  font=dict(family=\"Hiragino Kaku Gothic Pro, sans-serif\", size=14, color='#000000'),\n                  title_font_size=35)\n\nfig.add_annotation(dict(font=dict(size=14),\n                                    x=0.98,\n                                    y=-0.24,\n                                    showarrow=False,\n                                    text=\"@miguelfzzz\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\n\nfig.add_annotation(dict(font=dict(size=12),\n                                    x=-0.03,\n                                    y=-0.24,\n                                    showarrow=False,\n                                    text=\"Source: 2021 Kaggle Machine Learning & Data Science Survey\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\nfig.show()\n```\n![](/images/0305_3-1/6.PNG)\n\n<br>\n\n### **전체코드**\n---\n\n\n```python\nexperience = (\n    df['Q6']\n    .value_counts()\n    .to_frame()\n    .reset_index()\n    .rename(columns={'index':'Experience', 'Q6':'Count'})\n    .replace(['I have never written code','< 1 years',\n              '1-3 years', '3-5 years', '5-10 years',\n              '10-20 years', '20+ years'], ['No experience', '<1 years',\n                                        '1-3 years', '3-5 years', '5-10 years',\n                                        '10-20 years', '20+ years'])\n          ) \n\nexperience['Experience'] = pd.Categorical(\n                                        experience['Experience'], \n                                        ['No experience', '<1 years',\n                                        '1-3 years', '3-5 years', '5-10 years',\n                                        '10-20 years', '20+ years']\n                                         )\n                                         \n\nexperience['percent'] = ((experience['Count'] / experience['Count'].sum())*100).round(2).astype(str) + '%'\n\nexperience = experience.sort_values('Experience')\n\ncolors = ['#033351',] * 7\ncolors[1] = '#5abbf9'\ncolors[2] = '#5abbf9'\ncolors[3] = '#0779c3'\ncolors[4] = '#0779c3'\n\n\nfig = go.Figure(go.Bar(\n            y=experience['Count'],\n            x=experience['Experience'],\n            cliponaxis = False,\n            text=experience['percent'],\n            marker_color=colors\n                        ))\n\nfig.update_traces(texttemplate='%{text}', \n                  textposition='outside',\n                  hovertemplate='<b>Experience</b>: %{x}<br><extra></extra>'+\n                                '<b>Count</b>: %{y}',\n                  textfont_size=12)\n                  \nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\n \nfig.update_layout(showlegend=False, \n                  plot_bgcolor='#F7F7F7', \n                  margin=dict(pad=20),\n                  paper_bgcolor='#F7F7F7',\n                  height=500,\n                  yaxis={'showticklabels': False},\n                  yaxis_title=None,\n                  xaxis_title=None,\n                  title_text=\"<b>Experience</b> Distribution\",\n                  title_x=0.5,\n                  font=dict(family=\"Hiragino Kaku Gothic Pro, sans-serif\", size=14, color='#000000'),\n                  title_font_size=35)\n\nfig.add_annotation(dict(font=dict(size=14),\n                                    x=0.98,\n                                    y=-0.24,\n                                    showarrow=False,\n                                    text=\"@miguelfzzz\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\n\nfig.add_annotation(dict(font=dict(size=12),\n                                    x=-0.03,\n                                    y=-0.24,\n                                    showarrow=False,\n                                    text=\"Source: 2021 Kaggle Machine Learning & Data Science Survey\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\nfig.show()\n\n```\n![](/images/0305_3-1/6.PNG)\n<br>\n<br>\n","source":"_posts/kaggle5_막대그래프(수직).md","raw":"---\ntitle: 막대그래프(Bar, 수직)\ndate: 2021-11-09\ntags: kaggle, plotly\ntoc: true\nthumbnail: /images/0305_3-1/6.PNG\ncategories: \n- kaggle 필사\nwidgets: null\n---\n\n<br>\n\n## **3-1. 막대그래프(수직)**\n### **라이브러리 임포트 해주기 & 캐글 데이터 불러오기**\n---\n\n```python\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objects as go\n\nimport warnings\nwarnings.filterwarnings('ignore') \n\ndf = pd.read_csv('../input/kaggle-survey-2021/kaggle_survey_2021_responses.csv')\ndf = df.iloc[1:, :]\n```\n\n<br>\n\n### **experience 객체 생성**\n---\n- **.replace([a],[b])**\na 이름을 b로 바꾼다 \n\n\n\n```python\nexperience = (\n    df['Q6']\n    .value_counts()\n    .to_frame()\n    .reset_index()\n    .rename(columns={'index':'Experience', 'Q6':'Count'})\n    .replace(['I have never written code','< 1 years',\n              '1-3 years', '3-5 years', '5-10 years',\n              '10-20 years', '20+ years'], ['No experience', '<1 years',\n                                        '1-3 years', '3-5 years', '5-10 years',\n                                        '10-20 years', '20+ years'])\n          ) \n```\n\n\n```python\nprint(df['Q6'])\n```\n\n![](/images/0305_3-1/1.PNG)\n\n```python\nprint(experience)\n```\n![](/images/0305_3-1/2.PNG)\n\n<br>\n\n### **pandas categorical**\n\npandas 에서 자료형으로 사용되는 object와 category\n- object \n문자열을 object라는 자료형으로 나타낸다.\n- category\ncategory 형식은 가능한 값들의 범위가 고정되어있고, 한정적일 때 매우 사용한다.\n\n???????카테고리로 바꿔준거??????????????\n```python\nexperience['Experience'] = pd.Categorical(\n                                        experience['Experience'], \n                                        ['No experience', '<1 years',\n                                        '1-3 years', '3-5 years', '5-10 years',\n                                        '10-20 years', '20+ years']\n                                         )\nprint(experience['Experience'])\n```\n![](/images/0305_3-1/3.PNG)\n\n<br>\n\n```python\nexperience['percent'] = ((experience['Count'] / experience['Count'].sum())*100).round(2).astype(str) + '%'\nprint(experience['percent'])\n```\n![](/images/0305_3-1/4.PNG)\n\n<br>\n\n```python\nexperience = experience.sort_values('Experience')\nprint(experience)\n```\n![](/images/0305_3-1/5.PNG)\n<br>\n\n```python\ncolors = ['#033351',] * 7\ncolors[1] = '#5abbf9'\ncolors[2] = '#5abbf9'\ncolors[3] = '#0779c3'\ncolors[4] = '#0779c3'\n\n\nfig = go.Figure(go.Bar(\n            y=experience['Count'],\n            x=experience['Experience'],\n            cliponaxis = False,\n            text=experience['percent'],\n            marker_color=colors\n                        ))\n\nfig.update_traces(texttemplate='%{text}', \n                  textposition='outside',\n                  hovertemplate='<b>Experience</b>: %{x}<br><extra></extra>'+\n                                '<b>Count</b>: %{y}',\n                  textfont_size=12)\n                  \nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\n \nfig.update_layout(showlegend=False, \n                  plot_bgcolor='#F7F7F7', \n                  margin=dict(pad=20),\n                  paper_bgcolor='#F7F7F7',\n                  height=500,\n                  yaxis={'showticklabels': False},\n                  yaxis_title=None,\n                  xaxis_title=None,\n                  title_text=\"<b>Experience</b> Distribution\",\n                  title_x=0.5,\n                  font=dict(family=\"Hiragino Kaku Gothic Pro, sans-serif\", size=14, color='#000000'),\n                  title_font_size=35)\n\nfig.add_annotation(dict(font=dict(size=14),\n                                    x=0.98,\n                                    y=-0.24,\n                                    showarrow=False,\n                                    text=\"@miguelfzzz\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\n\nfig.add_annotation(dict(font=dict(size=12),\n                                    x=-0.03,\n                                    y=-0.24,\n                                    showarrow=False,\n                                    text=\"Source: 2021 Kaggle Machine Learning & Data Science Survey\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\nfig.show()\n```\n![](/images/0305_3-1/6.PNG)\n\n<br>\n\n### **전체코드**\n---\n\n\n```python\nexperience = (\n    df['Q6']\n    .value_counts()\n    .to_frame()\n    .reset_index()\n    .rename(columns={'index':'Experience', 'Q6':'Count'})\n    .replace(['I have never written code','< 1 years',\n              '1-3 years', '3-5 years', '5-10 years',\n              '10-20 years', '20+ years'], ['No experience', '<1 years',\n                                        '1-3 years', '3-5 years', '5-10 years',\n                                        '10-20 years', '20+ years'])\n          ) \n\nexperience['Experience'] = pd.Categorical(\n                                        experience['Experience'], \n                                        ['No experience', '<1 years',\n                                        '1-3 years', '3-5 years', '5-10 years',\n                                        '10-20 years', '20+ years']\n                                         )\n                                         \n\nexperience['percent'] = ((experience['Count'] / experience['Count'].sum())*100).round(2).astype(str) + '%'\n\nexperience = experience.sort_values('Experience')\n\ncolors = ['#033351',] * 7\ncolors[1] = '#5abbf9'\ncolors[2] = '#5abbf9'\ncolors[3] = '#0779c3'\ncolors[4] = '#0779c3'\n\n\nfig = go.Figure(go.Bar(\n            y=experience['Count'],\n            x=experience['Experience'],\n            cliponaxis = False,\n            text=experience['percent'],\n            marker_color=colors\n                        ))\n\nfig.update_traces(texttemplate='%{text}', \n                  textposition='outside',\n                  hovertemplate='<b>Experience</b>: %{x}<br><extra></extra>'+\n                                '<b>Count</b>: %{y}',\n                  textfont_size=12)\n                  \nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\n \nfig.update_layout(showlegend=False, \n                  plot_bgcolor='#F7F7F7', \n                  margin=dict(pad=20),\n                  paper_bgcolor='#F7F7F7',\n                  height=500,\n                  yaxis={'showticklabels': False},\n                  yaxis_title=None,\n                  xaxis_title=None,\n                  title_text=\"<b>Experience</b> Distribution\",\n                  title_x=0.5,\n                  font=dict(family=\"Hiragino Kaku Gothic Pro, sans-serif\", size=14, color='#000000'),\n                  title_font_size=35)\n\nfig.add_annotation(dict(font=dict(size=14),\n                                    x=0.98,\n                                    y=-0.24,\n                                    showarrow=False,\n                                    text=\"@miguelfzzz\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\n\nfig.add_annotation(dict(font=dict(size=12),\n                                    x=-0.03,\n                                    y=-0.24,\n                                    showarrow=False,\n                                    text=\"Source: 2021 Kaggle Machine Learning & Data Science Survey\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\nfig.show()\n\n```\n![](/images/0305_3-1/6.PNG)\n<br>\n<br>\n","slug":"kaggle5-막대그래프-수직","published":1,"updated":"2022-01-03T12:20:08.048Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cky2hoheq000y5nrj4sz1699y","content":"<br>\n\n<h2 id=\"3-1-막대그래프-수직\"><a href=\"#3-1-막대그래프-수직\" class=\"headerlink\" title=\"3-1. 막대그래프(수직)\"></a><strong>3-1. 막대그래프(수직)</strong></h2><h3 id=\"라이브러리-임포트-해주기-amp-캐글-데이터-불러오기\"><a href=\"#라이브러리-임포트-해주기-amp-캐글-데이터-불러오기\" class=\"headerlink\" title=\"라이브러리 임포트 해주기 &amp; 캐글 데이터 불러오기\"></a><strong>라이브러리 임포트 해주기 &amp; 캐글 데이터 불러오기</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> seaborn <span class=\"keyword\">as</span> sns</span><br><span class=\"line\"><span class=\"keyword\">import</span> plotly.express <span class=\"keyword\">as</span> px</span><br><span class=\"line\"><span class=\"keyword\">import</span> plotly.graph_objects <span class=\"keyword\">as</span> go</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> warnings</span><br><span class=\"line\">warnings.filterwarnings(<span class=\"string\">&#x27;ignore&#x27;</span>) </span><br><span class=\"line\"></span><br><span class=\"line\">df = pd.read_csv(<span class=\"string\">&#x27;../input/kaggle-survey-2021/kaggle_survey_2021_responses.csv&#x27;</span>)</span><br><span class=\"line\">df = df.iloc[<span class=\"number\">1</span>:, :]</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h3 id=\"experience-객체-생성\"><a href=\"#experience-객체-생성\" class=\"headerlink\" title=\"experience 객체 생성\"></a><strong>experience 객체 생성</strong></h3><hr>\n<ul>\n<li><strong>.replace([a],[b])</strong><br>a 이름을 b로 바꾼다 </li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">experience = (</span><br><span class=\"line\">    df[<span class=\"string\">&#x27;Q6&#x27;</span>]</span><br><span class=\"line\">    .value_counts()</span><br><span class=\"line\">    .to_frame()</span><br><span class=\"line\">    .reset_index()</span><br><span class=\"line\">    .rename(columns=&#123;<span class=\"string\">&#x27;index&#x27;</span>:<span class=\"string\">&#x27;Experience&#x27;</span>, <span class=\"string\">&#x27;Q6&#x27;</span>:<span class=\"string\">&#x27;Count&#x27;</span>&#125;)</span><br><span class=\"line\">    .replace([<span class=\"string\">&#x27;I have never written code&#x27;</span>,<span class=\"string\">&#x27;&lt; 1 years&#x27;</span>,</span><br><span class=\"line\">              <span class=\"string\">&#x27;1-3 years&#x27;</span>, <span class=\"string\">&#x27;3-5 years&#x27;</span>, <span class=\"string\">&#x27;5-10 years&#x27;</span>,</span><br><span class=\"line\">              <span class=\"string\">&#x27;10-20 years&#x27;</span>, <span class=\"string\">&#x27;20+ years&#x27;</span>], [<span class=\"string\">&#x27;No experience&#x27;</span>, <span class=\"string\">&#x27;&lt;1 years&#x27;</span>,</span><br><span class=\"line\">                                        <span class=\"string\">&#x27;1-3 years&#x27;</span>, <span class=\"string\">&#x27;3-5 years&#x27;</span>, <span class=\"string\">&#x27;5-10 years&#x27;</span>,</span><br><span class=\"line\">                                        <span class=\"string\">&#x27;10-20 years&#x27;</span>, <span class=\"string\">&#x27;20+ years&#x27;</span>])</span><br><span class=\"line\">          ) </span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(df[<span class=\"string\">&#x27;Q6&#x27;</span>])</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/0305_3-1/1.PNG\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(experience)</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/0305_3-1/2.PNG\"></p>\n<br>\n\n<h3 id=\"pandas-categorical\"><a href=\"#pandas-categorical\" class=\"headerlink\" title=\"pandas categorical\"></a><strong>pandas categorical</strong></h3><p>pandas 에서 자료형으로 사용되는 object와 category</p>\n<ul>\n<li>object<br>문자열을 object라는 자료형으로 나타낸다.</li>\n<li>category<br>category 형식은 가능한 값들의 범위가 고정되어있고, 한정적일 때 매우 사용한다.</li>\n</ul>\n<p>???????카테고리로 바꿔준거??????????????</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">experience[<span class=\"string\">&#x27;Experience&#x27;</span>] = pd.Categorical(</span><br><span class=\"line\">                                        experience[<span class=\"string\">&#x27;Experience&#x27;</span>], </span><br><span class=\"line\">                                        [<span class=\"string\">&#x27;No experience&#x27;</span>, <span class=\"string\">&#x27;&lt;1 years&#x27;</span>,</span><br><span class=\"line\">                                        <span class=\"string\">&#x27;1-3 years&#x27;</span>, <span class=\"string\">&#x27;3-5 years&#x27;</span>, <span class=\"string\">&#x27;5-10 years&#x27;</span>,</span><br><span class=\"line\">                                        <span class=\"string\">&#x27;10-20 years&#x27;</span>, <span class=\"string\">&#x27;20+ years&#x27;</span>]</span><br><span class=\"line\">                                         )</span><br><span class=\"line\"><span class=\"built_in\">print</span>(experience[<span class=\"string\">&#x27;Experience&#x27;</span>])</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/0305_3-1/3.PNG\"></p>\n<br>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">experience[<span class=\"string\">&#x27;percent&#x27;</span>] = ((experience[<span class=\"string\">&#x27;Count&#x27;</span>] / experience[<span class=\"string\">&#x27;Count&#x27;</span>].<span class=\"built_in\">sum</span>())*<span class=\"number\">100</span>).<span class=\"built_in\">round</span>(<span class=\"number\">2</span>).astype(<span class=\"built_in\">str</span>) + <span class=\"string\">&#x27;%&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(experience[<span class=\"string\">&#x27;percent&#x27;</span>])</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/0305_3-1/4.PNG\"></p>\n<br>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">experience = experience.sort_values(<span class=\"string\">&#x27;Experience&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(experience)</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/0305_3-1/5.PNG\"><br><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">colors = [<span class=\"string\">&#x27;#033351&#x27;</span>,] * <span class=\"number\">7</span></span><br><span class=\"line\">colors[<span class=\"number\">1</span>] = <span class=\"string\">&#x27;#5abbf9&#x27;</span></span><br><span class=\"line\">colors[<span class=\"number\">2</span>] = <span class=\"string\">&#x27;#5abbf9&#x27;</span></span><br><span class=\"line\">colors[<span class=\"number\">3</span>] = <span class=\"string\">&#x27;#0779c3&#x27;</span></span><br><span class=\"line\">colors[<span class=\"number\">4</span>] = <span class=\"string\">&#x27;#0779c3&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">fig = go.Figure(go.Bar(</span><br><span class=\"line\">            y=experience[<span class=\"string\">&#x27;Count&#x27;</span>],</span><br><span class=\"line\">            x=experience[<span class=\"string\">&#x27;Experience&#x27;</span>],</span><br><span class=\"line\">            cliponaxis = <span class=\"literal\">False</span>,</span><br><span class=\"line\">            text=experience[<span class=\"string\">&#x27;percent&#x27;</span>],</span><br><span class=\"line\">            marker_color=colors</span><br><span class=\"line\">                        ))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_traces(texttemplate=<span class=\"string\">&#x27;%&#123;text&#125;&#x27;</span>, </span><br><span class=\"line\">                  textposition=<span class=\"string\">&#x27;outside&#x27;</span>,</span><br><span class=\"line\">                  hovertemplate=<span class=\"string\">&#x27;&lt;b&gt;Experience&lt;/b&gt;: %&#123;x&#125;&lt;br&gt;&lt;extra&gt;&lt;/extra&gt;&#x27;</span>+</span><br><span class=\"line\">                                <span class=\"string\">&#x27;&lt;b&gt;Count&lt;/b&gt;: %&#123;y&#125;&#x27;</span>,</span><br><span class=\"line\">                  textfont_size=<span class=\"number\">12</span>)</span><br><span class=\"line\">                  </span><br><span class=\"line\">fig.update_xaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\">fig.update_yaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\">fig.update_layout(showlegend=<span class=\"literal\">False</span>, </span><br><span class=\"line\">                  plot_bgcolor=<span class=\"string\">&#x27;#F7F7F7&#x27;</span>, </span><br><span class=\"line\">                  margin=<span class=\"built_in\">dict</span>(pad=<span class=\"number\">20</span>),</span><br><span class=\"line\">                  paper_bgcolor=<span class=\"string\">&#x27;#F7F7F7&#x27;</span>,</span><br><span class=\"line\">                  height=<span class=\"number\">500</span>,</span><br><span class=\"line\">                  yaxis=&#123;<span class=\"string\">&#x27;showticklabels&#x27;</span>: <span class=\"literal\">False</span>&#125;,</span><br><span class=\"line\">                  yaxis_title=<span class=\"literal\">None</span>,</span><br><span class=\"line\">                  xaxis_title=<span class=\"literal\">None</span>,</span><br><span class=\"line\">                  title_text=<span class=\"string\">&quot;&lt;b&gt;Experience&lt;/b&gt; Distribution&quot;</span>,</span><br><span class=\"line\">                  title_x=<span class=\"number\">0.5</span>,</span><br><span class=\"line\">                  font=<span class=\"built_in\">dict</span>(family=<span class=\"string\">&quot;Hiragino Kaku Gothic Pro, sans-serif&quot;</span>, size=<span class=\"number\">14</span>, color=<span class=\"string\">&#x27;#000000&#x27;</span>),</span><br><span class=\"line\">                  title_font_size=<span class=\"number\">35</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">14</span>),</span><br><span class=\"line\">                                    x=<span class=\"number\">0.98</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.24</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;@miguelfzzz&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">12</span>),</span><br><span class=\"line\">                                    x=-<span class=\"number\">0.03</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.24</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;Source: 2021 Kaggle Machine Learning &amp; Data Science Survey&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/0305_3-1/6.PNG\"></p>\n<br>\n\n<h3 id=\"전체코드\"><a href=\"#전체코드\" class=\"headerlink\" title=\"전체코드\"></a><strong>전체코드</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">experience = (</span><br><span class=\"line\">    df[<span class=\"string\">&#x27;Q6&#x27;</span>]</span><br><span class=\"line\">    .value_counts()</span><br><span class=\"line\">    .to_frame()</span><br><span class=\"line\">    .reset_index()</span><br><span class=\"line\">    .rename(columns=&#123;<span class=\"string\">&#x27;index&#x27;</span>:<span class=\"string\">&#x27;Experience&#x27;</span>, <span class=\"string\">&#x27;Q6&#x27;</span>:<span class=\"string\">&#x27;Count&#x27;</span>&#125;)</span><br><span class=\"line\">    .replace([<span class=\"string\">&#x27;I have never written code&#x27;</span>,<span class=\"string\">&#x27;&lt; 1 years&#x27;</span>,</span><br><span class=\"line\">              <span class=\"string\">&#x27;1-3 years&#x27;</span>, <span class=\"string\">&#x27;3-5 years&#x27;</span>, <span class=\"string\">&#x27;5-10 years&#x27;</span>,</span><br><span class=\"line\">              <span class=\"string\">&#x27;10-20 years&#x27;</span>, <span class=\"string\">&#x27;20+ years&#x27;</span>], [<span class=\"string\">&#x27;No experience&#x27;</span>, <span class=\"string\">&#x27;&lt;1 years&#x27;</span>,</span><br><span class=\"line\">                                        <span class=\"string\">&#x27;1-3 years&#x27;</span>, <span class=\"string\">&#x27;3-5 years&#x27;</span>, <span class=\"string\">&#x27;5-10 years&#x27;</span>,</span><br><span class=\"line\">                                        <span class=\"string\">&#x27;10-20 years&#x27;</span>, <span class=\"string\">&#x27;20+ years&#x27;</span>])</span><br><span class=\"line\">          ) </span><br><span class=\"line\"></span><br><span class=\"line\">experience[<span class=\"string\">&#x27;Experience&#x27;</span>] = pd.Categorical(</span><br><span class=\"line\">                                        experience[<span class=\"string\">&#x27;Experience&#x27;</span>], </span><br><span class=\"line\">                                        [<span class=\"string\">&#x27;No experience&#x27;</span>, <span class=\"string\">&#x27;&lt;1 years&#x27;</span>,</span><br><span class=\"line\">                                        <span class=\"string\">&#x27;1-3 years&#x27;</span>, <span class=\"string\">&#x27;3-5 years&#x27;</span>, <span class=\"string\">&#x27;5-10 years&#x27;</span>,</span><br><span class=\"line\">                                        <span class=\"string\">&#x27;10-20 years&#x27;</span>, <span class=\"string\">&#x27;20+ years&#x27;</span>]</span><br><span class=\"line\">                                         )</span><br><span class=\"line\">                                         </span><br><span class=\"line\"></span><br><span class=\"line\">experience[<span class=\"string\">&#x27;percent&#x27;</span>] = ((experience[<span class=\"string\">&#x27;Count&#x27;</span>] / experience[<span class=\"string\">&#x27;Count&#x27;</span>].<span class=\"built_in\">sum</span>())*<span class=\"number\">100</span>).<span class=\"built_in\">round</span>(<span class=\"number\">2</span>).astype(<span class=\"built_in\">str</span>) + <span class=\"string\">&#x27;%&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">experience = experience.sort_values(<span class=\"string\">&#x27;Experience&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">colors = [<span class=\"string\">&#x27;#033351&#x27;</span>,] * <span class=\"number\">7</span></span><br><span class=\"line\">colors[<span class=\"number\">1</span>] = <span class=\"string\">&#x27;#5abbf9&#x27;</span></span><br><span class=\"line\">colors[<span class=\"number\">2</span>] = <span class=\"string\">&#x27;#5abbf9&#x27;</span></span><br><span class=\"line\">colors[<span class=\"number\">3</span>] = <span class=\"string\">&#x27;#0779c3&#x27;</span></span><br><span class=\"line\">colors[<span class=\"number\">4</span>] = <span class=\"string\">&#x27;#0779c3&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">fig = go.Figure(go.Bar(</span><br><span class=\"line\">            y=experience[<span class=\"string\">&#x27;Count&#x27;</span>],</span><br><span class=\"line\">            x=experience[<span class=\"string\">&#x27;Experience&#x27;</span>],</span><br><span class=\"line\">            cliponaxis = <span class=\"literal\">False</span>,</span><br><span class=\"line\">            text=experience[<span class=\"string\">&#x27;percent&#x27;</span>],</span><br><span class=\"line\">            marker_color=colors</span><br><span class=\"line\">                        ))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_traces(texttemplate=<span class=\"string\">&#x27;%&#123;text&#125;&#x27;</span>, </span><br><span class=\"line\">                  textposition=<span class=\"string\">&#x27;outside&#x27;</span>,</span><br><span class=\"line\">                  hovertemplate=<span class=\"string\">&#x27;&lt;b&gt;Experience&lt;/b&gt;: %&#123;x&#125;&lt;br&gt;&lt;extra&gt;&lt;/extra&gt;&#x27;</span>+</span><br><span class=\"line\">                                <span class=\"string\">&#x27;&lt;b&gt;Count&lt;/b&gt;: %&#123;y&#125;&#x27;</span>,</span><br><span class=\"line\">                  textfont_size=<span class=\"number\">12</span>)</span><br><span class=\"line\">                  </span><br><span class=\"line\">fig.update_xaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\">fig.update_yaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\">fig.update_layout(showlegend=<span class=\"literal\">False</span>, </span><br><span class=\"line\">                  plot_bgcolor=<span class=\"string\">&#x27;#F7F7F7&#x27;</span>, </span><br><span class=\"line\">                  margin=<span class=\"built_in\">dict</span>(pad=<span class=\"number\">20</span>),</span><br><span class=\"line\">                  paper_bgcolor=<span class=\"string\">&#x27;#F7F7F7&#x27;</span>,</span><br><span class=\"line\">                  height=<span class=\"number\">500</span>,</span><br><span class=\"line\">                  yaxis=&#123;<span class=\"string\">&#x27;showticklabels&#x27;</span>: <span class=\"literal\">False</span>&#125;,</span><br><span class=\"line\">                  yaxis_title=<span class=\"literal\">None</span>,</span><br><span class=\"line\">                  xaxis_title=<span class=\"literal\">None</span>,</span><br><span class=\"line\">                  title_text=<span class=\"string\">&quot;&lt;b&gt;Experience&lt;/b&gt; Distribution&quot;</span>,</span><br><span class=\"line\">                  title_x=<span class=\"number\">0.5</span>,</span><br><span class=\"line\">                  font=<span class=\"built_in\">dict</span>(family=<span class=\"string\">&quot;Hiragino Kaku Gothic Pro, sans-serif&quot;</span>, size=<span class=\"number\">14</span>, color=<span class=\"string\">&#x27;#000000&#x27;</span>),</span><br><span class=\"line\">                  title_font_size=<span class=\"number\">35</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">14</span>),</span><br><span class=\"line\">                                    x=<span class=\"number\">0.98</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.24</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;@miguelfzzz&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">12</span>),</span><br><span class=\"line\">                                    x=-<span class=\"number\">0.03</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.24</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;Source: 2021 Kaggle Machine Learning &amp; Data Science Survey&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\">fig.show()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/0305_3-1/6.PNG\"><br><br><br><br></p>\n","site":{"data":{}},"excerpt":"3-1. 막대그래프(수직)\n라이브러리 임포트 해주기 & 캐글 데이터 불러오기\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objects as go\n\nimport warnings\nwarnings.filterwarnings('ignore') \n\ndf = pd.read_csv('../input/kaggle-survey-2021/kaggle","more":"<br>\n\n<h2 id=\"3-1-막대그래프-수직\"><a href=\"#3-1-막대그래프-수직\" class=\"headerlink\" title=\"3-1. 막대그래프(수직)\"></a><strong>3-1. 막대그래프(수직)</strong></h2><h3 id=\"라이브러리-임포트-해주기-amp-캐글-데이터-불러오기\"><a href=\"#라이브러리-임포트-해주기-amp-캐글-데이터-불러오기\" class=\"headerlink\" title=\"라이브러리 임포트 해주기 &amp; 캐글 데이터 불러오기\"></a><strong>라이브러리 임포트 해주기 &amp; 캐글 데이터 불러오기</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> seaborn <span class=\"keyword\">as</span> sns</span><br><span class=\"line\"><span class=\"keyword\">import</span> plotly.express <span class=\"keyword\">as</span> px</span><br><span class=\"line\"><span class=\"keyword\">import</span> plotly.graph_objects <span class=\"keyword\">as</span> go</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> warnings</span><br><span class=\"line\">warnings.filterwarnings(<span class=\"string\">&#x27;ignore&#x27;</span>) </span><br><span class=\"line\"></span><br><span class=\"line\">df = pd.read_csv(<span class=\"string\">&#x27;../input/kaggle-survey-2021/kaggle_survey_2021_responses.csv&#x27;</span>)</span><br><span class=\"line\">df = df.iloc[<span class=\"number\">1</span>:, :]</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h3 id=\"experience-객체-생성\"><a href=\"#experience-객체-생성\" class=\"headerlink\" title=\"experience 객체 생성\"></a><strong>experience 객체 생성</strong></h3><hr>\n<ul>\n<li><strong>.replace([a],[b])</strong><br>a 이름을 b로 바꾼다 </li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">experience = (</span><br><span class=\"line\">    df[<span class=\"string\">&#x27;Q6&#x27;</span>]</span><br><span class=\"line\">    .value_counts()</span><br><span class=\"line\">    .to_frame()</span><br><span class=\"line\">    .reset_index()</span><br><span class=\"line\">    .rename(columns=&#123;<span class=\"string\">&#x27;index&#x27;</span>:<span class=\"string\">&#x27;Experience&#x27;</span>, <span class=\"string\">&#x27;Q6&#x27;</span>:<span class=\"string\">&#x27;Count&#x27;</span>&#125;)</span><br><span class=\"line\">    .replace([<span class=\"string\">&#x27;I have never written code&#x27;</span>,<span class=\"string\">&#x27;&lt; 1 years&#x27;</span>,</span><br><span class=\"line\">              <span class=\"string\">&#x27;1-3 years&#x27;</span>, <span class=\"string\">&#x27;3-5 years&#x27;</span>, <span class=\"string\">&#x27;5-10 years&#x27;</span>,</span><br><span class=\"line\">              <span class=\"string\">&#x27;10-20 years&#x27;</span>, <span class=\"string\">&#x27;20+ years&#x27;</span>], [<span class=\"string\">&#x27;No experience&#x27;</span>, <span class=\"string\">&#x27;&lt;1 years&#x27;</span>,</span><br><span class=\"line\">                                        <span class=\"string\">&#x27;1-3 years&#x27;</span>, <span class=\"string\">&#x27;3-5 years&#x27;</span>, <span class=\"string\">&#x27;5-10 years&#x27;</span>,</span><br><span class=\"line\">                                        <span class=\"string\">&#x27;10-20 years&#x27;</span>, <span class=\"string\">&#x27;20+ years&#x27;</span>])</span><br><span class=\"line\">          ) </span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(df[<span class=\"string\">&#x27;Q6&#x27;</span>])</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/0305_3-1/1.PNG\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(experience)</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/0305_3-1/2.PNG\"></p>\n<br>\n\n<h3 id=\"pandas-categorical\"><a href=\"#pandas-categorical\" class=\"headerlink\" title=\"pandas categorical\"></a><strong>pandas categorical</strong></h3><p>pandas 에서 자료형으로 사용되는 object와 category</p>\n<ul>\n<li>object<br>문자열을 object라는 자료형으로 나타낸다.</li>\n<li>category<br>category 형식은 가능한 값들의 범위가 고정되어있고, 한정적일 때 매우 사용한다.</li>\n</ul>\n<p>???????카테고리로 바꿔준거??????????????</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">experience[<span class=\"string\">&#x27;Experience&#x27;</span>] = pd.Categorical(</span><br><span class=\"line\">                                        experience[<span class=\"string\">&#x27;Experience&#x27;</span>], </span><br><span class=\"line\">                                        [<span class=\"string\">&#x27;No experience&#x27;</span>, <span class=\"string\">&#x27;&lt;1 years&#x27;</span>,</span><br><span class=\"line\">                                        <span class=\"string\">&#x27;1-3 years&#x27;</span>, <span class=\"string\">&#x27;3-5 years&#x27;</span>, <span class=\"string\">&#x27;5-10 years&#x27;</span>,</span><br><span class=\"line\">                                        <span class=\"string\">&#x27;10-20 years&#x27;</span>, <span class=\"string\">&#x27;20+ years&#x27;</span>]</span><br><span class=\"line\">                                         )</span><br><span class=\"line\"><span class=\"built_in\">print</span>(experience[<span class=\"string\">&#x27;Experience&#x27;</span>])</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/0305_3-1/3.PNG\"></p>\n<br>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">experience[<span class=\"string\">&#x27;percent&#x27;</span>] = ((experience[<span class=\"string\">&#x27;Count&#x27;</span>] / experience[<span class=\"string\">&#x27;Count&#x27;</span>].<span class=\"built_in\">sum</span>())*<span class=\"number\">100</span>).<span class=\"built_in\">round</span>(<span class=\"number\">2</span>).astype(<span class=\"built_in\">str</span>) + <span class=\"string\">&#x27;%&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(experience[<span class=\"string\">&#x27;percent&#x27;</span>])</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/0305_3-1/4.PNG\"></p>\n<br>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">experience = experience.sort_values(<span class=\"string\">&#x27;Experience&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(experience)</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/0305_3-1/5.PNG\"><br><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">colors = [<span class=\"string\">&#x27;#033351&#x27;</span>,] * <span class=\"number\">7</span></span><br><span class=\"line\">colors[<span class=\"number\">1</span>] = <span class=\"string\">&#x27;#5abbf9&#x27;</span></span><br><span class=\"line\">colors[<span class=\"number\">2</span>] = <span class=\"string\">&#x27;#5abbf9&#x27;</span></span><br><span class=\"line\">colors[<span class=\"number\">3</span>] = <span class=\"string\">&#x27;#0779c3&#x27;</span></span><br><span class=\"line\">colors[<span class=\"number\">4</span>] = <span class=\"string\">&#x27;#0779c3&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">fig = go.Figure(go.Bar(</span><br><span class=\"line\">            y=experience[<span class=\"string\">&#x27;Count&#x27;</span>],</span><br><span class=\"line\">            x=experience[<span class=\"string\">&#x27;Experience&#x27;</span>],</span><br><span class=\"line\">            cliponaxis = <span class=\"literal\">False</span>,</span><br><span class=\"line\">            text=experience[<span class=\"string\">&#x27;percent&#x27;</span>],</span><br><span class=\"line\">            marker_color=colors</span><br><span class=\"line\">                        ))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_traces(texttemplate=<span class=\"string\">&#x27;%&#123;text&#125;&#x27;</span>, </span><br><span class=\"line\">                  textposition=<span class=\"string\">&#x27;outside&#x27;</span>,</span><br><span class=\"line\">                  hovertemplate=<span class=\"string\">&#x27;&lt;b&gt;Experience&lt;/b&gt;: %&#123;x&#125;&lt;br&gt;&lt;extra&gt;&lt;/extra&gt;&#x27;</span>+</span><br><span class=\"line\">                                <span class=\"string\">&#x27;&lt;b&gt;Count&lt;/b&gt;: %&#123;y&#125;&#x27;</span>,</span><br><span class=\"line\">                  textfont_size=<span class=\"number\">12</span>)</span><br><span class=\"line\">                  </span><br><span class=\"line\">fig.update_xaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\">fig.update_yaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\">fig.update_layout(showlegend=<span class=\"literal\">False</span>, </span><br><span class=\"line\">                  plot_bgcolor=<span class=\"string\">&#x27;#F7F7F7&#x27;</span>, </span><br><span class=\"line\">                  margin=<span class=\"built_in\">dict</span>(pad=<span class=\"number\">20</span>),</span><br><span class=\"line\">                  paper_bgcolor=<span class=\"string\">&#x27;#F7F7F7&#x27;</span>,</span><br><span class=\"line\">                  height=<span class=\"number\">500</span>,</span><br><span class=\"line\">                  yaxis=&#123;<span class=\"string\">&#x27;showticklabels&#x27;</span>: <span class=\"literal\">False</span>&#125;,</span><br><span class=\"line\">                  yaxis_title=<span class=\"literal\">None</span>,</span><br><span class=\"line\">                  xaxis_title=<span class=\"literal\">None</span>,</span><br><span class=\"line\">                  title_text=<span class=\"string\">&quot;&lt;b&gt;Experience&lt;/b&gt; Distribution&quot;</span>,</span><br><span class=\"line\">                  title_x=<span class=\"number\">0.5</span>,</span><br><span class=\"line\">                  font=<span class=\"built_in\">dict</span>(family=<span class=\"string\">&quot;Hiragino Kaku Gothic Pro, sans-serif&quot;</span>, size=<span class=\"number\">14</span>, color=<span class=\"string\">&#x27;#000000&#x27;</span>),</span><br><span class=\"line\">                  title_font_size=<span class=\"number\">35</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">14</span>),</span><br><span class=\"line\">                                    x=<span class=\"number\">0.98</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.24</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;@miguelfzzz&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">12</span>),</span><br><span class=\"line\">                                    x=-<span class=\"number\">0.03</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.24</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;Source: 2021 Kaggle Machine Learning &amp; Data Science Survey&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/0305_3-1/6.PNG\"></p>\n<br>\n\n<h3 id=\"전체코드\"><a href=\"#전체코드\" class=\"headerlink\" title=\"전체코드\"></a><strong>전체코드</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">experience = (</span><br><span class=\"line\">    df[<span class=\"string\">&#x27;Q6&#x27;</span>]</span><br><span class=\"line\">    .value_counts()</span><br><span class=\"line\">    .to_frame()</span><br><span class=\"line\">    .reset_index()</span><br><span class=\"line\">    .rename(columns=&#123;<span class=\"string\">&#x27;index&#x27;</span>:<span class=\"string\">&#x27;Experience&#x27;</span>, <span class=\"string\">&#x27;Q6&#x27;</span>:<span class=\"string\">&#x27;Count&#x27;</span>&#125;)</span><br><span class=\"line\">    .replace([<span class=\"string\">&#x27;I have never written code&#x27;</span>,<span class=\"string\">&#x27;&lt; 1 years&#x27;</span>,</span><br><span class=\"line\">              <span class=\"string\">&#x27;1-3 years&#x27;</span>, <span class=\"string\">&#x27;3-5 years&#x27;</span>, <span class=\"string\">&#x27;5-10 years&#x27;</span>,</span><br><span class=\"line\">              <span class=\"string\">&#x27;10-20 years&#x27;</span>, <span class=\"string\">&#x27;20+ years&#x27;</span>], [<span class=\"string\">&#x27;No experience&#x27;</span>, <span class=\"string\">&#x27;&lt;1 years&#x27;</span>,</span><br><span class=\"line\">                                        <span class=\"string\">&#x27;1-3 years&#x27;</span>, <span class=\"string\">&#x27;3-5 years&#x27;</span>, <span class=\"string\">&#x27;5-10 years&#x27;</span>,</span><br><span class=\"line\">                                        <span class=\"string\">&#x27;10-20 years&#x27;</span>, <span class=\"string\">&#x27;20+ years&#x27;</span>])</span><br><span class=\"line\">          ) </span><br><span class=\"line\"></span><br><span class=\"line\">experience[<span class=\"string\">&#x27;Experience&#x27;</span>] = pd.Categorical(</span><br><span class=\"line\">                                        experience[<span class=\"string\">&#x27;Experience&#x27;</span>], </span><br><span class=\"line\">                                        [<span class=\"string\">&#x27;No experience&#x27;</span>, <span class=\"string\">&#x27;&lt;1 years&#x27;</span>,</span><br><span class=\"line\">                                        <span class=\"string\">&#x27;1-3 years&#x27;</span>, <span class=\"string\">&#x27;3-5 years&#x27;</span>, <span class=\"string\">&#x27;5-10 years&#x27;</span>,</span><br><span class=\"line\">                                        <span class=\"string\">&#x27;10-20 years&#x27;</span>, <span class=\"string\">&#x27;20+ years&#x27;</span>]</span><br><span class=\"line\">                                         )</span><br><span class=\"line\">                                         </span><br><span class=\"line\"></span><br><span class=\"line\">experience[<span class=\"string\">&#x27;percent&#x27;</span>] = ((experience[<span class=\"string\">&#x27;Count&#x27;</span>] / experience[<span class=\"string\">&#x27;Count&#x27;</span>].<span class=\"built_in\">sum</span>())*<span class=\"number\">100</span>).<span class=\"built_in\">round</span>(<span class=\"number\">2</span>).astype(<span class=\"built_in\">str</span>) + <span class=\"string\">&#x27;%&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">experience = experience.sort_values(<span class=\"string\">&#x27;Experience&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">colors = [<span class=\"string\">&#x27;#033351&#x27;</span>,] * <span class=\"number\">7</span></span><br><span class=\"line\">colors[<span class=\"number\">1</span>] = <span class=\"string\">&#x27;#5abbf9&#x27;</span></span><br><span class=\"line\">colors[<span class=\"number\">2</span>] = <span class=\"string\">&#x27;#5abbf9&#x27;</span></span><br><span class=\"line\">colors[<span class=\"number\">3</span>] = <span class=\"string\">&#x27;#0779c3&#x27;</span></span><br><span class=\"line\">colors[<span class=\"number\">4</span>] = <span class=\"string\">&#x27;#0779c3&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">fig = go.Figure(go.Bar(</span><br><span class=\"line\">            y=experience[<span class=\"string\">&#x27;Count&#x27;</span>],</span><br><span class=\"line\">            x=experience[<span class=\"string\">&#x27;Experience&#x27;</span>],</span><br><span class=\"line\">            cliponaxis = <span class=\"literal\">False</span>,</span><br><span class=\"line\">            text=experience[<span class=\"string\">&#x27;percent&#x27;</span>],</span><br><span class=\"line\">            marker_color=colors</span><br><span class=\"line\">                        ))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_traces(texttemplate=<span class=\"string\">&#x27;%&#123;text&#125;&#x27;</span>, </span><br><span class=\"line\">                  textposition=<span class=\"string\">&#x27;outside&#x27;</span>,</span><br><span class=\"line\">                  hovertemplate=<span class=\"string\">&#x27;&lt;b&gt;Experience&lt;/b&gt;: %&#123;x&#125;&lt;br&gt;&lt;extra&gt;&lt;/extra&gt;&#x27;</span>+</span><br><span class=\"line\">                                <span class=\"string\">&#x27;&lt;b&gt;Count&lt;/b&gt;: %&#123;y&#125;&#x27;</span>,</span><br><span class=\"line\">                  textfont_size=<span class=\"number\">12</span>)</span><br><span class=\"line\">                  </span><br><span class=\"line\">fig.update_xaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\">fig.update_yaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\">fig.update_layout(showlegend=<span class=\"literal\">False</span>, </span><br><span class=\"line\">                  plot_bgcolor=<span class=\"string\">&#x27;#F7F7F7&#x27;</span>, </span><br><span class=\"line\">                  margin=<span class=\"built_in\">dict</span>(pad=<span class=\"number\">20</span>),</span><br><span class=\"line\">                  paper_bgcolor=<span class=\"string\">&#x27;#F7F7F7&#x27;</span>,</span><br><span class=\"line\">                  height=<span class=\"number\">500</span>,</span><br><span class=\"line\">                  yaxis=&#123;<span class=\"string\">&#x27;showticklabels&#x27;</span>: <span class=\"literal\">False</span>&#125;,</span><br><span class=\"line\">                  yaxis_title=<span class=\"literal\">None</span>,</span><br><span class=\"line\">                  xaxis_title=<span class=\"literal\">None</span>,</span><br><span class=\"line\">                  title_text=<span class=\"string\">&quot;&lt;b&gt;Experience&lt;/b&gt; Distribution&quot;</span>,</span><br><span class=\"line\">                  title_x=<span class=\"number\">0.5</span>,</span><br><span class=\"line\">                  font=<span class=\"built_in\">dict</span>(family=<span class=\"string\">&quot;Hiragino Kaku Gothic Pro, sans-serif&quot;</span>, size=<span class=\"number\">14</span>, color=<span class=\"string\">&#x27;#000000&#x27;</span>),</span><br><span class=\"line\">                  title_font_size=<span class=\"number\">35</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">14</span>),</span><br><span class=\"line\">                                    x=<span class=\"number\">0.98</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.24</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;@miguelfzzz&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">12</span>),</span><br><span class=\"line\">                                    x=-<span class=\"number\">0.03</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.24</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;Source: 2021 Kaggle Machine Learning &amp; Data Science Survey&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\">fig.show()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/0305_3-1/6.PNG\"><br><br><br><br></p>\n"},{"title":"막대그래프(Bar, 수직)","date":"2021-11-06T15:00:00.000Z","toc":true,"thumbnail":"/images/0301_1-1/10.PNG","widgets":null,"_content":"\n<br>\n<br>\n\n## **1-1. 막대그래프**\n### **캐글 데이터 불러오기**\n---\n```python\n# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n#\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session\n```\n\n<br>\n\n### **라이브러리 임포트 해주기**\n---\n```python\nimport pandas as pd \nimport numpy as np\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objects as go\n\n#warning 라이브러리를 이용해서 경고 메세지 숨기기\nimport warnings\nwarnings.filterwarnings('ignore')     \n```\n\n<br>\n<br>\n\n### **캐글 데이터 불러오기**\n---\n- read_csv()\n외부 text 파일, csv파일을 불러와서 DataFrame (df)으로 저장\n- .iloc\n행 번호 선택 \n- .loc\nlabel이나 조건표현으로 선택<br>\n- df = df.iloc[1:, :]\n두번째 행부터 마지막행까지 출력, 열은 전체 다 출력\n\n캐글에서 데이터를 가져와서 df(데이터 프레임)에 넣어준다\n<br>\n<br>\n\n```python\ndf = pd.read_csv('../input/kaggle-survey-2021/kaggle_survey_2021_responses.csv')\ndf = df.iloc[1:, :]     \nprint(df)\n```\n\n![](/images/0301_1-1/1.PNG)\n\n<br>\n\n### **Column 값이 Q1인 데이터만 출력**\n---\n```python\nprint(df['Q1'])\n```\n![](/images/0301_1-1/2.PNG)\n\n<br>\n\n### **age**\n---\n- .value_counts()\ndf의 'Q1' 컬럼의 중복된 데이터 값들의 갯수 표시\n- to_frame()\n데이터 프레임으로 변환\n- .rename()\n컬럼명을 바꿀 수 있다.\n- .sort_values(by=['Age'])\n컬럼명 Age 값의 데이터를 정렬하기\nascending=True 오름차순\nascending=False 내림차순\n\n\n```python\nage = (\n    df['Q1']\n    .value_counts()\n    .to_frame()\n    .reset_index()\n    .rename(columns={'index':'Age','Q1':'Count'})\n    .sort_values(by=['Age'],ascending=True)\n)\nage.head()\n```\n\n![](/images/0301_1-1/3.PNG)\n<br>\n\n### **Percent column 추가**\n---\n- .round(2)\n반올림 함수\n괄호 안에 숫자2는 소수점 둘째자리까지 나타냄을 의미 (셋째자리에서 반올림)\n- .astype()\n함수의 데이터 타입을 변경해주는 함수이다.\n\nage dataframe에서 percent라는 이름을 가진 열을 만들어준다.\n그리고 percent 컬럼의 데이터 값은 ((age['Count']/age['Count'].sum())*100) 를 계산한 값에서\n반올림 하고 문자열로 데이터 타입을 바꿔주었다\n\n```python\nage['Percent'] = ((age['Count']/age['Count'].sum())*100).round(2).astype(str) + '%'\nage.head()\n```\n![](/images/0301_1-1/4.PNG)\n\n<br>\n\n### **Column 삭제하는법**\n---\n\nage.drop(columns=['percent'],axis=1)\n위의 코드 두번 실행해서 열 잘못 들어감\ndf 열삭제 코드\n\n<br>\n\n### **Colors 지정**\n---\n왜 11이여야 할까?...ㅜ\n\n```python\ncolors= ['#033351',] * 11\ncolors[0] = '#5abbf9'\ncolors[1] = '#5abbf9'\ncolors[2] = '#5abbf9'\ncolors[3] = '#0779c3'\ncolors[4] = '#0779c3'\n```\n\n<br>\n\n### **객체 선언**\n---\n\n- fig = go.Figure\n객체 선언\ngo를 통해 그래프를 하나하나 설정\n- go.Bar()\n막대 그래프 그리기\ngo는 graph_objects이다 (맨위에 임포트 한것)\n- cliponaxis = False\n텍스트가 짤리는거 보정해주는 코드\n- x = age['Age'],y = age['Count'] \nx축에 컬럼 Age의 데이터 값,  y축에 컬럼 Count의 데이터 값 넣어서 그래프로 표현\n\n\n```python\nfig = go.Figure( go.Bar(\n                x = age['Age'],\n                y = age['Count'],\n                marker_color=colors,\n                cliponaxis = False,\n                text = age['Percent'] ))\n\nfig.show()\n```\n![](/images/0301_1-1/5.PNG)\n\n<br>\n\n### **update_trace**\n---\n- texttemplate\n- \n- textposition\n막대 그래프 밖에 퍼센트 값이 나타나 있다\n- hovertemplate\n마우스 가져다 대면 data 정보를 볼 수 있다\n\n\n```python\nfig.update_traces(texttemplate='%{text}',\n                  textposition='outside',\n                  hovertemplate='<b>Age</b>: %{x}<br>'+\n                                  '<b>Count</b>: %{y}',\n                  textfont_size=12)\nfig.show()\n\n```\n![](/images/0301_1-1/6.PNG)\n\n<br>\n\n### **배경 격자무늬 제거**\n---\n- showgrid=False\n배경에 (update_xaxes)가로 (update_yaxes)세로 격자 무늬가 사라짐 \n\n\n```python\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\nfig.show()\n```\n![](/images/0301_1-1/7.PNG)\n\n<br>\n\n### **update_layout**\n---\n-**update_layout**\n형성된 fig에 레이아웃 업데이트\n<br>\n\n- showlegend=False\n범례 추가하지 않음\n- plot_bgcolor='#F7F7F7'\n그래프 배경화면 색상\n- paper_bgcolor='#F7F7F7'\n그래프 뒤 배경화면 색상\n- yaxis={'showticklabels':False}\ny축에 값을 표기 하지 않음\n- yaxis_title=None\n- xaxis_title=None \nx축 이름, y축 이름 설정하지 않음\n\n\n```python\nfig.update_layout(coloraxis=dict(colorscale='Teal'),\n                 showlegend=False,\n                 plot_bgcolor='#F7F7F7',\n                 margin=dict(pad=20),\n                 paper_bgcolor='#F7F7F7',\n                 height=500,\n                 yaxis={'showticklabels':False},\n                 yaxis_title=None,\n                 xaxis_title=None,\n                 title_text=\"<b>Age</b> Distribution\",\n                 title_x=0.5,\n                 font=dict(family=\"Hiragino Kaku Gothic Pro, sans-serif\",size=17, color='#000000'),\n                 title_font_size=35)\n```\n![](/images/0301_1-1/8.PNG)\n\n<br>\n\n### **annotation**\n---\n\n- annotation이란\n주석을 의미함\n\n\n```python\nfig.add_annotation(dict(font=dict(size=14),\n                                    x=0.98,\n                                    y=-0.25,\n                                    showarrow=False,\n                                    text=\"@miguelfzzz\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"\n                       ))\nfig.add_annotation(dict(font=dict(size=12),\n                       x=0,\n                       y=-0.25,\n                       showarrow=False,\n                       text=\"Source: 2021 Kaggle Machine Learning & Data Science Survey\",\n                       xanchor='left',\n                       xref=\"paper\",\n                       yref=\"paper\"\n                       ))\nfig.show()\n```\n![](/images/0301_1-1/9.PNG)\n\n<br>\n\n### **전체 코드**\n---\n\n응답자의 55% 이상이 18세에서 29세 사이이다.\n\n```python\nage = (\n    df['Q1']\n    .value_counts()\n    .to_frame()\n    .reset_index()\n    .rename(columns={'index':'Age', 'Q1':'Count'})\n    .sort_values(by=['Age'], ascending=True)   \n          )   \n\nage['percent'] = ((age['Count'] / age['Count'].sum())*100).round(2).astype(str) + '%'\n\ncolors = ['#033351',] * 11\ncolors[0] = '#5abbf9'\ncolors[1] = '#5abbf9'\ncolors[2] = '#5abbf9'\ncolors[3] = '#0779c3'\ncolors[4] = '#0779c3'\n\n\nfig = go.Figure(go.Bar(\n            y=age['Count'],\n            x=age['Age'],\n            marker_color=colors,\n            cliponaxis = False,\n            text=age['percent']\n                        ))\n\nfig.update_traces(texttemplate='%{text}', \n                  textposition='outside',\n                  hovertemplate='<b>Age</b>: %{x}<br>'+\n                                '<b>Count</b>: %{y}',\n                  textfont_size=12)\n                  \nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\n \nfig.update_layout(coloraxis=dict(colorscale='Teal'),\n                  showlegend=False, \n                  plot_bgcolor='#F7F7F7', \n                  margin=dict(pad=20),\n                  paper_bgcolor='#F7F7F7',\n                  height=500,\n                  yaxis={'showticklabels': False},\n                  yaxis_title=None,\n                  xaxis_title=None,\n                  title_text=\"<b>Age</b> Distribution\",\n                  title_x=0.5,\n                  font=dict(family=\"Hiragino Kaku Gothic Pro, sans-serif\", size=17, color='#000000'),\n                  title_font_size=35)\n\nfig.add_annotation(dict(font=dict(size=14),\n                                    x=0.98,\n                                    y=-0.25,\n                                    showarrow=False,\n                                    text=\"@miguelfzzz\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\n\nfig.add_annotation(dict(font=dict(size=12),\n                                    x=0,\n                                    y=-0.25,\n                                    showarrow=False,\n                                    text=\"Source: 2021 Kaggle Machine Learning & Data Science Survey\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\n\nfig.show()\n```\n![](/images/0301_1-1/10.PNG)\n\n<br>\n<br>\n<br>\n\n\nRef\n---\nhttps://data101.oopy.io/plolty-tutorial-guide-in-korean","source":"_posts/kaggle1_막대그래프(수직).md","raw":"---\ntitle: 막대그래프(Bar, 수직)\ndate: 2021-11-07\ntags: kaggle, plotly\ntoc: true\nthumbnail: /images/0301_1-1/10.PNG\ncategories: \n- kaggle 필사\nwidgets: null\n---\n\n<br>\n<br>\n\n## **1-1. 막대그래프**\n### **캐글 데이터 불러오기**\n---\n```python\n# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n#\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session\n```\n\n<br>\n\n### **라이브러리 임포트 해주기**\n---\n```python\nimport pandas as pd \nimport numpy as np\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objects as go\n\n#warning 라이브러리를 이용해서 경고 메세지 숨기기\nimport warnings\nwarnings.filterwarnings('ignore')     \n```\n\n<br>\n<br>\n\n### **캐글 데이터 불러오기**\n---\n- read_csv()\n외부 text 파일, csv파일을 불러와서 DataFrame (df)으로 저장\n- .iloc\n행 번호 선택 \n- .loc\nlabel이나 조건표현으로 선택<br>\n- df = df.iloc[1:, :]\n두번째 행부터 마지막행까지 출력, 열은 전체 다 출력\n\n캐글에서 데이터를 가져와서 df(데이터 프레임)에 넣어준다\n<br>\n<br>\n\n```python\ndf = pd.read_csv('../input/kaggle-survey-2021/kaggle_survey_2021_responses.csv')\ndf = df.iloc[1:, :]     \nprint(df)\n```\n\n![](/images/0301_1-1/1.PNG)\n\n<br>\n\n### **Column 값이 Q1인 데이터만 출력**\n---\n```python\nprint(df['Q1'])\n```\n![](/images/0301_1-1/2.PNG)\n\n<br>\n\n### **age**\n---\n- .value_counts()\ndf의 'Q1' 컬럼의 중복된 데이터 값들의 갯수 표시\n- to_frame()\n데이터 프레임으로 변환\n- .rename()\n컬럼명을 바꿀 수 있다.\n- .sort_values(by=['Age'])\n컬럼명 Age 값의 데이터를 정렬하기\nascending=True 오름차순\nascending=False 내림차순\n\n\n```python\nage = (\n    df['Q1']\n    .value_counts()\n    .to_frame()\n    .reset_index()\n    .rename(columns={'index':'Age','Q1':'Count'})\n    .sort_values(by=['Age'],ascending=True)\n)\nage.head()\n```\n\n![](/images/0301_1-1/3.PNG)\n<br>\n\n### **Percent column 추가**\n---\n- .round(2)\n반올림 함수\n괄호 안에 숫자2는 소수점 둘째자리까지 나타냄을 의미 (셋째자리에서 반올림)\n- .astype()\n함수의 데이터 타입을 변경해주는 함수이다.\n\nage dataframe에서 percent라는 이름을 가진 열을 만들어준다.\n그리고 percent 컬럼의 데이터 값은 ((age['Count']/age['Count'].sum())*100) 를 계산한 값에서\n반올림 하고 문자열로 데이터 타입을 바꿔주었다\n\n```python\nage['Percent'] = ((age['Count']/age['Count'].sum())*100).round(2).astype(str) + '%'\nage.head()\n```\n![](/images/0301_1-1/4.PNG)\n\n<br>\n\n### **Column 삭제하는법**\n---\n\nage.drop(columns=['percent'],axis=1)\n위의 코드 두번 실행해서 열 잘못 들어감\ndf 열삭제 코드\n\n<br>\n\n### **Colors 지정**\n---\n왜 11이여야 할까?...ㅜ\n\n```python\ncolors= ['#033351',] * 11\ncolors[0] = '#5abbf9'\ncolors[1] = '#5abbf9'\ncolors[2] = '#5abbf9'\ncolors[3] = '#0779c3'\ncolors[4] = '#0779c3'\n```\n\n<br>\n\n### **객체 선언**\n---\n\n- fig = go.Figure\n객체 선언\ngo를 통해 그래프를 하나하나 설정\n- go.Bar()\n막대 그래프 그리기\ngo는 graph_objects이다 (맨위에 임포트 한것)\n- cliponaxis = False\n텍스트가 짤리는거 보정해주는 코드\n- x = age['Age'],y = age['Count'] \nx축에 컬럼 Age의 데이터 값,  y축에 컬럼 Count의 데이터 값 넣어서 그래프로 표현\n\n\n```python\nfig = go.Figure( go.Bar(\n                x = age['Age'],\n                y = age['Count'],\n                marker_color=colors,\n                cliponaxis = False,\n                text = age['Percent'] ))\n\nfig.show()\n```\n![](/images/0301_1-1/5.PNG)\n\n<br>\n\n### **update_trace**\n---\n- texttemplate\n- \n- textposition\n막대 그래프 밖에 퍼센트 값이 나타나 있다\n- hovertemplate\n마우스 가져다 대면 data 정보를 볼 수 있다\n\n\n```python\nfig.update_traces(texttemplate='%{text}',\n                  textposition='outside',\n                  hovertemplate='<b>Age</b>: %{x}<br>'+\n                                  '<b>Count</b>: %{y}',\n                  textfont_size=12)\nfig.show()\n\n```\n![](/images/0301_1-1/6.PNG)\n\n<br>\n\n### **배경 격자무늬 제거**\n---\n- showgrid=False\n배경에 (update_xaxes)가로 (update_yaxes)세로 격자 무늬가 사라짐 \n\n\n```python\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\nfig.show()\n```\n![](/images/0301_1-1/7.PNG)\n\n<br>\n\n### **update_layout**\n---\n-**update_layout**\n형성된 fig에 레이아웃 업데이트\n<br>\n\n- showlegend=False\n범례 추가하지 않음\n- plot_bgcolor='#F7F7F7'\n그래프 배경화면 색상\n- paper_bgcolor='#F7F7F7'\n그래프 뒤 배경화면 색상\n- yaxis={'showticklabels':False}\ny축에 값을 표기 하지 않음\n- yaxis_title=None\n- xaxis_title=None \nx축 이름, y축 이름 설정하지 않음\n\n\n```python\nfig.update_layout(coloraxis=dict(colorscale='Teal'),\n                 showlegend=False,\n                 plot_bgcolor='#F7F7F7',\n                 margin=dict(pad=20),\n                 paper_bgcolor='#F7F7F7',\n                 height=500,\n                 yaxis={'showticklabels':False},\n                 yaxis_title=None,\n                 xaxis_title=None,\n                 title_text=\"<b>Age</b> Distribution\",\n                 title_x=0.5,\n                 font=dict(family=\"Hiragino Kaku Gothic Pro, sans-serif\",size=17, color='#000000'),\n                 title_font_size=35)\n```\n![](/images/0301_1-1/8.PNG)\n\n<br>\n\n### **annotation**\n---\n\n- annotation이란\n주석을 의미함\n\n\n```python\nfig.add_annotation(dict(font=dict(size=14),\n                                    x=0.98,\n                                    y=-0.25,\n                                    showarrow=False,\n                                    text=\"@miguelfzzz\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"\n                       ))\nfig.add_annotation(dict(font=dict(size=12),\n                       x=0,\n                       y=-0.25,\n                       showarrow=False,\n                       text=\"Source: 2021 Kaggle Machine Learning & Data Science Survey\",\n                       xanchor='left',\n                       xref=\"paper\",\n                       yref=\"paper\"\n                       ))\nfig.show()\n```\n![](/images/0301_1-1/9.PNG)\n\n<br>\n\n### **전체 코드**\n---\n\n응답자의 55% 이상이 18세에서 29세 사이이다.\n\n```python\nage = (\n    df['Q1']\n    .value_counts()\n    .to_frame()\n    .reset_index()\n    .rename(columns={'index':'Age', 'Q1':'Count'})\n    .sort_values(by=['Age'], ascending=True)   \n          )   \n\nage['percent'] = ((age['Count'] / age['Count'].sum())*100).round(2).astype(str) + '%'\n\ncolors = ['#033351',] * 11\ncolors[0] = '#5abbf9'\ncolors[1] = '#5abbf9'\ncolors[2] = '#5abbf9'\ncolors[3] = '#0779c3'\ncolors[4] = '#0779c3'\n\n\nfig = go.Figure(go.Bar(\n            y=age['Count'],\n            x=age['Age'],\n            marker_color=colors,\n            cliponaxis = False,\n            text=age['percent']\n                        ))\n\nfig.update_traces(texttemplate='%{text}', \n                  textposition='outside',\n                  hovertemplate='<b>Age</b>: %{x}<br>'+\n                                '<b>Count</b>: %{y}',\n                  textfont_size=12)\n                  \nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\n \nfig.update_layout(coloraxis=dict(colorscale='Teal'),\n                  showlegend=False, \n                  plot_bgcolor='#F7F7F7', \n                  margin=dict(pad=20),\n                  paper_bgcolor='#F7F7F7',\n                  height=500,\n                  yaxis={'showticklabels': False},\n                  yaxis_title=None,\n                  xaxis_title=None,\n                  title_text=\"<b>Age</b> Distribution\",\n                  title_x=0.5,\n                  font=dict(family=\"Hiragino Kaku Gothic Pro, sans-serif\", size=17, color='#000000'),\n                  title_font_size=35)\n\nfig.add_annotation(dict(font=dict(size=14),\n                                    x=0.98,\n                                    y=-0.25,\n                                    showarrow=False,\n                                    text=\"@miguelfzzz\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\n\nfig.add_annotation(dict(font=dict(size=12),\n                                    x=0,\n                                    y=-0.25,\n                                    showarrow=False,\n                                    text=\"Source: 2021 Kaggle Machine Learning & Data Science Survey\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\n\nfig.show()\n```\n![](/images/0301_1-1/10.PNG)\n\n<br>\n<br>\n<br>\n\n\nRef\n---\nhttps://data101.oopy.io/plolty-tutorial-guide-in-korean","slug":"kaggle1-막대그래프-수직","published":1,"updated":"2022-01-03T12:20:08.048Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cky2hoher00115nrj77w76lsx","content":"<br>\n<br>\n\n<h2 id=\"1-1-막대그래프\"><a href=\"#1-1-막대그래프\" class=\"headerlink\" title=\"1-1. 막대그래프\"></a><strong>1-1. 막대그래프</strong></h2><h3 id=\"캐글-데이터-불러오기\"><a href=\"#캐글-데이터-불러오기\" class=\"headerlink\" title=\"캐글 데이터 불러오기\"></a><strong>캐글 데이터 불러오기</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># This Python 3 environment comes with many helpful analytics libraries installed</span></span><br><span class=\"line\"><span class=\"comment\"># It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python</span></span><br><span class=\"line\"><span class=\"comment\"># For example, here&#x27;s several helpful packages to load</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np <span class=\"comment\"># linear algebra</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd <span class=\"comment\"># data processing, CSV file I/O (e.g. pd.read_csv)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Input data files are available in the read-only &quot;../input/&quot; directory</span></span><br><span class=\"line\"><span class=\"comment\"># For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">for</span> dirname, _, filenames <span class=\"keyword\">in</span> os.walk(<span class=\"string\">&#x27;/kaggle/input&#x27;</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> filename <span class=\"keyword\">in</span> filenames:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(os.path.join(dirname, filename))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using &quot;Save &amp; Run All&quot; </span></span><br><span class=\"line\"><span class=\"comment\"># You can also write temporary files to /kaggle/temp/, but they won&#x27;t be saved outside of the current session</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h3 id=\"라이브러리-임포트-해주기\"><a href=\"#라이브러리-임포트-해주기\" class=\"headerlink\" title=\"라이브러리 임포트 해주기\"></a><strong>라이브러리 임포트 해주기</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd </span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> seaborn <span class=\"keyword\">as</span> sns</span><br><span class=\"line\"><span class=\"keyword\">import</span> plotly.express <span class=\"keyword\">as</span> px</span><br><span class=\"line\"><span class=\"keyword\">import</span> plotly.graph_objects <span class=\"keyword\">as</span> go</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#warning 라이브러리를 이용해서 경고 메세지 숨기기</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> warnings</span><br><span class=\"line\">warnings.filterwarnings(<span class=\"string\">&#x27;ignore&#x27;</span>)     </span><br></pre></td></tr></table></figure>\n\n<br>\n<br>\n\n<h3 id=\"캐글-데이터-불러오기-1\"><a href=\"#캐글-데이터-불러오기-1\" class=\"headerlink\" title=\"캐글 데이터 불러오기\"></a><strong>캐글 데이터 불러오기</strong></h3><hr>\n<ul>\n<li>read_csv()<br>외부 text 파일, csv파일을 불러와서 DataFrame (df)으로 저장</li>\n<li>.iloc<br>행 번호 선택 </li>\n<li>.loc<br>label이나 조건표현으로 선택<br></li>\n<li>df = df.iloc[1:, :]<br>두번째 행부터 마지막행까지 출력, 열은 전체 다 출력</li>\n</ul>\n<p>캐글에서 데이터를 가져와서 df(데이터 프레임)에 넣어준다<br><br><br><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df = pd.read_csv(<span class=\"string\">&#x27;../input/kaggle-survey-2021/kaggle_survey_2021_responses.csv&#x27;</span>)</span><br><span class=\"line\">df = df.iloc[<span class=\"number\">1</span>:, :]     </span><br><span class=\"line\"><span class=\"built_in\">print</span>(df)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/0301_1-1/1.PNG\"></p>\n<br>\n\n<h3 id=\"Column-값이-Q1인-데이터만-출력\"><a href=\"#Column-값이-Q1인-데이터만-출력\" class=\"headerlink\" title=\"Column 값이 Q1인 데이터만 출력\"></a><strong>Column 값이 Q1인 데이터만 출력</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(df[<span class=\"string\">&#x27;Q1&#x27;</span>])</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/0301_1-1/2.PNG\"></p>\n<br>\n\n<h3 id=\"age\"><a href=\"#age\" class=\"headerlink\" title=\"age\"></a><strong>age</strong></h3><hr>\n<ul>\n<li>.value_counts()<br>df의 ‘Q1’ 컬럼의 중복된 데이터 값들의 갯수 표시</li>\n<li>to_frame()<br>데이터 프레임으로 변환</li>\n<li>.rename()<br>컬럼명을 바꿀 수 있다.</li>\n<li>.sort_values(by=[‘Age’])<br>컬럼명 Age 값의 데이터를 정렬하기<br>ascending=True 오름차순<br>ascending=False 내림차순</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">age = (</span><br><span class=\"line\">    df[<span class=\"string\">&#x27;Q1&#x27;</span>]</span><br><span class=\"line\">    .value_counts()</span><br><span class=\"line\">    .to_frame()</span><br><span class=\"line\">    .reset_index()</span><br><span class=\"line\">    .rename(columns=&#123;<span class=\"string\">&#x27;index&#x27;</span>:<span class=\"string\">&#x27;Age&#x27;</span>,<span class=\"string\">&#x27;Q1&#x27;</span>:<span class=\"string\">&#x27;Count&#x27;</span>&#125;)</span><br><span class=\"line\">    .sort_values(by=[<span class=\"string\">&#x27;Age&#x27;</span>],ascending=<span class=\"literal\">True</span>)</span><br><span class=\"line\">)</span><br><span class=\"line\">age.head()</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/0301_1-1/3.PNG\"><br><br></p>\n<h3 id=\"Percent-column-추가\"><a href=\"#Percent-column-추가\" class=\"headerlink\" title=\"Percent column 추가\"></a><strong>Percent column 추가</strong></h3><hr>\n<ul>\n<li>.round(2)<br>반올림 함수<br>괄호 안에 숫자2는 소수점 둘째자리까지 나타냄을 의미 (셋째자리에서 반올림)</li>\n<li>.astype()<br>함수의 데이터 타입을 변경해주는 함수이다.</li>\n</ul>\n<p>age dataframe에서 percent라는 이름을 가진 열을 만들어준다.<br>그리고 percent 컬럼의 데이터 값은 ((age[‘Count’]/age[‘Count’].sum())*100) 를 계산한 값에서<br>반올림 하고 문자열로 데이터 타입을 바꿔주었다</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">age[<span class=\"string\">&#x27;Percent&#x27;</span>] = ((age[<span class=\"string\">&#x27;Count&#x27;</span>]/age[<span class=\"string\">&#x27;Count&#x27;</span>].<span class=\"built_in\">sum</span>())*<span class=\"number\">100</span>).<span class=\"built_in\">round</span>(<span class=\"number\">2</span>).astype(<span class=\"built_in\">str</span>) + <span class=\"string\">&#x27;%&#x27;</span></span><br><span class=\"line\">age.head()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/0301_1-1/4.PNG\"></p>\n<br>\n\n<h3 id=\"Column-삭제하는법\"><a href=\"#Column-삭제하는법\" class=\"headerlink\" title=\"Column 삭제하는법\"></a><strong>Column 삭제하는법</strong></h3><hr>\n<p>age.drop(columns=[‘percent’],axis=1)<br>위의 코드 두번 실행해서 열 잘못 들어감<br>df 열삭제 코드</p>\n<br>\n\n<h3 id=\"Colors-지정\"><a href=\"#Colors-지정\" class=\"headerlink\" title=\"Colors 지정\"></a><strong>Colors 지정</strong></h3><hr>\n<p>왜 11이여야 할까?…ㅜ</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">colors= [<span class=\"string\">&#x27;#033351&#x27;</span>,] * <span class=\"number\">11</span></span><br><span class=\"line\">colors[<span class=\"number\">0</span>] = <span class=\"string\">&#x27;#5abbf9&#x27;</span></span><br><span class=\"line\">colors[<span class=\"number\">1</span>] = <span class=\"string\">&#x27;#5abbf9&#x27;</span></span><br><span class=\"line\">colors[<span class=\"number\">2</span>] = <span class=\"string\">&#x27;#5abbf9&#x27;</span></span><br><span class=\"line\">colors[<span class=\"number\">3</span>] = <span class=\"string\">&#x27;#0779c3&#x27;</span></span><br><span class=\"line\">colors[<span class=\"number\">4</span>] = <span class=\"string\">&#x27;#0779c3&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h3 id=\"객체-선언\"><a href=\"#객체-선언\" class=\"headerlink\" title=\"객체 선언\"></a><strong>객체 선언</strong></h3><hr>\n<ul>\n<li>fig = go.Figure<br>객체 선언<br>go를 통해 그래프를 하나하나 설정</li>\n<li>go.Bar()<br>막대 그래프 그리기<br>go는 graph_objects이다 (맨위에 임포트 한것)</li>\n<li>cliponaxis = False<br>텍스트가 짤리는거 보정해주는 코드</li>\n<li>x = age[‘Age’],y = age[‘Count’]<br>x축에 컬럼 Age의 데이터 값,  y축에 컬럼 Count의 데이터 값 넣어서 그래프로 표현</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fig = go.Figure( go.Bar(</span><br><span class=\"line\">                x = age[<span class=\"string\">&#x27;Age&#x27;</span>],</span><br><span class=\"line\">                y = age[<span class=\"string\">&#x27;Count&#x27;</span>],</span><br><span class=\"line\">                marker_color=colors,</span><br><span class=\"line\">                cliponaxis = <span class=\"literal\">False</span>,</span><br><span class=\"line\">                text = age[<span class=\"string\">&#x27;Percent&#x27;</span>] ))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/0301_1-1/5.PNG\"></p>\n<br>\n\n<h3 id=\"update-trace\"><a href=\"#update-trace\" class=\"headerlink\" title=\"update_trace\"></a><strong>update_trace</strong></h3><hr>\n<ul>\n<li>texttemplate</li>\n<li></li>\n<li>textposition<br>막대 그래프 밖에 퍼센트 값이 나타나 있다</li>\n<li>hovertemplate<br>마우스 가져다 대면 data 정보를 볼 수 있다</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fig.update_traces(texttemplate=<span class=\"string\">&#x27;%&#123;text&#125;&#x27;</span>,</span><br><span class=\"line\">                  textposition=<span class=\"string\">&#x27;outside&#x27;</span>,</span><br><span class=\"line\">                  hovertemplate=<span class=\"string\">&#x27;&lt;b&gt;Age&lt;/b&gt;: %&#123;x&#125;&lt;br&gt;&#x27;</span>+</span><br><span class=\"line\">                                  <span class=\"string\">&#x27;&lt;b&gt;Count&lt;/b&gt;: %&#123;y&#125;&#x27;</span>,</span><br><span class=\"line\">                  textfont_size=<span class=\"number\">12</span>)</span><br><span class=\"line\">fig.show()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/0301_1-1/6.PNG\"></p>\n<br>\n\n<h3 id=\"배경-격자무늬-제거\"><a href=\"#배경-격자무늬-제거\" class=\"headerlink\" title=\"배경 격자무늬 제거\"></a><strong>배경 격자무늬 제거</strong></h3><hr>\n<ul>\n<li>showgrid=False<br>배경에 (update_xaxes)가로 (update_yaxes)세로 격자 무늬가 사라짐 </li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fig.update_xaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\">fig.update_yaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/0301_1-1/7.PNG\"></p>\n<br>\n\n<h3 id=\"update-layout\"><a href=\"#update-layout\" class=\"headerlink\" title=\"update_layout\"></a><strong>update_layout</strong></h3><hr>\n<p>-<strong>update_layout</strong><br>형성된 fig에 레이아웃 업데이트<br><br></p>\n<ul>\n<li>showlegend=False<br>범례 추가하지 않음</li>\n<li>plot_bgcolor=’#F7F7F7’<br>그래프 배경화면 색상</li>\n<li>paper_bgcolor=’#F7F7F7’<br>그래프 뒤 배경화면 색상</li>\n<li>yaxis={‘showticklabels’:False}<br>y축에 값을 표기 하지 않음</li>\n<li>yaxis_title=None</li>\n<li>xaxis_title=None<br>x축 이름, y축 이름 설정하지 않음</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fig.update_layout(coloraxis=<span class=\"built_in\">dict</span>(colorscale=<span class=\"string\">&#x27;Teal&#x27;</span>),</span><br><span class=\"line\">                 showlegend=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                 plot_bgcolor=<span class=\"string\">&#x27;#F7F7F7&#x27;</span>,</span><br><span class=\"line\">                 margin=<span class=\"built_in\">dict</span>(pad=<span class=\"number\">20</span>),</span><br><span class=\"line\">                 paper_bgcolor=<span class=\"string\">&#x27;#F7F7F7&#x27;</span>,</span><br><span class=\"line\">                 height=<span class=\"number\">500</span>,</span><br><span class=\"line\">                 yaxis=&#123;<span class=\"string\">&#x27;showticklabels&#x27;</span>:<span class=\"literal\">False</span>&#125;,</span><br><span class=\"line\">                 yaxis_title=<span class=\"literal\">None</span>,</span><br><span class=\"line\">                 xaxis_title=<span class=\"literal\">None</span>,</span><br><span class=\"line\">                 title_text=<span class=\"string\">&quot;&lt;b&gt;Age&lt;/b&gt; Distribution&quot;</span>,</span><br><span class=\"line\">                 title_x=<span class=\"number\">0.5</span>,</span><br><span class=\"line\">                 font=<span class=\"built_in\">dict</span>(family=<span class=\"string\">&quot;Hiragino Kaku Gothic Pro, sans-serif&quot;</span>,size=<span class=\"number\">17</span>, color=<span class=\"string\">&#x27;#000000&#x27;</span>),</span><br><span class=\"line\">                 title_font_size=<span class=\"number\">35</span>)</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/0301_1-1/8.PNG\"></p>\n<br>\n\n<h3 id=\"annotation\"><a href=\"#annotation\" class=\"headerlink\" title=\"annotation\"></a><strong>annotation</strong></h3><hr>\n<ul>\n<li>annotation이란<br>주석을 의미함</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">14</span>),</span><br><span class=\"line\">                                    x=<span class=\"number\">0.98</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.25</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;@miguelfzzz&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span></span><br><span class=\"line\">                       ))</span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">12</span>),</span><br><span class=\"line\">                       x=<span class=\"number\">0</span>,</span><br><span class=\"line\">                       y=-<span class=\"number\">0.25</span>,</span><br><span class=\"line\">                       showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                       text=<span class=\"string\">&quot;Source: 2021 Kaggle Machine Learning &amp; Data Science Survey&quot;</span>,</span><br><span class=\"line\">                       xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                       xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                       yref=<span class=\"string\">&quot;paper&quot;</span></span><br><span class=\"line\">                       ))</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/0301_1-1/9.PNG\"></p>\n<br>\n\n<h3 id=\"전체-코드\"><a href=\"#전체-코드\" class=\"headerlink\" title=\"전체 코드\"></a><strong>전체 코드</strong></h3><hr>\n<p>응답자의 55% 이상이 18세에서 29세 사이이다.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">age = (</span><br><span class=\"line\">    df[<span class=\"string\">&#x27;Q1&#x27;</span>]</span><br><span class=\"line\">    .value_counts()</span><br><span class=\"line\">    .to_frame()</span><br><span class=\"line\">    .reset_index()</span><br><span class=\"line\">    .rename(columns=&#123;<span class=\"string\">&#x27;index&#x27;</span>:<span class=\"string\">&#x27;Age&#x27;</span>, <span class=\"string\">&#x27;Q1&#x27;</span>:<span class=\"string\">&#x27;Count&#x27;</span>&#125;)</span><br><span class=\"line\">    .sort_values(by=[<span class=\"string\">&#x27;Age&#x27;</span>], ascending=<span class=\"literal\">True</span>)   </span><br><span class=\"line\">          )   </span><br><span class=\"line\"></span><br><span class=\"line\">age[<span class=\"string\">&#x27;percent&#x27;</span>] = ((age[<span class=\"string\">&#x27;Count&#x27;</span>] / age[<span class=\"string\">&#x27;Count&#x27;</span>].<span class=\"built_in\">sum</span>())*<span class=\"number\">100</span>).<span class=\"built_in\">round</span>(<span class=\"number\">2</span>).astype(<span class=\"built_in\">str</span>) + <span class=\"string\">&#x27;%&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">colors = [<span class=\"string\">&#x27;#033351&#x27;</span>,] * <span class=\"number\">11</span></span><br><span class=\"line\">colors[<span class=\"number\">0</span>] = <span class=\"string\">&#x27;#5abbf9&#x27;</span></span><br><span class=\"line\">colors[<span class=\"number\">1</span>] = <span class=\"string\">&#x27;#5abbf9&#x27;</span></span><br><span class=\"line\">colors[<span class=\"number\">2</span>] = <span class=\"string\">&#x27;#5abbf9&#x27;</span></span><br><span class=\"line\">colors[<span class=\"number\">3</span>] = <span class=\"string\">&#x27;#0779c3&#x27;</span></span><br><span class=\"line\">colors[<span class=\"number\">4</span>] = <span class=\"string\">&#x27;#0779c3&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">fig = go.Figure(go.Bar(</span><br><span class=\"line\">            y=age[<span class=\"string\">&#x27;Count&#x27;</span>],</span><br><span class=\"line\">            x=age[<span class=\"string\">&#x27;Age&#x27;</span>],</span><br><span class=\"line\">            marker_color=colors,</span><br><span class=\"line\">            cliponaxis = <span class=\"literal\">False</span>,</span><br><span class=\"line\">            text=age[<span class=\"string\">&#x27;percent&#x27;</span>]</span><br><span class=\"line\">                        ))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_traces(texttemplate=<span class=\"string\">&#x27;%&#123;text&#125;&#x27;</span>, </span><br><span class=\"line\">                  textposition=<span class=\"string\">&#x27;outside&#x27;</span>,</span><br><span class=\"line\">                  hovertemplate=<span class=\"string\">&#x27;&lt;b&gt;Age&lt;/b&gt;: %&#123;x&#125;&lt;br&gt;&#x27;</span>+</span><br><span class=\"line\">                                <span class=\"string\">&#x27;&lt;b&gt;Count&lt;/b&gt;: %&#123;y&#125;&#x27;</span>,</span><br><span class=\"line\">                  textfont_size=<span class=\"number\">12</span>)</span><br><span class=\"line\">                  </span><br><span class=\"line\">fig.update_xaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\">fig.update_yaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\">fig.update_layout(coloraxis=<span class=\"built_in\">dict</span>(colorscale=<span class=\"string\">&#x27;Teal&#x27;</span>),</span><br><span class=\"line\">                  showlegend=<span class=\"literal\">False</span>, </span><br><span class=\"line\">                  plot_bgcolor=<span class=\"string\">&#x27;#F7F7F7&#x27;</span>, </span><br><span class=\"line\">                  margin=<span class=\"built_in\">dict</span>(pad=<span class=\"number\">20</span>),</span><br><span class=\"line\">                  paper_bgcolor=<span class=\"string\">&#x27;#F7F7F7&#x27;</span>,</span><br><span class=\"line\">                  height=<span class=\"number\">500</span>,</span><br><span class=\"line\">                  yaxis=&#123;<span class=\"string\">&#x27;showticklabels&#x27;</span>: <span class=\"literal\">False</span>&#125;,</span><br><span class=\"line\">                  yaxis_title=<span class=\"literal\">None</span>,</span><br><span class=\"line\">                  xaxis_title=<span class=\"literal\">None</span>,</span><br><span class=\"line\">                  title_text=<span class=\"string\">&quot;&lt;b&gt;Age&lt;/b&gt; Distribution&quot;</span>,</span><br><span class=\"line\">                  title_x=<span class=\"number\">0.5</span>,</span><br><span class=\"line\">                  font=<span class=\"built_in\">dict</span>(family=<span class=\"string\">&quot;Hiragino Kaku Gothic Pro, sans-serif&quot;</span>, size=<span class=\"number\">17</span>, color=<span class=\"string\">&#x27;#000000&#x27;</span>),</span><br><span class=\"line\">                  title_font_size=<span class=\"number\">35</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">14</span>),</span><br><span class=\"line\">                                    x=<span class=\"number\">0.98</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.25</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;@miguelfzzz&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">12</span>),</span><br><span class=\"line\">                                    x=<span class=\"number\">0</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.25</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;Source: 2021 Kaggle Machine Learning &amp; Data Science Survey&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/0301_1-1/10.PNG\"></p>\n<br>\n<br>\n<br>\n\n\n<h2 id=\"Ref\"><a href=\"#Ref\" class=\"headerlink\" title=\"Ref\"></a>Ref</h2><p><a href=\"https://data101.oopy.io/plolty-tutorial-guide-in-korean\">https://data101.oopy.io/plolty-tutorial-guide-in-korean</a></p>\n","site":{"data":{}},"excerpt":"1-1. 막대그래프\n캐글 데이터 불러오기\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load","more":"<br>\n<br>\n\n<h2 id=\"1-1-막대그래프\"><a href=\"#1-1-막대그래프\" class=\"headerlink\" title=\"1-1. 막대그래프\"></a><strong>1-1. 막대그래프</strong></h2><h3 id=\"캐글-데이터-불러오기\"><a href=\"#캐글-데이터-불러오기\" class=\"headerlink\" title=\"캐글 데이터 불러오기\"></a><strong>캐글 데이터 불러오기</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># This Python 3 environment comes with many helpful analytics libraries installed</span></span><br><span class=\"line\"><span class=\"comment\"># It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python</span></span><br><span class=\"line\"><span class=\"comment\"># For example, here&#x27;s several helpful packages to load</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np <span class=\"comment\"># linear algebra</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd <span class=\"comment\"># data processing, CSV file I/O (e.g. pd.read_csv)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Input data files are available in the read-only &quot;../input/&quot; directory</span></span><br><span class=\"line\"><span class=\"comment\"># For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">for</span> dirname, _, filenames <span class=\"keyword\">in</span> os.walk(<span class=\"string\">&#x27;/kaggle/input&#x27;</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> filename <span class=\"keyword\">in</span> filenames:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(os.path.join(dirname, filename))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using &quot;Save &amp; Run All&quot; </span></span><br><span class=\"line\"><span class=\"comment\"># You can also write temporary files to /kaggle/temp/, but they won&#x27;t be saved outside of the current session</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h3 id=\"라이브러리-임포트-해주기\"><a href=\"#라이브러리-임포트-해주기\" class=\"headerlink\" title=\"라이브러리 임포트 해주기\"></a><strong>라이브러리 임포트 해주기</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd </span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> seaborn <span class=\"keyword\">as</span> sns</span><br><span class=\"line\"><span class=\"keyword\">import</span> plotly.express <span class=\"keyword\">as</span> px</span><br><span class=\"line\"><span class=\"keyword\">import</span> plotly.graph_objects <span class=\"keyword\">as</span> go</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#warning 라이브러리를 이용해서 경고 메세지 숨기기</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> warnings</span><br><span class=\"line\">warnings.filterwarnings(<span class=\"string\">&#x27;ignore&#x27;</span>)     </span><br></pre></td></tr></table></figure>\n\n<br>\n<br>\n\n<h3 id=\"캐글-데이터-불러오기-1\"><a href=\"#캐글-데이터-불러오기-1\" class=\"headerlink\" title=\"캐글 데이터 불러오기\"></a><strong>캐글 데이터 불러오기</strong></h3><hr>\n<ul>\n<li>read_csv()<br>외부 text 파일, csv파일을 불러와서 DataFrame (df)으로 저장</li>\n<li>.iloc<br>행 번호 선택 </li>\n<li>.loc<br>label이나 조건표현으로 선택<br></li>\n<li>df = df.iloc[1:, :]<br>두번째 행부터 마지막행까지 출력, 열은 전체 다 출력</li>\n</ul>\n<p>캐글에서 데이터를 가져와서 df(데이터 프레임)에 넣어준다<br><br><br><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df = pd.read_csv(<span class=\"string\">&#x27;../input/kaggle-survey-2021/kaggle_survey_2021_responses.csv&#x27;</span>)</span><br><span class=\"line\">df = df.iloc[<span class=\"number\">1</span>:, :]     </span><br><span class=\"line\"><span class=\"built_in\">print</span>(df)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/0301_1-1/1.PNG\"></p>\n<br>\n\n<h3 id=\"Column-값이-Q1인-데이터만-출력\"><a href=\"#Column-값이-Q1인-데이터만-출력\" class=\"headerlink\" title=\"Column 값이 Q1인 데이터만 출력\"></a><strong>Column 값이 Q1인 데이터만 출력</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(df[<span class=\"string\">&#x27;Q1&#x27;</span>])</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/0301_1-1/2.PNG\"></p>\n<br>\n\n<h3 id=\"age\"><a href=\"#age\" class=\"headerlink\" title=\"age\"></a><strong>age</strong></h3><hr>\n<ul>\n<li>.value_counts()<br>df의 ‘Q1’ 컬럼의 중복된 데이터 값들의 갯수 표시</li>\n<li>to_frame()<br>데이터 프레임으로 변환</li>\n<li>.rename()<br>컬럼명을 바꿀 수 있다.</li>\n<li>.sort_values(by=[‘Age’])<br>컬럼명 Age 값의 데이터를 정렬하기<br>ascending=True 오름차순<br>ascending=False 내림차순</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">age = (</span><br><span class=\"line\">    df[<span class=\"string\">&#x27;Q1&#x27;</span>]</span><br><span class=\"line\">    .value_counts()</span><br><span class=\"line\">    .to_frame()</span><br><span class=\"line\">    .reset_index()</span><br><span class=\"line\">    .rename(columns=&#123;<span class=\"string\">&#x27;index&#x27;</span>:<span class=\"string\">&#x27;Age&#x27;</span>,<span class=\"string\">&#x27;Q1&#x27;</span>:<span class=\"string\">&#x27;Count&#x27;</span>&#125;)</span><br><span class=\"line\">    .sort_values(by=[<span class=\"string\">&#x27;Age&#x27;</span>],ascending=<span class=\"literal\">True</span>)</span><br><span class=\"line\">)</span><br><span class=\"line\">age.head()</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/0301_1-1/3.PNG\"><br><br></p>\n<h3 id=\"Percent-column-추가\"><a href=\"#Percent-column-추가\" class=\"headerlink\" title=\"Percent column 추가\"></a><strong>Percent column 추가</strong></h3><hr>\n<ul>\n<li>.round(2)<br>반올림 함수<br>괄호 안에 숫자2는 소수점 둘째자리까지 나타냄을 의미 (셋째자리에서 반올림)</li>\n<li>.astype()<br>함수의 데이터 타입을 변경해주는 함수이다.</li>\n</ul>\n<p>age dataframe에서 percent라는 이름을 가진 열을 만들어준다.<br>그리고 percent 컬럼의 데이터 값은 ((age[‘Count’]/age[‘Count’].sum())*100) 를 계산한 값에서<br>반올림 하고 문자열로 데이터 타입을 바꿔주었다</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">age[<span class=\"string\">&#x27;Percent&#x27;</span>] = ((age[<span class=\"string\">&#x27;Count&#x27;</span>]/age[<span class=\"string\">&#x27;Count&#x27;</span>].<span class=\"built_in\">sum</span>())*<span class=\"number\">100</span>).<span class=\"built_in\">round</span>(<span class=\"number\">2</span>).astype(<span class=\"built_in\">str</span>) + <span class=\"string\">&#x27;%&#x27;</span></span><br><span class=\"line\">age.head()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/0301_1-1/4.PNG\"></p>\n<br>\n\n<h3 id=\"Column-삭제하는법\"><a href=\"#Column-삭제하는법\" class=\"headerlink\" title=\"Column 삭제하는법\"></a><strong>Column 삭제하는법</strong></h3><hr>\n<p>age.drop(columns=[‘percent’],axis=1)<br>위의 코드 두번 실행해서 열 잘못 들어감<br>df 열삭제 코드</p>\n<br>\n\n<h3 id=\"Colors-지정\"><a href=\"#Colors-지정\" class=\"headerlink\" title=\"Colors 지정\"></a><strong>Colors 지정</strong></h3><hr>\n<p>왜 11이여야 할까?…ㅜ</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">colors= [<span class=\"string\">&#x27;#033351&#x27;</span>,] * <span class=\"number\">11</span></span><br><span class=\"line\">colors[<span class=\"number\">0</span>] = <span class=\"string\">&#x27;#5abbf9&#x27;</span></span><br><span class=\"line\">colors[<span class=\"number\">1</span>] = <span class=\"string\">&#x27;#5abbf9&#x27;</span></span><br><span class=\"line\">colors[<span class=\"number\">2</span>] = <span class=\"string\">&#x27;#5abbf9&#x27;</span></span><br><span class=\"line\">colors[<span class=\"number\">3</span>] = <span class=\"string\">&#x27;#0779c3&#x27;</span></span><br><span class=\"line\">colors[<span class=\"number\">4</span>] = <span class=\"string\">&#x27;#0779c3&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h3 id=\"객체-선언\"><a href=\"#객체-선언\" class=\"headerlink\" title=\"객체 선언\"></a><strong>객체 선언</strong></h3><hr>\n<ul>\n<li>fig = go.Figure<br>객체 선언<br>go를 통해 그래프를 하나하나 설정</li>\n<li>go.Bar()<br>막대 그래프 그리기<br>go는 graph_objects이다 (맨위에 임포트 한것)</li>\n<li>cliponaxis = False<br>텍스트가 짤리는거 보정해주는 코드</li>\n<li>x = age[‘Age’],y = age[‘Count’]<br>x축에 컬럼 Age의 데이터 값,  y축에 컬럼 Count의 데이터 값 넣어서 그래프로 표현</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fig = go.Figure( go.Bar(</span><br><span class=\"line\">                x = age[<span class=\"string\">&#x27;Age&#x27;</span>],</span><br><span class=\"line\">                y = age[<span class=\"string\">&#x27;Count&#x27;</span>],</span><br><span class=\"line\">                marker_color=colors,</span><br><span class=\"line\">                cliponaxis = <span class=\"literal\">False</span>,</span><br><span class=\"line\">                text = age[<span class=\"string\">&#x27;Percent&#x27;</span>] ))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/0301_1-1/5.PNG\"></p>\n<br>\n\n<h3 id=\"update-trace\"><a href=\"#update-trace\" class=\"headerlink\" title=\"update_trace\"></a><strong>update_trace</strong></h3><hr>\n<ul>\n<li>texttemplate</li>\n<li></li>\n<li>textposition<br>막대 그래프 밖에 퍼센트 값이 나타나 있다</li>\n<li>hovertemplate<br>마우스 가져다 대면 data 정보를 볼 수 있다</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fig.update_traces(texttemplate=<span class=\"string\">&#x27;%&#123;text&#125;&#x27;</span>,</span><br><span class=\"line\">                  textposition=<span class=\"string\">&#x27;outside&#x27;</span>,</span><br><span class=\"line\">                  hovertemplate=<span class=\"string\">&#x27;&lt;b&gt;Age&lt;/b&gt;: %&#123;x&#125;&lt;br&gt;&#x27;</span>+</span><br><span class=\"line\">                                  <span class=\"string\">&#x27;&lt;b&gt;Count&lt;/b&gt;: %&#123;y&#125;&#x27;</span>,</span><br><span class=\"line\">                  textfont_size=<span class=\"number\">12</span>)</span><br><span class=\"line\">fig.show()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/0301_1-1/6.PNG\"></p>\n<br>\n\n<h3 id=\"배경-격자무늬-제거\"><a href=\"#배경-격자무늬-제거\" class=\"headerlink\" title=\"배경 격자무늬 제거\"></a><strong>배경 격자무늬 제거</strong></h3><hr>\n<ul>\n<li>showgrid=False<br>배경에 (update_xaxes)가로 (update_yaxes)세로 격자 무늬가 사라짐 </li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fig.update_xaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\">fig.update_yaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/0301_1-1/7.PNG\"></p>\n<br>\n\n<h3 id=\"update-layout\"><a href=\"#update-layout\" class=\"headerlink\" title=\"update_layout\"></a><strong>update_layout</strong></h3><hr>\n<p>-<strong>update_layout</strong><br>형성된 fig에 레이아웃 업데이트<br><br></p>\n<ul>\n<li>showlegend=False<br>범례 추가하지 않음</li>\n<li>plot_bgcolor=’#F7F7F7’<br>그래프 배경화면 색상</li>\n<li>paper_bgcolor=’#F7F7F7’<br>그래프 뒤 배경화면 색상</li>\n<li>yaxis={‘showticklabels’:False}<br>y축에 값을 표기 하지 않음</li>\n<li>yaxis_title=None</li>\n<li>xaxis_title=None<br>x축 이름, y축 이름 설정하지 않음</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fig.update_layout(coloraxis=<span class=\"built_in\">dict</span>(colorscale=<span class=\"string\">&#x27;Teal&#x27;</span>),</span><br><span class=\"line\">                 showlegend=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                 plot_bgcolor=<span class=\"string\">&#x27;#F7F7F7&#x27;</span>,</span><br><span class=\"line\">                 margin=<span class=\"built_in\">dict</span>(pad=<span class=\"number\">20</span>),</span><br><span class=\"line\">                 paper_bgcolor=<span class=\"string\">&#x27;#F7F7F7&#x27;</span>,</span><br><span class=\"line\">                 height=<span class=\"number\">500</span>,</span><br><span class=\"line\">                 yaxis=&#123;<span class=\"string\">&#x27;showticklabels&#x27;</span>:<span class=\"literal\">False</span>&#125;,</span><br><span class=\"line\">                 yaxis_title=<span class=\"literal\">None</span>,</span><br><span class=\"line\">                 xaxis_title=<span class=\"literal\">None</span>,</span><br><span class=\"line\">                 title_text=<span class=\"string\">&quot;&lt;b&gt;Age&lt;/b&gt; Distribution&quot;</span>,</span><br><span class=\"line\">                 title_x=<span class=\"number\">0.5</span>,</span><br><span class=\"line\">                 font=<span class=\"built_in\">dict</span>(family=<span class=\"string\">&quot;Hiragino Kaku Gothic Pro, sans-serif&quot;</span>,size=<span class=\"number\">17</span>, color=<span class=\"string\">&#x27;#000000&#x27;</span>),</span><br><span class=\"line\">                 title_font_size=<span class=\"number\">35</span>)</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/0301_1-1/8.PNG\"></p>\n<br>\n\n<h3 id=\"annotation\"><a href=\"#annotation\" class=\"headerlink\" title=\"annotation\"></a><strong>annotation</strong></h3><hr>\n<ul>\n<li>annotation이란<br>주석을 의미함</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">14</span>),</span><br><span class=\"line\">                                    x=<span class=\"number\">0.98</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.25</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;@miguelfzzz&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span></span><br><span class=\"line\">                       ))</span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">12</span>),</span><br><span class=\"line\">                       x=<span class=\"number\">0</span>,</span><br><span class=\"line\">                       y=-<span class=\"number\">0.25</span>,</span><br><span class=\"line\">                       showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                       text=<span class=\"string\">&quot;Source: 2021 Kaggle Machine Learning &amp; Data Science Survey&quot;</span>,</span><br><span class=\"line\">                       xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                       xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                       yref=<span class=\"string\">&quot;paper&quot;</span></span><br><span class=\"line\">                       ))</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/0301_1-1/9.PNG\"></p>\n<br>\n\n<h3 id=\"전체-코드\"><a href=\"#전체-코드\" class=\"headerlink\" title=\"전체 코드\"></a><strong>전체 코드</strong></h3><hr>\n<p>응답자의 55% 이상이 18세에서 29세 사이이다.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">age = (</span><br><span class=\"line\">    df[<span class=\"string\">&#x27;Q1&#x27;</span>]</span><br><span class=\"line\">    .value_counts()</span><br><span class=\"line\">    .to_frame()</span><br><span class=\"line\">    .reset_index()</span><br><span class=\"line\">    .rename(columns=&#123;<span class=\"string\">&#x27;index&#x27;</span>:<span class=\"string\">&#x27;Age&#x27;</span>, <span class=\"string\">&#x27;Q1&#x27;</span>:<span class=\"string\">&#x27;Count&#x27;</span>&#125;)</span><br><span class=\"line\">    .sort_values(by=[<span class=\"string\">&#x27;Age&#x27;</span>], ascending=<span class=\"literal\">True</span>)   </span><br><span class=\"line\">          )   </span><br><span class=\"line\"></span><br><span class=\"line\">age[<span class=\"string\">&#x27;percent&#x27;</span>] = ((age[<span class=\"string\">&#x27;Count&#x27;</span>] / age[<span class=\"string\">&#x27;Count&#x27;</span>].<span class=\"built_in\">sum</span>())*<span class=\"number\">100</span>).<span class=\"built_in\">round</span>(<span class=\"number\">2</span>).astype(<span class=\"built_in\">str</span>) + <span class=\"string\">&#x27;%&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">colors = [<span class=\"string\">&#x27;#033351&#x27;</span>,] * <span class=\"number\">11</span></span><br><span class=\"line\">colors[<span class=\"number\">0</span>] = <span class=\"string\">&#x27;#5abbf9&#x27;</span></span><br><span class=\"line\">colors[<span class=\"number\">1</span>] = <span class=\"string\">&#x27;#5abbf9&#x27;</span></span><br><span class=\"line\">colors[<span class=\"number\">2</span>] = <span class=\"string\">&#x27;#5abbf9&#x27;</span></span><br><span class=\"line\">colors[<span class=\"number\">3</span>] = <span class=\"string\">&#x27;#0779c3&#x27;</span></span><br><span class=\"line\">colors[<span class=\"number\">4</span>] = <span class=\"string\">&#x27;#0779c3&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">fig = go.Figure(go.Bar(</span><br><span class=\"line\">            y=age[<span class=\"string\">&#x27;Count&#x27;</span>],</span><br><span class=\"line\">            x=age[<span class=\"string\">&#x27;Age&#x27;</span>],</span><br><span class=\"line\">            marker_color=colors,</span><br><span class=\"line\">            cliponaxis = <span class=\"literal\">False</span>,</span><br><span class=\"line\">            text=age[<span class=\"string\">&#x27;percent&#x27;</span>]</span><br><span class=\"line\">                        ))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_traces(texttemplate=<span class=\"string\">&#x27;%&#123;text&#125;&#x27;</span>, </span><br><span class=\"line\">                  textposition=<span class=\"string\">&#x27;outside&#x27;</span>,</span><br><span class=\"line\">                  hovertemplate=<span class=\"string\">&#x27;&lt;b&gt;Age&lt;/b&gt;: %&#123;x&#125;&lt;br&gt;&#x27;</span>+</span><br><span class=\"line\">                                <span class=\"string\">&#x27;&lt;b&gt;Count&lt;/b&gt;: %&#123;y&#125;&#x27;</span>,</span><br><span class=\"line\">                  textfont_size=<span class=\"number\">12</span>)</span><br><span class=\"line\">                  </span><br><span class=\"line\">fig.update_xaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\">fig.update_yaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\">fig.update_layout(coloraxis=<span class=\"built_in\">dict</span>(colorscale=<span class=\"string\">&#x27;Teal&#x27;</span>),</span><br><span class=\"line\">                  showlegend=<span class=\"literal\">False</span>, </span><br><span class=\"line\">                  plot_bgcolor=<span class=\"string\">&#x27;#F7F7F7&#x27;</span>, </span><br><span class=\"line\">                  margin=<span class=\"built_in\">dict</span>(pad=<span class=\"number\">20</span>),</span><br><span class=\"line\">                  paper_bgcolor=<span class=\"string\">&#x27;#F7F7F7&#x27;</span>,</span><br><span class=\"line\">                  height=<span class=\"number\">500</span>,</span><br><span class=\"line\">                  yaxis=&#123;<span class=\"string\">&#x27;showticklabels&#x27;</span>: <span class=\"literal\">False</span>&#125;,</span><br><span class=\"line\">                  yaxis_title=<span class=\"literal\">None</span>,</span><br><span class=\"line\">                  xaxis_title=<span class=\"literal\">None</span>,</span><br><span class=\"line\">                  title_text=<span class=\"string\">&quot;&lt;b&gt;Age&lt;/b&gt; Distribution&quot;</span>,</span><br><span class=\"line\">                  title_x=<span class=\"number\">0.5</span>,</span><br><span class=\"line\">                  font=<span class=\"built_in\">dict</span>(family=<span class=\"string\">&quot;Hiragino Kaku Gothic Pro, sans-serif&quot;</span>, size=<span class=\"number\">17</span>, color=<span class=\"string\">&#x27;#000000&#x27;</span>),</span><br><span class=\"line\">                  title_font_size=<span class=\"number\">35</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">14</span>),</span><br><span class=\"line\">                                    x=<span class=\"number\">0.98</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.25</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;@miguelfzzz&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">12</span>),</span><br><span class=\"line\">                                    x=<span class=\"number\">0</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.25</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;Source: 2021 Kaggle Machine Learning &amp; Data Science Survey&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/0301_1-1/10.PNG\"></p>\n<br>\n<br>\n<br>\n\n\n<h2 id=\"Ref\"><a href=\"#Ref\" class=\"headerlink\" title=\"Ref\"></a>Ref</h2><p><a href=\"https://data101.oopy.io/plolty-tutorial-guide-in-korean\">https://data101.oopy.io/plolty-tutorial-guide-in-korean</a></p>\n"},{"title":"Newbies as a Data Scientist in East Asia","date":"2021-11-27T15:00:00.000Z","toc":true,"_content":"\n드디어 캐글 대회 작품을 제출했다.\n파이썬을 거의 하나도 배우지 않고 다른 캐글 노트북을 필사 하면서부터 시작해서\n최종 완료까지 마쳤다.\n\n파이썬의 기초가 하나도 없어서 너무 힘들었다\n그래도 다 해놓으니까 뿌듯하네\n여기서 보완하고 싶은 점은 for문을 이용해서 코드를 더 간략히 짰으면 하는 아쉬움이 있다.\n\n이제부터는 파이썬의 기본 문법에 대해서 공부를 해야겠다는 생각이 들고\n공부의 방향성이 좀 보인다\n수고했다! 내자신!\n그리고 같이 캐글 준비한 윤화님한테도 감사를..!\n[kaggle주소](https://www.kaggle.com/yoonhwayam/newbies-as-a-data-scientist-in-east-asia)\n\n\n## Newbie as a data scientist in East Asia!\n\nHello, Kaggers! Nice to meet you! \n\nWe are a team in East Asia that wants to be **data scientists** \n\nAs newbies, we want to know what and/or how Kaggler is!\n\nso, let's have a time to learn about Kaggle as a senior with us from now.\n\nIf you want to support us*(or feel qute)*, I ask for a comment! (PLZ) ^0^\n\nAnd !! Since we are **not native English speakers**, please ask questions if there is a context that you don't understand because it's not smooth.\n\nI'll do my best to answer.\n\n\n# 1 Introduction\n1. what is the Kaggle\na subsidiary of **Google LLC**, is an online **community of data scientists and machine learning practitioners**.\n\nIf we use kaggle, we can take the following advantages.\n\n    1) to find and publish data sets\n    2) to explore and build models in a web-based data-science environment\n    3) to work with other data scientists and machine learning engineers\n    4) to enter competitions to solve data science challenges\n    \nso, As data scientist beginners, we try to participate in the Kaggle competition.\n\n---\n\n2. **21 Kaggle** Machine Learning and Data Science Survey\n- The most comprehensive dataset available for ML and data science status\n\nThis is the theme of the competition we will participate in this time.\n\nTo become a data scientist, we compared what kind of job Kagglers has, how much experience he has, and how much money he earns by dividing into the world and East Asia.\n\nIn addition, there are detailed comparisons in East Asia, and ultimately, we will to find out what data the Kaggle competition data shows.\n\nThe 2021 survey, like 2017, 2018, 2019, and 2020, launched an industry-wide survey that comprehensively presents the current status of data science and machine learning.\n\nThe survey was conducted from 09/01/2021 to 10/04/2021, and after cleaning the data, Kaggle received 25,973 responses!\n\nThis year, Kaggle will award $30,000 in prize money to winner in this competition.\n\nwe want to receive $30,000 for winning the competition, but we just hope it will help us become a *data scientist* because it is difficult for a rookie.\n\n\n\nRef.\n\n\\[1\\] [Kgg_competitions](https://www.kaggle.com/docs/competitions)\n\n\\[2\\] [Kgg_definition](https://en.wikipedia.org/wiki/Kaggle)\n\n\\[3\\] [kaggle-survey-2021](https://www.kaggle.com/c/kaggle-survey-2021)\n\n# 1.2 Contents\n---\n\n>     Introduction\n>     Contents\n>     Summary\n>     Data Import and Preprocessing\n>     Plots and Description\n>     Kaggle's transformation. (World/East_Asia)\n>         1 user transformation\n>         2 Gender transformation\n>         3 Job transformation\n>         4 Age  transformation\n>         5 Degree transformation\n>         6 Experience transformation\n>         7 Salary transformation\n>         8 Language transformatio\n>    Position of Data Scientist in East Asia\n>         1 Salary\n>         2 Salary-Experience\n>         3 Degree\n>         4 Salary-Degree\n>         5 Language\n>     Discussion\n>     Close\n\n# 1.3 Summary\n---\n\n\n<h3> used data </h3>\n\nWe used all the data for five years. (2017~2021)\n\n<h3>  used Language and Library </h3>\n\n   + Numpy\n   + Metplotlib\n   + seaborn\n   + Plotly\n       - plotly.express : An interface where you can draw a graph easily and quickly.\n       - plotly.graph_objects : You can customize it in the way you want because you can do more detailed work than express.\n       - plotly.figure_factory : Used before express existed and remains in the module for compatibility with previous versions\n       - plotly.subplots : A module that displays multiple graphs in one figure.\n       - plotly.offline : Save locally and create HTML that opens in a web browser and make it standalone\n\n<h3> Grouping data sections </h3>\n\n   - East Asia and World\n        - East Asia : ['China','Taiwan', 'South Korea', 'Japan']\n        - World : all data\n   - Gender\n        - [Male, Female, Others]\n   - Job   <br>\n    **Data_Analyst** =['Data Analyst','Data Miner,Information technology','Data Miner', 'Predictive Modeler','Information technology, networking, or system administration', \n     'A business discipline (accounting, economics, finance, etc.)', 'Business Analyst', Humanities', 'Statistician', 'Mathematics or statistics', \n     'Medical or life sciences (biology, chemistry, medicine, etc.)', Physics or astronomy', 'Social sciences (anthropology, psychology, sociology, etc.)', \n     'Environmental science or geology', 'Humanities (history, literature, philosophy, etc.)'] <br>\n    **Data_Scientist** =['Data Scientist',  'Research Scientist', 'Researcher','Machine Learning Engineer', 'Scientist/Researcher'] <br>\n    **Developer**=['Developer Relations/Advocacy','Data Engineer','Engineer','Engineering (non-computer focused)',\n    'Programmer','Software Engineer', 'Computer Scientist','Computer science (software engineering, etc.)',  'Fine arts or performing arts','Product Manager', 'Software Developer/Software Engineer', \n    'Product/Project Manager','Program/Project Manager','DBA/Database Engineer']\n    **Not_Employed** = ['Currently not employed', 'Not employed', 'Student'] <br>\n    **Others** = ['I never declared a major', 'Other'] <br> <br>\n   - Age \n   [18-21, 20s, 30s, 40s, 50s, 60s<] <br>\n   - Degree  \n   ['college', 'Bachelor’s degree','Master’s degree', 'Doctoral degree~', 'etc'] <br>\n   - Experience \n   [<1, 1-3, 3-5, 5-10, 10+] <br>\n   - Salary \n   [<999, 1,000-20,000, 20,000-59,999, 60,000-99,999, 100,000-199,999, 200,000~] <br>\n   \n\n\n\n# 2. data Import and pre-treatments\n---\n\n\n```python\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pylab as plt\n\nimport plotly.io as pio\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.figure_factory as ff\nfrom plotly.subplots import make_subplots\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\npio.templates.default = \"none\"\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n```\n\n\n```python\ndf17= pd.read_csv(\"/kaggle/input/kaggle-survey-2017/multipleChoiceResponses.csv\", encoding=\"ISO-8859-1\")\ndf18= pd.read_csv(\"/kaggle/input/kaggle-survey-2018/multipleChoiceResponses.csv\", )\ndf19= pd.read_csv(\"/kaggle/input/kaggle-survey-2019/multiple_choice_responses.csv\", )\ndf20= pd.read_csv(\"/kaggle/input/kaggle-survey-2020/kaggle_survey_2020_responses.csv\", )\ndf21= pd.read_csv(\"/kaggle/input/kaggle-survey-2021/kaggle_survey_2021_responses.csv\", )\n```\n\n# 3. plots and description\n---\n\n\n```python\n\n#질문 제거하기, replace\ndf17= df17.iloc[1:, :].replace(\"People 's Republic of China\",'China')\ndf18= df18.iloc[1:, :].replace('Republic of Korea','South Korea')\ndf19= df19.iloc[1:, :].replace('Republic of Korea','South Korea')\ndf20= df20.iloc[1:, :].replace('Republic of Korea','South Korea')\ndf21= df21.iloc[1:, :]\n\n## East Asia에는 대한민국, 일본, 중국, 타이완, 몽골, 북조선 총 6개의 국가가 속해 있다. \n## 이유는 알 수 없지만, 18년도엔 타이완이 없다. \nEastAsia17 = ['China',\"People 's Republic of China\", 'Taiwan', 'South Korea', 'Japan']\nEastAsia18= ['China', 'South Korea', 'Japan', 'Republic of Korea'] \nEastAsia19 = ['China','Taiwan', 'South Korea', 'Japan', 'Republic of Korea']\nEastAsia20 = ['China','Taiwan', 'South Korea','Republic of Korea', 'Japan']\nEastAsia21 = ['China','Taiwan', 'South Korea', 'Japan']\nEastAsia = ['Republic of Korea','China','Taiwan', 'South Korea', 'Japan', \"People 's Republic of China\" ]\n\ndf21_Ea = df21[df21['Q3'].isin(EastAsia)]\ndf21_Wo = df21[~df21['Q3'].isin(EastAsia)]\ndf21['region']=[\"EastAsia\" if x in EastAsia else \"World\" for x in df21['Q3']]\n\ndf20_Ea = df20[df20['Q3'].isin(EastAsia)]\ndf20_Wo = df20[~df20['Q3'].isin(EastAsia)]\ndf20['region']=[\"EastAsia\" if x in EastAsia else \"World\" for x in df20['Q3']]\n\ndf19_Ea = df19[df19['Q3'].isin(EastAsia)]\ndf19_Wo = df19[~df19['Q3'].isin(EastAsia)]\ndf19['region']=[\"EastAsia\" if x in EastAsia else \"World\" for x in df19['Q3']]\n\ndf18_Ea = df18[df18['Q3'].isin(EastAsia)]\ndf18_Wo = df18[~df18['Q3'].isin(EastAsia)]\ndf18['region']=[\"EastAsia\" if x in EastAsia else \"World\" for x in df18['Q3']]\n\ndf17_Ea = df17[df17['Country'].isin(EastAsia)]\ndf17_Wo = df17[~df17['Country'].isin(EastAsia)]\ndf17['region']=[\"EastAsia\" if x in EastAsia else \"World\" for x in df17['Country']]\n\ndf21['year'] = '2021'\ndf20['year'] = '2020'\ndf19['year'] = '2019'\ndf18['year'] = '2018'\ndf17['year'] = '2017'\n\nyears = ['2017', '2018', '2019', '2020', '2021']\n\ndf21_Ea = df21[df21['Q3'].isin(EastAsia21)]\nEa21= (\n    df21_Ea['Q3'].value_counts().to_frame()\n    .reset_index().rename(columns={'index':'Country', 'Q3':'21'}))\n\ndf20_Ea=df20[df20['Q3'].isin(EastAsia)]\nEa20= (\n    df20_Ea['Q3'].replace('Republic of Korea','South Korea')\n    .value_counts().to_frame().reset_index()\n    .rename(columns={'index':'Country', 'Q3':'20'}))\n\ndf19_Ea=df19[df19['Q3'].isin(EastAsia)]\nEa19= (df19_Ea['Q3'].replace('Republic of Korea','South Korea')\n       .value_counts().to_frame().reset_index()\n       .rename(columns={'index':'Country', 'Q3':'19'}))\n\ndf18_Ea=df18[df18['Q3'].isin(EastAsia)]\nEa18= (df18_Ea['Q3'].replace('Republic of Korea','South Korea')\n       .value_counts().to_frame().reset_index()\n       .rename(columns={'index':'Country', 'Q3':'18'}))\nEa18.value_counts()\n#df18 열에 taiwan = 0을 추가 해야 합니다. \n\ndf17_Ea = df17[df17['Country'].isin(EastAsia)]\nEa17= (df17_Ea['Country'].replace(\"People 's Republic of China\",'China')\n       .value_counts().to_frame().reset_index()\n       .rename(columns={'index':'Country', 'Country':'17'}))\n\n#data를 합쳐서 하나의 dataframe으로 만들어 줌.\ndf5years = pd.merge(Ea17, Ea18, on='Country', how='outer')\ndf5year =pd.merge(Ea19,Ea20, on='Country', how='outer')\ndf5year=pd.merge(df5year, Ea21, on='Country', how='outer')\n\ndf5years = pd.merge(df5years, df5year, on='Country', how='outer')\n\nEa21 = len(df21_Ea)\nWo21 = len(df21) - len(df21_Ea)\n\nEa20 = len(df20_Ea)\nWo20 = len(df20) - len(df20_Ea)\n\nEa19 = len(df19_Ea)\nWo19 = len(df19) - len(df19_Ea)\n\nEa18 = len(df18_Ea)\nWo18 = len(df18) -  len(df18_Ea)\n\nEa17 = len(df17_Ea)\nWo17 = len(df17) - len(df17_Ea)\n\nyears = ['2017','2018','2019','2020', '2021']\n\ndef percent (a, b):\n    result =a/(a+b)*100\n    result = np.round(result, 2)\n    return result\n\ndef percentR (b, a):\n    result =a/(a+b)*100\n    result = np.round(result, 2)\n    return result\n\npercent = [percent(Ea17, Wo17), percent(Ea18, Wo18), percent(Ea19, Wo19), \n                                                 percent(Ea20, Wo20), percent(Ea21, Wo21)]\n```\n\n# 3.1 Kaggle's transformation (World/East Asia)\n---\n# 3.1.1 user transformation\n\n\n<h2> Number of respondents </h2>\n    \n(bar, scatter plot : number of respondents to World and East Asia,\nMap plot : number of respondents to East Asia)\n    \n**World and East Asia: The same trend.**\n    \nEast Asia: 15% of the total continent and 20.3% of the population (16/78.7: Ea/Wo)\n    \n2018 Issue: Significant increase in respondents->Hypothesis: Due to the rapid increase in China.\n    \n2018 Outliers Considering: 2022 Kaggle survey Respondents: Increased in both World and East Asia\n    \nI wish our team the honor of becoming a respondent to the Kaggle survey in 2022....\n\n![](/images/kaggle_final/newplot.png)\n\n![](/images/kaggle_final/newplot1.png)\n\n```python\nfig = go.Figure()\ny=[len(df17_Ea),len(df18_Ea), len(df19_Ea),len(df20_Ea),len(df21_Ea)]\n\nfig.add_trace(go.Bar(x=years, y=y,\n                base=0,\n                marker_color='#F2D64B',\n                yaxis = \"y1\",\n                name='East Asia',\n                text= percent,\n                texttemplate='%{text}  %', \n                textposition='outside',\n                hovertemplate='<b>KaggleUser</b>: %{x}<br>'+ '<b>Count</b>: %{y}'))\n\nfig.add_trace(go.Scatter(name = \"World\",\n           x=years, \n           y=[len(df17), len(df18), len(df19), len(df20), len(df21)],\n           marker_color='#979DA6',\n           mode = 'lines+markers', # please check option here\n           yaxis = \"y2\"))\n\nfig.update_traces(hovertemplate='<b>Count</b>: %{y}<br><extra></extra>'+\n                                '<b>Year</b>: %{x}<br>')\n\nfig.update_layout(yaxis  = dict(title = \"Kaggle User in East Asia\",showgrid = False, range=[0, len(df21_Ea)*1.2]),\n                  yaxis2 = dict(title = \"Kaggle User in World\", overlaying = \"y1\", side = \"right\", \n                  showgrid = False, \n                  zeroline = False, range=[0, len(df21)*1.2]))\n\nfig.update_layout(title='<b>Kaggle Users</b>',title_font_size=20,\n                  margin = dict(t=200, l=100, r=50, b=200),\n                  height=700, width=700)\n\nfig.update_layout(legend=dict(\n    orientation=\"h\",\n    yanchor=\"bottom\",\n    y=1.1,\n    xanchor=\"right\",\n    x=1))\nfig.add_annotation(dict(font=dict(size=14),\n                                    x=0.9,\n                                    y=-0.25,\n                                    showarrow=False,\n                                    text=\"@green_yhjw\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\nfig.show()\n\n\ndef world_map(locations,counts,title):\n    data = [ dict(\n            type = 'choropleth',\n            locations = locations,\n            z = counts,\n            colorscale = 'Reds',\n            locationmode = 'country names',\n            autocolorscale = False,\n            reversescale = False,\n            marker = dict(\n                line = dict(color = '#F7F7F7', width = 1.5)),\n                colorbar = dict(autotick = True, legth = 3, len=0.75, title = 'respodents',\n                               max = 1000, min = 0))]\n    layout = dict(\n        title=title,\n        titlefont={'size': 28},\n        width=700, \n        height=600,\n        paper_bgcolor='#FFFFFF', \n        margin=dict(l=50, r=50, t=100, b=100),\n        geo = dict(\n            showframe = True,\n            showcoastlines = True,\n            fitbounds=\"locations\"))\n   \n    fig = dict(data=data, layout=layout)\n    iplot(fig, validate=False, filename='world-map')\n\nz = df21_Ea['Q3'].value_counts()\n \nworld_map(locations=z.index, counts=z.values, title= '<b>EastAsia Countries<b>')\n```\n\n<h2>18’ : </h2>\n\nUser change between United States and India.\n\nChina's markedly increase in 2018\n\n+ There is no Taiwan, but only China has increased. : East Asian political situation Issue can be suspected.\n\n![](/images/kaggle_final/newplot2.png)\n\n```python\nA18 = (\n    df18['Q3']\n    .replace({'Republic of Korea':'South Korea',\n             'I do not wish to disclose my location' : 'Other'})\n    .value_counts()\n    .to_frame()\n    .reset_index()\n    .rename(columns={'index':'type', 'Q3':'2018'})\n    .groupby('type')\n    .sum()\n    .reset_index()\n)\n\nA19 = (\n    df19['Q3']\n    .replace('Republic of Korea','South Korea')\n    .value_counts()\n    .to_frame()\n    .reset_index()\n    .rename(columns={'index':'type', 'Q3':'2019'})\n    .groupby('type')\n    .sum()\n    .reset_index()\n)\n\nA17 = (\n    df17['Country']\n    .replace({'United States': 'United States of America',\n              'Hong Kong': 'Hong Kong (S.A.R.)', \n              'United Kingdom':'United Kingdom of Great Britain and Northern Ireland',\n             })\n    .replace(\"People 's Republic of China\",'China')\n    .value_counts()\n    .to_frame()\n    .reset_index()\n    .rename(columns={'index':'type', 'Country':'2017'})\n    .groupby('type')\n    .sum()\n    .reset_index()\n)\n\nA18A19=pd.merge(A18,A19, how='outer',on='type').fillna(0)\nA18A17=pd.merge(A18,A17, how='outer',on='type').fillna(0)\nA18A19['minus']= A18A19['2018']-A18A19['2019']\nA18A17['minus']= A18A17['2018']-A18A17['2017']\n\nA18A17=A18A17.sort_values(by=\"minus\", ascending=False)\nA18A19=A18A19.sort_values(by=\"minus\", ascending=False)\n\n\nfig = go.Figure(data=[  \n        go.Bar(x =A18A19['type'],\n        y = A18A19['minus'],\n        marker_color='#979DA6',\n        name = '2018-2019', base=0),\n        go.Bar(x =A18A17['type'],\n        y = A18A17['minus'],\n               marker_color='#F2D64B',\n        name = '2018-2017', base=0)\n        ])\n\nfig.update_layout(title='<b>        Predicting outliers (2018)</b>',title_font_size=20,\n                  margin = dict(t=200, l=100, r=10, b=200),\n                  height=700, width=700,\n                  xaxis_title=None,\n                  yaxis_title=None)\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\n\nfig.update_layout(legend=dict(\n    orientation=\"h\",\n    yanchor=\"bottom\",\n    y=1.1,\n    xanchor=\"right\",\n    x=1))\nfig.add_annotation(dict(font=dict(size=14),\n                                    x=0.8,\n                                    y=-0.5,\n                                    showarrow=False,\n                                    text=\"@green_yhjw\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\nfig.show()\n```\n\n<h2>Total population: </h2>\n\n1.4 billion (85%) in China, 130 million in Japan, 0.5 billion in Korea, and 0.2 billion in Taiwan.\n\n+ China: The number of respondents is smaller than the population.\n+ Japan: Starting in 2019, overtaking China\n+ Taiwan : 2018 data 0 =? Diplomatic issues? The growth trend is weak.\n+ Korea : Respondents at a similar level to Japan's population.\n+ East Asia: The number of respondents will increase further.\n\n![](/images/kaggle_final/newplot3.png)\n\n![](/images/kaggle_final/newplot4.png)\n\n```python\n#data preprocessing\ntotal17 = ( \n    df17['region']\n    .value_counts()\n    .to_frame()\n    .reset_index()\n    .rename(columns={'index':'type', 'region':'respodents'})\n    .groupby('type')\n    .sum()\n    .reset_index()\n)\ntotal18 = (\n    df18['region']\n    .value_counts()\n    .to_frame()\n    .reset_index()\n    .rename(columns={'index':'type', 'region':'respodents'})\n    .groupby('type')\n    .sum()\n    .reset_index()\n)\ntotal19 = (\n    df19['region']\n    .value_counts()\n    .to_frame()\n    .reset_index()\n    .rename(columns={'index':'type', 'region':'respodents'})\n    .groupby('type')\n    .sum()\n    .reset_index()\n)\ntotal20 = (\n    df20['region']\n    .value_counts()\n    .to_frame()\n    .reset_index()\n    .rename(columns={'index':'type', 'region':'respodents'})\n    .groupby('type')\n    .sum()\n    .reset_index()\n)\ntotal21 = (\n    df21['region']\n    .value_counts()\n    .to_frame()\n    .reset_index()\n    .rename(columns={'index':'type', 'region':'respodents'})\n    .groupby('type')\n    .sum()\n    .reset_index()\n)\n\n#graph\ncolors = ['#F2D64B','#979DA6']\n\nfig = make_subplots(rows=1, cols=5, specs=[[{'type':'domain'}, {'type':'domain'}, {'type':'domain'}, {'type':'domain'}, {'type':'domain'}]],\n                   subplot_titles=(\"2017\", \"2018\", \"2019\", \"2020\", \"2021\"))\nfig.add_trace(go.Pie(marker=dict(colors=colors),labels=total21['type'], values=total21['respodents'], name=\"2021\", scalegroup='one'), 1, 5)\nfig.add_trace(go.Pie(marker=dict(colors=colors),labels=total20['type'], values=total20['respodents'], name=\"2020\", scalegroup='one'), 1, 4)\nfig.add_trace(go.Pie(marker=dict(colors=colors),labels=total19['type'], values=total19['respodents'], name=\"2019\", scalegroup='one'), 1, 3)\nfig.add_trace(go.Pie(marker=dict(colors=colors),labels=total18['type'], values=total18['respodents'], name=\"2018\", scalegroup='one'), 1, 2)\nfig.add_trace(go.Pie(marker=dict(colors=colors),labels=total17['type'], values=total17['respodents'], name=\"2017\", scalegroup='one'), 1, 1)\n\nfig.update_traces(hole=.0, hoverinfo=\"label+percent+name\", textposition='inside', textinfo='percent+label',\n                  textfont_size=12)\n\nfig.update_layout(title='<b>World vs EastAsia</b>',title_font_size=23,\n                  margin = dict(t=300, l=0, r=0, b=200),\n                  height=700, width=700)\n\nfig.update_layout(legend=dict(\n    orientation=\"h\",\n    yanchor=\"bottom\",\n    y=1.3,\n    xanchor=\"right\",\n    x=1))\nfig.add_annotation(dict(font=dict(size=14),\n                                    x=0.8,\n                                    y=-0.25,\n                                    showarrow=False,\n                                    text=\"@green_yhjw\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\nfig.show()\n```\n\n\n```python\nfig = go.Figure(data=[\n    go.Bar(name='2017', x=df5years['Country'], y=df5years['17'], marker_color='#F2798F',text=df5years['17'].tolist(), textposition='outside'),\n    go.Bar(name='2018', x=df5years['Country'], y=df5years['18'], marker_color='#88BFBA',text=df5years['18'].fillna(0).astype(int).tolist(), textposition='outside',),\n    go.Bar(name='2019', x=df5years['Country'], y=df5years['19'], marker_color='#CDD9A3',text=df5years['19'].tolist(), textposition='outside'),\n    go.Bar(name='2020', x=df5years['Country'], y=df5years['20'], marker_color='#F28705',text=df5years['20'].tolist(), textposition='outside',),\n    go.Bar(name='2021', x=df5years['Country'], y=df5years['21'], marker_color='#D9946C',text=df5years['21'].tolist(), textposition='outside')])\n\nfig.update_layout(barmode='group')\n\nfig.update_layout(title='<b>Kaggle User in East Asia</b>',title_font_size=23,\n                  margin = dict(t=200, l=100, r=10, b=200),\n                  height=600, width=700)\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\nfig.update_traces(hovertemplate='<b>Count</b>: %{y}')\nfig.update_layout(legend=dict(\n    orientation=\"v\",\n    yanchor=\"bottom\",\n    y=1.15,\n    xanchor=\"right\",\n    x=1))\nfig.add_annotation(dict(font=dict(size=14),\n                                    x=0.8,\n                                    y=-0.5,\n                                    showarrow=False,\n                                    text=\"@green_yhjw\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\nfig.show()\n```\n\n# 3.1.2 Gender transformation\n---\n\n<h2>World: The proportion of female respondents increases (still below 20%) </h2>\n\nThe number of respondents is increasing in all genders.\n\nOur team is also a team with high female members and wants to contribute as a respondent in 2022.\n\n![](/images/kaggle_final/newplot5.png)\n\n```python\n#data preprocessing\nGender_17 = (\n    df17['GenderSelect']\n    .replace(['A different identity', 'Prefer to self-describe', 'Non-binary, genderqueer, or gender non-conforming'], 'Others')\n    .fillna('Others')\n    .value_counts()\n    .to_frame()\n    .reset_index()\n    .rename(columns={'index':'type', 'GenderSelect':'Gender'})\n    .groupby('type')\n    .sum()\n    .reset_index())\nGender_18 = (\n    df18['Q1']\n    .replace(['Prefer not to say', 'Prefer to self-describe'], 'Others')\n    .fillna('Others')\n    .value_counts()\n    .to_frame()\n    .reset_index()\n    .rename(columns={'index':'type', 'Q1':'Gender'})\n    .groupby('type')\n    .sum()\n    .reset_index())\nGender_19 = (\n    df19['Q2']\n    .replace(['Prefer not to say','Prefer to self-describe'],'Others')\n    .fillna('Others')\n    .value_counts()\n    .to_frame()\n    .reset_index()\n    .rename(columns={'index':'type', 'Q2':'Gender'})\n    .groupby('type')\n    .sum()\n    .reset_index())\nGender_20 = (\n    df20['Q2']\n    .replace(['Prefer not to say', 'Prefer to self-describe', 'Nonbinary'], 'Others')\n    .replace(['Man', 'Woman'], ['Male', 'Female'])\n    .fillna('Others')\n    .value_counts()\n    .to_frame()\n    .reset_index()\n    .rename(columns={'index':'type', 'Q2':'Gender'})\n    .groupby('type')\n    .sum()\n    .reset_index())\nGender_21 = (\n    df21['Q2']\n    .replace(['Prefer not to say', 'Prefer to self-describe', 'Nonbinary'], 'Others')\n    .replace(['Man', 'Woman'], ['Male', 'Female'])\n    .fillna('Others')\n    .value_counts()\n    .to_frame()\n    .reset_index()\n    .rename(columns={'index':'type', 'Q2':'Gender'})\n    .groupby('type')\n    .sum()\n    .reset_index())\n\ncolors = ['#D9946C','#88BFBA', '#CDD9A3']\n\nfig = make_subplots(rows=1, cols=5, specs=[[{'type':'domain'}, {'type':'domain'}, {'type':'domain'}, {'type':'domain'}, {'type':'domain'}]],)\nfig.add_trace(go.Pie(marker=dict(colors=colors), labels=Gender_21['type'], values=Gender_21['Gender'], name=\"2021\", scalegroup='one', text=np.array(Gender_21['Gender'].sum()), title=\"2021\", titleposition='bottom center'),\n              1, 5)\nfig.add_trace(go.Pie(marker=dict(colors=colors), labels=Gender_20['type'], values=Gender_20['Gender'], name=\"2020\", scalegroup='one', text=np.array(Gender_20['Gender'].sum()), title=\"2020\", titleposition='bottom center'),\n              1, 4)\nfig.add_trace(go.Pie(marker=dict(colors=colors), labels=Gender_19['type'], values=Gender_19['Gender'], name=\"2019\", scalegroup='one', text=np.array(Gender_19['Gender'].sum()), title=\"2019\", titleposition='bottom center'),\n              1, 3)\nfig.add_trace(go.Pie(marker=dict(colors=colors), labels=Gender_18['type'], values=Gender_18['Gender'], name=\"2018\", scalegroup='one', text=np.array(Gender_18['Gender'].sum()), title=\"2018\", titleposition='bottom center'),\n              1, 2)\nfig.add_trace(go.Pie(marker=dict(colors=colors), labels=Gender_17['type'], values=Gender_17['Gender'], name=\"2017\", scalegroup='one', text=np.array(Gender_17['Gender'].sum()), title=\"2017\", titleposition='bottom center'),\n              1, 1)\n\nfig.update_traces(hole=.0, hoverinfo=\"label+percent+name\", \n                  textinfo='label+percent+value')\n\nfig.update_layout(title='<b>World Gender</b>',title_font_size=23,\n                  margin = dict(t=300, l=100, r=0, b=200),\n                  height=700, width=1000)\n\nfig.update_layout(legend=dict(\n    orientation=\"v\",\n    yanchor=\"bottom\",\n    y=1.3,\n    xanchor=\"right\",\n    x=1))\nfig.add_annotation(dict(font=dict(size=14),\n                                    x=0.85,\n                                    y=-0.5,\n                                    showarrow=False,\n                                    text=\"@green_yhjw\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\nfig.show()\n```\n\n<h3>\n    \n    - Male (1004->2037 : 2017->2021) double increase\n    \n    - Female 183->327 : 2017->2021 increased 1.8 times\n    \n    - Others (8->64 : 2017->2021) 8x increase\n    \n</h3>\n[Compare the high and low points]\n\n+ It can be seen that the number of female respondents and the ratio of male respondents hardly change, which is a difference compared to World data.\n\n+ It can be seen that the degree of gender freedom in East Asia has increased relatively.\n+ Compared to World data, it can be seen that in 2021 (1.87: 2.6= Wo: Ea), compared to 2017 (1.96: 0.7 = Ea), which was relatively conservative.\n\n![](/images/kaggle_final/newplot6.png)\n\n```python\n#data preprocessing\ngender21= df21_Ea.loc[:, ['Q3', 'Q2', 'year']].rename(columns={'Q3':'Country', 'Q2':'Gender'})\ngender20= df20_Ea.loc[:, ['Q3', 'Q2', 'year']].rename(columns={'Q3':'Country', 'Q2':'Gender'})\ngender19= df19_Ea.loc[:, ['Q3', 'Q2', 'year']].rename(columns={'Q3':'Country', 'Q2':'Gender'})\ngender18= df18_Ea.loc[:, ['Q3', 'Q1', 'year']].rename(columns={'Q3':'Country', 'Q1':'Gender'})\ngender17= df17_Ea.loc[:, ['Country', 'GenderSelect', 'year']].rename(columns={'index':'type', 'GenderSelect':'Gender'})\n\nGender5y= pd.concat([gender17, gender18, gender19, gender20, gender21])\nGender5y= (Gender5y.replace(['Prefer not to say', 'Prefer to self-describe', 'Nonbinary', 'A different identity'], 'Others')\n           .replace(['Man', 'Woman'], ['Male', 'Female'])\n           .groupby(['year', 'Gender'])\n           .size()\n           .reset_index()\n           .rename(columns = {0:\"Count\"}))\n\ngen17_5y = Gender5y[Gender5y['year'] == \"2017\"].reset_index(drop = True)\ngen18_5y = Gender5y[Gender5y['year'] == \"2018\"].reset_index(drop = True)\ngen19_5y = Gender5y[Gender5y['year'] == \"2019\"].reset_index(drop = True)\ngen20_5y = Gender5y[Gender5y['year'] == \"2020\"].reset_index(drop = True)\ngen21_5y = Gender5y[Gender5y['year'] == \"2021\"].reset_index(drop = True)\n\nGen5y_ = pd.concat([gen17_5y, gen18_5y, gen19_5y, gen20_5y, gen21_5y], ignore_index = True)\nGen5y_= pd.pivot(Gen5y_, index = \"year\", columns = \"Gender\", values = \"Count\").reset_index()\nGen5y_\n\nGen5y_['year'].unique()\n\n#graph\nfig = go.Figure()\n\nfig.add_trace(go.Bar(\n    x = Gen5y_['year'],\n    y = Gen5y_['Male'].tolist(),\n    name = 'Male',\nmarker_color='#88BFBA', text=Gen5y_['Male'].tolist(), textposition='outside'))\n\nfig.add_trace(go.Bar(\n    x = Gen5y_['year'],\n    y = Gen5y_['Female'].tolist(),\n    name = 'Female',\nmarker_color='#D9946C', text=Gen5y_['Female'].tolist(), textposition='outside'))\n\nfig.add_trace(go.Bar(\n    x = Gen5y_['year'],\n    y = Gen5y_['Others'].tolist(),\n    name = 'Others',\nmarker_color='#CDD9A3', text=Gen5y_['Others'].tolist(), textposition='outside'))\n\nfig.update_layout(barmode=\"group\") \n\nfig.update_layout(title='<b>Gender by year</b>',title_font_size=22,\n                  margin = dict(t=200, l=100, r=10, b=200),\n                  height=700, width=700,\n                  xaxis_title=None,\n                  yaxis_title=None)\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\nfig.add_annotation(dict(font=dict(size=14),\n                                    x=0.8,\n                                    y=-0.5,\n                                    showarrow=False,\n                                    text=\"@green_yhjw\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\nfig.show()\n```\n\n# 3.1.3 Job transformation\n---\n\n<h2> 21' World Vs East Asia Age Ratio: Bar plot </h2>\n\n- Not Employed : More than 30% in both East Asia and the world, the highest.\n    \n    *Because \"Students\" is included.*\n- Data Scientist : High percentage in the world and East Asia.\n\n- Relatively low proportion in East Asia.\n    <strong>**= Absolute lack of numbers**</strong>\n \n \n<p style=\"color:#FF0000\";>\nWe would like to move forward by selecting a **data scientist** with insufficient numbers in East Asia.\n</p>\n\n![](/images/kaggle_final/newplot7.png)\n\n```python\n#data preprocessing\nData_Analyst =['Data Analyst','Data Miner,Information technology','Data Miner',\n                'Predictive Modeler','Information technology, networking, or system administration', \n                'A business discipline (accounting, economics, finance, etc.)', 'Business Analyst', 'Humanities',\n                'Statistician', 'Mathematics or statistics', 'Medical or life sciences (biology, chemistry, medicine, etc.)', \n                'Physics or astronomy',  'Social sciences (anthropology, psychology, sociology, etc.)', 'Environmental science or geology',\n                'Humanities (history, literature, philosophy, etc.)']\nData_Scientist =['Data Scientist',  'Research Scientist', 'Researcher',\n                'Machine Learning Engineer', 'Scientist/Researcher']\nDeveloper=['Developer Relations/Advocacy','Data Engineer','Engineer','Engineering (non-computer focused)',\n           'Programmer','Software Engineer', 'Computer Scientist','Computer science (software engineering, etc.)', \n           'Fine arts or performing arts','Product Manager', 'Software Developer/Software Engineer',\n           'Product/Project Manager','Program/Project Manager','DBA/Database Engineer']\nNot_Employed =['Currently not employed', 'Not employed', 'Student']\nOthers = ['I never declared a major', 'Other']\n\n\ndf21job_Ea = df21_Ea.loc[:,['Q3','Q5']].rename(columns={'Q5':'2021'}).fillna('Other')\ndf20job_Ea = df20_Ea.loc[:,['Q3','Q5']].rename(columns={'Q5':'2020'}).fillna('Other')\ndf19job_Ea = df19_Ea.loc[:,['Q3','Q5']].rename(columns={'Q5':'2019'}).fillna('Other')\ndf18job_Ea = df18_Ea.loc[:,['Q3','Q5']].rename(columns={ 'Q5':'2018'}).fillna('Other')\ndf17job_Ea = df17_Ea.loc[:,['Country','CurrentJobTitleSelect']].rename(columns={'CurrentJobTitleSelect':'2017'}).fillna('Other')\n\ndf21job_Ea.value_counts('2021')\ndf21job_Ea['JOB']=[\"Data Analyst\" if x in Data_Analyst\n                   else \"Data Scientist\" if x in Data_Scientist # Data Scientist\n                   else \"Developer\" if x in Developer\n                    else \"NotEmployed\" if x in Not_Employed\n                   else \"Others\" \n                   for x in df21job_Ea['2021']]\ndf21job_Ea.value_counts('JOB')\n\ndf20job_Ea.value_counts('2020')\ndf20job_Ea['JOB']=[\"Data Analyst\" if x in Data_Analyst\n                   else \"Data Scientist\" if x in Data_Scientist \n                   else \"Developer\" if x in Developer\n                    else \"NotEmployed\" if x in Not_Employed\n                   else \"Other\"\n                   for x in df20job_Ea['2020']]\ndf20job_Ea[['2020','JOB']]\n\ndf19job_Ea.value_counts('2019')\ndf19job_Ea['JOB']=[\"Data Analyst\" if x in Data_Analyst\n                   else \"Data Scientist\" if x in Data_Scientist \n                   else \"Developer\" if x in Developer\n                    else \"NotEmployed\" if x in Not_Employed\n                    else \"Other\"\n                   for x in df19job_Ea['2019']]\n\ndf19jobTest = df19job_Ea.loc[df19job_Ea.JOB == 'Other']\ndf19jobTest['2019'].value_counts()\n\n\ndf18job_Ea.value_counts('2018')\ndf18job_Ea['JOB']=[\"Data Analyst\" if x in Data_Analyst\n                   else \"Data Scientist\" if x in Data_Scientist \n                   else \"Developer\" if x in Developer\n                    else \"NotEmployed\" if x in Not_Employed\n                    else \"Other\"\n                   for x in df18job_Ea['2018']]\n\ndf18jobTest = df18job_Ea.loc[df18job_Ea.JOB == 'Other']\ndf18jobTest['2018'].value_counts()\n\n\ndf17job_Ea.value_counts('2017')\ndf17job_Ea['JOB']=[\"Data Analyst\" if x in Data_Analyst\n                   else \"Data Scientist\" if x in Data_Scientist \n                   else \"Developer\" if x in Developer\n                    else \"NotEmployed\" if x in Not_Employed\n                    else \"Other\"\n                   for x in df17job_Ea['2017']]\n\ndf17jobTest = df17job_Ea.loc[df17job_Ea.JOB == 'Other']\ndf17jobTest['2017'].value_counts()\n\n\ndf21jobTest = df21job_Ea.loc[df21job_Ea.JOB == 'Other']\ndf21jobTest['2021'].head()\ndf21job_Ea.value_counts('JOB')\n\ndfjob21 =df21job_Ea.groupby(['Q3','JOB']).size().reset_index().rename(columns = {0:\"Count\"}).rename(columns={'Q3':'country'})\ndfjob20 =df20job_Ea.groupby(['Q3','JOB']).size().reset_index().rename(columns = {0:\"Count\"}).rename(columns={'Q3':'country'})\ndfjob19 =df19job_Ea.groupby(['Q3','JOB']).size().reset_index().rename(columns = {0:\"Count\"}).rename(columns={'Q3':'country'})\ndfjob18 =df18job_Ea.groupby(['Q3','JOB']).size().reset_index().rename(columns = {0:\"Count\"}).rename(columns={'Q3':'country'})\ndfjob17 =df17job_Ea.groupby(['Country','JOB']).size().reset_index().rename(columns = {0:\"Count\"}).rename(columns={'Country':'country'})\n\ndf21_Ea_job =df21job_Ea.groupby(['JOB']).size().reset_index().rename(columns = {0:\"Count\"})\ndf20_Ea_job =df20job_Ea.groupby(['JOB']).size().reset_index().rename(columns = {0:\"Count\"})\ndf19_Ea_job =df19job_Ea.groupby(['JOB']).size().reset_index().rename(columns = {0:\"Count\"})\ndf18_Ea_job =df18job_Ea.groupby(['JOB']).size().reset_index().rename(columns = {0:\"Count\"})\ndf17_Ea_job =df17job_Ea.groupby(['JOB']).size().reset_index().rename(columns = {0:\"Count\"})\n\ndf21_DA=df21[df21['Q5'].isin(Data_Analyst)]\ndf21_DS=df21[df21['Q5'].isin(Data_Scientist)]\ndf21_D=df21[df21['Q5'].isin(Developer)]\ndf21_N=df21[df21['Q5'].isin(Not_Employed)]\ndf21_O=df21[df21['Q5'].isin(Others)]\n\nWorld_ = np.array([df21_DA['Q5'].count(), df21_DS['Q5'].count(), df21_D['Q5'].count(), df21_N['Q5'].count(), df21_O['Q5'].count()]) \nEast_Asia_ = df21_Ea_job['Count'].to_numpy()\nWorld =((World_/World_.sum())*100).round(1)\nEast_Asia =((East_Asia_/East_Asia_.sum())*100).round(1)\ny = df21_Ea_job.JOB.to_numpy()\n\nfig = go.Figure(data=[\n    go.Bar(y=y, x=World, orientation='h', name=\"World\", base=0, hovertemplate='<b>World</b>: %{x}%<br>', marker_color='#979DA6', text=World, textposition='outside'),\n    go.Bar(y=y, x=-East_Asia, orientation='h', name=\"East Asia\", base=0, hovertemplate='<b>East Asia</b>: %{x}%<br>', marker_color='#F2D64B', text=East_Asia, textposition='outside')])\n\nfig.update_layout(barmode='stack')\nfig.update_layout(title='<b>World vs EastAsia</b>',title_font_size=22,\n                  margin = dict(t=200, l=100, r=50, b=200),\n                  height=700, width=750,\n                  xaxis_title=None,\n                  yaxis_title=None)\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\nfig.update_layout(legend=dict(\n    orientation=\"h\",\n    yanchor=\"bottom\",\n    y=1.1,\n    xanchor=\"right\",\n    x=1))\nfig.add_annotation(dict(font=dict(size=14),\n                                    x=0.8,\n                                    y=-0.5,\n                                    showarrow=False,\n                                    text=\"@green_yhjw\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\nfig.show()\n```\n\n<h2> World Job Ratio: Heat Map </h2> \n\nThe trend of increasing each job except Others. <br>\nData Scientist has a high proportion, and the trend is to increase further in 2022. <br>\n\n<h2> East Asia Job Ratio: Heat Map </h2> \nEast Asia : Increasing the ratio of data scientist. <br>\n\n![](/images/kaggle_final/newplot8.png)\n\n```python\n#data preprocessing\ndf21job= df21.loc[:,['region','Q5']].rename(columns={'Q5':'2021'}).fillna('Others')\ndf20job= df20.loc[:,['region','Q5']].rename(columns={'Q5':'2020'}).fillna('Others')\ndf19job= df19.loc[:,['region','Q5']].rename(columns={'Q5':'2019'}).fillna('Others')\ndf18job= df18.loc[:,['region','Q6']].rename(columns={ 'Q6':'2018'}).fillna('Others')\ndf17job= df17.loc[:,['region','CurrentJobTitleSelect']].rename(columns={'CurrentJobTitleSelect':'2017'}).fillna('Others')\n\ndf21job['JOB']=[\"Data Analyst\" if x in Data_Analyst\n                   else \"Data Scientist\" if x in Data_Scientist # Data Scientist\n                   else \"Developer\" if x in Developer\n                    else \"NotEmployed\" if x in Not_Employed\n                   else \"Others\" \n                   for x in df21job['2021']]\n\n\ndf20job['JOB']=[\"Data Analyst\" if x in Data_Analyst\n                   else \"Data Scientist\" if x in Data_Scientist \n                   else \"Developer\" if x in Developer\n                    else \"NotEmployed\" if x in Not_Employed\n                   else \"Others\"\n                   for x in df20job['2020']]\n\n\ndf19job['JOB']=[\"Data Analyst\" if x in Data_Analyst\n                   else \"Data Scientist\" if x in Data_Scientist \n                   else \"Developer\" if x in Developer\n                    else \"NotEmployed\" if x in Not_Employed\n                    else \"Others\"\n                   for x in df19job['2019']]\n\n\ndf18job['JOB']=[\"Data Analyst\" if x in Data_Analyst\n                   else \"Data Scientist\" if x in Data_Scientist \n                   else \"Developer\" if x in Developer\n                    else \"NotEmployed\" if x in Not_Employed\n                    else \"Others\"\n                   for x in df18job['2018']]\n\n\ndf17job['JOB']=[\"Data Analyst\" if x in Data_Analyst\n                   else \"Data Scientist\" if x in Data_Scientist \n                   else \"Developer\" if x in Developer\n                    else \"NotEmployed\" if x in Not_Employed\n                    else \"Others\"\n                   for x in df17job['2017']]\n\ndf21_job =df21job.groupby(['JOB']).size().reset_index().rename(columns = {0:\"Count\"})\ndf20_job =df20job.groupby(['JOB']).size().reset_index().rename(columns = {0:\"Count\"})\ndf19_job =df19job.groupby(['JOB']).size().reset_index().rename(columns = {0:\"Count\"})\ndf18_job =df18job.groupby(['JOB']).size().reset_index().rename(columns = {0:\"Count\"})\ndf17_job =df17job.groupby(['JOB']).size().reset_index().rename(columns = {0:\"Count\"})\n\nmerge11=pd.merge(df21_job,df20_job, how='outer',on='JOB')\nmerge21=pd.merge(df19_job,df18_job, how='outer',on='JOB')\nmerge31=pd.merge(merge11,merge21, how='outer',on='JOB')\nmerge_Wo=(pd.merge(merge31,df17_job, how='outer',on='JOB')\n            .rename(columns = {'Count_x_x':'2021','Count_y_x':'2020','Count_x_y':'2019','Count_y_y':'2018','Count':'2017'}).fillna(0)\n            .reindex(columns = ['JOB','2017','2018','2019','2020','2021' ]))\n\ndf21job_Ea = df21job[df21job['region'] == 'EastAsia'].loc[:,['region','JOB']].rename(columns={'region':'EastAsia'})\ndf20job_Ea = df20job[df20job['region'] == 'EastAsia'].loc[:,['region','JOB']].rename(columns={'region':'EastAsia'})\ndf19job_Ea = df19job[df19job['region'] == 'EastAsia'].loc[:,['region','JOB']].rename(columns={'region':'EastAsia'})\ndf18job_Ea = df18job[df18job['region'] == 'EastAsia'].loc[:,['region','JOB']].rename(columns={'region':'EastAsia'})\ndf17job_Ea = df17job[df17job['region'] == 'EastAsia'].loc[:,['region','JOB']].rename(columns={'region':'EastAsia'})\n\ndf21job_Ea =df21job_Ea.groupby(['JOB']).size().reset_index().rename(columns = {0:\"Count\"})\ndf20job_Ea =df20job_Ea.groupby(['JOB']).size().reset_index().rename(columns = {0:\"Count\"})\ndf19job_Ea =df19job_Ea.groupby(['JOB']).size().reset_index().rename(columns = {0:\"Count\"})\ndf18job_Ea =df18job_Ea.groupby(['JOB']).size().reset_index().rename(columns = {0:\"Count\"})\ndf17job_Ea =df17job_Ea.groupby(['JOB']).size().reset_index().rename(columns = {0:\"Count\"})\n\nmerge1=pd.merge(df21job_Ea,df20job_Ea, how='outer',on='JOB')\nmerge2=pd.merge(df19job_Ea,df18job_Ea, how='outer',on='JOB')\nmerge3=pd.merge(merge1,merge2, how='outer',on='JOB')\nmerge=(pd.merge(merge3,df17job_Ea, how='outer',on='JOB')\n         .rename(columns = {'Count_x_x':'2021','Count_y_x':'2020','Count_x_y':'2019','Count_y_y':'2018','Count':'2017'}).fillna(0)\n         .reindex(columns = ['JOB','2017','2018','2019','2020','2021' ]))\n\n#graph\nz1=((merge_Wo.iloc[:,[1,2,3,4,5]].to_numpy()/merge_Wo.iloc[:,[1,2,3,4,5]].to_numpy().sum())*100).round(1)\nz2=((merge.iloc[:,[1,2,3,4,5]].to_numpy()/merge.iloc[:,[1,2,3,4,5]].to_numpy().sum())*100).round(1)\n\nx=['2017-year','2018-year','2019-year','2020-year','2021-year']\ny1=merge_Wo['JOB'].tolist()\ny2=merge['JOB'].tolist()\n\n\nfig1 = ff.create_annotated_heatmap(z1, x = x, y = y1, colorscale='sunset')\nfig2 = ff.create_annotated_heatmap(z2, x = x, y = y2, colorscale='sunset')\n\nfor annot in fig2['layout']['annotations']:\n    annot['xref'] = 'x2'\n    \nfig = make_subplots(rows=1, cols=2)\nfig.add_trace(fig1.data[0], row=1, col=1)\nfig.add_trace(fig2.data[0], row=1, col=2)\nfig.update_layout(fig1.layout, title='<b>           World vs EastAsia</b>',title_font_size=22,\n                  margin = dict(t=200, l=100, r=10, b=200),\n                  height=700, width=1150, coloraxis=dict(showscale=True, colorscale='sunset'))\nfig.update_traces(hovertemplate='<b>Job</b>: %{y}<br>'+\n                                '<b>Year</b>: %{x}<br>'+\n                                '<b>Percent</b>: %{z}%')\nfig.layout.annotations += fig2.layout.annotations\nfig.add_annotation(dict(font=dict(size=14),\n                                    x=0.9,\n                                    y=-0.25,\n                                    showarrow=False,\n                                    text=\"@green_yhjw\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\n\nfig.show()\n```\n\n# 3.1.4 Age transformation\n---\n\n<h2> > Age change in World and East Asia by year: Stacked scatter plot </h2>\n\n1. In the case of Age data, there is no 2017 data.\n2. 70% of the World respondents said 20s to 30s.\n3. 70% of East Asia respondents said 20s to 30s.\n4. The number of respondents increases, but the ratio seems to have stabilized.\n\n![](/images/kaggle_final/newplot9.png)\n![](/images/kaggle_final/newplot10.png)\n\n```python\n#data preprocessing\n#World\nAge21_W = df21.loc[:,['Q3','Q1', 'year']].reset_index().rename(columns={'Q3':'East_Asia', 'Q1':'age'}).fillna('etc')\nAge20_W = df20.loc[:,['Q3','Q1','year']].reset_index().rename(columns={'Q3':'East_Asia', 'Q1':'age'}).fillna('etc')\nAge19_W = df19.loc[:,['Q3','Q1','year']].reset_index().rename(columns={'Q3':'East_Asia', 'Q1':'age'}).fillna('etc')\nAge18_W = df18.loc[:,['Q3','Q2','year']].reset_index().rename(columns={'Q3':'East_Asia', 'Q2':'age'}).fillna('etc')\n\nAge5y_W= pd.concat([Age21_W, Age20_W, Age19_W, Age18_W])\nAge5y_W= (Age5y_W.replace(['60-69', '70+', '70-79', '80+'], '60+')\n           .replace(['22-24', '25-29'], '22-29')\n           .replace(['30-34', '35-39'], '30-39')\n            .replace(['40-44', '45-49'], '40-49')\n        .replace(['50-54', '55-59'], '50-59')\n           .groupby(['year', 'age'])\n           .size()\n           .reset_index()\n           .rename(columns = {0:\"Count\"}))\n\nAge21_percent_W = Age5y_W[Age5y_W['year'] == \"2021\"].reset_index(drop = True)\nAge21_percent_W['percentage'] = Age21_percent_W[\"Count\"] / Age21_percent_W[\"Count\"].sum()\nAge21_percent_W['%'] = np.round(Age21_percent_W['percentage'] * 100, 1)\n\nAge20_percent_W = Age5y_W[Age5y_W['year'] == \"2020\"].reset_index(drop = True)\nAge20_percent_W['percentage'] = Age20_percent_W[\"Count\"] / Age20_percent_W[\"Count\"].sum()\nAge20_percent_W['%'] = np.round(Age20_percent_W['percentage'] * 100, 1)\n\nAge19_percent_W = Age5y_W[Age5y_W['year'] == \"2019\"].reset_index(drop = True)\nAge19_percent_W['percentage'] = Age19_percent_W[\"Count\"] / Age19_percent_W[\"Count\"].sum()\nAge19_percent_W['%'] = np.round(Age19_percent_W['percentage'] * 100, 1)\n\nAge18_percent_W = Age5y_W[Age5y_W['year'] == \"2018\"].reset_index(drop = True)\nAge18_percent_W['percentage'] = Age18_percent_W[\"Count\"] / Age18_percent_W[\"Count\"].sum()\nAge18_percent_W['%'] = np.round(Age18_percent_W['percentage'] * 100, 1)\n\nAge5y_percent_W = pd.concat([Age18_percent_W, Age19_percent_W, Age20_percent_W, Age21_percent_W], ignore_index = True)\nAge5y_percent_W= pd.pivot(Age5y_percent_W, index = \"year\", columns = 'age', values = \"%\").reset_index()\nAge5y_percent_W\n\nAge21 = df21_Ea.loc[:,['Q3','Q1', 'year']].reset_index().rename(columns={'Q3':'East_Asia', 'Q1':'age'}).fillna('etc')\nAge20 = df20_Ea.loc[:,['Q3','Q1','year']].reset_index().rename(columns={'Q3':'East_Asia', 'Q1':'age'}).fillna('etc')\nAge19 = df19_Ea.loc[:,['Q3','Q1','year']].reset_index().rename(columns={'Q3':'East_Asia', 'Q1':'age'}).fillna('etc')\nAge18 = df18_Ea.loc[:,['Q3','Q2','year']].reset_index().rename(columns={'Q3':'East_Asia', 'Q2':'age'}).fillna('etc')\n\nAge5y= pd.concat([Age21, Age20, Age19, Age18])\nAge5y= (Age5y.replace(['60-69', '70+', '70-79', '80+'], '60+')\n           .replace(['22-24', '25-29'], '22-29')\n           .replace(['30-34', '35-39'], '30-39')\n            .replace(['40-44', '45-49'], '40-49')\n        .replace(['50-54', '55-59'], '50-59')\n           .groupby(['year', 'age'])\n           .size()\n           .reset_index()\n           .rename(columns = {0:\"Count\"}))\n\n#EastAsia\nAge21_percent = Age5y[Age5y['year'] == \"2021\"].reset_index(drop = True)\nAge21_percent['percentage'] = Age21_percent[\"Count\"] / Age21_percent[\"Count\"].sum()\nAge21_percent['%'] = np.round(Age21_percent['percentage'] * 100, 1)\nAge21_percent\n\nAge20_percent = Age5y[Age5y['year'] == \"2020\"].reset_index(drop = True)\nAge20_percent['percentage'] = Age20_percent[\"Count\"] / Age20_percent[\"Count\"].sum()\nAge20_percent['%'] = np.round(Age20_percent['percentage'] * 100, 1)\nAge20_percent\n\nAge19_percent = Age5y[Age5y['year'] == \"2019\"].reset_index(drop = True)\nAge19_percent['percentage'] = Age19_percent[\"Count\"] / Age19_percent[\"Count\"].sum()\nAge19_percent['%'] = np.round(Age19_percent['percentage'] * 100, 1)\nAge19_percent\n\nAge18_percent = Age5y[Age5y['year'] == \"2018\"].reset_index(drop = True)\nAge18_percent['percentage'] = Age18_percent[\"Count\"] / Age18_percent[\"Count\"].sum()\nAge18_percent['%'] = np.round(Age18_percent['percentage'] * 100, 1)\nAge18_percent\n\nAge5y_percent = pd.concat([Age18_percent, Age19_percent, Age20_percent, Age21_percent], ignore_index = True)\nAge5y_percent= pd.pivot(Age5y_percent, index = \"year\", columns = 'age', values = \"%\").reset_index()\nAge5y_percent\n\nAge5y_percent_order = Age5y_percent_W['year'].tolist()\nAge5y_order = Age5y_W['age'].unique().tolist()\n\n#graph1\nfig = go.Figure()\nfig.add_trace(go.Scatter(\n    x = Age5y_percent_order, \n    y = Age5y_percent_W['18-21'].tolist(), \n    mode = \"lines\", \n    name = '18-21',\n    line = dict(width = 1),\n    stackgroup = \"one\",\n    marker_color='#F2798F'))\n\nfig.add_trace(go.Scatter(\n    x = Age5y_percent_order, \n    y = Age5y_percent_W['22-29'].tolist(), \n    mode = \"lines\", \n    name = \"20s\",\n    line = dict(width = 1),\n    stackgroup = \"one\",\n    marker_color='#88BFBA'))\nfig.add_trace(go.Scatter(\n    x = Age5y_percent_order, \n    y = Age5y_percent_W['30-39'].tolist(), \n    mode = \"lines\", \n    name = \"30s\",\n    line = dict(width = 1),\n    stackgroup = \"one\",\n    marker_color='#CDD9A3'))\n\nfig.add_trace(go.Scatter(\n    x = Age5y_percent_order, \n    y = Age5y_percent_W['40-49'].tolist(), \n    mode = \"lines\", \n    name = \"40s\",\n    line = dict(width = 1),\n    stackgroup = \"one\",\n    marker_color='#F28705'))\nfig.add_trace(go.Scatter(\n    x = Age5y_percent_order, \n    y = Age5y_percent_W['50-59'].tolist(), \n    mode = \"lines\", \n    name = \"50s\",\n    line = dict(width = 1),\n    stackgroup = \"one\",\n    marker_color='#D9946C'))\nfig.add_trace(go.Scatter(\n    x = Age5y_percent_order, \n    y = Age5y_percent_W['60+'].tolist(), \n    mode = \"lines\", \n    name = \"60s<\",\n    line = dict(width = 1),\n    stackgroup = \"one\",\n    marker_color='#F2D64B'))\n\nfig.update_traces(hovertemplate='<b>Percent</b>: %{y}%<br>'+\n                                '<b>Year</b>: %{x}<br>')\nfig.update_layout(yaxis_range = (0, 100), height=500, width=700,\n                 title_text=\"<b>World</b>\", title_font_size=20,\n                 title_x=0.5)\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\nfig.add_annotation(dict(font=dict(size=14),\n                                    x=0.8,\n                                    y=-0.2,\n                                    showarrow=False,\n                                    text=\"@green_yhjw\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\nfig.show()\n\n#graph2\nAge5y_percent_order = Age5y_percent['year'].tolist()\nAge5y_order = Age5y['age'].unique().tolist()\n\nfig = go.Figure()\n\nfig.add_trace(go.Scatter(\n    x = Age5y_percent_order, \n    y = Age5y_percent['18-21'].tolist(), \n    mode = \"lines\", \n    name = '18-21',\n    line = dict(width = 1),\n    stackgroup = \"one\",\n    marker_color='#F2798F'))\n\nfig.add_trace(go.Scatter(\n    x = Age5y_percent_order, \n    y = Age5y_percent['22-29'].tolist(), \n    mode = \"lines\", \n    name = \"20s\",\n    line = dict(width = 1),\n    stackgroup = \"one\",\n    marker_color='#88BFBA'))\nfig.add_trace(go.Scatter(\n    x = Age5y_percent_order, \n    y = Age5y_percent['30-39'].tolist(), \n    mode = \"lines\", \n    name = \"30s\",\n    line = dict(width = 1),\n    stackgroup = \"one\",\n    marker_color='#CDD9A3'))\n\nfig.add_trace(go.Scatter(\n    x = Age5y_percent_order, \n    y = Age5y_percent['40-49'].tolist(), \n    mode = \"lines\", \n    name = \"40s\",\n    line = dict(width = 1),\n    stackgroup = \"one\",\n    marker_color='#F28705'))\nfig.add_trace(go.Scatter(\n    x = Age5y_percent_order, \n    y = Age5y_percent['50-59'].tolist(), \n    mode = \"lines\", \n    name = \"50s\",\n    line = dict(width = 1),\n    stackgroup = \"one\",\n    marker_color='#D9946C'))\nfig.add_trace(go.Scatter(\n    x = Age5y_percent_order, \n    y = Age5y_percent['60+'].tolist(), \n    mode = \"lines\", \n    name = \"60s<\",\n    line = dict(width = 1),\n    stackgroup = \"one\",\n    marker_color='#F2D64B'))\nfig.update_traces(hovertemplate='<b>Percent</b>: %{y}%<br>'+\n                                '<b>Year</b>: %{x}<br>')\nfig.update_layout(yaxis_range = (0, 100), height=500, width=700,\n                 title_text=\"<b>East Asia</b>\", title_font_size=20,\n                 title_x=0.5)\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\nfig.add_annotation(dict(font=dict(size=14),\n                                    x=0.8,\n                                    y=-0.2,\n                                    showarrow=False,\n                                    text=\"@green_yhjw\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\nfig.show()\n```\n\n<h2> 17'East Asia Age Ratio: Heat Map </h2>\n\n+ **East Asia** : 50% or more. Those in their 20s and 30s.\n+ **Korea**: Those in their 20s are the highest.\n    The number of respondents in their 50s and older is also large.\n+ **Taiwan** : The number of respondents in their 30s and older is relatively small.\n+ **China**: 70% or more of respondents in their 30s or younger.\n    Related to life expectancy?\n+ **Japan**: Like an aging country, all ages are evenly distributed.\n    Even if you're older, there are many respondents to Kaggle.\n\n![](/images/kaggle_final/newplot11.png)\n\n```python\n#data processing\ndf21Age_Ea = df21_Ea.loc[:,['Q3','Q1']].reset_index().rename(columns={'Q3':'East_Asia', 'Q1':'2021'}).fillna('etc')\n\ndf21Age_Ea=(df21Age_Ea.replace(['60-69', '70+', '70-79', '80+'], '60+')\n           .replace(['22-24', '25-29'], '22-29')\n           .replace(['30-34', '35-39'], '30-39')\n            .replace(['40-44', '45-49'], '40-49')\n        .replace(['50-54', '55-59'], '50-59'))\n\n# 연령-지역 %\ndfKo_Age21= df21Age_Ea[df21Age_Ea['East_Asia']=='South Korea']\ndfKo_Age21_per=dfKo_Age21['2021'].value_counts().to_frame().reset_index()\ndfKo_Age21_per['South Korea']=((dfKo_Age21_per['2021'] / len(dfKo_Age21))*100).round(2)\n\ndfTw_Age21= df21Age_Ea[df21Age_Ea['East_Asia']=='Taiwan']\ndfTw_Age21_per=dfTw_Age21['2021'].value_counts().to_frame().reset_index()\ndfTw_Age21_per['Taiwan']=((dfTw_Age21_per['2021'] / len(dfTw_Age21))*100).round(2)\ndfTw_Age21_per\n\ndfCh_Age21= df21Age_Ea[df21Age_Ea['East_Asia']=='China']\ndfCh_Age21_per=dfCh_Age21['2021'].value_counts().to_frame().reset_index()\ndfCh_Age21_per['China']=((dfCh_Age21_per['2021'] / len(dfCh_Age21))*100).round(2)\ndfCh_Age21_per\n\ndf21Age_Ea.head()\ndfJp_Age21= df21Age_Ea[df21Age_Ea['East_Asia']=='Japan']\ndfJp_Age21_per=dfJp_Age21['2021'].value_counts().to_frame().reset_index()\ndfJp_Age21_per['Japan']=((dfJp_Age21_per['2021'] / len(dfJp_Age21))*100).round(2)\ndfJp_Age21_per\n\n\nmerge1= pd.merge(dfKo_Age21_per,dfTw_Age21_per, on='index', how='outer')\nmerge2= pd.merge(dfCh_Age21_per,dfJp_Age21_per, on='index', how='outer')\nmerge= pd.merge(merge1,merge2, on='index', how='outer').fillna(0).sort_values(by=['index'],ascending=True)\n\n#graph\nx1=['South Korea','Taiwan','China','Japan']\ny1=merge.sort_values(by=['index'], ascending=True)['index'].tolist()\nz1=merge.iloc[:,[2,4,6,8]].to_numpy()\n\nfig = go.Figure(data=go.Heatmap(\n                   z=z1,\n                   x=x1,\n                   y=y1,\n                   hoverongaps = True,\n                   opacity=1.0, xgap=2.5, ygap=2.5))\nfig = ff.create_annotated_heatmap(z1, x = x1, y = y1, colorscale='sunset')\nfig.update_layout(height=500, width=600,\n                 title_text=\"<b>East Asia Age (2021)</b>\", title_font_size=20,\n                 title_x=0.5)\nfig.update_traces(hovertemplate='<b>Age</b>: %{y}<br>'+\n                                '<b>Country</b>: %{x}<br>'+\n                                '<b>Percent</b>: %{z}%')\nfig.add_annotation(dict(font=dict(size=14),\n                                    x=0.8,\n                                    y=-0.2,\n                                    showarrow=False,\n                                    text=\"@green_yhjw\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\nfig.show()\n```\n\n> 17'East Asia's age ratio: Box plot\n\n> 2017: Data is not a section but an individual number.  <br>\n> If you divide the interval, you can add it to the previous graph. <br>\n> It was data that I could draw a bar plot, so I drew it. <br>\n> You can see a 100-year-old in China, but they don't remove missing values on purpose.\n\n![](/images/kaggle_final/newplot12.png)\n\n```python\n# 연도별 나이 \ndf21Age_Ea = df21_Ea.loc[:,['Q3','Q1']].reset_index().rename(columns={'Q3':'East_Asia', 'Q1':'2021'}).fillna('etc')\ndf20Age_Ea = df20_Ea.loc[:,['Q3','Q1']].reset_index().rename(columns={'Q3':'East_Asia', 'Q1':'2020'}).fillna('etc')\ndf19Age_Ea = df19_Ea.loc[:,['Q3','Q1']].reset_index().rename(columns={'Q3':'East_Asia', 'Q1':'2019'}).fillna('etc')\ndf18Age_Ea = df18_Ea.loc[:,['Q3','Q2']].reset_index().rename(columns={'Q3':'East_Asia', 'Q2':'2018'}).fillna('etc')\ndf17Age_Ea = df17_Ea.loc[:,['Country','Age']].reset_index().rename(columns={'Country':'East_Asia', 'Age':'2017'}).fillna('etc')\n\n#data frame 정리\ndfAge21 =df21Age_Ea.groupby(['East_Asia','2021']).size().reset_index().rename(columns = {0:\"Count\"})\ndfAge20 =df20Age_Ea.groupby(['East_Asia','2020']).size().reset_index().rename(columns = {0:\"Count\"})\ndfAge19 =df19Age_Ea.groupby(['East_Asia','2019']).size().reset_index().rename(columns = {0:\"Count\"})\ndfAge18 =df18Age_Ea.groupby(['East_Asia','2018']).size().reset_index().rename(columns = {0:\"Count\"})\ndfAge17 =(df17Age_Ea.groupby(['East_Asia','2017'])\n          .size().reset_index().rename(columns = {0:\"Count\"}))\n#graph\nfig = go.Figure()\n\nx = ['China','Japan','South Korea','Taiwan']\n\nfig.add_trace(go.Box( y=dfAge17['2017'][dfAge17['East_Asia']==\"Japan\"].to_numpy(),\n    name='Japan',\n    marker=dict(color='#CDD9A3')))\nfig.add_trace(go.Box(y=dfAge17['2017'][dfAge17['East_Asia']==\"China\"].to_numpy(),\n    name='China',\n    marker=dict(color='#88BFBA')))\nfig.add_trace(go.Box(y=dfAge17['2017'][dfAge17['East_Asia']==\"South Korea\"].to_numpy(),\n    name='South Korea',\n    marker=dict(color='#F2798F')))\nfig.add_trace(go.Box(y=dfAge17['2017'][dfAge17['East_Asia']==\"Taiwan\"].to_numpy(),\n    name='Taiwan',\n    marker=dict(color='#F28705'\n    ),))\n\nfig.update_layout(yaxis = dict(range=[0, 120]))\n\n\nfig.update_layout(yaxis_range = (0, 110), height=600, width=700,\n                  title_text=\"<b>Age in East Asia (2017)</b>\", title_font_size=20,\n                  margin = dict(t=100, l=50, r=50, b=100),\n                  title_x=0.5)\n\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\nfig.update_layout(legend=dict(\n    orientation=\"v\",\n    yanchor=\"bottom\",\n    y=0.8,\n    xanchor=\"right\",\n    x=1))\nfig.add_annotation(dict(font=dict(size=14),\n                                    x=0.8,\n                                    y=-0.2,\n                                    showarrow=False,\n                                    text=\"@green_yhjw\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\nfig.show()\n```\n\n# 3.1.5 Degree transformation\n---\n\n<h2> World job ratio in each country: pie plot </h2>\n\n- World: 90% or higher Bachelor's degree\n- East Asia: 85% bachelor's degree or higher\n\n![](/images/kaggle_final/newplot13.png)\n\n```python\n#data preprocessing\ndegree_wo = (df21['Q4']\n             .replace(['No formal education past high school',\n                       'Some college/university study without earning a bachelor’s degree'],'~college')\n             .replace(['Doctoral degree',\n                       'Professional doctorate'],'Doctoral degree~')\n             .value_counts().to_frame())\ndegree_ea = (df21_Ea['Q4']\n             .replace(['No formal education past high school',\n                       'Some college/university study without earning a bachelor’s degree'],'~college')\n             .replace(['Doctoral degree',\n                       'Professional doctorate'],'Doctoral degree~')\n             .value_counts().to_frame())\n\n#graph\ncolors = ['#F2798F','#88BFBA', '#CDD9A3', '#F28705', '#D9946C']\nfig = make_subplots(rows=1, cols=2, specs=[[{'type':'pie'}, {'type':'pie'}]], subplot_titles=(\"World\", \"East Asia\"))\nfig.add_trace(go.Pie(marker=dict(colors=colors), labels=degree_wo.index, values=degree_wo['Q4'].to_numpy(), name=\"World\"),\n              1, 1)\nfig.add_trace(go.Pie(marker=dict(colors=colors), labels=degree_ea.index, values=degree_ea['Q4'].to_numpy(), name=\"East Asia\"),\n              1, 2)\n\nfig.update_traces(hole=.0, hoverinfo=\"label+percent+name\")\n\nfig.update_layout(title='<b>World vs East Asia</b>',title_font_size=22,\n                  margin = dict(t=200, l=30, r=0, b=200),\n                  height=700, width=700)\nfig.update_layout(legend=dict(\n    orientation=\"h\",\n    yanchor=\"bottom\",\n    y=1.1,\n    xanchor=\"right\",\n    x=1.0))\nfig.add_annotation(dict(font=dict(size=14),\n                                    x=0.8,\n                                    y=-0.5,\n                                    showarrow=False,\n                                    text=\"@green_yhjw\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\nfig.show()\n\n```\n\n<h2> Percentage of East Asia degrees by year: sunburst plot </h2>\n\nThe highest percentage of respondents with **master's degrees** per year\n\n![](/images/kaggle_final/newplot14.png)\n\n```python\n#data preprocessing\ndf21_Ea_degree=(df21_Ea['Q4'].replace(['No formal education past high school', 'Some college/university study without earning a bachelor’s degree'],'~college')\n                             .replace(['Doctoral degree','Professional doctorate'],'Doctoral degree~')\n                             .value_counts().to_frame().rename(columns={'Q4':'2021'}))\ndf20_Ea_degree=(df20_Ea['Q4'].replace(['No formal education past high school', 'Some college/university study without earning a bachelor’s degree'],'~college')\n                             .replace(['Doctoral degree', 'Professional degree'],'Doctoral degree~')\n                             .value_counts().to_frame().rename(columns={'Q4':'2020'}))\ndf19_Ea_degree=(df19_Ea['Q4'].replace(['No formal education past high school','Some college/university study without earning a bachelor’s degree'],'~college')\n                             .replace(['Doctoral degree', 'Professional degree'],'Doctoral degree~')\n                             .value_counts().to_frame().rename(columns={'Q4':'2019'}))\ndf18_Ea_degree=(df18_Ea['Q4'].replace(['No formal education past high school', 'Some college/university study without earning a bachelor’s degree'],'~college')\n                             .replace(['Doctoral degree', 'Professional degree'],'Doctoral degree~')\n                             .value_counts().to_frame().rename(columns={'Q4':'2018'}))\ndf17_Ea_degree=(df17_Ea['FormalEducation']\n                .replace(['No formal education past high school', 'Some college/university study without earning a bachelor’s degree'],'~college')\n                .replace(['Doctoral degree', 'Professional degree'],'Doctoral degree~')\n                .value_counts().to_frame()\n                .rename(columns={'FormalEducation':'2017'} ,index = {'I did not complete any formal education past high school':'No formal education past high school','Master\\'s degree':'Master’s degree','Bachelor\\'s degree':'Bachelor’s degree','Some college/university study without earning a bachelor\\'s degree':'Some college/university study without earning a bachelor’s degree'})  )\n                \nconcat1 = pd.concat([df21_Ea_degree,df20_Ea_degree],axis=1, join='outer')  \nconcat2 = pd.concat([df19_Ea_degree,df18_Ea_degree],axis=1, join='outer')  \nconcat3 = pd.concat([concat1,concat2],axis=1, join='outer') \ndf21_Ea_degree_yearly_=concat3.join(df17_Ea_degree).fillna(0).transpose() #.transpose() 행 열 바꾸기\n\ndf21_Ea_degree_yearly=df21_Ea_degree_yearly_.stack().to_frame().reset_index().rename(columns={'level_0':'year','level_1':'degree',0:'value'})\ndf21_Ea_degree_yearly\n\n#graph\nfig = px.sunburst(df21_Ea_degree_yearly, path=['year','degree'], values=df21_Ea_degree_yearly['value'].tolist())\nfig.update_layout( margin = dict(t=10, l=10, r=10, b=10),colorway=(\"#F2798F\",\"#88BFBA\",\"#CDD9A3\",'#F28705','#D9946C'))\n\nfig.update_layout(title='<b>         Degree</b>',title_font_size=25,\n                  margin = dict(t=100, l=100, r=50, b=100),\n                  height=700, width=700)\nfig.update_traces(hovertemplate='<b>Name</b>: %{id}<br>'+\n                                '<b>Count</b>: %{value}<br>'+\n                                '<b>Parent</b>: %{parent}') \nfig.add_annotation(dict(font=dict(size=14),\n                                    x=0.8,\n                                    y=-0.2,\n                                    showarrow=False,\n                                    text=\"@green_yhjw\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\nfig.show()\n```\n\n<h3> Plus we could see the advantages of Plotly in this graph. \n</h3>\n\nMatplotlib draws a static graph, but Plotly can dynamically click and move, and it supports zooming out, zooming in, and downloading graphs.\n    \nBecause all of our graphs are made of plotly, the viewer can represent or remove items in the graph if desired. \n   **With a click**\n\n<h2> East Asia Degree Ratio: Bar plot</h2>\n\n40% of master's degrees or higher, and respondents have a high educational background.\n\n- China and Japan have similar trends to East Asia and the World. <br>\n    The number of people itself is large, so a representative trend seems to appear here. <br>\n    However, it is noteworthy that the two countries have the same tendency. <br>\n\n\n- Korea: It is the only country among the four countries with a high degree of education below Ph.D., bachelor's degree, and junior college. Only masters are low. \n    (Polarization of education?)\n\n- Taiwan: 1st place in master's ratio (55%), 2nd place in Ph.D. or higher (13.8%).\n    = The highest level of education.\n\n\n![](/images/kaggle_final/newplot15.png)\n\n```python\n#data preprocessing\ndf21Edu_Ea = df21_Ea.loc[:,['Q3','Q4']].reset_index().rename(columns={'Q3':'East_Asia', 'Q4':'Dgree'}).fillna('etc')\ndf21Edu_Ea =(df21Edu_Ea.replace({'I prefer not to answer':'etc'}).replace(['No formal education past high school',\n                       'Some college/university study without earning a bachelor’s degree'],'~college')\n             .replace(['Doctoral degree',\n                       'Professional doctorate'],'Doctoral degree~'))\n\ndf21Edu_Ea= (df21Edu_Ea\n           .groupby(['East_Asia', 'Dgree'])\n           .size()\n           .reset_index()\n           .rename(columns = {0:\"Count\"}))\n\n# 연령-지역 %\ndfKo_Edu21= df21Edu_Ea[df21Edu_Ea['East_Asia']=='South Korea']\ndfKo_Edu21['%']=((dfKo_Edu21['Count'] / dfKo_Edu21['Count'].sum()*100)).round(2)\ndfKo_Edu21=dfKo_Edu21.sort_values(by='%', ascending=False)\ndfTw_Edu21= df21Edu_Ea[df21Edu_Ea['East_Asia']=='Taiwan']\ndfTw_Edu21['%']=((dfTw_Edu21['Count'] / dfTw_Edu21['Count'].sum())*100).round(2)\ndfTw_Edu21=dfTw_Edu21.sort_values(by='%', ascending=False)\ndfCh_Edu21= df21Edu_Ea[df21Edu_Ea['East_Asia']=='China']\ndfCh_Edu21['%']=((dfCh_Edu21['Count'] / dfCh_Edu21['Count'].sum())*100).round(2)\ndfCh_Edu21=dfCh_Edu21.sort_values(by='%', ascending=False)\ndfJp_Edu21= df21Edu_Ea[df21Edu_Ea['East_Asia']=='Japan']\ndfJp_Edu21['%']=((dfJp_Edu21['Count'] / dfJp_Edu21['Count'].sum())*100).round(2)\ndfJp_Edu21=dfJp_Edu21.sort_values(by='%', ascending=False)\n\n# #data 완성\n# dfEdu_21_per = pd.concat([dfKo_Edu21, dfTw_Edu21, dfCh_Edu21, dfJp_Edu21], ignore_index = True)\n# dfEdu_21_per= pd.pivot(dfEdu_21_per, index = \"Dgree\", columns = 'East_Asia', values = \"%\").reset_index()\n# dfEdu_21_per\n\n#graph\nfig = make_subplots(rows = 1, cols = 4, \n                    shared_yaxes=True, \n                    vertical_spacing = 0.05)\n\nfig.add_trace(go.Bar(x = dfCh_Edu21['Dgree'], \n                     y = dfCh_Edu21['%'], \n                     text = dfCh_Edu21['%'].astype(str) + \"%\", \n                     textposition='outside',\n                     name='China',\n                     marker_color='#88BFBA'), \n                     row = 1, col = 1)\n\nfig.add_trace(go.Bar(x = dfJp_Edu21['Dgree'], \n                     y = dfJp_Edu21['%'], \n                     text = dfJp_Edu21['%'].astype(str) + \"%\", \n                     textposition='outside',\n                     name='Japan',\n                     marker_color='#CDD9A3'), \n                      row = 1, col = 2)\n\nfig.add_trace(go.Bar(x = dfKo_Edu21['Dgree'], \n                     y = dfKo_Edu21['%'], \n                     text = dfKo_Edu21['%'].astype(str) + \"%\", \n                     textposition='outside',\n                     name='South Korea',\n                     marker_color='#F28705'), \n                      row = 1, col = 3)\n\nfig.add_trace(go.Bar(x = dfTw_Edu21['Dgree'], \n                     y = dfTw_Edu21['%'], \n                     text = dfTw_Edu21['%'].astype(str) + \"%\", \n                     textposition='outside',\n                     name='Taiwan',\n                     marker_color='#D9946C'), \n                     row = 1, col = 4)\n\nfig.update_layout(showlegend=True,title='<b>Degree in East Asia</b>',title_font_size=22,\n                  margin = dict(t=200, l=100, r=50, b=200),\n                  height=700, width=700)\nfig.update_traces(hovertemplate='<b>Percent</b>: %{y}%<br>'+\n                                '<b>Degree</b>: %{x}<br>')\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\nfig.update_layout(legend=dict(\n    orientation=\"h\",\n    yanchor=\"bottom\",\n    y=1.1,\n    xanchor=\"right\",\n    x=1))\nfig.add_annotation(dict(font=dict(size=14),\n                                    x=0.8,\n                                    y=-0.5,\n                                    showarrow=False,\n                                    text=\"@green_yhjw\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\nfig.show()\n```\n\n# 3.1.6 Experience transformation\n---\n\n<h2> Trends in World & East Asia Career: Stacked Scatter plot </h2>\n- < 2 years: 50% of the total. <br>\n- 3-5 years: Decrease in the world, maintain East Asia ratio <br>\n- 2021 'etc data' disappeared. <br>\n\n![](/images/kaggle_final/newplot16.png)\n![](/images/kaggle_final/newplot17.png)\n\n```python\n#Exp data 전처리\n# Exp 뽑아오기\nExp21_Wo = df21.loc[:,['Q3','Q6', 'year']].reset_index().rename(columns={'Q3':'Country', 'Q6':'Exp'}).fillna('etc')\nExp20_Wo = df20.loc[:,['Q3','Q6','year']].reset_index().rename(columns={'Q3':'Country', 'Q6':'Exp'}).fillna('etc')\nExp19_Wo = df19.loc[:,['Q3','Q15','year']].reset_index().rename(columns={'Q3':'Country', 'Q15':'Exp'}).fillna('etc')\nExp18_Wo = df18.loc[:,['Q3','Q8','year']].reset_index().rename(columns={'Q3':'Country', 'Q8':'Exp'}).fillna('etc')\nExp17_Wo = df17.loc[:,['Country','Tenure', 'year']].reset_index().rename(columns={'Country':'Country', 'Tenure':'Exp'}).fillna('etc')\n\nExp21_Wo= Exp21_Wo.replace({'I have never written code': '< 1 years',  '1-3 years': '1-2 years'}).replace(['10-20 years', '20+ years'], '10+ years' )\nExp20_Wo= Exp20_Wo.replace({'I have never written code': '< 1 years'}).replace(['10-20 years', '20+ years'], '10+ years' )\nExp19_Wo= Exp19_Wo.replace({'I have never written code': '< 1 years'}).replace(['10-20 years', '20+ years'], '10+ years' )\nExp18_Wo= (Exp18_Wo.replace({'0-1': '< 1 years', '1-2': '1-2 years', '5-10':'5-10 years'})\n        .replace(['2-3', '3-4',  '4-5'],'3-5 years')\n       .replace(['10-15', '15-20','20-25', '30 +','25-30'],'10+ years'))\nExp17_Wo=(Exp17_Wo.replace({'More than 10 years':'10+ years', '1 to 2 years':'1-2 years',  'Less than a year':'< 1 years',\n       '3 to 5 years':'3-5 years', \"I don't write code to analyze data\":'< 1 years',\n       '6 to 10 years':'5-10 years'}))\n                                                                                                                   \n#data 정제(한꺼번에 이름바꾸기)\nExp5y_Wo= pd.concat([Exp17_Wo, Exp18_Wo, Exp19_Wo, Exp20_Wo, Exp21_Wo]).reset_index()\nExp5y_Wo=(Exp5y_Wo.groupby(['year', 'Exp'])\n           .size()\n           .reset_index()\n           .rename(columns = {0:\"Count\"}))\n\n#percent data 넣기\nExp21_per_W= Exp5y_Wo[Exp5y_Wo['year'] == \"2021\"].reset_index(drop = True)\nExp21_per_W['percentage'] = Exp21_per_W[\"Count\"] / Exp21_per_W[\"Count\"].sum()\nExp21_per_W['%'] = np.round(Exp21_per_W['percentage'] * 100, 1)\n\nExp20_per_W = Exp5y_Wo[Exp5y_Wo['year'] == \"2020\"].reset_index(drop = True)\nExp20_per_W['percentage'] = Exp20_per_W[\"Count\"] / Exp20_per_W[\"Count\"].sum()\nExp20_per_W['%'] = np.round(Exp20_per_W['percentage'] * 100, 1)\n\nExp19_per_W = Exp5y_Wo[Exp5y_Wo['year'] == \"2019\"].reset_index(drop = True)\nExp19_per_W['percentage'] = Exp19_per_W[\"Count\"] / Exp19_per_W[\"Count\"].sum()\nExp19_per_W['%'] = np.round(Exp19_per_W['percentage'] * 100, 1)\n\nExp18_per_W = Exp5y_Wo[Exp5y_Wo['year'] == \"2018\"].reset_index(drop = True)\nExp18_per_W['percentage'] = Exp18_per_W[\"Count\"] / Exp18_per_W[\"Count\"].sum()\nExp18_per_W['%'] = np.round(Exp18_per_W['percentage'] * 100, 1)\n\nExp17_per_W = Exp5y_Wo[Exp5y_Wo['year'] == \"2017\"].reset_index(drop = True)\nExp17_per_W['percentage'] = Exp17_per_W[\"Count\"] / Exp17_per_W[\"Count\"].sum()\nExp17_per_W['%'] = np.round(Exp17_per_W['percentage'] * 100, 1)\n\n#data 완성\nExp5y_per_W = pd.concat([Exp17_per_W, Exp18_per_W, Exp19_per_W, Exp20_per_W, Exp21_per_W], ignore_index = True)\nExp5y_per_W= pd.pivot(Exp5y_per_W, index = \"year\", columns = 'Exp', values = \"%\").reset_index()\nExp5y_per_W.fillna('0')\nExp5y_percent_order = Exp5y_per_W['year'].tolist()\n\nfig = go.Figure()\nfig.add_trace(go.Scatter(\n    x = Exp5y_percent_order, \n    y = Exp5y_per_W['< 1 years'].tolist(), \n    mode = \"lines\", \n    name = '< 1 years',\n    line = dict(width = 0.5),\n    stackgroup = \"one\",\n    marker_color='#F2798F'))\nfig.add_trace(go.Scatter(\n    x = Exp5y_percent_order, \n    y = Exp5y_per_W['1-2 years'].tolist(), \n    mode = \"lines\", \n    name = '1-2 years',\n    line = dict(width = 0.5),\n    stackgroup = \"one\",\n    marker_color='#88BFBA'))\nfig.add_trace(go.Scatter(\n    x = Exp5y_percent_order, \n    y = Exp5y_per_W['3-5 years'].tolist(), \n    mode = \"lines\", \n    name = '3-5 years',\n    line = dict(width = 0.5),\n    stackgroup = \"one\",\n    marker_color='#CDD9A3'))\nfig.add_trace(go.Scatter(\n    x = Exp5y_percent_order, \n    y = Exp5y_per_W['5-10 years'].tolist(), \n    mode = \"lines\", \n    name = '5-10 years',\n    line = dict(width = 0.5),\n    stackgroup = \"one\",\n    marker_color='#F28705'))\nfig.add_trace(go.Scatter(\n    x = Exp5y_percent_order, \n    y = Exp5y_per_W['10+ years'].tolist(), \n    mode = \"lines\", \n    name = '10+ years',\n    line = dict(width = 0.5),\n    stackgroup = \"one\",\n    marker_color='#D9946C'))\n\nfig.add_trace(go.Scatter(\n    x = Exp5y_percent_order, \n    y = Exp5y_per_W['etc'].tolist(), \n    mode = \"lines\", \n    name = 'etc',\n    line = dict(width = 1),\n    stackgroup = \"one\",\n    marker_color='#F2D64B'))\n\nfig.update_traces(hovertemplate='<b>Percent</b>: %{y}%<br>')\nfig.update_layout(yaxis_range = (0, 100), title_font_size=20,\n                  title_text=\"<b>Experience in world</b>\",\n                  height=500, width=700,\n                  title_x=0.5)\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\nfig.add_annotation(dict(font=dict(size=14),\n                                    x=0.8,\n                                    y=-0.2,\n                                    showarrow=False,\n                                    text=\"@green_yhjw\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\nfig.show()\n\n```\n\n\n```python\n#data preprocessing\nExp21 = df21_Ea.loc[:,['Q3','Q6', 'year']].reset_index().rename(columns={'Q3':'East_Asia', 'Q6':'Exp'}).fillna('etc')\nExp20 = df20_Ea.loc[:,['Q3','Q6','year']].reset_index().rename(columns={'Q3':'East_Asia', 'Q6':'Exp'}).fillna('etc')\nExp19 = df19_Ea.loc[:,['Q3','Q15','year']].reset_index().rename(columns={'Q3':'East_Asia', 'Q15':'Exp'}).fillna('etc')\nExp18 = df18_Ea.loc[:,['Q3','Q8','year']].reset_index().rename(columns={'Q3':'East_Asia', 'Q8':'Exp'}).fillna('etc')\nExp17 = df17_Ea.loc[:,['Country','Tenure', 'year']].reset_index().rename(columns={'Country':'East_Asia', 'Tenure':'Exp'}).fillna('etc')\n\nExp21Uni=['3-5 years', '< 1 years', '1-3 years', '10-20 years',\n       'I have never written code', '5-10 years', '20+ years']\nExp20Uni= ['3-5 years', '< 1 years', '5-10 years', '1-2 years', 'etc',\n       '20+ years', '10-20 years', 'I have never written code']\nExp19Uni=['1-2 years', '5-10 years', '< 1 years',\n       'I have never written code', '3-5 years', '10-20 years',\n       '20+ years', 'etc']\nExp18Uni=['0-1', '2-3', '1-2', '5-10', '3-4', '10-15', '15-20', '4-5',\n       '20-25', '30 +', 'etc', '25-30']\nExp17Uni=['More than 10 years', '1 to 2 years', 'etc', 'Less than a year',\n       '3 to 5 years', \"I don't write code to analyze data\",\n       '6 to 10 years']\n\nExp21= Exp21.replace({'I have never written code': '< 1 years',  '1-3 years': '1-2 years'}).replace(['10-20 years', '20+ years'], '10+ years' )\nExp20= Exp20.replace({'I have never written code': '< 1 years'}).replace(['10-20 years', '20+ years'], '10+ years' )\nExp19= Exp19.replace({'I have never written code': '< 1 years'}).replace(['10-20 years', '20+ years'], '10+ years' )\nExp18= (Exp18.replace({'0-1': '< 1 years', '1-2': '1-2 years', '5-10':'5-10 years'})\n        .replace(['2-3', '3-4',  '4-5'],'3-5 years')\n       .replace(['10-15', '15-20','20-25', '30 +','25-30'],'10+ years'))\nExp17=(Exp17.replace({'More than 10 years':'10+ years', '1 to 2 years':'1-2 years',  'Less than a year':'< 1 years',\n       '3 to 5 years':'3-5 years', \"I don't write code to analyze data\":'< 1 years',\n       '6 to 10 years':'5-10 years'}))\n                                                                                                                \nExp5y= pd.concat([Exp17, Exp18, Exp19, Exp20, Exp21]).reset_index()\nExp5y=(Exp5y.groupby(['year', 'Exp'])\n           .size()\n           .reset_index()\n           .rename(columns = {0:\"Count\"}))\n\nExp21_percent = Exp5y[Exp5y['year'] == \"2021\"].reset_index(drop = True)\nExp21_percent['percentage'] = Exp21_percent[\"Count\"] / Exp21_percent[\"Count\"].sum()\nExp21_percent['%'] = np.round(Exp21_percent['percentage'] * 100, 1)\nExp21_percent\n\nExp20_percent = Exp5y[Exp5y['year'] == \"2020\"].reset_index(drop = True)\nExp20_percent['percentage'] = Exp20_percent[\"Count\"] / Exp20_percent[\"Count\"].sum()\nExp20_percent['%'] = np.round(Exp20_percent['percentage'] * 100, 1)\nExp20_percent\n\nExp19_percent = Exp5y[Exp5y['year'] == \"2019\"].reset_index(drop = True)\nExp19_percent['percentage'] = Exp19_percent[\"Count\"] / Exp19_percent[\"Count\"].sum()\nExp19_percent['%'] = np.round(Exp19_percent['percentage'] * 100, 1)\nExp19_percent\n\nExp18_percent = Exp5y[Exp5y['year'] == \"2018\"].reset_index(drop = True)\nExp18_percent['percentage'] = Exp18_percent[\"Count\"] / Exp18_percent[\"Count\"].sum()\nExp18_percent['%'] = np.round(Exp18_percent['percentage'] * 100, 1)\nExp18_percent\n\nExp17_percent = Exp5y[Exp5y['year'] == \"2017\"].reset_index(drop = True)\nExp17_percent['percentage'] = Exp17_percent[\"Count\"] / Exp17_percent[\"Count\"].sum()\nExp17_percent['%'] = np.round(Exp17_percent['percentage'] * 100, 1)\nExp17_percent\n\n\n#graph\nExp5y_percent = pd.concat([Exp17_percent, Exp18_percent, Exp19_percent, Exp20_percent, Exp21_percent], ignore_index = True)\nExp5y_percent= pd.pivot(Exp5y_percent, index = \"year\", columns = 'Exp', values = \"%\").reset_index()\nExp5y_percent.fillna('0')\n\nExp5y_percent_order = Exp5y_percent['year'].tolist()\n\nfig = go.Figure()\n\nfig.add_trace(go.Scatter(\n    x = Exp5y_percent_order, \n    y = Exp5y_percent['< 1 years'].tolist(), \n    mode = \"lines\", \n    name = '< 1 years',\n    line = dict(width = 0.5),\n    stackgroup = \"one\",\n    marker_color='#F2798F'))\nfig.add_trace(go.Scatter(\n    x = Exp5y_percent_order, \n    y = Exp5y_percent['1-2 years'].tolist(), \n    mode = \"lines\", \n    name = '1-2 years',\n    line = dict(width = 0.5),\n    stackgroup = \"one\",\n    marker_color='#88BFBA'))\nfig.add_trace(go.Scatter(\n    x = Exp5y_percent_order, \n    y = Exp5y_percent['3-5 years'].tolist(), \n    mode = \"lines\", \n    name = '3-5 years',\n    line = dict(width = 0.5),\n    stackgroup = \"one\",\n    marker_color='#CDD9A3'))\nfig.add_trace(go.Scatter(\n    x = Exp5y_percent_order, \n    y = Exp5y_percent['5-10 years'].tolist(), \n    mode = \"lines\", \n    name = '5-10 years',\n    line = dict(width = 0.5),\n    stackgroup = \"one\",\n    marker_color='#F28705'))\nfig.add_trace(go.Scatter(\n    x = Exp5y_percent_order, \n    y = Exp5y_percent['10+ years'].tolist(), \n    mode = \"lines\", \n    name = '10+ years',\n    line = dict(width = 0.5),\n    stackgroup = \"one\",\n    marker_color='#D9946C'))\nfig.add_trace(go.Scatter(\n    x = Exp5y_percent_order, \n    y = Exp5y_percent['etc'].tolist(), \n    mode = \"lines\", \n    name = 'etc',\n    line = dict(width = 0.5),\n    stackgroup = \"one\",\n    marker_color='#F2D64B'))\nfig.update_traces(hovertemplate='<b>Percent</b>: %{y}%<br>')\nfig.update_layout(yaxis_range = (0, 100),\n                  title_text=\"<b>Experience in East Asia</b>\",\n                  height=500, width=700, title_font_size=20,\n                  title_x=0.5)\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\nfig.add_annotation(dict(font=dict(size=14),\n                                    x=0.8,\n                                    y=-0.2,\n                                    showarrow=False,\n                                    text=\"@green_yhjw\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\nfig.show()\n```\n\n# 3.1.7 Salary transformation\n---\n\n<h2> World & East Asia Annual salary: Bar-H plot\n</h2>\n\n- \\$ 200,000 ~ : World (2.9%) is more than 50% compared to East Asia (1.3%)\n- \\$ ~250,000 : World (59.2%) is less than East Asia (50.3%) <br>\n    = East Asia's annual salary gap between rich and poor is less.\n- \\$ 25,000~60,000: The highest section in East Asia at 24%. <br>\n= The annual salary section that we aim for.\n\n![](/images/kaggle_final/newplot18.png)\n\n```python\n#data preprocessing\ndf21_salary_=df21['Q25'].value_counts().to_frame().rename(index={'$0-999':'<999','>$1,000,000':'1,000,000~','$500,000-999,999':'500,000-999,999'}).fillna(0)\ndf21_Ea_salary_=df21_Ea['Q25'].value_counts().to_frame().rename(index={'$0-999':'<999','>$1,000,000':'1,000,000~','$500,000-999,999':'500,000-999,999'}).fillna(0)\n\n#퍼센트\ndf21_salary__=(df21_salary_['Q25']/(df21_salary_['Q25'].sum())*100).round(1).to_frame().rename(columns={'Q25':'World'})\ndf21_Ea_salary__=(df21_Ea_salary_['Q25']/(df21_Ea_salary_['Q25'].sum())*100).round(1).to_frame().rename(columns={'Q25':'EA'})\n\n#그룹화\ndf21_salary=(df21_salary__.rename(index=\n                               {'1,000-1,999':'1,000-7,499',\n                                '2,000-2,999':'1,000-7,499',\n                                '3,000-3,999':'1,000-7,499',\n                                '4,000-4,999':'1,000-7,499',\n                                '5,000-7,499':'1,000-7,499'})\n                                .rename(index={'7,500-9,999':'7,500-24,999',\n                                '10,000-14,999':'7,500-24,999',\n                                '15,000-19,999':'7,500-24,999',\n                                '20,000-24,999':'7,500-24,999' })\n                                .rename(index={'25,000-29,999':'25,000-59,999',\n                                 '30,000-39,999':'25,000-59,999',\n                                 '40,000-49,999':'25,000-59,999',\n                                 '50,000-59,999':'25,000-59,999'})\n                                .rename(index={'60,000-69,999':'60,000-99,999',\n                                 '70,000-79,999':'60,000-99,999',\n                                 '80,000-89,999':'60,000-99,999',\n                                 '90,000-99,999':'60,000-99,999'})\n                                .rename(index={'100,000-124,999':'100,000-199,999',\n                                 '125,000-149,999':'100,000-199,999',\n                                 '150,000-199,999':'100,000-199,999'})\n                                .rename(index={'200,000-249,999':'200,000-1,000,000~',\n                                 '250,000-299,999':'200,000-1,000,000~',\n                                 '300,000-499,999':'200,000-1,000,000~',\n                                 '500,000-999,999':'200,000-1,000,000~',\n                                 '1,000,000~':'200,000-1,000,000~'})\n                                .reset_index().groupby('index').sum()\n                                 .reindex(index = ['<999', \n                                                  '1,000-7,499',\n                                                  '7,500-24,999', \n                                                  '25,000-59,999', \n                                                  '60,000-99,999', \n                                                 '100,000-199,999', \n                                                 '200,000-1,000,000~']))\n\ndf21_Ea_salary=(df21_Ea_salary__.rename(index=\n                               {'1,000-1,999':'1,000-7,499',\n                               '2,000-2,999':'1,000-7,499',\n                               '3,000-3,999':'1,000-7,499',\n                               '4,000-4,999':'1,000-7,499',\n                               '5,000-7,499':'1,000-7,499'})\n                                .rename(index={'7,500-9,999':'7,500-24,999',\n                               '10,000-14,999':'7,500-24,999',\n                               '15,000-19,999':'7,500-24,999',\n                               '20,000-24,999':'7,500-24,999'})\n                                .rename(index={'25,000-29,999':'25,000-59,999',\n                               '30,000-39,999':'25,000-59,999',\n                               '40,000-49,999':'25,000-59,999',\n                               '50,000-59,999':'25,000-59,999'})\n                                .rename(index={'60,000-69,999':'60,000-99,999',\n                               '70,000-79,999':'60,000-99,999',\n                               '80,000-89,999':'60,000-99,999',\n                               '90,000-99,999':'60,000-99,999'})\n                                .rename(index={'100,000-124,999':'100,000-199,999',\n                               '125,000-149,999':'100,000-199,999',\n                               '150,000-199,999':'100,000-199,999'})\n                                .rename(index={'200,000-249,999':'200,000-1,000,000~',\n                               '250,000-299,999':'200,000-1,000,000~',\n                               '300,000-499,999\t':'200,000-1,000,000~',\n                               '500,000-999,999':'200,000-1,000,000~',\n                               '1,000,000~':'200,000-1,000,000~'})\n                                .reset_index().groupby('index').sum()\n                                .reindex(index = ['<999', \n                                                  '1,000-7,499',\n                                                  '7,500-24,999', \n                                                  '25,000-59,999', \n                                                  '60,000-99,999', \n                                                 '100,000-199,999', \n                                                 '200,000-1,000,000~']))\n\n#graph\nWorld = df21_salary['World'].values\nEast_Asia = df21_Ea_salary['EA'].values\ny = df21_salary.index\n\nfig = go.Figure(data=[\n    go.Bar(y=y, x=World, orientation='h', name=\"World\", base=0, hovertemplate='<b>World</b>: %{x}%<br>', marker_color='#979DA6'),\n    go.Bar(y=y, x=-East_Asia, orientation='h', name=\"East Asia\", base=0, hovertemplate='<b>East Asia</b>: %{x}%<br>', marker_color='#F2D64B')\n    ])\n\nfig.update_layout(barmode='stack')\nfig.update_layout(\n    margin=dict(l=200, r=0, t=200, b=100),\n    autosize=False,\n    title_text=\"<b>                       Salary in East Asia vs World</b>\", height=600, width=700, title_font_size=20, title_x=0.5)\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\nfig.update_layout(legend=dict(\n    orientation=\"h\",\n    yanchor=\"bottom\",\n    y=1.1,\n    xanchor=\"right\",\n    x=1))\nfig.show()\n```\n\n<h2> World experience and annual salary: Heat Map </h2>\n\n<h4>Relatively **positive correlation.** </h4>\n\n- Even with 5-10 years of experience, more than 45% has an annual salary of less than $20,000\n\n- With more than 10 years of experience, more than 30% receive an annual salary of $100,000.\n\n![](/images/kaggle_final/newplot19.png)\n![](/images/kaggle_final/newplot20.png)\n\n```python\n#data preprocessing\nSalExp21= df21.loc[:, ['region', 'Q25', 'Q6']].rename(columns={'Q6':'Exp', 'Q25':'Salary'})\n\n\nSalExp21=(SalExp21\n          .replace(['0-999','$0-999','0'], '< 999')\n          .replace({'>$1,000,000':'200,000~'})\n          .replace(['1,000-1,999','2,000-2,999','3,000-3,999', \n        '4,000-4,999','5,000-7,499','7,500-9,999','10,000-14,999', '15,000-19,999'],'1,000-20,000')\n          .replace(['20,000-24,999''25,000-29,999','30,000-39,999', '40,000-49,999', \n        '50,000-59,999'],'20,000-59,999') \n           .replace(['60,000-69,999', '70,000-79,999', '80,000-89,999', \n        '90,000-99,999'], '60,000-99,999')\n          .replace(['100,000-124,999', '300,000-499,999',\n        '125,000-149,999', '125,000-149,999',\n        '150,000-199,999'],'100,000-199,999')\n          .replace(['200,000-249,999', '250,000-299,999', \n        '1,000,000','$500,000-999,999'], '200,000~')\n        .replace({'I have never written code': '< 1 years'})\n          .replace(['10-20 years', '20+ years'], '10+ years' )\n         )\n\nsal_order=['< 999', '1,000-20,000', '20,000-59,999', '60,000-99,999','100,000-199,999', '200,000~']\nExp21_order=['< 1 years', '1-3 years','3-5 years', '5-10 years', '10+ years' ]\n\n\n\nSalExp21_Ea = SalExp21[SalExp21['region'] == \"EastAsia\"].reset_index(drop = True)\nSalExp21_Ea=(SalExp21_Ea.groupby(['Exp', 'Salary'])\n           .size()\n          .unstack().fillna(0).astype('int64'))\n\nSalExp21_Wo = SalExp21[SalExp21['region'] == \"World\"].reset_index(drop = True)\nSalExp21_Wo=(SalExp21_Wo.groupby(['Exp', 'Salary'])\n           .size()\n          .unstack().fillna(0).astype('int64'))\nSalExp21_Wo\n\n\n\n#graph\n#World\nz = SalExp21_Wo\nz = z[sal_order]\nz = z.reindex(Exp21_order)\n\nz_data = z.apply(lambda x:np.round(x/x.sum()*100, 2), axis = 1).to_numpy() # convert to correlation matrix\nx = sal_order\ny = Exp21_order\n\nfig = ff.create_annotated_heatmap(z_data, x = x, y = y, colorscale = \"sunset\")\nfig.update_layout( title_text=\"<b>Experience and salary in World</b>\",\n                  height=700, width=700, title_font_size=20,\n                  title_x=0.5,\n                  margin=dict(l=100, r=100, t=200, b=100))\n\nfig.add_annotation(dict(font=dict(size=14),\n                                    x=0.85,\n                                    y=-0.1,\n                                    showarrow=False,\n                                    text=\"@green_yhjw\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\nfig.show()\n\n\n#East Asia\nz = SalExp21_Ea\nz = z[sal_order]\nz = z.reindex(Exp21_order)\nz_data = z.apply(lambda x:np.round(x/x.sum(), 2), axis = 1).to_numpy() # convert to correlation matrix\nx = sal_order\ny = Exp21_order\n\nfig = ff.create_annotated_heatmap(z_data, x = x, y = y, colorscale = \"sunset\")\nfig.update_layout(title_text=\"<b>Experience and salary in East Asia</b>\",\n                  height=700, width=700, title_font_size=20,\n                  title_x=0.5,\n                  margin=dict(l=100, r=100, t=200, b=100))\n\nfig.add_annotation(dict(font=dict(size=14),\n                                    x=0.85,\n                                    y=-0.1,\n                                    showarrow=False,\n                                    text=\"@green_yhjw\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\nfig.show()\n```\n\n<h2> World & East Asia Degree/Annual salary: Heat Map </h2>\n\n- \\\\$ ~20,000 : Regardless of degree, about 40% of the annual salary is \\$ 20,000 or less. <br>\n    Guess it's the ratio that comes from a student. <br>\n- \\$ 25,000-100,000 : Earned more than 40% with a bachelor's degree alone in East Asia  <br>\n    (World: less than 20%) <br>\n- \\$ 200,000~ : Even with a doctorate or higher, it is difficult to obtain it from East Asia.\n\n![](/images/kaggle_final/newplot21.png)\n![](/images/kaggle_final/newplot22.png)\n\n```python\n#data preprocessing\nSalary21= df21.loc[:, ['region', 'Q25', 'year']].rename(columns={'Q3':'Country', 'Q25':'Salary'})\nsalary21_Index=['< 999', '1,000-20,000', '20,000-59,999', '60,000-99,999','100,000-199,999', '200,000~']\n\nSalary21=(Salary21\n          .replace(['0-999','$0-999','0'], '< 999')\n          .replace({'>$1,000,000':'200,000~'})\n          .replace(['1,000-1,999','2,000-2,999','3,000-3,999', '4,000-4,999','5,000-7,499','7,500-9,999','10,000-14,999', '15,000-19,999'],'1,000-20,000')\n          .replace(['20,000-24,999''25,000-29,999','30,000-39,999', '40,000-49,999',  '50,000-59,999'],'20,000-59,999') \n           .replace(['60,000-69,999', '70,000-79,999', '80,000-89,999','90,000-99,999'], '60,000-99,999')\n          .replace(['100,000-124,999', '300,000-499,999', '125,000-149,999', '125,000-149,999', '150,000-199,999'],'100,000-199,999')\n          .replace(['200,000-249,999', '250,000-299,999','1,000,000','$500,000-999,999'], '200,000~')).fillna('0')\nsal_order=['< 999', '1,000-20,000', '20,000-59,999', '60,000-99,999','100,000-199,999', '200,000~']\n\nSalary21=(Salary21.groupby(['region', 'Salary'])\n           .size()\n           .reset_index()\n           .rename(columns = {0:\"Count\"}))\n\nSalary21_Ea = Salary21[Salary21['region'] == \"EastAsia\"].reset_index(drop = True)\nSalary21_Ea['%']=((Salary21_Ea['Count'] / Salary21_Ea['Count'].sum())*100).round(2)\nSalary21_Wo = Salary21[Salary21['region'] == \"World\"].reset_index(drop = True)\nSalary21_Wo['%']=((Salary21_Wo['Count'] / Salary21_Wo['Count'].sum())*100).round(2)\n\nDgr_Sal_21= df21.loc[:, ['region', 'Q25', 'Q4']].rename(columns={'Q4':'Dgree', 'Q25':'Salary'})\nDgr_Sal_21 = (Dgr_Sal_21.replace(['0-999','$0-999','0'], '< 999')\n          .replace({'>$1,000,000':'200,000~'})\n          .replace(['1,000-1,999','2,000-2,999','3,000-3,999', '4,000-4,999','5,000-7,499','7,500-9,999','10,000-14,999', '15,000-19,999'],'1,000-20,000')\n          .replace(['20,000-24,999''25,000-29,999','30,000-39,999', '40,000-49,999', '50,000-59,999'],'20,000-59,999') \n          .replace(['60,000-69,999', '70,000-79,999', '80,000-89,999', '90,000-99,999'], '60,000-99,999')\n          .replace(['100,000-124,999', '300,000-499,999', '125,000-149,999', '125,000-149,999','150,000-199,999'],'100,000-199,999')\n          .replace(['200,000-249,999', '250,000-299,999','1,000,000','$500,000-999,999'], '200,000~')\n          .replace({'I prefer not to answer':'etc'})\n          .replace(['No formal education past high school', 'Some college/university study without earning a bachelor’s degree'],'~college')\n          .replace(['Doctoral degree', 'Professional doctorate'],'Doctoral degree~'))\n\n\n#EastAsia 뽑기\nDgr_Sal_21_Ea= Dgr_Sal_21[Dgr_Sal_21['region'] == \"EastAsia\"].reset_index(drop = True)\nDgr_Sal_21_Ea = Dgr_Sal_21_Ea.groupby(['Dgree', 'Salary']).size().unstack().fillna(0).astype('int64')\n\ndgree_order=[ '~college','Bachelor’s degree', 'Master’s degree', 'Doctoral degree~', 'etc']\n\n\n#graph\n#World\nz = Dgr_Sal_21.groupby(['Dgree', 'Salary']).size().unstack().fillna(0).astype('int64')\nz = z[sal_order]\nz = z.reindex(dgree_order)\n\nz_data = z.apply(lambda x:np.round(x/x.sum()*100, 2), axis = 1).to_numpy() # convert to correlation matrix\nx = sal_order\ny = dgree_order\n\nfig = ff.create_annotated_heatmap(z_data, x = x, y = y, colorscale = \"sunset\")\nfig.update_layout( title_text=\"<b>    Degree-Salary in World</b>\",\n                  height=700, width=700, title_font_size=20,\n                  title_x=0.5,\n                  margin=dict(l=150, r=100, t=200, b=50))\nfig.update_traces(hovertemplate='<b>Degree</b>: %{y}<br>'+\n                                '<b>Salary</b>: %{x}<br>'+\n                                '<b>Percent</b>: %{z}%')\nfig.add_annotation(dict(font=dict(size=14),\n                                    x=0.8,\n                                    y=-0.1,\n                                    showarrow=False,\n                                    text=\"@green_yhjw\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\nfig.show()\n\n\n#East Asia\nz = Dgr_Sal_21_Ea\nz = z[sal_order]\nz = z.reindex(dgree_order)\nz_data = z.apply(lambda x:np.round(x/x.sum()*100, 2), axis = 1).to_numpy() # convert to correlation matrix\nx = sal_order\ny = dgree_order\n\nfig = ff.create_annotated_heatmap(z_data, x = x, y = y, colorscale = \"sunset\")\nfig.update_layout(title_text=\"<b>    Degree-Salary in East Asia</b>\",\n                  height=700, width=700, title_font_size=20,\n                  title_x=0.5,\n                  margin=dict(l=150, r=100, t=200, b=50))\nfig.update_traces(hovertemplate='<b>Degree</b>: %{y}<br>'+\n                                '<b>Salary</b>: %{x}<br>'+\n                                '<b>Percent</b>: %{z}%')\nfig.add_annotation(dict(font=dict(size=14),\n                                    x=0.8,\n                                    y=-0.1,\n                                    showarrow=False,\n                                    text=\"@green_yhjw\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\nfig.show()\n```\n\n# 3.1.8 Language transformation\n---\n\n<h2>World & East Asia Programming Language: Bar plot </h2>\n- Python: 80% of the world and 85% of East Asia use it.\n\n<h4>\n<p style=\"color:#FF0000\";>\nWe've been working on the project as python, so I hope we can continue to learn python and become experienced Data Scientists!\n    </p></h4>\n\n![](/images/kaggle_final/newplot23.png)\n![](/images/kaggle_final/newplot24.png)\n\n```python\n#data preprocessing\n#world\nprogramming_list = [\"Python\", \"R\", \"SQL\", \"Java\", \"C\", \"Bash\", \"Javascript\", \"C++\"]\nprogramming_df = pd.Series(programming_list)\n\ndf_2019 = df19[df19['Q19'].isin(programming_df)]\ndf_2020 = df20[df20['Q8'].isin(programming_df)]\ndf_2021 = df21[df21['Q8'].isin(programming_df)]\n\ndf19Lag = df_2019.loc[:, ['region', 'Q5', 'Q19', 'year']]\ndf19Lag = df19Lag.rename(columns = {'Q19': 'Language'}, inplace = False) # To match with other datasets\ndf20Lag = df_2020.loc[:, ['region', 'Q5', 'Q8', 'year']].rename(columns = {'Q8': 'Language'}, inplace = False)\ndf21Lag = df_2021.loc[:, ['region', 'Q5', 'Q8', 'year']].rename(columns = {'Q8': 'Language'}, inplace = False)\n\ndf3y_Lag = pd.concat([df19Lag, df20Lag, df21Lag])\ndf3y_Lag = df3y_Lag.groupby(['year', 'Language']).size().reset_index().rename(columns = {0:\"Count\"})\ndf3y_Lag\n\n# 2019\ndfLang_19 = df3y_Lag[df3y_Lag['year'] == \"2019\"].reset_index(drop = True)\ndfLang_19['percentage'] = dfLang_19[\"Count\"] / dfLang_19[\"Count\"].sum()\ndfLang_19['%'] = np.round(dfLang_19['percentage'] * 100, 1)\n\n# 2020\ndfLang_20 = df3y_Lag[df3y_Lag['year'] == \"2020\"].reset_index(drop = True)\ndfLang_20['percentage'] = dfLang_20[\"Count\"] / dfLang_20[\"Count\"].sum()\ndfLang_20['%'] = np.round(dfLang_20['percentage'] * 100, 1)\n\n# 2021\ndfLang_21 = df3y_Lag[df3y_Lag['year'] == \"2021\"].reset_index(drop = True)\ndfLang_21['percentage'] = dfLang_21[\"Count\"] / dfLang_21[\"Count\"].sum()\ndfLang_21['%'] = np.round(dfLang_21['percentage'] * 100, 1)\n\ndfLang_19=dfLang_19.sort_values(by='%', ascending=False)\ndfLang_20=dfLang_20.sort_values(by='%', ascending=False)\ndfLang_21=dfLang_21.sort_values(by='%', ascending=False)\n\n#graph\nfig = go.Figure()\n\nfig.add_trace(go.Bar(x = dfLang_19['Language'], \n                     y = dfLang_19['%'], \n                     name = \"2019\", \n                     text = dfLang_19['%'].astype(str) + \"%\", \n                     textposition='auto', marker_color='#CDD9A3'))\n\nfig.add_trace(go.Bar(x = dfLang_20['Language'], \n                     y = dfLang_20['%'], \n                     name = \"2020\", \n                     text = dfLang_20['%'].astype(str) + \"%\", \n                     textposition='auto', marker_color='#F28705'))\n\nfig.add_trace(go.Bar(x = dfLang_21['Language'], \n                     y = dfLang_21['%'], \n                     name = \"2021\", \n                     text = dfLang_21['%'].astype(str) + \"%\", \n                     textposition='auto', marker_color='#88BFBA'))\nfig.update_layout(title='<b>Language in World</b>',title_font_size=20,\n                  margin = dict(t=100, l=100, r=50, b=100),\n                  height=600, width=700,\n                  xaxis_title=None,\n                  yaxis_title=None)\nfig.update_traces(hovertemplate='<b>Percent</b>: %{y}%<br>'+\n                                '<b>Language</b>: %{x}<br>')\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\nfig.update_layout(legend=dict(\n    orientation=\"v\",\n    yanchor=\"bottom\",\n    y=0.8,\n    xanchor=\"right\",\n    x=1))\nfig.add_annotation(dict(font=dict(size=14),\n                                    x=0.8,\n                                    y=-0.2,\n                                    showarrow=False,\n                                    text=\"@green_yhjw\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\nfig.show()\n```\n\n\n```python\n#data prprocessing\n#Ea\n\ndf_2019 = df19_Ea[df19_Ea['Q19'].isin(programming_df)]\ndf_2020 = df20_Ea[df20_Ea['Q8'].isin(programming_df)]\ndf_2021 = df21_Ea[df21_Ea['Q8'].isin(programming_df)]\n\ndf19Lag = df_2019.loc[:, ['region', 'Q5', 'Q19', 'year']]\ndf19Lag = df19Lag.rename(columns = {'Q19': 'Language'}, inplace = False) # To match with other datasets\ndf20Lag = df_2020.loc[:, ['region', 'Q5', 'Q8', 'year']].rename(columns = {'Q8': 'Language'}, inplace = False)\ndf21Lag = df_2021.loc[:, ['region', 'Q5', 'Q8', 'year']].rename(columns = {'Q8': 'Language'}, inplace = False)\n\n\ndf3y_Lag = pd.concat([df19Lag, df20Lag, df21Lag])\ndf3y_Lag = df3y_Lag.groupby(['year', 'Language']).size().reset_index().rename(columns = {0:\"Count\"})\ndf3y_Lag\n\n\n# 2019\ndfLang_19 = df3y_Lag[df3y_Lag['year'] == \"2019\"].reset_index(drop = True)\ndfLang_19['percentage'] = dfLang_19[\"Count\"] / dfLang_19[\"Count\"].sum()\ndfLang_19['%'] = np.round(dfLang_19['percentage'] * 100, 1)\n\n# 2020\ndfLang_20 = df3y_Lag[df3y_Lag['year'] == \"2020\"].reset_index(drop = True)\ndfLang_20['percentage'] = dfLang_20[\"Count\"] / dfLang_20[\"Count\"].sum()\ndfLang_20['%'] = np.round(dfLang_20['percentage'] * 100, 1)\n\n# 2021\ndfLang_21 = df3y_Lag[df3y_Lag['year'] == \"2021\"].reset_index(drop = True)\ndfLang_21['percentage'] = dfLang_21[\"Count\"] / dfLang_21[\"Count\"].sum()\ndfLang_21['%'] = np.round(dfLang_21['percentage'] * 100, 1)\n\ndfLang_19=dfLang_19.sort_values(by='%', ascending=False)\ndfLang_20=dfLang_20.sort_values(by='%', ascending=False)\ndfLang_21=dfLang_21.sort_values(by='%', ascending=False)\n\n#graph\nfig = go.Figure()\n\nfig.add_trace(go.Bar(x = dfLang_19['Language'], \n                     y = dfLang_19['%'], \n                     name = \"2019\", \n                     text = dfLang_19['%'].astype(str) + \"%\", \n                     textposition='auto', marker_color='#CDD9A3'))\n\nfig.add_trace(go.Bar(x = dfLang_20['Language'], \n                     y = dfLang_20['%'], \n                     name = \"2020\", \n                     text = dfLang_20['%'].astype(str) + \"%\", \n                     textposition='auto', marker_color='#F28705'))\n\nfig.add_trace(go.Bar(x = dfLang_21['Language'], \n                     y = dfLang_21['%'], \n                     name = \"2021\", \n                     text = dfLang_21['%'].astype(str) + \"%\", \n                     textposition='auto', marker_color='#88BFBA'))\nfig.update_layout(title='<b>Language in EastAsia</b>',title_font_size=20,\n                  margin = dict(t=100, l=100, r=50, b=100),\n                  height=600, width=700,\n                  xaxis_title=None,\n                  yaxis_title=None)\nfig.update_traces(hovertemplate='<b>Percent</b>: %{text}')\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\nfig.add_annotation(dict(font=dict(size=14),\n                                    x=0.8,\n                                    y=-0.2,\n                                    showarrow=False,\n                                    text=\"@green_yhjw\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\nfig.show()\n```\n\n # 3.2 Position of Data Scientist in East Asia\n ---\n\n\n```python\n# data preprocessing\ndf21_Ea_DS = df21_Ea[df21_Ea['Q5'].isin(Data_Scientist)].fillna(0)\n\nsalary_order= ['<999', '1,000-19,999', '20,000-59,999', '60,000-99,999','100,000-199,999', '200,000~']\ndgree_order=[ '~college','Bachelor’s degree', 'Master’s degree', 'Doctoral degree~', 'etc']\n\ndf21_Ea_DS=(df21_Ea_DS\n  #salary      \n          .replace({'$0-999':'<999','>$1,000,000':'1,000,000~','$500,000-999,999':'500,000-999,999'})\n         \n          .replace(['1,000-1,999','2,000-2,999','3,000-3,999', '4,000-4,999','5,000-7,499','7,500-9,999','10,000-14,999', '15,000-19,999'],'1,000-19,999')\n          .replace(['20,000-24,999','25,000-29,999','30,000-39,999', '40,000-49,999', '50,000-59,999'],'20,000-59,999') \n          .replace(['60,000-69,999', '70,000-79,999', '80,000-89,999', '90,000-99,999'], '60,000-99,999')\n          .replace(['100,000-124,999','125,000-149,999','150,000-199,999'],'100,000-199,999')\n          .replace(['200,000-249,999', '250,000-299,999', '300,000-499,999','500,000-999,999', '1,000,000~'], '200,000~')\n  #degree          \n          .replace({'I prefer not to answer':'etc'})\n          .replace(['No formal education past high school','Some college/university study without earning a bachelor’s degree'],'~college')\n          .replace(['Doctoral degree', 'Professional doctorate'],'Doctoral degree~')\n          )\nsal_order= ['<999', '1,000-19,999', '20,000-59,999', '60,000-99,999','100,000-199,999', '200,000~']\ndgree_order=[ '~college','Bachelor’s degree', 'Master’s degree', 'Doctoral degree~', 'etc']\n\n\n```\n\n# 3.2.1 Salary\n---\n\n- Annual salary of Research Scientist.\n: The highest percentage of $2.6 million is 29.81%.\n\n- The annual salary of Machine Learning Engineer.\n: The highest rate of $999 is 31.89%.\n\n- The annual salary of Data Scientist is..\n: The ratio of $1,000 to $20,000 is the highest at 29.19%.\n\n\n<h2>⇒ The higher the annual salary, the lower the overall job rate.</h2>\n\n![](/images/kaggle_final/newplot25.png)\n\n```python\ndf21_Ea_DS_= df21_Ea_DS.loc[:,['Q5','Q25']].reset_index().rename(columns={'Q5':'Data_Scientist', 'Q25':'Salary'}).fillna('etc')\ndf21_Ea_DS_= (df21_Ea_DS_.groupby(['Data_Scientist', 'Salary']).size()\n                         .reset_index()\n                         .rename(columns = {0:\"Count\"}))\n\n#Data Scientist\ndf21_Ea_DS_Ds = df21_Ea_DS_[df21_Ea_DS_['Data_Scientist'] == \"Data Scientist\"].reset_index(drop = True)\ndf21_Ea_DS_Ds['%']=((df21_Ea_DS_Ds['Count'] / df21_Ea_DS_Ds['Count'].sum())*100).round(2)\n\n#Machine Learning Engineer\ndf21_Ea_DS_Mle = df21_Ea_DS_[df21_Ea_DS_['Data_Scientist'] == \"Machine Learning Engineer\"].reset_index(drop = True)\ndf21_Ea_DS_Mle['%']=((df21_Ea_DS_Mle['Count'] / df21_Ea_DS_Mle['Count'].sum())*100).round(2)\n\n#Research Scientist\ndf21_Ea_DS_Rs = df21_Ea_DS_[df21_Ea_DS_['Data_Scientist'] == \"Research Scientist\"].reset_index(drop = True)\ndf21_Ea_DS_Rs['%']=((df21_Ea_DS_Rs['Count'] / df21_Ea_DS_Rs['Count'].sum())*100).round(2)\ndf21_Ea_DS_Rs\n\n\ndf21_Ea_DS_salary = pd.concat([df21_Ea_DS_Ds, df21_Ea_DS_Mle, df21_Ea_DS_Rs], ignore_index = True)\ndf21_Ea_DS_salary= pd.pivot(df21_Ea_DS_salary, index = \"Salary\", columns = 'Data_Scientist', values = \"%\").reset_index().fillna('0')\ndf21_Ea_DS_salary= df21_Ea_DS_salary.set_index(\"Salary\").reindex(sal_order)\n\n#graph\nfig = go.Figure()\nfig.add_trace(go.Bar(x = df21_Ea_DS_salary.index, \n                     y = df21_Ea_DS_salary['Data Scientist'], \n                     name = \"Data Scientist\", \n                     text = df21_Ea_DS_salary['Data Scientist'].astype(str) + \"%\", \n                     textposition='auto', marker_color='#F2798F'))\n\nfig.add_trace(go.Bar(x = df21_Ea_DS_salary.index, \n                     y = df21_Ea_DS_salary['Machine Learning Engineer'], \n                     name = \"Machine Learning Engineer\", \n                     text = df21_Ea_DS_salary['Machine Learning Engineer'].astype(str) + \"%\", \n                     textposition='auto', marker_color='#CDD9A3'))\n\nfig.add_trace(go.Bar(x = df21_Ea_DS_salary.index, \n                     y = df21_Ea_DS_salary['Research Scientist'], \n                     name = \"Research Scientist\", \n                     text = df21_Ea_DS_salary['Research Scientist'].astype(str) + \"%\", \n                     textposition='auto', marker_color='#88BFBA'))\n\nfig.update_layout(barmode='stack',\n                 showlegend=True,\n                 height=600, width=700,\n                 title_text=\"<b>Data Scientist's Salary in East Asia</b>\",\n                 title_x=0.5,\n                 title_font_size=20, \n                  margin=dict(l=100, r=100, t=100, b=100))\nfig.update_traces(hovertemplate='<b>Percent</b>: %{y}%<br>'+\n                                '<b>Salary</b>: %{x}$<br>')\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\nfig.update_layout(legend=dict(\n    orientation=\"v\",\n    yanchor=\"bottom\",\n    y=0.8,\n    xanchor=\"right\",\n    x=1.2))\n\nfig.show()\n```\n\n# 3.2.2 Salary-Experience\n---\n\n<h2>The correlation between the career of a Data Scientist and the annual salary.</h2>\n\nIf you don't have experience, you have the highest rate of $999.\n\nLess than 1 year, 1-3 years have the highest percentage of $999.\n\nThe highest percentage of $20,000 to $60,000 in 3-10 years.\n\n10-20 years have the highest percentage of $60,000 to $100,000.\n\n![](/images/kaggle_final/newplot26.png)\n\n```python\ndf21Ea_DS_ExSal = df21_Ea_DS.loc[:,['Q6','Q25']].reset_index().rename(columns={'Q25':'Salary', 'Q6':'Exp'}).fillna('etc')\ndf21Ea_DS_ExSal= (df21Ea_DS_ExSal.groupby(['Exp', 'Salary']).size().unstack().fillna(0).astype('int64'))\n\nExp_order=['< 1 years','1-3 years','3-5 years', '5-10 years', '10-20 years', '20+ years', 'I have never written code']\n\ndf21Ea_DS_ExSal\n\nz = df21Ea_DS_ExSal\nz = z[sal_order]\nz = z.reindex(Exp_order)\n\nz_data = z.apply(lambda x:np.round(x/x.sum()*100, 2), axis = 1).to_numpy() # convert to correlation matrix\nx = sal_order\ny = Exp_order\n\nfig = ff.create_annotated_heatmap(z_data, x = x, y = y, colorscale = \"sunset\")\nfig.update_layout(title_text=\"<b>    Data Scientist's Experience & Salary </b>\",title_font_size=20,\n                  height=700, width=700,\n                  title_x=0.5,\n                  margin=dict(l=100, r=100, t=200, b=100))\nfig.update_traces(hovertemplate='<b>Salary</b>: %{y}<br>'+\n                                '<b>Experience</b>: %{x}<br>'+\n                                '<b>Percent</b>: %{z}%')\n\nfig.show()\n```\n\n# 3.2.3 Degree\n---\n\n<h2>Comparison of educational background of Data Scientists. <br></h2>\n <br>\n- It has the highest level of Master's Degrees. <br>\n <br>\n- Next, Doctoral Degree, <br>\n <br>\n- The figure was high in the order of Bachelor's Degree. <br>\n\n![](/images/kaggle_final/newplot27.png)\n\n```python\ndf21_Ea_degree = df21_Ea_DS['Q4'].value_counts().to_frame()\ndegree = df21_Ea_degree.index\nvalues = df21_Ea_degree['Q4'].tolist()\n\ncolors = ['#F2798F','#88BFBA', '#CDD9A3', '#F28705', '#D9946C']\nfig = go.Figure(data=[go.Bar(name='Degree', x=degree, y=values ,orientation='v', marker_color=colors, text=values, textposition='outside')])\nfig.update_layout(title_text=\"<b>Data Scientist's Degree (2021)</b>\", title_font_size=20,\n                  height=600, width=700,\n                  title_x=0.5,\n                  margin=dict(l=100, r=100, t=200, b=100))\nfig.update_traces(hovertemplate='<b>Count</b>: %{y}<br>'+\n                                '<b>Degree</b>: %{x}<br>')\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\nfig.add_annotation(dict(font=dict(size=14),\n                                    x=0.8,\n                                    y=-0.2,\n                                    showarrow=False,\n                                    text=\"@green_yhjw\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\nfig.show()\n```\n\n# 3.2.4 Salary-Degree\n---\n\n<h2>Relationship between Data Scientist's academic background and annual salary. <br></h2>\n <br>\n \n- If your educational background is below college, <br>\n: Less than 999 dollars. <br>\n<br>\n\n- The lowest annual salary accounts for the highest percentage.<br>\n <br>\n- Bachelor's degree, Master's Degree, Doctoral degree <br>\n:$2~60,000 dollars accounts for a large proportion <br>\n\n <br>\n<h2>⇒ The higher the education level, the higher the annual salary. <br></h2>\n\n![](/images/kaggle_final/newplot28.png)\n\n```python\ndf21Ea_DS_EduSal= df21_Ea_DS.loc[:, ['Q4', 'Q25']].rename(columns={'Q4':'Edu', 'Q25':'Salary'})\ndf21Ea_DS_EduSal['Edu'].unique()\nEdu_order=['~college', 'Bachelor’s degree','Master’s degree', 'Doctoral degree~', 'etc']\n\ndf21Ea_DS_EduSal= (df21Ea_DS_EduSal.groupby(['Edu', 'Salary']).size().unstack().fillna(0).astype('int64'))\ndf21Ea_DS_EduSal\n\nz = df21Ea_DS_EduSal\nz = z[sal_order]\nz = z.reindex(Edu_order)\n\nz_data = z.apply(lambda x:np.round(x/x.sum()*100, 2), axis = 1).to_numpy() # convert to correlation matrix\nx = sal_order\ny = Edu_order\n\nfig = ff.create_annotated_heatmap(z_data, x = x, y = y, colorscale = \"sunset\")\nfig.update_layout(title_text=\"<b>       Data Scientist's Degree & Salary </b>\", title_font_size=20,\n                  height=700, width=700,\n                  title_x=0.5,\n                  margin=dict(l=150, r=100, t=200, b=50))\nfig.update_traces(hovertemplate='<b>Degree</b>: %{y}<br>'+\n                                '<b>Salary</b>: %{x}<br>'+\n                                '<b>Percent</b>: %{z}%')\nfig.add_annotation(dict(font=dict(size=14),\n                                    x=0.8,\n                                    y=-0.1,\n                                    showarrow=False,\n                                    text=\"@green_yhjw\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\nfig.show()\n```\n\n# 3.2.5 Language\n---\n\n<h2>The language that Data Scientist uses a lot. <br></h2>\n <br>\n- Python accounts for the highest percentage of 80% or more. <br>\n <br>\n- Second, I use R the most. <br>\nR is used less frequently in the order of 2019, 20, and 21. <br>\n <br>\n- From 19 to 21, the percentage of use rate of use 10% -> 4%, a total of 6% decrease. <br>\n <br>\n- The third most frequently used language is SQL. <br>\nSQL increased 0.6 percent in 2020 from 2021. <br>\n <br>\n- The fourth most frequently used languages are C language and C++. <br>\n <br>\n<h2>⇒ To become a Data Scientist, Let's study Python first! <br></h2>\n\n![](/images/kaggle_final/newplot29.png)\n\n```python\n#data preprocessing\ndf20_Ea_DS = df20_Ea[df20_Ea['Q5'].isin(Data_Scientist)]\ndf19_Ea_DS =df19_Ea[df19_Ea['Q5'].isin(Data_Scientist)]\ndf19Ea_DSLag = df19_Ea_DS.loc[:, [ 'Q5', 'Q19', 'year']]\ndf19Ea_DSLag = df19Ea_DSLag.rename(columns = {'Q19': 'Language'}, inplace = False) # To match with other datasets\ndf20Ea_DSLag = df20_Ea_DS.loc[:, [ 'Q5', 'Q8', 'year']].rename(columns = {'Q8': 'Language'}, inplace = False)\ndf21Ea_DSLag = df21_Ea_DS.loc[:, [ 'Q5', 'Q8', 'year']].rename(columns = {'Q8': 'Language'}, inplace = False)\n\ndf3y_Ds_Lag = pd.concat([df19Ea_DSLag, df20Ea_DSLag, df21Ea_DSLag])\ndf3y_Ds_Lag = df3y_Ds_Lag.groupby(['year', 'Language']).size().reset_index().rename(columns = {0:\"Count\"})\ndf3y_Ds_Lag\n\n# 2019\ndfLang_Ds_19 = df3y_Ds_Lag[df3y_Ds_Lag['year'] == \"2019\"].reset_index(drop = True)\ndfLang_Ds_19['percentage'] = dfLang_Ds_19[\"Count\"] / dfLang_Ds_19[\"Count\"].sum()\ndfLang_Ds_19['%'] = np.round(dfLang_Ds_19['percentage'] * 100, 1)\n\n# 2020\ndfLang_Ds_20 = df3y_Ds_Lag[df3y_Ds_Lag['year'] == \"2020\"].reset_index(drop = True)\ndfLang_Ds_20['percentage'] = dfLang_Ds_20[\"Count\"] / dfLang_Ds_20[\"Count\"].sum()\ndfLang_Ds_20['%'] = np.round(dfLang_Ds_20['percentage'] * 100, 1)\n\n# 2021\ndfLang_Ds_21 = df3y_Ds_Lag[df3y_Ds_Lag['year'] == \"2021\"].reset_index(drop = True)\ndfLang_Ds_21['percentage'] = dfLang_Ds_21[\"Count\"] / dfLang_Ds_21[\"Count\"].sum()\ndfLang_Ds_21['%'] = np.round(dfLang_Ds_21['percentage'] * 100, 1)\n\ndfLang_Ds_19=dfLang_Ds_19.sort_values(by='%', ascending=False)\ndfLang_Ds_20=dfLang_Ds_20.sort_values(by='%', ascending=False)\ndfLang_Ds_21=dfLang_Ds_21.sort_values(by='%', ascending=False)\n\n#graph\nfig = go.Figure()\n\nfig.add_trace(go.Bar(x = dfLang_Ds_19['Language'], \n                     y = dfLang_Ds_19['%'], \n                     name = \"2019\", \n                     text = dfLang_Ds_19['%'].astype(str) + \"%\", \n                     textposition='auto', \n                     marker_color='#CDD9A3'))\n\nfig.add_trace(go.Bar(x = dfLang_Ds_20['Language'], \n                     y = dfLang_Ds_20['%'], \n                     name = \"2020\", \n                     text = dfLang_Ds_20['%'].astype(str) + \"%\", \n                     textposition='auto', \n                     marker_color='#F28705'))\n\nfig.add_trace(go.Bar(x = dfLang_Ds_21['Language'], \n                     y = dfLang_Ds_21['%'], \n                     name = \"2021\", \n                     text = dfLang_Ds_21['%'].astype(str) + \"%\", \n                     textposition='auto', \n                     marker_color='#88BFBA'))\n\nfig.update_layout(title='<b>        The language used by the data scientist</b>',title_font_size=22,\n                  margin = dict(t=120, l=100, r=10, b=150),\n                  height=600, width=700)\nfig.update_traces(hovertemplate='<b>Percent</b>: %{y}%<br>'+\n                                '<b>Language</b>: %{x}<br>')\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\nfig.update_layout(legend=dict(\n    orientation=\"h\",\n    yanchor=\"bottom\",\n    y=0.8,\n    xanchor=\"right\",\n    x=1))\nfig.add_annotation(dict(font=dict(size=14),\n                                    x=0.8,\n                                    y=-0.2,\n                                    showarrow=False,\n                                    text=\"@green_yhjw\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\nfig.show()\n```\n\n<h3> Parallel Categories Diagram <br></h3>\n: Visualization of multidimensional categorical datasets <br>\n <br>\nAbout 555 Data Scientist Jobs, Visualize it. <br>\nThe higher the height of the category, the more data is generated. <br>\nIt indicates that the frequency increases. <br>\n\n![](/images/kaggle_final/newplot30.png)\n\n```python\nds_pc=(df21_Ea_DS.loc[:, ['Q5','Q25','Q6','Q4','Q8']]\n                 .replace({'I have never written code': '< 1 years',  '1-3 years': '1-2 years'})\n                 .replace(['10-20 years', '20+ years'], '10+ years' )\n                 .replace([0,'<999'])\n                 )\nfig = px.parallel_categories(ds_pc, labels={'Q5':'Job', 'Q25':'Salary', 'Q6':'Experience', 'Q4':'Degree', 'Q8':'Language'})\n\nfig.update_layout(hovermode = 'x')\nfig.update_layout(title='<b>        Data Scientist</b>',title_font_size=20,\n                  margin = dict(t=120, l=100, r=10, b=150),\n                  height=600, width=700)\nfig.add_annotation(dict(font=dict(size=14),\n                                    x=0.8,\n                                    y=-0.2,\n                                    showarrow=False,\n                                    text=\"@green_yhjw\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\nfig.show()\n```\n\n# 4. Ref.\n---\n\n<h2> Ref. </h2>\n\n- 동아시아 지역 https://ko.wikipedia.org/wiki/%EB%8F%99%EC%95%84%EC%8B%9C%EC%95%84\n\n- 동아시아 인구 https://ko.wikipedia.org/wiki/%EC%95%84%EC%8B%9C%EC%95%84%EC%9D%98_%EC%9D%B8%EA%B5%AC\n\n- 세계 인구 https://ko.wikipedia.org/wiki/%EC%84%B8%EA%B3%84_%EC%9D%B8%EA%B5%AC <br> https://ko.wikipedia.org/wiki/%EC%9D%B8%EA%B0%84_%EA%B0%9C%EB%B0%9C_%EC%A7%80%EC%88%98#2020%EB%85%84\n\n- 동아시아 인간개발지수  https://namu.wiki/w/%EB%8F%99%EC%95%84%EC%8B%9C%EC%95%84\n\n-  Data Scientist란  https://dataprofessional.tistory.com/126 <br> https://terms.naver.com/entry.naver?docId=1691563&cid=42171&categoryId=42183\n\n- Kaggle이란 https://ko.wikipedia.org/wiki/%EC%BA%90%EA%B8%80\n- Python이란 https://ko.wikipedia.org/wiki/%ED%8C%8C%EC%9D%B4%EC%8D%AC\n\n- Kaggle competition Ref. https://www.kaggle.com/miguelfzzz/the-typical-kaggle-data-scientist-in-2021 <br> https://www.kaggle.com/desalegngeb/how-popular-is-kaggle-in-africa\n\n\n- flaricon: <div>Icons made by <a href=\"https://www.freepik.com\" title=\"Freepik\">Freepik</a> from <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">www.flaticon.com</a></div>\n\n\n\n\n# 5. close\n---\n\n안녕하세요 한국에 사는 YH입니다. <br>\npython을 배운지 한달이 채 안되서 명이 한 팀이 되어  이번 대회에 참가 하게 되었습니다. <br>\n많이 부족하지만 여기까지 읽어 주셔서 감사합니다. <br>\n아직은 너무너무 부족한 제출물 이지만, 앞으로 열심히 해서 케글 대회에서 1등하는 그 날까지 지켜봐 주세요 ^^! <br>\n 혹시 코멘트로 다 전하지 못하셨던 말이 있으시다면, 저의 [github blog](https://yoonhwa-p.github.io/)에 방문하여 도움을 주세요!  <br>\n별거 없지만 놀러오세요  ;-)\n\nHello, I'm YH and I live in Korea.<br>\nLess than a month after learning python, people became a team and participated in this competition.  <br>\nIt's not enough, but thank you for reading it up to here.  <br>\nIt's still not enough, but please watch until the day we win first place at the Kaggle competition ^^! <br>\n <br>\nIf there's anything you haven't said in the comments, please visit my [github blog](https://yoonhwa-p.github.io/) and help me! <br>\n It's nothing special, but come and play. ;-) <br>\n \n <br>\n <br>\n \n안녕하세요 저는 YH님과 같이 Kaggle 대회를 준비 한JW 입니다.  <br>\npython을 제대로 배우지도 못한채로 나오게 된 대회라 코드 부분에서 미숙한 점도 많고  <br>\n오류도 많습니다!   <br>\n하지만 대회를 출전하면서, python에 대해서 많은 공부도 되었고, 재미도 있어서 좋은 기회가 되었던것 같습니다.  <br>\n   <br>\n아래는 저의 깃허브 주소 입니다  <br>\n데이터 관련 분야에서 일하시는 분들은 저에게 팔로우를 걸어주세요!  <br>\n[github](https://github.com/wldnjd2)   <br>\n \n Hello, I'm JW who prepared for the Kaggle competition with YH.  <br>\nIt's a competition where I didn't learn python properly, so I'm not good at codes.  <br>\nThere are a lot of errors, too!  <br>\nHowever, as I participated in the competition, I studied a lot about Python and it was a good opportunity because it was fun.  <br>\n  <br>\nBelow is my Git Hub address.  <br>\nFor those who work in data-related fields, please follow me!  <br>\n[github](https://github.com/wldnjd2)   <br>\n \n <br>\n <br>\n <br>\n <br>","source":"_posts/Newbies_as_a_Data_Scientist_in_EastAsia.md","raw":"---\ntitle: Newbies as a Data Scientist in East Asia\ndate: 2021-11-28\ntags: kaggle, plotly\n\ncategories: \n- Project\n- Kaggle Competition\ntoc: true\n---\n\n드디어 캐글 대회 작품을 제출했다.\n파이썬을 거의 하나도 배우지 않고 다른 캐글 노트북을 필사 하면서부터 시작해서\n최종 완료까지 마쳤다.\n\n파이썬의 기초가 하나도 없어서 너무 힘들었다\n그래도 다 해놓으니까 뿌듯하네\n여기서 보완하고 싶은 점은 for문을 이용해서 코드를 더 간략히 짰으면 하는 아쉬움이 있다.\n\n이제부터는 파이썬의 기본 문법에 대해서 공부를 해야겠다는 생각이 들고\n공부의 방향성이 좀 보인다\n수고했다! 내자신!\n그리고 같이 캐글 준비한 윤화님한테도 감사를..!\n[kaggle주소](https://www.kaggle.com/yoonhwayam/newbies-as-a-data-scientist-in-east-asia)\n\n\n## Newbie as a data scientist in East Asia!\n\nHello, Kaggers! Nice to meet you! \n\nWe are a team in East Asia that wants to be **data scientists** \n\nAs newbies, we want to know what and/or how Kaggler is!\n\nso, let's have a time to learn about Kaggle as a senior with us from now.\n\nIf you want to support us*(or feel qute)*, I ask for a comment! (PLZ) ^0^\n\nAnd !! Since we are **not native English speakers**, please ask questions if there is a context that you don't understand because it's not smooth.\n\nI'll do my best to answer.\n\n\n# 1 Introduction\n1. what is the Kaggle\na subsidiary of **Google LLC**, is an online **community of data scientists and machine learning practitioners**.\n\nIf we use kaggle, we can take the following advantages.\n\n    1) to find and publish data sets\n    2) to explore and build models in a web-based data-science environment\n    3) to work with other data scientists and machine learning engineers\n    4) to enter competitions to solve data science challenges\n    \nso, As data scientist beginners, we try to participate in the Kaggle competition.\n\n---\n\n2. **21 Kaggle** Machine Learning and Data Science Survey\n- The most comprehensive dataset available for ML and data science status\n\nThis is the theme of the competition we will participate in this time.\n\nTo become a data scientist, we compared what kind of job Kagglers has, how much experience he has, and how much money he earns by dividing into the world and East Asia.\n\nIn addition, there are detailed comparisons in East Asia, and ultimately, we will to find out what data the Kaggle competition data shows.\n\nThe 2021 survey, like 2017, 2018, 2019, and 2020, launched an industry-wide survey that comprehensively presents the current status of data science and machine learning.\n\nThe survey was conducted from 09/01/2021 to 10/04/2021, and after cleaning the data, Kaggle received 25,973 responses!\n\nThis year, Kaggle will award $30,000 in prize money to winner in this competition.\n\nwe want to receive $30,000 for winning the competition, but we just hope it will help us become a *data scientist* because it is difficult for a rookie.\n\n\n\nRef.\n\n\\[1\\] [Kgg_competitions](https://www.kaggle.com/docs/competitions)\n\n\\[2\\] [Kgg_definition](https://en.wikipedia.org/wiki/Kaggle)\n\n\\[3\\] [kaggle-survey-2021](https://www.kaggle.com/c/kaggle-survey-2021)\n\n# 1.2 Contents\n---\n\n>     Introduction\n>     Contents\n>     Summary\n>     Data Import and Preprocessing\n>     Plots and Description\n>     Kaggle's transformation. (World/East_Asia)\n>         1 user transformation\n>         2 Gender transformation\n>         3 Job transformation\n>         4 Age  transformation\n>         5 Degree transformation\n>         6 Experience transformation\n>         7 Salary transformation\n>         8 Language transformatio\n>    Position of Data Scientist in East Asia\n>         1 Salary\n>         2 Salary-Experience\n>         3 Degree\n>         4 Salary-Degree\n>         5 Language\n>     Discussion\n>     Close\n\n# 1.3 Summary\n---\n\n\n<h3> used data </h3>\n\nWe used all the data for five years. (2017~2021)\n\n<h3>  used Language and Library </h3>\n\n   + Numpy\n   + Metplotlib\n   + seaborn\n   + Plotly\n       - plotly.express : An interface where you can draw a graph easily and quickly.\n       - plotly.graph_objects : You can customize it in the way you want because you can do more detailed work than express.\n       - plotly.figure_factory : Used before express existed and remains in the module for compatibility with previous versions\n       - plotly.subplots : A module that displays multiple graphs in one figure.\n       - plotly.offline : Save locally and create HTML that opens in a web browser and make it standalone\n\n<h3> Grouping data sections </h3>\n\n   - East Asia and World\n        - East Asia : ['China','Taiwan', 'South Korea', 'Japan']\n        - World : all data\n   - Gender\n        - [Male, Female, Others]\n   - Job   <br>\n    **Data_Analyst** =['Data Analyst','Data Miner,Information technology','Data Miner', 'Predictive Modeler','Information technology, networking, or system administration', \n     'A business discipline (accounting, economics, finance, etc.)', 'Business Analyst', Humanities', 'Statistician', 'Mathematics or statistics', \n     'Medical or life sciences (biology, chemistry, medicine, etc.)', Physics or astronomy', 'Social sciences (anthropology, psychology, sociology, etc.)', \n     'Environmental science or geology', 'Humanities (history, literature, philosophy, etc.)'] <br>\n    **Data_Scientist** =['Data Scientist',  'Research Scientist', 'Researcher','Machine Learning Engineer', 'Scientist/Researcher'] <br>\n    **Developer**=['Developer Relations/Advocacy','Data Engineer','Engineer','Engineering (non-computer focused)',\n    'Programmer','Software Engineer', 'Computer Scientist','Computer science (software engineering, etc.)',  'Fine arts or performing arts','Product Manager', 'Software Developer/Software Engineer', \n    'Product/Project Manager','Program/Project Manager','DBA/Database Engineer']\n    **Not_Employed** = ['Currently not employed', 'Not employed', 'Student'] <br>\n    **Others** = ['I never declared a major', 'Other'] <br> <br>\n   - Age \n   [18-21, 20s, 30s, 40s, 50s, 60s<] <br>\n   - Degree  \n   ['college', 'Bachelor’s degree','Master’s degree', 'Doctoral degree~', 'etc'] <br>\n   - Experience \n   [<1, 1-3, 3-5, 5-10, 10+] <br>\n   - Salary \n   [<999, 1,000-20,000, 20,000-59,999, 60,000-99,999, 100,000-199,999, 200,000~] <br>\n   \n\n\n\n# 2. data Import and pre-treatments\n---\n\n\n```python\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pylab as plt\n\nimport plotly.io as pio\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.figure_factory as ff\nfrom plotly.subplots import make_subplots\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\npio.templates.default = \"none\"\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n```\n\n\n```python\ndf17= pd.read_csv(\"/kaggle/input/kaggle-survey-2017/multipleChoiceResponses.csv\", encoding=\"ISO-8859-1\")\ndf18= pd.read_csv(\"/kaggle/input/kaggle-survey-2018/multipleChoiceResponses.csv\", )\ndf19= pd.read_csv(\"/kaggle/input/kaggle-survey-2019/multiple_choice_responses.csv\", )\ndf20= pd.read_csv(\"/kaggle/input/kaggle-survey-2020/kaggle_survey_2020_responses.csv\", )\ndf21= pd.read_csv(\"/kaggle/input/kaggle-survey-2021/kaggle_survey_2021_responses.csv\", )\n```\n\n# 3. plots and description\n---\n\n\n```python\n\n#질문 제거하기, replace\ndf17= df17.iloc[1:, :].replace(\"People 's Republic of China\",'China')\ndf18= df18.iloc[1:, :].replace('Republic of Korea','South Korea')\ndf19= df19.iloc[1:, :].replace('Republic of Korea','South Korea')\ndf20= df20.iloc[1:, :].replace('Republic of Korea','South Korea')\ndf21= df21.iloc[1:, :]\n\n## East Asia에는 대한민국, 일본, 중국, 타이완, 몽골, 북조선 총 6개의 국가가 속해 있다. \n## 이유는 알 수 없지만, 18년도엔 타이완이 없다. \nEastAsia17 = ['China',\"People 's Republic of China\", 'Taiwan', 'South Korea', 'Japan']\nEastAsia18= ['China', 'South Korea', 'Japan', 'Republic of Korea'] \nEastAsia19 = ['China','Taiwan', 'South Korea', 'Japan', 'Republic of Korea']\nEastAsia20 = ['China','Taiwan', 'South Korea','Republic of Korea', 'Japan']\nEastAsia21 = ['China','Taiwan', 'South Korea', 'Japan']\nEastAsia = ['Republic of Korea','China','Taiwan', 'South Korea', 'Japan', \"People 's Republic of China\" ]\n\ndf21_Ea = df21[df21['Q3'].isin(EastAsia)]\ndf21_Wo = df21[~df21['Q3'].isin(EastAsia)]\ndf21['region']=[\"EastAsia\" if x in EastAsia else \"World\" for x in df21['Q3']]\n\ndf20_Ea = df20[df20['Q3'].isin(EastAsia)]\ndf20_Wo = df20[~df20['Q3'].isin(EastAsia)]\ndf20['region']=[\"EastAsia\" if x in EastAsia else \"World\" for x in df20['Q3']]\n\ndf19_Ea = df19[df19['Q3'].isin(EastAsia)]\ndf19_Wo = df19[~df19['Q3'].isin(EastAsia)]\ndf19['region']=[\"EastAsia\" if x in EastAsia else \"World\" for x in df19['Q3']]\n\ndf18_Ea = df18[df18['Q3'].isin(EastAsia)]\ndf18_Wo = df18[~df18['Q3'].isin(EastAsia)]\ndf18['region']=[\"EastAsia\" if x in EastAsia else \"World\" for x in df18['Q3']]\n\ndf17_Ea = df17[df17['Country'].isin(EastAsia)]\ndf17_Wo = df17[~df17['Country'].isin(EastAsia)]\ndf17['region']=[\"EastAsia\" if x in EastAsia else \"World\" for x in df17['Country']]\n\ndf21['year'] = '2021'\ndf20['year'] = '2020'\ndf19['year'] = '2019'\ndf18['year'] = '2018'\ndf17['year'] = '2017'\n\nyears = ['2017', '2018', '2019', '2020', '2021']\n\ndf21_Ea = df21[df21['Q3'].isin(EastAsia21)]\nEa21= (\n    df21_Ea['Q3'].value_counts().to_frame()\n    .reset_index().rename(columns={'index':'Country', 'Q3':'21'}))\n\ndf20_Ea=df20[df20['Q3'].isin(EastAsia)]\nEa20= (\n    df20_Ea['Q3'].replace('Republic of Korea','South Korea')\n    .value_counts().to_frame().reset_index()\n    .rename(columns={'index':'Country', 'Q3':'20'}))\n\ndf19_Ea=df19[df19['Q3'].isin(EastAsia)]\nEa19= (df19_Ea['Q3'].replace('Republic of Korea','South Korea')\n       .value_counts().to_frame().reset_index()\n       .rename(columns={'index':'Country', 'Q3':'19'}))\n\ndf18_Ea=df18[df18['Q3'].isin(EastAsia)]\nEa18= (df18_Ea['Q3'].replace('Republic of Korea','South Korea')\n       .value_counts().to_frame().reset_index()\n       .rename(columns={'index':'Country', 'Q3':'18'}))\nEa18.value_counts()\n#df18 열에 taiwan = 0을 추가 해야 합니다. \n\ndf17_Ea = df17[df17['Country'].isin(EastAsia)]\nEa17= (df17_Ea['Country'].replace(\"People 's Republic of China\",'China')\n       .value_counts().to_frame().reset_index()\n       .rename(columns={'index':'Country', 'Country':'17'}))\n\n#data를 합쳐서 하나의 dataframe으로 만들어 줌.\ndf5years = pd.merge(Ea17, Ea18, on='Country', how='outer')\ndf5year =pd.merge(Ea19,Ea20, on='Country', how='outer')\ndf5year=pd.merge(df5year, Ea21, on='Country', how='outer')\n\ndf5years = pd.merge(df5years, df5year, on='Country', how='outer')\n\nEa21 = len(df21_Ea)\nWo21 = len(df21) - len(df21_Ea)\n\nEa20 = len(df20_Ea)\nWo20 = len(df20) - len(df20_Ea)\n\nEa19 = len(df19_Ea)\nWo19 = len(df19) - len(df19_Ea)\n\nEa18 = len(df18_Ea)\nWo18 = len(df18) -  len(df18_Ea)\n\nEa17 = len(df17_Ea)\nWo17 = len(df17) - len(df17_Ea)\n\nyears = ['2017','2018','2019','2020', '2021']\n\ndef percent (a, b):\n    result =a/(a+b)*100\n    result = np.round(result, 2)\n    return result\n\ndef percentR (b, a):\n    result =a/(a+b)*100\n    result = np.round(result, 2)\n    return result\n\npercent = [percent(Ea17, Wo17), percent(Ea18, Wo18), percent(Ea19, Wo19), \n                                                 percent(Ea20, Wo20), percent(Ea21, Wo21)]\n```\n\n# 3.1 Kaggle's transformation (World/East Asia)\n---\n# 3.1.1 user transformation\n\n\n<h2> Number of respondents </h2>\n    \n(bar, scatter plot : number of respondents to World and East Asia,\nMap plot : number of respondents to East Asia)\n    \n**World and East Asia: The same trend.**\n    \nEast Asia: 15% of the total continent and 20.3% of the population (16/78.7: Ea/Wo)\n    \n2018 Issue: Significant increase in respondents->Hypothesis: Due to the rapid increase in China.\n    \n2018 Outliers Considering: 2022 Kaggle survey Respondents: Increased in both World and East Asia\n    \nI wish our team the honor of becoming a respondent to the Kaggle survey in 2022....\n\n![](/images/kaggle_final/newplot.png)\n\n![](/images/kaggle_final/newplot1.png)\n\n```python\nfig = go.Figure()\ny=[len(df17_Ea),len(df18_Ea), len(df19_Ea),len(df20_Ea),len(df21_Ea)]\n\nfig.add_trace(go.Bar(x=years, y=y,\n                base=0,\n                marker_color='#F2D64B',\n                yaxis = \"y1\",\n                name='East Asia',\n                text= percent,\n                texttemplate='%{text}  %', \n                textposition='outside',\n                hovertemplate='<b>KaggleUser</b>: %{x}<br>'+ '<b>Count</b>: %{y}'))\n\nfig.add_trace(go.Scatter(name = \"World\",\n           x=years, \n           y=[len(df17), len(df18), len(df19), len(df20), len(df21)],\n           marker_color='#979DA6',\n           mode = 'lines+markers', # please check option here\n           yaxis = \"y2\"))\n\nfig.update_traces(hovertemplate='<b>Count</b>: %{y}<br><extra></extra>'+\n                                '<b>Year</b>: %{x}<br>')\n\nfig.update_layout(yaxis  = dict(title = \"Kaggle User in East Asia\",showgrid = False, range=[0, len(df21_Ea)*1.2]),\n                  yaxis2 = dict(title = \"Kaggle User in World\", overlaying = \"y1\", side = \"right\", \n                  showgrid = False, \n                  zeroline = False, range=[0, len(df21)*1.2]))\n\nfig.update_layout(title='<b>Kaggle Users</b>',title_font_size=20,\n                  margin = dict(t=200, l=100, r=50, b=200),\n                  height=700, width=700)\n\nfig.update_layout(legend=dict(\n    orientation=\"h\",\n    yanchor=\"bottom\",\n    y=1.1,\n    xanchor=\"right\",\n    x=1))\nfig.add_annotation(dict(font=dict(size=14),\n                                    x=0.9,\n                                    y=-0.25,\n                                    showarrow=False,\n                                    text=\"@green_yhjw\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\nfig.show()\n\n\ndef world_map(locations,counts,title):\n    data = [ dict(\n            type = 'choropleth',\n            locations = locations,\n            z = counts,\n            colorscale = 'Reds',\n            locationmode = 'country names',\n            autocolorscale = False,\n            reversescale = False,\n            marker = dict(\n                line = dict(color = '#F7F7F7', width = 1.5)),\n                colorbar = dict(autotick = True, legth = 3, len=0.75, title = 'respodents',\n                               max = 1000, min = 0))]\n    layout = dict(\n        title=title,\n        titlefont={'size': 28},\n        width=700, \n        height=600,\n        paper_bgcolor='#FFFFFF', \n        margin=dict(l=50, r=50, t=100, b=100),\n        geo = dict(\n            showframe = True,\n            showcoastlines = True,\n            fitbounds=\"locations\"))\n   \n    fig = dict(data=data, layout=layout)\n    iplot(fig, validate=False, filename='world-map')\n\nz = df21_Ea['Q3'].value_counts()\n \nworld_map(locations=z.index, counts=z.values, title= '<b>EastAsia Countries<b>')\n```\n\n<h2>18’ : </h2>\n\nUser change between United States and India.\n\nChina's markedly increase in 2018\n\n+ There is no Taiwan, but only China has increased. : East Asian political situation Issue can be suspected.\n\n![](/images/kaggle_final/newplot2.png)\n\n```python\nA18 = (\n    df18['Q3']\n    .replace({'Republic of Korea':'South Korea',\n             'I do not wish to disclose my location' : 'Other'})\n    .value_counts()\n    .to_frame()\n    .reset_index()\n    .rename(columns={'index':'type', 'Q3':'2018'})\n    .groupby('type')\n    .sum()\n    .reset_index()\n)\n\nA19 = (\n    df19['Q3']\n    .replace('Republic of Korea','South Korea')\n    .value_counts()\n    .to_frame()\n    .reset_index()\n    .rename(columns={'index':'type', 'Q3':'2019'})\n    .groupby('type')\n    .sum()\n    .reset_index()\n)\n\nA17 = (\n    df17['Country']\n    .replace({'United States': 'United States of America',\n              'Hong Kong': 'Hong Kong (S.A.R.)', \n              'United Kingdom':'United Kingdom of Great Britain and Northern Ireland',\n             })\n    .replace(\"People 's Republic of China\",'China')\n    .value_counts()\n    .to_frame()\n    .reset_index()\n    .rename(columns={'index':'type', 'Country':'2017'})\n    .groupby('type')\n    .sum()\n    .reset_index()\n)\n\nA18A19=pd.merge(A18,A19, how='outer',on='type').fillna(0)\nA18A17=pd.merge(A18,A17, how='outer',on='type').fillna(0)\nA18A19['minus']= A18A19['2018']-A18A19['2019']\nA18A17['minus']= A18A17['2018']-A18A17['2017']\n\nA18A17=A18A17.sort_values(by=\"minus\", ascending=False)\nA18A19=A18A19.sort_values(by=\"minus\", ascending=False)\n\n\nfig = go.Figure(data=[  \n        go.Bar(x =A18A19['type'],\n        y = A18A19['minus'],\n        marker_color='#979DA6',\n        name = '2018-2019', base=0),\n        go.Bar(x =A18A17['type'],\n        y = A18A17['minus'],\n               marker_color='#F2D64B',\n        name = '2018-2017', base=0)\n        ])\n\nfig.update_layout(title='<b>        Predicting outliers (2018)</b>',title_font_size=20,\n                  margin = dict(t=200, l=100, r=10, b=200),\n                  height=700, width=700,\n                  xaxis_title=None,\n                  yaxis_title=None)\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\n\nfig.update_layout(legend=dict(\n    orientation=\"h\",\n    yanchor=\"bottom\",\n    y=1.1,\n    xanchor=\"right\",\n    x=1))\nfig.add_annotation(dict(font=dict(size=14),\n                                    x=0.8,\n                                    y=-0.5,\n                                    showarrow=False,\n                                    text=\"@green_yhjw\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\nfig.show()\n```\n\n<h2>Total population: </h2>\n\n1.4 billion (85%) in China, 130 million in Japan, 0.5 billion in Korea, and 0.2 billion in Taiwan.\n\n+ China: The number of respondents is smaller than the population.\n+ Japan: Starting in 2019, overtaking China\n+ Taiwan : 2018 data 0 =? Diplomatic issues? The growth trend is weak.\n+ Korea : Respondents at a similar level to Japan's population.\n+ East Asia: The number of respondents will increase further.\n\n![](/images/kaggle_final/newplot3.png)\n\n![](/images/kaggle_final/newplot4.png)\n\n```python\n#data preprocessing\ntotal17 = ( \n    df17['region']\n    .value_counts()\n    .to_frame()\n    .reset_index()\n    .rename(columns={'index':'type', 'region':'respodents'})\n    .groupby('type')\n    .sum()\n    .reset_index()\n)\ntotal18 = (\n    df18['region']\n    .value_counts()\n    .to_frame()\n    .reset_index()\n    .rename(columns={'index':'type', 'region':'respodents'})\n    .groupby('type')\n    .sum()\n    .reset_index()\n)\ntotal19 = (\n    df19['region']\n    .value_counts()\n    .to_frame()\n    .reset_index()\n    .rename(columns={'index':'type', 'region':'respodents'})\n    .groupby('type')\n    .sum()\n    .reset_index()\n)\ntotal20 = (\n    df20['region']\n    .value_counts()\n    .to_frame()\n    .reset_index()\n    .rename(columns={'index':'type', 'region':'respodents'})\n    .groupby('type')\n    .sum()\n    .reset_index()\n)\ntotal21 = (\n    df21['region']\n    .value_counts()\n    .to_frame()\n    .reset_index()\n    .rename(columns={'index':'type', 'region':'respodents'})\n    .groupby('type')\n    .sum()\n    .reset_index()\n)\n\n#graph\ncolors = ['#F2D64B','#979DA6']\n\nfig = make_subplots(rows=1, cols=5, specs=[[{'type':'domain'}, {'type':'domain'}, {'type':'domain'}, {'type':'domain'}, {'type':'domain'}]],\n                   subplot_titles=(\"2017\", \"2018\", \"2019\", \"2020\", \"2021\"))\nfig.add_trace(go.Pie(marker=dict(colors=colors),labels=total21['type'], values=total21['respodents'], name=\"2021\", scalegroup='one'), 1, 5)\nfig.add_trace(go.Pie(marker=dict(colors=colors),labels=total20['type'], values=total20['respodents'], name=\"2020\", scalegroup='one'), 1, 4)\nfig.add_trace(go.Pie(marker=dict(colors=colors),labels=total19['type'], values=total19['respodents'], name=\"2019\", scalegroup='one'), 1, 3)\nfig.add_trace(go.Pie(marker=dict(colors=colors),labels=total18['type'], values=total18['respodents'], name=\"2018\", scalegroup='one'), 1, 2)\nfig.add_trace(go.Pie(marker=dict(colors=colors),labels=total17['type'], values=total17['respodents'], name=\"2017\", scalegroup='one'), 1, 1)\n\nfig.update_traces(hole=.0, hoverinfo=\"label+percent+name\", textposition='inside', textinfo='percent+label',\n                  textfont_size=12)\n\nfig.update_layout(title='<b>World vs EastAsia</b>',title_font_size=23,\n                  margin = dict(t=300, l=0, r=0, b=200),\n                  height=700, width=700)\n\nfig.update_layout(legend=dict(\n    orientation=\"h\",\n    yanchor=\"bottom\",\n    y=1.3,\n    xanchor=\"right\",\n    x=1))\nfig.add_annotation(dict(font=dict(size=14),\n                                    x=0.8,\n                                    y=-0.25,\n                                    showarrow=False,\n                                    text=\"@green_yhjw\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\nfig.show()\n```\n\n\n```python\nfig = go.Figure(data=[\n    go.Bar(name='2017', x=df5years['Country'], y=df5years['17'], marker_color='#F2798F',text=df5years['17'].tolist(), textposition='outside'),\n    go.Bar(name='2018', x=df5years['Country'], y=df5years['18'], marker_color='#88BFBA',text=df5years['18'].fillna(0).astype(int).tolist(), textposition='outside',),\n    go.Bar(name='2019', x=df5years['Country'], y=df5years['19'], marker_color='#CDD9A3',text=df5years['19'].tolist(), textposition='outside'),\n    go.Bar(name='2020', x=df5years['Country'], y=df5years['20'], marker_color='#F28705',text=df5years['20'].tolist(), textposition='outside',),\n    go.Bar(name='2021', x=df5years['Country'], y=df5years['21'], marker_color='#D9946C',text=df5years['21'].tolist(), textposition='outside')])\n\nfig.update_layout(barmode='group')\n\nfig.update_layout(title='<b>Kaggle User in East Asia</b>',title_font_size=23,\n                  margin = dict(t=200, l=100, r=10, b=200),\n                  height=600, width=700)\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\nfig.update_traces(hovertemplate='<b>Count</b>: %{y}')\nfig.update_layout(legend=dict(\n    orientation=\"v\",\n    yanchor=\"bottom\",\n    y=1.15,\n    xanchor=\"right\",\n    x=1))\nfig.add_annotation(dict(font=dict(size=14),\n                                    x=0.8,\n                                    y=-0.5,\n                                    showarrow=False,\n                                    text=\"@green_yhjw\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\nfig.show()\n```\n\n# 3.1.2 Gender transformation\n---\n\n<h2>World: The proportion of female respondents increases (still below 20%) </h2>\n\nThe number of respondents is increasing in all genders.\n\nOur team is also a team with high female members and wants to contribute as a respondent in 2022.\n\n![](/images/kaggle_final/newplot5.png)\n\n```python\n#data preprocessing\nGender_17 = (\n    df17['GenderSelect']\n    .replace(['A different identity', 'Prefer to self-describe', 'Non-binary, genderqueer, or gender non-conforming'], 'Others')\n    .fillna('Others')\n    .value_counts()\n    .to_frame()\n    .reset_index()\n    .rename(columns={'index':'type', 'GenderSelect':'Gender'})\n    .groupby('type')\n    .sum()\n    .reset_index())\nGender_18 = (\n    df18['Q1']\n    .replace(['Prefer not to say', 'Prefer to self-describe'], 'Others')\n    .fillna('Others')\n    .value_counts()\n    .to_frame()\n    .reset_index()\n    .rename(columns={'index':'type', 'Q1':'Gender'})\n    .groupby('type')\n    .sum()\n    .reset_index())\nGender_19 = (\n    df19['Q2']\n    .replace(['Prefer not to say','Prefer to self-describe'],'Others')\n    .fillna('Others')\n    .value_counts()\n    .to_frame()\n    .reset_index()\n    .rename(columns={'index':'type', 'Q2':'Gender'})\n    .groupby('type')\n    .sum()\n    .reset_index())\nGender_20 = (\n    df20['Q2']\n    .replace(['Prefer not to say', 'Prefer to self-describe', 'Nonbinary'], 'Others')\n    .replace(['Man', 'Woman'], ['Male', 'Female'])\n    .fillna('Others')\n    .value_counts()\n    .to_frame()\n    .reset_index()\n    .rename(columns={'index':'type', 'Q2':'Gender'})\n    .groupby('type')\n    .sum()\n    .reset_index())\nGender_21 = (\n    df21['Q2']\n    .replace(['Prefer not to say', 'Prefer to self-describe', 'Nonbinary'], 'Others')\n    .replace(['Man', 'Woman'], ['Male', 'Female'])\n    .fillna('Others')\n    .value_counts()\n    .to_frame()\n    .reset_index()\n    .rename(columns={'index':'type', 'Q2':'Gender'})\n    .groupby('type')\n    .sum()\n    .reset_index())\n\ncolors = ['#D9946C','#88BFBA', '#CDD9A3']\n\nfig = make_subplots(rows=1, cols=5, specs=[[{'type':'domain'}, {'type':'domain'}, {'type':'domain'}, {'type':'domain'}, {'type':'domain'}]],)\nfig.add_trace(go.Pie(marker=dict(colors=colors), labels=Gender_21['type'], values=Gender_21['Gender'], name=\"2021\", scalegroup='one', text=np.array(Gender_21['Gender'].sum()), title=\"2021\", titleposition='bottom center'),\n              1, 5)\nfig.add_trace(go.Pie(marker=dict(colors=colors), labels=Gender_20['type'], values=Gender_20['Gender'], name=\"2020\", scalegroup='one', text=np.array(Gender_20['Gender'].sum()), title=\"2020\", titleposition='bottom center'),\n              1, 4)\nfig.add_trace(go.Pie(marker=dict(colors=colors), labels=Gender_19['type'], values=Gender_19['Gender'], name=\"2019\", scalegroup='one', text=np.array(Gender_19['Gender'].sum()), title=\"2019\", titleposition='bottom center'),\n              1, 3)\nfig.add_trace(go.Pie(marker=dict(colors=colors), labels=Gender_18['type'], values=Gender_18['Gender'], name=\"2018\", scalegroup='one', text=np.array(Gender_18['Gender'].sum()), title=\"2018\", titleposition='bottom center'),\n              1, 2)\nfig.add_trace(go.Pie(marker=dict(colors=colors), labels=Gender_17['type'], values=Gender_17['Gender'], name=\"2017\", scalegroup='one', text=np.array(Gender_17['Gender'].sum()), title=\"2017\", titleposition='bottom center'),\n              1, 1)\n\nfig.update_traces(hole=.0, hoverinfo=\"label+percent+name\", \n                  textinfo='label+percent+value')\n\nfig.update_layout(title='<b>World Gender</b>',title_font_size=23,\n                  margin = dict(t=300, l=100, r=0, b=200),\n                  height=700, width=1000)\n\nfig.update_layout(legend=dict(\n    orientation=\"v\",\n    yanchor=\"bottom\",\n    y=1.3,\n    xanchor=\"right\",\n    x=1))\nfig.add_annotation(dict(font=dict(size=14),\n                                    x=0.85,\n                                    y=-0.5,\n                                    showarrow=False,\n                                    text=\"@green_yhjw\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\nfig.show()\n```\n\n<h3>\n    \n    - Male (1004->2037 : 2017->2021) double increase\n    \n    - Female 183->327 : 2017->2021 increased 1.8 times\n    \n    - Others (8->64 : 2017->2021) 8x increase\n    \n</h3>\n[Compare the high and low points]\n\n+ It can be seen that the number of female respondents and the ratio of male respondents hardly change, which is a difference compared to World data.\n\n+ It can be seen that the degree of gender freedom in East Asia has increased relatively.\n+ Compared to World data, it can be seen that in 2021 (1.87: 2.6= Wo: Ea), compared to 2017 (1.96: 0.7 = Ea), which was relatively conservative.\n\n![](/images/kaggle_final/newplot6.png)\n\n```python\n#data preprocessing\ngender21= df21_Ea.loc[:, ['Q3', 'Q2', 'year']].rename(columns={'Q3':'Country', 'Q2':'Gender'})\ngender20= df20_Ea.loc[:, ['Q3', 'Q2', 'year']].rename(columns={'Q3':'Country', 'Q2':'Gender'})\ngender19= df19_Ea.loc[:, ['Q3', 'Q2', 'year']].rename(columns={'Q3':'Country', 'Q2':'Gender'})\ngender18= df18_Ea.loc[:, ['Q3', 'Q1', 'year']].rename(columns={'Q3':'Country', 'Q1':'Gender'})\ngender17= df17_Ea.loc[:, ['Country', 'GenderSelect', 'year']].rename(columns={'index':'type', 'GenderSelect':'Gender'})\n\nGender5y= pd.concat([gender17, gender18, gender19, gender20, gender21])\nGender5y= (Gender5y.replace(['Prefer not to say', 'Prefer to self-describe', 'Nonbinary', 'A different identity'], 'Others')\n           .replace(['Man', 'Woman'], ['Male', 'Female'])\n           .groupby(['year', 'Gender'])\n           .size()\n           .reset_index()\n           .rename(columns = {0:\"Count\"}))\n\ngen17_5y = Gender5y[Gender5y['year'] == \"2017\"].reset_index(drop = True)\ngen18_5y = Gender5y[Gender5y['year'] == \"2018\"].reset_index(drop = True)\ngen19_5y = Gender5y[Gender5y['year'] == \"2019\"].reset_index(drop = True)\ngen20_5y = Gender5y[Gender5y['year'] == \"2020\"].reset_index(drop = True)\ngen21_5y = Gender5y[Gender5y['year'] == \"2021\"].reset_index(drop = True)\n\nGen5y_ = pd.concat([gen17_5y, gen18_5y, gen19_5y, gen20_5y, gen21_5y], ignore_index = True)\nGen5y_= pd.pivot(Gen5y_, index = \"year\", columns = \"Gender\", values = \"Count\").reset_index()\nGen5y_\n\nGen5y_['year'].unique()\n\n#graph\nfig = go.Figure()\n\nfig.add_trace(go.Bar(\n    x = Gen5y_['year'],\n    y = Gen5y_['Male'].tolist(),\n    name = 'Male',\nmarker_color='#88BFBA', text=Gen5y_['Male'].tolist(), textposition='outside'))\n\nfig.add_trace(go.Bar(\n    x = Gen5y_['year'],\n    y = Gen5y_['Female'].tolist(),\n    name = 'Female',\nmarker_color='#D9946C', text=Gen5y_['Female'].tolist(), textposition='outside'))\n\nfig.add_trace(go.Bar(\n    x = Gen5y_['year'],\n    y = Gen5y_['Others'].tolist(),\n    name = 'Others',\nmarker_color='#CDD9A3', text=Gen5y_['Others'].tolist(), textposition='outside'))\n\nfig.update_layout(barmode=\"group\") \n\nfig.update_layout(title='<b>Gender by year</b>',title_font_size=22,\n                  margin = dict(t=200, l=100, r=10, b=200),\n                  height=700, width=700,\n                  xaxis_title=None,\n                  yaxis_title=None)\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\nfig.add_annotation(dict(font=dict(size=14),\n                                    x=0.8,\n                                    y=-0.5,\n                                    showarrow=False,\n                                    text=\"@green_yhjw\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\nfig.show()\n```\n\n# 3.1.3 Job transformation\n---\n\n<h2> 21' World Vs East Asia Age Ratio: Bar plot </h2>\n\n- Not Employed : More than 30% in both East Asia and the world, the highest.\n    \n    *Because \"Students\" is included.*\n- Data Scientist : High percentage in the world and East Asia.\n\n- Relatively low proportion in East Asia.\n    <strong>**= Absolute lack of numbers**</strong>\n \n \n<p style=\"color:#FF0000\";>\nWe would like to move forward by selecting a **data scientist** with insufficient numbers in East Asia.\n</p>\n\n![](/images/kaggle_final/newplot7.png)\n\n```python\n#data preprocessing\nData_Analyst =['Data Analyst','Data Miner,Information technology','Data Miner',\n                'Predictive Modeler','Information technology, networking, or system administration', \n                'A business discipline (accounting, economics, finance, etc.)', 'Business Analyst', 'Humanities',\n                'Statistician', 'Mathematics or statistics', 'Medical or life sciences (biology, chemistry, medicine, etc.)', \n                'Physics or astronomy',  'Social sciences (anthropology, psychology, sociology, etc.)', 'Environmental science or geology',\n                'Humanities (history, literature, philosophy, etc.)']\nData_Scientist =['Data Scientist',  'Research Scientist', 'Researcher',\n                'Machine Learning Engineer', 'Scientist/Researcher']\nDeveloper=['Developer Relations/Advocacy','Data Engineer','Engineer','Engineering (non-computer focused)',\n           'Programmer','Software Engineer', 'Computer Scientist','Computer science (software engineering, etc.)', \n           'Fine arts or performing arts','Product Manager', 'Software Developer/Software Engineer',\n           'Product/Project Manager','Program/Project Manager','DBA/Database Engineer']\nNot_Employed =['Currently not employed', 'Not employed', 'Student']\nOthers = ['I never declared a major', 'Other']\n\n\ndf21job_Ea = df21_Ea.loc[:,['Q3','Q5']].rename(columns={'Q5':'2021'}).fillna('Other')\ndf20job_Ea = df20_Ea.loc[:,['Q3','Q5']].rename(columns={'Q5':'2020'}).fillna('Other')\ndf19job_Ea = df19_Ea.loc[:,['Q3','Q5']].rename(columns={'Q5':'2019'}).fillna('Other')\ndf18job_Ea = df18_Ea.loc[:,['Q3','Q5']].rename(columns={ 'Q5':'2018'}).fillna('Other')\ndf17job_Ea = df17_Ea.loc[:,['Country','CurrentJobTitleSelect']].rename(columns={'CurrentJobTitleSelect':'2017'}).fillna('Other')\n\ndf21job_Ea.value_counts('2021')\ndf21job_Ea['JOB']=[\"Data Analyst\" if x in Data_Analyst\n                   else \"Data Scientist\" if x in Data_Scientist # Data Scientist\n                   else \"Developer\" if x in Developer\n                    else \"NotEmployed\" if x in Not_Employed\n                   else \"Others\" \n                   for x in df21job_Ea['2021']]\ndf21job_Ea.value_counts('JOB')\n\ndf20job_Ea.value_counts('2020')\ndf20job_Ea['JOB']=[\"Data Analyst\" if x in Data_Analyst\n                   else \"Data Scientist\" if x in Data_Scientist \n                   else \"Developer\" if x in Developer\n                    else \"NotEmployed\" if x in Not_Employed\n                   else \"Other\"\n                   for x in df20job_Ea['2020']]\ndf20job_Ea[['2020','JOB']]\n\ndf19job_Ea.value_counts('2019')\ndf19job_Ea['JOB']=[\"Data Analyst\" if x in Data_Analyst\n                   else \"Data Scientist\" if x in Data_Scientist \n                   else \"Developer\" if x in Developer\n                    else \"NotEmployed\" if x in Not_Employed\n                    else \"Other\"\n                   for x in df19job_Ea['2019']]\n\ndf19jobTest = df19job_Ea.loc[df19job_Ea.JOB == 'Other']\ndf19jobTest['2019'].value_counts()\n\n\ndf18job_Ea.value_counts('2018')\ndf18job_Ea['JOB']=[\"Data Analyst\" if x in Data_Analyst\n                   else \"Data Scientist\" if x in Data_Scientist \n                   else \"Developer\" if x in Developer\n                    else \"NotEmployed\" if x in Not_Employed\n                    else \"Other\"\n                   for x in df18job_Ea['2018']]\n\ndf18jobTest = df18job_Ea.loc[df18job_Ea.JOB == 'Other']\ndf18jobTest['2018'].value_counts()\n\n\ndf17job_Ea.value_counts('2017')\ndf17job_Ea['JOB']=[\"Data Analyst\" if x in Data_Analyst\n                   else \"Data Scientist\" if x in Data_Scientist \n                   else \"Developer\" if x in Developer\n                    else \"NotEmployed\" if x in Not_Employed\n                    else \"Other\"\n                   for x in df17job_Ea['2017']]\n\ndf17jobTest = df17job_Ea.loc[df17job_Ea.JOB == 'Other']\ndf17jobTest['2017'].value_counts()\n\n\ndf21jobTest = df21job_Ea.loc[df21job_Ea.JOB == 'Other']\ndf21jobTest['2021'].head()\ndf21job_Ea.value_counts('JOB')\n\ndfjob21 =df21job_Ea.groupby(['Q3','JOB']).size().reset_index().rename(columns = {0:\"Count\"}).rename(columns={'Q3':'country'})\ndfjob20 =df20job_Ea.groupby(['Q3','JOB']).size().reset_index().rename(columns = {0:\"Count\"}).rename(columns={'Q3':'country'})\ndfjob19 =df19job_Ea.groupby(['Q3','JOB']).size().reset_index().rename(columns = {0:\"Count\"}).rename(columns={'Q3':'country'})\ndfjob18 =df18job_Ea.groupby(['Q3','JOB']).size().reset_index().rename(columns = {0:\"Count\"}).rename(columns={'Q3':'country'})\ndfjob17 =df17job_Ea.groupby(['Country','JOB']).size().reset_index().rename(columns = {0:\"Count\"}).rename(columns={'Country':'country'})\n\ndf21_Ea_job =df21job_Ea.groupby(['JOB']).size().reset_index().rename(columns = {0:\"Count\"})\ndf20_Ea_job =df20job_Ea.groupby(['JOB']).size().reset_index().rename(columns = {0:\"Count\"})\ndf19_Ea_job =df19job_Ea.groupby(['JOB']).size().reset_index().rename(columns = {0:\"Count\"})\ndf18_Ea_job =df18job_Ea.groupby(['JOB']).size().reset_index().rename(columns = {0:\"Count\"})\ndf17_Ea_job =df17job_Ea.groupby(['JOB']).size().reset_index().rename(columns = {0:\"Count\"})\n\ndf21_DA=df21[df21['Q5'].isin(Data_Analyst)]\ndf21_DS=df21[df21['Q5'].isin(Data_Scientist)]\ndf21_D=df21[df21['Q5'].isin(Developer)]\ndf21_N=df21[df21['Q5'].isin(Not_Employed)]\ndf21_O=df21[df21['Q5'].isin(Others)]\n\nWorld_ = np.array([df21_DA['Q5'].count(), df21_DS['Q5'].count(), df21_D['Q5'].count(), df21_N['Q5'].count(), df21_O['Q5'].count()]) \nEast_Asia_ = df21_Ea_job['Count'].to_numpy()\nWorld =((World_/World_.sum())*100).round(1)\nEast_Asia =((East_Asia_/East_Asia_.sum())*100).round(1)\ny = df21_Ea_job.JOB.to_numpy()\n\nfig = go.Figure(data=[\n    go.Bar(y=y, x=World, orientation='h', name=\"World\", base=0, hovertemplate='<b>World</b>: %{x}%<br>', marker_color='#979DA6', text=World, textposition='outside'),\n    go.Bar(y=y, x=-East_Asia, orientation='h', name=\"East Asia\", base=0, hovertemplate='<b>East Asia</b>: %{x}%<br>', marker_color='#F2D64B', text=East_Asia, textposition='outside')])\n\nfig.update_layout(barmode='stack')\nfig.update_layout(title='<b>World vs EastAsia</b>',title_font_size=22,\n                  margin = dict(t=200, l=100, r=50, b=200),\n                  height=700, width=750,\n                  xaxis_title=None,\n                  yaxis_title=None)\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\nfig.update_layout(legend=dict(\n    orientation=\"h\",\n    yanchor=\"bottom\",\n    y=1.1,\n    xanchor=\"right\",\n    x=1))\nfig.add_annotation(dict(font=dict(size=14),\n                                    x=0.8,\n                                    y=-0.5,\n                                    showarrow=False,\n                                    text=\"@green_yhjw\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\nfig.show()\n```\n\n<h2> World Job Ratio: Heat Map </h2> \n\nThe trend of increasing each job except Others. <br>\nData Scientist has a high proportion, and the trend is to increase further in 2022. <br>\n\n<h2> East Asia Job Ratio: Heat Map </h2> \nEast Asia : Increasing the ratio of data scientist. <br>\n\n![](/images/kaggle_final/newplot8.png)\n\n```python\n#data preprocessing\ndf21job= df21.loc[:,['region','Q5']].rename(columns={'Q5':'2021'}).fillna('Others')\ndf20job= df20.loc[:,['region','Q5']].rename(columns={'Q5':'2020'}).fillna('Others')\ndf19job= df19.loc[:,['region','Q5']].rename(columns={'Q5':'2019'}).fillna('Others')\ndf18job= df18.loc[:,['region','Q6']].rename(columns={ 'Q6':'2018'}).fillna('Others')\ndf17job= df17.loc[:,['region','CurrentJobTitleSelect']].rename(columns={'CurrentJobTitleSelect':'2017'}).fillna('Others')\n\ndf21job['JOB']=[\"Data Analyst\" if x in Data_Analyst\n                   else \"Data Scientist\" if x in Data_Scientist # Data Scientist\n                   else \"Developer\" if x in Developer\n                    else \"NotEmployed\" if x in Not_Employed\n                   else \"Others\" \n                   for x in df21job['2021']]\n\n\ndf20job['JOB']=[\"Data Analyst\" if x in Data_Analyst\n                   else \"Data Scientist\" if x in Data_Scientist \n                   else \"Developer\" if x in Developer\n                    else \"NotEmployed\" if x in Not_Employed\n                   else \"Others\"\n                   for x in df20job['2020']]\n\n\ndf19job['JOB']=[\"Data Analyst\" if x in Data_Analyst\n                   else \"Data Scientist\" if x in Data_Scientist \n                   else \"Developer\" if x in Developer\n                    else \"NotEmployed\" if x in Not_Employed\n                    else \"Others\"\n                   for x in df19job['2019']]\n\n\ndf18job['JOB']=[\"Data Analyst\" if x in Data_Analyst\n                   else \"Data Scientist\" if x in Data_Scientist \n                   else \"Developer\" if x in Developer\n                    else \"NotEmployed\" if x in Not_Employed\n                    else \"Others\"\n                   for x in df18job['2018']]\n\n\ndf17job['JOB']=[\"Data Analyst\" if x in Data_Analyst\n                   else \"Data Scientist\" if x in Data_Scientist \n                   else \"Developer\" if x in Developer\n                    else \"NotEmployed\" if x in Not_Employed\n                    else \"Others\"\n                   for x in df17job['2017']]\n\ndf21_job =df21job.groupby(['JOB']).size().reset_index().rename(columns = {0:\"Count\"})\ndf20_job =df20job.groupby(['JOB']).size().reset_index().rename(columns = {0:\"Count\"})\ndf19_job =df19job.groupby(['JOB']).size().reset_index().rename(columns = {0:\"Count\"})\ndf18_job =df18job.groupby(['JOB']).size().reset_index().rename(columns = {0:\"Count\"})\ndf17_job =df17job.groupby(['JOB']).size().reset_index().rename(columns = {0:\"Count\"})\n\nmerge11=pd.merge(df21_job,df20_job, how='outer',on='JOB')\nmerge21=pd.merge(df19_job,df18_job, how='outer',on='JOB')\nmerge31=pd.merge(merge11,merge21, how='outer',on='JOB')\nmerge_Wo=(pd.merge(merge31,df17_job, how='outer',on='JOB')\n            .rename(columns = {'Count_x_x':'2021','Count_y_x':'2020','Count_x_y':'2019','Count_y_y':'2018','Count':'2017'}).fillna(0)\n            .reindex(columns = ['JOB','2017','2018','2019','2020','2021' ]))\n\ndf21job_Ea = df21job[df21job['region'] == 'EastAsia'].loc[:,['region','JOB']].rename(columns={'region':'EastAsia'})\ndf20job_Ea = df20job[df20job['region'] == 'EastAsia'].loc[:,['region','JOB']].rename(columns={'region':'EastAsia'})\ndf19job_Ea = df19job[df19job['region'] == 'EastAsia'].loc[:,['region','JOB']].rename(columns={'region':'EastAsia'})\ndf18job_Ea = df18job[df18job['region'] == 'EastAsia'].loc[:,['region','JOB']].rename(columns={'region':'EastAsia'})\ndf17job_Ea = df17job[df17job['region'] == 'EastAsia'].loc[:,['region','JOB']].rename(columns={'region':'EastAsia'})\n\ndf21job_Ea =df21job_Ea.groupby(['JOB']).size().reset_index().rename(columns = {0:\"Count\"})\ndf20job_Ea =df20job_Ea.groupby(['JOB']).size().reset_index().rename(columns = {0:\"Count\"})\ndf19job_Ea =df19job_Ea.groupby(['JOB']).size().reset_index().rename(columns = {0:\"Count\"})\ndf18job_Ea =df18job_Ea.groupby(['JOB']).size().reset_index().rename(columns = {0:\"Count\"})\ndf17job_Ea =df17job_Ea.groupby(['JOB']).size().reset_index().rename(columns = {0:\"Count\"})\n\nmerge1=pd.merge(df21job_Ea,df20job_Ea, how='outer',on='JOB')\nmerge2=pd.merge(df19job_Ea,df18job_Ea, how='outer',on='JOB')\nmerge3=pd.merge(merge1,merge2, how='outer',on='JOB')\nmerge=(pd.merge(merge3,df17job_Ea, how='outer',on='JOB')\n         .rename(columns = {'Count_x_x':'2021','Count_y_x':'2020','Count_x_y':'2019','Count_y_y':'2018','Count':'2017'}).fillna(0)\n         .reindex(columns = ['JOB','2017','2018','2019','2020','2021' ]))\n\n#graph\nz1=((merge_Wo.iloc[:,[1,2,3,4,5]].to_numpy()/merge_Wo.iloc[:,[1,2,3,4,5]].to_numpy().sum())*100).round(1)\nz2=((merge.iloc[:,[1,2,3,4,5]].to_numpy()/merge.iloc[:,[1,2,3,4,5]].to_numpy().sum())*100).round(1)\n\nx=['2017-year','2018-year','2019-year','2020-year','2021-year']\ny1=merge_Wo['JOB'].tolist()\ny2=merge['JOB'].tolist()\n\n\nfig1 = ff.create_annotated_heatmap(z1, x = x, y = y1, colorscale='sunset')\nfig2 = ff.create_annotated_heatmap(z2, x = x, y = y2, colorscale='sunset')\n\nfor annot in fig2['layout']['annotations']:\n    annot['xref'] = 'x2'\n    \nfig = make_subplots(rows=1, cols=2)\nfig.add_trace(fig1.data[0], row=1, col=1)\nfig.add_trace(fig2.data[0], row=1, col=2)\nfig.update_layout(fig1.layout, title='<b>           World vs EastAsia</b>',title_font_size=22,\n                  margin = dict(t=200, l=100, r=10, b=200),\n                  height=700, width=1150, coloraxis=dict(showscale=True, colorscale='sunset'))\nfig.update_traces(hovertemplate='<b>Job</b>: %{y}<br>'+\n                                '<b>Year</b>: %{x}<br>'+\n                                '<b>Percent</b>: %{z}%')\nfig.layout.annotations += fig2.layout.annotations\nfig.add_annotation(dict(font=dict(size=14),\n                                    x=0.9,\n                                    y=-0.25,\n                                    showarrow=False,\n                                    text=\"@green_yhjw\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\n\nfig.show()\n```\n\n# 3.1.4 Age transformation\n---\n\n<h2> > Age change in World and East Asia by year: Stacked scatter plot </h2>\n\n1. In the case of Age data, there is no 2017 data.\n2. 70% of the World respondents said 20s to 30s.\n3. 70% of East Asia respondents said 20s to 30s.\n4. The number of respondents increases, but the ratio seems to have stabilized.\n\n![](/images/kaggle_final/newplot9.png)\n![](/images/kaggle_final/newplot10.png)\n\n```python\n#data preprocessing\n#World\nAge21_W = df21.loc[:,['Q3','Q1', 'year']].reset_index().rename(columns={'Q3':'East_Asia', 'Q1':'age'}).fillna('etc')\nAge20_W = df20.loc[:,['Q3','Q1','year']].reset_index().rename(columns={'Q3':'East_Asia', 'Q1':'age'}).fillna('etc')\nAge19_W = df19.loc[:,['Q3','Q1','year']].reset_index().rename(columns={'Q3':'East_Asia', 'Q1':'age'}).fillna('etc')\nAge18_W = df18.loc[:,['Q3','Q2','year']].reset_index().rename(columns={'Q3':'East_Asia', 'Q2':'age'}).fillna('etc')\n\nAge5y_W= pd.concat([Age21_W, Age20_W, Age19_W, Age18_W])\nAge5y_W= (Age5y_W.replace(['60-69', '70+', '70-79', '80+'], '60+')\n           .replace(['22-24', '25-29'], '22-29')\n           .replace(['30-34', '35-39'], '30-39')\n            .replace(['40-44', '45-49'], '40-49')\n        .replace(['50-54', '55-59'], '50-59')\n           .groupby(['year', 'age'])\n           .size()\n           .reset_index()\n           .rename(columns = {0:\"Count\"}))\n\nAge21_percent_W = Age5y_W[Age5y_W['year'] == \"2021\"].reset_index(drop = True)\nAge21_percent_W['percentage'] = Age21_percent_W[\"Count\"] / Age21_percent_W[\"Count\"].sum()\nAge21_percent_W['%'] = np.round(Age21_percent_W['percentage'] * 100, 1)\n\nAge20_percent_W = Age5y_W[Age5y_W['year'] == \"2020\"].reset_index(drop = True)\nAge20_percent_W['percentage'] = Age20_percent_W[\"Count\"] / Age20_percent_W[\"Count\"].sum()\nAge20_percent_W['%'] = np.round(Age20_percent_W['percentage'] * 100, 1)\n\nAge19_percent_W = Age5y_W[Age5y_W['year'] == \"2019\"].reset_index(drop = True)\nAge19_percent_W['percentage'] = Age19_percent_W[\"Count\"] / Age19_percent_W[\"Count\"].sum()\nAge19_percent_W['%'] = np.round(Age19_percent_W['percentage'] * 100, 1)\n\nAge18_percent_W = Age5y_W[Age5y_W['year'] == \"2018\"].reset_index(drop = True)\nAge18_percent_W['percentage'] = Age18_percent_W[\"Count\"] / Age18_percent_W[\"Count\"].sum()\nAge18_percent_W['%'] = np.round(Age18_percent_W['percentage'] * 100, 1)\n\nAge5y_percent_W = pd.concat([Age18_percent_W, Age19_percent_W, Age20_percent_W, Age21_percent_W], ignore_index = True)\nAge5y_percent_W= pd.pivot(Age5y_percent_W, index = \"year\", columns = 'age', values = \"%\").reset_index()\nAge5y_percent_W\n\nAge21 = df21_Ea.loc[:,['Q3','Q1', 'year']].reset_index().rename(columns={'Q3':'East_Asia', 'Q1':'age'}).fillna('etc')\nAge20 = df20_Ea.loc[:,['Q3','Q1','year']].reset_index().rename(columns={'Q3':'East_Asia', 'Q1':'age'}).fillna('etc')\nAge19 = df19_Ea.loc[:,['Q3','Q1','year']].reset_index().rename(columns={'Q3':'East_Asia', 'Q1':'age'}).fillna('etc')\nAge18 = df18_Ea.loc[:,['Q3','Q2','year']].reset_index().rename(columns={'Q3':'East_Asia', 'Q2':'age'}).fillna('etc')\n\nAge5y= pd.concat([Age21, Age20, Age19, Age18])\nAge5y= (Age5y.replace(['60-69', '70+', '70-79', '80+'], '60+')\n           .replace(['22-24', '25-29'], '22-29')\n           .replace(['30-34', '35-39'], '30-39')\n            .replace(['40-44', '45-49'], '40-49')\n        .replace(['50-54', '55-59'], '50-59')\n           .groupby(['year', 'age'])\n           .size()\n           .reset_index()\n           .rename(columns = {0:\"Count\"}))\n\n#EastAsia\nAge21_percent = Age5y[Age5y['year'] == \"2021\"].reset_index(drop = True)\nAge21_percent['percentage'] = Age21_percent[\"Count\"] / Age21_percent[\"Count\"].sum()\nAge21_percent['%'] = np.round(Age21_percent['percentage'] * 100, 1)\nAge21_percent\n\nAge20_percent = Age5y[Age5y['year'] == \"2020\"].reset_index(drop = True)\nAge20_percent['percentage'] = Age20_percent[\"Count\"] / Age20_percent[\"Count\"].sum()\nAge20_percent['%'] = np.round(Age20_percent['percentage'] * 100, 1)\nAge20_percent\n\nAge19_percent = Age5y[Age5y['year'] == \"2019\"].reset_index(drop = True)\nAge19_percent['percentage'] = Age19_percent[\"Count\"] / Age19_percent[\"Count\"].sum()\nAge19_percent['%'] = np.round(Age19_percent['percentage'] * 100, 1)\nAge19_percent\n\nAge18_percent = Age5y[Age5y['year'] == \"2018\"].reset_index(drop = True)\nAge18_percent['percentage'] = Age18_percent[\"Count\"] / Age18_percent[\"Count\"].sum()\nAge18_percent['%'] = np.round(Age18_percent['percentage'] * 100, 1)\nAge18_percent\n\nAge5y_percent = pd.concat([Age18_percent, Age19_percent, Age20_percent, Age21_percent], ignore_index = True)\nAge5y_percent= pd.pivot(Age5y_percent, index = \"year\", columns = 'age', values = \"%\").reset_index()\nAge5y_percent\n\nAge5y_percent_order = Age5y_percent_W['year'].tolist()\nAge5y_order = Age5y_W['age'].unique().tolist()\n\n#graph1\nfig = go.Figure()\nfig.add_trace(go.Scatter(\n    x = Age5y_percent_order, \n    y = Age5y_percent_W['18-21'].tolist(), \n    mode = \"lines\", \n    name = '18-21',\n    line = dict(width = 1),\n    stackgroup = \"one\",\n    marker_color='#F2798F'))\n\nfig.add_trace(go.Scatter(\n    x = Age5y_percent_order, \n    y = Age5y_percent_W['22-29'].tolist(), \n    mode = \"lines\", \n    name = \"20s\",\n    line = dict(width = 1),\n    stackgroup = \"one\",\n    marker_color='#88BFBA'))\nfig.add_trace(go.Scatter(\n    x = Age5y_percent_order, \n    y = Age5y_percent_W['30-39'].tolist(), \n    mode = \"lines\", \n    name = \"30s\",\n    line = dict(width = 1),\n    stackgroup = \"one\",\n    marker_color='#CDD9A3'))\n\nfig.add_trace(go.Scatter(\n    x = Age5y_percent_order, \n    y = Age5y_percent_W['40-49'].tolist(), \n    mode = \"lines\", \n    name = \"40s\",\n    line = dict(width = 1),\n    stackgroup = \"one\",\n    marker_color='#F28705'))\nfig.add_trace(go.Scatter(\n    x = Age5y_percent_order, \n    y = Age5y_percent_W['50-59'].tolist(), \n    mode = \"lines\", \n    name = \"50s\",\n    line = dict(width = 1),\n    stackgroup = \"one\",\n    marker_color='#D9946C'))\nfig.add_trace(go.Scatter(\n    x = Age5y_percent_order, \n    y = Age5y_percent_W['60+'].tolist(), \n    mode = \"lines\", \n    name = \"60s<\",\n    line = dict(width = 1),\n    stackgroup = \"one\",\n    marker_color='#F2D64B'))\n\nfig.update_traces(hovertemplate='<b>Percent</b>: %{y}%<br>'+\n                                '<b>Year</b>: %{x}<br>')\nfig.update_layout(yaxis_range = (0, 100), height=500, width=700,\n                 title_text=\"<b>World</b>\", title_font_size=20,\n                 title_x=0.5)\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\nfig.add_annotation(dict(font=dict(size=14),\n                                    x=0.8,\n                                    y=-0.2,\n                                    showarrow=False,\n                                    text=\"@green_yhjw\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\nfig.show()\n\n#graph2\nAge5y_percent_order = Age5y_percent['year'].tolist()\nAge5y_order = Age5y['age'].unique().tolist()\n\nfig = go.Figure()\n\nfig.add_trace(go.Scatter(\n    x = Age5y_percent_order, \n    y = Age5y_percent['18-21'].tolist(), \n    mode = \"lines\", \n    name = '18-21',\n    line = dict(width = 1),\n    stackgroup = \"one\",\n    marker_color='#F2798F'))\n\nfig.add_trace(go.Scatter(\n    x = Age5y_percent_order, \n    y = Age5y_percent['22-29'].tolist(), \n    mode = \"lines\", \n    name = \"20s\",\n    line = dict(width = 1),\n    stackgroup = \"one\",\n    marker_color='#88BFBA'))\nfig.add_trace(go.Scatter(\n    x = Age5y_percent_order, \n    y = Age5y_percent['30-39'].tolist(), \n    mode = \"lines\", \n    name = \"30s\",\n    line = dict(width = 1),\n    stackgroup = \"one\",\n    marker_color='#CDD9A3'))\n\nfig.add_trace(go.Scatter(\n    x = Age5y_percent_order, \n    y = Age5y_percent['40-49'].tolist(), \n    mode = \"lines\", \n    name = \"40s\",\n    line = dict(width = 1),\n    stackgroup = \"one\",\n    marker_color='#F28705'))\nfig.add_trace(go.Scatter(\n    x = Age5y_percent_order, \n    y = Age5y_percent['50-59'].tolist(), \n    mode = \"lines\", \n    name = \"50s\",\n    line = dict(width = 1),\n    stackgroup = \"one\",\n    marker_color='#D9946C'))\nfig.add_trace(go.Scatter(\n    x = Age5y_percent_order, \n    y = Age5y_percent['60+'].tolist(), \n    mode = \"lines\", \n    name = \"60s<\",\n    line = dict(width = 1),\n    stackgroup = \"one\",\n    marker_color='#F2D64B'))\nfig.update_traces(hovertemplate='<b>Percent</b>: %{y}%<br>'+\n                                '<b>Year</b>: %{x}<br>')\nfig.update_layout(yaxis_range = (0, 100), height=500, width=700,\n                 title_text=\"<b>East Asia</b>\", title_font_size=20,\n                 title_x=0.5)\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\nfig.add_annotation(dict(font=dict(size=14),\n                                    x=0.8,\n                                    y=-0.2,\n                                    showarrow=False,\n                                    text=\"@green_yhjw\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\nfig.show()\n```\n\n<h2> 17'East Asia Age Ratio: Heat Map </h2>\n\n+ **East Asia** : 50% or more. Those in their 20s and 30s.\n+ **Korea**: Those in their 20s are the highest.\n    The number of respondents in their 50s and older is also large.\n+ **Taiwan** : The number of respondents in their 30s and older is relatively small.\n+ **China**: 70% or more of respondents in their 30s or younger.\n    Related to life expectancy?\n+ **Japan**: Like an aging country, all ages are evenly distributed.\n    Even if you're older, there are many respondents to Kaggle.\n\n![](/images/kaggle_final/newplot11.png)\n\n```python\n#data processing\ndf21Age_Ea = df21_Ea.loc[:,['Q3','Q1']].reset_index().rename(columns={'Q3':'East_Asia', 'Q1':'2021'}).fillna('etc')\n\ndf21Age_Ea=(df21Age_Ea.replace(['60-69', '70+', '70-79', '80+'], '60+')\n           .replace(['22-24', '25-29'], '22-29')\n           .replace(['30-34', '35-39'], '30-39')\n            .replace(['40-44', '45-49'], '40-49')\n        .replace(['50-54', '55-59'], '50-59'))\n\n# 연령-지역 %\ndfKo_Age21= df21Age_Ea[df21Age_Ea['East_Asia']=='South Korea']\ndfKo_Age21_per=dfKo_Age21['2021'].value_counts().to_frame().reset_index()\ndfKo_Age21_per['South Korea']=((dfKo_Age21_per['2021'] / len(dfKo_Age21))*100).round(2)\n\ndfTw_Age21= df21Age_Ea[df21Age_Ea['East_Asia']=='Taiwan']\ndfTw_Age21_per=dfTw_Age21['2021'].value_counts().to_frame().reset_index()\ndfTw_Age21_per['Taiwan']=((dfTw_Age21_per['2021'] / len(dfTw_Age21))*100).round(2)\ndfTw_Age21_per\n\ndfCh_Age21= df21Age_Ea[df21Age_Ea['East_Asia']=='China']\ndfCh_Age21_per=dfCh_Age21['2021'].value_counts().to_frame().reset_index()\ndfCh_Age21_per['China']=((dfCh_Age21_per['2021'] / len(dfCh_Age21))*100).round(2)\ndfCh_Age21_per\n\ndf21Age_Ea.head()\ndfJp_Age21= df21Age_Ea[df21Age_Ea['East_Asia']=='Japan']\ndfJp_Age21_per=dfJp_Age21['2021'].value_counts().to_frame().reset_index()\ndfJp_Age21_per['Japan']=((dfJp_Age21_per['2021'] / len(dfJp_Age21))*100).round(2)\ndfJp_Age21_per\n\n\nmerge1= pd.merge(dfKo_Age21_per,dfTw_Age21_per, on='index', how='outer')\nmerge2= pd.merge(dfCh_Age21_per,dfJp_Age21_per, on='index', how='outer')\nmerge= pd.merge(merge1,merge2, on='index', how='outer').fillna(0).sort_values(by=['index'],ascending=True)\n\n#graph\nx1=['South Korea','Taiwan','China','Japan']\ny1=merge.sort_values(by=['index'], ascending=True)['index'].tolist()\nz1=merge.iloc[:,[2,4,6,8]].to_numpy()\n\nfig = go.Figure(data=go.Heatmap(\n                   z=z1,\n                   x=x1,\n                   y=y1,\n                   hoverongaps = True,\n                   opacity=1.0, xgap=2.5, ygap=2.5))\nfig = ff.create_annotated_heatmap(z1, x = x1, y = y1, colorscale='sunset')\nfig.update_layout(height=500, width=600,\n                 title_text=\"<b>East Asia Age (2021)</b>\", title_font_size=20,\n                 title_x=0.5)\nfig.update_traces(hovertemplate='<b>Age</b>: %{y}<br>'+\n                                '<b>Country</b>: %{x}<br>'+\n                                '<b>Percent</b>: %{z}%')\nfig.add_annotation(dict(font=dict(size=14),\n                                    x=0.8,\n                                    y=-0.2,\n                                    showarrow=False,\n                                    text=\"@green_yhjw\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\nfig.show()\n```\n\n> 17'East Asia's age ratio: Box plot\n\n> 2017: Data is not a section but an individual number.  <br>\n> If you divide the interval, you can add it to the previous graph. <br>\n> It was data that I could draw a bar plot, so I drew it. <br>\n> You can see a 100-year-old in China, but they don't remove missing values on purpose.\n\n![](/images/kaggle_final/newplot12.png)\n\n```python\n# 연도별 나이 \ndf21Age_Ea = df21_Ea.loc[:,['Q3','Q1']].reset_index().rename(columns={'Q3':'East_Asia', 'Q1':'2021'}).fillna('etc')\ndf20Age_Ea = df20_Ea.loc[:,['Q3','Q1']].reset_index().rename(columns={'Q3':'East_Asia', 'Q1':'2020'}).fillna('etc')\ndf19Age_Ea = df19_Ea.loc[:,['Q3','Q1']].reset_index().rename(columns={'Q3':'East_Asia', 'Q1':'2019'}).fillna('etc')\ndf18Age_Ea = df18_Ea.loc[:,['Q3','Q2']].reset_index().rename(columns={'Q3':'East_Asia', 'Q2':'2018'}).fillna('etc')\ndf17Age_Ea = df17_Ea.loc[:,['Country','Age']].reset_index().rename(columns={'Country':'East_Asia', 'Age':'2017'}).fillna('etc')\n\n#data frame 정리\ndfAge21 =df21Age_Ea.groupby(['East_Asia','2021']).size().reset_index().rename(columns = {0:\"Count\"})\ndfAge20 =df20Age_Ea.groupby(['East_Asia','2020']).size().reset_index().rename(columns = {0:\"Count\"})\ndfAge19 =df19Age_Ea.groupby(['East_Asia','2019']).size().reset_index().rename(columns = {0:\"Count\"})\ndfAge18 =df18Age_Ea.groupby(['East_Asia','2018']).size().reset_index().rename(columns = {0:\"Count\"})\ndfAge17 =(df17Age_Ea.groupby(['East_Asia','2017'])\n          .size().reset_index().rename(columns = {0:\"Count\"}))\n#graph\nfig = go.Figure()\n\nx = ['China','Japan','South Korea','Taiwan']\n\nfig.add_trace(go.Box( y=dfAge17['2017'][dfAge17['East_Asia']==\"Japan\"].to_numpy(),\n    name='Japan',\n    marker=dict(color='#CDD9A3')))\nfig.add_trace(go.Box(y=dfAge17['2017'][dfAge17['East_Asia']==\"China\"].to_numpy(),\n    name='China',\n    marker=dict(color='#88BFBA')))\nfig.add_trace(go.Box(y=dfAge17['2017'][dfAge17['East_Asia']==\"South Korea\"].to_numpy(),\n    name='South Korea',\n    marker=dict(color='#F2798F')))\nfig.add_trace(go.Box(y=dfAge17['2017'][dfAge17['East_Asia']==\"Taiwan\"].to_numpy(),\n    name='Taiwan',\n    marker=dict(color='#F28705'\n    ),))\n\nfig.update_layout(yaxis = dict(range=[0, 120]))\n\n\nfig.update_layout(yaxis_range = (0, 110), height=600, width=700,\n                  title_text=\"<b>Age in East Asia (2017)</b>\", title_font_size=20,\n                  margin = dict(t=100, l=50, r=50, b=100),\n                  title_x=0.5)\n\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\nfig.update_layout(legend=dict(\n    orientation=\"v\",\n    yanchor=\"bottom\",\n    y=0.8,\n    xanchor=\"right\",\n    x=1))\nfig.add_annotation(dict(font=dict(size=14),\n                                    x=0.8,\n                                    y=-0.2,\n                                    showarrow=False,\n                                    text=\"@green_yhjw\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\nfig.show()\n```\n\n# 3.1.5 Degree transformation\n---\n\n<h2> World job ratio in each country: pie plot </h2>\n\n- World: 90% or higher Bachelor's degree\n- East Asia: 85% bachelor's degree or higher\n\n![](/images/kaggle_final/newplot13.png)\n\n```python\n#data preprocessing\ndegree_wo = (df21['Q4']\n             .replace(['No formal education past high school',\n                       'Some college/university study without earning a bachelor’s degree'],'~college')\n             .replace(['Doctoral degree',\n                       'Professional doctorate'],'Doctoral degree~')\n             .value_counts().to_frame())\ndegree_ea = (df21_Ea['Q4']\n             .replace(['No formal education past high school',\n                       'Some college/university study without earning a bachelor’s degree'],'~college')\n             .replace(['Doctoral degree',\n                       'Professional doctorate'],'Doctoral degree~')\n             .value_counts().to_frame())\n\n#graph\ncolors = ['#F2798F','#88BFBA', '#CDD9A3', '#F28705', '#D9946C']\nfig = make_subplots(rows=1, cols=2, specs=[[{'type':'pie'}, {'type':'pie'}]], subplot_titles=(\"World\", \"East Asia\"))\nfig.add_trace(go.Pie(marker=dict(colors=colors), labels=degree_wo.index, values=degree_wo['Q4'].to_numpy(), name=\"World\"),\n              1, 1)\nfig.add_trace(go.Pie(marker=dict(colors=colors), labels=degree_ea.index, values=degree_ea['Q4'].to_numpy(), name=\"East Asia\"),\n              1, 2)\n\nfig.update_traces(hole=.0, hoverinfo=\"label+percent+name\")\n\nfig.update_layout(title='<b>World vs East Asia</b>',title_font_size=22,\n                  margin = dict(t=200, l=30, r=0, b=200),\n                  height=700, width=700)\nfig.update_layout(legend=dict(\n    orientation=\"h\",\n    yanchor=\"bottom\",\n    y=1.1,\n    xanchor=\"right\",\n    x=1.0))\nfig.add_annotation(dict(font=dict(size=14),\n                                    x=0.8,\n                                    y=-0.5,\n                                    showarrow=False,\n                                    text=\"@green_yhjw\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\nfig.show()\n\n```\n\n<h2> Percentage of East Asia degrees by year: sunburst plot </h2>\n\nThe highest percentage of respondents with **master's degrees** per year\n\n![](/images/kaggle_final/newplot14.png)\n\n```python\n#data preprocessing\ndf21_Ea_degree=(df21_Ea['Q4'].replace(['No formal education past high school', 'Some college/university study without earning a bachelor’s degree'],'~college')\n                             .replace(['Doctoral degree','Professional doctorate'],'Doctoral degree~')\n                             .value_counts().to_frame().rename(columns={'Q4':'2021'}))\ndf20_Ea_degree=(df20_Ea['Q4'].replace(['No formal education past high school', 'Some college/university study without earning a bachelor’s degree'],'~college')\n                             .replace(['Doctoral degree', 'Professional degree'],'Doctoral degree~')\n                             .value_counts().to_frame().rename(columns={'Q4':'2020'}))\ndf19_Ea_degree=(df19_Ea['Q4'].replace(['No formal education past high school','Some college/university study without earning a bachelor’s degree'],'~college')\n                             .replace(['Doctoral degree', 'Professional degree'],'Doctoral degree~')\n                             .value_counts().to_frame().rename(columns={'Q4':'2019'}))\ndf18_Ea_degree=(df18_Ea['Q4'].replace(['No formal education past high school', 'Some college/university study without earning a bachelor’s degree'],'~college')\n                             .replace(['Doctoral degree', 'Professional degree'],'Doctoral degree~')\n                             .value_counts().to_frame().rename(columns={'Q4':'2018'}))\ndf17_Ea_degree=(df17_Ea['FormalEducation']\n                .replace(['No formal education past high school', 'Some college/university study without earning a bachelor’s degree'],'~college')\n                .replace(['Doctoral degree', 'Professional degree'],'Doctoral degree~')\n                .value_counts().to_frame()\n                .rename(columns={'FormalEducation':'2017'} ,index = {'I did not complete any formal education past high school':'No formal education past high school','Master\\'s degree':'Master’s degree','Bachelor\\'s degree':'Bachelor’s degree','Some college/university study without earning a bachelor\\'s degree':'Some college/university study without earning a bachelor’s degree'})  )\n                \nconcat1 = pd.concat([df21_Ea_degree,df20_Ea_degree],axis=1, join='outer')  \nconcat2 = pd.concat([df19_Ea_degree,df18_Ea_degree],axis=1, join='outer')  \nconcat3 = pd.concat([concat1,concat2],axis=1, join='outer') \ndf21_Ea_degree_yearly_=concat3.join(df17_Ea_degree).fillna(0).transpose() #.transpose() 행 열 바꾸기\n\ndf21_Ea_degree_yearly=df21_Ea_degree_yearly_.stack().to_frame().reset_index().rename(columns={'level_0':'year','level_1':'degree',0:'value'})\ndf21_Ea_degree_yearly\n\n#graph\nfig = px.sunburst(df21_Ea_degree_yearly, path=['year','degree'], values=df21_Ea_degree_yearly['value'].tolist())\nfig.update_layout( margin = dict(t=10, l=10, r=10, b=10),colorway=(\"#F2798F\",\"#88BFBA\",\"#CDD9A3\",'#F28705','#D9946C'))\n\nfig.update_layout(title='<b>         Degree</b>',title_font_size=25,\n                  margin = dict(t=100, l=100, r=50, b=100),\n                  height=700, width=700)\nfig.update_traces(hovertemplate='<b>Name</b>: %{id}<br>'+\n                                '<b>Count</b>: %{value}<br>'+\n                                '<b>Parent</b>: %{parent}') \nfig.add_annotation(dict(font=dict(size=14),\n                                    x=0.8,\n                                    y=-0.2,\n                                    showarrow=False,\n                                    text=\"@green_yhjw\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\nfig.show()\n```\n\n<h3> Plus we could see the advantages of Plotly in this graph. \n</h3>\n\nMatplotlib draws a static graph, but Plotly can dynamically click and move, and it supports zooming out, zooming in, and downloading graphs.\n    \nBecause all of our graphs are made of plotly, the viewer can represent or remove items in the graph if desired. \n   **With a click**\n\n<h2> East Asia Degree Ratio: Bar plot</h2>\n\n40% of master's degrees or higher, and respondents have a high educational background.\n\n- China and Japan have similar trends to East Asia and the World. <br>\n    The number of people itself is large, so a representative trend seems to appear here. <br>\n    However, it is noteworthy that the two countries have the same tendency. <br>\n\n\n- Korea: It is the only country among the four countries with a high degree of education below Ph.D., bachelor's degree, and junior college. Only masters are low. \n    (Polarization of education?)\n\n- Taiwan: 1st place in master's ratio (55%), 2nd place in Ph.D. or higher (13.8%).\n    = The highest level of education.\n\n\n![](/images/kaggle_final/newplot15.png)\n\n```python\n#data preprocessing\ndf21Edu_Ea = df21_Ea.loc[:,['Q3','Q4']].reset_index().rename(columns={'Q3':'East_Asia', 'Q4':'Dgree'}).fillna('etc')\ndf21Edu_Ea =(df21Edu_Ea.replace({'I prefer not to answer':'etc'}).replace(['No formal education past high school',\n                       'Some college/university study without earning a bachelor’s degree'],'~college')\n             .replace(['Doctoral degree',\n                       'Professional doctorate'],'Doctoral degree~'))\n\ndf21Edu_Ea= (df21Edu_Ea\n           .groupby(['East_Asia', 'Dgree'])\n           .size()\n           .reset_index()\n           .rename(columns = {0:\"Count\"}))\n\n# 연령-지역 %\ndfKo_Edu21= df21Edu_Ea[df21Edu_Ea['East_Asia']=='South Korea']\ndfKo_Edu21['%']=((dfKo_Edu21['Count'] / dfKo_Edu21['Count'].sum()*100)).round(2)\ndfKo_Edu21=dfKo_Edu21.sort_values(by='%', ascending=False)\ndfTw_Edu21= df21Edu_Ea[df21Edu_Ea['East_Asia']=='Taiwan']\ndfTw_Edu21['%']=((dfTw_Edu21['Count'] / dfTw_Edu21['Count'].sum())*100).round(2)\ndfTw_Edu21=dfTw_Edu21.sort_values(by='%', ascending=False)\ndfCh_Edu21= df21Edu_Ea[df21Edu_Ea['East_Asia']=='China']\ndfCh_Edu21['%']=((dfCh_Edu21['Count'] / dfCh_Edu21['Count'].sum())*100).round(2)\ndfCh_Edu21=dfCh_Edu21.sort_values(by='%', ascending=False)\ndfJp_Edu21= df21Edu_Ea[df21Edu_Ea['East_Asia']=='Japan']\ndfJp_Edu21['%']=((dfJp_Edu21['Count'] / dfJp_Edu21['Count'].sum())*100).round(2)\ndfJp_Edu21=dfJp_Edu21.sort_values(by='%', ascending=False)\n\n# #data 완성\n# dfEdu_21_per = pd.concat([dfKo_Edu21, dfTw_Edu21, dfCh_Edu21, dfJp_Edu21], ignore_index = True)\n# dfEdu_21_per= pd.pivot(dfEdu_21_per, index = \"Dgree\", columns = 'East_Asia', values = \"%\").reset_index()\n# dfEdu_21_per\n\n#graph\nfig = make_subplots(rows = 1, cols = 4, \n                    shared_yaxes=True, \n                    vertical_spacing = 0.05)\n\nfig.add_trace(go.Bar(x = dfCh_Edu21['Dgree'], \n                     y = dfCh_Edu21['%'], \n                     text = dfCh_Edu21['%'].astype(str) + \"%\", \n                     textposition='outside',\n                     name='China',\n                     marker_color='#88BFBA'), \n                     row = 1, col = 1)\n\nfig.add_trace(go.Bar(x = dfJp_Edu21['Dgree'], \n                     y = dfJp_Edu21['%'], \n                     text = dfJp_Edu21['%'].astype(str) + \"%\", \n                     textposition='outside',\n                     name='Japan',\n                     marker_color='#CDD9A3'), \n                      row = 1, col = 2)\n\nfig.add_trace(go.Bar(x = dfKo_Edu21['Dgree'], \n                     y = dfKo_Edu21['%'], \n                     text = dfKo_Edu21['%'].astype(str) + \"%\", \n                     textposition='outside',\n                     name='South Korea',\n                     marker_color='#F28705'), \n                      row = 1, col = 3)\n\nfig.add_trace(go.Bar(x = dfTw_Edu21['Dgree'], \n                     y = dfTw_Edu21['%'], \n                     text = dfTw_Edu21['%'].astype(str) + \"%\", \n                     textposition='outside',\n                     name='Taiwan',\n                     marker_color='#D9946C'), \n                     row = 1, col = 4)\n\nfig.update_layout(showlegend=True,title='<b>Degree in East Asia</b>',title_font_size=22,\n                  margin = dict(t=200, l=100, r=50, b=200),\n                  height=700, width=700)\nfig.update_traces(hovertemplate='<b>Percent</b>: %{y}%<br>'+\n                                '<b>Degree</b>: %{x}<br>')\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\nfig.update_layout(legend=dict(\n    orientation=\"h\",\n    yanchor=\"bottom\",\n    y=1.1,\n    xanchor=\"right\",\n    x=1))\nfig.add_annotation(dict(font=dict(size=14),\n                                    x=0.8,\n                                    y=-0.5,\n                                    showarrow=False,\n                                    text=\"@green_yhjw\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\nfig.show()\n```\n\n# 3.1.6 Experience transformation\n---\n\n<h2> Trends in World & East Asia Career: Stacked Scatter plot </h2>\n- < 2 years: 50% of the total. <br>\n- 3-5 years: Decrease in the world, maintain East Asia ratio <br>\n- 2021 'etc data' disappeared. <br>\n\n![](/images/kaggle_final/newplot16.png)\n![](/images/kaggle_final/newplot17.png)\n\n```python\n#Exp data 전처리\n# Exp 뽑아오기\nExp21_Wo = df21.loc[:,['Q3','Q6', 'year']].reset_index().rename(columns={'Q3':'Country', 'Q6':'Exp'}).fillna('etc')\nExp20_Wo = df20.loc[:,['Q3','Q6','year']].reset_index().rename(columns={'Q3':'Country', 'Q6':'Exp'}).fillna('etc')\nExp19_Wo = df19.loc[:,['Q3','Q15','year']].reset_index().rename(columns={'Q3':'Country', 'Q15':'Exp'}).fillna('etc')\nExp18_Wo = df18.loc[:,['Q3','Q8','year']].reset_index().rename(columns={'Q3':'Country', 'Q8':'Exp'}).fillna('etc')\nExp17_Wo = df17.loc[:,['Country','Tenure', 'year']].reset_index().rename(columns={'Country':'Country', 'Tenure':'Exp'}).fillna('etc')\n\nExp21_Wo= Exp21_Wo.replace({'I have never written code': '< 1 years',  '1-3 years': '1-2 years'}).replace(['10-20 years', '20+ years'], '10+ years' )\nExp20_Wo= Exp20_Wo.replace({'I have never written code': '< 1 years'}).replace(['10-20 years', '20+ years'], '10+ years' )\nExp19_Wo= Exp19_Wo.replace({'I have never written code': '< 1 years'}).replace(['10-20 years', '20+ years'], '10+ years' )\nExp18_Wo= (Exp18_Wo.replace({'0-1': '< 1 years', '1-2': '1-2 years', '5-10':'5-10 years'})\n        .replace(['2-3', '3-4',  '4-5'],'3-5 years')\n       .replace(['10-15', '15-20','20-25', '30 +','25-30'],'10+ years'))\nExp17_Wo=(Exp17_Wo.replace({'More than 10 years':'10+ years', '1 to 2 years':'1-2 years',  'Less than a year':'< 1 years',\n       '3 to 5 years':'3-5 years', \"I don't write code to analyze data\":'< 1 years',\n       '6 to 10 years':'5-10 years'}))\n                                                                                                                   \n#data 정제(한꺼번에 이름바꾸기)\nExp5y_Wo= pd.concat([Exp17_Wo, Exp18_Wo, Exp19_Wo, Exp20_Wo, Exp21_Wo]).reset_index()\nExp5y_Wo=(Exp5y_Wo.groupby(['year', 'Exp'])\n           .size()\n           .reset_index()\n           .rename(columns = {0:\"Count\"}))\n\n#percent data 넣기\nExp21_per_W= Exp5y_Wo[Exp5y_Wo['year'] == \"2021\"].reset_index(drop = True)\nExp21_per_W['percentage'] = Exp21_per_W[\"Count\"] / Exp21_per_W[\"Count\"].sum()\nExp21_per_W['%'] = np.round(Exp21_per_W['percentage'] * 100, 1)\n\nExp20_per_W = Exp5y_Wo[Exp5y_Wo['year'] == \"2020\"].reset_index(drop = True)\nExp20_per_W['percentage'] = Exp20_per_W[\"Count\"] / Exp20_per_W[\"Count\"].sum()\nExp20_per_W['%'] = np.round(Exp20_per_W['percentage'] * 100, 1)\n\nExp19_per_W = Exp5y_Wo[Exp5y_Wo['year'] == \"2019\"].reset_index(drop = True)\nExp19_per_W['percentage'] = Exp19_per_W[\"Count\"] / Exp19_per_W[\"Count\"].sum()\nExp19_per_W['%'] = np.round(Exp19_per_W['percentage'] * 100, 1)\n\nExp18_per_W = Exp5y_Wo[Exp5y_Wo['year'] == \"2018\"].reset_index(drop = True)\nExp18_per_W['percentage'] = Exp18_per_W[\"Count\"] / Exp18_per_W[\"Count\"].sum()\nExp18_per_W['%'] = np.round(Exp18_per_W['percentage'] * 100, 1)\n\nExp17_per_W = Exp5y_Wo[Exp5y_Wo['year'] == \"2017\"].reset_index(drop = True)\nExp17_per_W['percentage'] = Exp17_per_W[\"Count\"] / Exp17_per_W[\"Count\"].sum()\nExp17_per_W['%'] = np.round(Exp17_per_W['percentage'] * 100, 1)\n\n#data 완성\nExp5y_per_W = pd.concat([Exp17_per_W, Exp18_per_W, Exp19_per_W, Exp20_per_W, Exp21_per_W], ignore_index = True)\nExp5y_per_W= pd.pivot(Exp5y_per_W, index = \"year\", columns = 'Exp', values = \"%\").reset_index()\nExp5y_per_W.fillna('0')\nExp5y_percent_order = Exp5y_per_W['year'].tolist()\n\nfig = go.Figure()\nfig.add_trace(go.Scatter(\n    x = Exp5y_percent_order, \n    y = Exp5y_per_W['< 1 years'].tolist(), \n    mode = \"lines\", \n    name = '< 1 years',\n    line = dict(width = 0.5),\n    stackgroup = \"one\",\n    marker_color='#F2798F'))\nfig.add_trace(go.Scatter(\n    x = Exp5y_percent_order, \n    y = Exp5y_per_W['1-2 years'].tolist(), \n    mode = \"lines\", \n    name = '1-2 years',\n    line = dict(width = 0.5),\n    stackgroup = \"one\",\n    marker_color='#88BFBA'))\nfig.add_trace(go.Scatter(\n    x = Exp5y_percent_order, \n    y = Exp5y_per_W['3-5 years'].tolist(), \n    mode = \"lines\", \n    name = '3-5 years',\n    line = dict(width = 0.5),\n    stackgroup = \"one\",\n    marker_color='#CDD9A3'))\nfig.add_trace(go.Scatter(\n    x = Exp5y_percent_order, \n    y = Exp5y_per_W['5-10 years'].tolist(), \n    mode = \"lines\", \n    name = '5-10 years',\n    line = dict(width = 0.5),\n    stackgroup = \"one\",\n    marker_color='#F28705'))\nfig.add_trace(go.Scatter(\n    x = Exp5y_percent_order, \n    y = Exp5y_per_W['10+ years'].tolist(), \n    mode = \"lines\", \n    name = '10+ years',\n    line = dict(width = 0.5),\n    stackgroup = \"one\",\n    marker_color='#D9946C'))\n\nfig.add_trace(go.Scatter(\n    x = Exp5y_percent_order, \n    y = Exp5y_per_W['etc'].tolist(), \n    mode = \"lines\", \n    name = 'etc',\n    line = dict(width = 1),\n    stackgroup = \"one\",\n    marker_color='#F2D64B'))\n\nfig.update_traces(hovertemplate='<b>Percent</b>: %{y}%<br>')\nfig.update_layout(yaxis_range = (0, 100), title_font_size=20,\n                  title_text=\"<b>Experience in world</b>\",\n                  height=500, width=700,\n                  title_x=0.5)\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\nfig.add_annotation(dict(font=dict(size=14),\n                                    x=0.8,\n                                    y=-0.2,\n                                    showarrow=False,\n                                    text=\"@green_yhjw\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\nfig.show()\n\n```\n\n\n```python\n#data preprocessing\nExp21 = df21_Ea.loc[:,['Q3','Q6', 'year']].reset_index().rename(columns={'Q3':'East_Asia', 'Q6':'Exp'}).fillna('etc')\nExp20 = df20_Ea.loc[:,['Q3','Q6','year']].reset_index().rename(columns={'Q3':'East_Asia', 'Q6':'Exp'}).fillna('etc')\nExp19 = df19_Ea.loc[:,['Q3','Q15','year']].reset_index().rename(columns={'Q3':'East_Asia', 'Q15':'Exp'}).fillna('etc')\nExp18 = df18_Ea.loc[:,['Q3','Q8','year']].reset_index().rename(columns={'Q3':'East_Asia', 'Q8':'Exp'}).fillna('etc')\nExp17 = df17_Ea.loc[:,['Country','Tenure', 'year']].reset_index().rename(columns={'Country':'East_Asia', 'Tenure':'Exp'}).fillna('etc')\n\nExp21Uni=['3-5 years', '< 1 years', '1-3 years', '10-20 years',\n       'I have never written code', '5-10 years', '20+ years']\nExp20Uni= ['3-5 years', '< 1 years', '5-10 years', '1-2 years', 'etc',\n       '20+ years', '10-20 years', 'I have never written code']\nExp19Uni=['1-2 years', '5-10 years', '< 1 years',\n       'I have never written code', '3-5 years', '10-20 years',\n       '20+ years', 'etc']\nExp18Uni=['0-1', '2-3', '1-2', '5-10', '3-4', '10-15', '15-20', '4-5',\n       '20-25', '30 +', 'etc', '25-30']\nExp17Uni=['More than 10 years', '1 to 2 years', 'etc', 'Less than a year',\n       '3 to 5 years', \"I don't write code to analyze data\",\n       '6 to 10 years']\n\nExp21= Exp21.replace({'I have never written code': '< 1 years',  '1-3 years': '1-2 years'}).replace(['10-20 years', '20+ years'], '10+ years' )\nExp20= Exp20.replace({'I have never written code': '< 1 years'}).replace(['10-20 years', '20+ years'], '10+ years' )\nExp19= Exp19.replace({'I have never written code': '< 1 years'}).replace(['10-20 years', '20+ years'], '10+ years' )\nExp18= (Exp18.replace({'0-1': '< 1 years', '1-2': '1-2 years', '5-10':'5-10 years'})\n        .replace(['2-3', '3-4',  '4-5'],'3-5 years')\n       .replace(['10-15', '15-20','20-25', '30 +','25-30'],'10+ years'))\nExp17=(Exp17.replace({'More than 10 years':'10+ years', '1 to 2 years':'1-2 years',  'Less than a year':'< 1 years',\n       '3 to 5 years':'3-5 years', \"I don't write code to analyze data\":'< 1 years',\n       '6 to 10 years':'5-10 years'}))\n                                                                                                                \nExp5y= pd.concat([Exp17, Exp18, Exp19, Exp20, Exp21]).reset_index()\nExp5y=(Exp5y.groupby(['year', 'Exp'])\n           .size()\n           .reset_index()\n           .rename(columns = {0:\"Count\"}))\n\nExp21_percent = Exp5y[Exp5y['year'] == \"2021\"].reset_index(drop = True)\nExp21_percent['percentage'] = Exp21_percent[\"Count\"] / Exp21_percent[\"Count\"].sum()\nExp21_percent['%'] = np.round(Exp21_percent['percentage'] * 100, 1)\nExp21_percent\n\nExp20_percent = Exp5y[Exp5y['year'] == \"2020\"].reset_index(drop = True)\nExp20_percent['percentage'] = Exp20_percent[\"Count\"] / Exp20_percent[\"Count\"].sum()\nExp20_percent['%'] = np.round(Exp20_percent['percentage'] * 100, 1)\nExp20_percent\n\nExp19_percent = Exp5y[Exp5y['year'] == \"2019\"].reset_index(drop = True)\nExp19_percent['percentage'] = Exp19_percent[\"Count\"] / Exp19_percent[\"Count\"].sum()\nExp19_percent['%'] = np.round(Exp19_percent['percentage'] * 100, 1)\nExp19_percent\n\nExp18_percent = Exp5y[Exp5y['year'] == \"2018\"].reset_index(drop = True)\nExp18_percent['percentage'] = Exp18_percent[\"Count\"] / Exp18_percent[\"Count\"].sum()\nExp18_percent['%'] = np.round(Exp18_percent['percentage'] * 100, 1)\nExp18_percent\n\nExp17_percent = Exp5y[Exp5y['year'] == \"2017\"].reset_index(drop = True)\nExp17_percent['percentage'] = Exp17_percent[\"Count\"] / Exp17_percent[\"Count\"].sum()\nExp17_percent['%'] = np.round(Exp17_percent['percentage'] * 100, 1)\nExp17_percent\n\n\n#graph\nExp5y_percent = pd.concat([Exp17_percent, Exp18_percent, Exp19_percent, Exp20_percent, Exp21_percent], ignore_index = True)\nExp5y_percent= pd.pivot(Exp5y_percent, index = \"year\", columns = 'Exp', values = \"%\").reset_index()\nExp5y_percent.fillna('0')\n\nExp5y_percent_order = Exp5y_percent['year'].tolist()\n\nfig = go.Figure()\n\nfig.add_trace(go.Scatter(\n    x = Exp5y_percent_order, \n    y = Exp5y_percent['< 1 years'].tolist(), \n    mode = \"lines\", \n    name = '< 1 years',\n    line = dict(width = 0.5),\n    stackgroup = \"one\",\n    marker_color='#F2798F'))\nfig.add_trace(go.Scatter(\n    x = Exp5y_percent_order, \n    y = Exp5y_percent['1-2 years'].tolist(), \n    mode = \"lines\", \n    name = '1-2 years',\n    line = dict(width = 0.5),\n    stackgroup = \"one\",\n    marker_color='#88BFBA'))\nfig.add_trace(go.Scatter(\n    x = Exp5y_percent_order, \n    y = Exp5y_percent['3-5 years'].tolist(), \n    mode = \"lines\", \n    name = '3-5 years',\n    line = dict(width = 0.5),\n    stackgroup = \"one\",\n    marker_color='#CDD9A3'))\nfig.add_trace(go.Scatter(\n    x = Exp5y_percent_order, \n    y = Exp5y_percent['5-10 years'].tolist(), \n    mode = \"lines\", \n    name = '5-10 years',\n    line = dict(width = 0.5),\n    stackgroup = \"one\",\n    marker_color='#F28705'))\nfig.add_trace(go.Scatter(\n    x = Exp5y_percent_order, \n    y = Exp5y_percent['10+ years'].tolist(), \n    mode = \"lines\", \n    name = '10+ years',\n    line = dict(width = 0.5),\n    stackgroup = \"one\",\n    marker_color='#D9946C'))\nfig.add_trace(go.Scatter(\n    x = Exp5y_percent_order, \n    y = Exp5y_percent['etc'].tolist(), \n    mode = \"lines\", \n    name = 'etc',\n    line = dict(width = 0.5),\n    stackgroup = \"one\",\n    marker_color='#F2D64B'))\nfig.update_traces(hovertemplate='<b>Percent</b>: %{y}%<br>')\nfig.update_layout(yaxis_range = (0, 100),\n                  title_text=\"<b>Experience in East Asia</b>\",\n                  height=500, width=700, title_font_size=20,\n                  title_x=0.5)\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\nfig.add_annotation(dict(font=dict(size=14),\n                                    x=0.8,\n                                    y=-0.2,\n                                    showarrow=False,\n                                    text=\"@green_yhjw\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\nfig.show()\n```\n\n# 3.1.7 Salary transformation\n---\n\n<h2> World & East Asia Annual salary: Bar-H plot\n</h2>\n\n- \\$ 200,000 ~ : World (2.9%) is more than 50% compared to East Asia (1.3%)\n- \\$ ~250,000 : World (59.2%) is less than East Asia (50.3%) <br>\n    = East Asia's annual salary gap between rich and poor is less.\n- \\$ 25,000~60,000: The highest section in East Asia at 24%. <br>\n= The annual salary section that we aim for.\n\n![](/images/kaggle_final/newplot18.png)\n\n```python\n#data preprocessing\ndf21_salary_=df21['Q25'].value_counts().to_frame().rename(index={'$0-999':'<999','>$1,000,000':'1,000,000~','$500,000-999,999':'500,000-999,999'}).fillna(0)\ndf21_Ea_salary_=df21_Ea['Q25'].value_counts().to_frame().rename(index={'$0-999':'<999','>$1,000,000':'1,000,000~','$500,000-999,999':'500,000-999,999'}).fillna(0)\n\n#퍼센트\ndf21_salary__=(df21_salary_['Q25']/(df21_salary_['Q25'].sum())*100).round(1).to_frame().rename(columns={'Q25':'World'})\ndf21_Ea_salary__=(df21_Ea_salary_['Q25']/(df21_Ea_salary_['Q25'].sum())*100).round(1).to_frame().rename(columns={'Q25':'EA'})\n\n#그룹화\ndf21_salary=(df21_salary__.rename(index=\n                               {'1,000-1,999':'1,000-7,499',\n                                '2,000-2,999':'1,000-7,499',\n                                '3,000-3,999':'1,000-7,499',\n                                '4,000-4,999':'1,000-7,499',\n                                '5,000-7,499':'1,000-7,499'})\n                                .rename(index={'7,500-9,999':'7,500-24,999',\n                                '10,000-14,999':'7,500-24,999',\n                                '15,000-19,999':'7,500-24,999',\n                                '20,000-24,999':'7,500-24,999' })\n                                .rename(index={'25,000-29,999':'25,000-59,999',\n                                 '30,000-39,999':'25,000-59,999',\n                                 '40,000-49,999':'25,000-59,999',\n                                 '50,000-59,999':'25,000-59,999'})\n                                .rename(index={'60,000-69,999':'60,000-99,999',\n                                 '70,000-79,999':'60,000-99,999',\n                                 '80,000-89,999':'60,000-99,999',\n                                 '90,000-99,999':'60,000-99,999'})\n                                .rename(index={'100,000-124,999':'100,000-199,999',\n                                 '125,000-149,999':'100,000-199,999',\n                                 '150,000-199,999':'100,000-199,999'})\n                                .rename(index={'200,000-249,999':'200,000-1,000,000~',\n                                 '250,000-299,999':'200,000-1,000,000~',\n                                 '300,000-499,999':'200,000-1,000,000~',\n                                 '500,000-999,999':'200,000-1,000,000~',\n                                 '1,000,000~':'200,000-1,000,000~'})\n                                .reset_index().groupby('index').sum()\n                                 .reindex(index = ['<999', \n                                                  '1,000-7,499',\n                                                  '7,500-24,999', \n                                                  '25,000-59,999', \n                                                  '60,000-99,999', \n                                                 '100,000-199,999', \n                                                 '200,000-1,000,000~']))\n\ndf21_Ea_salary=(df21_Ea_salary__.rename(index=\n                               {'1,000-1,999':'1,000-7,499',\n                               '2,000-2,999':'1,000-7,499',\n                               '3,000-3,999':'1,000-7,499',\n                               '4,000-4,999':'1,000-7,499',\n                               '5,000-7,499':'1,000-7,499'})\n                                .rename(index={'7,500-9,999':'7,500-24,999',\n                               '10,000-14,999':'7,500-24,999',\n                               '15,000-19,999':'7,500-24,999',\n                               '20,000-24,999':'7,500-24,999'})\n                                .rename(index={'25,000-29,999':'25,000-59,999',\n                               '30,000-39,999':'25,000-59,999',\n                               '40,000-49,999':'25,000-59,999',\n                               '50,000-59,999':'25,000-59,999'})\n                                .rename(index={'60,000-69,999':'60,000-99,999',\n                               '70,000-79,999':'60,000-99,999',\n                               '80,000-89,999':'60,000-99,999',\n                               '90,000-99,999':'60,000-99,999'})\n                                .rename(index={'100,000-124,999':'100,000-199,999',\n                               '125,000-149,999':'100,000-199,999',\n                               '150,000-199,999':'100,000-199,999'})\n                                .rename(index={'200,000-249,999':'200,000-1,000,000~',\n                               '250,000-299,999':'200,000-1,000,000~',\n                               '300,000-499,999\t':'200,000-1,000,000~',\n                               '500,000-999,999':'200,000-1,000,000~',\n                               '1,000,000~':'200,000-1,000,000~'})\n                                .reset_index().groupby('index').sum()\n                                .reindex(index = ['<999', \n                                                  '1,000-7,499',\n                                                  '7,500-24,999', \n                                                  '25,000-59,999', \n                                                  '60,000-99,999', \n                                                 '100,000-199,999', \n                                                 '200,000-1,000,000~']))\n\n#graph\nWorld = df21_salary['World'].values\nEast_Asia = df21_Ea_salary['EA'].values\ny = df21_salary.index\n\nfig = go.Figure(data=[\n    go.Bar(y=y, x=World, orientation='h', name=\"World\", base=0, hovertemplate='<b>World</b>: %{x}%<br>', marker_color='#979DA6'),\n    go.Bar(y=y, x=-East_Asia, orientation='h', name=\"East Asia\", base=0, hovertemplate='<b>East Asia</b>: %{x}%<br>', marker_color='#F2D64B')\n    ])\n\nfig.update_layout(barmode='stack')\nfig.update_layout(\n    margin=dict(l=200, r=0, t=200, b=100),\n    autosize=False,\n    title_text=\"<b>                       Salary in East Asia vs World</b>\", height=600, width=700, title_font_size=20, title_x=0.5)\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\nfig.update_layout(legend=dict(\n    orientation=\"h\",\n    yanchor=\"bottom\",\n    y=1.1,\n    xanchor=\"right\",\n    x=1))\nfig.show()\n```\n\n<h2> World experience and annual salary: Heat Map </h2>\n\n<h4>Relatively **positive correlation.** </h4>\n\n- Even with 5-10 years of experience, more than 45% has an annual salary of less than $20,000\n\n- With more than 10 years of experience, more than 30% receive an annual salary of $100,000.\n\n![](/images/kaggle_final/newplot19.png)\n![](/images/kaggle_final/newplot20.png)\n\n```python\n#data preprocessing\nSalExp21= df21.loc[:, ['region', 'Q25', 'Q6']].rename(columns={'Q6':'Exp', 'Q25':'Salary'})\n\n\nSalExp21=(SalExp21\n          .replace(['0-999','$0-999','0'], '< 999')\n          .replace({'>$1,000,000':'200,000~'})\n          .replace(['1,000-1,999','2,000-2,999','3,000-3,999', \n        '4,000-4,999','5,000-7,499','7,500-9,999','10,000-14,999', '15,000-19,999'],'1,000-20,000')\n          .replace(['20,000-24,999''25,000-29,999','30,000-39,999', '40,000-49,999', \n        '50,000-59,999'],'20,000-59,999') \n           .replace(['60,000-69,999', '70,000-79,999', '80,000-89,999', \n        '90,000-99,999'], '60,000-99,999')\n          .replace(['100,000-124,999', '300,000-499,999',\n        '125,000-149,999', '125,000-149,999',\n        '150,000-199,999'],'100,000-199,999')\n          .replace(['200,000-249,999', '250,000-299,999', \n        '1,000,000','$500,000-999,999'], '200,000~')\n        .replace({'I have never written code': '< 1 years'})\n          .replace(['10-20 years', '20+ years'], '10+ years' )\n         )\n\nsal_order=['< 999', '1,000-20,000', '20,000-59,999', '60,000-99,999','100,000-199,999', '200,000~']\nExp21_order=['< 1 years', '1-3 years','3-5 years', '5-10 years', '10+ years' ]\n\n\n\nSalExp21_Ea = SalExp21[SalExp21['region'] == \"EastAsia\"].reset_index(drop = True)\nSalExp21_Ea=(SalExp21_Ea.groupby(['Exp', 'Salary'])\n           .size()\n          .unstack().fillna(0).astype('int64'))\n\nSalExp21_Wo = SalExp21[SalExp21['region'] == \"World\"].reset_index(drop = True)\nSalExp21_Wo=(SalExp21_Wo.groupby(['Exp', 'Salary'])\n           .size()\n          .unstack().fillna(0).astype('int64'))\nSalExp21_Wo\n\n\n\n#graph\n#World\nz = SalExp21_Wo\nz = z[sal_order]\nz = z.reindex(Exp21_order)\n\nz_data = z.apply(lambda x:np.round(x/x.sum()*100, 2), axis = 1).to_numpy() # convert to correlation matrix\nx = sal_order\ny = Exp21_order\n\nfig = ff.create_annotated_heatmap(z_data, x = x, y = y, colorscale = \"sunset\")\nfig.update_layout( title_text=\"<b>Experience and salary in World</b>\",\n                  height=700, width=700, title_font_size=20,\n                  title_x=0.5,\n                  margin=dict(l=100, r=100, t=200, b=100))\n\nfig.add_annotation(dict(font=dict(size=14),\n                                    x=0.85,\n                                    y=-0.1,\n                                    showarrow=False,\n                                    text=\"@green_yhjw\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\nfig.show()\n\n\n#East Asia\nz = SalExp21_Ea\nz = z[sal_order]\nz = z.reindex(Exp21_order)\nz_data = z.apply(lambda x:np.round(x/x.sum(), 2), axis = 1).to_numpy() # convert to correlation matrix\nx = sal_order\ny = Exp21_order\n\nfig = ff.create_annotated_heatmap(z_data, x = x, y = y, colorscale = \"sunset\")\nfig.update_layout(title_text=\"<b>Experience and salary in East Asia</b>\",\n                  height=700, width=700, title_font_size=20,\n                  title_x=0.5,\n                  margin=dict(l=100, r=100, t=200, b=100))\n\nfig.add_annotation(dict(font=dict(size=14),\n                                    x=0.85,\n                                    y=-0.1,\n                                    showarrow=False,\n                                    text=\"@green_yhjw\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\nfig.show()\n```\n\n<h2> World & East Asia Degree/Annual salary: Heat Map </h2>\n\n- \\\\$ ~20,000 : Regardless of degree, about 40% of the annual salary is \\$ 20,000 or less. <br>\n    Guess it's the ratio that comes from a student. <br>\n- \\$ 25,000-100,000 : Earned more than 40% with a bachelor's degree alone in East Asia  <br>\n    (World: less than 20%) <br>\n- \\$ 200,000~ : Even with a doctorate or higher, it is difficult to obtain it from East Asia.\n\n![](/images/kaggle_final/newplot21.png)\n![](/images/kaggle_final/newplot22.png)\n\n```python\n#data preprocessing\nSalary21= df21.loc[:, ['region', 'Q25', 'year']].rename(columns={'Q3':'Country', 'Q25':'Salary'})\nsalary21_Index=['< 999', '1,000-20,000', '20,000-59,999', '60,000-99,999','100,000-199,999', '200,000~']\n\nSalary21=(Salary21\n          .replace(['0-999','$0-999','0'], '< 999')\n          .replace({'>$1,000,000':'200,000~'})\n          .replace(['1,000-1,999','2,000-2,999','3,000-3,999', '4,000-4,999','5,000-7,499','7,500-9,999','10,000-14,999', '15,000-19,999'],'1,000-20,000')\n          .replace(['20,000-24,999''25,000-29,999','30,000-39,999', '40,000-49,999',  '50,000-59,999'],'20,000-59,999') \n           .replace(['60,000-69,999', '70,000-79,999', '80,000-89,999','90,000-99,999'], '60,000-99,999')\n          .replace(['100,000-124,999', '300,000-499,999', '125,000-149,999', '125,000-149,999', '150,000-199,999'],'100,000-199,999')\n          .replace(['200,000-249,999', '250,000-299,999','1,000,000','$500,000-999,999'], '200,000~')).fillna('0')\nsal_order=['< 999', '1,000-20,000', '20,000-59,999', '60,000-99,999','100,000-199,999', '200,000~']\n\nSalary21=(Salary21.groupby(['region', 'Salary'])\n           .size()\n           .reset_index()\n           .rename(columns = {0:\"Count\"}))\n\nSalary21_Ea = Salary21[Salary21['region'] == \"EastAsia\"].reset_index(drop = True)\nSalary21_Ea['%']=((Salary21_Ea['Count'] / Salary21_Ea['Count'].sum())*100).round(2)\nSalary21_Wo = Salary21[Salary21['region'] == \"World\"].reset_index(drop = True)\nSalary21_Wo['%']=((Salary21_Wo['Count'] / Salary21_Wo['Count'].sum())*100).round(2)\n\nDgr_Sal_21= df21.loc[:, ['region', 'Q25', 'Q4']].rename(columns={'Q4':'Dgree', 'Q25':'Salary'})\nDgr_Sal_21 = (Dgr_Sal_21.replace(['0-999','$0-999','0'], '< 999')\n          .replace({'>$1,000,000':'200,000~'})\n          .replace(['1,000-1,999','2,000-2,999','3,000-3,999', '4,000-4,999','5,000-7,499','7,500-9,999','10,000-14,999', '15,000-19,999'],'1,000-20,000')\n          .replace(['20,000-24,999''25,000-29,999','30,000-39,999', '40,000-49,999', '50,000-59,999'],'20,000-59,999') \n          .replace(['60,000-69,999', '70,000-79,999', '80,000-89,999', '90,000-99,999'], '60,000-99,999')\n          .replace(['100,000-124,999', '300,000-499,999', '125,000-149,999', '125,000-149,999','150,000-199,999'],'100,000-199,999')\n          .replace(['200,000-249,999', '250,000-299,999','1,000,000','$500,000-999,999'], '200,000~')\n          .replace({'I prefer not to answer':'etc'})\n          .replace(['No formal education past high school', 'Some college/university study without earning a bachelor’s degree'],'~college')\n          .replace(['Doctoral degree', 'Professional doctorate'],'Doctoral degree~'))\n\n\n#EastAsia 뽑기\nDgr_Sal_21_Ea= Dgr_Sal_21[Dgr_Sal_21['region'] == \"EastAsia\"].reset_index(drop = True)\nDgr_Sal_21_Ea = Dgr_Sal_21_Ea.groupby(['Dgree', 'Salary']).size().unstack().fillna(0).astype('int64')\n\ndgree_order=[ '~college','Bachelor’s degree', 'Master’s degree', 'Doctoral degree~', 'etc']\n\n\n#graph\n#World\nz = Dgr_Sal_21.groupby(['Dgree', 'Salary']).size().unstack().fillna(0).astype('int64')\nz = z[sal_order]\nz = z.reindex(dgree_order)\n\nz_data = z.apply(lambda x:np.round(x/x.sum()*100, 2), axis = 1).to_numpy() # convert to correlation matrix\nx = sal_order\ny = dgree_order\n\nfig = ff.create_annotated_heatmap(z_data, x = x, y = y, colorscale = \"sunset\")\nfig.update_layout( title_text=\"<b>    Degree-Salary in World</b>\",\n                  height=700, width=700, title_font_size=20,\n                  title_x=0.5,\n                  margin=dict(l=150, r=100, t=200, b=50))\nfig.update_traces(hovertemplate='<b>Degree</b>: %{y}<br>'+\n                                '<b>Salary</b>: %{x}<br>'+\n                                '<b>Percent</b>: %{z}%')\nfig.add_annotation(dict(font=dict(size=14),\n                                    x=0.8,\n                                    y=-0.1,\n                                    showarrow=False,\n                                    text=\"@green_yhjw\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\nfig.show()\n\n\n#East Asia\nz = Dgr_Sal_21_Ea\nz = z[sal_order]\nz = z.reindex(dgree_order)\nz_data = z.apply(lambda x:np.round(x/x.sum()*100, 2), axis = 1).to_numpy() # convert to correlation matrix\nx = sal_order\ny = dgree_order\n\nfig = ff.create_annotated_heatmap(z_data, x = x, y = y, colorscale = \"sunset\")\nfig.update_layout(title_text=\"<b>    Degree-Salary in East Asia</b>\",\n                  height=700, width=700, title_font_size=20,\n                  title_x=0.5,\n                  margin=dict(l=150, r=100, t=200, b=50))\nfig.update_traces(hovertemplate='<b>Degree</b>: %{y}<br>'+\n                                '<b>Salary</b>: %{x}<br>'+\n                                '<b>Percent</b>: %{z}%')\nfig.add_annotation(dict(font=dict(size=14),\n                                    x=0.8,\n                                    y=-0.1,\n                                    showarrow=False,\n                                    text=\"@green_yhjw\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\nfig.show()\n```\n\n# 3.1.8 Language transformation\n---\n\n<h2>World & East Asia Programming Language: Bar plot </h2>\n- Python: 80% of the world and 85% of East Asia use it.\n\n<h4>\n<p style=\"color:#FF0000\";>\nWe've been working on the project as python, so I hope we can continue to learn python and become experienced Data Scientists!\n    </p></h4>\n\n![](/images/kaggle_final/newplot23.png)\n![](/images/kaggle_final/newplot24.png)\n\n```python\n#data preprocessing\n#world\nprogramming_list = [\"Python\", \"R\", \"SQL\", \"Java\", \"C\", \"Bash\", \"Javascript\", \"C++\"]\nprogramming_df = pd.Series(programming_list)\n\ndf_2019 = df19[df19['Q19'].isin(programming_df)]\ndf_2020 = df20[df20['Q8'].isin(programming_df)]\ndf_2021 = df21[df21['Q8'].isin(programming_df)]\n\ndf19Lag = df_2019.loc[:, ['region', 'Q5', 'Q19', 'year']]\ndf19Lag = df19Lag.rename(columns = {'Q19': 'Language'}, inplace = False) # To match with other datasets\ndf20Lag = df_2020.loc[:, ['region', 'Q5', 'Q8', 'year']].rename(columns = {'Q8': 'Language'}, inplace = False)\ndf21Lag = df_2021.loc[:, ['region', 'Q5', 'Q8', 'year']].rename(columns = {'Q8': 'Language'}, inplace = False)\n\ndf3y_Lag = pd.concat([df19Lag, df20Lag, df21Lag])\ndf3y_Lag = df3y_Lag.groupby(['year', 'Language']).size().reset_index().rename(columns = {0:\"Count\"})\ndf3y_Lag\n\n# 2019\ndfLang_19 = df3y_Lag[df3y_Lag['year'] == \"2019\"].reset_index(drop = True)\ndfLang_19['percentage'] = dfLang_19[\"Count\"] / dfLang_19[\"Count\"].sum()\ndfLang_19['%'] = np.round(dfLang_19['percentage'] * 100, 1)\n\n# 2020\ndfLang_20 = df3y_Lag[df3y_Lag['year'] == \"2020\"].reset_index(drop = True)\ndfLang_20['percentage'] = dfLang_20[\"Count\"] / dfLang_20[\"Count\"].sum()\ndfLang_20['%'] = np.round(dfLang_20['percentage'] * 100, 1)\n\n# 2021\ndfLang_21 = df3y_Lag[df3y_Lag['year'] == \"2021\"].reset_index(drop = True)\ndfLang_21['percentage'] = dfLang_21[\"Count\"] / dfLang_21[\"Count\"].sum()\ndfLang_21['%'] = np.round(dfLang_21['percentage'] * 100, 1)\n\ndfLang_19=dfLang_19.sort_values(by='%', ascending=False)\ndfLang_20=dfLang_20.sort_values(by='%', ascending=False)\ndfLang_21=dfLang_21.sort_values(by='%', ascending=False)\n\n#graph\nfig = go.Figure()\n\nfig.add_trace(go.Bar(x = dfLang_19['Language'], \n                     y = dfLang_19['%'], \n                     name = \"2019\", \n                     text = dfLang_19['%'].astype(str) + \"%\", \n                     textposition='auto', marker_color='#CDD9A3'))\n\nfig.add_trace(go.Bar(x = dfLang_20['Language'], \n                     y = dfLang_20['%'], \n                     name = \"2020\", \n                     text = dfLang_20['%'].astype(str) + \"%\", \n                     textposition='auto', marker_color='#F28705'))\n\nfig.add_trace(go.Bar(x = dfLang_21['Language'], \n                     y = dfLang_21['%'], \n                     name = \"2021\", \n                     text = dfLang_21['%'].astype(str) + \"%\", \n                     textposition='auto', marker_color='#88BFBA'))\nfig.update_layout(title='<b>Language in World</b>',title_font_size=20,\n                  margin = dict(t=100, l=100, r=50, b=100),\n                  height=600, width=700,\n                  xaxis_title=None,\n                  yaxis_title=None)\nfig.update_traces(hovertemplate='<b>Percent</b>: %{y}%<br>'+\n                                '<b>Language</b>: %{x}<br>')\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\nfig.update_layout(legend=dict(\n    orientation=\"v\",\n    yanchor=\"bottom\",\n    y=0.8,\n    xanchor=\"right\",\n    x=1))\nfig.add_annotation(dict(font=dict(size=14),\n                                    x=0.8,\n                                    y=-0.2,\n                                    showarrow=False,\n                                    text=\"@green_yhjw\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\nfig.show()\n```\n\n\n```python\n#data prprocessing\n#Ea\n\ndf_2019 = df19_Ea[df19_Ea['Q19'].isin(programming_df)]\ndf_2020 = df20_Ea[df20_Ea['Q8'].isin(programming_df)]\ndf_2021 = df21_Ea[df21_Ea['Q8'].isin(programming_df)]\n\ndf19Lag = df_2019.loc[:, ['region', 'Q5', 'Q19', 'year']]\ndf19Lag = df19Lag.rename(columns = {'Q19': 'Language'}, inplace = False) # To match with other datasets\ndf20Lag = df_2020.loc[:, ['region', 'Q5', 'Q8', 'year']].rename(columns = {'Q8': 'Language'}, inplace = False)\ndf21Lag = df_2021.loc[:, ['region', 'Q5', 'Q8', 'year']].rename(columns = {'Q8': 'Language'}, inplace = False)\n\n\ndf3y_Lag = pd.concat([df19Lag, df20Lag, df21Lag])\ndf3y_Lag = df3y_Lag.groupby(['year', 'Language']).size().reset_index().rename(columns = {0:\"Count\"})\ndf3y_Lag\n\n\n# 2019\ndfLang_19 = df3y_Lag[df3y_Lag['year'] == \"2019\"].reset_index(drop = True)\ndfLang_19['percentage'] = dfLang_19[\"Count\"] / dfLang_19[\"Count\"].sum()\ndfLang_19['%'] = np.round(dfLang_19['percentage'] * 100, 1)\n\n# 2020\ndfLang_20 = df3y_Lag[df3y_Lag['year'] == \"2020\"].reset_index(drop = True)\ndfLang_20['percentage'] = dfLang_20[\"Count\"] / dfLang_20[\"Count\"].sum()\ndfLang_20['%'] = np.round(dfLang_20['percentage'] * 100, 1)\n\n# 2021\ndfLang_21 = df3y_Lag[df3y_Lag['year'] == \"2021\"].reset_index(drop = True)\ndfLang_21['percentage'] = dfLang_21[\"Count\"] / dfLang_21[\"Count\"].sum()\ndfLang_21['%'] = np.round(dfLang_21['percentage'] * 100, 1)\n\ndfLang_19=dfLang_19.sort_values(by='%', ascending=False)\ndfLang_20=dfLang_20.sort_values(by='%', ascending=False)\ndfLang_21=dfLang_21.sort_values(by='%', ascending=False)\n\n#graph\nfig = go.Figure()\n\nfig.add_trace(go.Bar(x = dfLang_19['Language'], \n                     y = dfLang_19['%'], \n                     name = \"2019\", \n                     text = dfLang_19['%'].astype(str) + \"%\", \n                     textposition='auto', marker_color='#CDD9A3'))\n\nfig.add_trace(go.Bar(x = dfLang_20['Language'], \n                     y = dfLang_20['%'], \n                     name = \"2020\", \n                     text = dfLang_20['%'].astype(str) + \"%\", \n                     textposition='auto', marker_color='#F28705'))\n\nfig.add_trace(go.Bar(x = dfLang_21['Language'], \n                     y = dfLang_21['%'], \n                     name = \"2021\", \n                     text = dfLang_21['%'].astype(str) + \"%\", \n                     textposition='auto', marker_color='#88BFBA'))\nfig.update_layout(title='<b>Language in EastAsia</b>',title_font_size=20,\n                  margin = dict(t=100, l=100, r=50, b=100),\n                  height=600, width=700,\n                  xaxis_title=None,\n                  yaxis_title=None)\nfig.update_traces(hovertemplate='<b>Percent</b>: %{text}')\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\nfig.add_annotation(dict(font=dict(size=14),\n                                    x=0.8,\n                                    y=-0.2,\n                                    showarrow=False,\n                                    text=\"@green_yhjw\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\nfig.show()\n```\n\n # 3.2 Position of Data Scientist in East Asia\n ---\n\n\n```python\n# data preprocessing\ndf21_Ea_DS = df21_Ea[df21_Ea['Q5'].isin(Data_Scientist)].fillna(0)\n\nsalary_order= ['<999', '1,000-19,999', '20,000-59,999', '60,000-99,999','100,000-199,999', '200,000~']\ndgree_order=[ '~college','Bachelor’s degree', 'Master’s degree', 'Doctoral degree~', 'etc']\n\ndf21_Ea_DS=(df21_Ea_DS\n  #salary      \n          .replace({'$0-999':'<999','>$1,000,000':'1,000,000~','$500,000-999,999':'500,000-999,999'})\n         \n          .replace(['1,000-1,999','2,000-2,999','3,000-3,999', '4,000-4,999','5,000-7,499','7,500-9,999','10,000-14,999', '15,000-19,999'],'1,000-19,999')\n          .replace(['20,000-24,999','25,000-29,999','30,000-39,999', '40,000-49,999', '50,000-59,999'],'20,000-59,999') \n          .replace(['60,000-69,999', '70,000-79,999', '80,000-89,999', '90,000-99,999'], '60,000-99,999')\n          .replace(['100,000-124,999','125,000-149,999','150,000-199,999'],'100,000-199,999')\n          .replace(['200,000-249,999', '250,000-299,999', '300,000-499,999','500,000-999,999', '1,000,000~'], '200,000~')\n  #degree          \n          .replace({'I prefer not to answer':'etc'})\n          .replace(['No formal education past high school','Some college/university study without earning a bachelor’s degree'],'~college')\n          .replace(['Doctoral degree', 'Professional doctorate'],'Doctoral degree~')\n          )\nsal_order= ['<999', '1,000-19,999', '20,000-59,999', '60,000-99,999','100,000-199,999', '200,000~']\ndgree_order=[ '~college','Bachelor’s degree', 'Master’s degree', 'Doctoral degree~', 'etc']\n\n\n```\n\n# 3.2.1 Salary\n---\n\n- Annual salary of Research Scientist.\n: The highest percentage of $2.6 million is 29.81%.\n\n- The annual salary of Machine Learning Engineer.\n: The highest rate of $999 is 31.89%.\n\n- The annual salary of Data Scientist is..\n: The ratio of $1,000 to $20,000 is the highest at 29.19%.\n\n\n<h2>⇒ The higher the annual salary, the lower the overall job rate.</h2>\n\n![](/images/kaggle_final/newplot25.png)\n\n```python\ndf21_Ea_DS_= df21_Ea_DS.loc[:,['Q5','Q25']].reset_index().rename(columns={'Q5':'Data_Scientist', 'Q25':'Salary'}).fillna('etc')\ndf21_Ea_DS_= (df21_Ea_DS_.groupby(['Data_Scientist', 'Salary']).size()\n                         .reset_index()\n                         .rename(columns = {0:\"Count\"}))\n\n#Data Scientist\ndf21_Ea_DS_Ds = df21_Ea_DS_[df21_Ea_DS_['Data_Scientist'] == \"Data Scientist\"].reset_index(drop = True)\ndf21_Ea_DS_Ds['%']=((df21_Ea_DS_Ds['Count'] / df21_Ea_DS_Ds['Count'].sum())*100).round(2)\n\n#Machine Learning Engineer\ndf21_Ea_DS_Mle = df21_Ea_DS_[df21_Ea_DS_['Data_Scientist'] == \"Machine Learning Engineer\"].reset_index(drop = True)\ndf21_Ea_DS_Mle['%']=((df21_Ea_DS_Mle['Count'] / df21_Ea_DS_Mle['Count'].sum())*100).round(2)\n\n#Research Scientist\ndf21_Ea_DS_Rs = df21_Ea_DS_[df21_Ea_DS_['Data_Scientist'] == \"Research Scientist\"].reset_index(drop = True)\ndf21_Ea_DS_Rs['%']=((df21_Ea_DS_Rs['Count'] / df21_Ea_DS_Rs['Count'].sum())*100).round(2)\ndf21_Ea_DS_Rs\n\n\ndf21_Ea_DS_salary = pd.concat([df21_Ea_DS_Ds, df21_Ea_DS_Mle, df21_Ea_DS_Rs], ignore_index = True)\ndf21_Ea_DS_salary= pd.pivot(df21_Ea_DS_salary, index = \"Salary\", columns = 'Data_Scientist', values = \"%\").reset_index().fillna('0')\ndf21_Ea_DS_salary= df21_Ea_DS_salary.set_index(\"Salary\").reindex(sal_order)\n\n#graph\nfig = go.Figure()\nfig.add_trace(go.Bar(x = df21_Ea_DS_salary.index, \n                     y = df21_Ea_DS_salary['Data Scientist'], \n                     name = \"Data Scientist\", \n                     text = df21_Ea_DS_salary['Data Scientist'].astype(str) + \"%\", \n                     textposition='auto', marker_color='#F2798F'))\n\nfig.add_trace(go.Bar(x = df21_Ea_DS_salary.index, \n                     y = df21_Ea_DS_salary['Machine Learning Engineer'], \n                     name = \"Machine Learning Engineer\", \n                     text = df21_Ea_DS_salary['Machine Learning Engineer'].astype(str) + \"%\", \n                     textposition='auto', marker_color='#CDD9A3'))\n\nfig.add_trace(go.Bar(x = df21_Ea_DS_salary.index, \n                     y = df21_Ea_DS_salary['Research Scientist'], \n                     name = \"Research Scientist\", \n                     text = df21_Ea_DS_salary['Research Scientist'].astype(str) + \"%\", \n                     textposition='auto', marker_color='#88BFBA'))\n\nfig.update_layout(barmode='stack',\n                 showlegend=True,\n                 height=600, width=700,\n                 title_text=\"<b>Data Scientist's Salary in East Asia</b>\",\n                 title_x=0.5,\n                 title_font_size=20, \n                  margin=dict(l=100, r=100, t=100, b=100))\nfig.update_traces(hovertemplate='<b>Percent</b>: %{y}%<br>'+\n                                '<b>Salary</b>: %{x}$<br>')\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\nfig.update_layout(legend=dict(\n    orientation=\"v\",\n    yanchor=\"bottom\",\n    y=0.8,\n    xanchor=\"right\",\n    x=1.2))\n\nfig.show()\n```\n\n# 3.2.2 Salary-Experience\n---\n\n<h2>The correlation between the career of a Data Scientist and the annual salary.</h2>\n\nIf you don't have experience, you have the highest rate of $999.\n\nLess than 1 year, 1-3 years have the highest percentage of $999.\n\nThe highest percentage of $20,000 to $60,000 in 3-10 years.\n\n10-20 years have the highest percentage of $60,000 to $100,000.\n\n![](/images/kaggle_final/newplot26.png)\n\n```python\ndf21Ea_DS_ExSal = df21_Ea_DS.loc[:,['Q6','Q25']].reset_index().rename(columns={'Q25':'Salary', 'Q6':'Exp'}).fillna('etc')\ndf21Ea_DS_ExSal= (df21Ea_DS_ExSal.groupby(['Exp', 'Salary']).size().unstack().fillna(0).astype('int64'))\n\nExp_order=['< 1 years','1-3 years','3-5 years', '5-10 years', '10-20 years', '20+ years', 'I have never written code']\n\ndf21Ea_DS_ExSal\n\nz = df21Ea_DS_ExSal\nz = z[sal_order]\nz = z.reindex(Exp_order)\n\nz_data = z.apply(lambda x:np.round(x/x.sum()*100, 2), axis = 1).to_numpy() # convert to correlation matrix\nx = sal_order\ny = Exp_order\n\nfig = ff.create_annotated_heatmap(z_data, x = x, y = y, colorscale = \"sunset\")\nfig.update_layout(title_text=\"<b>    Data Scientist's Experience & Salary </b>\",title_font_size=20,\n                  height=700, width=700,\n                  title_x=0.5,\n                  margin=dict(l=100, r=100, t=200, b=100))\nfig.update_traces(hovertemplate='<b>Salary</b>: %{y}<br>'+\n                                '<b>Experience</b>: %{x}<br>'+\n                                '<b>Percent</b>: %{z}%')\n\nfig.show()\n```\n\n# 3.2.3 Degree\n---\n\n<h2>Comparison of educational background of Data Scientists. <br></h2>\n <br>\n- It has the highest level of Master's Degrees. <br>\n <br>\n- Next, Doctoral Degree, <br>\n <br>\n- The figure was high in the order of Bachelor's Degree. <br>\n\n![](/images/kaggle_final/newplot27.png)\n\n```python\ndf21_Ea_degree = df21_Ea_DS['Q4'].value_counts().to_frame()\ndegree = df21_Ea_degree.index\nvalues = df21_Ea_degree['Q4'].tolist()\n\ncolors = ['#F2798F','#88BFBA', '#CDD9A3', '#F28705', '#D9946C']\nfig = go.Figure(data=[go.Bar(name='Degree', x=degree, y=values ,orientation='v', marker_color=colors, text=values, textposition='outside')])\nfig.update_layout(title_text=\"<b>Data Scientist's Degree (2021)</b>\", title_font_size=20,\n                  height=600, width=700,\n                  title_x=0.5,\n                  margin=dict(l=100, r=100, t=200, b=100))\nfig.update_traces(hovertemplate='<b>Count</b>: %{y}<br>'+\n                                '<b>Degree</b>: %{x}<br>')\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\nfig.add_annotation(dict(font=dict(size=14),\n                                    x=0.8,\n                                    y=-0.2,\n                                    showarrow=False,\n                                    text=\"@green_yhjw\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\nfig.show()\n```\n\n# 3.2.4 Salary-Degree\n---\n\n<h2>Relationship between Data Scientist's academic background and annual salary. <br></h2>\n <br>\n \n- If your educational background is below college, <br>\n: Less than 999 dollars. <br>\n<br>\n\n- The lowest annual salary accounts for the highest percentage.<br>\n <br>\n- Bachelor's degree, Master's Degree, Doctoral degree <br>\n:$2~60,000 dollars accounts for a large proportion <br>\n\n <br>\n<h2>⇒ The higher the education level, the higher the annual salary. <br></h2>\n\n![](/images/kaggle_final/newplot28.png)\n\n```python\ndf21Ea_DS_EduSal= df21_Ea_DS.loc[:, ['Q4', 'Q25']].rename(columns={'Q4':'Edu', 'Q25':'Salary'})\ndf21Ea_DS_EduSal['Edu'].unique()\nEdu_order=['~college', 'Bachelor’s degree','Master’s degree', 'Doctoral degree~', 'etc']\n\ndf21Ea_DS_EduSal= (df21Ea_DS_EduSal.groupby(['Edu', 'Salary']).size().unstack().fillna(0).astype('int64'))\ndf21Ea_DS_EduSal\n\nz = df21Ea_DS_EduSal\nz = z[sal_order]\nz = z.reindex(Edu_order)\n\nz_data = z.apply(lambda x:np.round(x/x.sum()*100, 2), axis = 1).to_numpy() # convert to correlation matrix\nx = sal_order\ny = Edu_order\n\nfig = ff.create_annotated_heatmap(z_data, x = x, y = y, colorscale = \"sunset\")\nfig.update_layout(title_text=\"<b>       Data Scientist's Degree & Salary </b>\", title_font_size=20,\n                  height=700, width=700,\n                  title_x=0.5,\n                  margin=dict(l=150, r=100, t=200, b=50))\nfig.update_traces(hovertemplate='<b>Degree</b>: %{y}<br>'+\n                                '<b>Salary</b>: %{x}<br>'+\n                                '<b>Percent</b>: %{z}%')\nfig.add_annotation(dict(font=dict(size=14),\n                                    x=0.8,\n                                    y=-0.1,\n                                    showarrow=False,\n                                    text=\"@green_yhjw\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\nfig.show()\n```\n\n# 3.2.5 Language\n---\n\n<h2>The language that Data Scientist uses a lot. <br></h2>\n <br>\n- Python accounts for the highest percentage of 80% or more. <br>\n <br>\n- Second, I use R the most. <br>\nR is used less frequently in the order of 2019, 20, and 21. <br>\n <br>\n- From 19 to 21, the percentage of use rate of use 10% -> 4%, a total of 6% decrease. <br>\n <br>\n- The third most frequently used language is SQL. <br>\nSQL increased 0.6 percent in 2020 from 2021. <br>\n <br>\n- The fourth most frequently used languages are C language and C++. <br>\n <br>\n<h2>⇒ To become a Data Scientist, Let's study Python first! <br></h2>\n\n![](/images/kaggle_final/newplot29.png)\n\n```python\n#data preprocessing\ndf20_Ea_DS = df20_Ea[df20_Ea['Q5'].isin(Data_Scientist)]\ndf19_Ea_DS =df19_Ea[df19_Ea['Q5'].isin(Data_Scientist)]\ndf19Ea_DSLag = df19_Ea_DS.loc[:, [ 'Q5', 'Q19', 'year']]\ndf19Ea_DSLag = df19Ea_DSLag.rename(columns = {'Q19': 'Language'}, inplace = False) # To match with other datasets\ndf20Ea_DSLag = df20_Ea_DS.loc[:, [ 'Q5', 'Q8', 'year']].rename(columns = {'Q8': 'Language'}, inplace = False)\ndf21Ea_DSLag = df21_Ea_DS.loc[:, [ 'Q5', 'Q8', 'year']].rename(columns = {'Q8': 'Language'}, inplace = False)\n\ndf3y_Ds_Lag = pd.concat([df19Ea_DSLag, df20Ea_DSLag, df21Ea_DSLag])\ndf3y_Ds_Lag = df3y_Ds_Lag.groupby(['year', 'Language']).size().reset_index().rename(columns = {0:\"Count\"})\ndf3y_Ds_Lag\n\n# 2019\ndfLang_Ds_19 = df3y_Ds_Lag[df3y_Ds_Lag['year'] == \"2019\"].reset_index(drop = True)\ndfLang_Ds_19['percentage'] = dfLang_Ds_19[\"Count\"] / dfLang_Ds_19[\"Count\"].sum()\ndfLang_Ds_19['%'] = np.round(dfLang_Ds_19['percentage'] * 100, 1)\n\n# 2020\ndfLang_Ds_20 = df3y_Ds_Lag[df3y_Ds_Lag['year'] == \"2020\"].reset_index(drop = True)\ndfLang_Ds_20['percentage'] = dfLang_Ds_20[\"Count\"] / dfLang_Ds_20[\"Count\"].sum()\ndfLang_Ds_20['%'] = np.round(dfLang_Ds_20['percentage'] * 100, 1)\n\n# 2021\ndfLang_Ds_21 = df3y_Ds_Lag[df3y_Ds_Lag['year'] == \"2021\"].reset_index(drop = True)\ndfLang_Ds_21['percentage'] = dfLang_Ds_21[\"Count\"] / dfLang_Ds_21[\"Count\"].sum()\ndfLang_Ds_21['%'] = np.round(dfLang_Ds_21['percentage'] * 100, 1)\n\ndfLang_Ds_19=dfLang_Ds_19.sort_values(by='%', ascending=False)\ndfLang_Ds_20=dfLang_Ds_20.sort_values(by='%', ascending=False)\ndfLang_Ds_21=dfLang_Ds_21.sort_values(by='%', ascending=False)\n\n#graph\nfig = go.Figure()\n\nfig.add_trace(go.Bar(x = dfLang_Ds_19['Language'], \n                     y = dfLang_Ds_19['%'], \n                     name = \"2019\", \n                     text = dfLang_Ds_19['%'].astype(str) + \"%\", \n                     textposition='auto', \n                     marker_color='#CDD9A3'))\n\nfig.add_trace(go.Bar(x = dfLang_Ds_20['Language'], \n                     y = dfLang_Ds_20['%'], \n                     name = \"2020\", \n                     text = dfLang_Ds_20['%'].astype(str) + \"%\", \n                     textposition='auto', \n                     marker_color='#F28705'))\n\nfig.add_trace(go.Bar(x = dfLang_Ds_21['Language'], \n                     y = dfLang_Ds_21['%'], \n                     name = \"2021\", \n                     text = dfLang_Ds_21['%'].astype(str) + \"%\", \n                     textposition='auto', \n                     marker_color='#88BFBA'))\n\nfig.update_layout(title='<b>        The language used by the data scientist</b>',title_font_size=22,\n                  margin = dict(t=120, l=100, r=10, b=150),\n                  height=600, width=700)\nfig.update_traces(hovertemplate='<b>Percent</b>: %{y}%<br>'+\n                                '<b>Language</b>: %{x}<br>')\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\nfig.update_layout(legend=dict(\n    orientation=\"h\",\n    yanchor=\"bottom\",\n    y=0.8,\n    xanchor=\"right\",\n    x=1))\nfig.add_annotation(dict(font=dict(size=14),\n                                    x=0.8,\n                                    y=-0.2,\n                                    showarrow=False,\n                                    text=\"@green_yhjw\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\nfig.show()\n```\n\n<h3> Parallel Categories Diagram <br></h3>\n: Visualization of multidimensional categorical datasets <br>\n <br>\nAbout 555 Data Scientist Jobs, Visualize it. <br>\nThe higher the height of the category, the more data is generated. <br>\nIt indicates that the frequency increases. <br>\n\n![](/images/kaggle_final/newplot30.png)\n\n```python\nds_pc=(df21_Ea_DS.loc[:, ['Q5','Q25','Q6','Q4','Q8']]\n                 .replace({'I have never written code': '< 1 years',  '1-3 years': '1-2 years'})\n                 .replace(['10-20 years', '20+ years'], '10+ years' )\n                 .replace([0,'<999'])\n                 )\nfig = px.parallel_categories(ds_pc, labels={'Q5':'Job', 'Q25':'Salary', 'Q6':'Experience', 'Q4':'Degree', 'Q8':'Language'})\n\nfig.update_layout(hovermode = 'x')\nfig.update_layout(title='<b>        Data Scientist</b>',title_font_size=20,\n                  margin = dict(t=120, l=100, r=10, b=150),\n                  height=600, width=700)\nfig.add_annotation(dict(font=dict(size=14),\n                                    x=0.8,\n                                    y=-0.2,\n                                    showarrow=False,\n                                    text=\"@green_yhjw\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\nfig.show()\n```\n\n# 4. Ref.\n---\n\n<h2> Ref. </h2>\n\n- 동아시아 지역 https://ko.wikipedia.org/wiki/%EB%8F%99%EC%95%84%EC%8B%9C%EC%95%84\n\n- 동아시아 인구 https://ko.wikipedia.org/wiki/%EC%95%84%EC%8B%9C%EC%95%84%EC%9D%98_%EC%9D%B8%EA%B5%AC\n\n- 세계 인구 https://ko.wikipedia.org/wiki/%EC%84%B8%EA%B3%84_%EC%9D%B8%EA%B5%AC <br> https://ko.wikipedia.org/wiki/%EC%9D%B8%EA%B0%84_%EA%B0%9C%EB%B0%9C_%EC%A7%80%EC%88%98#2020%EB%85%84\n\n- 동아시아 인간개발지수  https://namu.wiki/w/%EB%8F%99%EC%95%84%EC%8B%9C%EC%95%84\n\n-  Data Scientist란  https://dataprofessional.tistory.com/126 <br> https://terms.naver.com/entry.naver?docId=1691563&cid=42171&categoryId=42183\n\n- Kaggle이란 https://ko.wikipedia.org/wiki/%EC%BA%90%EA%B8%80\n- Python이란 https://ko.wikipedia.org/wiki/%ED%8C%8C%EC%9D%B4%EC%8D%AC\n\n- Kaggle competition Ref. https://www.kaggle.com/miguelfzzz/the-typical-kaggle-data-scientist-in-2021 <br> https://www.kaggle.com/desalegngeb/how-popular-is-kaggle-in-africa\n\n\n- flaricon: <div>Icons made by <a href=\"https://www.freepik.com\" title=\"Freepik\">Freepik</a> from <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">www.flaticon.com</a></div>\n\n\n\n\n# 5. close\n---\n\n안녕하세요 한국에 사는 YH입니다. <br>\npython을 배운지 한달이 채 안되서 명이 한 팀이 되어  이번 대회에 참가 하게 되었습니다. <br>\n많이 부족하지만 여기까지 읽어 주셔서 감사합니다. <br>\n아직은 너무너무 부족한 제출물 이지만, 앞으로 열심히 해서 케글 대회에서 1등하는 그 날까지 지켜봐 주세요 ^^! <br>\n 혹시 코멘트로 다 전하지 못하셨던 말이 있으시다면, 저의 [github blog](https://yoonhwa-p.github.io/)에 방문하여 도움을 주세요!  <br>\n별거 없지만 놀러오세요  ;-)\n\nHello, I'm YH and I live in Korea.<br>\nLess than a month after learning python, people became a team and participated in this competition.  <br>\nIt's not enough, but thank you for reading it up to here.  <br>\nIt's still not enough, but please watch until the day we win first place at the Kaggle competition ^^! <br>\n <br>\nIf there's anything you haven't said in the comments, please visit my [github blog](https://yoonhwa-p.github.io/) and help me! <br>\n It's nothing special, but come and play. ;-) <br>\n \n <br>\n <br>\n \n안녕하세요 저는 YH님과 같이 Kaggle 대회를 준비 한JW 입니다.  <br>\npython을 제대로 배우지도 못한채로 나오게 된 대회라 코드 부분에서 미숙한 점도 많고  <br>\n오류도 많습니다!   <br>\n하지만 대회를 출전하면서, python에 대해서 많은 공부도 되었고, 재미도 있어서 좋은 기회가 되었던것 같습니다.  <br>\n   <br>\n아래는 저의 깃허브 주소 입니다  <br>\n데이터 관련 분야에서 일하시는 분들은 저에게 팔로우를 걸어주세요!  <br>\n[github](https://github.com/wldnjd2)   <br>\n \n Hello, I'm JW who prepared for the Kaggle competition with YH.  <br>\nIt's a competition where I didn't learn python properly, so I'm not good at codes.  <br>\nThere are a lot of errors, too!  <br>\nHowever, as I participated in the competition, I studied a lot about Python and it was a good opportunity because it was fun.  <br>\n  <br>\nBelow is my Git Hub address.  <br>\nFor those who work in data-related fields, please follow me!  <br>\n[github](https://github.com/wldnjd2)   <br>\n \n <br>\n <br>\n <br>\n <br>","slug":"Newbies-as-a-Data-Scientist-in-EastAsia","published":1,"updated":"2022-01-03T12:20:08.047Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cky2hoher00155nrj0r0cay5o","content":"<p>드디어 캐글 대회 작품을 제출했다.<br>파이썬을 거의 하나도 배우지 않고 다른 캐글 노트북을 필사 하면서부터 시작해서<br>최종 완료까지 마쳤다.</p>\n<p>파이썬의 기초가 하나도 없어서 너무 힘들었다<br>그래도 다 해놓으니까 뿌듯하네<br>여기서 보완하고 싶은 점은 for문을 이용해서 코드를 더 간략히 짰으면 하는 아쉬움이 있다.</p>\n<p>이제부터는 파이썬의 기본 문법에 대해서 공부를 해야겠다는 생각이 들고<br>공부의 방향성이 좀 보인다<br>수고했다! 내자신!<br>그리고 같이 캐글 준비한 윤화님한테도 감사를..!<br><a href=\"https://www.kaggle.com/yoonhwayam/newbies-as-a-data-scientist-in-east-asia\">kaggle주소</a></p>\n<h2 id=\"Newbie-as-a-data-scientist-in-East-Asia\"><a href=\"#Newbie-as-a-data-scientist-in-East-Asia\" class=\"headerlink\" title=\"Newbie as a data scientist in East Asia!\"></a>Newbie as a data scientist in East Asia!</h2><p>Hello, Kaggers! Nice to meet you! </p>\n<p>We are a team in East Asia that wants to be <strong>data scientists</strong> </p>\n<p>As newbies, we want to know what and/or how Kaggler is!</p>\n<p>so, let’s have a time to learn about Kaggle as a senior with us from now.</p>\n<p>If you want to support us*(or feel qute)*, I ask for a comment! (PLZ) ^0^</p>\n<p>And !! Since we are <strong>not native English speakers</strong>, please ask questions if there is a context that you don’t understand because it’s not smooth.</p>\n<p>I’ll do my best to answer.</p>\n<h1 id=\"1-Introduction\"><a href=\"#1-Introduction\" class=\"headerlink\" title=\"1 Introduction\"></a>1 Introduction</h1><ol>\n<li>what is the Kaggle<br>a subsidiary of <strong>Google LLC</strong>, is an online <strong>community of data scientists and machine learning practitioners</strong>.</li>\n</ol>\n<p>If we use kaggle, we can take the following advantages.</p>\n<pre><code>1) to find and publish data sets\n2) to explore and build models in a web-based data-science environment\n3) to work with other data scientists and machine learning engineers\n4) to enter competitions to solve data science challenges\n</code></pre>\n<p>so, As data scientist beginners, we try to participate in the Kaggle competition.</p>\n<hr>\n<ol start=\"2\">\n<li><strong>21 Kaggle</strong> Machine Learning and Data Science Survey</li>\n</ol>\n<ul>\n<li>The most comprehensive dataset available for ML and data science status</li>\n</ul>\n<p>This is the theme of the competition we will participate in this time.</p>\n<p>To become a data scientist, we compared what kind of job Kagglers has, how much experience he has, and how much money he earns by dividing into the world and East Asia.</p>\n<p>In addition, there are detailed comparisons in East Asia, and ultimately, we will to find out what data the Kaggle competition data shows.</p>\n<p>The 2021 survey, like 2017, 2018, 2019, and 2020, launched an industry-wide survey that comprehensively presents the current status of data science and machine learning.</p>\n<p>The survey was conducted from 09/01/2021 to 10/04/2021, and after cleaning the data, Kaggle received 25,973 responses!</p>\n<p>This year, Kaggle will award $30,000 in prize money to winner in this competition.</p>\n<p>we want to receive $30,000 for winning the competition, but we just hope it will help us become a <em>data scientist</em> because it is difficult for a rookie.</p>\n<p>Ref.</p>\n<p>[1] <a href=\"https://www.kaggle.com/docs/competitions\">Kgg_competitions</a></p>\n<p>[2] <a href=\"https://en.wikipedia.org/wiki/Kaggle\">Kgg_definition</a></p>\n<p>[3] <a href=\"https://www.kaggle.com/c/kaggle-survey-2021\">kaggle-survey-2021</a></p>\n<h1 id=\"1-2-Contents\"><a href=\"#1-2-Contents\" class=\"headerlink\" title=\"1.2 Contents\"></a>1.2 Contents</h1><hr>\n<blockquote>\n<pre><code>Introduction\nContents\nSummary\nData Import and Preprocessing\nPlots and Description\nKaggle&#39;s transformation. (World/East_Asia)\n    1 user transformation\n    2 Gender transformation\n    3 Job transformation\n    4 Age  transformation\n    5 Degree transformation\n    6 Experience transformation\n    7 Salary transformation\n    8 Language transformatio\n</code></pre>\n<p>   Position of Data Scientist in East Asia<br>        1 Salary<br>        2 Salary-Experience<br>        3 Degree<br>        4 Salary-Degree<br>        5 Language<br>    Discussion<br>    Close</p>\n</blockquote>\n<h1 id=\"1-3-Summary\"><a href=\"#1-3-Summary\" class=\"headerlink\" title=\"1.3 Summary\"></a>1.3 Summary</h1><hr>\n<h3> used data </h3>\n\n<p>We used all the data for five years. (2017~2021)</p>\n<h3>  used Language and Library </h3>\n\n<ul>\n<li>Numpy</li>\n<li>Metplotlib</li>\n<li>seaborn</li>\n<li>Plotly<ul>\n<li>plotly.express : An interface where you can draw a graph easily and quickly.</li>\n<li>plotly.graph_objects : You can customize it in the way you want because you can do more detailed work than express.</li>\n<li>plotly.figure_factory : Used before express existed and remains in the module for compatibility with previous versions</li>\n<li>plotly.subplots : A module that displays multiple graphs in one figure.</li>\n<li>plotly.offline : Save locally and create HTML that opens in a web browser and make it standalone</li>\n</ul>\n</li>\n</ul>\n<h3> Grouping data sections </h3>\n\n<ul>\n<li>East Asia and World<ul>\n<li>East Asia : [‘China’,’Taiwan’, ‘South Korea’, ‘Japan’]</li>\n<li>World : all data</li>\n</ul>\n</li>\n<li>Gender<ul>\n<li>[Male, Female, Others]</li>\n</ul>\n</li>\n<li>Job   <br>    <strong>Data_Analyst</strong> =[‘Data Analyst’,’Data Miner,Information technology’,’Data Miner’, ‘Predictive Modeler’,’Information technology, networking, or system administration’,<br>‘A business discipline (accounting, economics, finance, etc.)’, ‘Business Analyst’, Humanities’, ‘Statistician’, ‘Mathematics or statistics’,<br>‘Medical or life sciences (biology, chemistry, medicine, etc.)’, Physics or astronomy’, ‘Social sciences (anthropology, psychology, sociology, etc.)’,<br>‘Environmental science or geology’, ‘Humanities (history, literature, philosophy, etc.)’] <br>    <strong>Data_Scientist</strong> =[‘Data Scientist’,  ‘Research Scientist’, ‘Researcher’,’Machine Learning Engineer’, ‘Scientist/Researcher’] <br>    <strong>Developer</strong>=[‘Developer Relations/Advocacy’,’Data Engineer’,’Engineer’,’Engineering (non-computer focused)’,<br>‘Programmer’,’Software Engineer’, ‘Computer Scientist’,’Computer science (software engineering, etc.)’,  ‘Fine arts or performing arts’,’Product Manager’, ‘Software Developer/Software Engineer’,<br>‘Product/Project Manager’,’Program/Project Manager’,’DBA/Database Engineer’]    <strong>Not_Employed</strong> = [‘Currently not employed’, ‘Not employed’, ‘Student’] <br>    <strong>Others</strong> = [‘I never declared a major’, ‘Other’] <br> <br></li>\n<li>Age<br>[18-21, 20s, 30s, 40s, 50s, 60s&lt;] <br></li>\n<li>Degree<br>[‘college’, ‘Bachelor’s degree’,’Master’s degree’, ‘Doctoral degree~’, ‘etc’] <br></li>\n<li>Experience<br>[&lt;1, 1-3, 3-5, 5-10, 10+] <br></li>\n<li>Salary<br>[&lt;999, 1,000-20,000, 20,000-59,999, 60,000-99,999, 100,000-199,999, 200,000~] <br></li>\n</ul>\n<h1 id=\"2-data-Import-and-pre-treatments\"><a href=\"#2-data-Import-and-pre-treatments\" class=\"headerlink\" title=\"2. data Import and pre-treatments\"></a>2. data Import and pre-treatments</h1><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">import</span> seaborn <span class=\"keyword\">as</span> sns</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pylab <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> plotly.io <span class=\"keyword\">as</span> pio</span><br><span class=\"line\"><span class=\"keyword\">import</span> plotly.express <span class=\"keyword\">as</span> px</span><br><span class=\"line\"><span class=\"keyword\">import</span> plotly.graph_objects <span class=\"keyword\">as</span> go</span><br><span class=\"line\"><span class=\"keyword\">import</span> plotly.figure_factory <span class=\"keyword\">as</span> ff</span><br><span class=\"line\"><span class=\"keyword\">from</span> plotly.subplots <span class=\"keyword\">import</span> make_subplots</span><br><span class=\"line\"><span class=\"keyword\">from</span> plotly.offline <span class=\"keyword\">import</span> init_notebook_mode, iplot</span><br><span class=\"line\">init_notebook_mode(connected=<span class=\"literal\">True</span>)</span><br><span class=\"line\">pio.templates.default = <span class=\"string\">&quot;none&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">for</span> dirname, _, filenames <span class=\"keyword\">in</span> os.walk(<span class=\"string\">&#x27;/kaggle/input&#x27;</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> filename <span class=\"keyword\">in</span> filenames:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(os.path.join(dirname, filename))</span><br><span class=\"line\"><span class=\"keyword\">import</span> warnings</span><br><span class=\"line\">warnings.filterwarnings(<span class=\"string\">&quot;ignore&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df17= pd.read_csv(<span class=\"string\">&quot;/kaggle/input/kaggle-survey-2017/multipleChoiceResponses.csv&quot;</span>, encoding=<span class=\"string\">&quot;ISO-8859-1&quot;</span>)</span><br><span class=\"line\">df18= pd.read_csv(<span class=\"string\">&quot;/kaggle/input/kaggle-survey-2018/multipleChoiceResponses.csv&quot;</span>, )</span><br><span class=\"line\">df19= pd.read_csv(<span class=\"string\">&quot;/kaggle/input/kaggle-survey-2019/multiple_choice_responses.csv&quot;</span>, )</span><br><span class=\"line\">df20= pd.read_csv(<span class=\"string\">&quot;/kaggle/input/kaggle-survey-2020/kaggle_survey_2020_responses.csv&quot;</span>, )</span><br><span class=\"line\">df21= pd.read_csv(<span class=\"string\">&quot;/kaggle/input/kaggle-survey-2021/kaggle_survey_2021_responses.csv&quot;</span>, )</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-plots-and-description\"><a href=\"#3-plots-and-description\" class=\"headerlink\" title=\"3. plots and description\"></a>3. plots and description</h1><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#질문 제거하기, replace</span></span><br><span class=\"line\">df17= df17.iloc[<span class=\"number\">1</span>:, :].replace(<span class=\"string\">&quot;People &#x27;s Republic of China&quot;</span>,<span class=\"string\">&#x27;China&#x27;</span>)</span><br><span class=\"line\">df18= df18.iloc[<span class=\"number\">1</span>:, :].replace(<span class=\"string\">&#x27;Republic of Korea&#x27;</span>,<span class=\"string\">&#x27;South Korea&#x27;</span>)</span><br><span class=\"line\">df19= df19.iloc[<span class=\"number\">1</span>:, :].replace(<span class=\"string\">&#x27;Republic of Korea&#x27;</span>,<span class=\"string\">&#x27;South Korea&#x27;</span>)</span><br><span class=\"line\">df20= df20.iloc[<span class=\"number\">1</span>:, :].replace(<span class=\"string\">&#x27;Republic of Korea&#x27;</span>,<span class=\"string\">&#x27;South Korea&#x27;</span>)</span><br><span class=\"line\">df21= df21.iloc[<span class=\"number\">1</span>:, :]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## East Asia에는 대한민국, 일본, 중국, 타이완, 몽골, 북조선 총 6개의 국가가 속해 있다. </span></span><br><span class=\"line\"><span class=\"comment\">## 이유는 알 수 없지만, 18년도엔 타이완이 없다. </span></span><br><span class=\"line\">EastAsia17 = [<span class=\"string\">&#x27;China&#x27;</span>,<span class=\"string\">&quot;People &#x27;s Republic of China&quot;</span>, <span class=\"string\">&#x27;Taiwan&#x27;</span>, <span class=\"string\">&#x27;South Korea&#x27;</span>, <span class=\"string\">&#x27;Japan&#x27;</span>]</span><br><span class=\"line\">EastAsia18= [<span class=\"string\">&#x27;China&#x27;</span>, <span class=\"string\">&#x27;South Korea&#x27;</span>, <span class=\"string\">&#x27;Japan&#x27;</span>, <span class=\"string\">&#x27;Republic of Korea&#x27;</span>] </span><br><span class=\"line\">EastAsia19 = [<span class=\"string\">&#x27;China&#x27;</span>,<span class=\"string\">&#x27;Taiwan&#x27;</span>, <span class=\"string\">&#x27;South Korea&#x27;</span>, <span class=\"string\">&#x27;Japan&#x27;</span>, <span class=\"string\">&#x27;Republic of Korea&#x27;</span>]</span><br><span class=\"line\">EastAsia20 = [<span class=\"string\">&#x27;China&#x27;</span>,<span class=\"string\">&#x27;Taiwan&#x27;</span>, <span class=\"string\">&#x27;South Korea&#x27;</span>,<span class=\"string\">&#x27;Republic of Korea&#x27;</span>, <span class=\"string\">&#x27;Japan&#x27;</span>]</span><br><span class=\"line\">EastAsia21 = [<span class=\"string\">&#x27;China&#x27;</span>,<span class=\"string\">&#x27;Taiwan&#x27;</span>, <span class=\"string\">&#x27;South Korea&#x27;</span>, <span class=\"string\">&#x27;Japan&#x27;</span>]</span><br><span class=\"line\">EastAsia = [<span class=\"string\">&#x27;Republic of Korea&#x27;</span>,<span class=\"string\">&#x27;China&#x27;</span>,<span class=\"string\">&#x27;Taiwan&#x27;</span>, <span class=\"string\">&#x27;South Korea&#x27;</span>, <span class=\"string\">&#x27;Japan&#x27;</span>, <span class=\"string\">&quot;People &#x27;s Republic of China&quot;</span> ]</span><br><span class=\"line\"></span><br><span class=\"line\">df21_Ea = df21[df21[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(EastAsia)]</span><br><span class=\"line\">df21_Wo = df21[~df21[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(EastAsia)]</span><br><span class=\"line\">df21[<span class=\"string\">&#x27;region&#x27;</span>]=[<span class=\"string\">&quot;EastAsia&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> EastAsia <span class=\"keyword\">else</span> <span class=\"string\">&quot;World&quot;</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> df21[<span class=\"string\">&#x27;Q3&#x27;</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\">df20_Ea = df20[df20[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(EastAsia)]</span><br><span class=\"line\">df20_Wo = df20[~df20[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(EastAsia)]</span><br><span class=\"line\">df20[<span class=\"string\">&#x27;region&#x27;</span>]=[<span class=\"string\">&quot;EastAsia&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> EastAsia <span class=\"keyword\">else</span> <span class=\"string\">&quot;World&quot;</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> df20[<span class=\"string\">&#x27;Q3&#x27;</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\">df19_Ea = df19[df19[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(EastAsia)]</span><br><span class=\"line\">df19_Wo = df19[~df19[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(EastAsia)]</span><br><span class=\"line\">df19[<span class=\"string\">&#x27;region&#x27;</span>]=[<span class=\"string\">&quot;EastAsia&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> EastAsia <span class=\"keyword\">else</span> <span class=\"string\">&quot;World&quot;</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> df19[<span class=\"string\">&#x27;Q3&#x27;</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\">df18_Ea = df18[df18[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(EastAsia)]</span><br><span class=\"line\">df18_Wo = df18[~df18[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(EastAsia)]</span><br><span class=\"line\">df18[<span class=\"string\">&#x27;region&#x27;</span>]=[<span class=\"string\">&quot;EastAsia&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> EastAsia <span class=\"keyword\">else</span> <span class=\"string\">&quot;World&quot;</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> df18[<span class=\"string\">&#x27;Q3&#x27;</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\">df17_Ea = df17[df17[<span class=\"string\">&#x27;Country&#x27;</span>].isin(EastAsia)]</span><br><span class=\"line\">df17_Wo = df17[~df17[<span class=\"string\">&#x27;Country&#x27;</span>].isin(EastAsia)]</span><br><span class=\"line\">df17[<span class=\"string\">&#x27;region&#x27;</span>]=[<span class=\"string\">&quot;EastAsia&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> EastAsia <span class=\"keyword\">else</span> <span class=\"string\">&quot;World&quot;</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> df17[<span class=\"string\">&#x27;Country&#x27;</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\">df21[<span class=\"string\">&#x27;year&#x27;</span>] = <span class=\"string\">&#x27;2021&#x27;</span></span><br><span class=\"line\">df20[<span class=\"string\">&#x27;year&#x27;</span>] = <span class=\"string\">&#x27;2020&#x27;</span></span><br><span class=\"line\">df19[<span class=\"string\">&#x27;year&#x27;</span>] = <span class=\"string\">&#x27;2019&#x27;</span></span><br><span class=\"line\">df18[<span class=\"string\">&#x27;year&#x27;</span>] = <span class=\"string\">&#x27;2018&#x27;</span></span><br><span class=\"line\">df17[<span class=\"string\">&#x27;year&#x27;</span>] = <span class=\"string\">&#x27;2017&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">years = [<span class=\"string\">&#x27;2017&#x27;</span>, <span class=\"string\">&#x27;2018&#x27;</span>, <span class=\"string\">&#x27;2019&#x27;</span>, <span class=\"string\">&#x27;2020&#x27;</span>, <span class=\"string\">&#x27;2021&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">df21_Ea = df21[df21[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(EastAsia21)]</span><br><span class=\"line\">Ea21= (</span><br><span class=\"line\">    df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>].value_counts().to_frame()</span><br><span class=\"line\">    .reset_index().rename(columns=&#123;<span class=\"string\">&#x27;index&#x27;</span>:<span class=\"string\">&#x27;Country&#x27;</span>, <span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;21&#x27;</span>&#125;))</span><br><span class=\"line\"></span><br><span class=\"line\">df20_Ea=df20[df20[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(EastAsia)]</span><br><span class=\"line\">Ea20= (</span><br><span class=\"line\">    df20_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>].replace(<span class=\"string\">&#x27;Republic of Korea&#x27;</span>,<span class=\"string\">&#x27;South Korea&#x27;</span>)</span><br><span class=\"line\">    .value_counts().to_frame().reset_index()</span><br><span class=\"line\">    .rename(columns=&#123;<span class=\"string\">&#x27;index&#x27;</span>:<span class=\"string\">&#x27;Country&#x27;</span>, <span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;20&#x27;</span>&#125;))</span><br><span class=\"line\"></span><br><span class=\"line\">df19_Ea=df19[df19[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(EastAsia)]</span><br><span class=\"line\">Ea19= (df19_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>].replace(<span class=\"string\">&#x27;Republic of Korea&#x27;</span>,<span class=\"string\">&#x27;South Korea&#x27;</span>)</span><br><span class=\"line\">       .value_counts().to_frame().reset_index()</span><br><span class=\"line\">       .rename(columns=&#123;<span class=\"string\">&#x27;index&#x27;</span>:<span class=\"string\">&#x27;Country&#x27;</span>, <span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;19&#x27;</span>&#125;))</span><br><span class=\"line\"></span><br><span class=\"line\">df18_Ea=df18[df18[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(EastAsia)]</span><br><span class=\"line\">Ea18= (df18_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>].replace(<span class=\"string\">&#x27;Republic of Korea&#x27;</span>,<span class=\"string\">&#x27;South Korea&#x27;</span>)</span><br><span class=\"line\">       .value_counts().to_frame().reset_index()</span><br><span class=\"line\">       .rename(columns=&#123;<span class=\"string\">&#x27;index&#x27;</span>:<span class=\"string\">&#x27;Country&#x27;</span>, <span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;18&#x27;</span>&#125;))</span><br><span class=\"line\">Ea18.value_counts()</span><br><span class=\"line\"><span class=\"comment\">#df18 열에 taiwan = 0을 추가 해야 합니다. </span></span><br><span class=\"line\"></span><br><span class=\"line\">df17_Ea = df17[df17[<span class=\"string\">&#x27;Country&#x27;</span>].isin(EastAsia)]</span><br><span class=\"line\">Ea17= (df17_Ea[<span class=\"string\">&#x27;Country&#x27;</span>].replace(<span class=\"string\">&quot;People &#x27;s Republic of China&quot;</span>,<span class=\"string\">&#x27;China&#x27;</span>)</span><br><span class=\"line\">       .value_counts().to_frame().reset_index()</span><br><span class=\"line\">       .rename(columns=&#123;<span class=\"string\">&#x27;index&#x27;</span>:<span class=\"string\">&#x27;Country&#x27;</span>, <span class=\"string\">&#x27;Country&#x27;</span>:<span class=\"string\">&#x27;17&#x27;</span>&#125;))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#data를 합쳐서 하나의 dataframe으로 만들어 줌.</span></span><br><span class=\"line\">df5years = pd.merge(Ea17, Ea18, on=<span class=\"string\">&#x27;Country&#x27;</span>, how=<span class=\"string\">&#x27;outer&#x27;</span>)</span><br><span class=\"line\">df5year =pd.merge(Ea19,Ea20, on=<span class=\"string\">&#x27;Country&#x27;</span>, how=<span class=\"string\">&#x27;outer&#x27;</span>)</span><br><span class=\"line\">df5year=pd.merge(df5year, Ea21, on=<span class=\"string\">&#x27;Country&#x27;</span>, how=<span class=\"string\">&#x27;outer&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">df5years = pd.merge(df5years, df5year, on=<span class=\"string\">&#x27;Country&#x27;</span>, how=<span class=\"string\">&#x27;outer&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">Ea21 = <span class=\"built_in\">len</span>(df21_Ea)</span><br><span class=\"line\">Wo21 = <span class=\"built_in\">len</span>(df21) - <span class=\"built_in\">len</span>(df21_Ea)</span><br><span class=\"line\"></span><br><span class=\"line\">Ea20 = <span class=\"built_in\">len</span>(df20_Ea)</span><br><span class=\"line\">Wo20 = <span class=\"built_in\">len</span>(df20) - <span class=\"built_in\">len</span>(df20_Ea)</span><br><span class=\"line\"></span><br><span class=\"line\">Ea19 = <span class=\"built_in\">len</span>(df19_Ea)</span><br><span class=\"line\">Wo19 = <span class=\"built_in\">len</span>(df19) - <span class=\"built_in\">len</span>(df19_Ea)</span><br><span class=\"line\"></span><br><span class=\"line\">Ea18 = <span class=\"built_in\">len</span>(df18_Ea)</span><br><span class=\"line\">Wo18 = <span class=\"built_in\">len</span>(df18) -  <span class=\"built_in\">len</span>(df18_Ea)</span><br><span class=\"line\"></span><br><span class=\"line\">Ea17 = <span class=\"built_in\">len</span>(df17_Ea)</span><br><span class=\"line\">Wo17 = <span class=\"built_in\">len</span>(df17) - <span class=\"built_in\">len</span>(df17_Ea)</span><br><span class=\"line\"></span><br><span class=\"line\">years = [<span class=\"string\">&#x27;2017&#x27;</span>,<span class=\"string\">&#x27;2018&#x27;</span>,<span class=\"string\">&#x27;2019&#x27;</span>,<span class=\"string\">&#x27;2020&#x27;</span>, <span class=\"string\">&#x27;2021&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">percent</span> (<span class=\"params\">a, b</span>):</span></span><br><span class=\"line\">    result =a/(a+b)*<span class=\"number\">100</span></span><br><span class=\"line\">    result = np.<span class=\"built_in\">round</span>(result, <span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">percentR</span> (<span class=\"params\">b, a</span>):</span></span><br><span class=\"line\">    result =a/(a+b)*<span class=\"number\">100</span></span><br><span class=\"line\">    result = np.<span class=\"built_in\">round</span>(result, <span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\"></span><br><span class=\"line\">percent = [percent(Ea17, Wo17), percent(Ea18, Wo18), percent(Ea19, Wo19), </span><br><span class=\"line\">                                                 percent(Ea20, Wo20), percent(Ea21, Wo21)]</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-1-Kaggle’s-transformation-World-East-Asia\"><a href=\"#3-1-Kaggle’s-transformation-World-East-Asia\" class=\"headerlink\" title=\"3.1 Kaggle’s transformation (World/East Asia)\"></a>3.1 Kaggle’s transformation (World/East Asia)</h1><hr>\n<h1 id=\"3-1-1-user-transformation\"><a href=\"#3-1-1-user-transformation\" class=\"headerlink\" title=\"3.1.1 user transformation\"></a>3.1.1 user transformation</h1><h2> Number of respondents </h2>\n    \n<p>(bar, scatter plot : number of respondents to World and East Asia,<br>Map plot : number of respondents to East Asia)</p>\n<p><strong>World and East Asia: The same trend.</strong></p>\n<p>East Asia: 15% of the total continent and 20.3% of the population (16/78.7: Ea/Wo)</p>\n<p>2018 Issue: Significant increase in respondents-&gt;Hypothesis: Due to the rapid increase in China.</p>\n<p>2018 Outliers Considering: 2022 Kaggle survey Respondents: Increased in both World and East Asia</p>\n<p>I wish our team the honor of becoming a respondent to the Kaggle survey in 2022….</p>\n<p><img src=\"/images/kaggle_final/newplot.png\"></p>\n<p><img src=\"/images/kaggle_final/newplot1.png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fig = go.Figure()</span><br><span class=\"line\">y=[<span class=\"built_in\">len</span>(df17_Ea),<span class=\"built_in\">len</span>(df18_Ea), <span class=\"built_in\">len</span>(df19_Ea),<span class=\"built_in\">len</span>(df20_Ea),<span class=\"built_in\">len</span>(df21_Ea)]</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_trace(go.Bar(x=years, y=y,</span><br><span class=\"line\">                base=<span class=\"number\">0</span>,</span><br><span class=\"line\">                marker_color=<span class=\"string\">&#x27;#F2D64B&#x27;</span>,</span><br><span class=\"line\">                yaxis = <span class=\"string\">&quot;y1&quot;</span>,</span><br><span class=\"line\">                name=<span class=\"string\">&#x27;East Asia&#x27;</span>,</span><br><span class=\"line\">                text= percent,</span><br><span class=\"line\">                texttemplate=<span class=\"string\">&#x27;%&#123;text&#125;  %&#x27;</span>, </span><br><span class=\"line\">                textposition=<span class=\"string\">&#x27;outside&#x27;</span>,</span><br><span class=\"line\">                hovertemplate=<span class=\"string\">&#x27;&lt;b&gt;KaggleUser&lt;/b&gt;: %&#123;x&#125;&lt;br&gt;&#x27;</span>+ <span class=\"string\">&#x27;&lt;b&gt;Count&lt;/b&gt;: %&#123;y&#125;&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_trace(go.Scatter(name = <span class=\"string\">&quot;World&quot;</span>,</span><br><span class=\"line\">           x=years, </span><br><span class=\"line\">           y=[<span class=\"built_in\">len</span>(df17), <span class=\"built_in\">len</span>(df18), <span class=\"built_in\">len</span>(df19), <span class=\"built_in\">len</span>(df20), <span class=\"built_in\">len</span>(df21)],</span><br><span class=\"line\">           marker_color=<span class=\"string\">&#x27;#979DA6&#x27;</span>,</span><br><span class=\"line\">           mode = <span class=\"string\">&#x27;lines+markers&#x27;</span>, <span class=\"comment\"># please check option here</span></span><br><span class=\"line\">           yaxis = <span class=\"string\">&quot;y2&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_traces(hovertemplate=<span class=\"string\">&#x27;&lt;b&gt;Count&lt;/b&gt;: %&#123;y&#125;&lt;br&gt;&lt;extra&gt;&lt;/extra&gt;&#x27;</span>+</span><br><span class=\"line\">                                <span class=\"string\">&#x27;&lt;b&gt;Year&lt;/b&gt;: %&#123;x&#125;&lt;br&gt;&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(yaxis  = <span class=\"built_in\">dict</span>(title = <span class=\"string\">&quot;Kaggle User in East Asia&quot;</span>,showgrid = <span class=\"literal\">False</span>, <span class=\"built_in\">range</span>=[<span class=\"number\">0</span>, <span class=\"built_in\">len</span>(df21_Ea)*<span class=\"number\">1.2</span>]),</span><br><span class=\"line\">                  yaxis2 = <span class=\"built_in\">dict</span>(title = <span class=\"string\">&quot;Kaggle User in World&quot;</span>, overlaying = <span class=\"string\">&quot;y1&quot;</span>, side = <span class=\"string\">&quot;right&quot;</span>, </span><br><span class=\"line\">                  showgrid = <span class=\"literal\">False</span>, </span><br><span class=\"line\">                  zeroline = <span class=\"literal\">False</span>, <span class=\"built_in\">range</span>=[<span class=\"number\">0</span>, <span class=\"built_in\">len</span>(df21)*<span class=\"number\">1.2</span>]))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(title=<span class=\"string\">&#x27;&lt;b&gt;Kaggle Users&lt;/b&gt;&#x27;</span>,title_font_size=<span class=\"number\">20</span>,</span><br><span class=\"line\">                  margin = <span class=\"built_in\">dict</span>(t=<span class=\"number\">200</span>, l=<span class=\"number\">100</span>, r=<span class=\"number\">50</span>, b=<span class=\"number\">200</span>),</span><br><span class=\"line\">                  height=<span class=\"number\">700</span>, width=<span class=\"number\">700</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(legend=<span class=\"built_in\">dict</span>(</span><br><span class=\"line\">    orientation=<span class=\"string\">&quot;h&quot;</span>,</span><br><span class=\"line\">    yanchor=<span class=\"string\">&quot;bottom&quot;</span>,</span><br><span class=\"line\">    y=<span class=\"number\">1.1</span>,</span><br><span class=\"line\">    xanchor=<span class=\"string\">&quot;right&quot;</span>,</span><br><span class=\"line\">    x=<span class=\"number\">1</span>))</span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">14</span>),</span><br><span class=\"line\">                                    x=<span class=\"number\">0.9</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.25</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;@green_yhjw&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\">fig.show()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">world_map</span>(<span class=\"params\">locations,counts,title</span>):</span></span><br><span class=\"line\">    data = [ <span class=\"built_in\">dict</span>(</span><br><span class=\"line\">            <span class=\"built_in\">type</span> = <span class=\"string\">&#x27;choropleth&#x27;</span>,</span><br><span class=\"line\">            locations = locations,</span><br><span class=\"line\">            z = counts,</span><br><span class=\"line\">            colorscale = <span class=\"string\">&#x27;Reds&#x27;</span>,</span><br><span class=\"line\">            locationmode = <span class=\"string\">&#x27;country names&#x27;</span>,</span><br><span class=\"line\">            autocolorscale = <span class=\"literal\">False</span>,</span><br><span class=\"line\">            reversescale = <span class=\"literal\">False</span>,</span><br><span class=\"line\">            marker = <span class=\"built_in\">dict</span>(</span><br><span class=\"line\">                line = <span class=\"built_in\">dict</span>(color = <span class=\"string\">&#x27;#F7F7F7&#x27;</span>, width = <span class=\"number\">1.5</span>)),</span><br><span class=\"line\">                colorbar = <span class=\"built_in\">dict</span>(autotick = <span class=\"literal\">True</span>, legth = <span class=\"number\">3</span>, <span class=\"built_in\">len</span>=<span class=\"number\">0.75</span>, title = <span class=\"string\">&#x27;respodents&#x27;</span>,</span><br><span class=\"line\">                               <span class=\"built_in\">max</span> = <span class=\"number\">1000</span>, <span class=\"built_in\">min</span> = <span class=\"number\">0</span>))]</span><br><span class=\"line\">    layout = <span class=\"built_in\">dict</span>(</span><br><span class=\"line\">        title=title,</span><br><span class=\"line\">        titlefont=&#123;<span class=\"string\">&#x27;size&#x27;</span>: <span class=\"number\">28</span>&#125;,</span><br><span class=\"line\">        width=<span class=\"number\">700</span>, </span><br><span class=\"line\">        height=<span class=\"number\">600</span>,</span><br><span class=\"line\">        paper_bgcolor=<span class=\"string\">&#x27;#FFFFFF&#x27;</span>, </span><br><span class=\"line\">        margin=<span class=\"built_in\">dict</span>(l=<span class=\"number\">50</span>, r=<span class=\"number\">50</span>, t=<span class=\"number\">100</span>, b=<span class=\"number\">100</span>),</span><br><span class=\"line\">        geo = <span class=\"built_in\">dict</span>(</span><br><span class=\"line\">            showframe = <span class=\"literal\">True</span>,</span><br><span class=\"line\">            showcoastlines = <span class=\"literal\">True</span>,</span><br><span class=\"line\">            fitbounds=<span class=\"string\">&quot;locations&quot;</span>))</span><br><span class=\"line\">   </span><br><span class=\"line\">    fig = <span class=\"built_in\">dict</span>(data=data, layout=layout)</span><br><span class=\"line\">    iplot(fig, validate=<span class=\"literal\">False</span>, filename=<span class=\"string\">&#x27;world-map&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">z = df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>].value_counts()</span><br><span class=\"line\"> </span><br><span class=\"line\">world_map(locations=z.index, counts=z.values, title= <span class=\"string\">&#x27;&lt;b&gt;EastAsia Countries&lt;b&gt;&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h2>18’ : </h2>\n\n<p>User change between United States and India.</p>\n<p>China’s markedly increase in 2018</p>\n<ul>\n<li>There is no Taiwan, but only China has increased. : East Asian political situation Issue can be suspected.</li>\n</ul>\n<p><img src=\"/images/kaggle_final/newplot2.png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A18 = (</span><br><span class=\"line\">    df18[<span class=\"string\">&#x27;Q3&#x27;</span>]</span><br><span class=\"line\">    .replace(&#123;<span class=\"string\">&#x27;Republic of Korea&#x27;</span>:<span class=\"string\">&#x27;South Korea&#x27;</span>,</span><br><span class=\"line\">             <span class=\"string\">&#x27;I do not wish to disclose my location&#x27;</span> : <span class=\"string\">&#x27;Other&#x27;</span>&#125;)</span><br><span class=\"line\">    .value_counts()</span><br><span class=\"line\">    .to_frame()</span><br><span class=\"line\">    .reset_index()</span><br><span class=\"line\">    .rename(columns=&#123;<span class=\"string\">&#x27;index&#x27;</span>:<span class=\"string\">&#x27;type&#x27;</span>, <span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;2018&#x27;</span>&#125;)</span><br><span class=\"line\">    .groupby(<span class=\"string\">&#x27;type&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"built_in\">sum</span>()</span><br><span class=\"line\">    .reset_index()</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">A19 = (</span><br><span class=\"line\">    df19[<span class=\"string\">&#x27;Q3&#x27;</span>]</span><br><span class=\"line\">    .replace(<span class=\"string\">&#x27;Republic of Korea&#x27;</span>,<span class=\"string\">&#x27;South Korea&#x27;</span>)</span><br><span class=\"line\">    .value_counts()</span><br><span class=\"line\">    .to_frame()</span><br><span class=\"line\">    .reset_index()</span><br><span class=\"line\">    .rename(columns=&#123;<span class=\"string\">&#x27;index&#x27;</span>:<span class=\"string\">&#x27;type&#x27;</span>, <span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;2019&#x27;</span>&#125;)</span><br><span class=\"line\">    .groupby(<span class=\"string\">&#x27;type&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"built_in\">sum</span>()</span><br><span class=\"line\">    .reset_index()</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">A17 = (</span><br><span class=\"line\">    df17[<span class=\"string\">&#x27;Country&#x27;</span>]</span><br><span class=\"line\">    .replace(&#123;<span class=\"string\">&#x27;United States&#x27;</span>: <span class=\"string\">&#x27;United States of America&#x27;</span>,</span><br><span class=\"line\">              <span class=\"string\">&#x27;Hong Kong&#x27;</span>: <span class=\"string\">&#x27;Hong Kong (S.A.R.)&#x27;</span>, </span><br><span class=\"line\">              <span class=\"string\">&#x27;United Kingdom&#x27;</span>:<span class=\"string\">&#x27;United Kingdom of Great Britain and Northern Ireland&#x27;</span>,</span><br><span class=\"line\">             &#125;)</span><br><span class=\"line\">    .replace(<span class=\"string\">&quot;People &#x27;s Republic of China&quot;</span>,<span class=\"string\">&#x27;China&#x27;</span>)</span><br><span class=\"line\">    .value_counts()</span><br><span class=\"line\">    .to_frame()</span><br><span class=\"line\">    .reset_index()</span><br><span class=\"line\">    .rename(columns=&#123;<span class=\"string\">&#x27;index&#x27;</span>:<span class=\"string\">&#x27;type&#x27;</span>, <span class=\"string\">&#x27;Country&#x27;</span>:<span class=\"string\">&#x27;2017&#x27;</span>&#125;)</span><br><span class=\"line\">    .groupby(<span class=\"string\">&#x27;type&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"built_in\">sum</span>()</span><br><span class=\"line\">    .reset_index()</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">A18A19=pd.merge(A18,A19, how=<span class=\"string\">&#x27;outer&#x27;</span>,on=<span class=\"string\">&#x27;type&#x27;</span>).fillna(<span class=\"number\">0</span>)</span><br><span class=\"line\">A18A17=pd.merge(A18,A17, how=<span class=\"string\">&#x27;outer&#x27;</span>,on=<span class=\"string\">&#x27;type&#x27;</span>).fillna(<span class=\"number\">0</span>)</span><br><span class=\"line\">A18A19[<span class=\"string\">&#x27;minus&#x27;</span>]= A18A19[<span class=\"string\">&#x27;2018&#x27;</span>]-A18A19[<span class=\"string\">&#x27;2019&#x27;</span>]</span><br><span class=\"line\">A18A17[<span class=\"string\">&#x27;minus&#x27;</span>]= A18A17[<span class=\"string\">&#x27;2018&#x27;</span>]-A18A17[<span class=\"string\">&#x27;2017&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">A18A17=A18A17.sort_values(by=<span class=\"string\">&quot;minus&quot;</span>, ascending=<span class=\"literal\">False</span>)</span><br><span class=\"line\">A18A19=A18A19.sort_values(by=<span class=\"string\">&quot;minus&quot;</span>, ascending=<span class=\"literal\">False</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">fig = go.Figure(data=[  </span><br><span class=\"line\">        go.Bar(x =A18A19[<span class=\"string\">&#x27;type&#x27;</span>],</span><br><span class=\"line\">        y = A18A19[<span class=\"string\">&#x27;minus&#x27;</span>],</span><br><span class=\"line\">        marker_color=<span class=\"string\">&#x27;#979DA6&#x27;</span>,</span><br><span class=\"line\">        name = <span class=\"string\">&#x27;2018-2019&#x27;</span>, base=<span class=\"number\">0</span>),</span><br><span class=\"line\">        go.Bar(x =A18A17[<span class=\"string\">&#x27;type&#x27;</span>],</span><br><span class=\"line\">        y = A18A17[<span class=\"string\">&#x27;minus&#x27;</span>],</span><br><span class=\"line\">               marker_color=<span class=\"string\">&#x27;#F2D64B&#x27;</span>,</span><br><span class=\"line\">        name = <span class=\"string\">&#x27;2018-2017&#x27;</span>, base=<span class=\"number\">0</span>)</span><br><span class=\"line\">        ])</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(title=<span class=\"string\">&#x27;&lt;b&gt;        Predicting outliers (2018)&lt;/b&gt;&#x27;</span>,title_font_size=<span class=\"number\">20</span>,</span><br><span class=\"line\">                  margin = <span class=\"built_in\">dict</span>(t=<span class=\"number\">200</span>, l=<span class=\"number\">100</span>, r=<span class=\"number\">10</span>, b=<span class=\"number\">200</span>),</span><br><span class=\"line\">                  height=<span class=\"number\">700</span>, width=<span class=\"number\">700</span>,</span><br><span class=\"line\">                  xaxis_title=<span class=\"literal\">None</span>,</span><br><span class=\"line\">                  yaxis_title=<span class=\"literal\">None</span>)</span><br><span class=\"line\">fig.update_xaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\">fig.update_yaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(legend=<span class=\"built_in\">dict</span>(</span><br><span class=\"line\">    orientation=<span class=\"string\">&quot;h&quot;</span>,</span><br><span class=\"line\">    yanchor=<span class=\"string\">&quot;bottom&quot;</span>,</span><br><span class=\"line\">    y=<span class=\"number\">1.1</span>,</span><br><span class=\"line\">    xanchor=<span class=\"string\">&quot;right&quot;</span>,</span><br><span class=\"line\">    x=<span class=\"number\">1</span>))</span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">14</span>),</span><br><span class=\"line\">                                    x=<span class=\"number\">0.8</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.5</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;@green_yhjw&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n\n<h2>Total population: </h2>\n\n<p>1.4 billion (85%) in China, 130 million in Japan, 0.5 billion in Korea, and 0.2 billion in Taiwan.</p>\n<ul>\n<li>China: The number of respondents is smaller than the population.</li>\n<li>Japan: Starting in 2019, overtaking China</li>\n<li>Taiwan : 2018 data 0 =? Diplomatic issues? The growth trend is weak.</li>\n<li>Korea : Respondents at a similar level to Japan’s population.</li>\n<li>East Asia: The number of respondents will increase further.</li>\n</ul>\n<p><img src=\"/images/kaggle_final/newplot3.png\"></p>\n<p><img src=\"/images/kaggle_final/newplot4.png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#data preprocessing</span></span><br><span class=\"line\">total17 = ( </span><br><span class=\"line\">    df17[<span class=\"string\">&#x27;region&#x27;</span>]</span><br><span class=\"line\">    .value_counts()</span><br><span class=\"line\">    .to_frame()</span><br><span class=\"line\">    .reset_index()</span><br><span class=\"line\">    .rename(columns=&#123;<span class=\"string\">&#x27;index&#x27;</span>:<span class=\"string\">&#x27;type&#x27;</span>, <span class=\"string\">&#x27;region&#x27;</span>:<span class=\"string\">&#x27;respodents&#x27;</span>&#125;)</span><br><span class=\"line\">    .groupby(<span class=\"string\">&#x27;type&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"built_in\">sum</span>()</span><br><span class=\"line\">    .reset_index()</span><br><span class=\"line\">)</span><br><span class=\"line\">total18 = (</span><br><span class=\"line\">    df18[<span class=\"string\">&#x27;region&#x27;</span>]</span><br><span class=\"line\">    .value_counts()</span><br><span class=\"line\">    .to_frame()</span><br><span class=\"line\">    .reset_index()</span><br><span class=\"line\">    .rename(columns=&#123;<span class=\"string\">&#x27;index&#x27;</span>:<span class=\"string\">&#x27;type&#x27;</span>, <span class=\"string\">&#x27;region&#x27;</span>:<span class=\"string\">&#x27;respodents&#x27;</span>&#125;)</span><br><span class=\"line\">    .groupby(<span class=\"string\">&#x27;type&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"built_in\">sum</span>()</span><br><span class=\"line\">    .reset_index()</span><br><span class=\"line\">)</span><br><span class=\"line\">total19 = (</span><br><span class=\"line\">    df19[<span class=\"string\">&#x27;region&#x27;</span>]</span><br><span class=\"line\">    .value_counts()</span><br><span class=\"line\">    .to_frame()</span><br><span class=\"line\">    .reset_index()</span><br><span class=\"line\">    .rename(columns=&#123;<span class=\"string\">&#x27;index&#x27;</span>:<span class=\"string\">&#x27;type&#x27;</span>, <span class=\"string\">&#x27;region&#x27;</span>:<span class=\"string\">&#x27;respodents&#x27;</span>&#125;)</span><br><span class=\"line\">    .groupby(<span class=\"string\">&#x27;type&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"built_in\">sum</span>()</span><br><span class=\"line\">    .reset_index()</span><br><span class=\"line\">)</span><br><span class=\"line\">total20 = (</span><br><span class=\"line\">    df20[<span class=\"string\">&#x27;region&#x27;</span>]</span><br><span class=\"line\">    .value_counts()</span><br><span class=\"line\">    .to_frame()</span><br><span class=\"line\">    .reset_index()</span><br><span class=\"line\">    .rename(columns=&#123;<span class=\"string\">&#x27;index&#x27;</span>:<span class=\"string\">&#x27;type&#x27;</span>, <span class=\"string\">&#x27;region&#x27;</span>:<span class=\"string\">&#x27;respodents&#x27;</span>&#125;)</span><br><span class=\"line\">    .groupby(<span class=\"string\">&#x27;type&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"built_in\">sum</span>()</span><br><span class=\"line\">    .reset_index()</span><br><span class=\"line\">)</span><br><span class=\"line\">total21 = (</span><br><span class=\"line\">    df21[<span class=\"string\">&#x27;region&#x27;</span>]</span><br><span class=\"line\">    .value_counts()</span><br><span class=\"line\">    .to_frame()</span><br><span class=\"line\">    .reset_index()</span><br><span class=\"line\">    .rename(columns=&#123;<span class=\"string\">&#x27;index&#x27;</span>:<span class=\"string\">&#x27;type&#x27;</span>, <span class=\"string\">&#x27;region&#x27;</span>:<span class=\"string\">&#x27;respodents&#x27;</span>&#125;)</span><br><span class=\"line\">    .groupby(<span class=\"string\">&#x27;type&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"built_in\">sum</span>()</span><br><span class=\"line\">    .reset_index()</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#graph</span></span><br><span class=\"line\">colors = [<span class=\"string\">&#x27;#F2D64B&#x27;</span>,<span class=\"string\">&#x27;#979DA6&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">fig = make_subplots(rows=<span class=\"number\">1</span>, cols=<span class=\"number\">5</span>, specs=[[&#123;<span class=\"string\">&#x27;type&#x27;</span>:<span class=\"string\">&#x27;domain&#x27;</span>&#125;, &#123;<span class=\"string\">&#x27;type&#x27;</span>:<span class=\"string\">&#x27;domain&#x27;</span>&#125;, &#123;<span class=\"string\">&#x27;type&#x27;</span>:<span class=\"string\">&#x27;domain&#x27;</span>&#125;, &#123;<span class=\"string\">&#x27;type&#x27;</span>:<span class=\"string\">&#x27;domain&#x27;</span>&#125;, &#123;<span class=\"string\">&#x27;type&#x27;</span>:<span class=\"string\">&#x27;domain&#x27;</span>&#125;]],</span><br><span class=\"line\">                   subplot_titles=(<span class=\"string\">&quot;2017&quot;</span>, <span class=\"string\">&quot;2018&quot;</span>, <span class=\"string\">&quot;2019&quot;</span>, <span class=\"string\">&quot;2020&quot;</span>, <span class=\"string\">&quot;2021&quot;</span>))</span><br><span class=\"line\">fig.add_trace(go.Pie(marker=<span class=\"built_in\">dict</span>(colors=colors),labels=total21[<span class=\"string\">&#x27;type&#x27;</span>], values=total21[<span class=\"string\">&#x27;respodents&#x27;</span>], name=<span class=\"string\">&quot;2021&quot;</span>, scalegroup=<span class=\"string\">&#x27;one&#x27;</span>), <span class=\"number\">1</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">fig.add_trace(go.Pie(marker=<span class=\"built_in\">dict</span>(colors=colors),labels=total20[<span class=\"string\">&#x27;type&#x27;</span>], values=total20[<span class=\"string\">&#x27;respodents&#x27;</span>], name=<span class=\"string\">&quot;2020&quot;</span>, scalegroup=<span class=\"string\">&#x27;one&#x27;</span>), <span class=\"number\">1</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\">fig.add_trace(go.Pie(marker=<span class=\"built_in\">dict</span>(colors=colors),labels=total19[<span class=\"string\">&#x27;type&#x27;</span>], values=total19[<span class=\"string\">&#x27;respodents&#x27;</span>], name=<span class=\"string\">&quot;2019&quot;</span>, scalegroup=<span class=\"string\">&#x27;one&#x27;</span>), <span class=\"number\">1</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">fig.add_trace(go.Pie(marker=<span class=\"built_in\">dict</span>(colors=colors),labels=total18[<span class=\"string\">&#x27;type&#x27;</span>], values=total18[<span class=\"string\">&#x27;respodents&#x27;</span>], name=<span class=\"string\">&quot;2018&quot;</span>, scalegroup=<span class=\"string\">&#x27;one&#x27;</span>), <span class=\"number\">1</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\">fig.add_trace(go.Pie(marker=<span class=\"built_in\">dict</span>(colors=colors),labels=total17[<span class=\"string\">&#x27;type&#x27;</span>], values=total17[<span class=\"string\">&#x27;respodents&#x27;</span>], name=<span class=\"string\">&quot;2017&quot;</span>, scalegroup=<span class=\"string\">&#x27;one&#x27;</span>), <span class=\"number\">1</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_traces(hole=<span class=\"number\">.0</span>, hoverinfo=<span class=\"string\">&quot;label+percent+name&quot;</span>, textposition=<span class=\"string\">&#x27;inside&#x27;</span>, textinfo=<span class=\"string\">&#x27;percent+label&#x27;</span>,</span><br><span class=\"line\">                  textfont_size=<span class=\"number\">12</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(title=<span class=\"string\">&#x27;&lt;b&gt;World vs EastAsia&lt;/b&gt;&#x27;</span>,title_font_size=<span class=\"number\">23</span>,</span><br><span class=\"line\">                  margin = <span class=\"built_in\">dict</span>(t=<span class=\"number\">300</span>, l=<span class=\"number\">0</span>, r=<span class=\"number\">0</span>, b=<span class=\"number\">200</span>),</span><br><span class=\"line\">                  height=<span class=\"number\">700</span>, width=<span class=\"number\">700</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(legend=<span class=\"built_in\">dict</span>(</span><br><span class=\"line\">    orientation=<span class=\"string\">&quot;h&quot;</span>,</span><br><span class=\"line\">    yanchor=<span class=\"string\">&quot;bottom&quot;</span>,</span><br><span class=\"line\">    y=<span class=\"number\">1.3</span>,</span><br><span class=\"line\">    xanchor=<span class=\"string\">&quot;right&quot;</span>,</span><br><span class=\"line\">    x=<span class=\"number\">1</span>))</span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">14</span>),</span><br><span class=\"line\">                                    x=<span class=\"number\">0.8</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.25</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;@green_yhjw&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fig = go.Figure(data=[</span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;2017&#x27;</span>, x=df5years[<span class=\"string\">&#x27;Country&#x27;</span>], y=df5years[<span class=\"string\">&#x27;17&#x27;</span>], marker_color=<span class=\"string\">&#x27;#F2798F&#x27;</span>,text=df5years[<span class=\"string\">&#x27;17&#x27;</span>].tolist(), textposition=<span class=\"string\">&#x27;outside&#x27;</span>),</span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;2018&#x27;</span>, x=df5years[<span class=\"string\">&#x27;Country&#x27;</span>], y=df5years[<span class=\"string\">&#x27;18&#x27;</span>], marker_color=<span class=\"string\">&#x27;#88BFBA&#x27;</span>,text=df5years[<span class=\"string\">&#x27;18&#x27;</span>].fillna(<span class=\"number\">0</span>).astype(<span class=\"built_in\">int</span>).tolist(), textposition=<span class=\"string\">&#x27;outside&#x27;</span>,),</span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;2019&#x27;</span>, x=df5years[<span class=\"string\">&#x27;Country&#x27;</span>], y=df5years[<span class=\"string\">&#x27;19&#x27;</span>], marker_color=<span class=\"string\">&#x27;#CDD9A3&#x27;</span>,text=df5years[<span class=\"string\">&#x27;19&#x27;</span>].tolist(), textposition=<span class=\"string\">&#x27;outside&#x27;</span>),</span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;2020&#x27;</span>, x=df5years[<span class=\"string\">&#x27;Country&#x27;</span>], y=df5years[<span class=\"string\">&#x27;20&#x27;</span>], marker_color=<span class=\"string\">&#x27;#F28705&#x27;</span>,text=df5years[<span class=\"string\">&#x27;20&#x27;</span>].tolist(), textposition=<span class=\"string\">&#x27;outside&#x27;</span>,),</span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;2021&#x27;</span>, x=df5years[<span class=\"string\">&#x27;Country&#x27;</span>], y=df5years[<span class=\"string\">&#x27;21&#x27;</span>], marker_color=<span class=\"string\">&#x27;#D9946C&#x27;</span>,text=df5years[<span class=\"string\">&#x27;21&#x27;</span>].tolist(), textposition=<span class=\"string\">&#x27;outside&#x27;</span>)])</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(barmode=<span class=\"string\">&#x27;group&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(title=<span class=\"string\">&#x27;&lt;b&gt;Kaggle User in East Asia&lt;/b&gt;&#x27;</span>,title_font_size=<span class=\"number\">23</span>,</span><br><span class=\"line\">                  margin = <span class=\"built_in\">dict</span>(t=<span class=\"number\">200</span>, l=<span class=\"number\">100</span>, r=<span class=\"number\">10</span>, b=<span class=\"number\">200</span>),</span><br><span class=\"line\">                  height=<span class=\"number\">600</span>, width=<span class=\"number\">700</span>)</span><br><span class=\"line\">fig.update_xaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\">fig.update_yaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\">fig.update_traces(hovertemplate=<span class=\"string\">&#x27;&lt;b&gt;Count&lt;/b&gt;: %&#123;y&#125;&#x27;</span>)</span><br><span class=\"line\">fig.update_layout(legend=<span class=\"built_in\">dict</span>(</span><br><span class=\"line\">    orientation=<span class=\"string\">&quot;v&quot;</span>,</span><br><span class=\"line\">    yanchor=<span class=\"string\">&quot;bottom&quot;</span>,</span><br><span class=\"line\">    y=<span class=\"number\">1.15</span>,</span><br><span class=\"line\">    xanchor=<span class=\"string\">&quot;right&quot;</span>,</span><br><span class=\"line\">    x=<span class=\"number\">1</span>))</span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">14</span>),</span><br><span class=\"line\">                                    x=<span class=\"number\">0.8</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.5</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;@green_yhjw&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-1-2-Gender-transformation\"><a href=\"#3-1-2-Gender-transformation\" class=\"headerlink\" title=\"3.1.2 Gender transformation\"></a>3.1.2 Gender transformation</h1><hr>\n<h2>World: The proportion of female respondents increases (still below 20%) </h2>\n\n<p>The number of respondents is increasing in all genders.</p>\n<p>Our team is also a team with high female members and wants to contribute as a respondent in 2022.</p>\n<p><img src=\"/images/kaggle_final/newplot5.png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#data preprocessing</span></span><br><span class=\"line\">Gender_17 = (</span><br><span class=\"line\">    df17[<span class=\"string\">&#x27;GenderSelect&#x27;</span>]</span><br><span class=\"line\">    .replace([<span class=\"string\">&#x27;A different identity&#x27;</span>, <span class=\"string\">&#x27;Prefer to self-describe&#x27;</span>, <span class=\"string\">&#x27;Non-binary, genderqueer, or gender non-conforming&#x27;</span>], <span class=\"string\">&#x27;Others&#x27;</span>)</span><br><span class=\"line\">    .fillna(<span class=\"string\">&#x27;Others&#x27;</span>)</span><br><span class=\"line\">    .value_counts()</span><br><span class=\"line\">    .to_frame()</span><br><span class=\"line\">    .reset_index()</span><br><span class=\"line\">    .rename(columns=&#123;<span class=\"string\">&#x27;index&#x27;</span>:<span class=\"string\">&#x27;type&#x27;</span>, <span class=\"string\">&#x27;GenderSelect&#x27;</span>:<span class=\"string\">&#x27;Gender&#x27;</span>&#125;)</span><br><span class=\"line\">    .groupby(<span class=\"string\">&#x27;type&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"built_in\">sum</span>()</span><br><span class=\"line\">    .reset_index())</span><br><span class=\"line\">Gender_18 = (</span><br><span class=\"line\">    df18[<span class=\"string\">&#x27;Q1&#x27;</span>]</span><br><span class=\"line\">    .replace([<span class=\"string\">&#x27;Prefer not to say&#x27;</span>, <span class=\"string\">&#x27;Prefer to self-describe&#x27;</span>], <span class=\"string\">&#x27;Others&#x27;</span>)</span><br><span class=\"line\">    .fillna(<span class=\"string\">&#x27;Others&#x27;</span>)</span><br><span class=\"line\">    .value_counts()</span><br><span class=\"line\">    .to_frame()</span><br><span class=\"line\">    .reset_index()</span><br><span class=\"line\">    .rename(columns=&#123;<span class=\"string\">&#x27;index&#x27;</span>:<span class=\"string\">&#x27;type&#x27;</span>, <span class=\"string\">&#x27;Q1&#x27;</span>:<span class=\"string\">&#x27;Gender&#x27;</span>&#125;)</span><br><span class=\"line\">    .groupby(<span class=\"string\">&#x27;type&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"built_in\">sum</span>()</span><br><span class=\"line\">    .reset_index())</span><br><span class=\"line\">Gender_19 = (</span><br><span class=\"line\">    df19[<span class=\"string\">&#x27;Q2&#x27;</span>]</span><br><span class=\"line\">    .replace([<span class=\"string\">&#x27;Prefer not to say&#x27;</span>,<span class=\"string\">&#x27;Prefer to self-describe&#x27;</span>],<span class=\"string\">&#x27;Others&#x27;</span>)</span><br><span class=\"line\">    .fillna(<span class=\"string\">&#x27;Others&#x27;</span>)</span><br><span class=\"line\">    .value_counts()</span><br><span class=\"line\">    .to_frame()</span><br><span class=\"line\">    .reset_index()</span><br><span class=\"line\">    .rename(columns=&#123;<span class=\"string\">&#x27;index&#x27;</span>:<span class=\"string\">&#x27;type&#x27;</span>, <span class=\"string\">&#x27;Q2&#x27;</span>:<span class=\"string\">&#x27;Gender&#x27;</span>&#125;)</span><br><span class=\"line\">    .groupby(<span class=\"string\">&#x27;type&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"built_in\">sum</span>()</span><br><span class=\"line\">    .reset_index())</span><br><span class=\"line\">Gender_20 = (</span><br><span class=\"line\">    df20[<span class=\"string\">&#x27;Q2&#x27;</span>]</span><br><span class=\"line\">    .replace([<span class=\"string\">&#x27;Prefer not to say&#x27;</span>, <span class=\"string\">&#x27;Prefer to self-describe&#x27;</span>, <span class=\"string\">&#x27;Nonbinary&#x27;</span>], <span class=\"string\">&#x27;Others&#x27;</span>)</span><br><span class=\"line\">    .replace([<span class=\"string\">&#x27;Man&#x27;</span>, <span class=\"string\">&#x27;Woman&#x27;</span>], [<span class=\"string\">&#x27;Male&#x27;</span>, <span class=\"string\">&#x27;Female&#x27;</span>])</span><br><span class=\"line\">    .fillna(<span class=\"string\">&#x27;Others&#x27;</span>)</span><br><span class=\"line\">    .value_counts()</span><br><span class=\"line\">    .to_frame()</span><br><span class=\"line\">    .reset_index()</span><br><span class=\"line\">    .rename(columns=&#123;<span class=\"string\">&#x27;index&#x27;</span>:<span class=\"string\">&#x27;type&#x27;</span>, <span class=\"string\">&#x27;Q2&#x27;</span>:<span class=\"string\">&#x27;Gender&#x27;</span>&#125;)</span><br><span class=\"line\">    .groupby(<span class=\"string\">&#x27;type&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"built_in\">sum</span>()</span><br><span class=\"line\">    .reset_index())</span><br><span class=\"line\">Gender_21 = (</span><br><span class=\"line\">    df21[<span class=\"string\">&#x27;Q2&#x27;</span>]</span><br><span class=\"line\">    .replace([<span class=\"string\">&#x27;Prefer not to say&#x27;</span>, <span class=\"string\">&#x27;Prefer to self-describe&#x27;</span>, <span class=\"string\">&#x27;Nonbinary&#x27;</span>], <span class=\"string\">&#x27;Others&#x27;</span>)</span><br><span class=\"line\">    .replace([<span class=\"string\">&#x27;Man&#x27;</span>, <span class=\"string\">&#x27;Woman&#x27;</span>], [<span class=\"string\">&#x27;Male&#x27;</span>, <span class=\"string\">&#x27;Female&#x27;</span>])</span><br><span class=\"line\">    .fillna(<span class=\"string\">&#x27;Others&#x27;</span>)</span><br><span class=\"line\">    .value_counts()</span><br><span class=\"line\">    .to_frame()</span><br><span class=\"line\">    .reset_index()</span><br><span class=\"line\">    .rename(columns=&#123;<span class=\"string\">&#x27;index&#x27;</span>:<span class=\"string\">&#x27;type&#x27;</span>, <span class=\"string\">&#x27;Q2&#x27;</span>:<span class=\"string\">&#x27;Gender&#x27;</span>&#125;)</span><br><span class=\"line\">    .groupby(<span class=\"string\">&#x27;type&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"built_in\">sum</span>()</span><br><span class=\"line\">    .reset_index())</span><br><span class=\"line\"></span><br><span class=\"line\">colors = [<span class=\"string\">&#x27;#D9946C&#x27;</span>,<span class=\"string\">&#x27;#88BFBA&#x27;</span>, <span class=\"string\">&#x27;#CDD9A3&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">fig = make_subplots(rows=<span class=\"number\">1</span>, cols=<span class=\"number\">5</span>, specs=[[&#123;<span class=\"string\">&#x27;type&#x27;</span>:<span class=\"string\">&#x27;domain&#x27;</span>&#125;, &#123;<span class=\"string\">&#x27;type&#x27;</span>:<span class=\"string\">&#x27;domain&#x27;</span>&#125;, &#123;<span class=\"string\">&#x27;type&#x27;</span>:<span class=\"string\">&#x27;domain&#x27;</span>&#125;, &#123;<span class=\"string\">&#x27;type&#x27;</span>:<span class=\"string\">&#x27;domain&#x27;</span>&#125;, &#123;<span class=\"string\">&#x27;type&#x27;</span>:<span class=\"string\">&#x27;domain&#x27;</span>&#125;]],)</span><br><span class=\"line\">fig.add_trace(go.Pie(marker=<span class=\"built_in\">dict</span>(colors=colors), labels=Gender_21[<span class=\"string\">&#x27;type&#x27;</span>], values=Gender_21[<span class=\"string\">&#x27;Gender&#x27;</span>], name=<span class=\"string\">&quot;2021&quot;</span>, scalegroup=<span class=\"string\">&#x27;one&#x27;</span>, text=np.array(Gender_21[<span class=\"string\">&#x27;Gender&#x27;</span>].<span class=\"built_in\">sum</span>()), title=<span class=\"string\">&quot;2021&quot;</span>, titleposition=<span class=\"string\">&#x27;bottom center&#x27;</span>),</span><br><span class=\"line\">              <span class=\"number\">1</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">fig.add_trace(go.Pie(marker=<span class=\"built_in\">dict</span>(colors=colors), labels=Gender_20[<span class=\"string\">&#x27;type&#x27;</span>], values=Gender_20[<span class=\"string\">&#x27;Gender&#x27;</span>], name=<span class=\"string\">&quot;2020&quot;</span>, scalegroup=<span class=\"string\">&#x27;one&#x27;</span>, text=np.array(Gender_20[<span class=\"string\">&#x27;Gender&#x27;</span>].<span class=\"built_in\">sum</span>()), title=<span class=\"string\">&quot;2020&quot;</span>, titleposition=<span class=\"string\">&#x27;bottom center&#x27;</span>),</span><br><span class=\"line\">              <span class=\"number\">1</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\">fig.add_trace(go.Pie(marker=<span class=\"built_in\">dict</span>(colors=colors), labels=Gender_19[<span class=\"string\">&#x27;type&#x27;</span>], values=Gender_19[<span class=\"string\">&#x27;Gender&#x27;</span>], name=<span class=\"string\">&quot;2019&quot;</span>, scalegroup=<span class=\"string\">&#x27;one&#x27;</span>, text=np.array(Gender_19[<span class=\"string\">&#x27;Gender&#x27;</span>].<span class=\"built_in\">sum</span>()), title=<span class=\"string\">&quot;2019&quot;</span>, titleposition=<span class=\"string\">&#x27;bottom center&#x27;</span>),</span><br><span class=\"line\">              <span class=\"number\">1</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">fig.add_trace(go.Pie(marker=<span class=\"built_in\">dict</span>(colors=colors), labels=Gender_18[<span class=\"string\">&#x27;type&#x27;</span>], values=Gender_18[<span class=\"string\">&#x27;Gender&#x27;</span>], name=<span class=\"string\">&quot;2018&quot;</span>, scalegroup=<span class=\"string\">&#x27;one&#x27;</span>, text=np.array(Gender_18[<span class=\"string\">&#x27;Gender&#x27;</span>].<span class=\"built_in\">sum</span>()), title=<span class=\"string\">&quot;2018&quot;</span>, titleposition=<span class=\"string\">&#x27;bottom center&#x27;</span>),</span><br><span class=\"line\">              <span class=\"number\">1</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\">fig.add_trace(go.Pie(marker=<span class=\"built_in\">dict</span>(colors=colors), labels=Gender_17[<span class=\"string\">&#x27;type&#x27;</span>], values=Gender_17[<span class=\"string\">&#x27;Gender&#x27;</span>], name=<span class=\"string\">&quot;2017&quot;</span>, scalegroup=<span class=\"string\">&#x27;one&#x27;</span>, text=np.array(Gender_17[<span class=\"string\">&#x27;Gender&#x27;</span>].<span class=\"built_in\">sum</span>()), title=<span class=\"string\">&quot;2017&quot;</span>, titleposition=<span class=\"string\">&#x27;bottom center&#x27;</span>),</span><br><span class=\"line\">              <span class=\"number\">1</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_traces(hole=<span class=\"number\">.0</span>, hoverinfo=<span class=\"string\">&quot;label+percent+name&quot;</span>, </span><br><span class=\"line\">                  textinfo=<span class=\"string\">&#x27;label+percent+value&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(title=<span class=\"string\">&#x27;&lt;b&gt;World Gender&lt;/b&gt;&#x27;</span>,title_font_size=<span class=\"number\">23</span>,</span><br><span class=\"line\">                  margin = <span class=\"built_in\">dict</span>(t=<span class=\"number\">300</span>, l=<span class=\"number\">100</span>, r=<span class=\"number\">0</span>, b=<span class=\"number\">200</span>),</span><br><span class=\"line\">                  height=<span class=\"number\">700</span>, width=<span class=\"number\">1000</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(legend=<span class=\"built_in\">dict</span>(</span><br><span class=\"line\">    orientation=<span class=\"string\">&quot;v&quot;</span>,</span><br><span class=\"line\">    yanchor=<span class=\"string\">&quot;bottom&quot;</span>,</span><br><span class=\"line\">    y=<span class=\"number\">1.3</span>,</span><br><span class=\"line\">    xanchor=<span class=\"string\">&quot;right&quot;</span>,</span><br><span class=\"line\">    x=<span class=\"number\">1</span>))</span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">14</span>),</span><br><span class=\"line\">                                    x=<span class=\"number\">0.85</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.5</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;@green_yhjw&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n\n<h3>\n    \n<pre><code>- Male (1004-&gt;2037 : 2017-&gt;2021) double increase\n\n- Female 183-&gt;327 : 2017-&gt;2021 increased 1.8 times\n\n- Others (8-&gt;64 : 2017-&gt;2021) 8x increase\n</code></pre>\n</h3>\n[Compare the high and low points]\n\n<ul>\n<li><p>It can be seen that the number of female respondents and the ratio of male respondents hardly change, which is a difference compared to World data.</p>\n</li>\n<li><p>It can be seen that the degree of gender freedom in East Asia has increased relatively.</p>\n</li>\n<li><p>Compared to World data, it can be seen that in 2021 (1.87: 2.6= Wo: Ea), compared to 2017 (1.96: 0.7 = Ea), which was relatively conservative.</p>\n</li>\n</ul>\n<p><img src=\"/images/kaggle_final/newplot6.png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#data preprocessing</span></span><br><span class=\"line\">gender21= df21_Ea.loc[:, [<span class=\"string\">&#x27;Q3&#x27;</span>, <span class=\"string\">&#x27;Q2&#x27;</span>, <span class=\"string\">&#x27;year&#x27;</span>]].rename(columns=&#123;<span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;Country&#x27;</span>, <span class=\"string\">&#x27;Q2&#x27;</span>:<span class=\"string\">&#x27;Gender&#x27;</span>&#125;)</span><br><span class=\"line\">gender20= df20_Ea.loc[:, [<span class=\"string\">&#x27;Q3&#x27;</span>, <span class=\"string\">&#x27;Q2&#x27;</span>, <span class=\"string\">&#x27;year&#x27;</span>]].rename(columns=&#123;<span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;Country&#x27;</span>, <span class=\"string\">&#x27;Q2&#x27;</span>:<span class=\"string\">&#x27;Gender&#x27;</span>&#125;)</span><br><span class=\"line\">gender19= df19_Ea.loc[:, [<span class=\"string\">&#x27;Q3&#x27;</span>, <span class=\"string\">&#x27;Q2&#x27;</span>, <span class=\"string\">&#x27;year&#x27;</span>]].rename(columns=&#123;<span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;Country&#x27;</span>, <span class=\"string\">&#x27;Q2&#x27;</span>:<span class=\"string\">&#x27;Gender&#x27;</span>&#125;)</span><br><span class=\"line\">gender18= df18_Ea.loc[:, [<span class=\"string\">&#x27;Q3&#x27;</span>, <span class=\"string\">&#x27;Q1&#x27;</span>, <span class=\"string\">&#x27;year&#x27;</span>]].rename(columns=&#123;<span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;Country&#x27;</span>, <span class=\"string\">&#x27;Q1&#x27;</span>:<span class=\"string\">&#x27;Gender&#x27;</span>&#125;)</span><br><span class=\"line\">gender17= df17_Ea.loc[:, [<span class=\"string\">&#x27;Country&#x27;</span>, <span class=\"string\">&#x27;GenderSelect&#x27;</span>, <span class=\"string\">&#x27;year&#x27;</span>]].rename(columns=&#123;<span class=\"string\">&#x27;index&#x27;</span>:<span class=\"string\">&#x27;type&#x27;</span>, <span class=\"string\">&#x27;GenderSelect&#x27;</span>:<span class=\"string\">&#x27;Gender&#x27;</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">Gender5y= pd.concat([gender17, gender18, gender19, gender20, gender21])</span><br><span class=\"line\">Gender5y= (Gender5y.replace([<span class=\"string\">&#x27;Prefer not to say&#x27;</span>, <span class=\"string\">&#x27;Prefer to self-describe&#x27;</span>, <span class=\"string\">&#x27;Nonbinary&#x27;</span>, <span class=\"string\">&#x27;A different identity&#x27;</span>], <span class=\"string\">&#x27;Others&#x27;</span>)</span><br><span class=\"line\">           .replace([<span class=\"string\">&#x27;Man&#x27;</span>, <span class=\"string\">&#x27;Woman&#x27;</span>], [<span class=\"string\">&#x27;Male&#x27;</span>, <span class=\"string\">&#x27;Female&#x27;</span>])</span><br><span class=\"line\">           .groupby([<span class=\"string\">&#x27;year&#x27;</span>, <span class=\"string\">&#x27;Gender&#x27;</span>])</span><br><span class=\"line\">           .size()</span><br><span class=\"line\">           .reset_index()</span><br><span class=\"line\">           .rename(columns = &#123;<span class=\"number\">0</span>:<span class=\"string\">&quot;Count&quot;</span>&#125;))</span><br><span class=\"line\"></span><br><span class=\"line\">gen17_5y = Gender5y[Gender5y[<span class=\"string\">&#x27;year&#x27;</span>] == <span class=\"string\">&quot;2017&quot;</span>].reset_index(drop = <span class=\"literal\">True</span>)</span><br><span class=\"line\">gen18_5y = Gender5y[Gender5y[<span class=\"string\">&#x27;year&#x27;</span>] == <span class=\"string\">&quot;2018&quot;</span>].reset_index(drop = <span class=\"literal\">True</span>)</span><br><span class=\"line\">gen19_5y = Gender5y[Gender5y[<span class=\"string\">&#x27;year&#x27;</span>] == <span class=\"string\">&quot;2019&quot;</span>].reset_index(drop = <span class=\"literal\">True</span>)</span><br><span class=\"line\">gen20_5y = Gender5y[Gender5y[<span class=\"string\">&#x27;year&#x27;</span>] == <span class=\"string\">&quot;2020&quot;</span>].reset_index(drop = <span class=\"literal\">True</span>)</span><br><span class=\"line\">gen21_5y = Gender5y[Gender5y[<span class=\"string\">&#x27;year&#x27;</span>] == <span class=\"string\">&quot;2021&quot;</span>].reset_index(drop = <span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">Gen5y_ = pd.concat([gen17_5y, gen18_5y, gen19_5y, gen20_5y, gen21_5y], ignore_index = <span class=\"literal\">True</span>)</span><br><span class=\"line\">Gen5y_= pd.pivot(Gen5y_, index = <span class=\"string\">&quot;year&quot;</span>, columns = <span class=\"string\">&quot;Gender&quot;</span>, values = <span class=\"string\">&quot;Count&quot;</span>).reset_index()</span><br><span class=\"line\">Gen5y_</span><br><span class=\"line\"></span><br><span class=\"line\">Gen5y_[<span class=\"string\">&#x27;year&#x27;</span>].unique()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#graph</span></span><br><span class=\"line\">fig = go.Figure()</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_trace(go.Bar(</span><br><span class=\"line\">    x = Gen5y_[<span class=\"string\">&#x27;year&#x27;</span>],</span><br><span class=\"line\">    y = Gen5y_[<span class=\"string\">&#x27;Male&#x27;</span>].tolist(),</span><br><span class=\"line\">    name = <span class=\"string\">&#x27;Male&#x27;</span>,</span><br><span class=\"line\">marker_color=<span class=\"string\">&#x27;#88BFBA&#x27;</span>, text=Gen5y_[<span class=\"string\">&#x27;Male&#x27;</span>].tolist(), textposition=<span class=\"string\">&#x27;outside&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_trace(go.Bar(</span><br><span class=\"line\">    x = Gen5y_[<span class=\"string\">&#x27;year&#x27;</span>],</span><br><span class=\"line\">    y = Gen5y_[<span class=\"string\">&#x27;Female&#x27;</span>].tolist(),</span><br><span class=\"line\">    name = <span class=\"string\">&#x27;Female&#x27;</span>,</span><br><span class=\"line\">marker_color=<span class=\"string\">&#x27;#D9946C&#x27;</span>, text=Gen5y_[<span class=\"string\">&#x27;Female&#x27;</span>].tolist(), textposition=<span class=\"string\">&#x27;outside&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_trace(go.Bar(</span><br><span class=\"line\">    x = Gen5y_[<span class=\"string\">&#x27;year&#x27;</span>],</span><br><span class=\"line\">    y = Gen5y_[<span class=\"string\">&#x27;Others&#x27;</span>].tolist(),</span><br><span class=\"line\">    name = <span class=\"string\">&#x27;Others&#x27;</span>,</span><br><span class=\"line\">marker_color=<span class=\"string\">&#x27;#CDD9A3&#x27;</span>, text=Gen5y_[<span class=\"string\">&#x27;Others&#x27;</span>].tolist(), textposition=<span class=\"string\">&#x27;outside&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(barmode=<span class=\"string\">&quot;group&quot;</span>) </span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(title=<span class=\"string\">&#x27;&lt;b&gt;Gender by year&lt;/b&gt;&#x27;</span>,title_font_size=<span class=\"number\">22</span>,</span><br><span class=\"line\">                  margin = <span class=\"built_in\">dict</span>(t=<span class=\"number\">200</span>, l=<span class=\"number\">100</span>, r=<span class=\"number\">10</span>, b=<span class=\"number\">200</span>),</span><br><span class=\"line\">                  height=<span class=\"number\">700</span>, width=<span class=\"number\">700</span>,</span><br><span class=\"line\">                  xaxis_title=<span class=\"literal\">None</span>,</span><br><span class=\"line\">                  yaxis_title=<span class=\"literal\">None</span>)</span><br><span class=\"line\">fig.update_xaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\">fig.update_yaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">14</span>),</span><br><span class=\"line\">                                    x=<span class=\"number\">0.8</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.5</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;@green_yhjw&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-1-3-Job-transformation\"><a href=\"#3-1-3-Job-transformation\" class=\"headerlink\" title=\"3.1.3 Job transformation\"></a>3.1.3 Job transformation</h1><hr>\n<h2> 21' World Vs East Asia Age Ratio: Bar plot </h2>\n\n<ul>\n<li><p>Not Employed : More than 30% in both East Asia and the world, the highest.</p>\n<p>  <em>Because “Students” is included.</em></p>\n</li>\n<li><p>Data Scientist : High percentage in the world and East Asia.</p>\n</li>\n<li><p>Relatively low proportion in East Asia.<br>  <strong><strong>= Absolute lack of numbers</strong></strong></p>\n</li>\n</ul>\n<p style=\"color:#FF0000\";>\nWe would like to move forward by selecting a **data scientist** with insufficient numbers in East Asia.\n</p>\n\n<p><img src=\"/images/kaggle_final/newplot7.png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#data preprocessing</span></span><br><span class=\"line\">Data_Analyst =[<span class=\"string\">&#x27;Data Analyst&#x27;</span>,<span class=\"string\">&#x27;Data Miner,Information technology&#x27;</span>,<span class=\"string\">&#x27;Data Miner&#x27;</span>,</span><br><span class=\"line\">                <span class=\"string\">&#x27;Predictive Modeler&#x27;</span>,<span class=\"string\">&#x27;Information technology, networking, or system administration&#x27;</span>, </span><br><span class=\"line\">                <span class=\"string\">&#x27;A business discipline (accounting, economics, finance, etc.)&#x27;</span>, <span class=\"string\">&#x27;Business Analyst&#x27;</span>, <span class=\"string\">&#x27;Humanities&#x27;</span>,</span><br><span class=\"line\">                <span class=\"string\">&#x27;Statistician&#x27;</span>, <span class=\"string\">&#x27;Mathematics or statistics&#x27;</span>, <span class=\"string\">&#x27;Medical or life sciences (biology, chemistry, medicine, etc.)&#x27;</span>, </span><br><span class=\"line\">                <span class=\"string\">&#x27;Physics or astronomy&#x27;</span>,  <span class=\"string\">&#x27;Social sciences (anthropology, psychology, sociology, etc.)&#x27;</span>, <span class=\"string\">&#x27;Environmental science or geology&#x27;</span>,</span><br><span class=\"line\">                <span class=\"string\">&#x27;Humanities (history, literature, philosophy, etc.)&#x27;</span>]</span><br><span class=\"line\">Data_Scientist =[<span class=\"string\">&#x27;Data Scientist&#x27;</span>,  <span class=\"string\">&#x27;Research Scientist&#x27;</span>, <span class=\"string\">&#x27;Researcher&#x27;</span>,</span><br><span class=\"line\">                <span class=\"string\">&#x27;Machine Learning Engineer&#x27;</span>, <span class=\"string\">&#x27;Scientist/Researcher&#x27;</span>]</span><br><span class=\"line\">Developer=[<span class=\"string\">&#x27;Developer Relations/Advocacy&#x27;</span>,<span class=\"string\">&#x27;Data Engineer&#x27;</span>,<span class=\"string\">&#x27;Engineer&#x27;</span>,<span class=\"string\">&#x27;Engineering (non-computer focused)&#x27;</span>,</span><br><span class=\"line\">           <span class=\"string\">&#x27;Programmer&#x27;</span>,<span class=\"string\">&#x27;Software Engineer&#x27;</span>, <span class=\"string\">&#x27;Computer Scientist&#x27;</span>,<span class=\"string\">&#x27;Computer science (software engineering, etc.)&#x27;</span>, </span><br><span class=\"line\">           <span class=\"string\">&#x27;Fine arts or performing arts&#x27;</span>,<span class=\"string\">&#x27;Product Manager&#x27;</span>, <span class=\"string\">&#x27;Software Developer/Software Engineer&#x27;</span>,</span><br><span class=\"line\">           <span class=\"string\">&#x27;Product/Project Manager&#x27;</span>,<span class=\"string\">&#x27;Program/Project Manager&#x27;</span>,<span class=\"string\">&#x27;DBA/Database Engineer&#x27;</span>]</span><br><span class=\"line\">Not_Employed =[<span class=\"string\">&#x27;Currently not employed&#x27;</span>, <span class=\"string\">&#x27;Not employed&#x27;</span>, <span class=\"string\">&#x27;Student&#x27;</span>]</span><br><span class=\"line\">Others = [<span class=\"string\">&#x27;I never declared a major&#x27;</span>, <span class=\"string\">&#x27;Other&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">df21job_Ea = df21_Ea.loc[:,[<span class=\"string\">&#x27;Q3&#x27;</span>,<span class=\"string\">&#x27;Q5&#x27;</span>]].rename(columns=&#123;<span class=\"string\">&#x27;Q5&#x27;</span>:<span class=\"string\">&#x27;2021&#x27;</span>&#125;).fillna(<span class=\"string\">&#x27;Other&#x27;</span>)</span><br><span class=\"line\">df20job_Ea = df20_Ea.loc[:,[<span class=\"string\">&#x27;Q3&#x27;</span>,<span class=\"string\">&#x27;Q5&#x27;</span>]].rename(columns=&#123;<span class=\"string\">&#x27;Q5&#x27;</span>:<span class=\"string\">&#x27;2020&#x27;</span>&#125;).fillna(<span class=\"string\">&#x27;Other&#x27;</span>)</span><br><span class=\"line\">df19job_Ea = df19_Ea.loc[:,[<span class=\"string\">&#x27;Q3&#x27;</span>,<span class=\"string\">&#x27;Q5&#x27;</span>]].rename(columns=&#123;<span class=\"string\">&#x27;Q5&#x27;</span>:<span class=\"string\">&#x27;2019&#x27;</span>&#125;).fillna(<span class=\"string\">&#x27;Other&#x27;</span>)</span><br><span class=\"line\">df18job_Ea = df18_Ea.loc[:,[<span class=\"string\">&#x27;Q3&#x27;</span>,<span class=\"string\">&#x27;Q5&#x27;</span>]].rename(columns=&#123; <span class=\"string\">&#x27;Q5&#x27;</span>:<span class=\"string\">&#x27;2018&#x27;</span>&#125;).fillna(<span class=\"string\">&#x27;Other&#x27;</span>)</span><br><span class=\"line\">df17job_Ea = df17_Ea.loc[:,[<span class=\"string\">&#x27;Country&#x27;</span>,<span class=\"string\">&#x27;CurrentJobTitleSelect&#x27;</span>]].rename(columns=&#123;<span class=\"string\">&#x27;CurrentJobTitleSelect&#x27;</span>:<span class=\"string\">&#x27;2017&#x27;</span>&#125;).fillna(<span class=\"string\">&#x27;Other&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">df21job_Ea.value_counts(<span class=\"string\">&#x27;2021&#x27;</span>)</span><br><span class=\"line\">df21job_Ea[<span class=\"string\">&#x27;JOB&#x27;</span>]=[<span class=\"string\">&quot;Data Analyst&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> Data_Analyst</span><br><span class=\"line\">                   <span class=\"keyword\">else</span> <span class=\"string\">&quot;Data Scientist&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> Data_Scientist <span class=\"comment\"># Data Scientist</span></span><br><span class=\"line\">                   <span class=\"keyword\">else</span> <span class=\"string\">&quot;Developer&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> Developer</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"string\">&quot;NotEmployed&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> Not_Employed</span><br><span class=\"line\">                   <span class=\"keyword\">else</span> <span class=\"string\">&quot;Others&quot;</span> </span><br><span class=\"line\">                   <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> df21job_Ea[<span class=\"string\">&#x27;2021&#x27;</span>]]</span><br><span class=\"line\">df21job_Ea.value_counts(<span class=\"string\">&#x27;JOB&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">df20job_Ea.value_counts(<span class=\"string\">&#x27;2020&#x27;</span>)</span><br><span class=\"line\">df20job_Ea[<span class=\"string\">&#x27;JOB&#x27;</span>]=[<span class=\"string\">&quot;Data Analyst&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> Data_Analyst</span><br><span class=\"line\">                   <span class=\"keyword\">else</span> <span class=\"string\">&quot;Data Scientist&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> Data_Scientist </span><br><span class=\"line\">                   <span class=\"keyword\">else</span> <span class=\"string\">&quot;Developer&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> Developer</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"string\">&quot;NotEmployed&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> Not_Employed</span><br><span class=\"line\">                   <span class=\"keyword\">else</span> <span class=\"string\">&quot;Other&quot;</span></span><br><span class=\"line\">                   <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> df20job_Ea[<span class=\"string\">&#x27;2020&#x27;</span>]]</span><br><span class=\"line\">df20job_Ea[[<span class=\"string\">&#x27;2020&#x27;</span>,<span class=\"string\">&#x27;JOB&#x27;</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\">df19job_Ea.value_counts(<span class=\"string\">&#x27;2019&#x27;</span>)</span><br><span class=\"line\">df19job_Ea[<span class=\"string\">&#x27;JOB&#x27;</span>]=[<span class=\"string\">&quot;Data Analyst&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> Data_Analyst</span><br><span class=\"line\">                   <span class=\"keyword\">else</span> <span class=\"string\">&quot;Data Scientist&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> Data_Scientist </span><br><span class=\"line\">                   <span class=\"keyword\">else</span> <span class=\"string\">&quot;Developer&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> Developer</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"string\">&quot;NotEmployed&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> Not_Employed</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"string\">&quot;Other&quot;</span></span><br><span class=\"line\">                   <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> df19job_Ea[<span class=\"string\">&#x27;2019&#x27;</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\">df19jobTest = df19job_Ea.loc[df19job_Ea.JOB == <span class=\"string\">&#x27;Other&#x27;</span>]</span><br><span class=\"line\">df19jobTest[<span class=\"string\">&#x27;2019&#x27;</span>].value_counts()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">df18job_Ea.value_counts(<span class=\"string\">&#x27;2018&#x27;</span>)</span><br><span class=\"line\">df18job_Ea[<span class=\"string\">&#x27;JOB&#x27;</span>]=[<span class=\"string\">&quot;Data Analyst&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> Data_Analyst</span><br><span class=\"line\">                   <span class=\"keyword\">else</span> <span class=\"string\">&quot;Data Scientist&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> Data_Scientist </span><br><span class=\"line\">                   <span class=\"keyword\">else</span> <span class=\"string\">&quot;Developer&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> Developer</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"string\">&quot;NotEmployed&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> Not_Employed</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"string\">&quot;Other&quot;</span></span><br><span class=\"line\">                   <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> df18job_Ea[<span class=\"string\">&#x27;2018&#x27;</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\">df18jobTest = df18job_Ea.loc[df18job_Ea.JOB == <span class=\"string\">&#x27;Other&#x27;</span>]</span><br><span class=\"line\">df18jobTest[<span class=\"string\">&#x27;2018&#x27;</span>].value_counts()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">df17job_Ea.value_counts(<span class=\"string\">&#x27;2017&#x27;</span>)</span><br><span class=\"line\">df17job_Ea[<span class=\"string\">&#x27;JOB&#x27;</span>]=[<span class=\"string\">&quot;Data Analyst&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> Data_Analyst</span><br><span class=\"line\">                   <span class=\"keyword\">else</span> <span class=\"string\">&quot;Data Scientist&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> Data_Scientist </span><br><span class=\"line\">                   <span class=\"keyword\">else</span> <span class=\"string\">&quot;Developer&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> Developer</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"string\">&quot;NotEmployed&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> Not_Employed</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"string\">&quot;Other&quot;</span></span><br><span class=\"line\">                   <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> df17job_Ea[<span class=\"string\">&#x27;2017&#x27;</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\">df17jobTest = df17job_Ea.loc[df17job_Ea.JOB == <span class=\"string\">&#x27;Other&#x27;</span>]</span><br><span class=\"line\">df17jobTest[<span class=\"string\">&#x27;2017&#x27;</span>].value_counts()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">df21jobTest = df21job_Ea.loc[df21job_Ea.JOB == <span class=\"string\">&#x27;Other&#x27;</span>]</span><br><span class=\"line\">df21jobTest[<span class=\"string\">&#x27;2021&#x27;</span>].head()</span><br><span class=\"line\">df21job_Ea.value_counts(<span class=\"string\">&#x27;JOB&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">dfjob21 =df21job_Ea.groupby([<span class=\"string\">&#x27;Q3&#x27;</span>,<span class=\"string\">&#x27;JOB&#x27;</span>]).size().reset_index().rename(columns = &#123;<span class=\"number\">0</span>:<span class=\"string\">&quot;Count&quot;</span>&#125;).rename(columns=&#123;<span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;country&#x27;</span>&#125;)</span><br><span class=\"line\">dfjob20 =df20job_Ea.groupby([<span class=\"string\">&#x27;Q3&#x27;</span>,<span class=\"string\">&#x27;JOB&#x27;</span>]).size().reset_index().rename(columns = &#123;<span class=\"number\">0</span>:<span class=\"string\">&quot;Count&quot;</span>&#125;).rename(columns=&#123;<span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;country&#x27;</span>&#125;)</span><br><span class=\"line\">dfjob19 =df19job_Ea.groupby([<span class=\"string\">&#x27;Q3&#x27;</span>,<span class=\"string\">&#x27;JOB&#x27;</span>]).size().reset_index().rename(columns = &#123;<span class=\"number\">0</span>:<span class=\"string\">&quot;Count&quot;</span>&#125;).rename(columns=&#123;<span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;country&#x27;</span>&#125;)</span><br><span class=\"line\">dfjob18 =df18job_Ea.groupby([<span class=\"string\">&#x27;Q3&#x27;</span>,<span class=\"string\">&#x27;JOB&#x27;</span>]).size().reset_index().rename(columns = &#123;<span class=\"number\">0</span>:<span class=\"string\">&quot;Count&quot;</span>&#125;).rename(columns=&#123;<span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;country&#x27;</span>&#125;)</span><br><span class=\"line\">dfjob17 =df17job_Ea.groupby([<span class=\"string\">&#x27;Country&#x27;</span>,<span class=\"string\">&#x27;JOB&#x27;</span>]).size().reset_index().rename(columns = &#123;<span class=\"number\">0</span>:<span class=\"string\">&quot;Count&quot;</span>&#125;).rename(columns=&#123;<span class=\"string\">&#x27;Country&#x27;</span>:<span class=\"string\">&#x27;country&#x27;</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">df21_Ea_job =df21job_Ea.groupby([<span class=\"string\">&#x27;JOB&#x27;</span>]).size().reset_index().rename(columns = &#123;<span class=\"number\">0</span>:<span class=\"string\">&quot;Count&quot;</span>&#125;)</span><br><span class=\"line\">df20_Ea_job =df20job_Ea.groupby([<span class=\"string\">&#x27;JOB&#x27;</span>]).size().reset_index().rename(columns = &#123;<span class=\"number\">0</span>:<span class=\"string\">&quot;Count&quot;</span>&#125;)</span><br><span class=\"line\">df19_Ea_job =df19job_Ea.groupby([<span class=\"string\">&#x27;JOB&#x27;</span>]).size().reset_index().rename(columns = &#123;<span class=\"number\">0</span>:<span class=\"string\">&quot;Count&quot;</span>&#125;)</span><br><span class=\"line\">df18_Ea_job =df18job_Ea.groupby([<span class=\"string\">&#x27;JOB&#x27;</span>]).size().reset_index().rename(columns = &#123;<span class=\"number\">0</span>:<span class=\"string\">&quot;Count&quot;</span>&#125;)</span><br><span class=\"line\">df17_Ea_job =df17job_Ea.groupby([<span class=\"string\">&#x27;JOB&#x27;</span>]).size().reset_index().rename(columns = &#123;<span class=\"number\">0</span>:<span class=\"string\">&quot;Count&quot;</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">df21_DA=df21[df21[<span class=\"string\">&#x27;Q5&#x27;</span>].isin(Data_Analyst)]</span><br><span class=\"line\">df21_DS=df21[df21[<span class=\"string\">&#x27;Q5&#x27;</span>].isin(Data_Scientist)]</span><br><span class=\"line\">df21_D=df21[df21[<span class=\"string\">&#x27;Q5&#x27;</span>].isin(Developer)]</span><br><span class=\"line\">df21_N=df21[df21[<span class=\"string\">&#x27;Q5&#x27;</span>].isin(Not_Employed)]</span><br><span class=\"line\">df21_O=df21[df21[<span class=\"string\">&#x27;Q5&#x27;</span>].isin(Others)]</span><br><span class=\"line\"></span><br><span class=\"line\">World_ = np.array([df21_DA[<span class=\"string\">&#x27;Q5&#x27;</span>].count(), df21_DS[<span class=\"string\">&#x27;Q5&#x27;</span>].count(), df21_D[<span class=\"string\">&#x27;Q5&#x27;</span>].count(), df21_N[<span class=\"string\">&#x27;Q5&#x27;</span>].count(), df21_O[<span class=\"string\">&#x27;Q5&#x27;</span>].count()]) </span><br><span class=\"line\">East_Asia_ = df21_Ea_job[<span class=\"string\">&#x27;Count&#x27;</span>].to_numpy()</span><br><span class=\"line\">World =((World_/World_.<span class=\"built_in\">sum</span>())*<span class=\"number\">100</span>).<span class=\"built_in\">round</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">East_Asia =((East_Asia_/East_Asia_.<span class=\"built_in\">sum</span>())*<span class=\"number\">100</span>).<span class=\"built_in\">round</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">y = df21_Ea_job.JOB.to_numpy()</span><br><span class=\"line\"></span><br><span class=\"line\">fig = go.Figure(data=[</span><br><span class=\"line\">    go.Bar(y=y, x=World, orientation=<span class=\"string\">&#x27;h&#x27;</span>, name=<span class=\"string\">&quot;World&quot;</span>, base=<span class=\"number\">0</span>, hovertemplate=<span class=\"string\">&#x27;&lt;b&gt;World&lt;/b&gt;: %&#123;x&#125;%&lt;br&gt;&#x27;</span>, marker_color=<span class=\"string\">&#x27;#979DA6&#x27;</span>, text=World, textposition=<span class=\"string\">&#x27;outside&#x27;</span>),</span><br><span class=\"line\">    go.Bar(y=y, x=-East_Asia, orientation=<span class=\"string\">&#x27;h&#x27;</span>, name=<span class=\"string\">&quot;East Asia&quot;</span>, base=<span class=\"number\">0</span>, hovertemplate=<span class=\"string\">&#x27;&lt;b&gt;East Asia&lt;/b&gt;: %&#123;x&#125;%&lt;br&gt;&#x27;</span>, marker_color=<span class=\"string\">&#x27;#F2D64B&#x27;</span>, text=East_Asia, textposition=<span class=\"string\">&#x27;outside&#x27;</span>)])</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(barmode=<span class=\"string\">&#x27;stack&#x27;</span>)</span><br><span class=\"line\">fig.update_layout(title=<span class=\"string\">&#x27;&lt;b&gt;World vs EastAsia&lt;/b&gt;&#x27;</span>,title_font_size=<span class=\"number\">22</span>,</span><br><span class=\"line\">                  margin = <span class=\"built_in\">dict</span>(t=<span class=\"number\">200</span>, l=<span class=\"number\">100</span>, r=<span class=\"number\">50</span>, b=<span class=\"number\">200</span>),</span><br><span class=\"line\">                  height=<span class=\"number\">700</span>, width=<span class=\"number\">750</span>,</span><br><span class=\"line\">                  xaxis_title=<span class=\"literal\">None</span>,</span><br><span class=\"line\">                  yaxis_title=<span class=\"literal\">None</span>)</span><br><span class=\"line\">fig.update_xaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\">fig.update_yaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\">fig.update_layout(legend=<span class=\"built_in\">dict</span>(</span><br><span class=\"line\">    orientation=<span class=\"string\">&quot;h&quot;</span>,</span><br><span class=\"line\">    yanchor=<span class=\"string\">&quot;bottom&quot;</span>,</span><br><span class=\"line\">    y=<span class=\"number\">1.1</span>,</span><br><span class=\"line\">    xanchor=<span class=\"string\">&quot;right&quot;</span>,</span><br><span class=\"line\">    x=<span class=\"number\">1</span>))</span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">14</span>),</span><br><span class=\"line\">                                    x=<span class=\"number\">0.8</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.5</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;@green_yhjw&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n\n<h2> World Job Ratio: Heat Map </h2> \n\n<p>The trend of increasing each job except Others. <br><br>Data Scientist has a high proportion, and the trend is to increase further in 2022. <br></p>\n<h2> East Asia Job Ratio: Heat Map </h2> \nEast Asia : Increasing the ratio of data scientist. <br>\n\n<p><img src=\"/images/kaggle_final/newplot8.png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#data preprocessing</span></span><br><span class=\"line\">df21job= df21.loc[:,[<span class=\"string\">&#x27;region&#x27;</span>,<span class=\"string\">&#x27;Q5&#x27;</span>]].rename(columns=&#123;<span class=\"string\">&#x27;Q5&#x27;</span>:<span class=\"string\">&#x27;2021&#x27;</span>&#125;).fillna(<span class=\"string\">&#x27;Others&#x27;</span>)</span><br><span class=\"line\">df20job= df20.loc[:,[<span class=\"string\">&#x27;region&#x27;</span>,<span class=\"string\">&#x27;Q5&#x27;</span>]].rename(columns=&#123;<span class=\"string\">&#x27;Q5&#x27;</span>:<span class=\"string\">&#x27;2020&#x27;</span>&#125;).fillna(<span class=\"string\">&#x27;Others&#x27;</span>)</span><br><span class=\"line\">df19job= df19.loc[:,[<span class=\"string\">&#x27;region&#x27;</span>,<span class=\"string\">&#x27;Q5&#x27;</span>]].rename(columns=&#123;<span class=\"string\">&#x27;Q5&#x27;</span>:<span class=\"string\">&#x27;2019&#x27;</span>&#125;).fillna(<span class=\"string\">&#x27;Others&#x27;</span>)</span><br><span class=\"line\">df18job= df18.loc[:,[<span class=\"string\">&#x27;region&#x27;</span>,<span class=\"string\">&#x27;Q6&#x27;</span>]].rename(columns=&#123; <span class=\"string\">&#x27;Q6&#x27;</span>:<span class=\"string\">&#x27;2018&#x27;</span>&#125;).fillna(<span class=\"string\">&#x27;Others&#x27;</span>)</span><br><span class=\"line\">df17job= df17.loc[:,[<span class=\"string\">&#x27;region&#x27;</span>,<span class=\"string\">&#x27;CurrentJobTitleSelect&#x27;</span>]].rename(columns=&#123;<span class=\"string\">&#x27;CurrentJobTitleSelect&#x27;</span>:<span class=\"string\">&#x27;2017&#x27;</span>&#125;).fillna(<span class=\"string\">&#x27;Others&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">df21job[<span class=\"string\">&#x27;JOB&#x27;</span>]=[<span class=\"string\">&quot;Data Analyst&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> Data_Analyst</span><br><span class=\"line\">                   <span class=\"keyword\">else</span> <span class=\"string\">&quot;Data Scientist&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> Data_Scientist <span class=\"comment\"># Data Scientist</span></span><br><span class=\"line\">                   <span class=\"keyword\">else</span> <span class=\"string\">&quot;Developer&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> Developer</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"string\">&quot;NotEmployed&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> Not_Employed</span><br><span class=\"line\">                   <span class=\"keyword\">else</span> <span class=\"string\">&quot;Others&quot;</span> </span><br><span class=\"line\">                   <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> df21job[<span class=\"string\">&#x27;2021&#x27;</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">df20job[<span class=\"string\">&#x27;JOB&#x27;</span>]=[<span class=\"string\">&quot;Data Analyst&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> Data_Analyst</span><br><span class=\"line\">                   <span class=\"keyword\">else</span> <span class=\"string\">&quot;Data Scientist&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> Data_Scientist </span><br><span class=\"line\">                   <span class=\"keyword\">else</span> <span class=\"string\">&quot;Developer&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> Developer</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"string\">&quot;NotEmployed&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> Not_Employed</span><br><span class=\"line\">                   <span class=\"keyword\">else</span> <span class=\"string\">&quot;Others&quot;</span></span><br><span class=\"line\">                   <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> df20job[<span class=\"string\">&#x27;2020&#x27;</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">df19job[<span class=\"string\">&#x27;JOB&#x27;</span>]=[<span class=\"string\">&quot;Data Analyst&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> Data_Analyst</span><br><span class=\"line\">                   <span class=\"keyword\">else</span> <span class=\"string\">&quot;Data Scientist&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> Data_Scientist </span><br><span class=\"line\">                   <span class=\"keyword\">else</span> <span class=\"string\">&quot;Developer&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> Developer</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"string\">&quot;NotEmployed&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> Not_Employed</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"string\">&quot;Others&quot;</span></span><br><span class=\"line\">                   <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> df19job[<span class=\"string\">&#x27;2019&#x27;</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">df18job[<span class=\"string\">&#x27;JOB&#x27;</span>]=[<span class=\"string\">&quot;Data Analyst&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> Data_Analyst</span><br><span class=\"line\">                   <span class=\"keyword\">else</span> <span class=\"string\">&quot;Data Scientist&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> Data_Scientist </span><br><span class=\"line\">                   <span class=\"keyword\">else</span> <span class=\"string\">&quot;Developer&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> Developer</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"string\">&quot;NotEmployed&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> Not_Employed</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"string\">&quot;Others&quot;</span></span><br><span class=\"line\">                   <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> df18job[<span class=\"string\">&#x27;2018&#x27;</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">df17job[<span class=\"string\">&#x27;JOB&#x27;</span>]=[<span class=\"string\">&quot;Data Analyst&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> Data_Analyst</span><br><span class=\"line\">                   <span class=\"keyword\">else</span> <span class=\"string\">&quot;Data Scientist&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> Data_Scientist </span><br><span class=\"line\">                   <span class=\"keyword\">else</span> <span class=\"string\">&quot;Developer&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> Developer</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"string\">&quot;NotEmployed&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> Not_Employed</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"string\">&quot;Others&quot;</span></span><br><span class=\"line\">                   <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> df17job[<span class=\"string\">&#x27;2017&#x27;</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\">df21_job =df21job.groupby([<span class=\"string\">&#x27;JOB&#x27;</span>]).size().reset_index().rename(columns = &#123;<span class=\"number\">0</span>:<span class=\"string\">&quot;Count&quot;</span>&#125;)</span><br><span class=\"line\">df20_job =df20job.groupby([<span class=\"string\">&#x27;JOB&#x27;</span>]).size().reset_index().rename(columns = &#123;<span class=\"number\">0</span>:<span class=\"string\">&quot;Count&quot;</span>&#125;)</span><br><span class=\"line\">df19_job =df19job.groupby([<span class=\"string\">&#x27;JOB&#x27;</span>]).size().reset_index().rename(columns = &#123;<span class=\"number\">0</span>:<span class=\"string\">&quot;Count&quot;</span>&#125;)</span><br><span class=\"line\">df18_job =df18job.groupby([<span class=\"string\">&#x27;JOB&#x27;</span>]).size().reset_index().rename(columns = &#123;<span class=\"number\">0</span>:<span class=\"string\">&quot;Count&quot;</span>&#125;)</span><br><span class=\"line\">df17_job =df17job.groupby([<span class=\"string\">&#x27;JOB&#x27;</span>]).size().reset_index().rename(columns = &#123;<span class=\"number\">0</span>:<span class=\"string\">&quot;Count&quot;</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">merge11=pd.merge(df21_job,df20_job, how=<span class=\"string\">&#x27;outer&#x27;</span>,on=<span class=\"string\">&#x27;JOB&#x27;</span>)</span><br><span class=\"line\">merge21=pd.merge(df19_job,df18_job, how=<span class=\"string\">&#x27;outer&#x27;</span>,on=<span class=\"string\">&#x27;JOB&#x27;</span>)</span><br><span class=\"line\">merge31=pd.merge(merge11,merge21, how=<span class=\"string\">&#x27;outer&#x27;</span>,on=<span class=\"string\">&#x27;JOB&#x27;</span>)</span><br><span class=\"line\">merge_Wo=(pd.merge(merge31,df17_job, how=<span class=\"string\">&#x27;outer&#x27;</span>,on=<span class=\"string\">&#x27;JOB&#x27;</span>)</span><br><span class=\"line\">            .rename(columns = &#123;<span class=\"string\">&#x27;Count_x_x&#x27;</span>:<span class=\"string\">&#x27;2021&#x27;</span>,<span class=\"string\">&#x27;Count_y_x&#x27;</span>:<span class=\"string\">&#x27;2020&#x27;</span>,<span class=\"string\">&#x27;Count_x_y&#x27;</span>:<span class=\"string\">&#x27;2019&#x27;</span>,<span class=\"string\">&#x27;Count_y_y&#x27;</span>:<span class=\"string\">&#x27;2018&#x27;</span>,<span class=\"string\">&#x27;Count&#x27;</span>:<span class=\"string\">&#x27;2017&#x27;</span>&#125;).fillna(<span class=\"number\">0</span>)</span><br><span class=\"line\">            .reindex(columns = [<span class=\"string\">&#x27;JOB&#x27;</span>,<span class=\"string\">&#x27;2017&#x27;</span>,<span class=\"string\">&#x27;2018&#x27;</span>,<span class=\"string\">&#x27;2019&#x27;</span>,<span class=\"string\">&#x27;2020&#x27;</span>,<span class=\"string\">&#x27;2021&#x27;</span> ]))</span><br><span class=\"line\"></span><br><span class=\"line\">df21job_Ea = df21job[df21job[<span class=\"string\">&#x27;region&#x27;</span>] == <span class=\"string\">&#x27;EastAsia&#x27;</span>].loc[:,[<span class=\"string\">&#x27;region&#x27;</span>,<span class=\"string\">&#x27;JOB&#x27;</span>]].rename(columns=&#123;<span class=\"string\">&#x27;region&#x27;</span>:<span class=\"string\">&#x27;EastAsia&#x27;</span>&#125;)</span><br><span class=\"line\">df20job_Ea = df20job[df20job[<span class=\"string\">&#x27;region&#x27;</span>] == <span class=\"string\">&#x27;EastAsia&#x27;</span>].loc[:,[<span class=\"string\">&#x27;region&#x27;</span>,<span class=\"string\">&#x27;JOB&#x27;</span>]].rename(columns=&#123;<span class=\"string\">&#x27;region&#x27;</span>:<span class=\"string\">&#x27;EastAsia&#x27;</span>&#125;)</span><br><span class=\"line\">df19job_Ea = df19job[df19job[<span class=\"string\">&#x27;region&#x27;</span>] == <span class=\"string\">&#x27;EastAsia&#x27;</span>].loc[:,[<span class=\"string\">&#x27;region&#x27;</span>,<span class=\"string\">&#x27;JOB&#x27;</span>]].rename(columns=&#123;<span class=\"string\">&#x27;region&#x27;</span>:<span class=\"string\">&#x27;EastAsia&#x27;</span>&#125;)</span><br><span class=\"line\">df18job_Ea = df18job[df18job[<span class=\"string\">&#x27;region&#x27;</span>] == <span class=\"string\">&#x27;EastAsia&#x27;</span>].loc[:,[<span class=\"string\">&#x27;region&#x27;</span>,<span class=\"string\">&#x27;JOB&#x27;</span>]].rename(columns=&#123;<span class=\"string\">&#x27;region&#x27;</span>:<span class=\"string\">&#x27;EastAsia&#x27;</span>&#125;)</span><br><span class=\"line\">df17job_Ea = df17job[df17job[<span class=\"string\">&#x27;region&#x27;</span>] == <span class=\"string\">&#x27;EastAsia&#x27;</span>].loc[:,[<span class=\"string\">&#x27;region&#x27;</span>,<span class=\"string\">&#x27;JOB&#x27;</span>]].rename(columns=&#123;<span class=\"string\">&#x27;region&#x27;</span>:<span class=\"string\">&#x27;EastAsia&#x27;</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">df21job_Ea =df21job_Ea.groupby([<span class=\"string\">&#x27;JOB&#x27;</span>]).size().reset_index().rename(columns = &#123;<span class=\"number\">0</span>:<span class=\"string\">&quot;Count&quot;</span>&#125;)</span><br><span class=\"line\">df20job_Ea =df20job_Ea.groupby([<span class=\"string\">&#x27;JOB&#x27;</span>]).size().reset_index().rename(columns = &#123;<span class=\"number\">0</span>:<span class=\"string\">&quot;Count&quot;</span>&#125;)</span><br><span class=\"line\">df19job_Ea =df19job_Ea.groupby([<span class=\"string\">&#x27;JOB&#x27;</span>]).size().reset_index().rename(columns = &#123;<span class=\"number\">0</span>:<span class=\"string\">&quot;Count&quot;</span>&#125;)</span><br><span class=\"line\">df18job_Ea =df18job_Ea.groupby([<span class=\"string\">&#x27;JOB&#x27;</span>]).size().reset_index().rename(columns = &#123;<span class=\"number\">0</span>:<span class=\"string\">&quot;Count&quot;</span>&#125;)</span><br><span class=\"line\">df17job_Ea =df17job_Ea.groupby([<span class=\"string\">&#x27;JOB&#x27;</span>]).size().reset_index().rename(columns = &#123;<span class=\"number\">0</span>:<span class=\"string\">&quot;Count&quot;</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">merge1=pd.merge(df21job_Ea,df20job_Ea, how=<span class=\"string\">&#x27;outer&#x27;</span>,on=<span class=\"string\">&#x27;JOB&#x27;</span>)</span><br><span class=\"line\">merge2=pd.merge(df19job_Ea,df18job_Ea, how=<span class=\"string\">&#x27;outer&#x27;</span>,on=<span class=\"string\">&#x27;JOB&#x27;</span>)</span><br><span class=\"line\">merge3=pd.merge(merge1,merge2, how=<span class=\"string\">&#x27;outer&#x27;</span>,on=<span class=\"string\">&#x27;JOB&#x27;</span>)</span><br><span class=\"line\">merge=(pd.merge(merge3,df17job_Ea, how=<span class=\"string\">&#x27;outer&#x27;</span>,on=<span class=\"string\">&#x27;JOB&#x27;</span>)</span><br><span class=\"line\">         .rename(columns = &#123;<span class=\"string\">&#x27;Count_x_x&#x27;</span>:<span class=\"string\">&#x27;2021&#x27;</span>,<span class=\"string\">&#x27;Count_y_x&#x27;</span>:<span class=\"string\">&#x27;2020&#x27;</span>,<span class=\"string\">&#x27;Count_x_y&#x27;</span>:<span class=\"string\">&#x27;2019&#x27;</span>,<span class=\"string\">&#x27;Count_y_y&#x27;</span>:<span class=\"string\">&#x27;2018&#x27;</span>,<span class=\"string\">&#x27;Count&#x27;</span>:<span class=\"string\">&#x27;2017&#x27;</span>&#125;).fillna(<span class=\"number\">0</span>)</span><br><span class=\"line\">         .reindex(columns = [<span class=\"string\">&#x27;JOB&#x27;</span>,<span class=\"string\">&#x27;2017&#x27;</span>,<span class=\"string\">&#x27;2018&#x27;</span>,<span class=\"string\">&#x27;2019&#x27;</span>,<span class=\"string\">&#x27;2020&#x27;</span>,<span class=\"string\">&#x27;2021&#x27;</span> ]))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#graph</span></span><br><span class=\"line\">z1=((merge_Wo.iloc[:,[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]].to_numpy()/merge_Wo.iloc[:,[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]].to_numpy().<span class=\"built_in\">sum</span>())*<span class=\"number\">100</span>).<span class=\"built_in\">round</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">z2=((merge.iloc[:,[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]].to_numpy()/merge.iloc[:,[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]].to_numpy().<span class=\"built_in\">sum</span>())*<span class=\"number\">100</span>).<span class=\"built_in\">round</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">x=[<span class=\"string\">&#x27;2017-year&#x27;</span>,<span class=\"string\">&#x27;2018-year&#x27;</span>,<span class=\"string\">&#x27;2019-year&#x27;</span>,<span class=\"string\">&#x27;2020-year&#x27;</span>,<span class=\"string\">&#x27;2021-year&#x27;</span>]</span><br><span class=\"line\">y1=merge_Wo[<span class=\"string\">&#x27;JOB&#x27;</span>].tolist()</span><br><span class=\"line\">y2=merge[<span class=\"string\">&#x27;JOB&#x27;</span>].tolist()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">fig1 = ff.create_annotated_heatmap(z1, x = x, y = y1, colorscale=<span class=\"string\">&#x27;sunset&#x27;</span>)</span><br><span class=\"line\">fig2 = ff.create_annotated_heatmap(z2, x = x, y = y2, colorscale=<span class=\"string\">&#x27;sunset&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> annot <span class=\"keyword\">in</span> fig2[<span class=\"string\">&#x27;layout&#x27;</span>][<span class=\"string\">&#x27;annotations&#x27;</span>]:</span><br><span class=\"line\">    annot[<span class=\"string\">&#x27;xref&#x27;</span>] = <span class=\"string\">&#x27;x2&#x27;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">fig = make_subplots(rows=<span class=\"number\">1</span>, cols=<span class=\"number\">2</span>)</span><br><span class=\"line\">fig.add_trace(fig1.data[<span class=\"number\">0</span>], row=<span class=\"number\">1</span>, col=<span class=\"number\">1</span>)</span><br><span class=\"line\">fig.add_trace(fig2.data[<span class=\"number\">0</span>], row=<span class=\"number\">1</span>, col=<span class=\"number\">2</span>)</span><br><span class=\"line\">fig.update_layout(fig1.layout, title=<span class=\"string\">&#x27;&lt;b&gt;           World vs EastAsia&lt;/b&gt;&#x27;</span>,title_font_size=<span class=\"number\">22</span>,</span><br><span class=\"line\">                  margin = <span class=\"built_in\">dict</span>(t=<span class=\"number\">200</span>, l=<span class=\"number\">100</span>, r=<span class=\"number\">10</span>, b=<span class=\"number\">200</span>),</span><br><span class=\"line\">                  height=<span class=\"number\">700</span>, width=<span class=\"number\">1150</span>, coloraxis=<span class=\"built_in\">dict</span>(showscale=<span class=\"literal\">True</span>, colorscale=<span class=\"string\">&#x27;sunset&#x27;</span>))</span><br><span class=\"line\">fig.update_traces(hovertemplate=<span class=\"string\">&#x27;&lt;b&gt;Job&lt;/b&gt;: %&#123;y&#125;&lt;br&gt;&#x27;</span>+</span><br><span class=\"line\">                                <span class=\"string\">&#x27;&lt;b&gt;Year&lt;/b&gt;: %&#123;x&#125;&lt;br&gt;&#x27;</span>+</span><br><span class=\"line\">                                <span class=\"string\">&#x27;&lt;b&gt;Percent&lt;/b&gt;: %&#123;z&#125;%&#x27;</span>)</span><br><span class=\"line\">fig.layout.annotations += fig2.layout.annotations</span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">14</span>),</span><br><span class=\"line\">                                    x=<span class=\"number\">0.9</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.25</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;@green_yhjw&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-1-4-Age-transformation\"><a href=\"#3-1-4-Age-transformation\" class=\"headerlink\" title=\"3.1.4 Age transformation\"></a>3.1.4 Age transformation</h1><hr>\n<h2> > Age change in World and East Asia by year: Stacked scatter plot </h2>\n\n<ol>\n<li>In the case of Age data, there is no 2017 data.</li>\n<li>70% of the World respondents said 20s to 30s.</li>\n<li>70% of East Asia respondents said 20s to 30s.</li>\n<li>The number of respondents increases, but the ratio seems to have stabilized.</li>\n</ol>\n<p><img src=\"/images/kaggle_final/newplot9.png\"><br><img src=\"/images/kaggle_final/newplot10.png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#data preprocessing</span></span><br><span class=\"line\"><span class=\"comment\">#World</span></span><br><span class=\"line\">Age21_W = df21.loc[:,[<span class=\"string\">&#x27;Q3&#x27;</span>,<span class=\"string\">&#x27;Q1&#x27;</span>, <span class=\"string\">&#x27;year&#x27;</span>]].reset_index().rename(columns=&#123;<span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;East_Asia&#x27;</span>, <span class=\"string\">&#x27;Q1&#x27;</span>:<span class=\"string\">&#x27;age&#x27;</span>&#125;).fillna(<span class=\"string\">&#x27;etc&#x27;</span>)</span><br><span class=\"line\">Age20_W = df20.loc[:,[<span class=\"string\">&#x27;Q3&#x27;</span>,<span class=\"string\">&#x27;Q1&#x27;</span>,<span class=\"string\">&#x27;year&#x27;</span>]].reset_index().rename(columns=&#123;<span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;East_Asia&#x27;</span>, <span class=\"string\">&#x27;Q1&#x27;</span>:<span class=\"string\">&#x27;age&#x27;</span>&#125;).fillna(<span class=\"string\">&#x27;etc&#x27;</span>)</span><br><span class=\"line\">Age19_W = df19.loc[:,[<span class=\"string\">&#x27;Q3&#x27;</span>,<span class=\"string\">&#x27;Q1&#x27;</span>,<span class=\"string\">&#x27;year&#x27;</span>]].reset_index().rename(columns=&#123;<span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;East_Asia&#x27;</span>, <span class=\"string\">&#x27;Q1&#x27;</span>:<span class=\"string\">&#x27;age&#x27;</span>&#125;).fillna(<span class=\"string\">&#x27;etc&#x27;</span>)</span><br><span class=\"line\">Age18_W = df18.loc[:,[<span class=\"string\">&#x27;Q3&#x27;</span>,<span class=\"string\">&#x27;Q2&#x27;</span>,<span class=\"string\">&#x27;year&#x27;</span>]].reset_index().rename(columns=&#123;<span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;East_Asia&#x27;</span>, <span class=\"string\">&#x27;Q2&#x27;</span>:<span class=\"string\">&#x27;age&#x27;</span>&#125;).fillna(<span class=\"string\">&#x27;etc&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">Age5y_W= pd.concat([Age21_W, Age20_W, Age19_W, Age18_W])</span><br><span class=\"line\">Age5y_W= (Age5y_W.replace([<span class=\"string\">&#x27;60-69&#x27;</span>, <span class=\"string\">&#x27;70+&#x27;</span>, <span class=\"string\">&#x27;70-79&#x27;</span>, <span class=\"string\">&#x27;80+&#x27;</span>], <span class=\"string\">&#x27;60+&#x27;</span>)</span><br><span class=\"line\">           .replace([<span class=\"string\">&#x27;22-24&#x27;</span>, <span class=\"string\">&#x27;25-29&#x27;</span>], <span class=\"string\">&#x27;22-29&#x27;</span>)</span><br><span class=\"line\">           .replace([<span class=\"string\">&#x27;30-34&#x27;</span>, <span class=\"string\">&#x27;35-39&#x27;</span>], <span class=\"string\">&#x27;30-39&#x27;</span>)</span><br><span class=\"line\">            .replace([<span class=\"string\">&#x27;40-44&#x27;</span>, <span class=\"string\">&#x27;45-49&#x27;</span>], <span class=\"string\">&#x27;40-49&#x27;</span>)</span><br><span class=\"line\">        .replace([<span class=\"string\">&#x27;50-54&#x27;</span>, <span class=\"string\">&#x27;55-59&#x27;</span>], <span class=\"string\">&#x27;50-59&#x27;</span>)</span><br><span class=\"line\">           .groupby([<span class=\"string\">&#x27;year&#x27;</span>, <span class=\"string\">&#x27;age&#x27;</span>])</span><br><span class=\"line\">           .size()</span><br><span class=\"line\">           .reset_index()</span><br><span class=\"line\">           .rename(columns = &#123;<span class=\"number\">0</span>:<span class=\"string\">&quot;Count&quot;</span>&#125;))</span><br><span class=\"line\"></span><br><span class=\"line\">Age21_percent_W = Age5y_W[Age5y_W[<span class=\"string\">&#x27;year&#x27;</span>] == <span class=\"string\">&quot;2021&quot;</span>].reset_index(drop = <span class=\"literal\">True</span>)</span><br><span class=\"line\">Age21_percent_W[<span class=\"string\">&#x27;percentage&#x27;</span>] = Age21_percent_W[<span class=\"string\">&quot;Count&quot;</span>] / Age21_percent_W[<span class=\"string\">&quot;Count&quot;</span>].<span class=\"built_in\">sum</span>()</span><br><span class=\"line\">Age21_percent_W[<span class=\"string\">&#x27;%&#x27;</span>] = np.<span class=\"built_in\">round</span>(Age21_percent_W[<span class=\"string\">&#x27;percentage&#x27;</span>] * <span class=\"number\">100</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">Age20_percent_W = Age5y_W[Age5y_W[<span class=\"string\">&#x27;year&#x27;</span>] == <span class=\"string\">&quot;2020&quot;</span>].reset_index(drop = <span class=\"literal\">True</span>)</span><br><span class=\"line\">Age20_percent_W[<span class=\"string\">&#x27;percentage&#x27;</span>] = Age20_percent_W[<span class=\"string\">&quot;Count&quot;</span>] / Age20_percent_W[<span class=\"string\">&quot;Count&quot;</span>].<span class=\"built_in\">sum</span>()</span><br><span class=\"line\">Age20_percent_W[<span class=\"string\">&#x27;%&#x27;</span>] = np.<span class=\"built_in\">round</span>(Age20_percent_W[<span class=\"string\">&#x27;percentage&#x27;</span>] * <span class=\"number\">100</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">Age19_percent_W = Age5y_W[Age5y_W[<span class=\"string\">&#x27;year&#x27;</span>] == <span class=\"string\">&quot;2019&quot;</span>].reset_index(drop = <span class=\"literal\">True</span>)</span><br><span class=\"line\">Age19_percent_W[<span class=\"string\">&#x27;percentage&#x27;</span>] = Age19_percent_W[<span class=\"string\">&quot;Count&quot;</span>] / Age19_percent_W[<span class=\"string\">&quot;Count&quot;</span>].<span class=\"built_in\">sum</span>()</span><br><span class=\"line\">Age19_percent_W[<span class=\"string\">&#x27;%&#x27;</span>] = np.<span class=\"built_in\">round</span>(Age19_percent_W[<span class=\"string\">&#x27;percentage&#x27;</span>] * <span class=\"number\">100</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">Age18_percent_W = Age5y_W[Age5y_W[<span class=\"string\">&#x27;year&#x27;</span>] == <span class=\"string\">&quot;2018&quot;</span>].reset_index(drop = <span class=\"literal\">True</span>)</span><br><span class=\"line\">Age18_percent_W[<span class=\"string\">&#x27;percentage&#x27;</span>] = Age18_percent_W[<span class=\"string\">&quot;Count&quot;</span>] / Age18_percent_W[<span class=\"string\">&quot;Count&quot;</span>].<span class=\"built_in\">sum</span>()</span><br><span class=\"line\">Age18_percent_W[<span class=\"string\">&#x27;%&#x27;</span>] = np.<span class=\"built_in\">round</span>(Age18_percent_W[<span class=\"string\">&#x27;percentage&#x27;</span>] * <span class=\"number\">100</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">Age5y_percent_W = pd.concat([Age18_percent_W, Age19_percent_W, Age20_percent_W, Age21_percent_W], ignore_index = <span class=\"literal\">True</span>)</span><br><span class=\"line\">Age5y_percent_W= pd.pivot(Age5y_percent_W, index = <span class=\"string\">&quot;year&quot;</span>, columns = <span class=\"string\">&#x27;age&#x27;</span>, values = <span class=\"string\">&quot;%&quot;</span>).reset_index()</span><br><span class=\"line\">Age5y_percent_W</span><br><span class=\"line\"></span><br><span class=\"line\">Age21 = df21_Ea.loc[:,[<span class=\"string\">&#x27;Q3&#x27;</span>,<span class=\"string\">&#x27;Q1&#x27;</span>, <span class=\"string\">&#x27;year&#x27;</span>]].reset_index().rename(columns=&#123;<span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;East_Asia&#x27;</span>, <span class=\"string\">&#x27;Q1&#x27;</span>:<span class=\"string\">&#x27;age&#x27;</span>&#125;).fillna(<span class=\"string\">&#x27;etc&#x27;</span>)</span><br><span class=\"line\">Age20 = df20_Ea.loc[:,[<span class=\"string\">&#x27;Q3&#x27;</span>,<span class=\"string\">&#x27;Q1&#x27;</span>,<span class=\"string\">&#x27;year&#x27;</span>]].reset_index().rename(columns=&#123;<span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;East_Asia&#x27;</span>, <span class=\"string\">&#x27;Q1&#x27;</span>:<span class=\"string\">&#x27;age&#x27;</span>&#125;).fillna(<span class=\"string\">&#x27;etc&#x27;</span>)</span><br><span class=\"line\">Age19 = df19_Ea.loc[:,[<span class=\"string\">&#x27;Q3&#x27;</span>,<span class=\"string\">&#x27;Q1&#x27;</span>,<span class=\"string\">&#x27;year&#x27;</span>]].reset_index().rename(columns=&#123;<span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;East_Asia&#x27;</span>, <span class=\"string\">&#x27;Q1&#x27;</span>:<span class=\"string\">&#x27;age&#x27;</span>&#125;).fillna(<span class=\"string\">&#x27;etc&#x27;</span>)</span><br><span class=\"line\">Age18 = df18_Ea.loc[:,[<span class=\"string\">&#x27;Q3&#x27;</span>,<span class=\"string\">&#x27;Q2&#x27;</span>,<span class=\"string\">&#x27;year&#x27;</span>]].reset_index().rename(columns=&#123;<span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;East_Asia&#x27;</span>, <span class=\"string\">&#x27;Q2&#x27;</span>:<span class=\"string\">&#x27;age&#x27;</span>&#125;).fillna(<span class=\"string\">&#x27;etc&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">Age5y= pd.concat([Age21, Age20, Age19, Age18])</span><br><span class=\"line\">Age5y= (Age5y.replace([<span class=\"string\">&#x27;60-69&#x27;</span>, <span class=\"string\">&#x27;70+&#x27;</span>, <span class=\"string\">&#x27;70-79&#x27;</span>, <span class=\"string\">&#x27;80+&#x27;</span>], <span class=\"string\">&#x27;60+&#x27;</span>)</span><br><span class=\"line\">           .replace([<span class=\"string\">&#x27;22-24&#x27;</span>, <span class=\"string\">&#x27;25-29&#x27;</span>], <span class=\"string\">&#x27;22-29&#x27;</span>)</span><br><span class=\"line\">           .replace([<span class=\"string\">&#x27;30-34&#x27;</span>, <span class=\"string\">&#x27;35-39&#x27;</span>], <span class=\"string\">&#x27;30-39&#x27;</span>)</span><br><span class=\"line\">            .replace([<span class=\"string\">&#x27;40-44&#x27;</span>, <span class=\"string\">&#x27;45-49&#x27;</span>], <span class=\"string\">&#x27;40-49&#x27;</span>)</span><br><span class=\"line\">        .replace([<span class=\"string\">&#x27;50-54&#x27;</span>, <span class=\"string\">&#x27;55-59&#x27;</span>], <span class=\"string\">&#x27;50-59&#x27;</span>)</span><br><span class=\"line\">           .groupby([<span class=\"string\">&#x27;year&#x27;</span>, <span class=\"string\">&#x27;age&#x27;</span>])</span><br><span class=\"line\">           .size()</span><br><span class=\"line\">           .reset_index()</span><br><span class=\"line\">           .rename(columns = &#123;<span class=\"number\">0</span>:<span class=\"string\">&quot;Count&quot;</span>&#125;))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#EastAsia</span></span><br><span class=\"line\">Age21_percent = Age5y[Age5y[<span class=\"string\">&#x27;year&#x27;</span>] == <span class=\"string\">&quot;2021&quot;</span>].reset_index(drop = <span class=\"literal\">True</span>)</span><br><span class=\"line\">Age21_percent[<span class=\"string\">&#x27;percentage&#x27;</span>] = Age21_percent[<span class=\"string\">&quot;Count&quot;</span>] / Age21_percent[<span class=\"string\">&quot;Count&quot;</span>].<span class=\"built_in\">sum</span>()</span><br><span class=\"line\">Age21_percent[<span class=\"string\">&#x27;%&#x27;</span>] = np.<span class=\"built_in\">round</span>(Age21_percent[<span class=\"string\">&#x27;percentage&#x27;</span>] * <span class=\"number\">100</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">Age21_percent</span><br><span class=\"line\"></span><br><span class=\"line\">Age20_percent = Age5y[Age5y[<span class=\"string\">&#x27;year&#x27;</span>] == <span class=\"string\">&quot;2020&quot;</span>].reset_index(drop = <span class=\"literal\">True</span>)</span><br><span class=\"line\">Age20_percent[<span class=\"string\">&#x27;percentage&#x27;</span>] = Age20_percent[<span class=\"string\">&quot;Count&quot;</span>] / Age20_percent[<span class=\"string\">&quot;Count&quot;</span>].<span class=\"built_in\">sum</span>()</span><br><span class=\"line\">Age20_percent[<span class=\"string\">&#x27;%&#x27;</span>] = np.<span class=\"built_in\">round</span>(Age20_percent[<span class=\"string\">&#x27;percentage&#x27;</span>] * <span class=\"number\">100</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">Age20_percent</span><br><span class=\"line\"></span><br><span class=\"line\">Age19_percent = Age5y[Age5y[<span class=\"string\">&#x27;year&#x27;</span>] == <span class=\"string\">&quot;2019&quot;</span>].reset_index(drop = <span class=\"literal\">True</span>)</span><br><span class=\"line\">Age19_percent[<span class=\"string\">&#x27;percentage&#x27;</span>] = Age19_percent[<span class=\"string\">&quot;Count&quot;</span>] / Age19_percent[<span class=\"string\">&quot;Count&quot;</span>].<span class=\"built_in\">sum</span>()</span><br><span class=\"line\">Age19_percent[<span class=\"string\">&#x27;%&#x27;</span>] = np.<span class=\"built_in\">round</span>(Age19_percent[<span class=\"string\">&#x27;percentage&#x27;</span>] * <span class=\"number\">100</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">Age19_percent</span><br><span class=\"line\"></span><br><span class=\"line\">Age18_percent = Age5y[Age5y[<span class=\"string\">&#x27;year&#x27;</span>] == <span class=\"string\">&quot;2018&quot;</span>].reset_index(drop = <span class=\"literal\">True</span>)</span><br><span class=\"line\">Age18_percent[<span class=\"string\">&#x27;percentage&#x27;</span>] = Age18_percent[<span class=\"string\">&quot;Count&quot;</span>] / Age18_percent[<span class=\"string\">&quot;Count&quot;</span>].<span class=\"built_in\">sum</span>()</span><br><span class=\"line\">Age18_percent[<span class=\"string\">&#x27;%&#x27;</span>] = np.<span class=\"built_in\">round</span>(Age18_percent[<span class=\"string\">&#x27;percentage&#x27;</span>] * <span class=\"number\">100</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">Age18_percent</span><br><span class=\"line\"></span><br><span class=\"line\">Age5y_percent = pd.concat([Age18_percent, Age19_percent, Age20_percent, Age21_percent], ignore_index = <span class=\"literal\">True</span>)</span><br><span class=\"line\">Age5y_percent= pd.pivot(Age5y_percent, index = <span class=\"string\">&quot;year&quot;</span>, columns = <span class=\"string\">&#x27;age&#x27;</span>, values = <span class=\"string\">&quot;%&quot;</span>).reset_index()</span><br><span class=\"line\">Age5y_percent</span><br><span class=\"line\"></span><br><span class=\"line\">Age5y_percent_order = Age5y_percent_W[<span class=\"string\">&#x27;year&#x27;</span>].tolist()</span><br><span class=\"line\">Age5y_order = Age5y_W[<span class=\"string\">&#x27;age&#x27;</span>].unique().tolist()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#graph1</span></span><br><span class=\"line\">fig = go.Figure()</span><br><span class=\"line\">fig.add_trace(go.Scatter(</span><br><span class=\"line\">    x = Age5y_percent_order, </span><br><span class=\"line\">    y = Age5y_percent_W[<span class=\"string\">&#x27;18-21&#x27;</span>].tolist(), </span><br><span class=\"line\">    mode = <span class=\"string\">&quot;lines&quot;</span>, </span><br><span class=\"line\">    name = <span class=\"string\">&#x27;18-21&#x27;</span>,</span><br><span class=\"line\">    line = <span class=\"built_in\">dict</span>(width = <span class=\"number\">1</span>),</span><br><span class=\"line\">    stackgroup = <span class=\"string\">&quot;one&quot;</span>,</span><br><span class=\"line\">    marker_color=<span class=\"string\">&#x27;#F2798F&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_trace(go.Scatter(</span><br><span class=\"line\">    x = Age5y_percent_order, </span><br><span class=\"line\">    y = Age5y_percent_W[<span class=\"string\">&#x27;22-29&#x27;</span>].tolist(), </span><br><span class=\"line\">    mode = <span class=\"string\">&quot;lines&quot;</span>, </span><br><span class=\"line\">    name = <span class=\"string\">&quot;20s&quot;</span>,</span><br><span class=\"line\">    line = <span class=\"built_in\">dict</span>(width = <span class=\"number\">1</span>),</span><br><span class=\"line\">    stackgroup = <span class=\"string\">&quot;one&quot;</span>,</span><br><span class=\"line\">    marker_color=<span class=\"string\">&#x27;#88BFBA&#x27;</span>))</span><br><span class=\"line\">fig.add_trace(go.Scatter(</span><br><span class=\"line\">    x = Age5y_percent_order, </span><br><span class=\"line\">    y = Age5y_percent_W[<span class=\"string\">&#x27;30-39&#x27;</span>].tolist(), </span><br><span class=\"line\">    mode = <span class=\"string\">&quot;lines&quot;</span>, </span><br><span class=\"line\">    name = <span class=\"string\">&quot;30s&quot;</span>,</span><br><span class=\"line\">    line = <span class=\"built_in\">dict</span>(width = <span class=\"number\">1</span>),</span><br><span class=\"line\">    stackgroup = <span class=\"string\">&quot;one&quot;</span>,</span><br><span class=\"line\">    marker_color=<span class=\"string\">&#x27;#CDD9A3&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_trace(go.Scatter(</span><br><span class=\"line\">    x = Age5y_percent_order, </span><br><span class=\"line\">    y = Age5y_percent_W[<span class=\"string\">&#x27;40-49&#x27;</span>].tolist(), </span><br><span class=\"line\">    mode = <span class=\"string\">&quot;lines&quot;</span>, </span><br><span class=\"line\">    name = <span class=\"string\">&quot;40s&quot;</span>,</span><br><span class=\"line\">    line = <span class=\"built_in\">dict</span>(width = <span class=\"number\">1</span>),</span><br><span class=\"line\">    stackgroup = <span class=\"string\">&quot;one&quot;</span>,</span><br><span class=\"line\">    marker_color=<span class=\"string\">&#x27;#F28705&#x27;</span>))</span><br><span class=\"line\">fig.add_trace(go.Scatter(</span><br><span class=\"line\">    x = Age5y_percent_order, </span><br><span class=\"line\">    y = Age5y_percent_W[<span class=\"string\">&#x27;50-59&#x27;</span>].tolist(), </span><br><span class=\"line\">    mode = <span class=\"string\">&quot;lines&quot;</span>, </span><br><span class=\"line\">    name = <span class=\"string\">&quot;50s&quot;</span>,</span><br><span class=\"line\">    line = <span class=\"built_in\">dict</span>(width = <span class=\"number\">1</span>),</span><br><span class=\"line\">    stackgroup = <span class=\"string\">&quot;one&quot;</span>,</span><br><span class=\"line\">    marker_color=<span class=\"string\">&#x27;#D9946C&#x27;</span>))</span><br><span class=\"line\">fig.add_trace(go.Scatter(</span><br><span class=\"line\">    x = Age5y_percent_order, </span><br><span class=\"line\">    y = Age5y_percent_W[<span class=\"string\">&#x27;60+&#x27;</span>].tolist(), </span><br><span class=\"line\">    mode = <span class=\"string\">&quot;lines&quot;</span>, </span><br><span class=\"line\">    name = <span class=\"string\">&quot;60s&lt;&quot;</span>,</span><br><span class=\"line\">    line = <span class=\"built_in\">dict</span>(width = <span class=\"number\">1</span>),</span><br><span class=\"line\">    stackgroup = <span class=\"string\">&quot;one&quot;</span>,</span><br><span class=\"line\">    marker_color=<span class=\"string\">&#x27;#F2D64B&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_traces(hovertemplate=<span class=\"string\">&#x27;&lt;b&gt;Percent&lt;/b&gt;: %&#123;y&#125;%&lt;br&gt;&#x27;</span>+</span><br><span class=\"line\">                                <span class=\"string\">&#x27;&lt;b&gt;Year&lt;/b&gt;: %&#123;x&#125;&lt;br&gt;&#x27;</span>)</span><br><span class=\"line\">fig.update_layout(yaxis_range = (<span class=\"number\">0</span>, <span class=\"number\">100</span>), height=<span class=\"number\">500</span>, width=<span class=\"number\">700</span>,</span><br><span class=\"line\">                 title_text=<span class=\"string\">&quot;&lt;b&gt;World&lt;/b&gt;&quot;</span>, title_font_size=<span class=\"number\">20</span>,</span><br><span class=\"line\">                 title_x=<span class=\"number\">0.5</span>)</span><br><span class=\"line\">fig.update_xaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\">fig.update_yaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">14</span>),</span><br><span class=\"line\">                                    x=<span class=\"number\">0.8</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.2</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;@green_yhjw&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\">fig.show()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#graph2</span></span><br><span class=\"line\">Age5y_percent_order = Age5y_percent[<span class=\"string\">&#x27;year&#x27;</span>].tolist()</span><br><span class=\"line\">Age5y_order = Age5y[<span class=\"string\">&#x27;age&#x27;</span>].unique().tolist()</span><br><span class=\"line\"></span><br><span class=\"line\">fig = go.Figure()</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_trace(go.Scatter(</span><br><span class=\"line\">    x = Age5y_percent_order, </span><br><span class=\"line\">    y = Age5y_percent[<span class=\"string\">&#x27;18-21&#x27;</span>].tolist(), </span><br><span class=\"line\">    mode = <span class=\"string\">&quot;lines&quot;</span>, </span><br><span class=\"line\">    name = <span class=\"string\">&#x27;18-21&#x27;</span>,</span><br><span class=\"line\">    line = <span class=\"built_in\">dict</span>(width = <span class=\"number\">1</span>),</span><br><span class=\"line\">    stackgroup = <span class=\"string\">&quot;one&quot;</span>,</span><br><span class=\"line\">    marker_color=<span class=\"string\">&#x27;#F2798F&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_trace(go.Scatter(</span><br><span class=\"line\">    x = Age5y_percent_order, </span><br><span class=\"line\">    y = Age5y_percent[<span class=\"string\">&#x27;22-29&#x27;</span>].tolist(), </span><br><span class=\"line\">    mode = <span class=\"string\">&quot;lines&quot;</span>, </span><br><span class=\"line\">    name = <span class=\"string\">&quot;20s&quot;</span>,</span><br><span class=\"line\">    line = <span class=\"built_in\">dict</span>(width = <span class=\"number\">1</span>),</span><br><span class=\"line\">    stackgroup = <span class=\"string\">&quot;one&quot;</span>,</span><br><span class=\"line\">    marker_color=<span class=\"string\">&#x27;#88BFBA&#x27;</span>))</span><br><span class=\"line\">fig.add_trace(go.Scatter(</span><br><span class=\"line\">    x = Age5y_percent_order, </span><br><span class=\"line\">    y = Age5y_percent[<span class=\"string\">&#x27;30-39&#x27;</span>].tolist(), </span><br><span class=\"line\">    mode = <span class=\"string\">&quot;lines&quot;</span>, </span><br><span class=\"line\">    name = <span class=\"string\">&quot;30s&quot;</span>,</span><br><span class=\"line\">    line = <span class=\"built_in\">dict</span>(width = <span class=\"number\">1</span>),</span><br><span class=\"line\">    stackgroup = <span class=\"string\">&quot;one&quot;</span>,</span><br><span class=\"line\">    marker_color=<span class=\"string\">&#x27;#CDD9A3&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_trace(go.Scatter(</span><br><span class=\"line\">    x = Age5y_percent_order, </span><br><span class=\"line\">    y = Age5y_percent[<span class=\"string\">&#x27;40-49&#x27;</span>].tolist(), </span><br><span class=\"line\">    mode = <span class=\"string\">&quot;lines&quot;</span>, </span><br><span class=\"line\">    name = <span class=\"string\">&quot;40s&quot;</span>,</span><br><span class=\"line\">    line = <span class=\"built_in\">dict</span>(width = <span class=\"number\">1</span>),</span><br><span class=\"line\">    stackgroup = <span class=\"string\">&quot;one&quot;</span>,</span><br><span class=\"line\">    marker_color=<span class=\"string\">&#x27;#F28705&#x27;</span>))</span><br><span class=\"line\">fig.add_trace(go.Scatter(</span><br><span class=\"line\">    x = Age5y_percent_order, </span><br><span class=\"line\">    y = Age5y_percent[<span class=\"string\">&#x27;50-59&#x27;</span>].tolist(), </span><br><span class=\"line\">    mode = <span class=\"string\">&quot;lines&quot;</span>, </span><br><span class=\"line\">    name = <span class=\"string\">&quot;50s&quot;</span>,</span><br><span class=\"line\">    line = <span class=\"built_in\">dict</span>(width = <span class=\"number\">1</span>),</span><br><span class=\"line\">    stackgroup = <span class=\"string\">&quot;one&quot;</span>,</span><br><span class=\"line\">    marker_color=<span class=\"string\">&#x27;#D9946C&#x27;</span>))</span><br><span class=\"line\">fig.add_trace(go.Scatter(</span><br><span class=\"line\">    x = Age5y_percent_order, </span><br><span class=\"line\">    y = Age5y_percent[<span class=\"string\">&#x27;60+&#x27;</span>].tolist(), </span><br><span class=\"line\">    mode = <span class=\"string\">&quot;lines&quot;</span>, </span><br><span class=\"line\">    name = <span class=\"string\">&quot;60s&lt;&quot;</span>,</span><br><span class=\"line\">    line = <span class=\"built_in\">dict</span>(width = <span class=\"number\">1</span>),</span><br><span class=\"line\">    stackgroup = <span class=\"string\">&quot;one&quot;</span>,</span><br><span class=\"line\">    marker_color=<span class=\"string\">&#x27;#F2D64B&#x27;</span>))</span><br><span class=\"line\">fig.update_traces(hovertemplate=<span class=\"string\">&#x27;&lt;b&gt;Percent&lt;/b&gt;: %&#123;y&#125;%&lt;br&gt;&#x27;</span>+</span><br><span class=\"line\">                                <span class=\"string\">&#x27;&lt;b&gt;Year&lt;/b&gt;: %&#123;x&#125;&lt;br&gt;&#x27;</span>)</span><br><span class=\"line\">fig.update_layout(yaxis_range = (<span class=\"number\">0</span>, <span class=\"number\">100</span>), height=<span class=\"number\">500</span>, width=<span class=\"number\">700</span>,</span><br><span class=\"line\">                 title_text=<span class=\"string\">&quot;&lt;b&gt;East Asia&lt;/b&gt;&quot;</span>, title_font_size=<span class=\"number\">20</span>,</span><br><span class=\"line\">                 title_x=<span class=\"number\">0.5</span>)</span><br><span class=\"line\">fig.update_xaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\">fig.update_yaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">14</span>),</span><br><span class=\"line\">                                    x=<span class=\"number\">0.8</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.2</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;@green_yhjw&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n\n<h2> 17'East Asia Age Ratio: Heat Map </h2>\n\n<ul>\n<li><strong>East Asia</strong> : 50% or more. Those in their 20s and 30s.</li>\n<li><strong>Korea</strong>: Those in their 20s are the highest.<br>  The number of respondents in their 50s and older is also large.</li>\n<li><strong>Taiwan</strong> : The number of respondents in their 30s and older is relatively small.</li>\n<li><strong>China</strong>: 70% or more of respondents in their 30s or younger.<br>  Related to life expectancy?</li>\n<li><strong>Japan</strong>: Like an aging country, all ages are evenly distributed.<br>  Even if you’re older, there are many respondents to Kaggle.</li>\n</ul>\n<p><img src=\"/images/kaggle_final/newplot11.png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#data processing</span></span><br><span class=\"line\">df21Age_Ea = df21_Ea.loc[:,[<span class=\"string\">&#x27;Q3&#x27;</span>,<span class=\"string\">&#x27;Q1&#x27;</span>]].reset_index().rename(columns=&#123;<span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;East_Asia&#x27;</span>, <span class=\"string\">&#x27;Q1&#x27;</span>:<span class=\"string\">&#x27;2021&#x27;</span>&#125;).fillna(<span class=\"string\">&#x27;etc&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">df21Age_Ea=(df21Age_Ea.replace([<span class=\"string\">&#x27;60-69&#x27;</span>, <span class=\"string\">&#x27;70+&#x27;</span>, <span class=\"string\">&#x27;70-79&#x27;</span>, <span class=\"string\">&#x27;80+&#x27;</span>], <span class=\"string\">&#x27;60+&#x27;</span>)</span><br><span class=\"line\">           .replace([<span class=\"string\">&#x27;22-24&#x27;</span>, <span class=\"string\">&#x27;25-29&#x27;</span>], <span class=\"string\">&#x27;22-29&#x27;</span>)</span><br><span class=\"line\">           .replace([<span class=\"string\">&#x27;30-34&#x27;</span>, <span class=\"string\">&#x27;35-39&#x27;</span>], <span class=\"string\">&#x27;30-39&#x27;</span>)</span><br><span class=\"line\">            .replace([<span class=\"string\">&#x27;40-44&#x27;</span>, <span class=\"string\">&#x27;45-49&#x27;</span>], <span class=\"string\">&#x27;40-49&#x27;</span>)</span><br><span class=\"line\">        .replace([<span class=\"string\">&#x27;50-54&#x27;</span>, <span class=\"string\">&#x27;55-59&#x27;</span>], <span class=\"string\">&#x27;50-59&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 연령-지역 %</span></span><br><span class=\"line\">dfKo_Age21= df21Age_Ea[df21Age_Ea[<span class=\"string\">&#x27;East_Asia&#x27;</span>]==<span class=\"string\">&#x27;South Korea&#x27;</span>]</span><br><span class=\"line\">dfKo_Age21_per=dfKo_Age21[<span class=\"string\">&#x27;2021&#x27;</span>].value_counts().to_frame().reset_index()</span><br><span class=\"line\">dfKo_Age21_per[<span class=\"string\">&#x27;South Korea&#x27;</span>]=((dfKo_Age21_per[<span class=\"string\">&#x27;2021&#x27;</span>] / <span class=\"built_in\">len</span>(dfKo_Age21))*<span class=\"number\">100</span>).<span class=\"built_in\">round</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">dfTw_Age21= df21Age_Ea[df21Age_Ea[<span class=\"string\">&#x27;East_Asia&#x27;</span>]==<span class=\"string\">&#x27;Taiwan&#x27;</span>]</span><br><span class=\"line\">dfTw_Age21_per=dfTw_Age21[<span class=\"string\">&#x27;2021&#x27;</span>].value_counts().to_frame().reset_index()</span><br><span class=\"line\">dfTw_Age21_per[<span class=\"string\">&#x27;Taiwan&#x27;</span>]=((dfTw_Age21_per[<span class=\"string\">&#x27;2021&#x27;</span>] / <span class=\"built_in\">len</span>(dfTw_Age21))*<span class=\"number\">100</span>).<span class=\"built_in\">round</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\">dfTw_Age21_per</span><br><span class=\"line\"></span><br><span class=\"line\">dfCh_Age21= df21Age_Ea[df21Age_Ea[<span class=\"string\">&#x27;East_Asia&#x27;</span>]==<span class=\"string\">&#x27;China&#x27;</span>]</span><br><span class=\"line\">dfCh_Age21_per=dfCh_Age21[<span class=\"string\">&#x27;2021&#x27;</span>].value_counts().to_frame().reset_index()</span><br><span class=\"line\">dfCh_Age21_per[<span class=\"string\">&#x27;China&#x27;</span>]=((dfCh_Age21_per[<span class=\"string\">&#x27;2021&#x27;</span>] / <span class=\"built_in\">len</span>(dfCh_Age21))*<span class=\"number\">100</span>).<span class=\"built_in\">round</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\">dfCh_Age21_per</span><br><span class=\"line\"></span><br><span class=\"line\">df21Age_Ea.head()</span><br><span class=\"line\">dfJp_Age21= df21Age_Ea[df21Age_Ea[<span class=\"string\">&#x27;East_Asia&#x27;</span>]==<span class=\"string\">&#x27;Japan&#x27;</span>]</span><br><span class=\"line\">dfJp_Age21_per=dfJp_Age21[<span class=\"string\">&#x27;2021&#x27;</span>].value_counts().to_frame().reset_index()</span><br><span class=\"line\">dfJp_Age21_per[<span class=\"string\">&#x27;Japan&#x27;</span>]=((dfJp_Age21_per[<span class=\"string\">&#x27;2021&#x27;</span>] / <span class=\"built_in\">len</span>(dfJp_Age21))*<span class=\"number\">100</span>).<span class=\"built_in\">round</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\">dfJp_Age21_per</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">merge1= pd.merge(dfKo_Age21_per,dfTw_Age21_per, on=<span class=\"string\">&#x27;index&#x27;</span>, how=<span class=\"string\">&#x27;outer&#x27;</span>)</span><br><span class=\"line\">merge2= pd.merge(dfCh_Age21_per,dfJp_Age21_per, on=<span class=\"string\">&#x27;index&#x27;</span>, how=<span class=\"string\">&#x27;outer&#x27;</span>)</span><br><span class=\"line\">merge= pd.merge(merge1,merge2, on=<span class=\"string\">&#x27;index&#x27;</span>, how=<span class=\"string\">&#x27;outer&#x27;</span>).fillna(<span class=\"number\">0</span>).sort_values(by=[<span class=\"string\">&#x27;index&#x27;</span>],ascending=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#graph</span></span><br><span class=\"line\">x1=[<span class=\"string\">&#x27;South Korea&#x27;</span>,<span class=\"string\">&#x27;Taiwan&#x27;</span>,<span class=\"string\">&#x27;China&#x27;</span>,<span class=\"string\">&#x27;Japan&#x27;</span>]</span><br><span class=\"line\">y1=merge.sort_values(by=[<span class=\"string\">&#x27;index&#x27;</span>], ascending=<span class=\"literal\">True</span>)[<span class=\"string\">&#x27;index&#x27;</span>].tolist()</span><br><span class=\"line\">z1=merge.iloc[:,[<span class=\"number\">2</span>,<span class=\"number\">4</span>,<span class=\"number\">6</span>,<span class=\"number\">8</span>]].to_numpy()</span><br><span class=\"line\"></span><br><span class=\"line\">fig = go.Figure(data=go.Heatmap(</span><br><span class=\"line\">                   z=z1,</span><br><span class=\"line\">                   x=x1,</span><br><span class=\"line\">                   y=y1,</span><br><span class=\"line\">                   hoverongaps = <span class=\"literal\">True</span>,</span><br><span class=\"line\">                   opacity=<span class=\"number\">1.0</span>, xgap=<span class=\"number\">2.5</span>, ygap=<span class=\"number\">2.5</span>))</span><br><span class=\"line\">fig = ff.create_annotated_heatmap(z1, x = x1, y = y1, colorscale=<span class=\"string\">&#x27;sunset&#x27;</span>)</span><br><span class=\"line\">fig.update_layout(height=<span class=\"number\">500</span>, width=<span class=\"number\">600</span>,</span><br><span class=\"line\">                 title_text=<span class=\"string\">&quot;&lt;b&gt;East Asia Age (2021)&lt;/b&gt;&quot;</span>, title_font_size=<span class=\"number\">20</span>,</span><br><span class=\"line\">                 title_x=<span class=\"number\">0.5</span>)</span><br><span class=\"line\">fig.update_traces(hovertemplate=<span class=\"string\">&#x27;&lt;b&gt;Age&lt;/b&gt;: %&#123;y&#125;&lt;br&gt;&#x27;</span>+</span><br><span class=\"line\">                                <span class=\"string\">&#x27;&lt;b&gt;Country&lt;/b&gt;: %&#123;x&#125;&lt;br&gt;&#x27;</span>+</span><br><span class=\"line\">                                <span class=\"string\">&#x27;&lt;b&gt;Percent&lt;/b&gt;: %&#123;z&#125;%&#x27;</span>)</span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">14</span>),</span><br><span class=\"line\">                                    x=<span class=\"number\">0.8</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.2</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;@green_yhjw&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>17’East Asia’s age ratio: Box plot</p>\n</blockquote>\n<blockquote>\n<p>2017: Data is not a section but an individual number.  <br><br>If you divide the interval, you can add it to the previous graph. <br><br>It was data that I could draw a bar plot, so I drew it. <br><br>You can see a 100-year-old in China, but they don’t remove missing values on purpose.</p>\n</blockquote>\n<p><img src=\"/images/kaggle_final/newplot12.png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 연도별 나이 </span></span><br><span class=\"line\">df21Age_Ea = df21_Ea.loc[:,[<span class=\"string\">&#x27;Q3&#x27;</span>,<span class=\"string\">&#x27;Q1&#x27;</span>]].reset_index().rename(columns=&#123;<span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;East_Asia&#x27;</span>, <span class=\"string\">&#x27;Q1&#x27;</span>:<span class=\"string\">&#x27;2021&#x27;</span>&#125;).fillna(<span class=\"string\">&#x27;etc&#x27;</span>)</span><br><span class=\"line\">df20Age_Ea = df20_Ea.loc[:,[<span class=\"string\">&#x27;Q3&#x27;</span>,<span class=\"string\">&#x27;Q1&#x27;</span>]].reset_index().rename(columns=&#123;<span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;East_Asia&#x27;</span>, <span class=\"string\">&#x27;Q1&#x27;</span>:<span class=\"string\">&#x27;2020&#x27;</span>&#125;).fillna(<span class=\"string\">&#x27;etc&#x27;</span>)</span><br><span class=\"line\">df19Age_Ea = df19_Ea.loc[:,[<span class=\"string\">&#x27;Q3&#x27;</span>,<span class=\"string\">&#x27;Q1&#x27;</span>]].reset_index().rename(columns=&#123;<span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;East_Asia&#x27;</span>, <span class=\"string\">&#x27;Q1&#x27;</span>:<span class=\"string\">&#x27;2019&#x27;</span>&#125;).fillna(<span class=\"string\">&#x27;etc&#x27;</span>)</span><br><span class=\"line\">df18Age_Ea = df18_Ea.loc[:,[<span class=\"string\">&#x27;Q3&#x27;</span>,<span class=\"string\">&#x27;Q2&#x27;</span>]].reset_index().rename(columns=&#123;<span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;East_Asia&#x27;</span>, <span class=\"string\">&#x27;Q2&#x27;</span>:<span class=\"string\">&#x27;2018&#x27;</span>&#125;).fillna(<span class=\"string\">&#x27;etc&#x27;</span>)</span><br><span class=\"line\">df17Age_Ea = df17_Ea.loc[:,[<span class=\"string\">&#x27;Country&#x27;</span>,<span class=\"string\">&#x27;Age&#x27;</span>]].reset_index().rename(columns=&#123;<span class=\"string\">&#x27;Country&#x27;</span>:<span class=\"string\">&#x27;East_Asia&#x27;</span>, <span class=\"string\">&#x27;Age&#x27;</span>:<span class=\"string\">&#x27;2017&#x27;</span>&#125;).fillna(<span class=\"string\">&#x27;etc&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#data frame 정리</span></span><br><span class=\"line\">dfAge21 =df21Age_Ea.groupby([<span class=\"string\">&#x27;East_Asia&#x27;</span>,<span class=\"string\">&#x27;2021&#x27;</span>]).size().reset_index().rename(columns = &#123;<span class=\"number\">0</span>:<span class=\"string\">&quot;Count&quot;</span>&#125;)</span><br><span class=\"line\">dfAge20 =df20Age_Ea.groupby([<span class=\"string\">&#x27;East_Asia&#x27;</span>,<span class=\"string\">&#x27;2020&#x27;</span>]).size().reset_index().rename(columns = &#123;<span class=\"number\">0</span>:<span class=\"string\">&quot;Count&quot;</span>&#125;)</span><br><span class=\"line\">dfAge19 =df19Age_Ea.groupby([<span class=\"string\">&#x27;East_Asia&#x27;</span>,<span class=\"string\">&#x27;2019&#x27;</span>]).size().reset_index().rename(columns = &#123;<span class=\"number\">0</span>:<span class=\"string\">&quot;Count&quot;</span>&#125;)</span><br><span class=\"line\">dfAge18 =df18Age_Ea.groupby([<span class=\"string\">&#x27;East_Asia&#x27;</span>,<span class=\"string\">&#x27;2018&#x27;</span>]).size().reset_index().rename(columns = &#123;<span class=\"number\">0</span>:<span class=\"string\">&quot;Count&quot;</span>&#125;)</span><br><span class=\"line\">dfAge17 =(df17Age_Ea.groupby([<span class=\"string\">&#x27;East_Asia&#x27;</span>,<span class=\"string\">&#x27;2017&#x27;</span>])</span><br><span class=\"line\">          .size().reset_index().rename(columns = &#123;<span class=\"number\">0</span>:<span class=\"string\">&quot;Count&quot;</span>&#125;))</span><br><span class=\"line\"><span class=\"comment\">#graph</span></span><br><span class=\"line\">fig = go.Figure()</span><br><span class=\"line\"></span><br><span class=\"line\">x = [<span class=\"string\">&#x27;China&#x27;</span>,<span class=\"string\">&#x27;Japan&#x27;</span>,<span class=\"string\">&#x27;South Korea&#x27;</span>,<span class=\"string\">&#x27;Taiwan&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_trace(go.Box( y=dfAge17[<span class=\"string\">&#x27;2017&#x27;</span>][dfAge17[<span class=\"string\">&#x27;East_Asia&#x27;</span>]==<span class=\"string\">&quot;Japan&quot;</span>].to_numpy(),</span><br><span class=\"line\">    name=<span class=\"string\">&#x27;Japan&#x27;</span>,</span><br><span class=\"line\">    marker=<span class=\"built_in\">dict</span>(color=<span class=\"string\">&#x27;#CDD9A3&#x27;</span>)))</span><br><span class=\"line\">fig.add_trace(go.Box(y=dfAge17[<span class=\"string\">&#x27;2017&#x27;</span>][dfAge17[<span class=\"string\">&#x27;East_Asia&#x27;</span>]==<span class=\"string\">&quot;China&quot;</span>].to_numpy(),</span><br><span class=\"line\">    name=<span class=\"string\">&#x27;China&#x27;</span>,</span><br><span class=\"line\">    marker=<span class=\"built_in\">dict</span>(color=<span class=\"string\">&#x27;#88BFBA&#x27;</span>)))</span><br><span class=\"line\">fig.add_trace(go.Box(y=dfAge17[<span class=\"string\">&#x27;2017&#x27;</span>][dfAge17[<span class=\"string\">&#x27;East_Asia&#x27;</span>]==<span class=\"string\">&quot;South Korea&quot;</span>].to_numpy(),</span><br><span class=\"line\">    name=<span class=\"string\">&#x27;South Korea&#x27;</span>,</span><br><span class=\"line\">    marker=<span class=\"built_in\">dict</span>(color=<span class=\"string\">&#x27;#F2798F&#x27;</span>)))</span><br><span class=\"line\">fig.add_trace(go.Box(y=dfAge17[<span class=\"string\">&#x27;2017&#x27;</span>][dfAge17[<span class=\"string\">&#x27;East_Asia&#x27;</span>]==<span class=\"string\">&quot;Taiwan&quot;</span>].to_numpy(),</span><br><span class=\"line\">    name=<span class=\"string\">&#x27;Taiwan&#x27;</span>,</span><br><span class=\"line\">    marker=<span class=\"built_in\">dict</span>(color=<span class=\"string\">&#x27;#F28705&#x27;</span></span><br><span class=\"line\">    ),))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(yaxis = <span class=\"built_in\">dict</span>(<span class=\"built_in\">range</span>=[<span class=\"number\">0</span>, <span class=\"number\">120</span>]))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(yaxis_range = (<span class=\"number\">0</span>, <span class=\"number\">110</span>), height=<span class=\"number\">600</span>, width=<span class=\"number\">700</span>,</span><br><span class=\"line\">                  title_text=<span class=\"string\">&quot;&lt;b&gt;Age in East Asia (2017)&lt;/b&gt;&quot;</span>, title_font_size=<span class=\"number\">20</span>,</span><br><span class=\"line\">                  margin = <span class=\"built_in\">dict</span>(t=<span class=\"number\">100</span>, l=<span class=\"number\">50</span>, r=<span class=\"number\">50</span>, b=<span class=\"number\">100</span>),</span><br><span class=\"line\">                  title_x=<span class=\"number\">0.5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_xaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\">fig.update_yaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\">fig.update_layout(legend=<span class=\"built_in\">dict</span>(</span><br><span class=\"line\">    orientation=<span class=\"string\">&quot;v&quot;</span>,</span><br><span class=\"line\">    yanchor=<span class=\"string\">&quot;bottom&quot;</span>,</span><br><span class=\"line\">    y=<span class=\"number\">0.8</span>,</span><br><span class=\"line\">    xanchor=<span class=\"string\">&quot;right&quot;</span>,</span><br><span class=\"line\">    x=<span class=\"number\">1</span>))</span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">14</span>),</span><br><span class=\"line\">                                    x=<span class=\"number\">0.8</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.2</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;@green_yhjw&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-1-5-Degree-transformation\"><a href=\"#3-1-5-Degree-transformation\" class=\"headerlink\" title=\"3.1.5 Degree transformation\"></a>3.1.5 Degree transformation</h1><hr>\n<h2> World job ratio in each country: pie plot </h2>\n\n<ul>\n<li>World: 90% or higher Bachelor’s degree</li>\n<li>East Asia: 85% bachelor’s degree or higher</li>\n</ul>\n<p><img src=\"/images/kaggle_final/newplot13.png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#data preprocessing</span></span><br><span class=\"line\">degree_wo = (df21[<span class=\"string\">&#x27;Q4&#x27;</span>]</span><br><span class=\"line\">             .replace([<span class=\"string\">&#x27;No formal education past high school&#x27;</span>,</span><br><span class=\"line\">                       <span class=\"string\">&#x27;Some college/university study without earning a bachelor’s degree&#x27;</span>],<span class=\"string\">&#x27;~college&#x27;</span>)</span><br><span class=\"line\">             .replace([<span class=\"string\">&#x27;Doctoral degree&#x27;</span>,</span><br><span class=\"line\">                       <span class=\"string\">&#x27;Professional doctorate&#x27;</span>],<span class=\"string\">&#x27;Doctoral degree~&#x27;</span>)</span><br><span class=\"line\">             .value_counts().to_frame())</span><br><span class=\"line\">degree_ea = (df21_Ea[<span class=\"string\">&#x27;Q4&#x27;</span>]</span><br><span class=\"line\">             .replace([<span class=\"string\">&#x27;No formal education past high school&#x27;</span>,</span><br><span class=\"line\">                       <span class=\"string\">&#x27;Some college/university study without earning a bachelor’s degree&#x27;</span>],<span class=\"string\">&#x27;~college&#x27;</span>)</span><br><span class=\"line\">             .replace([<span class=\"string\">&#x27;Doctoral degree&#x27;</span>,</span><br><span class=\"line\">                       <span class=\"string\">&#x27;Professional doctorate&#x27;</span>],<span class=\"string\">&#x27;Doctoral degree~&#x27;</span>)</span><br><span class=\"line\">             .value_counts().to_frame())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#graph</span></span><br><span class=\"line\">colors = [<span class=\"string\">&#x27;#F2798F&#x27;</span>,<span class=\"string\">&#x27;#88BFBA&#x27;</span>, <span class=\"string\">&#x27;#CDD9A3&#x27;</span>, <span class=\"string\">&#x27;#F28705&#x27;</span>, <span class=\"string\">&#x27;#D9946C&#x27;</span>]</span><br><span class=\"line\">fig = make_subplots(rows=<span class=\"number\">1</span>, cols=<span class=\"number\">2</span>, specs=[[&#123;<span class=\"string\">&#x27;type&#x27;</span>:<span class=\"string\">&#x27;pie&#x27;</span>&#125;, &#123;<span class=\"string\">&#x27;type&#x27;</span>:<span class=\"string\">&#x27;pie&#x27;</span>&#125;]], subplot_titles=(<span class=\"string\">&quot;World&quot;</span>, <span class=\"string\">&quot;East Asia&quot;</span>))</span><br><span class=\"line\">fig.add_trace(go.Pie(marker=<span class=\"built_in\">dict</span>(colors=colors), labels=degree_wo.index, values=degree_wo[<span class=\"string\">&#x27;Q4&#x27;</span>].to_numpy(), name=<span class=\"string\">&quot;World&quot;</span>),</span><br><span class=\"line\">              <span class=\"number\">1</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">fig.add_trace(go.Pie(marker=<span class=\"built_in\">dict</span>(colors=colors), labels=degree_ea.index, values=degree_ea[<span class=\"string\">&#x27;Q4&#x27;</span>].to_numpy(), name=<span class=\"string\">&quot;East Asia&quot;</span>),</span><br><span class=\"line\">              <span class=\"number\">1</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_traces(hole=<span class=\"number\">.0</span>, hoverinfo=<span class=\"string\">&quot;label+percent+name&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(title=<span class=\"string\">&#x27;&lt;b&gt;World vs East Asia&lt;/b&gt;&#x27;</span>,title_font_size=<span class=\"number\">22</span>,</span><br><span class=\"line\">                  margin = <span class=\"built_in\">dict</span>(t=<span class=\"number\">200</span>, l=<span class=\"number\">30</span>, r=<span class=\"number\">0</span>, b=<span class=\"number\">200</span>),</span><br><span class=\"line\">                  height=<span class=\"number\">700</span>, width=<span class=\"number\">700</span>)</span><br><span class=\"line\">fig.update_layout(legend=<span class=\"built_in\">dict</span>(</span><br><span class=\"line\">    orientation=<span class=\"string\">&quot;h&quot;</span>,</span><br><span class=\"line\">    yanchor=<span class=\"string\">&quot;bottom&quot;</span>,</span><br><span class=\"line\">    y=<span class=\"number\">1.1</span>,</span><br><span class=\"line\">    xanchor=<span class=\"string\">&quot;right&quot;</span>,</span><br><span class=\"line\">    x=<span class=\"number\">1.0</span>))</span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">14</span>),</span><br><span class=\"line\">                                    x=<span class=\"number\">0.8</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.5</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;@green_yhjw&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\">fig.show()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2> Percentage of East Asia degrees by year: sunburst plot </h2>\n\n<p>The highest percentage of respondents with <strong>master’s degrees</strong> per year</p>\n<p><img src=\"/images/kaggle_final/newplot14.png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#data preprocessing</span></span><br><span class=\"line\">df21_Ea_degree=(df21_Ea[<span class=\"string\">&#x27;Q4&#x27;</span>].replace([<span class=\"string\">&#x27;No formal education past high school&#x27;</span>, <span class=\"string\">&#x27;Some college/university study without earning a bachelor’s degree&#x27;</span>],<span class=\"string\">&#x27;~college&#x27;</span>)</span><br><span class=\"line\">                             .replace([<span class=\"string\">&#x27;Doctoral degree&#x27;</span>,<span class=\"string\">&#x27;Professional doctorate&#x27;</span>],<span class=\"string\">&#x27;Doctoral degree~&#x27;</span>)</span><br><span class=\"line\">                             .value_counts().to_frame().rename(columns=&#123;<span class=\"string\">&#x27;Q4&#x27;</span>:<span class=\"string\">&#x27;2021&#x27;</span>&#125;))</span><br><span class=\"line\">df20_Ea_degree=(df20_Ea[<span class=\"string\">&#x27;Q4&#x27;</span>].replace([<span class=\"string\">&#x27;No formal education past high school&#x27;</span>, <span class=\"string\">&#x27;Some college/university study without earning a bachelor’s degree&#x27;</span>],<span class=\"string\">&#x27;~college&#x27;</span>)</span><br><span class=\"line\">                             .replace([<span class=\"string\">&#x27;Doctoral degree&#x27;</span>, <span class=\"string\">&#x27;Professional degree&#x27;</span>],<span class=\"string\">&#x27;Doctoral degree~&#x27;</span>)</span><br><span class=\"line\">                             .value_counts().to_frame().rename(columns=&#123;<span class=\"string\">&#x27;Q4&#x27;</span>:<span class=\"string\">&#x27;2020&#x27;</span>&#125;))</span><br><span class=\"line\">df19_Ea_degree=(df19_Ea[<span class=\"string\">&#x27;Q4&#x27;</span>].replace([<span class=\"string\">&#x27;No formal education past high school&#x27;</span>,<span class=\"string\">&#x27;Some college/university study without earning a bachelor’s degree&#x27;</span>],<span class=\"string\">&#x27;~college&#x27;</span>)</span><br><span class=\"line\">                             .replace([<span class=\"string\">&#x27;Doctoral degree&#x27;</span>, <span class=\"string\">&#x27;Professional degree&#x27;</span>],<span class=\"string\">&#x27;Doctoral degree~&#x27;</span>)</span><br><span class=\"line\">                             .value_counts().to_frame().rename(columns=&#123;<span class=\"string\">&#x27;Q4&#x27;</span>:<span class=\"string\">&#x27;2019&#x27;</span>&#125;))</span><br><span class=\"line\">df18_Ea_degree=(df18_Ea[<span class=\"string\">&#x27;Q4&#x27;</span>].replace([<span class=\"string\">&#x27;No formal education past high school&#x27;</span>, <span class=\"string\">&#x27;Some college/university study without earning a bachelor’s degree&#x27;</span>],<span class=\"string\">&#x27;~college&#x27;</span>)</span><br><span class=\"line\">                             .replace([<span class=\"string\">&#x27;Doctoral degree&#x27;</span>, <span class=\"string\">&#x27;Professional degree&#x27;</span>],<span class=\"string\">&#x27;Doctoral degree~&#x27;</span>)</span><br><span class=\"line\">                             .value_counts().to_frame().rename(columns=&#123;<span class=\"string\">&#x27;Q4&#x27;</span>:<span class=\"string\">&#x27;2018&#x27;</span>&#125;))</span><br><span class=\"line\">df17_Ea_degree=(df17_Ea[<span class=\"string\">&#x27;FormalEducation&#x27;</span>]</span><br><span class=\"line\">                .replace([<span class=\"string\">&#x27;No formal education past high school&#x27;</span>, <span class=\"string\">&#x27;Some college/university study without earning a bachelor’s degree&#x27;</span>],<span class=\"string\">&#x27;~college&#x27;</span>)</span><br><span class=\"line\">                .replace([<span class=\"string\">&#x27;Doctoral degree&#x27;</span>, <span class=\"string\">&#x27;Professional degree&#x27;</span>],<span class=\"string\">&#x27;Doctoral degree~&#x27;</span>)</span><br><span class=\"line\">                .value_counts().to_frame()</span><br><span class=\"line\">                .rename(columns=&#123;<span class=\"string\">&#x27;FormalEducation&#x27;</span>:<span class=\"string\">&#x27;2017&#x27;</span>&#125; ,index = &#123;<span class=\"string\">&#x27;I did not complete any formal education past high school&#x27;</span>:<span class=\"string\">&#x27;No formal education past high school&#x27;</span>,<span class=\"string\">&#x27;Master\\&#x27;s degree&#x27;</span>:<span class=\"string\">&#x27;Master’s degree&#x27;</span>,<span class=\"string\">&#x27;Bachelor\\&#x27;s degree&#x27;</span>:<span class=\"string\">&#x27;Bachelor’s degree&#x27;</span>,<span class=\"string\">&#x27;Some college/university study without earning a bachelor\\&#x27;s degree&#x27;</span>:<span class=\"string\">&#x27;Some college/university study without earning a bachelor’s degree&#x27;</span>&#125;)  )</span><br><span class=\"line\">                </span><br><span class=\"line\">concat1 = pd.concat([df21_Ea_degree,df20_Ea_degree],axis=<span class=\"number\">1</span>, join=<span class=\"string\">&#x27;outer&#x27;</span>)  </span><br><span class=\"line\">concat2 = pd.concat([df19_Ea_degree,df18_Ea_degree],axis=<span class=\"number\">1</span>, join=<span class=\"string\">&#x27;outer&#x27;</span>)  </span><br><span class=\"line\">concat3 = pd.concat([concat1,concat2],axis=<span class=\"number\">1</span>, join=<span class=\"string\">&#x27;outer&#x27;</span>) </span><br><span class=\"line\">df21_Ea_degree_yearly_=concat3.join(df17_Ea_degree).fillna(<span class=\"number\">0</span>).transpose() <span class=\"comment\">#.transpose() 행 열 바꾸기</span></span><br><span class=\"line\"></span><br><span class=\"line\">df21_Ea_degree_yearly=df21_Ea_degree_yearly_.stack().to_frame().reset_index().rename(columns=&#123;<span class=\"string\">&#x27;level_0&#x27;</span>:<span class=\"string\">&#x27;year&#x27;</span>,<span class=\"string\">&#x27;level_1&#x27;</span>:<span class=\"string\">&#x27;degree&#x27;</span>,<span class=\"number\">0</span>:<span class=\"string\">&#x27;value&#x27;</span>&#125;)</span><br><span class=\"line\">df21_Ea_degree_yearly</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#graph</span></span><br><span class=\"line\">fig = px.sunburst(df21_Ea_degree_yearly, path=[<span class=\"string\">&#x27;year&#x27;</span>,<span class=\"string\">&#x27;degree&#x27;</span>], values=df21_Ea_degree_yearly[<span class=\"string\">&#x27;value&#x27;</span>].tolist())</span><br><span class=\"line\">fig.update_layout( margin = <span class=\"built_in\">dict</span>(t=<span class=\"number\">10</span>, l=<span class=\"number\">10</span>, r=<span class=\"number\">10</span>, b=<span class=\"number\">10</span>),colorway=(<span class=\"string\">&quot;#F2798F&quot;</span>,<span class=\"string\">&quot;#88BFBA&quot;</span>,<span class=\"string\">&quot;#CDD9A3&quot;</span>,<span class=\"string\">&#x27;#F28705&#x27;</span>,<span class=\"string\">&#x27;#D9946C&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(title=<span class=\"string\">&#x27;&lt;b&gt;         Degree&lt;/b&gt;&#x27;</span>,title_font_size=<span class=\"number\">25</span>,</span><br><span class=\"line\">                  margin = <span class=\"built_in\">dict</span>(t=<span class=\"number\">100</span>, l=<span class=\"number\">100</span>, r=<span class=\"number\">50</span>, b=<span class=\"number\">100</span>),</span><br><span class=\"line\">                  height=<span class=\"number\">700</span>, width=<span class=\"number\">700</span>)</span><br><span class=\"line\">fig.update_traces(hovertemplate=<span class=\"string\">&#x27;&lt;b&gt;Name&lt;/b&gt;: %&#123;id&#125;&lt;br&gt;&#x27;</span>+</span><br><span class=\"line\">                                <span class=\"string\">&#x27;&lt;b&gt;Count&lt;/b&gt;: %&#123;value&#125;&lt;br&gt;&#x27;</span>+</span><br><span class=\"line\">                                <span class=\"string\">&#x27;&lt;b&gt;Parent&lt;/b&gt;: %&#123;parent&#125;&#x27;</span>) </span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">14</span>),</span><br><span class=\"line\">                                    x=<span class=\"number\">0.8</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.2</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;@green_yhjw&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n\n<h3> Plus we could see the advantages of Plotly in this graph. \n</h3>\n\n<p>Matplotlib draws a static graph, but Plotly can dynamically click and move, and it supports zooming out, zooming in, and downloading graphs.</p>\n<p>Because all of our graphs are made of plotly, the viewer can represent or remove items in the graph if desired.<br>   <strong>With a click</strong></p>\n<h2> East Asia Degree Ratio: Bar plot</h2>\n\n<p>40% of master’s degrees or higher, and respondents have a high educational background.</p>\n<ul>\n<li>China and Japan have similar trends to East Asia and the World. <br><br>  The number of people itself is large, so a representative trend seems to appear here. <br><br>  However, it is noteworthy that the two countries have the same tendency. <br></li>\n</ul>\n<ul>\n<li><p>Korea: It is the only country among the four countries with a high degree of education below Ph.D., bachelor’s degree, and junior college. Only masters are low.<br>  (Polarization of education?)</p>\n</li>\n<li><p>Taiwan: 1st place in master’s ratio (55%), 2nd place in Ph.D. or higher (13.8%).<br>  = The highest level of education.</p>\n</li>\n</ul>\n<p><img src=\"/images/kaggle_final/newplot15.png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#data preprocessing</span></span><br><span class=\"line\">df21Edu_Ea = df21_Ea.loc[:,[<span class=\"string\">&#x27;Q3&#x27;</span>,<span class=\"string\">&#x27;Q4&#x27;</span>]].reset_index().rename(columns=&#123;<span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;East_Asia&#x27;</span>, <span class=\"string\">&#x27;Q4&#x27;</span>:<span class=\"string\">&#x27;Dgree&#x27;</span>&#125;).fillna(<span class=\"string\">&#x27;etc&#x27;</span>)</span><br><span class=\"line\">df21Edu_Ea =(df21Edu_Ea.replace(&#123;<span class=\"string\">&#x27;I prefer not to answer&#x27;</span>:<span class=\"string\">&#x27;etc&#x27;</span>&#125;).replace([<span class=\"string\">&#x27;No formal education past high school&#x27;</span>,</span><br><span class=\"line\">                       <span class=\"string\">&#x27;Some college/university study without earning a bachelor’s degree&#x27;</span>],<span class=\"string\">&#x27;~college&#x27;</span>)</span><br><span class=\"line\">             .replace([<span class=\"string\">&#x27;Doctoral degree&#x27;</span>,</span><br><span class=\"line\">                       <span class=\"string\">&#x27;Professional doctorate&#x27;</span>],<span class=\"string\">&#x27;Doctoral degree~&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">df21Edu_Ea= (df21Edu_Ea</span><br><span class=\"line\">           .groupby([<span class=\"string\">&#x27;East_Asia&#x27;</span>, <span class=\"string\">&#x27;Dgree&#x27;</span>])</span><br><span class=\"line\">           .size()</span><br><span class=\"line\">           .reset_index()</span><br><span class=\"line\">           .rename(columns = &#123;<span class=\"number\">0</span>:<span class=\"string\">&quot;Count&quot;</span>&#125;))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 연령-지역 %</span></span><br><span class=\"line\">dfKo_Edu21= df21Edu_Ea[df21Edu_Ea[<span class=\"string\">&#x27;East_Asia&#x27;</span>]==<span class=\"string\">&#x27;South Korea&#x27;</span>]</span><br><span class=\"line\">dfKo_Edu21[<span class=\"string\">&#x27;%&#x27;</span>]=((dfKo_Edu21[<span class=\"string\">&#x27;Count&#x27;</span>] / dfKo_Edu21[<span class=\"string\">&#x27;Count&#x27;</span>].<span class=\"built_in\">sum</span>()*<span class=\"number\">100</span>)).<span class=\"built_in\">round</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\">dfKo_Edu21=dfKo_Edu21.sort_values(by=<span class=\"string\">&#x27;%&#x27;</span>, ascending=<span class=\"literal\">False</span>)</span><br><span class=\"line\">dfTw_Edu21= df21Edu_Ea[df21Edu_Ea[<span class=\"string\">&#x27;East_Asia&#x27;</span>]==<span class=\"string\">&#x27;Taiwan&#x27;</span>]</span><br><span class=\"line\">dfTw_Edu21[<span class=\"string\">&#x27;%&#x27;</span>]=((dfTw_Edu21[<span class=\"string\">&#x27;Count&#x27;</span>] / dfTw_Edu21[<span class=\"string\">&#x27;Count&#x27;</span>].<span class=\"built_in\">sum</span>())*<span class=\"number\">100</span>).<span class=\"built_in\">round</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\">dfTw_Edu21=dfTw_Edu21.sort_values(by=<span class=\"string\">&#x27;%&#x27;</span>, ascending=<span class=\"literal\">False</span>)</span><br><span class=\"line\">dfCh_Edu21= df21Edu_Ea[df21Edu_Ea[<span class=\"string\">&#x27;East_Asia&#x27;</span>]==<span class=\"string\">&#x27;China&#x27;</span>]</span><br><span class=\"line\">dfCh_Edu21[<span class=\"string\">&#x27;%&#x27;</span>]=((dfCh_Edu21[<span class=\"string\">&#x27;Count&#x27;</span>] / dfCh_Edu21[<span class=\"string\">&#x27;Count&#x27;</span>].<span class=\"built_in\">sum</span>())*<span class=\"number\">100</span>).<span class=\"built_in\">round</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\">dfCh_Edu21=dfCh_Edu21.sort_values(by=<span class=\"string\">&#x27;%&#x27;</span>, ascending=<span class=\"literal\">False</span>)</span><br><span class=\"line\">dfJp_Edu21= df21Edu_Ea[df21Edu_Ea[<span class=\"string\">&#x27;East_Asia&#x27;</span>]==<span class=\"string\">&#x27;Japan&#x27;</span>]</span><br><span class=\"line\">dfJp_Edu21[<span class=\"string\">&#x27;%&#x27;</span>]=((dfJp_Edu21[<span class=\"string\">&#x27;Count&#x27;</span>] / dfJp_Edu21[<span class=\"string\">&#x27;Count&#x27;</span>].<span class=\"built_in\">sum</span>())*<span class=\"number\">100</span>).<span class=\"built_in\">round</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\">dfJp_Edu21=dfJp_Edu21.sort_values(by=<span class=\"string\">&#x27;%&#x27;</span>, ascending=<span class=\"literal\">False</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># #data 완성</span></span><br><span class=\"line\"><span class=\"comment\"># dfEdu_21_per = pd.concat([dfKo_Edu21, dfTw_Edu21, dfCh_Edu21, dfJp_Edu21], ignore_index = True)</span></span><br><span class=\"line\"><span class=\"comment\"># dfEdu_21_per= pd.pivot(dfEdu_21_per, index = &quot;Dgree&quot;, columns = &#x27;East_Asia&#x27;, values = &quot;%&quot;).reset_index()</span></span><br><span class=\"line\"><span class=\"comment\"># dfEdu_21_per</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#graph</span></span><br><span class=\"line\">fig = make_subplots(rows = <span class=\"number\">1</span>, cols = <span class=\"number\">4</span>, </span><br><span class=\"line\">                    shared_yaxes=<span class=\"literal\">True</span>, </span><br><span class=\"line\">                    vertical_spacing = <span class=\"number\">0.05</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_trace(go.Bar(x = dfCh_Edu21[<span class=\"string\">&#x27;Dgree&#x27;</span>], </span><br><span class=\"line\">                     y = dfCh_Edu21[<span class=\"string\">&#x27;%&#x27;</span>], </span><br><span class=\"line\">                     text = dfCh_Edu21[<span class=\"string\">&#x27;%&#x27;</span>].astype(<span class=\"built_in\">str</span>) + <span class=\"string\">&quot;%&quot;</span>, </span><br><span class=\"line\">                     textposition=<span class=\"string\">&#x27;outside&#x27;</span>,</span><br><span class=\"line\">                     name=<span class=\"string\">&#x27;China&#x27;</span>,</span><br><span class=\"line\">                     marker_color=<span class=\"string\">&#x27;#88BFBA&#x27;</span>), </span><br><span class=\"line\">                     row = <span class=\"number\">1</span>, col = <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_trace(go.Bar(x = dfJp_Edu21[<span class=\"string\">&#x27;Dgree&#x27;</span>], </span><br><span class=\"line\">                     y = dfJp_Edu21[<span class=\"string\">&#x27;%&#x27;</span>], </span><br><span class=\"line\">                     text = dfJp_Edu21[<span class=\"string\">&#x27;%&#x27;</span>].astype(<span class=\"built_in\">str</span>) + <span class=\"string\">&quot;%&quot;</span>, </span><br><span class=\"line\">                     textposition=<span class=\"string\">&#x27;outside&#x27;</span>,</span><br><span class=\"line\">                     name=<span class=\"string\">&#x27;Japan&#x27;</span>,</span><br><span class=\"line\">                     marker_color=<span class=\"string\">&#x27;#CDD9A3&#x27;</span>), </span><br><span class=\"line\">                      row = <span class=\"number\">1</span>, col = <span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_trace(go.Bar(x = dfKo_Edu21[<span class=\"string\">&#x27;Dgree&#x27;</span>], </span><br><span class=\"line\">                     y = dfKo_Edu21[<span class=\"string\">&#x27;%&#x27;</span>], </span><br><span class=\"line\">                     text = dfKo_Edu21[<span class=\"string\">&#x27;%&#x27;</span>].astype(<span class=\"built_in\">str</span>) + <span class=\"string\">&quot;%&quot;</span>, </span><br><span class=\"line\">                     textposition=<span class=\"string\">&#x27;outside&#x27;</span>,</span><br><span class=\"line\">                     name=<span class=\"string\">&#x27;South Korea&#x27;</span>,</span><br><span class=\"line\">                     marker_color=<span class=\"string\">&#x27;#F28705&#x27;</span>), </span><br><span class=\"line\">                      row = <span class=\"number\">1</span>, col = <span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_trace(go.Bar(x = dfTw_Edu21[<span class=\"string\">&#x27;Dgree&#x27;</span>], </span><br><span class=\"line\">                     y = dfTw_Edu21[<span class=\"string\">&#x27;%&#x27;</span>], </span><br><span class=\"line\">                     text = dfTw_Edu21[<span class=\"string\">&#x27;%&#x27;</span>].astype(<span class=\"built_in\">str</span>) + <span class=\"string\">&quot;%&quot;</span>, </span><br><span class=\"line\">                     textposition=<span class=\"string\">&#x27;outside&#x27;</span>,</span><br><span class=\"line\">                     name=<span class=\"string\">&#x27;Taiwan&#x27;</span>,</span><br><span class=\"line\">                     marker_color=<span class=\"string\">&#x27;#D9946C&#x27;</span>), </span><br><span class=\"line\">                     row = <span class=\"number\">1</span>, col = <span class=\"number\">4</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(showlegend=<span class=\"literal\">True</span>,title=<span class=\"string\">&#x27;&lt;b&gt;Degree in East Asia&lt;/b&gt;&#x27;</span>,title_font_size=<span class=\"number\">22</span>,</span><br><span class=\"line\">                  margin = <span class=\"built_in\">dict</span>(t=<span class=\"number\">200</span>, l=<span class=\"number\">100</span>, r=<span class=\"number\">50</span>, b=<span class=\"number\">200</span>),</span><br><span class=\"line\">                  height=<span class=\"number\">700</span>, width=<span class=\"number\">700</span>)</span><br><span class=\"line\">fig.update_traces(hovertemplate=<span class=\"string\">&#x27;&lt;b&gt;Percent&lt;/b&gt;: %&#123;y&#125;%&lt;br&gt;&#x27;</span>+</span><br><span class=\"line\">                                <span class=\"string\">&#x27;&lt;b&gt;Degree&lt;/b&gt;: %&#123;x&#125;&lt;br&gt;&#x27;</span>)</span><br><span class=\"line\">fig.update_xaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\">fig.update_yaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\">fig.update_layout(legend=<span class=\"built_in\">dict</span>(</span><br><span class=\"line\">    orientation=<span class=\"string\">&quot;h&quot;</span>,</span><br><span class=\"line\">    yanchor=<span class=\"string\">&quot;bottom&quot;</span>,</span><br><span class=\"line\">    y=<span class=\"number\">1.1</span>,</span><br><span class=\"line\">    xanchor=<span class=\"string\">&quot;right&quot;</span>,</span><br><span class=\"line\">    x=<span class=\"number\">1</span>))</span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">14</span>),</span><br><span class=\"line\">                                    x=<span class=\"number\">0.8</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.5</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;@green_yhjw&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-1-6-Experience-transformation\"><a href=\"#3-1-6-Experience-transformation\" class=\"headerlink\" title=\"3.1.6 Experience transformation\"></a>3.1.6 Experience transformation</h1><hr>\n<h2> Trends in World & East Asia Career: Stacked Scatter plot </h2>\n- < 2 years: 50% of the total. <br>\n- 3-5 years: Decrease in the world, maintain East Asia ratio <br>\n- 2021 'etc data' disappeared. <br>\n\n<p><img src=\"/images/kaggle_final/newplot16.png\"><br><img src=\"/images/kaggle_final/newplot17.png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#Exp data 전처리</span></span><br><span class=\"line\"><span class=\"comment\"># Exp 뽑아오기</span></span><br><span class=\"line\">Exp21_Wo = df21.loc[:,[<span class=\"string\">&#x27;Q3&#x27;</span>,<span class=\"string\">&#x27;Q6&#x27;</span>, <span class=\"string\">&#x27;year&#x27;</span>]].reset_index().rename(columns=&#123;<span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;Country&#x27;</span>, <span class=\"string\">&#x27;Q6&#x27;</span>:<span class=\"string\">&#x27;Exp&#x27;</span>&#125;).fillna(<span class=\"string\">&#x27;etc&#x27;</span>)</span><br><span class=\"line\">Exp20_Wo = df20.loc[:,[<span class=\"string\">&#x27;Q3&#x27;</span>,<span class=\"string\">&#x27;Q6&#x27;</span>,<span class=\"string\">&#x27;year&#x27;</span>]].reset_index().rename(columns=&#123;<span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;Country&#x27;</span>, <span class=\"string\">&#x27;Q6&#x27;</span>:<span class=\"string\">&#x27;Exp&#x27;</span>&#125;).fillna(<span class=\"string\">&#x27;etc&#x27;</span>)</span><br><span class=\"line\">Exp19_Wo = df19.loc[:,[<span class=\"string\">&#x27;Q3&#x27;</span>,<span class=\"string\">&#x27;Q15&#x27;</span>,<span class=\"string\">&#x27;year&#x27;</span>]].reset_index().rename(columns=&#123;<span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;Country&#x27;</span>, <span class=\"string\">&#x27;Q15&#x27;</span>:<span class=\"string\">&#x27;Exp&#x27;</span>&#125;).fillna(<span class=\"string\">&#x27;etc&#x27;</span>)</span><br><span class=\"line\">Exp18_Wo = df18.loc[:,[<span class=\"string\">&#x27;Q3&#x27;</span>,<span class=\"string\">&#x27;Q8&#x27;</span>,<span class=\"string\">&#x27;year&#x27;</span>]].reset_index().rename(columns=&#123;<span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;Country&#x27;</span>, <span class=\"string\">&#x27;Q8&#x27;</span>:<span class=\"string\">&#x27;Exp&#x27;</span>&#125;).fillna(<span class=\"string\">&#x27;etc&#x27;</span>)</span><br><span class=\"line\">Exp17_Wo = df17.loc[:,[<span class=\"string\">&#x27;Country&#x27;</span>,<span class=\"string\">&#x27;Tenure&#x27;</span>, <span class=\"string\">&#x27;year&#x27;</span>]].reset_index().rename(columns=&#123;<span class=\"string\">&#x27;Country&#x27;</span>:<span class=\"string\">&#x27;Country&#x27;</span>, <span class=\"string\">&#x27;Tenure&#x27;</span>:<span class=\"string\">&#x27;Exp&#x27;</span>&#125;).fillna(<span class=\"string\">&#x27;etc&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">Exp21_Wo= Exp21_Wo.replace(&#123;<span class=\"string\">&#x27;I have never written code&#x27;</span>: <span class=\"string\">&#x27;&lt; 1 years&#x27;</span>,  <span class=\"string\">&#x27;1-3 years&#x27;</span>: <span class=\"string\">&#x27;1-2 years&#x27;</span>&#125;).replace([<span class=\"string\">&#x27;10-20 years&#x27;</span>, <span class=\"string\">&#x27;20+ years&#x27;</span>], <span class=\"string\">&#x27;10+ years&#x27;</span> )</span><br><span class=\"line\">Exp20_Wo= Exp20_Wo.replace(&#123;<span class=\"string\">&#x27;I have never written code&#x27;</span>: <span class=\"string\">&#x27;&lt; 1 years&#x27;</span>&#125;).replace([<span class=\"string\">&#x27;10-20 years&#x27;</span>, <span class=\"string\">&#x27;20+ years&#x27;</span>], <span class=\"string\">&#x27;10+ years&#x27;</span> )</span><br><span class=\"line\">Exp19_Wo= Exp19_Wo.replace(&#123;<span class=\"string\">&#x27;I have never written code&#x27;</span>: <span class=\"string\">&#x27;&lt; 1 years&#x27;</span>&#125;).replace([<span class=\"string\">&#x27;10-20 years&#x27;</span>, <span class=\"string\">&#x27;20+ years&#x27;</span>], <span class=\"string\">&#x27;10+ years&#x27;</span> )</span><br><span class=\"line\">Exp18_Wo= (Exp18_Wo.replace(&#123;<span class=\"string\">&#x27;0-1&#x27;</span>: <span class=\"string\">&#x27;&lt; 1 years&#x27;</span>, <span class=\"string\">&#x27;1-2&#x27;</span>: <span class=\"string\">&#x27;1-2 years&#x27;</span>, <span class=\"string\">&#x27;5-10&#x27;</span>:<span class=\"string\">&#x27;5-10 years&#x27;</span>&#125;)</span><br><span class=\"line\">        .replace([<span class=\"string\">&#x27;2-3&#x27;</span>, <span class=\"string\">&#x27;3-4&#x27;</span>,  <span class=\"string\">&#x27;4-5&#x27;</span>],<span class=\"string\">&#x27;3-5 years&#x27;</span>)</span><br><span class=\"line\">       .replace([<span class=\"string\">&#x27;10-15&#x27;</span>, <span class=\"string\">&#x27;15-20&#x27;</span>,<span class=\"string\">&#x27;20-25&#x27;</span>, <span class=\"string\">&#x27;30 +&#x27;</span>,<span class=\"string\">&#x27;25-30&#x27;</span>],<span class=\"string\">&#x27;10+ years&#x27;</span>))</span><br><span class=\"line\">Exp17_Wo=(Exp17_Wo.replace(&#123;<span class=\"string\">&#x27;More than 10 years&#x27;</span>:<span class=\"string\">&#x27;10+ years&#x27;</span>, <span class=\"string\">&#x27;1 to 2 years&#x27;</span>:<span class=\"string\">&#x27;1-2 years&#x27;</span>,  <span class=\"string\">&#x27;Less than a year&#x27;</span>:<span class=\"string\">&#x27;&lt; 1 years&#x27;</span>,</span><br><span class=\"line\">       <span class=\"string\">&#x27;3 to 5 years&#x27;</span>:<span class=\"string\">&#x27;3-5 years&#x27;</span>, <span class=\"string\">&quot;I don&#x27;t write code to analyze data&quot;</span>:<span class=\"string\">&#x27;&lt; 1 years&#x27;</span>,</span><br><span class=\"line\">       <span class=\"string\">&#x27;6 to 10 years&#x27;</span>:<span class=\"string\">&#x27;5-10 years&#x27;</span>&#125;))</span><br><span class=\"line\">                                                                                                                   </span><br><span class=\"line\"><span class=\"comment\">#data 정제(한꺼번에 이름바꾸기)</span></span><br><span class=\"line\">Exp5y_Wo= pd.concat([Exp17_Wo, Exp18_Wo, Exp19_Wo, Exp20_Wo, Exp21_Wo]).reset_index()</span><br><span class=\"line\">Exp5y_Wo=(Exp5y_Wo.groupby([<span class=\"string\">&#x27;year&#x27;</span>, <span class=\"string\">&#x27;Exp&#x27;</span>])</span><br><span class=\"line\">           .size()</span><br><span class=\"line\">           .reset_index()</span><br><span class=\"line\">           .rename(columns = &#123;<span class=\"number\">0</span>:<span class=\"string\">&quot;Count&quot;</span>&#125;))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#percent data 넣기</span></span><br><span class=\"line\">Exp21_per_W= Exp5y_Wo[Exp5y_Wo[<span class=\"string\">&#x27;year&#x27;</span>] == <span class=\"string\">&quot;2021&quot;</span>].reset_index(drop = <span class=\"literal\">True</span>)</span><br><span class=\"line\">Exp21_per_W[<span class=\"string\">&#x27;percentage&#x27;</span>] = Exp21_per_W[<span class=\"string\">&quot;Count&quot;</span>] / Exp21_per_W[<span class=\"string\">&quot;Count&quot;</span>].<span class=\"built_in\">sum</span>()</span><br><span class=\"line\">Exp21_per_W[<span class=\"string\">&#x27;%&#x27;</span>] = np.<span class=\"built_in\">round</span>(Exp21_per_W[<span class=\"string\">&#x27;percentage&#x27;</span>] * <span class=\"number\">100</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">Exp20_per_W = Exp5y_Wo[Exp5y_Wo[<span class=\"string\">&#x27;year&#x27;</span>] == <span class=\"string\">&quot;2020&quot;</span>].reset_index(drop = <span class=\"literal\">True</span>)</span><br><span class=\"line\">Exp20_per_W[<span class=\"string\">&#x27;percentage&#x27;</span>] = Exp20_per_W[<span class=\"string\">&quot;Count&quot;</span>] / Exp20_per_W[<span class=\"string\">&quot;Count&quot;</span>].<span class=\"built_in\">sum</span>()</span><br><span class=\"line\">Exp20_per_W[<span class=\"string\">&#x27;%&#x27;</span>] = np.<span class=\"built_in\">round</span>(Exp20_per_W[<span class=\"string\">&#x27;percentage&#x27;</span>] * <span class=\"number\">100</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">Exp19_per_W = Exp5y_Wo[Exp5y_Wo[<span class=\"string\">&#x27;year&#x27;</span>] == <span class=\"string\">&quot;2019&quot;</span>].reset_index(drop = <span class=\"literal\">True</span>)</span><br><span class=\"line\">Exp19_per_W[<span class=\"string\">&#x27;percentage&#x27;</span>] = Exp19_per_W[<span class=\"string\">&quot;Count&quot;</span>] / Exp19_per_W[<span class=\"string\">&quot;Count&quot;</span>].<span class=\"built_in\">sum</span>()</span><br><span class=\"line\">Exp19_per_W[<span class=\"string\">&#x27;%&#x27;</span>] = np.<span class=\"built_in\">round</span>(Exp19_per_W[<span class=\"string\">&#x27;percentage&#x27;</span>] * <span class=\"number\">100</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">Exp18_per_W = Exp5y_Wo[Exp5y_Wo[<span class=\"string\">&#x27;year&#x27;</span>] == <span class=\"string\">&quot;2018&quot;</span>].reset_index(drop = <span class=\"literal\">True</span>)</span><br><span class=\"line\">Exp18_per_W[<span class=\"string\">&#x27;percentage&#x27;</span>] = Exp18_per_W[<span class=\"string\">&quot;Count&quot;</span>] / Exp18_per_W[<span class=\"string\">&quot;Count&quot;</span>].<span class=\"built_in\">sum</span>()</span><br><span class=\"line\">Exp18_per_W[<span class=\"string\">&#x27;%&#x27;</span>] = np.<span class=\"built_in\">round</span>(Exp18_per_W[<span class=\"string\">&#x27;percentage&#x27;</span>] * <span class=\"number\">100</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">Exp17_per_W = Exp5y_Wo[Exp5y_Wo[<span class=\"string\">&#x27;year&#x27;</span>] == <span class=\"string\">&quot;2017&quot;</span>].reset_index(drop = <span class=\"literal\">True</span>)</span><br><span class=\"line\">Exp17_per_W[<span class=\"string\">&#x27;percentage&#x27;</span>] = Exp17_per_W[<span class=\"string\">&quot;Count&quot;</span>] / Exp17_per_W[<span class=\"string\">&quot;Count&quot;</span>].<span class=\"built_in\">sum</span>()</span><br><span class=\"line\">Exp17_per_W[<span class=\"string\">&#x27;%&#x27;</span>] = np.<span class=\"built_in\">round</span>(Exp17_per_W[<span class=\"string\">&#x27;percentage&#x27;</span>] * <span class=\"number\">100</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#data 완성</span></span><br><span class=\"line\">Exp5y_per_W = pd.concat([Exp17_per_W, Exp18_per_W, Exp19_per_W, Exp20_per_W, Exp21_per_W], ignore_index = <span class=\"literal\">True</span>)</span><br><span class=\"line\">Exp5y_per_W= pd.pivot(Exp5y_per_W, index = <span class=\"string\">&quot;year&quot;</span>, columns = <span class=\"string\">&#x27;Exp&#x27;</span>, values = <span class=\"string\">&quot;%&quot;</span>).reset_index()</span><br><span class=\"line\">Exp5y_per_W.fillna(<span class=\"string\">&#x27;0&#x27;</span>)</span><br><span class=\"line\">Exp5y_percent_order = Exp5y_per_W[<span class=\"string\">&#x27;year&#x27;</span>].tolist()</span><br><span class=\"line\"></span><br><span class=\"line\">fig = go.Figure()</span><br><span class=\"line\">fig.add_trace(go.Scatter(</span><br><span class=\"line\">    x = Exp5y_percent_order, </span><br><span class=\"line\">    y = Exp5y_per_W[<span class=\"string\">&#x27;&lt; 1 years&#x27;</span>].tolist(), </span><br><span class=\"line\">    mode = <span class=\"string\">&quot;lines&quot;</span>, </span><br><span class=\"line\">    name = <span class=\"string\">&#x27;&lt; 1 years&#x27;</span>,</span><br><span class=\"line\">    line = <span class=\"built_in\">dict</span>(width = <span class=\"number\">0.5</span>),</span><br><span class=\"line\">    stackgroup = <span class=\"string\">&quot;one&quot;</span>,</span><br><span class=\"line\">    marker_color=<span class=\"string\">&#x27;#F2798F&#x27;</span>))</span><br><span class=\"line\">fig.add_trace(go.Scatter(</span><br><span class=\"line\">    x = Exp5y_percent_order, </span><br><span class=\"line\">    y = Exp5y_per_W[<span class=\"string\">&#x27;1-2 years&#x27;</span>].tolist(), </span><br><span class=\"line\">    mode = <span class=\"string\">&quot;lines&quot;</span>, </span><br><span class=\"line\">    name = <span class=\"string\">&#x27;1-2 years&#x27;</span>,</span><br><span class=\"line\">    line = <span class=\"built_in\">dict</span>(width = <span class=\"number\">0.5</span>),</span><br><span class=\"line\">    stackgroup = <span class=\"string\">&quot;one&quot;</span>,</span><br><span class=\"line\">    marker_color=<span class=\"string\">&#x27;#88BFBA&#x27;</span>))</span><br><span class=\"line\">fig.add_trace(go.Scatter(</span><br><span class=\"line\">    x = Exp5y_percent_order, </span><br><span class=\"line\">    y = Exp5y_per_W[<span class=\"string\">&#x27;3-5 years&#x27;</span>].tolist(), </span><br><span class=\"line\">    mode = <span class=\"string\">&quot;lines&quot;</span>, </span><br><span class=\"line\">    name = <span class=\"string\">&#x27;3-5 years&#x27;</span>,</span><br><span class=\"line\">    line = <span class=\"built_in\">dict</span>(width = <span class=\"number\">0.5</span>),</span><br><span class=\"line\">    stackgroup = <span class=\"string\">&quot;one&quot;</span>,</span><br><span class=\"line\">    marker_color=<span class=\"string\">&#x27;#CDD9A3&#x27;</span>))</span><br><span class=\"line\">fig.add_trace(go.Scatter(</span><br><span class=\"line\">    x = Exp5y_percent_order, </span><br><span class=\"line\">    y = Exp5y_per_W[<span class=\"string\">&#x27;5-10 years&#x27;</span>].tolist(), </span><br><span class=\"line\">    mode = <span class=\"string\">&quot;lines&quot;</span>, </span><br><span class=\"line\">    name = <span class=\"string\">&#x27;5-10 years&#x27;</span>,</span><br><span class=\"line\">    line = <span class=\"built_in\">dict</span>(width = <span class=\"number\">0.5</span>),</span><br><span class=\"line\">    stackgroup = <span class=\"string\">&quot;one&quot;</span>,</span><br><span class=\"line\">    marker_color=<span class=\"string\">&#x27;#F28705&#x27;</span>))</span><br><span class=\"line\">fig.add_trace(go.Scatter(</span><br><span class=\"line\">    x = Exp5y_percent_order, </span><br><span class=\"line\">    y = Exp5y_per_W[<span class=\"string\">&#x27;10+ years&#x27;</span>].tolist(), </span><br><span class=\"line\">    mode = <span class=\"string\">&quot;lines&quot;</span>, </span><br><span class=\"line\">    name = <span class=\"string\">&#x27;10+ years&#x27;</span>,</span><br><span class=\"line\">    line = <span class=\"built_in\">dict</span>(width = <span class=\"number\">0.5</span>),</span><br><span class=\"line\">    stackgroup = <span class=\"string\">&quot;one&quot;</span>,</span><br><span class=\"line\">    marker_color=<span class=\"string\">&#x27;#D9946C&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_trace(go.Scatter(</span><br><span class=\"line\">    x = Exp5y_percent_order, </span><br><span class=\"line\">    y = Exp5y_per_W[<span class=\"string\">&#x27;etc&#x27;</span>].tolist(), </span><br><span class=\"line\">    mode = <span class=\"string\">&quot;lines&quot;</span>, </span><br><span class=\"line\">    name = <span class=\"string\">&#x27;etc&#x27;</span>,</span><br><span class=\"line\">    line = <span class=\"built_in\">dict</span>(width = <span class=\"number\">1</span>),</span><br><span class=\"line\">    stackgroup = <span class=\"string\">&quot;one&quot;</span>,</span><br><span class=\"line\">    marker_color=<span class=\"string\">&#x27;#F2D64B&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_traces(hovertemplate=<span class=\"string\">&#x27;&lt;b&gt;Percent&lt;/b&gt;: %&#123;y&#125;%&lt;br&gt;&#x27;</span>)</span><br><span class=\"line\">fig.update_layout(yaxis_range = (<span class=\"number\">0</span>, <span class=\"number\">100</span>), title_font_size=<span class=\"number\">20</span>,</span><br><span class=\"line\">                  title_text=<span class=\"string\">&quot;&lt;b&gt;Experience in world&lt;/b&gt;&quot;</span>,</span><br><span class=\"line\">                  height=<span class=\"number\">500</span>, width=<span class=\"number\">700</span>,</span><br><span class=\"line\">                  title_x=<span class=\"number\">0.5</span>)</span><br><span class=\"line\">fig.update_xaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\">fig.update_yaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">14</span>),</span><br><span class=\"line\">                                    x=<span class=\"number\">0.8</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.2</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;@green_yhjw&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\">fig.show()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#data preprocessing</span></span><br><span class=\"line\">Exp21 = df21_Ea.loc[:,[<span class=\"string\">&#x27;Q3&#x27;</span>,<span class=\"string\">&#x27;Q6&#x27;</span>, <span class=\"string\">&#x27;year&#x27;</span>]].reset_index().rename(columns=&#123;<span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;East_Asia&#x27;</span>, <span class=\"string\">&#x27;Q6&#x27;</span>:<span class=\"string\">&#x27;Exp&#x27;</span>&#125;).fillna(<span class=\"string\">&#x27;etc&#x27;</span>)</span><br><span class=\"line\">Exp20 = df20_Ea.loc[:,[<span class=\"string\">&#x27;Q3&#x27;</span>,<span class=\"string\">&#x27;Q6&#x27;</span>,<span class=\"string\">&#x27;year&#x27;</span>]].reset_index().rename(columns=&#123;<span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;East_Asia&#x27;</span>, <span class=\"string\">&#x27;Q6&#x27;</span>:<span class=\"string\">&#x27;Exp&#x27;</span>&#125;).fillna(<span class=\"string\">&#x27;etc&#x27;</span>)</span><br><span class=\"line\">Exp19 = df19_Ea.loc[:,[<span class=\"string\">&#x27;Q3&#x27;</span>,<span class=\"string\">&#x27;Q15&#x27;</span>,<span class=\"string\">&#x27;year&#x27;</span>]].reset_index().rename(columns=&#123;<span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;East_Asia&#x27;</span>, <span class=\"string\">&#x27;Q15&#x27;</span>:<span class=\"string\">&#x27;Exp&#x27;</span>&#125;).fillna(<span class=\"string\">&#x27;etc&#x27;</span>)</span><br><span class=\"line\">Exp18 = df18_Ea.loc[:,[<span class=\"string\">&#x27;Q3&#x27;</span>,<span class=\"string\">&#x27;Q8&#x27;</span>,<span class=\"string\">&#x27;year&#x27;</span>]].reset_index().rename(columns=&#123;<span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;East_Asia&#x27;</span>, <span class=\"string\">&#x27;Q8&#x27;</span>:<span class=\"string\">&#x27;Exp&#x27;</span>&#125;).fillna(<span class=\"string\">&#x27;etc&#x27;</span>)</span><br><span class=\"line\">Exp17 = df17_Ea.loc[:,[<span class=\"string\">&#x27;Country&#x27;</span>,<span class=\"string\">&#x27;Tenure&#x27;</span>, <span class=\"string\">&#x27;year&#x27;</span>]].reset_index().rename(columns=&#123;<span class=\"string\">&#x27;Country&#x27;</span>:<span class=\"string\">&#x27;East_Asia&#x27;</span>, <span class=\"string\">&#x27;Tenure&#x27;</span>:<span class=\"string\">&#x27;Exp&#x27;</span>&#125;).fillna(<span class=\"string\">&#x27;etc&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">Exp21Uni=[<span class=\"string\">&#x27;3-5 years&#x27;</span>, <span class=\"string\">&#x27;&lt; 1 years&#x27;</span>, <span class=\"string\">&#x27;1-3 years&#x27;</span>, <span class=\"string\">&#x27;10-20 years&#x27;</span>,</span><br><span class=\"line\">       <span class=\"string\">&#x27;I have never written code&#x27;</span>, <span class=\"string\">&#x27;5-10 years&#x27;</span>, <span class=\"string\">&#x27;20+ years&#x27;</span>]</span><br><span class=\"line\">Exp20Uni= [<span class=\"string\">&#x27;3-5 years&#x27;</span>, <span class=\"string\">&#x27;&lt; 1 years&#x27;</span>, <span class=\"string\">&#x27;5-10 years&#x27;</span>, <span class=\"string\">&#x27;1-2 years&#x27;</span>, <span class=\"string\">&#x27;etc&#x27;</span>,</span><br><span class=\"line\">       <span class=\"string\">&#x27;20+ years&#x27;</span>, <span class=\"string\">&#x27;10-20 years&#x27;</span>, <span class=\"string\">&#x27;I have never written code&#x27;</span>]</span><br><span class=\"line\">Exp19Uni=[<span class=\"string\">&#x27;1-2 years&#x27;</span>, <span class=\"string\">&#x27;5-10 years&#x27;</span>, <span class=\"string\">&#x27;&lt; 1 years&#x27;</span>,</span><br><span class=\"line\">       <span class=\"string\">&#x27;I have never written code&#x27;</span>, <span class=\"string\">&#x27;3-5 years&#x27;</span>, <span class=\"string\">&#x27;10-20 years&#x27;</span>,</span><br><span class=\"line\">       <span class=\"string\">&#x27;20+ years&#x27;</span>, <span class=\"string\">&#x27;etc&#x27;</span>]</span><br><span class=\"line\">Exp18Uni=[<span class=\"string\">&#x27;0-1&#x27;</span>, <span class=\"string\">&#x27;2-3&#x27;</span>, <span class=\"string\">&#x27;1-2&#x27;</span>, <span class=\"string\">&#x27;5-10&#x27;</span>, <span class=\"string\">&#x27;3-4&#x27;</span>, <span class=\"string\">&#x27;10-15&#x27;</span>, <span class=\"string\">&#x27;15-20&#x27;</span>, <span class=\"string\">&#x27;4-5&#x27;</span>,</span><br><span class=\"line\">       <span class=\"string\">&#x27;20-25&#x27;</span>, <span class=\"string\">&#x27;30 +&#x27;</span>, <span class=\"string\">&#x27;etc&#x27;</span>, <span class=\"string\">&#x27;25-30&#x27;</span>]</span><br><span class=\"line\">Exp17Uni=[<span class=\"string\">&#x27;More than 10 years&#x27;</span>, <span class=\"string\">&#x27;1 to 2 years&#x27;</span>, <span class=\"string\">&#x27;etc&#x27;</span>, <span class=\"string\">&#x27;Less than a year&#x27;</span>,</span><br><span class=\"line\">       <span class=\"string\">&#x27;3 to 5 years&#x27;</span>, <span class=\"string\">&quot;I don&#x27;t write code to analyze data&quot;</span>,</span><br><span class=\"line\">       <span class=\"string\">&#x27;6 to 10 years&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">Exp21= Exp21.replace(&#123;<span class=\"string\">&#x27;I have never written code&#x27;</span>: <span class=\"string\">&#x27;&lt; 1 years&#x27;</span>,  <span class=\"string\">&#x27;1-3 years&#x27;</span>: <span class=\"string\">&#x27;1-2 years&#x27;</span>&#125;).replace([<span class=\"string\">&#x27;10-20 years&#x27;</span>, <span class=\"string\">&#x27;20+ years&#x27;</span>], <span class=\"string\">&#x27;10+ years&#x27;</span> )</span><br><span class=\"line\">Exp20= Exp20.replace(&#123;<span class=\"string\">&#x27;I have never written code&#x27;</span>: <span class=\"string\">&#x27;&lt; 1 years&#x27;</span>&#125;).replace([<span class=\"string\">&#x27;10-20 years&#x27;</span>, <span class=\"string\">&#x27;20+ years&#x27;</span>], <span class=\"string\">&#x27;10+ years&#x27;</span> )</span><br><span class=\"line\">Exp19= Exp19.replace(&#123;<span class=\"string\">&#x27;I have never written code&#x27;</span>: <span class=\"string\">&#x27;&lt; 1 years&#x27;</span>&#125;).replace([<span class=\"string\">&#x27;10-20 years&#x27;</span>, <span class=\"string\">&#x27;20+ years&#x27;</span>], <span class=\"string\">&#x27;10+ years&#x27;</span> )</span><br><span class=\"line\">Exp18= (Exp18.replace(&#123;<span class=\"string\">&#x27;0-1&#x27;</span>: <span class=\"string\">&#x27;&lt; 1 years&#x27;</span>, <span class=\"string\">&#x27;1-2&#x27;</span>: <span class=\"string\">&#x27;1-2 years&#x27;</span>, <span class=\"string\">&#x27;5-10&#x27;</span>:<span class=\"string\">&#x27;5-10 years&#x27;</span>&#125;)</span><br><span class=\"line\">        .replace([<span class=\"string\">&#x27;2-3&#x27;</span>, <span class=\"string\">&#x27;3-4&#x27;</span>,  <span class=\"string\">&#x27;4-5&#x27;</span>],<span class=\"string\">&#x27;3-5 years&#x27;</span>)</span><br><span class=\"line\">       .replace([<span class=\"string\">&#x27;10-15&#x27;</span>, <span class=\"string\">&#x27;15-20&#x27;</span>,<span class=\"string\">&#x27;20-25&#x27;</span>, <span class=\"string\">&#x27;30 +&#x27;</span>,<span class=\"string\">&#x27;25-30&#x27;</span>],<span class=\"string\">&#x27;10+ years&#x27;</span>))</span><br><span class=\"line\">Exp17=(Exp17.replace(&#123;<span class=\"string\">&#x27;More than 10 years&#x27;</span>:<span class=\"string\">&#x27;10+ years&#x27;</span>, <span class=\"string\">&#x27;1 to 2 years&#x27;</span>:<span class=\"string\">&#x27;1-2 years&#x27;</span>,  <span class=\"string\">&#x27;Less than a year&#x27;</span>:<span class=\"string\">&#x27;&lt; 1 years&#x27;</span>,</span><br><span class=\"line\">       <span class=\"string\">&#x27;3 to 5 years&#x27;</span>:<span class=\"string\">&#x27;3-5 years&#x27;</span>, <span class=\"string\">&quot;I don&#x27;t write code to analyze data&quot;</span>:<span class=\"string\">&#x27;&lt; 1 years&#x27;</span>,</span><br><span class=\"line\">       <span class=\"string\">&#x27;6 to 10 years&#x27;</span>:<span class=\"string\">&#x27;5-10 years&#x27;</span>&#125;))</span><br><span class=\"line\">                                                                                                                </span><br><span class=\"line\">Exp5y= pd.concat([Exp17, Exp18, Exp19, Exp20, Exp21]).reset_index()</span><br><span class=\"line\">Exp5y=(Exp5y.groupby([<span class=\"string\">&#x27;year&#x27;</span>, <span class=\"string\">&#x27;Exp&#x27;</span>])</span><br><span class=\"line\">           .size()</span><br><span class=\"line\">           .reset_index()</span><br><span class=\"line\">           .rename(columns = &#123;<span class=\"number\">0</span>:<span class=\"string\">&quot;Count&quot;</span>&#125;))</span><br><span class=\"line\"></span><br><span class=\"line\">Exp21_percent = Exp5y[Exp5y[<span class=\"string\">&#x27;year&#x27;</span>] == <span class=\"string\">&quot;2021&quot;</span>].reset_index(drop = <span class=\"literal\">True</span>)</span><br><span class=\"line\">Exp21_percent[<span class=\"string\">&#x27;percentage&#x27;</span>] = Exp21_percent[<span class=\"string\">&quot;Count&quot;</span>] / Exp21_percent[<span class=\"string\">&quot;Count&quot;</span>].<span class=\"built_in\">sum</span>()</span><br><span class=\"line\">Exp21_percent[<span class=\"string\">&#x27;%&#x27;</span>] = np.<span class=\"built_in\">round</span>(Exp21_percent[<span class=\"string\">&#x27;percentage&#x27;</span>] * <span class=\"number\">100</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">Exp21_percent</span><br><span class=\"line\"></span><br><span class=\"line\">Exp20_percent = Exp5y[Exp5y[<span class=\"string\">&#x27;year&#x27;</span>] == <span class=\"string\">&quot;2020&quot;</span>].reset_index(drop = <span class=\"literal\">True</span>)</span><br><span class=\"line\">Exp20_percent[<span class=\"string\">&#x27;percentage&#x27;</span>] = Exp20_percent[<span class=\"string\">&quot;Count&quot;</span>] / Exp20_percent[<span class=\"string\">&quot;Count&quot;</span>].<span class=\"built_in\">sum</span>()</span><br><span class=\"line\">Exp20_percent[<span class=\"string\">&#x27;%&#x27;</span>] = np.<span class=\"built_in\">round</span>(Exp20_percent[<span class=\"string\">&#x27;percentage&#x27;</span>] * <span class=\"number\">100</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">Exp20_percent</span><br><span class=\"line\"></span><br><span class=\"line\">Exp19_percent = Exp5y[Exp5y[<span class=\"string\">&#x27;year&#x27;</span>] == <span class=\"string\">&quot;2019&quot;</span>].reset_index(drop = <span class=\"literal\">True</span>)</span><br><span class=\"line\">Exp19_percent[<span class=\"string\">&#x27;percentage&#x27;</span>] = Exp19_percent[<span class=\"string\">&quot;Count&quot;</span>] / Exp19_percent[<span class=\"string\">&quot;Count&quot;</span>].<span class=\"built_in\">sum</span>()</span><br><span class=\"line\">Exp19_percent[<span class=\"string\">&#x27;%&#x27;</span>] = np.<span class=\"built_in\">round</span>(Exp19_percent[<span class=\"string\">&#x27;percentage&#x27;</span>] * <span class=\"number\">100</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">Exp19_percent</span><br><span class=\"line\"></span><br><span class=\"line\">Exp18_percent = Exp5y[Exp5y[<span class=\"string\">&#x27;year&#x27;</span>] == <span class=\"string\">&quot;2018&quot;</span>].reset_index(drop = <span class=\"literal\">True</span>)</span><br><span class=\"line\">Exp18_percent[<span class=\"string\">&#x27;percentage&#x27;</span>] = Exp18_percent[<span class=\"string\">&quot;Count&quot;</span>] / Exp18_percent[<span class=\"string\">&quot;Count&quot;</span>].<span class=\"built_in\">sum</span>()</span><br><span class=\"line\">Exp18_percent[<span class=\"string\">&#x27;%&#x27;</span>] = np.<span class=\"built_in\">round</span>(Exp18_percent[<span class=\"string\">&#x27;percentage&#x27;</span>] * <span class=\"number\">100</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">Exp18_percent</span><br><span class=\"line\"></span><br><span class=\"line\">Exp17_percent = Exp5y[Exp5y[<span class=\"string\">&#x27;year&#x27;</span>] == <span class=\"string\">&quot;2017&quot;</span>].reset_index(drop = <span class=\"literal\">True</span>)</span><br><span class=\"line\">Exp17_percent[<span class=\"string\">&#x27;percentage&#x27;</span>] = Exp17_percent[<span class=\"string\">&quot;Count&quot;</span>] / Exp17_percent[<span class=\"string\">&quot;Count&quot;</span>].<span class=\"built_in\">sum</span>()</span><br><span class=\"line\">Exp17_percent[<span class=\"string\">&#x27;%&#x27;</span>] = np.<span class=\"built_in\">round</span>(Exp17_percent[<span class=\"string\">&#x27;percentage&#x27;</span>] * <span class=\"number\">100</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">Exp17_percent</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#graph</span></span><br><span class=\"line\">Exp5y_percent = pd.concat([Exp17_percent, Exp18_percent, Exp19_percent, Exp20_percent, Exp21_percent], ignore_index = <span class=\"literal\">True</span>)</span><br><span class=\"line\">Exp5y_percent= pd.pivot(Exp5y_percent, index = <span class=\"string\">&quot;year&quot;</span>, columns = <span class=\"string\">&#x27;Exp&#x27;</span>, values = <span class=\"string\">&quot;%&quot;</span>).reset_index()</span><br><span class=\"line\">Exp5y_percent.fillna(<span class=\"string\">&#x27;0&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">Exp5y_percent_order = Exp5y_percent[<span class=\"string\">&#x27;year&#x27;</span>].tolist()</span><br><span class=\"line\"></span><br><span class=\"line\">fig = go.Figure()</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_trace(go.Scatter(</span><br><span class=\"line\">    x = Exp5y_percent_order, </span><br><span class=\"line\">    y = Exp5y_percent[<span class=\"string\">&#x27;&lt; 1 years&#x27;</span>].tolist(), </span><br><span class=\"line\">    mode = <span class=\"string\">&quot;lines&quot;</span>, </span><br><span class=\"line\">    name = <span class=\"string\">&#x27;&lt; 1 years&#x27;</span>,</span><br><span class=\"line\">    line = <span class=\"built_in\">dict</span>(width = <span class=\"number\">0.5</span>),</span><br><span class=\"line\">    stackgroup = <span class=\"string\">&quot;one&quot;</span>,</span><br><span class=\"line\">    marker_color=<span class=\"string\">&#x27;#F2798F&#x27;</span>))</span><br><span class=\"line\">fig.add_trace(go.Scatter(</span><br><span class=\"line\">    x = Exp5y_percent_order, </span><br><span class=\"line\">    y = Exp5y_percent[<span class=\"string\">&#x27;1-2 years&#x27;</span>].tolist(), </span><br><span class=\"line\">    mode = <span class=\"string\">&quot;lines&quot;</span>, </span><br><span class=\"line\">    name = <span class=\"string\">&#x27;1-2 years&#x27;</span>,</span><br><span class=\"line\">    line = <span class=\"built_in\">dict</span>(width = <span class=\"number\">0.5</span>),</span><br><span class=\"line\">    stackgroup = <span class=\"string\">&quot;one&quot;</span>,</span><br><span class=\"line\">    marker_color=<span class=\"string\">&#x27;#88BFBA&#x27;</span>))</span><br><span class=\"line\">fig.add_trace(go.Scatter(</span><br><span class=\"line\">    x = Exp5y_percent_order, </span><br><span class=\"line\">    y = Exp5y_percent[<span class=\"string\">&#x27;3-5 years&#x27;</span>].tolist(), </span><br><span class=\"line\">    mode = <span class=\"string\">&quot;lines&quot;</span>, </span><br><span class=\"line\">    name = <span class=\"string\">&#x27;3-5 years&#x27;</span>,</span><br><span class=\"line\">    line = <span class=\"built_in\">dict</span>(width = <span class=\"number\">0.5</span>),</span><br><span class=\"line\">    stackgroup = <span class=\"string\">&quot;one&quot;</span>,</span><br><span class=\"line\">    marker_color=<span class=\"string\">&#x27;#CDD9A3&#x27;</span>))</span><br><span class=\"line\">fig.add_trace(go.Scatter(</span><br><span class=\"line\">    x = Exp5y_percent_order, </span><br><span class=\"line\">    y = Exp5y_percent[<span class=\"string\">&#x27;5-10 years&#x27;</span>].tolist(), </span><br><span class=\"line\">    mode = <span class=\"string\">&quot;lines&quot;</span>, </span><br><span class=\"line\">    name = <span class=\"string\">&#x27;5-10 years&#x27;</span>,</span><br><span class=\"line\">    line = <span class=\"built_in\">dict</span>(width = <span class=\"number\">0.5</span>),</span><br><span class=\"line\">    stackgroup = <span class=\"string\">&quot;one&quot;</span>,</span><br><span class=\"line\">    marker_color=<span class=\"string\">&#x27;#F28705&#x27;</span>))</span><br><span class=\"line\">fig.add_trace(go.Scatter(</span><br><span class=\"line\">    x = Exp5y_percent_order, </span><br><span class=\"line\">    y = Exp5y_percent[<span class=\"string\">&#x27;10+ years&#x27;</span>].tolist(), </span><br><span class=\"line\">    mode = <span class=\"string\">&quot;lines&quot;</span>, </span><br><span class=\"line\">    name = <span class=\"string\">&#x27;10+ years&#x27;</span>,</span><br><span class=\"line\">    line = <span class=\"built_in\">dict</span>(width = <span class=\"number\">0.5</span>),</span><br><span class=\"line\">    stackgroup = <span class=\"string\">&quot;one&quot;</span>,</span><br><span class=\"line\">    marker_color=<span class=\"string\">&#x27;#D9946C&#x27;</span>))</span><br><span class=\"line\">fig.add_trace(go.Scatter(</span><br><span class=\"line\">    x = Exp5y_percent_order, </span><br><span class=\"line\">    y = Exp5y_percent[<span class=\"string\">&#x27;etc&#x27;</span>].tolist(), </span><br><span class=\"line\">    mode = <span class=\"string\">&quot;lines&quot;</span>, </span><br><span class=\"line\">    name = <span class=\"string\">&#x27;etc&#x27;</span>,</span><br><span class=\"line\">    line = <span class=\"built_in\">dict</span>(width = <span class=\"number\">0.5</span>),</span><br><span class=\"line\">    stackgroup = <span class=\"string\">&quot;one&quot;</span>,</span><br><span class=\"line\">    marker_color=<span class=\"string\">&#x27;#F2D64B&#x27;</span>))</span><br><span class=\"line\">fig.update_traces(hovertemplate=<span class=\"string\">&#x27;&lt;b&gt;Percent&lt;/b&gt;: %&#123;y&#125;%&lt;br&gt;&#x27;</span>)</span><br><span class=\"line\">fig.update_layout(yaxis_range = (<span class=\"number\">0</span>, <span class=\"number\">100</span>),</span><br><span class=\"line\">                  title_text=<span class=\"string\">&quot;&lt;b&gt;Experience in East Asia&lt;/b&gt;&quot;</span>,</span><br><span class=\"line\">                  height=<span class=\"number\">500</span>, width=<span class=\"number\">700</span>, title_font_size=<span class=\"number\">20</span>,</span><br><span class=\"line\">                  title_x=<span class=\"number\">0.5</span>)</span><br><span class=\"line\">fig.update_xaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\">fig.update_yaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">14</span>),</span><br><span class=\"line\">                                    x=<span class=\"number\">0.8</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.2</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;@green_yhjw&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-1-7-Salary-transformation\"><a href=\"#3-1-7-Salary-transformation\" class=\"headerlink\" title=\"3.1.7 Salary transformation\"></a>3.1.7 Salary transformation</h1><hr>\n<h2> World & East Asia Annual salary: Bar-H plot\n</h2>\n\n<ul>\n<li>$ 200,000 ~ : World (2.9%) is more than 50% compared to East Asia (1.3%)</li>\n<li>$ ~250,000 : World (59.2%) is less than East Asia (50.3%) <br><br>  = East Asia’s annual salary gap between rich and poor is less.</li>\n<li>$ 25,000~60,000: The highest section in East Asia at 24%. <br><br>= The annual salary section that we aim for.</li>\n</ul>\n<p><img src=\"/images/kaggle_final/newplot18.png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#data preprocessing</span></span><br><span class=\"line\">df21_salary_=df21[<span class=\"string\">&#x27;Q25&#x27;</span>].value_counts().to_frame().rename(index=&#123;<span class=\"string\">&#x27;$0-999&#x27;</span>:<span class=\"string\">&#x27;&lt;999&#x27;</span>,<span class=\"string\">&#x27;&gt;$1,000,000&#x27;</span>:<span class=\"string\">&#x27;1,000,000~&#x27;</span>,<span class=\"string\">&#x27;$500,000-999,999&#x27;</span>:<span class=\"string\">&#x27;500,000-999,999&#x27;</span>&#125;).fillna(<span class=\"number\">0</span>)</span><br><span class=\"line\">df21_Ea_salary_=df21_Ea[<span class=\"string\">&#x27;Q25&#x27;</span>].value_counts().to_frame().rename(index=&#123;<span class=\"string\">&#x27;$0-999&#x27;</span>:<span class=\"string\">&#x27;&lt;999&#x27;</span>,<span class=\"string\">&#x27;&gt;$1,000,000&#x27;</span>:<span class=\"string\">&#x27;1,000,000~&#x27;</span>,<span class=\"string\">&#x27;$500,000-999,999&#x27;</span>:<span class=\"string\">&#x27;500,000-999,999&#x27;</span>&#125;).fillna(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#퍼센트</span></span><br><span class=\"line\">df21_salary__=(df21_salary_[<span class=\"string\">&#x27;Q25&#x27;</span>]/(df21_salary_[<span class=\"string\">&#x27;Q25&#x27;</span>].<span class=\"built_in\">sum</span>())*<span class=\"number\">100</span>).<span class=\"built_in\">round</span>(<span class=\"number\">1</span>).to_frame().rename(columns=&#123;<span class=\"string\">&#x27;Q25&#x27;</span>:<span class=\"string\">&#x27;World&#x27;</span>&#125;)</span><br><span class=\"line\">df21_Ea_salary__=(df21_Ea_salary_[<span class=\"string\">&#x27;Q25&#x27;</span>]/(df21_Ea_salary_[<span class=\"string\">&#x27;Q25&#x27;</span>].<span class=\"built_in\">sum</span>())*<span class=\"number\">100</span>).<span class=\"built_in\">round</span>(<span class=\"number\">1</span>).to_frame().rename(columns=&#123;<span class=\"string\">&#x27;Q25&#x27;</span>:<span class=\"string\">&#x27;EA&#x27;</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#그룹화</span></span><br><span class=\"line\">df21_salary=(df21_salary__.rename(index=</span><br><span class=\"line\">                               &#123;<span class=\"string\">&#x27;1,000-1,999&#x27;</span>:<span class=\"string\">&#x27;1,000-7,499&#x27;</span>,</span><br><span class=\"line\">                                <span class=\"string\">&#x27;2,000-2,999&#x27;</span>:<span class=\"string\">&#x27;1,000-7,499&#x27;</span>,</span><br><span class=\"line\">                                <span class=\"string\">&#x27;3,000-3,999&#x27;</span>:<span class=\"string\">&#x27;1,000-7,499&#x27;</span>,</span><br><span class=\"line\">                                <span class=\"string\">&#x27;4,000-4,999&#x27;</span>:<span class=\"string\">&#x27;1,000-7,499&#x27;</span>,</span><br><span class=\"line\">                                <span class=\"string\">&#x27;5,000-7,499&#x27;</span>:<span class=\"string\">&#x27;1,000-7,499&#x27;</span>&#125;)</span><br><span class=\"line\">                                .rename(index=&#123;<span class=\"string\">&#x27;7,500-9,999&#x27;</span>:<span class=\"string\">&#x27;7,500-24,999&#x27;</span>,</span><br><span class=\"line\">                                <span class=\"string\">&#x27;10,000-14,999&#x27;</span>:<span class=\"string\">&#x27;7,500-24,999&#x27;</span>,</span><br><span class=\"line\">                                <span class=\"string\">&#x27;15,000-19,999&#x27;</span>:<span class=\"string\">&#x27;7,500-24,999&#x27;</span>,</span><br><span class=\"line\">                                <span class=\"string\">&#x27;20,000-24,999&#x27;</span>:<span class=\"string\">&#x27;7,500-24,999&#x27;</span> &#125;)</span><br><span class=\"line\">                                .rename(index=&#123;<span class=\"string\">&#x27;25,000-29,999&#x27;</span>:<span class=\"string\">&#x27;25,000-59,999&#x27;</span>,</span><br><span class=\"line\">                                 <span class=\"string\">&#x27;30,000-39,999&#x27;</span>:<span class=\"string\">&#x27;25,000-59,999&#x27;</span>,</span><br><span class=\"line\">                                 <span class=\"string\">&#x27;40,000-49,999&#x27;</span>:<span class=\"string\">&#x27;25,000-59,999&#x27;</span>,</span><br><span class=\"line\">                                 <span class=\"string\">&#x27;50,000-59,999&#x27;</span>:<span class=\"string\">&#x27;25,000-59,999&#x27;</span>&#125;)</span><br><span class=\"line\">                                .rename(index=&#123;<span class=\"string\">&#x27;60,000-69,999&#x27;</span>:<span class=\"string\">&#x27;60,000-99,999&#x27;</span>,</span><br><span class=\"line\">                                 <span class=\"string\">&#x27;70,000-79,999&#x27;</span>:<span class=\"string\">&#x27;60,000-99,999&#x27;</span>,</span><br><span class=\"line\">                                 <span class=\"string\">&#x27;80,000-89,999&#x27;</span>:<span class=\"string\">&#x27;60,000-99,999&#x27;</span>,</span><br><span class=\"line\">                                 <span class=\"string\">&#x27;90,000-99,999&#x27;</span>:<span class=\"string\">&#x27;60,000-99,999&#x27;</span>&#125;)</span><br><span class=\"line\">                                .rename(index=&#123;<span class=\"string\">&#x27;100,000-124,999&#x27;</span>:<span class=\"string\">&#x27;100,000-199,999&#x27;</span>,</span><br><span class=\"line\">                                 <span class=\"string\">&#x27;125,000-149,999&#x27;</span>:<span class=\"string\">&#x27;100,000-199,999&#x27;</span>,</span><br><span class=\"line\">                                 <span class=\"string\">&#x27;150,000-199,999&#x27;</span>:<span class=\"string\">&#x27;100,000-199,999&#x27;</span>&#125;)</span><br><span class=\"line\">                                .rename(index=&#123;<span class=\"string\">&#x27;200,000-249,999&#x27;</span>:<span class=\"string\">&#x27;200,000-1,000,000~&#x27;</span>,</span><br><span class=\"line\">                                 <span class=\"string\">&#x27;250,000-299,999&#x27;</span>:<span class=\"string\">&#x27;200,000-1,000,000~&#x27;</span>,</span><br><span class=\"line\">                                 <span class=\"string\">&#x27;300,000-499,999&#x27;</span>:<span class=\"string\">&#x27;200,000-1,000,000~&#x27;</span>,</span><br><span class=\"line\">                                 <span class=\"string\">&#x27;500,000-999,999&#x27;</span>:<span class=\"string\">&#x27;200,000-1,000,000~&#x27;</span>,</span><br><span class=\"line\">                                 <span class=\"string\">&#x27;1,000,000~&#x27;</span>:<span class=\"string\">&#x27;200,000-1,000,000~&#x27;</span>&#125;)</span><br><span class=\"line\">                                .reset_index().groupby(<span class=\"string\">&#x27;index&#x27;</span>).<span class=\"built_in\">sum</span>()</span><br><span class=\"line\">                                 .reindex(index = [<span class=\"string\">&#x27;&lt;999&#x27;</span>, </span><br><span class=\"line\">                                                  <span class=\"string\">&#x27;1,000-7,499&#x27;</span>,</span><br><span class=\"line\">                                                  <span class=\"string\">&#x27;7,500-24,999&#x27;</span>, </span><br><span class=\"line\">                                                  <span class=\"string\">&#x27;25,000-59,999&#x27;</span>, </span><br><span class=\"line\">                                                  <span class=\"string\">&#x27;60,000-99,999&#x27;</span>, </span><br><span class=\"line\">                                                 <span class=\"string\">&#x27;100,000-199,999&#x27;</span>, </span><br><span class=\"line\">                                                 <span class=\"string\">&#x27;200,000-1,000,000~&#x27;</span>]))</span><br><span class=\"line\"></span><br><span class=\"line\">df21_Ea_salary=(df21_Ea_salary__.rename(index=</span><br><span class=\"line\">                               &#123;<span class=\"string\">&#x27;1,000-1,999&#x27;</span>:<span class=\"string\">&#x27;1,000-7,499&#x27;</span>,</span><br><span class=\"line\">                               <span class=\"string\">&#x27;2,000-2,999&#x27;</span>:<span class=\"string\">&#x27;1,000-7,499&#x27;</span>,</span><br><span class=\"line\">                               <span class=\"string\">&#x27;3,000-3,999&#x27;</span>:<span class=\"string\">&#x27;1,000-7,499&#x27;</span>,</span><br><span class=\"line\">                               <span class=\"string\">&#x27;4,000-4,999&#x27;</span>:<span class=\"string\">&#x27;1,000-7,499&#x27;</span>,</span><br><span class=\"line\">                               <span class=\"string\">&#x27;5,000-7,499&#x27;</span>:<span class=\"string\">&#x27;1,000-7,499&#x27;</span>&#125;)</span><br><span class=\"line\">                                .rename(index=&#123;<span class=\"string\">&#x27;7,500-9,999&#x27;</span>:<span class=\"string\">&#x27;7,500-24,999&#x27;</span>,</span><br><span class=\"line\">                               <span class=\"string\">&#x27;10,000-14,999&#x27;</span>:<span class=\"string\">&#x27;7,500-24,999&#x27;</span>,</span><br><span class=\"line\">                               <span class=\"string\">&#x27;15,000-19,999&#x27;</span>:<span class=\"string\">&#x27;7,500-24,999&#x27;</span>,</span><br><span class=\"line\">                               <span class=\"string\">&#x27;20,000-24,999&#x27;</span>:<span class=\"string\">&#x27;7,500-24,999&#x27;</span>&#125;)</span><br><span class=\"line\">                                .rename(index=&#123;<span class=\"string\">&#x27;25,000-29,999&#x27;</span>:<span class=\"string\">&#x27;25,000-59,999&#x27;</span>,</span><br><span class=\"line\">                               <span class=\"string\">&#x27;30,000-39,999&#x27;</span>:<span class=\"string\">&#x27;25,000-59,999&#x27;</span>,</span><br><span class=\"line\">                               <span class=\"string\">&#x27;40,000-49,999&#x27;</span>:<span class=\"string\">&#x27;25,000-59,999&#x27;</span>,</span><br><span class=\"line\">                               <span class=\"string\">&#x27;50,000-59,999&#x27;</span>:<span class=\"string\">&#x27;25,000-59,999&#x27;</span>&#125;)</span><br><span class=\"line\">                                .rename(index=&#123;<span class=\"string\">&#x27;60,000-69,999&#x27;</span>:<span class=\"string\">&#x27;60,000-99,999&#x27;</span>,</span><br><span class=\"line\">                               <span class=\"string\">&#x27;70,000-79,999&#x27;</span>:<span class=\"string\">&#x27;60,000-99,999&#x27;</span>,</span><br><span class=\"line\">                               <span class=\"string\">&#x27;80,000-89,999&#x27;</span>:<span class=\"string\">&#x27;60,000-99,999&#x27;</span>,</span><br><span class=\"line\">                               <span class=\"string\">&#x27;90,000-99,999&#x27;</span>:<span class=\"string\">&#x27;60,000-99,999&#x27;</span>&#125;)</span><br><span class=\"line\">                                .rename(index=&#123;<span class=\"string\">&#x27;100,000-124,999&#x27;</span>:<span class=\"string\">&#x27;100,000-199,999&#x27;</span>,</span><br><span class=\"line\">                               <span class=\"string\">&#x27;125,000-149,999&#x27;</span>:<span class=\"string\">&#x27;100,000-199,999&#x27;</span>,</span><br><span class=\"line\">                               <span class=\"string\">&#x27;150,000-199,999&#x27;</span>:<span class=\"string\">&#x27;100,000-199,999&#x27;</span>&#125;)</span><br><span class=\"line\">                                .rename(index=&#123;<span class=\"string\">&#x27;200,000-249,999&#x27;</span>:<span class=\"string\">&#x27;200,000-1,000,000~&#x27;</span>,</span><br><span class=\"line\">                               <span class=\"string\">&#x27;250,000-299,999&#x27;</span>:<span class=\"string\">&#x27;200,000-1,000,000~&#x27;</span>,</span><br><span class=\"line\">                               <span class=\"string\">&#x27;300,000-499,999\t&#x27;</span>:<span class=\"string\">&#x27;200,000-1,000,000~&#x27;</span>,</span><br><span class=\"line\">                               <span class=\"string\">&#x27;500,000-999,999&#x27;</span>:<span class=\"string\">&#x27;200,000-1,000,000~&#x27;</span>,</span><br><span class=\"line\">                               <span class=\"string\">&#x27;1,000,000~&#x27;</span>:<span class=\"string\">&#x27;200,000-1,000,000~&#x27;</span>&#125;)</span><br><span class=\"line\">                                .reset_index().groupby(<span class=\"string\">&#x27;index&#x27;</span>).<span class=\"built_in\">sum</span>()</span><br><span class=\"line\">                                .reindex(index = [<span class=\"string\">&#x27;&lt;999&#x27;</span>, </span><br><span class=\"line\">                                                  <span class=\"string\">&#x27;1,000-7,499&#x27;</span>,</span><br><span class=\"line\">                                                  <span class=\"string\">&#x27;7,500-24,999&#x27;</span>, </span><br><span class=\"line\">                                                  <span class=\"string\">&#x27;25,000-59,999&#x27;</span>, </span><br><span class=\"line\">                                                  <span class=\"string\">&#x27;60,000-99,999&#x27;</span>, </span><br><span class=\"line\">                                                 <span class=\"string\">&#x27;100,000-199,999&#x27;</span>, </span><br><span class=\"line\">                                                 <span class=\"string\">&#x27;200,000-1,000,000~&#x27;</span>]))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#graph</span></span><br><span class=\"line\">World = df21_salary[<span class=\"string\">&#x27;World&#x27;</span>].values</span><br><span class=\"line\">East_Asia = df21_Ea_salary[<span class=\"string\">&#x27;EA&#x27;</span>].values</span><br><span class=\"line\">y = df21_salary.index</span><br><span class=\"line\"></span><br><span class=\"line\">fig = go.Figure(data=[</span><br><span class=\"line\">    go.Bar(y=y, x=World, orientation=<span class=\"string\">&#x27;h&#x27;</span>, name=<span class=\"string\">&quot;World&quot;</span>, base=<span class=\"number\">0</span>, hovertemplate=<span class=\"string\">&#x27;&lt;b&gt;World&lt;/b&gt;: %&#123;x&#125;%&lt;br&gt;&#x27;</span>, marker_color=<span class=\"string\">&#x27;#979DA6&#x27;</span>),</span><br><span class=\"line\">    go.Bar(y=y, x=-East_Asia, orientation=<span class=\"string\">&#x27;h&#x27;</span>, name=<span class=\"string\">&quot;East Asia&quot;</span>, base=<span class=\"number\">0</span>, hovertemplate=<span class=\"string\">&#x27;&lt;b&gt;East Asia&lt;/b&gt;: %&#123;x&#125;%&lt;br&gt;&#x27;</span>, marker_color=<span class=\"string\">&#x27;#F2D64B&#x27;</span>)</span><br><span class=\"line\">    ])</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(barmode=<span class=\"string\">&#x27;stack&#x27;</span>)</span><br><span class=\"line\">fig.update_layout(</span><br><span class=\"line\">    margin=<span class=\"built_in\">dict</span>(l=<span class=\"number\">200</span>, r=<span class=\"number\">0</span>, t=<span class=\"number\">200</span>, b=<span class=\"number\">100</span>),</span><br><span class=\"line\">    autosize=<span class=\"literal\">False</span>,</span><br><span class=\"line\">    title_text=<span class=\"string\">&quot;&lt;b&gt;                       Salary in East Asia vs World&lt;/b&gt;&quot;</span>, height=<span class=\"number\">600</span>, width=<span class=\"number\">700</span>, title_font_size=<span class=\"number\">20</span>, title_x=<span class=\"number\">0.5</span>)</span><br><span class=\"line\">fig.update_xaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\">fig.update_yaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\">fig.update_layout(legend=<span class=\"built_in\">dict</span>(</span><br><span class=\"line\">    orientation=<span class=\"string\">&quot;h&quot;</span>,</span><br><span class=\"line\">    yanchor=<span class=\"string\">&quot;bottom&quot;</span>,</span><br><span class=\"line\">    y=<span class=\"number\">1.1</span>,</span><br><span class=\"line\">    xanchor=<span class=\"string\">&quot;right&quot;</span>,</span><br><span class=\"line\">    x=<span class=\"number\">1</span>))</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n\n<h2> World experience and annual salary: Heat Map </h2>\n\n<h4>Relatively **positive correlation.** </h4>\n\n<ul>\n<li><p>Even with 5-10 years of experience, more than 45% has an annual salary of less than $20,000</p>\n</li>\n<li><p>With more than 10 years of experience, more than 30% receive an annual salary of $100,000.</p>\n</li>\n</ul>\n<p><img src=\"/images/kaggle_final/newplot19.png\"><br><img src=\"/images/kaggle_final/newplot20.png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#data preprocessing</span></span><br><span class=\"line\">SalExp21= df21.loc[:, [<span class=\"string\">&#x27;region&#x27;</span>, <span class=\"string\">&#x27;Q25&#x27;</span>, <span class=\"string\">&#x27;Q6&#x27;</span>]].rename(columns=&#123;<span class=\"string\">&#x27;Q6&#x27;</span>:<span class=\"string\">&#x27;Exp&#x27;</span>, <span class=\"string\">&#x27;Q25&#x27;</span>:<span class=\"string\">&#x27;Salary&#x27;</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">SalExp21=(SalExp21</span><br><span class=\"line\">          .replace([<span class=\"string\">&#x27;0-999&#x27;</span>,<span class=\"string\">&#x27;$0-999&#x27;</span>,<span class=\"string\">&#x27;0&#x27;</span>], <span class=\"string\">&#x27;&lt; 999&#x27;</span>)</span><br><span class=\"line\">          .replace(&#123;<span class=\"string\">&#x27;&gt;$1,000,000&#x27;</span>:<span class=\"string\">&#x27;200,000~&#x27;</span>&#125;)</span><br><span class=\"line\">          .replace([<span class=\"string\">&#x27;1,000-1,999&#x27;</span>,<span class=\"string\">&#x27;2,000-2,999&#x27;</span>,<span class=\"string\">&#x27;3,000-3,999&#x27;</span>, </span><br><span class=\"line\">        <span class=\"string\">&#x27;4,000-4,999&#x27;</span>,<span class=\"string\">&#x27;5,000-7,499&#x27;</span>,<span class=\"string\">&#x27;7,500-9,999&#x27;</span>,<span class=\"string\">&#x27;10,000-14,999&#x27;</span>, <span class=\"string\">&#x27;15,000-19,999&#x27;</span>],<span class=\"string\">&#x27;1,000-20,000&#x27;</span>)</span><br><span class=\"line\">          .replace([<span class=\"string\">&#x27;20,000-24,999&#x27;</span><span class=\"string\">&#x27;25,000-29,999&#x27;</span>,<span class=\"string\">&#x27;30,000-39,999&#x27;</span>, <span class=\"string\">&#x27;40,000-49,999&#x27;</span>, </span><br><span class=\"line\">        <span class=\"string\">&#x27;50,000-59,999&#x27;</span>],<span class=\"string\">&#x27;20,000-59,999&#x27;</span>) </span><br><span class=\"line\">           .replace([<span class=\"string\">&#x27;60,000-69,999&#x27;</span>, <span class=\"string\">&#x27;70,000-79,999&#x27;</span>, <span class=\"string\">&#x27;80,000-89,999&#x27;</span>, </span><br><span class=\"line\">        <span class=\"string\">&#x27;90,000-99,999&#x27;</span>], <span class=\"string\">&#x27;60,000-99,999&#x27;</span>)</span><br><span class=\"line\">          .replace([<span class=\"string\">&#x27;100,000-124,999&#x27;</span>, <span class=\"string\">&#x27;300,000-499,999&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;125,000-149,999&#x27;</span>, <span class=\"string\">&#x27;125,000-149,999&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;150,000-199,999&#x27;</span>],<span class=\"string\">&#x27;100,000-199,999&#x27;</span>)</span><br><span class=\"line\">          .replace([<span class=\"string\">&#x27;200,000-249,999&#x27;</span>, <span class=\"string\">&#x27;250,000-299,999&#x27;</span>, </span><br><span class=\"line\">        <span class=\"string\">&#x27;1,000,000&#x27;</span>,<span class=\"string\">&#x27;$500,000-999,999&#x27;</span>], <span class=\"string\">&#x27;200,000~&#x27;</span>)</span><br><span class=\"line\">        .replace(&#123;<span class=\"string\">&#x27;I have never written code&#x27;</span>: <span class=\"string\">&#x27;&lt; 1 years&#x27;</span>&#125;)</span><br><span class=\"line\">          .replace([<span class=\"string\">&#x27;10-20 years&#x27;</span>, <span class=\"string\">&#x27;20+ years&#x27;</span>], <span class=\"string\">&#x27;10+ years&#x27;</span> )</span><br><span class=\"line\">         )</span><br><span class=\"line\"></span><br><span class=\"line\">sal_order=[<span class=\"string\">&#x27;&lt; 999&#x27;</span>, <span class=\"string\">&#x27;1,000-20,000&#x27;</span>, <span class=\"string\">&#x27;20,000-59,999&#x27;</span>, <span class=\"string\">&#x27;60,000-99,999&#x27;</span>,<span class=\"string\">&#x27;100,000-199,999&#x27;</span>, <span class=\"string\">&#x27;200,000~&#x27;</span>]</span><br><span class=\"line\">Exp21_order=[<span class=\"string\">&#x27;&lt; 1 years&#x27;</span>, <span class=\"string\">&#x27;1-3 years&#x27;</span>,<span class=\"string\">&#x27;3-5 years&#x27;</span>, <span class=\"string\">&#x27;5-10 years&#x27;</span>, <span class=\"string\">&#x27;10+ years&#x27;</span> ]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">SalExp21_Ea = SalExp21[SalExp21[<span class=\"string\">&#x27;region&#x27;</span>] == <span class=\"string\">&quot;EastAsia&quot;</span>].reset_index(drop = <span class=\"literal\">True</span>)</span><br><span class=\"line\">SalExp21_Ea=(SalExp21_Ea.groupby([<span class=\"string\">&#x27;Exp&#x27;</span>, <span class=\"string\">&#x27;Salary&#x27;</span>])</span><br><span class=\"line\">           .size()</span><br><span class=\"line\">          .unstack().fillna(<span class=\"number\">0</span>).astype(<span class=\"string\">&#x27;int64&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">SalExp21_Wo = SalExp21[SalExp21[<span class=\"string\">&#x27;region&#x27;</span>] == <span class=\"string\">&quot;World&quot;</span>].reset_index(drop = <span class=\"literal\">True</span>)</span><br><span class=\"line\">SalExp21_Wo=(SalExp21_Wo.groupby([<span class=\"string\">&#x27;Exp&#x27;</span>, <span class=\"string\">&#x27;Salary&#x27;</span>])</span><br><span class=\"line\">           .size()</span><br><span class=\"line\">          .unstack().fillna(<span class=\"number\">0</span>).astype(<span class=\"string\">&#x27;int64&#x27;</span>))</span><br><span class=\"line\">SalExp21_Wo</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#graph</span></span><br><span class=\"line\"><span class=\"comment\">#World</span></span><br><span class=\"line\">z = SalExp21_Wo</span><br><span class=\"line\">z = z[sal_order]</span><br><span class=\"line\">z = z.reindex(Exp21_order)</span><br><span class=\"line\"></span><br><span class=\"line\">z_data = z.apply(<span class=\"keyword\">lambda</span> x:np.<span class=\"built_in\">round</span>(x/x.<span class=\"built_in\">sum</span>()*<span class=\"number\">100</span>, <span class=\"number\">2</span>), axis = <span class=\"number\">1</span>).to_numpy() <span class=\"comment\"># convert to correlation matrix</span></span><br><span class=\"line\">x = sal_order</span><br><span class=\"line\">y = Exp21_order</span><br><span class=\"line\"></span><br><span class=\"line\">fig = ff.create_annotated_heatmap(z_data, x = x, y = y, colorscale = <span class=\"string\">&quot;sunset&quot;</span>)</span><br><span class=\"line\">fig.update_layout( title_text=<span class=\"string\">&quot;&lt;b&gt;Experience and salary in World&lt;/b&gt;&quot;</span>,</span><br><span class=\"line\">                  height=<span class=\"number\">700</span>, width=<span class=\"number\">700</span>, title_font_size=<span class=\"number\">20</span>,</span><br><span class=\"line\">                  title_x=<span class=\"number\">0.5</span>,</span><br><span class=\"line\">                  margin=<span class=\"built_in\">dict</span>(l=<span class=\"number\">100</span>, r=<span class=\"number\">100</span>, t=<span class=\"number\">200</span>, b=<span class=\"number\">100</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">14</span>),</span><br><span class=\"line\">                                    x=<span class=\"number\">0.85</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.1</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;@green_yhjw&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\">fig.show()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#East Asia</span></span><br><span class=\"line\">z = SalExp21_Ea</span><br><span class=\"line\">z = z[sal_order]</span><br><span class=\"line\">z = z.reindex(Exp21_order)</span><br><span class=\"line\">z_data = z.apply(<span class=\"keyword\">lambda</span> x:np.<span class=\"built_in\">round</span>(x/x.<span class=\"built_in\">sum</span>(), <span class=\"number\">2</span>), axis = <span class=\"number\">1</span>).to_numpy() <span class=\"comment\"># convert to correlation matrix</span></span><br><span class=\"line\">x = sal_order</span><br><span class=\"line\">y = Exp21_order</span><br><span class=\"line\"></span><br><span class=\"line\">fig = ff.create_annotated_heatmap(z_data, x = x, y = y, colorscale = <span class=\"string\">&quot;sunset&quot;</span>)</span><br><span class=\"line\">fig.update_layout(title_text=<span class=\"string\">&quot;&lt;b&gt;Experience and salary in East Asia&lt;/b&gt;&quot;</span>,</span><br><span class=\"line\">                  height=<span class=\"number\">700</span>, width=<span class=\"number\">700</span>, title_font_size=<span class=\"number\">20</span>,</span><br><span class=\"line\">                  title_x=<span class=\"number\">0.5</span>,</span><br><span class=\"line\">                  margin=<span class=\"built_in\">dict</span>(l=<span class=\"number\">100</span>, r=<span class=\"number\">100</span>, t=<span class=\"number\">200</span>, b=<span class=\"number\">100</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">14</span>),</span><br><span class=\"line\">                                    x=<span class=\"number\">0.85</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.1</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;@green_yhjw&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n\n<h2> World & East Asia Degree/Annual salary: Heat Map </h2>\n\n<ul>\n<li>\\$ ~20,000 : Regardless of degree, about 40% of the annual salary is $ 20,000 or less. <br><br>  Guess it’s the ratio that comes from a student. <br></li>\n<li>$ 25,000-100,000 : Earned more than 40% with a bachelor’s degree alone in East Asia  <br><br>  (World: less than 20%) <br></li>\n<li>$ 200,000~ : Even with a doctorate or higher, it is difficult to obtain it from East Asia.</li>\n</ul>\n<p><img src=\"/images/kaggle_final/newplot21.png\"><br><img src=\"/images/kaggle_final/newplot22.png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#data preprocessing</span></span><br><span class=\"line\">Salary21= df21.loc[:, [<span class=\"string\">&#x27;region&#x27;</span>, <span class=\"string\">&#x27;Q25&#x27;</span>, <span class=\"string\">&#x27;year&#x27;</span>]].rename(columns=&#123;<span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;Country&#x27;</span>, <span class=\"string\">&#x27;Q25&#x27;</span>:<span class=\"string\">&#x27;Salary&#x27;</span>&#125;)</span><br><span class=\"line\">salary21_Index=[<span class=\"string\">&#x27;&lt; 999&#x27;</span>, <span class=\"string\">&#x27;1,000-20,000&#x27;</span>, <span class=\"string\">&#x27;20,000-59,999&#x27;</span>, <span class=\"string\">&#x27;60,000-99,999&#x27;</span>,<span class=\"string\">&#x27;100,000-199,999&#x27;</span>, <span class=\"string\">&#x27;200,000~&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">Salary21=(Salary21</span><br><span class=\"line\">          .replace([<span class=\"string\">&#x27;0-999&#x27;</span>,<span class=\"string\">&#x27;$0-999&#x27;</span>,<span class=\"string\">&#x27;0&#x27;</span>], <span class=\"string\">&#x27;&lt; 999&#x27;</span>)</span><br><span class=\"line\">          .replace(&#123;<span class=\"string\">&#x27;&gt;$1,000,000&#x27;</span>:<span class=\"string\">&#x27;200,000~&#x27;</span>&#125;)</span><br><span class=\"line\">          .replace([<span class=\"string\">&#x27;1,000-1,999&#x27;</span>,<span class=\"string\">&#x27;2,000-2,999&#x27;</span>,<span class=\"string\">&#x27;3,000-3,999&#x27;</span>, <span class=\"string\">&#x27;4,000-4,999&#x27;</span>,<span class=\"string\">&#x27;5,000-7,499&#x27;</span>,<span class=\"string\">&#x27;7,500-9,999&#x27;</span>,<span class=\"string\">&#x27;10,000-14,999&#x27;</span>, <span class=\"string\">&#x27;15,000-19,999&#x27;</span>],<span class=\"string\">&#x27;1,000-20,000&#x27;</span>)</span><br><span class=\"line\">          .replace([<span class=\"string\">&#x27;20,000-24,999&#x27;</span><span class=\"string\">&#x27;25,000-29,999&#x27;</span>,<span class=\"string\">&#x27;30,000-39,999&#x27;</span>, <span class=\"string\">&#x27;40,000-49,999&#x27;</span>,  <span class=\"string\">&#x27;50,000-59,999&#x27;</span>],<span class=\"string\">&#x27;20,000-59,999&#x27;</span>) </span><br><span class=\"line\">           .replace([<span class=\"string\">&#x27;60,000-69,999&#x27;</span>, <span class=\"string\">&#x27;70,000-79,999&#x27;</span>, <span class=\"string\">&#x27;80,000-89,999&#x27;</span>,<span class=\"string\">&#x27;90,000-99,999&#x27;</span>], <span class=\"string\">&#x27;60,000-99,999&#x27;</span>)</span><br><span class=\"line\">          .replace([<span class=\"string\">&#x27;100,000-124,999&#x27;</span>, <span class=\"string\">&#x27;300,000-499,999&#x27;</span>, <span class=\"string\">&#x27;125,000-149,999&#x27;</span>, <span class=\"string\">&#x27;125,000-149,999&#x27;</span>, <span class=\"string\">&#x27;150,000-199,999&#x27;</span>],<span class=\"string\">&#x27;100,000-199,999&#x27;</span>)</span><br><span class=\"line\">          .replace([<span class=\"string\">&#x27;200,000-249,999&#x27;</span>, <span class=\"string\">&#x27;250,000-299,999&#x27;</span>,<span class=\"string\">&#x27;1,000,000&#x27;</span>,<span class=\"string\">&#x27;$500,000-999,999&#x27;</span>], <span class=\"string\">&#x27;200,000~&#x27;</span>)).fillna(<span class=\"string\">&#x27;0&#x27;</span>)</span><br><span class=\"line\">sal_order=[<span class=\"string\">&#x27;&lt; 999&#x27;</span>, <span class=\"string\">&#x27;1,000-20,000&#x27;</span>, <span class=\"string\">&#x27;20,000-59,999&#x27;</span>, <span class=\"string\">&#x27;60,000-99,999&#x27;</span>,<span class=\"string\">&#x27;100,000-199,999&#x27;</span>, <span class=\"string\">&#x27;200,000~&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">Salary21=(Salary21.groupby([<span class=\"string\">&#x27;region&#x27;</span>, <span class=\"string\">&#x27;Salary&#x27;</span>])</span><br><span class=\"line\">           .size()</span><br><span class=\"line\">           .reset_index()</span><br><span class=\"line\">           .rename(columns = &#123;<span class=\"number\">0</span>:<span class=\"string\">&quot;Count&quot;</span>&#125;))</span><br><span class=\"line\"></span><br><span class=\"line\">Salary21_Ea = Salary21[Salary21[<span class=\"string\">&#x27;region&#x27;</span>] == <span class=\"string\">&quot;EastAsia&quot;</span>].reset_index(drop = <span class=\"literal\">True</span>)</span><br><span class=\"line\">Salary21_Ea[<span class=\"string\">&#x27;%&#x27;</span>]=((Salary21_Ea[<span class=\"string\">&#x27;Count&#x27;</span>] / Salary21_Ea[<span class=\"string\">&#x27;Count&#x27;</span>].<span class=\"built_in\">sum</span>())*<span class=\"number\">100</span>).<span class=\"built_in\">round</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\">Salary21_Wo = Salary21[Salary21[<span class=\"string\">&#x27;region&#x27;</span>] == <span class=\"string\">&quot;World&quot;</span>].reset_index(drop = <span class=\"literal\">True</span>)</span><br><span class=\"line\">Salary21_Wo[<span class=\"string\">&#x27;%&#x27;</span>]=((Salary21_Wo[<span class=\"string\">&#x27;Count&#x27;</span>] / Salary21_Wo[<span class=\"string\">&#x27;Count&#x27;</span>].<span class=\"built_in\">sum</span>())*<span class=\"number\">100</span>).<span class=\"built_in\">round</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">Dgr_Sal_21= df21.loc[:, [<span class=\"string\">&#x27;region&#x27;</span>, <span class=\"string\">&#x27;Q25&#x27;</span>, <span class=\"string\">&#x27;Q4&#x27;</span>]].rename(columns=&#123;<span class=\"string\">&#x27;Q4&#x27;</span>:<span class=\"string\">&#x27;Dgree&#x27;</span>, <span class=\"string\">&#x27;Q25&#x27;</span>:<span class=\"string\">&#x27;Salary&#x27;</span>&#125;)</span><br><span class=\"line\">Dgr_Sal_21 = (Dgr_Sal_21.replace([<span class=\"string\">&#x27;0-999&#x27;</span>,<span class=\"string\">&#x27;$0-999&#x27;</span>,<span class=\"string\">&#x27;0&#x27;</span>], <span class=\"string\">&#x27;&lt; 999&#x27;</span>)</span><br><span class=\"line\">          .replace(&#123;<span class=\"string\">&#x27;&gt;$1,000,000&#x27;</span>:<span class=\"string\">&#x27;200,000~&#x27;</span>&#125;)</span><br><span class=\"line\">          .replace([<span class=\"string\">&#x27;1,000-1,999&#x27;</span>,<span class=\"string\">&#x27;2,000-2,999&#x27;</span>,<span class=\"string\">&#x27;3,000-3,999&#x27;</span>, <span class=\"string\">&#x27;4,000-4,999&#x27;</span>,<span class=\"string\">&#x27;5,000-7,499&#x27;</span>,<span class=\"string\">&#x27;7,500-9,999&#x27;</span>,<span class=\"string\">&#x27;10,000-14,999&#x27;</span>, <span class=\"string\">&#x27;15,000-19,999&#x27;</span>],<span class=\"string\">&#x27;1,000-20,000&#x27;</span>)</span><br><span class=\"line\">          .replace([<span class=\"string\">&#x27;20,000-24,999&#x27;</span><span class=\"string\">&#x27;25,000-29,999&#x27;</span>,<span class=\"string\">&#x27;30,000-39,999&#x27;</span>, <span class=\"string\">&#x27;40,000-49,999&#x27;</span>, <span class=\"string\">&#x27;50,000-59,999&#x27;</span>],<span class=\"string\">&#x27;20,000-59,999&#x27;</span>) </span><br><span class=\"line\">          .replace([<span class=\"string\">&#x27;60,000-69,999&#x27;</span>, <span class=\"string\">&#x27;70,000-79,999&#x27;</span>, <span class=\"string\">&#x27;80,000-89,999&#x27;</span>, <span class=\"string\">&#x27;90,000-99,999&#x27;</span>], <span class=\"string\">&#x27;60,000-99,999&#x27;</span>)</span><br><span class=\"line\">          .replace([<span class=\"string\">&#x27;100,000-124,999&#x27;</span>, <span class=\"string\">&#x27;300,000-499,999&#x27;</span>, <span class=\"string\">&#x27;125,000-149,999&#x27;</span>, <span class=\"string\">&#x27;125,000-149,999&#x27;</span>,<span class=\"string\">&#x27;150,000-199,999&#x27;</span>],<span class=\"string\">&#x27;100,000-199,999&#x27;</span>)</span><br><span class=\"line\">          .replace([<span class=\"string\">&#x27;200,000-249,999&#x27;</span>, <span class=\"string\">&#x27;250,000-299,999&#x27;</span>,<span class=\"string\">&#x27;1,000,000&#x27;</span>,<span class=\"string\">&#x27;$500,000-999,999&#x27;</span>], <span class=\"string\">&#x27;200,000~&#x27;</span>)</span><br><span class=\"line\">          .replace(&#123;<span class=\"string\">&#x27;I prefer not to answer&#x27;</span>:<span class=\"string\">&#x27;etc&#x27;</span>&#125;)</span><br><span class=\"line\">          .replace([<span class=\"string\">&#x27;No formal education past high school&#x27;</span>, <span class=\"string\">&#x27;Some college/university study without earning a bachelor’s degree&#x27;</span>],<span class=\"string\">&#x27;~college&#x27;</span>)</span><br><span class=\"line\">          .replace([<span class=\"string\">&#x27;Doctoral degree&#x27;</span>, <span class=\"string\">&#x27;Professional doctorate&#x27;</span>],<span class=\"string\">&#x27;Doctoral degree~&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#EastAsia 뽑기</span></span><br><span class=\"line\">Dgr_Sal_21_Ea= Dgr_Sal_21[Dgr_Sal_21[<span class=\"string\">&#x27;region&#x27;</span>] == <span class=\"string\">&quot;EastAsia&quot;</span>].reset_index(drop = <span class=\"literal\">True</span>)</span><br><span class=\"line\">Dgr_Sal_21_Ea = Dgr_Sal_21_Ea.groupby([<span class=\"string\">&#x27;Dgree&#x27;</span>, <span class=\"string\">&#x27;Salary&#x27;</span>]).size().unstack().fillna(<span class=\"number\">0</span>).astype(<span class=\"string\">&#x27;int64&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">dgree_order=[ <span class=\"string\">&#x27;~college&#x27;</span>,<span class=\"string\">&#x27;Bachelor’s degree&#x27;</span>, <span class=\"string\">&#x27;Master’s degree&#x27;</span>, <span class=\"string\">&#x27;Doctoral degree~&#x27;</span>, <span class=\"string\">&#x27;etc&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#graph</span></span><br><span class=\"line\"><span class=\"comment\">#World</span></span><br><span class=\"line\">z = Dgr_Sal_21.groupby([<span class=\"string\">&#x27;Dgree&#x27;</span>, <span class=\"string\">&#x27;Salary&#x27;</span>]).size().unstack().fillna(<span class=\"number\">0</span>).astype(<span class=\"string\">&#x27;int64&#x27;</span>)</span><br><span class=\"line\">z = z[sal_order]</span><br><span class=\"line\">z = z.reindex(dgree_order)</span><br><span class=\"line\"></span><br><span class=\"line\">z_data = z.apply(<span class=\"keyword\">lambda</span> x:np.<span class=\"built_in\">round</span>(x/x.<span class=\"built_in\">sum</span>()*<span class=\"number\">100</span>, <span class=\"number\">2</span>), axis = <span class=\"number\">1</span>).to_numpy() <span class=\"comment\"># convert to correlation matrix</span></span><br><span class=\"line\">x = sal_order</span><br><span class=\"line\">y = dgree_order</span><br><span class=\"line\"></span><br><span class=\"line\">fig = ff.create_annotated_heatmap(z_data, x = x, y = y, colorscale = <span class=\"string\">&quot;sunset&quot;</span>)</span><br><span class=\"line\">fig.update_layout( title_text=<span class=\"string\">&quot;&lt;b&gt;    Degree-Salary in World&lt;/b&gt;&quot;</span>,</span><br><span class=\"line\">                  height=<span class=\"number\">700</span>, width=<span class=\"number\">700</span>, title_font_size=<span class=\"number\">20</span>,</span><br><span class=\"line\">                  title_x=<span class=\"number\">0.5</span>,</span><br><span class=\"line\">                  margin=<span class=\"built_in\">dict</span>(l=<span class=\"number\">150</span>, r=<span class=\"number\">100</span>, t=<span class=\"number\">200</span>, b=<span class=\"number\">50</span>))</span><br><span class=\"line\">fig.update_traces(hovertemplate=<span class=\"string\">&#x27;&lt;b&gt;Degree&lt;/b&gt;: %&#123;y&#125;&lt;br&gt;&#x27;</span>+</span><br><span class=\"line\">                                <span class=\"string\">&#x27;&lt;b&gt;Salary&lt;/b&gt;: %&#123;x&#125;&lt;br&gt;&#x27;</span>+</span><br><span class=\"line\">                                <span class=\"string\">&#x27;&lt;b&gt;Percent&lt;/b&gt;: %&#123;z&#125;%&#x27;</span>)</span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">14</span>),</span><br><span class=\"line\">                                    x=<span class=\"number\">0.8</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.1</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;@green_yhjw&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\">fig.show()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#East Asia</span></span><br><span class=\"line\">z = Dgr_Sal_21_Ea</span><br><span class=\"line\">z = z[sal_order]</span><br><span class=\"line\">z = z.reindex(dgree_order)</span><br><span class=\"line\">z_data = z.apply(<span class=\"keyword\">lambda</span> x:np.<span class=\"built_in\">round</span>(x/x.<span class=\"built_in\">sum</span>()*<span class=\"number\">100</span>, <span class=\"number\">2</span>), axis = <span class=\"number\">1</span>).to_numpy() <span class=\"comment\"># convert to correlation matrix</span></span><br><span class=\"line\">x = sal_order</span><br><span class=\"line\">y = dgree_order</span><br><span class=\"line\"></span><br><span class=\"line\">fig = ff.create_annotated_heatmap(z_data, x = x, y = y, colorscale = <span class=\"string\">&quot;sunset&quot;</span>)</span><br><span class=\"line\">fig.update_layout(title_text=<span class=\"string\">&quot;&lt;b&gt;    Degree-Salary in East Asia&lt;/b&gt;&quot;</span>,</span><br><span class=\"line\">                  height=<span class=\"number\">700</span>, width=<span class=\"number\">700</span>, title_font_size=<span class=\"number\">20</span>,</span><br><span class=\"line\">                  title_x=<span class=\"number\">0.5</span>,</span><br><span class=\"line\">                  margin=<span class=\"built_in\">dict</span>(l=<span class=\"number\">150</span>, r=<span class=\"number\">100</span>, t=<span class=\"number\">200</span>, b=<span class=\"number\">50</span>))</span><br><span class=\"line\">fig.update_traces(hovertemplate=<span class=\"string\">&#x27;&lt;b&gt;Degree&lt;/b&gt;: %&#123;y&#125;&lt;br&gt;&#x27;</span>+</span><br><span class=\"line\">                                <span class=\"string\">&#x27;&lt;b&gt;Salary&lt;/b&gt;: %&#123;x&#125;&lt;br&gt;&#x27;</span>+</span><br><span class=\"line\">                                <span class=\"string\">&#x27;&lt;b&gt;Percent&lt;/b&gt;: %&#123;z&#125;%&#x27;</span>)</span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">14</span>),</span><br><span class=\"line\">                                    x=<span class=\"number\">0.8</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.1</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;@green_yhjw&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-1-8-Language-transformation\"><a href=\"#3-1-8-Language-transformation\" class=\"headerlink\" title=\"3.1.8 Language transformation\"></a>3.1.8 Language transformation</h1><hr>\n<h2>World & East Asia Programming Language: Bar plot </h2>\n- Python: 80% of the world and 85% of East Asia use it.\n\n<h4>\n<p style=\"color:#FF0000\";>\nWe've been working on the project as python, so I hope we can continue to learn python and become experienced Data Scientists!\n    </p></h4>\n\n<p><img src=\"/images/kaggle_final/newplot23.png\"><br><img src=\"/images/kaggle_final/newplot24.png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#data preprocessing</span></span><br><span class=\"line\"><span class=\"comment\">#world</span></span><br><span class=\"line\">programming_list = [<span class=\"string\">&quot;Python&quot;</span>, <span class=\"string\">&quot;R&quot;</span>, <span class=\"string\">&quot;SQL&quot;</span>, <span class=\"string\">&quot;Java&quot;</span>, <span class=\"string\">&quot;C&quot;</span>, <span class=\"string\">&quot;Bash&quot;</span>, <span class=\"string\">&quot;Javascript&quot;</span>, <span class=\"string\">&quot;C++&quot;</span>]</span><br><span class=\"line\">programming_df = pd.Series(programming_list)</span><br><span class=\"line\"></span><br><span class=\"line\">df_2019 = df19[df19[<span class=\"string\">&#x27;Q19&#x27;</span>].isin(programming_df)]</span><br><span class=\"line\">df_2020 = df20[df20[<span class=\"string\">&#x27;Q8&#x27;</span>].isin(programming_df)]</span><br><span class=\"line\">df_2021 = df21[df21[<span class=\"string\">&#x27;Q8&#x27;</span>].isin(programming_df)]</span><br><span class=\"line\"></span><br><span class=\"line\">df19Lag = df_2019.loc[:, [<span class=\"string\">&#x27;region&#x27;</span>, <span class=\"string\">&#x27;Q5&#x27;</span>, <span class=\"string\">&#x27;Q19&#x27;</span>, <span class=\"string\">&#x27;year&#x27;</span>]]</span><br><span class=\"line\">df19Lag = df19Lag.rename(columns = &#123;<span class=\"string\">&#x27;Q19&#x27;</span>: <span class=\"string\">&#x27;Language&#x27;</span>&#125;, inplace = <span class=\"literal\">False</span>) <span class=\"comment\"># To match with other datasets</span></span><br><span class=\"line\">df20Lag = df_2020.loc[:, [<span class=\"string\">&#x27;region&#x27;</span>, <span class=\"string\">&#x27;Q5&#x27;</span>, <span class=\"string\">&#x27;Q8&#x27;</span>, <span class=\"string\">&#x27;year&#x27;</span>]].rename(columns = &#123;<span class=\"string\">&#x27;Q8&#x27;</span>: <span class=\"string\">&#x27;Language&#x27;</span>&#125;, inplace = <span class=\"literal\">False</span>)</span><br><span class=\"line\">df21Lag = df_2021.loc[:, [<span class=\"string\">&#x27;region&#x27;</span>, <span class=\"string\">&#x27;Q5&#x27;</span>, <span class=\"string\">&#x27;Q8&#x27;</span>, <span class=\"string\">&#x27;year&#x27;</span>]].rename(columns = &#123;<span class=\"string\">&#x27;Q8&#x27;</span>: <span class=\"string\">&#x27;Language&#x27;</span>&#125;, inplace = <span class=\"literal\">False</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">df3y_Lag = pd.concat([df19Lag, df20Lag, df21Lag])</span><br><span class=\"line\">df3y_Lag = df3y_Lag.groupby([<span class=\"string\">&#x27;year&#x27;</span>, <span class=\"string\">&#x27;Language&#x27;</span>]).size().reset_index().rename(columns = &#123;<span class=\"number\">0</span>:<span class=\"string\">&quot;Count&quot;</span>&#125;)</span><br><span class=\"line\">df3y_Lag</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2019</span></span><br><span class=\"line\">dfLang_19 = df3y_Lag[df3y_Lag[<span class=\"string\">&#x27;year&#x27;</span>] == <span class=\"string\">&quot;2019&quot;</span>].reset_index(drop = <span class=\"literal\">True</span>)</span><br><span class=\"line\">dfLang_19[<span class=\"string\">&#x27;percentage&#x27;</span>] = dfLang_19[<span class=\"string\">&quot;Count&quot;</span>] / dfLang_19[<span class=\"string\">&quot;Count&quot;</span>].<span class=\"built_in\">sum</span>()</span><br><span class=\"line\">dfLang_19[<span class=\"string\">&#x27;%&#x27;</span>] = np.<span class=\"built_in\">round</span>(dfLang_19[<span class=\"string\">&#x27;percentage&#x27;</span>] * <span class=\"number\">100</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2020</span></span><br><span class=\"line\">dfLang_20 = df3y_Lag[df3y_Lag[<span class=\"string\">&#x27;year&#x27;</span>] == <span class=\"string\">&quot;2020&quot;</span>].reset_index(drop = <span class=\"literal\">True</span>)</span><br><span class=\"line\">dfLang_20[<span class=\"string\">&#x27;percentage&#x27;</span>] = dfLang_20[<span class=\"string\">&quot;Count&quot;</span>] / dfLang_20[<span class=\"string\">&quot;Count&quot;</span>].<span class=\"built_in\">sum</span>()</span><br><span class=\"line\">dfLang_20[<span class=\"string\">&#x27;%&#x27;</span>] = np.<span class=\"built_in\">round</span>(dfLang_20[<span class=\"string\">&#x27;percentage&#x27;</span>] * <span class=\"number\">100</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2021</span></span><br><span class=\"line\">dfLang_21 = df3y_Lag[df3y_Lag[<span class=\"string\">&#x27;year&#x27;</span>] == <span class=\"string\">&quot;2021&quot;</span>].reset_index(drop = <span class=\"literal\">True</span>)</span><br><span class=\"line\">dfLang_21[<span class=\"string\">&#x27;percentage&#x27;</span>] = dfLang_21[<span class=\"string\">&quot;Count&quot;</span>] / dfLang_21[<span class=\"string\">&quot;Count&quot;</span>].<span class=\"built_in\">sum</span>()</span><br><span class=\"line\">dfLang_21[<span class=\"string\">&#x27;%&#x27;</span>] = np.<span class=\"built_in\">round</span>(dfLang_21[<span class=\"string\">&#x27;percentage&#x27;</span>] * <span class=\"number\">100</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">dfLang_19=dfLang_19.sort_values(by=<span class=\"string\">&#x27;%&#x27;</span>, ascending=<span class=\"literal\">False</span>)</span><br><span class=\"line\">dfLang_20=dfLang_20.sort_values(by=<span class=\"string\">&#x27;%&#x27;</span>, ascending=<span class=\"literal\">False</span>)</span><br><span class=\"line\">dfLang_21=dfLang_21.sort_values(by=<span class=\"string\">&#x27;%&#x27;</span>, ascending=<span class=\"literal\">False</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#graph</span></span><br><span class=\"line\">fig = go.Figure()</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_trace(go.Bar(x = dfLang_19[<span class=\"string\">&#x27;Language&#x27;</span>], </span><br><span class=\"line\">                     y = dfLang_19[<span class=\"string\">&#x27;%&#x27;</span>], </span><br><span class=\"line\">                     name = <span class=\"string\">&quot;2019&quot;</span>, </span><br><span class=\"line\">                     text = dfLang_19[<span class=\"string\">&#x27;%&#x27;</span>].astype(<span class=\"built_in\">str</span>) + <span class=\"string\">&quot;%&quot;</span>, </span><br><span class=\"line\">                     textposition=<span class=\"string\">&#x27;auto&#x27;</span>, marker_color=<span class=\"string\">&#x27;#CDD9A3&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_trace(go.Bar(x = dfLang_20[<span class=\"string\">&#x27;Language&#x27;</span>], </span><br><span class=\"line\">                     y = dfLang_20[<span class=\"string\">&#x27;%&#x27;</span>], </span><br><span class=\"line\">                     name = <span class=\"string\">&quot;2020&quot;</span>, </span><br><span class=\"line\">                     text = dfLang_20[<span class=\"string\">&#x27;%&#x27;</span>].astype(<span class=\"built_in\">str</span>) + <span class=\"string\">&quot;%&quot;</span>, </span><br><span class=\"line\">                     textposition=<span class=\"string\">&#x27;auto&#x27;</span>, marker_color=<span class=\"string\">&#x27;#F28705&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_trace(go.Bar(x = dfLang_21[<span class=\"string\">&#x27;Language&#x27;</span>], </span><br><span class=\"line\">                     y = dfLang_21[<span class=\"string\">&#x27;%&#x27;</span>], </span><br><span class=\"line\">                     name = <span class=\"string\">&quot;2021&quot;</span>, </span><br><span class=\"line\">                     text = dfLang_21[<span class=\"string\">&#x27;%&#x27;</span>].astype(<span class=\"built_in\">str</span>) + <span class=\"string\">&quot;%&quot;</span>, </span><br><span class=\"line\">                     textposition=<span class=\"string\">&#x27;auto&#x27;</span>, marker_color=<span class=\"string\">&#x27;#88BFBA&#x27;</span>))</span><br><span class=\"line\">fig.update_layout(title=<span class=\"string\">&#x27;&lt;b&gt;Language in World&lt;/b&gt;&#x27;</span>,title_font_size=<span class=\"number\">20</span>,</span><br><span class=\"line\">                  margin = <span class=\"built_in\">dict</span>(t=<span class=\"number\">100</span>, l=<span class=\"number\">100</span>, r=<span class=\"number\">50</span>, b=<span class=\"number\">100</span>),</span><br><span class=\"line\">                  height=<span class=\"number\">600</span>, width=<span class=\"number\">700</span>,</span><br><span class=\"line\">                  xaxis_title=<span class=\"literal\">None</span>,</span><br><span class=\"line\">                  yaxis_title=<span class=\"literal\">None</span>)</span><br><span class=\"line\">fig.update_traces(hovertemplate=<span class=\"string\">&#x27;&lt;b&gt;Percent&lt;/b&gt;: %&#123;y&#125;%&lt;br&gt;&#x27;</span>+</span><br><span class=\"line\">                                <span class=\"string\">&#x27;&lt;b&gt;Language&lt;/b&gt;: %&#123;x&#125;&lt;br&gt;&#x27;</span>)</span><br><span class=\"line\">fig.update_xaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\">fig.update_yaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\">fig.update_layout(legend=<span class=\"built_in\">dict</span>(</span><br><span class=\"line\">    orientation=<span class=\"string\">&quot;v&quot;</span>,</span><br><span class=\"line\">    yanchor=<span class=\"string\">&quot;bottom&quot;</span>,</span><br><span class=\"line\">    y=<span class=\"number\">0.8</span>,</span><br><span class=\"line\">    xanchor=<span class=\"string\">&quot;right&quot;</span>,</span><br><span class=\"line\">    x=<span class=\"number\">1</span>))</span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">14</span>),</span><br><span class=\"line\">                                    x=<span class=\"number\">0.8</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.2</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;@green_yhjw&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#data prprocessing</span></span><br><span class=\"line\"><span class=\"comment\">#Ea</span></span><br><span class=\"line\"></span><br><span class=\"line\">df_2019 = df19_Ea[df19_Ea[<span class=\"string\">&#x27;Q19&#x27;</span>].isin(programming_df)]</span><br><span class=\"line\">df_2020 = df20_Ea[df20_Ea[<span class=\"string\">&#x27;Q8&#x27;</span>].isin(programming_df)]</span><br><span class=\"line\">df_2021 = df21_Ea[df21_Ea[<span class=\"string\">&#x27;Q8&#x27;</span>].isin(programming_df)]</span><br><span class=\"line\"></span><br><span class=\"line\">df19Lag = df_2019.loc[:, [<span class=\"string\">&#x27;region&#x27;</span>, <span class=\"string\">&#x27;Q5&#x27;</span>, <span class=\"string\">&#x27;Q19&#x27;</span>, <span class=\"string\">&#x27;year&#x27;</span>]]</span><br><span class=\"line\">df19Lag = df19Lag.rename(columns = &#123;<span class=\"string\">&#x27;Q19&#x27;</span>: <span class=\"string\">&#x27;Language&#x27;</span>&#125;, inplace = <span class=\"literal\">False</span>) <span class=\"comment\"># To match with other datasets</span></span><br><span class=\"line\">df20Lag = df_2020.loc[:, [<span class=\"string\">&#x27;region&#x27;</span>, <span class=\"string\">&#x27;Q5&#x27;</span>, <span class=\"string\">&#x27;Q8&#x27;</span>, <span class=\"string\">&#x27;year&#x27;</span>]].rename(columns = &#123;<span class=\"string\">&#x27;Q8&#x27;</span>: <span class=\"string\">&#x27;Language&#x27;</span>&#125;, inplace = <span class=\"literal\">False</span>)</span><br><span class=\"line\">df21Lag = df_2021.loc[:, [<span class=\"string\">&#x27;region&#x27;</span>, <span class=\"string\">&#x27;Q5&#x27;</span>, <span class=\"string\">&#x27;Q8&#x27;</span>, <span class=\"string\">&#x27;year&#x27;</span>]].rename(columns = &#123;<span class=\"string\">&#x27;Q8&#x27;</span>: <span class=\"string\">&#x27;Language&#x27;</span>&#125;, inplace = <span class=\"literal\">False</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">df3y_Lag = pd.concat([df19Lag, df20Lag, df21Lag])</span><br><span class=\"line\">df3y_Lag = df3y_Lag.groupby([<span class=\"string\">&#x27;year&#x27;</span>, <span class=\"string\">&#x27;Language&#x27;</span>]).size().reset_index().rename(columns = &#123;<span class=\"number\">0</span>:<span class=\"string\">&quot;Count&quot;</span>&#125;)</span><br><span class=\"line\">df3y_Lag</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2019</span></span><br><span class=\"line\">dfLang_19 = df3y_Lag[df3y_Lag[<span class=\"string\">&#x27;year&#x27;</span>] == <span class=\"string\">&quot;2019&quot;</span>].reset_index(drop = <span class=\"literal\">True</span>)</span><br><span class=\"line\">dfLang_19[<span class=\"string\">&#x27;percentage&#x27;</span>] = dfLang_19[<span class=\"string\">&quot;Count&quot;</span>] / dfLang_19[<span class=\"string\">&quot;Count&quot;</span>].<span class=\"built_in\">sum</span>()</span><br><span class=\"line\">dfLang_19[<span class=\"string\">&#x27;%&#x27;</span>] = np.<span class=\"built_in\">round</span>(dfLang_19[<span class=\"string\">&#x27;percentage&#x27;</span>] * <span class=\"number\">100</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2020</span></span><br><span class=\"line\">dfLang_20 = df3y_Lag[df3y_Lag[<span class=\"string\">&#x27;year&#x27;</span>] == <span class=\"string\">&quot;2020&quot;</span>].reset_index(drop = <span class=\"literal\">True</span>)</span><br><span class=\"line\">dfLang_20[<span class=\"string\">&#x27;percentage&#x27;</span>] = dfLang_20[<span class=\"string\">&quot;Count&quot;</span>] / dfLang_20[<span class=\"string\">&quot;Count&quot;</span>].<span class=\"built_in\">sum</span>()</span><br><span class=\"line\">dfLang_20[<span class=\"string\">&#x27;%&#x27;</span>] = np.<span class=\"built_in\">round</span>(dfLang_20[<span class=\"string\">&#x27;percentage&#x27;</span>] * <span class=\"number\">100</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2021</span></span><br><span class=\"line\">dfLang_21 = df3y_Lag[df3y_Lag[<span class=\"string\">&#x27;year&#x27;</span>] == <span class=\"string\">&quot;2021&quot;</span>].reset_index(drop = <span class=\"literal\">True</span>)</span><br><span class=\"line\">dfLang_21[<span class=\"string\">&#x27;percentage&#x27;</span>] = dfLang_21[<span class=\"string\">&quot;Count&quot;</span>] / dfLang_21[<span class=\"string\">&quot;Count&quot;</span>].<span class=\"built_in\">sum</span>()</span><br><span class=\"line\">dfLang_21[<span class=\"string\">&#x27;%&#x27;</span>] = np.<span class=\"built_in\">round</span>(dfLang_21[<span class=\"string\">&#x27;percentage&#x27;</span>] * <span class=\"number\">100</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">dfLang_19=dfLang_19.sort_values(by=<span class=\"string\">&#x27;%&#x27;</span>, ascending=<span class=\"literal\">False</span>)</span><br><span class=\"line\">dfLang_20=dfLang_20.sort_values(by=<span class=\"string\">&#x27;%&#x27;</span>, ascending=<span class=\"literal\">False</span>)</span><br><span class=\"line\">dfLang_21=dfLang_21.sort_values(by=<span class=\"string\">&#x27;%&#x27;</span>, ascending=<span class=\"literal\">False</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#graph</span></span><br><span class=\"line\">fig = go.Figure()</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_trace(go.Bar(x = dfLang_19[<span class=\"string\">&#x27;Language&#x27;</span>], </span><br><span class=\"line\">                     y = dfLang_19[<span class=\"string\">&#x27;%&#x27;</span>], </span><br><span class=\"line\">                     name = <span class=\"string\">&quot;2019&quot;</span>, </span><br><span class=\"line\">                     text = dfLang_19[<span class=\"string\">&#x27;%&#x27;</span>].astype(<span class=\"built_in\">str</span>) + <span class=\"string\">&quot;%&quot;</span>, </span><br><span class=\"line\">                     textposition=<span class=\"string\">&#x27;auto&#x27;</span>, marker_color=<span class=\"string\">&#x27;#CDD9A3&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_trace(go.Bar(x = dfLang_20[<span class=\"string\">&#x27;Language&#x27;</span>], </span><br><span class=\"line\">                     y = dfLang_20[<span class=\"string\">&#x27;%&#x27;</span>], </span><br><span class=\"line\">                     name = <span class=\"string\">&quot;2020&quot;</span>, </span><br><span class=\"line\">                     text = dfLang_20[<span class=\"string\">&#x27;%&#x27;</span>].astype(<span class=\"built_in\">str</span>) + <span class=\"string\">&quot;%&quot;</span>, </span><br><span class=\"line\">                     textposition=<span class=\"string\">&#x27;auto&#x27;</span>, marker_color=<span class=\"string\">&#x27;#F28705&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_trace(go.Bar(x = dfLang_21[<span class=\"string\">&#x27;Language&#x27;</span>], </span><br><span class=\"line\">                     y = dfLang_21[<span class=\"string\">&#x27;%&#x27;</span>], </span><br><span class=\"line\">                     name = <span class=\"string\">&quot;2021&quot;</span>, </span><br><span class=\"line\">                     text = dfLang_21[<span class=\"string\">&#x27;%&#x27;</span>].astype(<span class=\"built_in\">str</span>) + <span class=\"string\">&quot;%&quot;</span>, </span><br><span class=\"line\">                     textposition=<span class=\"string\">&#x27;auto&#x27;</span>, marker_color=<span class=\"string\">&#x27;#88BFBA&#x27;</span>))</span><br><span class=\"line\">fig.update_layout(title=<span class=\"string\">&#x27;&lt;b&gt;Language in EastAsia&lt;/b&gt;&#x27;</span>,title_font_size=<span class=\"number\">20</span>,</span><br><span class=\"line\">                  margin = <span class=\"built_in\">dict</span>(t=<span class=\"number\">100</span>, l=<span class=\"number\">100</span>, r=<span class=\"number\">50</span>, b=<span class=\"number\">100</span>),</span><br><span class=\"line\">                  height=<span class=\"number\">600</span>, width=<span class=\"number\">700</span>,</span><br><span class=\"line\">                  xaxis_title=<span class=\"literal\">None</span>,</span><br><span class=\"line\">                  yaxis_title=<span class=\"literal\">None</span>)</span><br><span class=\"line\">fig.update_traces(hovertemplate=<span class=\"string\">&#x27;&lt;b&gt;Percent&lt;/b&gt;: %&#123;text&#125;&#x27;</span>)</span><br><span class=\"line\">fig.update_xaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\">fig.update_yaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">14</span>),</span><br><span class=\"line\">                                    x=<span class=\"number\">0.8</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.2</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;@green_yhjw&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-2-Position-of-Data-Scientist-in-East-Asia\"><a href=\"#3-2-Position-of-Data-Scientist-in-East-Asia\" class=\"headerlink\" title=\"3.2 Position of Data Scientist in East Asia\"></a>3.2 Position of Data Scientist in East Asia</h1><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># data preprocessing</span></span><br><span class=\"line\">df21_Ea_DS = df21_Ea[df21_Ea[<span class=\"string\">&#x27;Q5&#x27;</span>].isin(Data_Scientist)].fillna(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">salary_order= [<span class=\"string\">&#x27;&lt;999&#x27;</span>, <span class=\"string\">&#x27;1,000-19,999&#x27;</span>, <span class=\"string\">&#x27;20,000-59,999&#x27;</span>, <span class=\"string\">&#x27;60,000-99,999&#x27;</span>,<span class=\"string\">&#x27;100,000-199,999&#x27;</span>, <span class=\"string\">&#x27;200,000~&#x27;</span>]</span><br><span class=\"line\">dgree_order=[ <span class=\"string\">&#x27;~college&#x27;</span>,<span class=\"string\">&#x27;Bachelor’s degree&#x27;</span>, <span class=\"string\">&#x27;Master’s degree&#x27;</span>, <span class=\"string\">&#x27;Doctoral degree~&#x27;</span>, <span class=\"string\">&#x27;etc&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">df21_Ea_DS=(df21_Ea_DS</span><br><span class=\"line\">  <span class=\"comment\">#salary      </span></span><br><span class=\"line\">          .replace(&#123;<span class=\"string\">&#x27;$0-999&#x27;</span>:<span class=\"string\">&#x27;&lt;999&#x27;</span>,<span class=\"string\">&#x27;&gt;$1,000,000&#x27;</span>:<span class=\"string\">&#x27;1,000,000~&#x27;</span>,<span class=\"string\">&#x27;$500,000-999,999&#x27;</span>:<span class=\"string\">&#x27;500,000-999,999&#x27;</span>&#125;)</span><br><span class=\"line\">         </span><br><span class=\"line\">          .replace([<span class=\"string\">&#x27;1,000-1,999&#x27;</span>,<span class=\"string\">&#x27;2,000-2,999&#x27;</span>,<span class=\"string\">&#x27;3,000-3,999&#x27;</span>, <span class=\"string\">&#x27;4,000-4,999&#x27;</span>,<span class=\"string\">&#x27;5,000-7,499&#x27;</span>,<span class=\"string\">&#x27;7,500-9,999&#x27;</span>,<span class=\"string\">&#x27;10,000-14,999&#x27;</span>, <span class=\"string\">&#x27;15,000-19,999&#x27;</span>],<span class=\"string\">&#x27;1,000-19,999&#x27;</span>)</span><br><span class=\"line\">          .replace([<span class=\"string\">&#x27;20,000-24,999&#x27;</span>,<span class=\"string\">&#x27;25,000-29,999&#x27;</span>,<span class=\"string\">&#x27;30,000-39,999&#x27;</span>, <span class=\"string\">&#x27;40,000-49,999&#x27;</span>, <span class=\"string\">&#x27;50,000-59,999&#x27;</span>],<span class=\"string\">&#x27;20,000-59,999&#x27;</span>) </span><br><span class=\"line\">          .replace([<span class=\"string\">&#x27;60,000-69,999&#x27;</span>, <span class=\"string\">&#x27;70,000-79,999&#x27;</span>, <span class=\"string\">&#x27;80,000-89,999&#x27;</span>, <span class=\"string\">&#x27;90,000-99,999&#x27;</span>], <span class=\"string\">&#x27;60,000-99,999&#x27;</span>)</span><br><span class=\"line\">          .replace([<span class=\"string\">&#x27;100,000-124,999&#x27;</span>,<span class=\"string\">&#x27;125,000-149,999&#x27;</span>,<span class=\"string\">&#x27;150,000-199,999&#x27;</span>],<span class=\"string\">&#x27;100,000-199,999&#x27;</span>)</span><br><span class=\"line\">          .replace([<span class=\"string\">&#x27;200,000-249,999&#x27;</span>, <span class=\"string\">&#x27;250,000-299,999&#x27;</span>, <span class=\"string\">&#x27;300,000-499,999&#x27;</span>,<span class=\"string\">&#x27;500,000-999,999&#x27;</span>, <span class=\"string\">&#x27;1,000,000~&#x27;</span>], <span class=\"string\">&#x27;200,000~&#x27;</span>)</span><br><span class=\"line\">  <span class=\"comment\">#degree          </span></span><br><span class=\"line\">          .replace(&#123;<span class=\"string\">&#x27;I prefer not to answer&#x27;</span>:<span class=\"string\">&#x27;etc&#x27;</span>&#125;)</span><br><span class=\"line\">          .replace([<span class=\"string\">&#x27;No formal education past high school&#x27;</span>,<span class=\"string\">&#x27;Some college/university study without earning a bachelor’s degree&#x27;</span>],<span class=\"string\">&#x27;~college&#x27;</span>)</span><br><span class=\"line\">          .replace([<span class=\"string\">&#x27;Doctoral degree&#x27;</span>, <span class=\"string\">&#x27;Professional doctorate&#x27;</span>],<span class=\"string\">&#x27;Doctoral degree~&#x27;</span>)</span><br><span class=\"line\">          )</span><br><span class=\"line\">sal_order= [<span class=\"string\">&#x27;&lt;999&#x27;</span>, <span class=\"string\">&#x27;1,000-19,999&#x27;</span>, <span class=\"string\">&#x27;20,000-59,999&#x27;</span>, <span class=\"string\">&#x27;60,000-99,999&#x27;</span>,<span class=\"string\">&#x27;100,000-199,999&#x27;</span>, <span class=\"string\">&#x27;200,000~&#x27;</span>]</span><br><span class=\"line\">dgree_order=[ <span class=\"string\">&#x27;~college&#x27;</span>,<span class=\"string\">&#x27;Bachelor’s degree&#x27;</span>, <span class=\"string\">&#x27;Master’s degree&#x27;</span>, <span class=\"string\">&#x27;Doctoral degree~&#x27;</span>, <span class=\"string\">&#x27;etc&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-2-1-Salary\"><a href=\"#3-2-1-Salary\" class=\"headerlink\" title=\"3.2.1 Salary\"></a>3.2.1 Salary</h1><hr>\n<ul>\n<li><dl><dt>Annual salary of Research Scientist.</dt><dd>The highest percentage of $2.6 million is 29.81%.</dd></dl></li>\n<li><dl><dt>The annual salary of Machine Learning Engineer.</dt><dd>The highest rate of $999 is 31.89%.</dd></dl></li>\n<li><dl><dt>The annual salary of Data Scientist is..</dt><dd>The ratio of $1,000 to $20,000 is the highest at 29.19%.</dd></dl></li>\n</ul>\n<h2>⇒ The higher the annual salary, the lower the overall job rate.</h2>\n\n<p><img src=\"/images/kaggle_final/newplot25.png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df21_Ea_DS_= df21_Ea_DS.loc[:,[<span class=\"string\">&#x27;Q5&#x27;</span>,<span class=\"string\">&#x27;Q25&#x27;</span>]].reset_index().rename(columns=&#123;<span class=\"string\">&#x27;Q5&#x27;</span>:<span class=\"string\">&#x27;Data_Scientist&#x27;</span>, <span class=\"string\">&#x27;Q25&#x27;</span>:<span class=\"string\">&#x27;Salary&#x27;</span>&#125;).fillna(<span class=\"string\">&#x27;etc&#x27;</span>)</span><br><span class=\"line\">df21_Ea_DS_= (df21_Ea_DS_.groupby([<span class=\"string\">&#x27;Data_Scientist&#x27;</span>, <span class=\"string\">&#x27;Salary&#x27;</span>]).size()</span><br><span class=\"line\">                         .reset_index()</span><br><span class=\"line\">                         .rename(columns = &#123;<span class=\"number\">0</span>:<span class=\"string\">&quot;Count&quot;</span>&#125;))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#Data Scientist</span></span><br><span class=\"line\">df21_Ea_DS_Ds = df21_Ea_DS_[df21_Ea_DS_[<span class=\"string\">&#x27;Data_Scientist&#x27;</span>] == <span class=\"string\">&quot;Data Scientist&quot;</span>].reset_index(drop = <span class=\"literal\">True</span>)</span><br><span class=\"line\">df21_Ea_DS_Ds[<span class=\"string\">&#x27;%&#x27;</span>]=((df21_Ea_DS_Ds[<span class=\"string\">&#x27;Count&#x27;</span>] / df21_Ea_DS_Ds[<span class=\"string\">&#x27;Count&#x27;</span>].<span class=\"built_in\">sum</span>())*<span class=\"number\">100</span>).<span class=\"built_in\">round</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#Machine Learning Engineer</span></span><br><span class=\"line\">df21_Ea_DS_Mle = df21_Ea_DS_[df21_Ea_DS_[<span class=\"string\">&#x27;Data_Scientist&#x27;</span>] == <span class=\"string\">&quot;Machine Learning Engineer&quot;</span>].reset_index(drop = <span class=\"literal\">True</span>)</span><br><span class=\"line\">df21_Ea_DS_Mle[<span class=\"string\">&#x27;%&#x27;</span>]=((df21_Ea_DS_Mle[<span class=\"string\">&#x27;Count&#x27;</span>] / df21_Ea_DS_Mle[<span class=\"string\">&#x27;Count&#x27;</span>].<span class=\"built_in\">sum</span>())*<span class=\"number\">100</span>).<span class=\"built_in\">round</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#Research Scientist</span></span><br><span class=\"line\">df21_Ea_DS_Rs = df21_Ea_DS_[df21_Ea_DS_[<span class=\"string\">&#x27;Data_Scientist&#x27;</span>] == <span class=\"string\">&quot;Research Scientist&quot;</span>].reset_index(drop = <span class=\"literal\">True</span>)</span><br><span class=\"line\">df21_Ea_DS_Rs[<span class=\"string\">&#x27;%&#x27;</span>]=((df21_Ea_DS_Rs[<span class=\"string\">&#x27;Count&#x27;</span>] / df21_Ea_DS_Rs[<span class=\"string\">&#x27;Count&#x27;</span>].<span class=\"built_in\">sum</span>())*<span class=\"number\">100</span>).<span class=\"built_in\">round</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\">df21_Ea_DS_Rs</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">df21_Ea_DS_salary = pd.concat([df21_Ea_DS_Ds, df21_Ea_DS_Mle, df21_Ea_DS_Rs], ignore_index = <span class=\"literal\">True</span>)</span><br><span class=\"line\">df21_Ea_DS_salary= pd.pivot(df21_Ea_DS_salary, index = <span class=\"string\">&quot;Salary&quot;</span>, columns = <span class=\"string\">&#x27;Data_Scientist&#x27;</span>, values = <span class=\"string\">&quot;%&quot;</span>).reset_index().fillna(<span class=\"string\">&#x27;0&#x27;</span>)</span><br><span class=\"line\">df21_Ea_DS_salary= df21_Ea_DS_salary.set_index(<span class=\"string\">&quot;Salary&quot;</span>).reindex(sal_order)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#graph</span></span><br><span class=\"line\">fig = go.Figure()</span><br><span class=\"line\">fig.add_trace(go.Bar(x = df21_Ea_DS_salary.index, </span><br><span class=\"line\">                     y = df21_Ea_DS_salary[<span class=\"string\">&#x27;Data Scientist&#x27;</span>], </span><br><span class=\"line\">                     name = <span class=\"string\">&quot;Data Scientist&quot;</span>, </span><br><span class=\"line\">                     text = df21_Ea_DS_salary[<span class=\"string\">&#x27;Data Scientist&#x27;</span>].astype(<span class=\"built_in\">str</span>) + <span class=\"string\">&quot;%&quot;</span>, </span><br><span class=\"line\">                     textposition=<span class=\"string\">&#x27;auto&#x27;</span>, marker_color=<span class=\"string\">&#x27;#F2798F&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_trace(go.Bar(x = df21_Ea_DS_salary.index, </span><br><span class=\"line\">                     y = df21_Ea_DS_salary[<span class=\"string\">&#x27;Machine Learning Engineer&#x27;</span>], </span><br><span class=\"line\">                     name = <span class=\"string\">&quot;Machine Learning Engineer&quot;</span>, </span><br><span class=\"line\">                     text = df21_Ea_DS_salary[<span class=\"string\">&#x27;Machine Learning Engineer&#x27;</span>].astype(<span class=\"built_in\">str</span>) + <span class=\"string\">&quot;%&quot;</span>, </span><br><span class=\"line\">                     textposition=<span class=\"string\">&#x27;auto&#x27;</span>, marker_color=<span class=\"string\">&#x27;#CDD9A3&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_trace(go.Bar(x = df21_Ea_DS_salary.index, </span><br><span class=\"line\">                     y = df21_Ea_DS_salary[<span class=\"string\">&#x27;Research Scientist&#x27;</span>], </span><br><span class=\"line\">                     name = <span class=\"string\">&quot;Research Scientist&quot;</span>, </span><br><span class=\"line\">                     text = df21_Ea_DS_salary[<span class=\"string\">&#x27;Research Scientist&#x27;</span>].astype(<span class=\"built_in\">str</span>) + <span class=\"string\">&quot;%&quot;</span>, </span><br><span class=\"line\">                     textposition=<span class=\"string\">&#x27;auto&#x27;</span>, marker_color=<span class=\"string\">&#x27;#88BFBA&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(barmode=<span class=\"string\">&#x27;stack&#x27;</span>,</span><br><span class=\"line\">                 showlegend=<span class=\"literal\">True</span>,</span><br><span class=\"line\">                 height=<span class=\"number\">600</span>, width=<span class=\"number\">700</span>,</span><br><span class=\"line\">                 title_text=<span class=\"string\">&quot;&lt;b&gt;Data Scientist&#x27;s Salary in East Asia&lt;/b&gt;&quot;</span>,</span><br><span class=\"line\">                 title_x=<span class=\"number\">0.5</span>,</span><br><span class=\"line\">                 title_font_size=<span class=\"number\">20</span>, </span><br><span class=\"line\">                  margin=<span class=\"built_in\">dict</span>(l=<span class=\"number\">100</span>, r=<span class=\"number\">100</span>, t=<span class=\"number\">100</span>, b=<span class=\"number\">100</span>))</span><br><span class=\"line\">fig.update_traces(hovertemplate=<span class=\"string\">&#x27;&lt;b&gt;Percent&lt;/b&gt;: %&#123;y&#125;%&lt;br&gt;&#x27;</span>+</span><br><span class=\"line\">                                <span class=\"string\">&#x27;&lt;b&gt;Salary&lt;/b&gt;: %&#123;x&#125;$&lt;br&gt;&#x27;</span>)</span><br><span class=\"line\">fig.update_xaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\">fig.update_yaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\">fig.update_layout(legend=<span class=\"built_in\">dict</span>(</span><br><span class=\"line\">    orientation=<span class=\"string\">&quot;v&quot;</span>,</span><br><span class=\"line\">    yanchor=<span class=\"string\">&quot;bottom&quot;</span>,</span><br><span class=\"line\">    y=<span class=\"number\">0.8</span>,</span><br><span class=\"line\">    xanchor=<span class=\"string\">&quot;right&quot;</span>,</span><br><span class=\"line\">    x=<span class=\"number\">1.2</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-2-2-Salary-Experience\"><a href=\"#3-2-2-Salary-Experience\" class=\"headerlink\" title=\"3.2.2 Salary-Experience\"></a>3.2.2 Salary-Experience</h1><hr>\n<h2>The correlation between the career of a Data Scientist and the annual salary.</h2>\n\n<p>If you don’t have experience, you have the highest rate of $999.</p>\n<p>Less than 1 year, 1-3 years have the highest percentage of $999.</p>\n<p>The highest percentage of $20,000 to $60,000 in 3-10 years.</p>\n<p>10-20 years have the highest percentage of $60,000 to $100,000.</p>\n<p><img src=\"/images/kaggle_final/newplot26.png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df21Ea_DS_ExSal = df21_Ea_DS.loc[:,[<span class=\"string\">&#x27;Q6&#x27;</span>,<span class=\"string\">&#x27;Q25&#x27;</span>]].reset_index().rename(columns=&#123;<span class=\"string\">&#x27;Q25&#x27;</span>:<span class=\"string\">&#x27;Salary&#x27;</span>, <span class=\"string\">&#x27;Q6&#x27;</span>:<span class=\"string\">&#x27;Exp&#x27;</span>&#125;).fillna(<span class=\"string\">&#x27;etc&#x27;</span>)</span><br><span class=\"line\">df21Ea_DS_ExSal= (df21Ea_DS_ExSal.groupby([<span class=\"string\">&#x27;Exp&#x27;</span>, <span class=\"string\">&#x27;Salary&#x27;</span>]).size().unstack().fillna(<span class=\"number\">0</span>).astype(<span class=\"string\">&#x27;int64&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">Exp_order=[<span class=\"string\">&#x27;&lt; 1 years&#x27;</span>,<span class=\"string\">&#x27;1-3 years&#x27;</span>,<span class=\"string\">&#x27;3-5 years&#x27;</span>, <span class=\"string\">&#x27;5-10 years&#x27;</span>, <span class=\"string\">&#x27;10-20 years&#x27;</span>, <span class=\"string\">&#x27;20+ years&#x27;</span>, <span class=\"string\">&#x27;I have never written code&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">df21Ea_DS_ExSal</span><br><span class=\"line\"></span><br><span class=\"line\">z = df21Ea_DS_ExSal</span><br><span class=\"line\">z = z[sal_order]</span><br><span class=\"line\">z = z.reindex(Exp_order)</span><br><span class=\"line\"></span><br><span class=\"line\">z_data = z.apply(<span class=\"keyword\">lambda</span> x:np.<span class=\"built_in\">round</span>(x/x.<span class=\"built_in\">sum</span>()*<span class=\"number\">100</span>, <span class=\"number\">2</span>), axis = <span class=\"number\">1</span>).to_numpy() <span class=\"comment\"># convert to correlation matrix</span></span><br><span class=\"line\">x = sal_order</span><br><span class=\"line\">y = Exp_order</span><br><span class=\"line\"></span><br><span class=\"line\">fig = ff.create_annotated_heatmap(z_data, x = x, y = y, colorscale = <span class=\"string\">&quot;sunset&quot;</span>)</span><br><span class=\"line\">fig.update_layout(title_text=<span class=\"string\">&quot;&lt;b&gt;    Data Scientist&#x27;s Experience &amp; Salary &lt;/b&gt;&quot;</span>,title_font_size=<span class=\"number\">20</span>,</span><br><span class=\"line\">                  height=<span class=\"number\">700</span>, width=<span class=\"number\">700</span>,</span><br><span class=\"line\">                  title_x=<span class=\"number\">0.5</span>,</span><br><span class=\"line\">                  margin=<span class=\"built_in\">dict</span>(l=<span class=\"number\">100</span>, r=<span class=\"number\">100</span>, t=<span class=\"number\">200</span>, b=<span class=\"number\">100</span>))</span><br><span class=\"line\">fig.update_traces(hovertemplate=<span class=\"string\">&#x27;&lt;b&gt;Salary&lt;/b&gt;: %&#123;y&#125;&lt;br&gt;&#x27;</span>+</span><br><span class=\"line\">                                <span class=\"string\">&#x27;&lt;b&gt;Experience&lt;/b&gt;: %&#123;x&#125;&lt;br&gt;&#x27;</span>+</span><br><span class=\"line\">                                <span class=\"string\">&#x27;&lt;b&gt;Percent&lt;/b&gt;: %&#123;z&#125;%&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-2-3-Degree\"><a href=\"#3-2-3-Degree\" class=\"headerlink\" title=\"3.2.3 Degree\"></a>3.2.3 Degree</h1><hr>\n<h2>Comparison of educational background of Data Scientists. <br></h2>\n <br>\n- It has the highest level of Master's Degrees. <br>\n <br>\n- Next, Doctoral Degree, <br>\n <br>\n- The figure was high in the order of Bachelor's Degree. <br>\n\n<p><img src=\"/images/kaggle_final/newplot27.png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df21_Ea_degree = df21_Ea_DS[<span class=\"string\">&#x27;Q4&#x27;</span>].value_counts().to_frame()</span><br><span class=\"line\">degree = df21_Ea_degree.index</span><br><span class=\"line\">values = df21_Ea_degree[<span class=\"string\">&#x27;Q4&#x27;</span>].tolist()</span><br><span class=\"line\"></span><br><span class=\"line\">colors = [<span class=\"string\">&#x27;#F2798F&#x27;</span>,<span class=\"string\">&#x27;#88BFBA&#x27;</span>, <span class=\"string\">&#x27;#CDD9A3&#x27;</span>, <span class=\"string\">&#x27;#F28705&#x27;</span>, <span class=\"string\">&#x27;#D9946C&#x27;</span>]</span><br><span class=\"line\">fig = go.Figure(data=[go.Bar(name=<span class=\"string\">&#x27;Degree&#x27;</span>, x=degree, y=values ,orientation=<span class=\"string\">&#x27;v&#x27;</span>, marker_color=colors, text=values, textposition=<span class=\"string\">&#x27;outside&#x27;</span>)])</span><br><span class=\"line\">fig.update_layout(title_text=<span class=\"string\">&quot;&lt;b&gt;Data Scientist&#x27;s Degree (2021)&lt;/b&gt;&quot;</span>, title_font_size=<span class=\"number\">20</span>,</span><br><span class=\"line\">                  height=<span class=\"number\">600</span>, width=<span class=\"number\">700</span>,</span><br><span class=\"line\">                  title_x=<span class=\"number\">0.5</span>,</span><br><span class=\"line\">                  margin=<span class=\"built_in\">dict</span>(l=<span class=\"number\">100</span>, r=<span class=\"number\">100</span>, t=<span class=\"number\">200</span>, b=<span class=\"number\">100</span>))</span><br><span class=\"line\">fig.update_traces(hovertemplate=<span class=\"string\">&#x27;&lt;b&gt;Count&lt;/b&gt;: %&#123;y&#125;&lt;br&gt;&#x27;</span>+</span><br><span class=\"line\">                                <span class=\"string\">&#x27;&lt;b&gt;Degree&lt;/b&gt;: %&#123;x&#125;&lt;br&gt;&#x27;</span>)</span><br><span class=\"line\">fig.update_xaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\">fig.update_yaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">14</span>),</span><br><span class=\"line\">                                    x=<span class=\"number\">0.8</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.2</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;@green_yhjw&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-2-4-Salary-Degree\"><a href=\"#3-2-4-Salary-Degree\" class=\"headerlink\" title=\"3.2.4 Salary-Degree\"></a>3.2.4 Salary-Degree</h1><hr>\n<h2>Relationship between Data Scientist's academic background and annual salary. <br></h2>\n <br>\n \n<ul>\n<li><dl><dt>If your educational background is below college, <br></dt><dd>Less than 999 dollars. <br></dd></dl><br></li>\n<li><p>The lowest annual salary accounts for the highest percentage.<br></p>\n<br></li>\n<li><p>Bachelor’s degree, Master’s Degree, Doctoral degree <br><br>:$2~60,000 dollars accounts for a large proportion <br></p>\n</li>\n</ul>\n <br>\n<h2>⇒ The higher the education level, the higher the annual salary. <br></h2>\n\n<p><img src=\"/images/kaggle_final/newplot28.png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df21Ea_DS_EduSal= df21_Ea_DS.loc[:, [<span class=\"string\">&#x27;Q4&#x27;</span>, <span class=\"string\">&#x27;Q25&#x27;</span>]].rename(columns=&#123;<span class=\"string\">&#x27;Q4&#x27;</span>:<span class=\"string\">&#x27;Edu&#x27;</span>, <span class=\"string\">&#x27;Q25&#x27;</span>:<span class=\"string\">&#x27;Salary&#x27;</span>&#125;)</span><br><span class=\"line\">df21Ea_DS_EduSal[<span class=\"string\">&#x27;Edu&#x27;</span>].unique()</span><br><span class=\"line\">Edu_order=[<span class=\"string\">&#x27;~college&#x27;</span>, <span class=\"string\">&#x27;Bachelor’s degree&#x27;</span>,<span class=\"string\">&#x27;Master’s degree&#x27;</span>, <span class=\"string\">&#x27;Doctoral degree~&#x27;</span>, <span class=\"string\">&#x27;etc&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">df21Ea_DS_EduSal= (df21Ea_DS_EduSal.groupby([<span class=\"string\">&#x27;Edu&#x27;</span>, <span class=\"string\">&#x27;Salary&#x27;</span>]).size().unstack().fillna(<span class=\"number\">0</span>).astype(<span class=\"string\">&#x27;int64&#x27;</span>))</span><br><span class=\"line\">df21Ea_DS_EduSal</span><br><span class=\"line\"></span><br><span class=\"line\">z = df21Ea_DS_EduSal</span><br><span class=\"line\">z = z[sal_order]</span><br><span class=\"line\">z = z.reindex(Edu_order)</span><br><span class=\"line\"></span><br><span class=\"line\">z_data = z.apply(<span class=\"keyword\">lambda</span> x:np.<span class=\"built_in\">round</span>(x/x.<span class=\"built_in\">sum</span>()*<span class=\"number\">100</span>, <span class=\"number\">2</span>), axis = <span class=\"number\">1</span>).to_numpy() <span class=\"comment\"># convert to correlation matrix</span></span><br><span class=\"line\">x = sal_order</span><br><span class=\"line\">y = Edu_order</span><br><span class=\"line\"></span><br><span class=\"line\">fig = ff.create_annotated_heatmap(z_data, x = x, y = y, colorscale = <span class=\"string\">&quot;sunset&quot;</span>)</span><br><span class=\"line\">fig.update_layout(title_text=<span class=\"string\">&quot;&lt;b&gt;       Data Scientist&#x27;s Degree &amp; Salary &lt;/b&gt;&quot;</span>, title_font_size=<span class=\"number\">20</span>,</span><br><span class=\"line\">                  height=<span class=\"number\">700</span>, width=<span class=\"number\">700</span>,</span><br><span class=\"line\">                  title_x=<span class=\"number\">0.5</span>,</span><br><span class=\"line\">                  margin=<span class=\"built_in\">dict</span>(l=<span class=\"number\">150</span>, r=<span class=\"number\">100</span>, t=<span class=\"number\">200</span>, b=<span class=\"number\">50</span>))</span><br><span class=\"line\">fig.update_traces(hovertemplate=<span class=\"string\">&#x27;&lt;b&gt;Degree&lt;/b&gt;: %&#123;y&#125;&lt;br&gt;&#x27;</span>+</span><br><span class=\"line\">                                <span class=\"string\">&#x27;&lt;b&gt;Salary&lt;/b&gt;: %&#123;x&#125;&lt;br&gt;&#x27;</span>+</span><br><span class=\"line\">                                <span class=\"string\">&#x27;&lt;b&gt;Percent&lt;/b&gt;: %&#123;z&#125;%&#x27;</span>)</span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">14</span>),</span><br><span class=\"line\">                                    x=<span class=\"number\">0.8</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.1</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;@green_yhjw&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-2-5-Language\"><a href=\"#3-2-5-Language\" class=\"headerlink\" title=\"3.2.5 Language\"></a>3.2.5 Language</h1><hr>\n<h2>The language that Data Scientist uses a lot. <br></h2>\n <br>\n- Python accounts for the highest percentage of 80% or more. <br>\n <br>\n- Second, I use R the most. <br>\nR is used less frequently in the order of 2019, 20, and 21. <br>\n <br>\n- From 19 to 21, the percentage of use rate of use 10% -> 4%, a total of 6% decrease. <br>\n <br>\n- The third most frequently used language is SQL. <br>\nSQL increased 0.6 percent in 2020 from 2021. <br>\n <br>\n- The fourth most frequently used languages are C language and C++. <br>\n <br>\n<h2>⇒ To become a Data Scientist, Let's study Python first! <br></h2>\n\n<p><img src=\"/images/kaggle_final/newplot29.png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#data preprocessing</span></span><br><span class=\"line\">df20_Ea_DS = df20_Ea[df20_Ea[<span class=\"string\">&#x27;Q5&#x27;</span>].isin(Data_Scientist)]</span><br><span class=\"line\">df19_Ea_DS =df19_Ea[df19_Ea[<span class=\"string\">&#x27;Q5&#x27;</span>].isin(Data_Scientist)]</span><br><span class=\"line\">df19Ea_DSLag = df19_Ea_DS.loc[:, [ <span class=\"string\">&#x27;Q5&#x27;</span>, <span class=\"string\">&#x27;Q19&#x27;</span>, <span class=\"string\">&#x27;year&#x27;</span>]]</span><br><span class=\"line\">df19Ea_DSLag = df19Ea_DSLag.rename(columns = &#123;<span class=\"string\">&#x27;Q19&#x27;</span>: <span class=\"string\">&#x27;Language&#x27;</span>&#125;, inplace = <span class=\"literal\">False</span>) <span class=\"comment\"># To match with other datasets</span></span><br><span class=\"line\">df20Ea_DSLag = df20_Ea_DS.loc[:, [ <span class=\"string\">&#x27;Q5&#x27;</span>, <span class=\"string\">&#x27;Q8&#x27;</span>, <span class=\"string\">&#x27;year&#x27;</span>]].rename(columns = &#123;<span class=\"string\">&#x27;Q8&#x27;</span>: <span class=\"string\">&#x27;Language&#x27;</span>&#125;, inplace = <span class=\"literal\">False</span>)</span><br><span class=\"line\">df21Ea_DSLag = df21_Ea_DS.loc[:, [ <span class=\"string\">&#x27;Q5&#x27;</span>, <span class=\"string\">&#x27;Q8&#x27;</span>, <span class=\"string\">&#x27;year&#x27;</span>]].rename(columns = &#123;<span class=\"string\">&#x27;Q8&#x27;</span>: <span class=\"string\">&#x27;Language&#x27;</span>&#125;, inplace = <span class=\"literal\">False</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">df3y_Ds_Lag = pd.concat([df19Ea_DSLag, df20Ea_DSLag, df21Ea_DSLag])</span><br><span class=\"line\">df3y_Ds_Lag = df3y_Ds_Lag.groupby([<span class=\"string\">&#x27;year&#x27;</span>, <span class=\"string\">&#x27;Language&#x27;</span>]).size().reset_index().rename(columns = &#123;<span class=\"number\">0</span>:<span class=\"string\">&quot;Count&quot;</span>&#125;)</span><br><span class=\"line\">df3y_Ds_Lag</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2019</span></span><br><span class=\"line\">dfLang_Ds_19 = df3y_Ds_Lag[df3y_Ds_Lag[<span class=\"string\">&#x27;year&#x27;</span>] == <span class=\"string\">&quot;2019&quot;</span>].reset_index(drop = <span class=\"literal\">True</span>)</span><br><span class=\"line\">dfLang_Ds_19[<span class=\"string\">&#x27;percentage&#x27;</span>] = dfLang_Ds_19[<span class=\"string\">&quot;Count&quot;</span>] / dfLang_Ds_19[<span class=\"string\">&quot;Count&quot;</span>].<span class=\"built_in\">sum</span>()</span><br><span class=\"line\">dfLang_Ds_19[<span class=\"string\">&#x27;%&#x27;</span>] = np.<span class=\"built_in\">round</span>(dfLang_Ds_19[<span class=\"string\">&#x27;percentage&#x27;</span>] * <span class=\"number\">100</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2020</span></span><br><span class=\"line\">dfLang_Ds_20 = df3y_Ds_Lag[df3y_Ds_Lag[<span class=\"string\">&#x27;year&#x27;</span>] == <span class=\"string\">&quot;2020&quot;</span>].reset_index(drop = <span class=\"literal\">True</span>)</span><br><span class=\"line\">dfLang_Ds_20[<span class=\"string\">&#x27;percentage&#x27;</span>] = dfLang_Ds_20[<span class=\"string\">&quot;Count&quot;</span>] / dfLang_Ds_20[<span class=\"string\">&quot;Count&quot;</span>].<span class=\"built_in\">sum</span>()</span><br><span class=\"line\">dfLang_Ds_20[<span class=\"string\">&#x27;%&#x27;</span>] = np.<span class=\"built_in\">round</span>(dfLang_Ds_20[<span class=\"string\">&#x27;percentage&#x27;</span>] * <span class=\"number\">100</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2021</span></span><br><span class=\"line\">dfLang_Ds_21 = df3y_Ds_Lag[df3y_Ds_Lag[<span class=\"string\">&#x27;year&#x27;</span>] == <span class=\"string\">&quot;2021&quot;</span>].reset_index(drop = <span class=\"literal\">True</span>)</span><br><span class=\"line\">dfLang_Ds_21[<span class=\"string\">&#x27;percentage&#x27;</span>] = dfLang_Ds_21[<span class=\"string\">&quot;Count&quot;</span>] / dfLang_Ds_21[<span class=\"string\">&quot;Count&quot;</span>].<span class=\"built_in\">sum</span>()</span><br><span class=\"line\">dfLang_Ds_21[<span class=\"string\">&#x27;%&#x27;</span>] = np.<span class=\"built_in\">round</span>(dfLang_Ds_21[<span class=\"string\">&#x27;percentage&#x27;</span>] * <span class=\"number\">100</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">dfLang_Ds_19=dfLang_Ds_19.sort_values(by=<span class=\"string\">&#x27;%&#x27;</span>, ascending=<span class=\"literal\">False</span>)</span><br><span class=\"line\">dfLang_Ds_20=dfLang_Ds_20.sort_values(by=<span class=\"string\">&#x27;%&#x27;</span>, ascending=<span class=\"literal\">False</span>)</span><br><span class=\"line\">dfLang_Ds_21=dfLang_Ds_21.sort_values(by=<span class=\"string\">&#x27;%&#x27;</span>, ascending=<span class=\"literal\">False</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#graph</span></span><br><span class=\"line\">fig = go.Figure()</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_trace(go.Bar(x = dfLang_Ds_19[<span class=\"string\">&#x27;Language&#x27;</span>], </span><br><span class=\"line\">                     y = dfLang_Ds_19[<span class=\"string\">&#x27;%&#x27;</span>], </span><br><span class=\"line\">                     name = <span class=\"string\">&quot;2019&quot;</span>, </span><br><span class=\"line\">                     text = dfLang_Ds_19[<span class=\"string\">&#x27;%&#x27;</span>].astype(<span class=\"built_in\">str</span>) + <span class=\"string\">&quot;%&quot;</span>, </span><br><span class=\"line\">                     textposition=<span class=\"string\">&#x27;auto&#x27;</span>, </span><br><span class=\"line\">                     marker_color=<span class=\"string\">&#x27;#CDD9A3&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_trace(go.Bar(x = dfLang_Ds_20[<span class=\"string\">&#x27;Language&#x27;</span>], </span><br><span class=\"line\">                     y = dfLang_Ds_20[<span class=\"string\">&#x27;%&#x27;</span>], </span><br><span class=\"line\">                     name = <span class=\"string\">&quot;2020&quot;</span>, </span><br><span class=\"line\">                     text = dfLang_Ds_20[<span class=\"string\">&#x27;%&#x27;</span>].astype(<span class=\"built_in\">str</span>) + <span class=\"string\">&quot;%&quot;</span>, </span><br><span class=\"line\">                     textposition=<span class=\"string\">&#x27;auto&#x27;</span>, </span><br><span class=\"line\">                     marker_color=<span class=\"string\">&#x27;#F28705&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_trace(go.Bar(x = dfLang_Ds_21[<span class=\"string\">&#x27;Language&#x27;</span>], </span><br><span class=\"line\">                     y = dfLang_Ds_21[<span class=\"string\">&#x27;%&#x27;</span>], </span><br><span class=\"line\">                     name = <span class=\"string\">&quot;2021&quot;</span>, </span><br><span class=\"line\">                     text = dfLang_Ds_21[<span class=\"string\">&#x27;%&#x27;</span>].astype(<span class=\"built_in\">str</span>) + <span class=\"string\">&quot;%&quot;</span>, </span><br><span class=\"line\">                     textposition=<span class=\"string\">&#x27;auto&#x27;</span>, </span><br><span class=\"line\">                     marker_color=<span class=\"string\">&#x27;#88BFBA&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(title=<span class=\"string\">&#x27;&lt;b&gt;        The language used by the data scientist&lt;/b&gt;&#x27;</span>,title_font_size=<span class=\"number\">22</span>,</span><br><span class=\"line\">                  margin = <span class=\"built_in\">dict</span>(t=<span class=\"number\">120</span>, l=<span class=\"number\">100</span>, r=<span class=\"number\">10</span>, b=<span class=\"number\">150</span>),</span><br><span class=\"line\">                  height=<span class=\"number\">600</span>, width=<span class=\"number\">700</span>)</span><br><span class=\"line\">fig.update_traces(hovertemplate=<span class=\"string\">&#x27;&lt;b&gt;Percent&lt;/b&gt;: %&#123;y&#125;%&lt;br&gt;&#x27;</span>+</span><br><span class=\"line\">                                <span class=\"string\">&#x27;&lt;b&gt;Language&lt;/b&gt;: %&#123;x&#125;&lt;br&gt;&#x27;</span>)</span><br><span class=\"line\">fig.update_xaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\">fig.update_yaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\">fig.update_layout(legend=<span class=\"built_in\">dict</span>(</span><br><span class=\"line\">    orientation=<span class=\"string\">&quot;h&quot;</span>,</span><br><span class=\"line\">    yanchor=<span class=\"string\">&quot;bottom&quot;</span>,</span><br><span class=\"line\">    y=<span class=\"number\">0.8</span>,</span><br><span class=\"line\">    xanchor=<span class=\"string\">&quot;right&quot;</span>,</span><br><span class=\"line\">    x=<span class=\"number\">1</span>))</span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">14</span>),</span><br><span class=\"line\">                                    x=<span class=\"number\">0.8</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.2</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;@green_yhjw&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n\n<h3> Parallel Categories Diagram <br></h3>\n: Visualization of multidimensional categorical datasets <br>\n <br>\nAbout 555 Data Scientist Jobs, Visualize it. <br>\nThe higher the height of the category, the more data is generated. <br>\nIt indicates that the frequency increases. <br>\n\n<p><img src=\"/images/kaggle_final/newplot30.png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ds_pc=(df21_Ea_DS.loc[:, [<span class=\"string\">&#x27;Q5&#x27;</span>,<span class=\"string\">&#x27;Q25&#x27;</span>,<span class=\"string\">&#x27;Q6&#x27;</span>,<span class=\"string\">&#x27;Q4&#x27;</span>,<span class=\"string\">&#x27;Q8&#x27;</span>]]</span><br><span class=\"line\">                 .replace(&#123;<span class=\"string\">&#x27;I have never written code&#x27;</span>: <span class=\"string\">&#x27;&lt; 1 years&#x27;</span>,  <span class=\"string\">&#x27;1-3 years&#x27;</span>: <span class=\"string\">&#x27;1-2 years&#x27;</span>&#125;)</span><br><span class=\"line\">                 .replace([<span class=\"string\">&#x27;10-20 years&#x27;</span>, <span class=\"string\">&#x27;20+ years&#x27;</span>], <span class=\"string\">&#x27;10+ years&#x27;</span> )</span><br><span class=\"line\">                 .replace([<span class=\"number\">0</span>,<span class=\"string\">&#x27;&lt;999&#x27;</span>])</span><br><span class=\"line\">                 )</span><br><span class=\"line\">fig = px.parallel_categories(ds_pc, labels=&#123;<span class=\"string\">&#x27;Q5&#x27;</span>:<span class=\"string\">&#x27;Job&#x27;</span>, <span class=\"string\">&#x27;Q25&#x27;</span>:<span class=\"string\">&#x27;Salary&#x27;</span>, <span class=\"string\">&#x27;Q6&#x27;</span>:<span class=\"string\">&#x27;Experience&#x27;</span>, <span class=\"string\">&#x27;Q4&#x27;</span>:<span class=\"string\">&#x27;Degree&#x27;</span>, <span class=\"string\">&#x27;Q8&#x27;</span>:<span class=\"string\">&#x27;Language&#x27;</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(hovermode = <span class=\"string\">&#x27;x&#x27;</span>)</span><br><span class=\"line\">fig.update_layout(title=<span class=\"string\">&#x27;&lt;b&gt;        Data Scientist&lt;/b&gt;&#x27;</span>,title_font_size=<span class=\"number\">20</span>,</span><br><span class=\"line\">                  margin = <span class=\"built_in\">dict</span>(t=<span class=\"number\">120</span>, l=<span class=\"number\">100</span>, r=<span class=\"number\">10</span>, b=<span class=\"number\">150</span>),</span><br><span class=\"line\">                  height=<span class=\"number\">600</span>, width=<span class=\"number\">700</span>)</span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">14</span>),</span><br><span class=\"line\">                                    x=<span class=\"number\">0.8</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.2</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;@green_yhjw&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"4-Ref\"><a href=\"#4-Ref\" class=\"headerlink\" title=\"4. Ref.\"></a>4. Ref.</h1><hr>\n<h2> Ref. </h2>\n\n<ul>\n<li><p>동아시아 지역 <a href=\"https://ko.wikipedia.org/wiki/%EB%8F%99%EC%95%84%EC%8B%9C%EC%95%84\">https://ko.wikipedia.org/wiki/%EB%8F%99%EC%95%84%EC%8B%9C%EC%95%84</a></p>\n</li>\n<li><p>동아시아 인구 <a href=\"https://ko.wikipedia.org/wiki/%EC%95%84%EC%8B%9C%EC%95%84%EC%9D%98_%EC%9D%B8%EA%B5%AC\">https://ko.wikipedia.org/wiki/%EC%95%84%EC%8B%9C%EC%95%84%EC%9D%98_%EC%9D%B8%EA%B5%AC</a></p>\n</li>\n<li><p>세계 인구 <a href=\"https://ko.wikipedia.org/wiki/%EC%84%B8%EA%B3%84_%EC%9D%B8%EA%B5%AC\">https://ko.wikipedia.org/wiki/%EC%84%B8%EA%B3%84_%EC%9D%B8%EA%B5%AC</a> <br> <a href=\"https://ko.wikipedia.org/wiki/%EC%9D%B8%EA%B0%84_%EA%B0%9C%EB%B0%9C_%EC%A7%80%EC%88%98#2020%EB%85%84\">https://ko.wikipedia.org/wiki/%EC%9D%B8%EA%B0%84_%EA%B0%9C%EB%B0%9C_%EC%A7%80%EC%88%98#2020%EB%85%84</a></p>\n</li>\n<li><p>동아시아 인간개발지수  <a href=\"https://namu.wiki/w/%EB%8F%99%EC%95%84%EC%8B%9C%EC%95%84\">https://namu.wiki/w/%EB%8F%99%EC%95%84%EC%8B%9C%EC%95%84</a></p>\n</li>\n<li><p> Data Scientist란  <a href=\"https://dataprofessional.tistory.com/126\">https://dataprofessional.tistory.com/126</a> <br> <a href=\"https://terms.naver.com/entry.naver?docId=1691563&amp;cid=42171&amp;categoryId=42183\">https://terms.naver.com/entry.naver?docId=1691563&amp;cid=42171&amp;categoryId=42183</a></p>\n</li>\n<li><p>Kaggle이란 <a href=\"https://ko.wikipedia.org/wiki/%EC%BA%90%EA%B8%80\">https://ko.wikipedia.org/wiki/%EC%BA%90%EA%B8%80</a></p>\n</li>\n<li><p>Python이란 <a href=\"https://ko.wikipedia.org/wiki/%ED%8C%8C%EC%9D%B4%EC%8D%AC\">https://ko.wikipedia.org/wiki/%ED%8C%8C%EC%9D%B4%EC%8D%AC</a></p>\n</li>\n<li><p>Kaggle competition Ref. <a href=\"https://www.kaggle.com/miguelfzzz/the-typical-kaggle-data-scientist-in-2021\">https://www.kaggle.com/miguelfzzz/the-typical-kaggle-data-scientist-in-2021</a> <br> <a href=\"https://www.kaggle.com/desalegngeb/how-popular-is-kaggle-in-africa\">https://www.kaggle.com/desalegngeb/how-popular-is-kaggle-in-africa</a></p>\n</li>\n</ul>\n<ul>\n<li>flaricon: <div>Icons made by <a href=\"https://www.freepik.com\" title=\"Freepik\">Freepik</a> from <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">www.flaticon.com</a></div></li>\n</ul>\n<h1 id=\"5-close\"><a href=\"#5-close\" class=\"headerlink\" title=\"5. close\"></a>5. close</h1><hr>\n<p>안녕하세요 한국에 사는 YH입니다. <br><br>python을 배운지 한달이 채 안되서 명이 한 팀이 되어  이번 대회에 참가 하게 되었습니다. <br><br>많이 부족하지만 여기까지 읽어 주셔서 감사합니다. <br><br>아직은 너무너무 부족한 제출물 이지만, 앞으로 열심히 해서 케글 대회에서 1등하는 그 날까지 지켜봐 주세요 ^^! <br><br> 혹시 코멘트로 다 전하지 못하셨던 말이 있으시다면, 저의 <a href=\"https://yoonhwa-p.github.io/\">github blog</a>에 방문하여 도움을 주세요!  <br><br>별거 없지만 놀러오세요  ;-)</p>\n<p>Hello, I’m YH and I live in Korea.<br><br>Less than a month after learning python, people became a team and participated in this competition.  <br><br>It’s not enough, but thank you for reading it up to here.  <br><br>It’s still not enough, but please watch until the day we win first place at the Kaggle competition ^^! <br><br> <br><br>If there’s anything you haven’t said in the comments, please visit my <a href=\"https://yoonhwa-p.github.io/\">github blog</a> and help me! <br><br> It’s nothing special, but come and play. ;-) <br></p>\n <br>\n <br>\n \n<p>안녕하세요 저는 YH님과 같이 Kaggle 대회를 준비 한JW 입니다.  <br><br>python을 제대로 배우지도 못한채로 나오게 된 대회라 코드 부분에서 미숙한 점도 많고  <br><br>오류도 많습니다!   <br><br>하지만 대회를 출전하면서, python에 대해서 많은 공부도 되었고, 재미도 있어서 좋은 기회가 되었던것 같습니다.  <br><br>   <br><br>아래는 저의 깃허브 주소 입니다  <br><br>데이터 관련 분야에서 일하시는 분들은 저에게 팔로우를 걸어주세요!  <br><br><a href=\"https://github.com/wldnjd2\">github</a>   <br></p>\n<p> Hello, I’m JW who prepared for the Kaggle competition with YH.  <br><br>It’s a competition where I didn’t learn python properly, so I’m not good at codes.  <br><br>There are a lot of errors, too!  <br><br>However, as I participated in the competition, I studied a lot about Python and it was a good opportunity because it was fun.  <br><br>  <br><br>Below is my Git Hub address.  <br><br>For those who work in data-related fields, please follow me!  <br><br><a href=\"https://github.com/wldnjd2\">github</a>   <br></p>\n <br>\n <br>\n <br>\n <br>","site":{"data":{}},"excerpt":"드디어 캐글 대회 작품을 제출했다.\n파이썬을 거의 하나도 배우지 않고 다른 캐글 노트북을 필사 하면서부터 시작해서\n최종 완료까지 마쳤다.\n\n파이썬의 기초가 하나도 없어서 너무 힘들었다\n그래도 다 해놓으니까 뿌듯하네\n여기서 보완하고 싶은 점은 for문을 이용해서 코드를 더 간략히 짰으면 하는 아쉬움이 있다.\n\n이제부터는 파이썬의 기본 문법에 대해서 공부를 해야겠다는 생각이 들고\n공부의 방향성이 좀 보인다\n수고했다! 내자신!\n그리고 같이 캐글 준비한 윤화님한테도 감사를..!\nkaggle주소\n\nNewbie as a data scienti","more":"<p>드디어 캐글 대회 작품을 제출했다.<br>파이썬을 거의 하나도 배우지 않고 다른 캐글 노트북을 필사 하면서부터 시작해서<br>최종 완료까지 마쳤다.</p>\n<p>파이썬의 기초가 하나도 없어서 너무 힘들었다<br>그래도 다 해놓으니까 뿌듯하네<br>여기서 보완하고 싶은 점은 for문을 이용해서 코드를 더 간략히 짰으면 하는 아쉬움이 있다.</p>\n<p>이제부터는 파이썬의 기본 문법에 대해서 공부를 해야겠다는 생각이 들고<br>공부의 방향성이 좀 보인다<br>수고했다! 내자신!<br>그리고 같이 캐글 준비한 윤화님한테도 감사를..!<br><a href=\"https://www.kaggle.com/yoonhwayam/newbies-as-a-data-scientist-in-east-asia\">kaggle주소</a></p>\n<h2 id=\"Newbie-as-a-data-scientist-in-East-Asia\"><a href=\"#Newbie-as-a-data-scientist-in-East-Asia\" class=\"headerlink\" title=\"Newbie as a data scientist in East Asia!\"></a>Newbie as a data scientist in East Asia!</h2><p>Hello, Kaggers! Nice to meet you! </p>\n<p>We are a team in East Asia that wants to be <strong>data scientists</strong> </p>\n<p>As newbies, we want to know what and/or how Kaggler is!</p>\n<p>so, let’s have a time to learn about Kaggle as a senior with us from now.</p>\n<p>If you want to support us*(or feel qute)*, I ask for a comment! (PLZ) ^0^</p>\n<p>And !! Since we are <strong>not native English speakers</strong>, please ask questions if there is a context that you don’t understand because it’s not smooth.</p>\n<p>I’ll do my best to answer.</p>\n<h1 id=\"1-Introduction\"><a href=\"#1-Introduction\" class=\"headerlink\" title=\"1 Introduction\"></a>1 Introduction</h1><ol>\n<li>what is the Kaggle<br>a subsidiary of <strong>Google LLC</strong>, is an online <strong>community of data scientists and machine learning practitioners</strong>.</li>\n</ol>\n<p>If we use kaggle, we can take the following advantages.</p>\n<pre><code>1) to find and publish data sets\n2) to explore and build models in a web-based data-science environment\n3) to work with other data scientists and machine learning engineers\n4) to enter competitions to solve data science challenges\n</code></pre>\n<p>so, As data scientist beginners, we try to participate in the Kaggle competition.</p>\n<hr>\n<ol start=\"2\">\n<li><strong>21 Kaggle</strong> Machine Learning and Data Science Survey</li>\n</ol>\n<ul>\n<li>The most comprehensive dataset available for ML and data science status</li>\n</ul>\n<p>This is the theme of the competition we will participate in this time.</p>\n<p>To become a data scientist, we compared what kind of job Kagglers has, how much experience he has, and how much money he earns by dividing into the world and East Asia.</p>\n<p>In addition, there are detailed comparisons in East Asia, and ultimately, we will to find out what data the Kaggle competition data shows.</p>\n<p>The 2021 survey, like 2017, 2018, 2019, and 2020, launched an industry-wide survey that comprehensively presents the current status of data science and machine learning.</p>\n<p>The survey was conducted from 09/01/2021 to 10/04/2021, and after cleaning the data, Kaggle received 25,973 responses!</p>\n<p>This year, Kaggle will award $30,000 in prize money to winner in this competition.</p>\n<p>we want to receive $30,000 for winning the competition, but we just hope it will help us become a <em>data scientist</em> because it is difficult for a rookie.</p>\n<p>Ref.</p>\n<p>[1] <a href=\"https://www.kaggle.com/docs/competitions\">Kgg_competitions</a></p>\n<p>[2] <a href=\"https://en.wikipedia.org/wiki/Kaggle\">Kgg_definition</a></p>\n<p>[3] <a href=\"https://www.kaggle.com/c/kaggle-survey-2021\">kaggle-survey-2021</a></p>\n<h1 id=\"1-2-Contents\"><a href=\"#1-2-Contents\" class=\"headerlink\" title=\"1.2 Contents\"></a>1.2 Contents</h1><hr>\n<blockquote>\n<pre><code>Introduction\nContents\nSummary\nData Import and Preprocessing\nPlots and Description\nKaggle&#39;s transformation. (World/East_Asia)\n    1 user transformation\n    2 Gender transformation\n    3 Job transformation\n    4 Age  transformation\n    5 Degree transformation\n    6 Experience transformation\n    7 Salary transformation\n    8 Language transformatio\n</code></pre>\n<p>   Position of Data Scientist in East Asia<br>        1 Salary<br>        2 Salary-Experience<br>        3 Degree<br>        4 Salary-Degree<br>        5 Language<br>    Discussion<br>    Close</p>\n</blockquote>\n<h1 id=\"1-3-Summary\"><a href=\"#1-3-Summary\" class=\"headerlink\" title=\"1.3 Summary\"></a>1.3 Summary</h1><hr>\n<h3> used data </h3>\n\n<p>We used all the data for five years. (2017~2021)</p>\n<h3>  used Language and Library </h3>\n\n<ul>\n<li>Numpy</li>\n<li>Metplotlib</li>\n<li>seaborn</li>\n<li>Plotly<ul>\n<li>plotly.express : An interface where you can draw a graph easily and quickly.</li>\n<li>plotly.graph_objects : You can customize it in the way you want because you can do more detailed work than express.</li>\n<li>plotly.figure_factory : Used before express existed and remains in the module for compatibility with previous versions</li>\n<li>plotly.subplots : A module that displays multiple graphs in one figure.</li>\n<li>plotly.offline : Save locally and create HTML that opens in a web browser and make it standalone</li>\n</ul>\n</li>\n</ul>\n<h3> Grouping data sections </h3>\n\n<ul>\n<li>East Asia and World<ul>\n<li>East Asia : [‘China’,’Taiwan’, ‘South Korea’, ‘Japan’]</li>\n<li>World : all data</li>\n</ul>\n</li>\n<li>Gender<ul>\n<li>[Male, Female, Others]</li>\n</ul>\n</li>\n<li>Job   <br>    <strong>Data_Analyst</strong> =[‘Data Analyst’,’Data Miner,Information technology’,’Data Miner’, ‘Predictive Modeler’,’Information technology, networking, or system administration’,<br>‘A business discipline (accounting, economics, finance, etc.)’, ‘Business Analyst’, Humanities’, ‘Statistician’, ‘Mathematics or statistics’,<br>‘Medical or life sciences (biology, chemistry, medicine, etc.)’, Physics or astronomy’, ‘Social sciences (anthropology, psychology, sociology, etc.)’,<br>‘Environmental science or geology’, ‘Humanities (history, literature, philosophy, etc.)’] <br>    <strong>Data_Scientist</strong> =[‘Data Scientist’,  ‘Research Scientist’, ‘Researcher’,’Machine Learning Engineer’, ‘Scientist/Researcher’] <br>    <strong>Developer</strong>=[‘Developer Relations/Advocacy’,’Data Engineer’,’Engineer’,’Engineering (non-computer focused)’,<br>‘Programmer’,’Software Engineer’, ‘Computer Scientist’,’Computer science (software engineering, etc.)’,  ‘Fine arts or performing arts’,’Product Manager’, ‘Software Developer/Software Engineer’,<br>‘Product/Project Manager’,’Program/Project Manager’,’DBA/Database Engineer’]    <strong>Not_Employed</strong> = [‘Currently not employed’, ‘Not employed’, ‘Student’] <br>    <strong>Others</strong> = [‘I never declared a major’, ‘Other’] <br> <br></li>\n<li>Age<br>[18-21, 20s, 30s, 40s, 50s, 60s&lt;] <br></li>\n<li>Degree<br>[‘college’, ‘Bachelor’s degree’,’Master’s degree’, ‘Doctoral degree~’, ‘etc’] <br></li>\n<li>Experience<br>[&lt;1, 1-3, 3-5, 5-10, 10+] <br></li>\n<li>Salary<br>[&lt;999, 1,000-20,000, 20,000-59,999, 60,000-99,999, 100,000-199,999, 200,000~] <br></li>\n</ul>\n<h1 id=\"2-data-Import-and-pre-treatments\"><a href=\"#2-data-Import-and-pre-treatments\" class=\"headerlink\" title=\"2. data Import and pre-treatments\"></a>2. data Import and pre-treatments</h1><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">import</span> seaborn <span class=\"keyword\">as</span> sns</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pylab <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> plotly.io <span class=\"keyword\">as</span> pio</span><br><span class=\"line\"><span class=\"keyword\">import</span> plotly.express <span class=\"keyword\">as</span> px</span><br><span class=\"line\"><span class=\"keyword\">import</span> plotly.graph_objects <span class=\"keyword\">as</span> go</span><br><span class=\"line\"><span class=\"keyword\">import</span> plotly.figure_factory <span class=\"keyword\">as</span> ff</span><br><span class=\"line\"><span class=\"keyword\">from</span> plotly.subplots <span class=\"keyword\">import</span> make_subplots</span><br><span class=\"line\"><span class=\"keyword\">from</span> plotly.offline <span class=\"keyword\">import</span> init_notebook_mode, iplot</span><br><span class=\"line\">init_notebook_mode(connected=<span class=\"literal\">True</span>)</span><br><span class=\"line\">pio.templates.default = <span class=\"string\">&quot;none&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">for</span> dirname, _, filenames <span class=\"keyword\">in</span> os.walk(<span class=\"string\">&#x27;/kaggle/input&#x27;</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> filename <span class=\"keyword\">in</span> filenames:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(os.path.join(dirname, filename))</span><br><span class=\"line\"><span class=\"keyword\">import</span> warnings</span><br><span class=\"line\">warnings.filterwarnings(<span class=\"string\">&quot;ignore&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df17= pd.read_csv(<span class=\"string\">&quot;/kaggle/input/kaggle-survey-2017/multipleChoiceResponses.csv&quot;</span>, encoding=<span class=\"string\">&quot;ISO-8859-1&quot;</span>)</span><br><span class=\"line\">df18= pd.read_csv(<span class=\"string\">&quot;/kaggle/input/kaggle-survey-2018/multipleChoiceResponses.csv&quot;</span>, )</span><br><span class=\"line\">df19= pd.read_csv(<span class=\"string\">&quot;/kaggle/input/kaggle-survey-2019/multiple_choice_responses.csv&quot;</span>, )</span><br><span class=\"line\">df20= pd.read_csv(<span class=\"string\">&quot;/kaggle/input/kaggle-survey-2020/kaggle_survey_2020_responses.csv&quot;</span>, )</span><br><span class=\"line\">df21= pd.read_csv(<span class=\"string\">&quot;/kaggle/input/kaggle-survey-2021/kaggle_survey_2021_responses.csv&quot;</span>, )</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-plots-and-description\"><a href=\"#3-plots-and-description\" class=\"headerlink\" title=\"3. plots and description\"></a>3. plots and description</h1><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#질문 제거하기, replace</span></span><br><span class=\"line\">df17= df17.iloc[<span class=\"number\">1</span>:, :].replace(<span class=\"string\">&quot;People &#x27;s Republic of China&quot;</span>,<span class=\"string\">&#x27;China&#x27;</span>)</span><br><span class=\"line\">df18= df18.iloc[<span class=\"number\">1</span>:, :].replace(<span class=\"string\">&#x27;Republic of Korea&#x27;</span>,<span class=\"string\">&#x27;South Korea&#x27;</span>)</span><br><span class=\"line\">df19= df19.iloc[<span class=\"number\">1</span>:, :].replace(<span class=\"string\">&#x27;Republic of Korea&#x27;</span>,<span class=\"string\">&#x27;South Korea&#x27;</span>)</span><br><span class=\"line\">df20= df20.iloc[<span class=\"number\">1</span>:, :].replace(<span class=\"string\">&#x27;Republic of Korea&#x27;</span>,<span class=\"string\">&#x27;South Korea&#x27;</span>)</span><br><span class=\"line\">df21= df21.iloc[<span class=\"number\">1</span>:, :]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## East Asia에는 대한민국, 일본, 중국, 타이완, 몽골, 북조선 총 6개의 국가가 속해 있다. </span></span><br><span class=\"line\"><span class=\"comment\">## 이유는 알 수 없지만, 18년도엔 타이완이 없다. </span></span><br><span class=\"line\">EastAsia17 = [<span class=\"string\">&#x27;China&#x27;</span>,<span class=\"string\">&quot;People &#x27;s Republic of China&quot;</span>, <span class=\"string\">&#x27;Taiwan&#x27;</span>, <span class=\"string\">&#x27;South Korea&#x27;</span>, <span class=\"string\">&#x27;Japan&#x27;</span>]</span><br><span class=\"line\">EastAsia18= [<span class=\"string\">&#x27;China&#x27;</span>, <span class=\"string\">&#x27;South Korea&#x27;</span>, <span class=\"string\">&#x27;Japan&#x27;</span>, <span class=\"string\">&#x27;Republic of Korea&#x27;</span>] </span><br><span class=\"line\">EastAsia19 = [<span class=\"string\">&#x27;China&#x27;</span>,<span class=\"string\">&#x27;Taiwan&#x27;</span>, <span class=\"string\">&#x27;South Korea&#x27;</span>, <span class=\"string\">&#x27;Japan&#x27;</span>, <span class=\"string\">&#x27;Republic of Korea&#x27;</span>]</span><br><span class=\"line\">EastAsia20 = [<span class=\"string\">&#x27;China&#x27;</span>,<span class=\"string\">&#x27;Taiwan&#x27;</span>, <span class=\"string\">&#x27;South Korea&#x27;</span>,<span class=\"string\">&#x27;Republic of Korea&#x27;</span>, <span class=\"string\">&#x27;Japan&#x27;</span>]</span><br><span class=\"line\">EastAsia21 = [<span class=\"string\">&#x27;China&#x27;</span>,<span class=\"string\">&#x27;Taiwan&#x27;</span>, <span class=\"string\">&#x27;South Korea&#x27;</span>, <span class=\"string\">&#x27;Japan&#x27;</span>]</span><br><span class=\"line\">EastAsia = [<span class=\"string\">&#x27;Republic of Korea&#x27;</span>,<span class=\"string\">&#x27;China&#x27;</span>,<span class=\"string\">&#x27;Taiwan&#x27;</span>, <span class=\"string\">&#x27;South Korea&#x27;</span>, <span class=\"string\">&#x27;Japan&#x27;</span>, <span class=\"string\">&quot;People &#x27;s Republic of China&quot;</span> ]</span><br><span class=\"line\"></span><br><span class=\"line\">df21_Ea = df21[df21[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(EastAsia)]</span><br><span class=\"line\">df21_Wo = df21[~df21[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(EastAsia)]</span><br><span class=\"line\">df21[<span class=\"string\">&#x27;region&#x27;</span>]=[<span class=\"string\">&quot;EastAsia&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> EastAsia <span class=\"keyword\">else</span> <span class=\"string\">&quot;World&quot;</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> df21[<span class=\"string\">&#x27;Q3&#x27;</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\">df20_Ea = df20[df20[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(EastAsia)]</span><br><span class=\"line\">df20_Wo = df20[~df20[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(EastAsia)]</span><br><span class=\"line\">df20[<span class=\"string\">&#x27;region&#x27;</span>]=[<span class=\"string\">&quot;EastAsia&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> EastAsia <span class=\"keyword\">else</span> <span class=\"string\">&quot;World&quot;</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> df20[<span class=\"string\">&#x27;Q3&#x27;</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\">df19_Ea = df19[df19[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(EastAsia)]</span><br><span class=\"line\">df19_Wo = df19[~df19[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(EastAsia)]</span><br><span class=\"line\">df19[<span class=\"string\">&#x27;region&#x27;</span>]=[<span class=\"string\">&quot;EastAsia&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> EastAsia <span class=\"keyword\">else</span> <span class=\"string\">&quot;World&quot;</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> df19[<span class=\"string\">&#x27;Q3&#x27;</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\">df18_Ea = df18[df18[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(EastAsia)]</span><br><span class=\"line\">df18_Wo = df18[~df18[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(EastAsia)]</span><br><span class=\"line\">df18[<span class=\"string\">&#x27;region&#x27;</span>]=[<span class=\"string\">&quot;EastAsia&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> EastAsia <span class=\"keyword\">else</span> <span class=\"string\">&quot;World&quot;</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> df18[<span class=\"string\">&#x27;Q3&#x27;</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\">df17_Ea = df17[df17[<span class=\"string\">&#x27;Country&#x27;</span>].isin(EastAsia)]</span><br><span class=\"line\">df17_Wo = df17[~df17[<span class=\"string\">&#x27;Country&#x27;</span>].isin(EastAsia)]</span><br><span class=\"line\">df17[<span class=\"string\">&#x27;region&#x27;</span>]=[<span class=\"string\">&quot;EastAsia&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> EastAsia <span class=\"keyword\">else</span> <span class=\"string\">&quot;World&quot;</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> df17[<span class=\"string\">&#x27;Country&#x27;</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\">df21[<span class=\"string\">&#x27;year&#x27;</span>] = <span class=\"string\">&#x27;2021&#x27;</span></span><br><span class=\"line\">df20[<span class=\"string\">&#x27;year&#x27;</span>] = <span class=\"string\">&#x27;2020&#x27;</span></span><br><span class=\"line\">df19[<span class=\"string\">&#x27;year&#x27;</span>] = <span class=\"string\">&#x27;2019&#x27;</span></span><br><span class=\"line\">df18[<span class=\"string\">&#x27;year&#x27;</span>] = <span class=\"string\">&#x27;2018&#x27;</span></span><br><span class=\"line\">df17[<span class=\"string\">&#x27;year&#x27;</span>] = <span class=\"string\">&#x27;2017&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">years = [<span class=\"string\">&#x27;2017&#x27;</span>, <span class=\"string\">&#x27;2018&#x27;</span>, <span class=\"string\">&#x27;2019&#x27;</span>, <span class=\"string\">&#x27;2020&#x27;</span>, <span class=\"string\">&#x27;2021&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">df21_Ea = df21[df21[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(EastAsia21)]</span><br><span class=\"line\">Ea21= (</span><br><span class=\"line\">    df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>].value_counts().to_frame()</span><br><span class=\"line\">    .reset_index().rename(columns=&#123;<span class=\"string\">&#x27;index&#x27;</span>:<span class=\"string\">&#x27;Country&#x27;</span>, <span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;21&#x27;</span>&#125;))</span><br><span class=\"line\"></span><br><span class=\"line\">df20_Ea=df20[df20[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(EastAsia)]</span><br><span class=\"line\">Ea20= (</span><br><span class=\"line\">    df20_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>].replace(<span class=\"string\">&#x27;Republic of Korea&#x27;</span>,<span class=\"string\">&#x27;South Korea&#x27;</span>)</span><br><span class=\"line\">    .value_counts().to_frame().reset_index()</span><br><span class=\"line\">    .rename(columns=&#123;<span class=\"string\">&#x27;index&#x27;</span>:<span class=\"string\">&#x27;Country&#x27;</span>, <span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;20&#x27;</span>&#125;))</span><br><span class=\"line\"></span><br><span class=\"line\">df19_Ea=df19[df19[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(EastAsia)]</span><br><span class=\"line\">Ea19= (df19_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>].replace(<span class=\"string\">&#x27;Republic of Korea&#x27;</span>,<span class=\"string\">&#x27;South Korea&#x27;</span>)</span><br><span class=\"line\">       .value_counts().to_frame().reset_index()</span><br><span class=\"line\">       .rename(columns=&#123;<span class=\"string\">&#x27;index&#x27;</span>:<span class=\"string\">&#x27;Country&#x27;</span>, <span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;19&#x27;</span>&#125;))</span><br><span class=\"line\"></span><br><span class=\"line\">df18_Ea=df18[df18[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(EastAsia)]</span><br><span class=\"line\">Ea18= (df18_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>].replace(<span class=\"string\">&#x27;Republic of Korea&#x27;</span>,<span class=\"string\">&#x27;South Korea&#x27;</span>)</span><br><span class=\"line\">       .value_counts().to_frame().reset_index()</span><br><span class=\"line\">       .rename(columns=&#123;<span class=\"string\">&#x27;index&#x27;</span>:<span class=\"string\">&#x27;Country&#x27;</span>, <span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;18&#x27;</span>&#125;))</span><br><span class=\"line\">Ea18.value_counts()</span><br><span class=\"line\"><span class=\"comment\">#df18 열에 taiwan = 0을 추가 해야 합니다. </span></span><br><span class=\"line\"></span><br><span class=\"line\">df17_Ea = df17[df17[<span class=\"string\">&#x27;Country&#x27;</span>].isin(EastAsia)]</span><br><span class=\"line\">Ea17= (df17_Ea[<span class=\"string\">&#x27;Country&#x27;</span>].replace(<span class=\"string\">&quot;People &#x27;s Republic of China&quot;</span>,<span class=\"string\">&#x27;China&#x27;</span>)</span><br><span class=\"line\">       .value_counts().to_frame().reset_index()</span><br><span class=\"line\">       .rename(columns=&#123;<span class=\"string\">&#x27;index&#x27;</span>:<span class=\"string\">&#x27;Country&#x27;</span>, <span class=\"string\">&#x27;Country&#x27;</span>:<span class=\"string\">&#x27;17&#x27;</span>&#125;))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#data를 합쳐서 하나의 dataframe으로 만들어 줌.</span></span><br><span class=\"line\">df5years = pd.merge(Ea17, Ea18, on=<span class=\"string\">&#x27;Country&#x27;</span>, how=<span class=\"string\">&#x27;outer&#x27;</span>)</span><br><span class=\"line\">df5year =pd.merge(Ea19,Ea20, on=<span class=\"string\">&#x27;Country&#x27;</span>, how=<span class=\"string\">&#x27;outer&#x27;</span>)</span><br><span class=\"line\">df5year=pd.merge(df5year, Ea21, on=<span class=\"string\">&#x27;Country&#x27;</span>, how=<span class=\"string\">&#x27;outer&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">df5years = pd.merge(df5years, df5year, on=<span class=\"string\">&#x27;Country&#x27;</span>, how=<span class=\"string\">&#x27;outer&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">Ea21 = <span class=\"built_in\">len</span>(df21_Ea)</span><br><span class=\"line\">Wo21 = <span class=\"built_in\">len</span>(df21) - <span class=\"built_in\">len</span>(df21_Ea)</span><br><span class=\"line\"></span><br><span class=\"line\">Ea20 = <span class=\"built_in\">len</span>(df20_Ea)</span><br><span class=\"line\">Wo20 = <span class=\"built_in\">len</span>(df20) - <span class=\"built_in\">len</span>(df20_Ea)</span><br><span class=\"line\"></span><br><span class=\"line\">Ea19 = <span class=\"built_in\">len</span>(df19_Ea)</span><br><span class=\"line\">Wo19 = <span class=\"built_in\">len</span>(df19) - <span class=\"built_in\">len</span>(df19_Ea)</span><br><span class=\"line\"></span><br><span class=\"line\">Ea18 = <span class=\"built_in\">len</span>(df18_Ea)</span><br><span class=\"line\">Wo18 = <span class=\"built_in\">len</span>(df18) -  <span class=\"built_in\">len</span>(df18_Ea)</span><br><span class=\"line\"></span><br><span class=\"line\">Ea17 = <span class=\"built_in\">len</span>(df17_Ea)</span><br><span class=\"line\">Wo17 = <span class=\"built_in\">len</span>(df17) - <span class=\"built_in\">len</span>(df17_Ea)</span><br><span class=\"line\"></span><br><span class=\"line\">years = [<span class=\"string\">&#x27;2017&#x27;</span>,<span class=\"string\">&#x27;2018&#x27;</span>,<span class=\"string\">&#x27;2019&#x27;</span>,<span class=\"string\">&#x27;2020&#x27;</span>, <span class=\"string\">&#x27;2021&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">percent</span> (<span class=\"params\">a, b</span>):</span></span><br><span class=\"line\">    result =a/(a+b)*<span class=\"number\">100</span></span><br><span class=\"line\">    result = np.<span class=\"built_in\">round</span>(result, <span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">percentR</span> (<span class=\"params\">b, a</span>):</span></span><br><span class=\"line\">    result =a/(a+b)*<span class=\"number\">100</span></span><br><span class=\"line\">    result = np.<span class=\"built_in\">round</span>(result, <span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\"></span><br><span class=\"line\">percent = [percent(Ea17, Wo17), percent(Ea18, Wo18), percent(Ea19, Wo19), </span><br><span class=\"line\">                                                 percent(Ea20, Wo20), percent(Ea21, Wo21)]</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-1-Kaggle’s-transformation-World-East-Asia\"><a href=\"#3-1-Kaggle’s-transformation-World-East-Asia\" class=\"headerlink\" title=\"3.1 Kaggle’s transformation (World/East Asia)\"></a>3.1 Kaggle’s transformation (World/East Asia)</h1><hr>\n<h1 id=\"3-1-1-user-transformation\"><a href=\"#3-1-1-user-transformation\" class=\"headerlink\" title=\"3.1.1 user transformation\"></a>3.1.1 user transformation</h1><h2> Number of respondents </h2>\n    \n<p>(bar, scatter plot : number of respondents to World and East Asia,<br>Map plot : number of respondents to East Asia)</p>\n<p><strong>World and East Asia: The same trend.</strong></p>\n<p>East Asia: 15% of the total continent and 20.3% of the population (16/78.7: Ea/Wo)</p>\n<p>2018 Issue: Significant increase in respondents-&gt;Hypothesis: Due to the rapid increase in China.</p>\n<p>2018 Outliers Considering: 2022 Kaggle survey Respondents: Increased in both World and East Asia</p>\n<p>I wish our team the honor of becoming a respondent to the Kaggle survey in 2022….</p>\n<p><img src=\"/images/kaggle_final/newplot.png\"></p>\n<p><img src=\"/images/kaggle_final/newplot1.png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fig = go.Figure()</span><br><span class=\"line\">y=[<span class=\"built_in\">len</span>(df17_Ea),<span class=\"built_in\">len</span>(df18_Ea), <span class=\"built_in\">len</span>(df19_Ea),<span class=\"built_in\">len</span>(df20_Ea),<span class=\"built_in\">len</span>(df21_Ea)]</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_trace(go.Bar(x=years, y=y,</span><br><span class=\"line\">                base=<span class=\"number\">0</span>,</span><br><span class=\"line\">                marker_color=<span class=\"string\">&#x27;#F2D64B&#x27;</span>,</span><br><span class=\"line\">                yaxis = <span class=\"string\">&quot;y1&quot;</span>,</span><br><span class=\"line\">                name=<span class=\"string\">&#x27;East Asia&#x27;</span>,</span><br><span class=\"line\">                text= percent,</span><br><span class=\"line\">                texttemplate=<span class=\"string\">&#x27;%&#123;text&#125;  %&#x27;</span>, </span><br><span class=\"line\">                textposition=<span class=\"string\">&#x27;outside&#x27;</span>,</span><br><span class=\"line\">                hovertemplate=<span class=\"string\">&#x27;&lt;b&gt;KaggleUser&lt;/b&gt;: %&#123;x&#125;&lt;br&gt;&#x27;</span>+ <span class=\"string\">&#x27;&lt;b&gt;Count&lt;/b&gt;: %&#123;y&#125;&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_trace(go.Scatter(name = <span class=\"string\">&quot;World&quot;</span>,</span><br><span class=\"line\">           x=years, </span><br><span class=\"line\">           y=[<span class=\"built_in\">len</span>(df17), <span class=\"built_in\">len</span>(df18), <span class=\"built_in\">len</span>(df19), <span class=\"built_in\">len</span>(df20), <span class=\"built_in\">len</span>(df21)],</span><br><span class=\"line\">           marker_color=<span class=\"string\">&#x27;#979DA6&#x27;</span>,</span><br><span class=\"line\">           mode = <span class=\"string\">&#x27;lines+markers&#x27;</span>, <span class=\"comment\"># please check option here</span></span><br><span class=\"line\">           yaxis = <span class=\"string\">&quot;y2&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_traces(hovertemplate=<span class=\"string\">&#x27;&lt;b&gt;Count&lt;/b&gt;: %&#123;y&#125;&lt;br&gt;&lt;extra&gt;&lt;/extra&gt;&#x27;</span>+</span><br><span class=\"line\">                                <span class=\"string\">&#x27;&lt;b&gt;Year&lt;/b&gt;: %&#123;x&#125;&lt;br&gt;&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(yaxis  = <span class=\"built_in\">dict</span>(title = <span class=\"string\">&quot;Kaggle User in East Asia&quot;</span>,showgrid = <span class=\"literal\">False</span>, <span class=\"built_in\">range</span>=[<span class=\"number\">0</span>, <span class=\"built_in\">len</span>(df21_Ea)*<span class=\"number\">1.2</span>]),</span><br><span class=\"line\">                  yaxis2 = <span class=\"built_in\">dict</span>(title = <span class=\"string\">&quot;Kaggle User in World&quot;</span>, overlaying = <span class=\"string\">&quot;y1&quot;</span>, side = <span class=\"string\">&quot;right&quot;</span>, </span><br><span class=\"line\">                  showgrid = <span class=\"literal\">False</span>, </span><br><span class=\"line\">                  zeroline = <span class=\"literal\">False</span>, <span class=\"built_in\">range</span>=[<span class=\"number\">0</span>, <span class=\"built_in\">len</span>(df21)*<span class=\"number\">1.2</span>]))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(title=<span class=\"string\">&#x27;&lt;b&gt;Kaggle Users&lt;/b&gt;&#x27;</span>,title_font_size=<span class=\"number\">20</span>,</span><br><span class=\"line\">                  margin = <span class=\"built_in\">dict</span>(t=<span class=\"number\">200</span>, l=<span class=\"number\">100</span>, r=<span class=\"number\">50</span>, b=<span class=\"number\">200</span>),</span><br><span class=\"line\">                  height=<span class=\"number\">700</span>, width=<span class=\"number\">700</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(legend=<span class=\"built_in\">dict</span>(</span><br><span class=\"line\">    orientation=<span class=\"string\">&quot;h&quot;</span>,</span><br><span class=\"line\">    yanchor=<span class=\"string\">&quot;bottom&quot;</span>,</span><br><span class=\"line\">    y=<span class=\"number\">1.1</span>,</span><br><span class=\"line\">    xanchor=<span class=\"string\">&quot;right&quot;</span>,</span><br><span class=\"line\">    x=<span class=\"number\">1</span>))</span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">14</span>),</span><br><span class=\"line\">                                    x=<span class=\"number\">0.9</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.25</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;@green_yhjw&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\">fig.show()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">world_map</span>(<span class=\"params\">locations,counts,title</span>):</span></span><br><span class=\"line\">    data = [ <span class=\"built_in\">dict</span>(</span><br><span class=\"line\">            <span class=\"built_in\">type</span> = <span class=\"string\">&#x27;choropleth&#x27;</span>,</span><br><span class=\"line\">            locations = locations,</span><br><span class=\"line\">            z = counts,</span><br><span class=\"line\">            colorscale = <span class=\"string\">&#x27;Reds&#x27;</span>,</span><br><span class=\"line\">            locationmode = <span class=\"string\">&#x27;country names&#x27;</span>,</span><br><span class=\"line\">            autocolorscale = <span class=\"literal\">False</span>,</span><br><span class=\"line\">            reversescale = <span class=\"literal\">False</span>,</span><br><span class=\"line\">            marker = <span class=\"built_in\">dict</span>(</span><br><span class=\"line\">                line = <span class=\"built_in\">dict</span>(color = <span class=\"string\">&#x27;#F7F7F7&#x27;</span>, width = <span class=\"number\">1.5</span>)),</span><br><span class=\"line\">                colorbar = <span class=\"built_in\">dict</span>(autotick = <span class=\"literal\">True</span>, legth = <span class=\"number\">3</span>, <span class=\"built_in\">len</span>=<span class=\"number\">0.75</span>, title = <span class=\"string\">&#x27;respodents&#x27;</span>,</span><br><span class=\"line\">                               <span class=\"built_in\">max</span> = <span class=\"number\">1000</span>, <span class=\"built_in\">min</span> = <span class=\"number\">0</span>))]</span><br><span class=\"line\">    layout = <span class=\"built_in\">dict</span>(</span><br><span class=\"line\">        title=title,</span><br><span class=\"line\">        titlefont=&#123;<span class=\"string\">&#x27;size&#x27;</span>: <span class=\"number\">28</span>&#125;,</span><br><span class=\"line\">        width=<span class=\"number\">700</span>, </span><br><span class=\"line\">        height=<span class=\"number\">600</span>,</span><br><span class=\"line\">        paper_bgcolor=<span class=\"string\">&#x27;#FFFFFF&#x27;</span>, </span><br><span class=\"line\">        margin=<span class=\"built_in\">dict</span>(l=<span class=\"number\">50</span>, r=<span class=\"number\">50</span>, t=<span class=\"number\">100</span>, b=<span class=\"number\">100</span>),</span><br><span class=\"line\">        geo = <span class=\"built_in\">dict</span>(</span><br><span class=\"line\">            showframe = <span class=\"literal\">True</span>,</span><br><span class=\"line\">            showcoastlines = <span class=\"literal\">True</span>,</span><br><span class=\"line\">            fitbounds=<span class=\"string\">&quot;locations&quot;</span>))</span><br><span class=\"line\">   </span><br><span class=\"line\">    fig = <span class=\"built_in\">dict</span>(data=data, layout=layout)</span><br><span class=\"line\">    iplot(fig, validate=<span class=\"literal\">False</span>, filename=<span class=\"string\">&#x27;world-map&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">z = df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>].value_counts()</span><br><span class=\"line\"> </span><br><span class=\"line\">world_map(locations=z.index, counts=z.values, title= <span class=\"string\">&#x27;&lt;b&gt;EastAsia Countries&lt;b&gt;&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h2>18’ : </h2>\n\n<p>User change between United States and India.</p>\n<p>China’s markedly increase in 2018</p>\n<ul>\n<li>There is no Taiwan, but only China has increased. : East Asian political situation Issue can be suspected.</li>\n</ul>\n<p><img src=\"/images/kaggle_final/newplot2.png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A18 = (</span><br><span class=\"line\">    df18[<span class=\"string\">&#x27;Q3&#x27;</span>]</span><br><span class=\"line\">    .replace(&#123;<span class=\"string\">&#x27;Republic of Korea&#x27;</span>:<span class=\"string\">&#x27;South Korea&#x27;</span>,</span><br><span class=\"line\">             <span class=\"string\">&#x27;I do not wish to disclose my location&#x27;</span> : <span class=\"string\">&#x27;Other&#x27;</span>&#125;)</span><br><span class=\"line\">    .value_counts()</span><br><span class=\"line\">    .to_frame()</span><br><span class=\"line\">    .reset_index()</span><br><span class=\"line\">    .rename(columns=&#123;<span class=\"string\">&#x27;index&#x27;</span>:<span class=\"string\">&#x27;type&#x27;</span>, <span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;2018&#x27;</span>&#125;)</span><br><span class=\"line\">    .groupby(<span class=\"string\">&#x27;type&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"built_in\">sum</span>()</span><br><span class=\"line\">    .reset_index()</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">A19 = (</span><br><span class=\"line\">    df19[<span class=\"string\">&#x27;Q3&#x27;</span>]</span><br><span class=\"line\">    .replace(<span class=\"string\">&#x27;Republic of Korea&#x27;</span>,<span class=\"string\">&#x27;South Korea&#x27;</span>)</span><br><span class=\"line\">    .value_counts()</span><br><span class=\"line\">    .to_frame()</span><br><span class=\"line\">    .reset_index()</span><br><span class=\"line\">    .rename(columns=&#123;<span class=\"string\">&#x27;index&#x27;</span>:<span class=\"string\">&#x27;type&#x27;</span>, <span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;2019&#x27;</span>&#125;)</span><br><span class=\"line\">    .groupby(<span class=\"string\">&#x27;type&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"built_in\">sum</span>()</span><br><span class=\"line\">    .reset_index()</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">A17 = (</span><br><span class=\"line\">    df17[<span class=\"string\">&#x27;Country&#x27;</span>]</span><br><span class=\"line\">    .replace(&#123;<span class=\"string\">&#x27;United States&#x27;</span>: <span class=\"string\">&#x27;United States of America&#x27;</span>,</span><br><span class=\"line\">              <span class=\"string\">&#x27;Hong Kong&#x27;</span>: <span class=\"string\">&#x27;Hong Kong (S.A.R.)&#x27;</span>, </span><br><span class=\"line\">              <span class=\"string\">&#x27;United Kingdom&#x27;</span>:<span class=\"string\">&#x27;United Kingdom of Great Britain and Northern Ireland&#x27;</span>,</span><br><span class=\"line\">             &#125;)</span><br><span class=\"line\">    .replace(<span class=\"string\">&quot;People &#x27;s Republic of China&quot;</span>,<span class=\"string\">&#x27;China&#x27;</span>)</span><br><span class=\"line\">    .value_counts()</span><br><span class=\"line\">    .to_frame()</span><br><span class=\"line\">    .reset_index()</span><br><span class=\"line\">    .rename(columns=&#123;<span class=\"string\">&#x27;index&#x27;</span>:<span class=\"string\">&#x27;type&#x27;</span>, <span class=\"string\">&#x27;Country&#x27;</span>:<span class=\"string\">&#x27;2017&#x27;</span>&#125;)</span><br><span class=\"line\">    .groupby(<span class=\"string\">&#x27;type&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"built_in\">sum</span>()</span><br><span class=\"line\">    .reset_index()</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">A18A19=pd.merge(A18,A19, how=<span class=\"string\">&#x27;outer&#x27;</span>,on=<span class=\"string\">&#x27;type&#x27;</span>).fillna(<span class=\"number\">0</span>)</span><br><span class=\"line\">A18A17=pd.merge(A18,A17, how=<span class=\"string\">&#x27;outer&#x27;</span>,on=<span class=\"string\">&#x27;type&#x27;</span>).fillna(<span class=\"number\">0</span>)</span><br><span class=\"line\">A18A19[<span class=\"string\">&#x27;minus&#x27;</span>]= A18A19[<span class=\"string\">&#x27;2018&#x27;</span>]-A18A19[<span class=\"string\">&#x27;2019&#x27;</span>]</span><br><span class=\"line\">A18A17[<span class=\"string\">&#x27;minus&#x27;</span>]= A18A17[<span class=\"string\">&#x27;2018&#x27;</span>]-A18A17[<span class=\"string\">&#x27;2017&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">A18A17=A18A17.sort_values(by=<span class=\"string\">&quot;minus&quot;</span>, ascending=<span class=\"literal\">False</span>)</span><br><span class=\"line\">A18A19=A18A19.sort_values(by=<span class=\"string\">&quot;minus&quot;</span>, ascending=<span class=\"literal\">False</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">fig = go.Figure(data=[  </span><br><span class=\"line\">        go.Bar(x =A18A19[<span class=\"string\">&#x27;type&#x27;</span>],</span><br><span class=\"line\">        y = A18A19[<span class=\"string\">&#x27;minus&#x27;</span>],</span><br><span class=\"line\">        marker_color=<span class=\"string\">&#x27;#979DA6&#x27;</span>,</span><br><span class=\"line\">        name = <span class=\"string\">&#x27;2018-2019&#x27;</span>, base=<span class=\"number\">0</span>),</span><br><span class=\"line\">        go.Bar(x =A18A17[<span class=\"string\">&#x27;type&#x27;</span>],</span><br><span class=\"line\">        y = A18A17[<span class=\"string\">&#x27;minus&#x27;</span>],</span><br><span class=\"line\">               marker_color=<span class=\"string\">&#x27;#F2D64B&#x27;</span>,</span><br><span class=\"line\">        name = <span class=\"string\">&#x27;2018-2017&#x27;</span>, base=<span class=\"number\">0</span>)</span><br><span class=\"line\">        ])</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(title=<span class=\"string\">&#x27;&lt;b&gt;        Predicting outliers (2018)&lt;/b&gt;&#x27;</span>,title_font_size=<span class=\"number\">20</span>,</span><br><span class=\"line\">                  margin = <span class=\"built_in\">dict</span>(t=<span class=\"number\">200</span>, l=<span class=\"number\">100</span>, r=<span class=\"number\">10</span>, b=<span class=\"number\">200</span>),</span><br><span class=\"line\">                  height=<span class=\"number\">700</span>, width=<span class=\"number\">700</span>,</span><br><span class=\"line\">                  xaxis_title=<span class=\"literal\">None</span>,</span><br><span class=\"line\">                  yaxis_title=<span class=\"literal\">None</span>)</span><br><span class=\"line\">fig.update_xaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\">fig.update_yaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(legend=<span class=\"built_in\">dict</span>(</span><br><span class=\"line\">    orientation=<span class=\"string\">&quot;h&quot;</span>,</span><br><span class=\"line\">    yanchor=<span class=\"string\">&quot;bottom&quot;</span>,</span><br><span class=\"line\">    y=<span class=\"number\">1.1</span>,</span><br><span class=\"line\">    xanchor=<span class=\"string\">&quot;right&quot;</span>,</span><br><span class=\"line\">    x=<span class=\"number\">1</span>))</span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">14</span>),</span><br><span class=\"line\">                                    x=<span class=\"number\">0.8</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.5</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;@green_yhjw&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n\n<h2>Total population: </h2>\n\n<p>1.4 billion (85%) in China, 130 million in Japan, 0.5 billion in Korea, and 0.2 billion in Taiwan.</p>\n<ul>\n<li>China: The number of respondents is smaller than the population.</li>\n<li>Japan: Starting in 2019, overtaking China</li>\n<li>Taiwan : 2018 data 0 =? Diplomatic issues? The growth trend is weak.</li>\n<li>Korea : Respondents at a similar level to Japan’s population.</li>\n<li>East Asia: The number of respondents will increase further.</li>\n</ul>\n<p><img src=\"/images/kaggle_final/newplot3.png\"></p>\n<p><img src=\"/images/kaggle_final/newplot4.png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#data preprocessing</span></span><br><span class=\"line\">total17 = ( </span><br><span class=\"line\">    df17[<span class=\"string\">&#x27;region&#x27;</span>]</span><br><span class=\"line\">    .value_counts()</span><br><span class=\"line\">    .to_frame()</span><br><span class=\"line\">    .reset_index()</span><br><span class=\"line\">    .rename(columns=&#123;<span class=\"string\">&#x27;index&#x27;</span>:<span class=\"string\">&#x27;type&#x27;</span>, <span class=\"string\">&#x27;region&#x27;</span>:<span class=\"string\">&#x27;respodents&#x27;</span>&#125;)</span><br><span class=\"line\">    .groupby(<span class=\"string\">&#x27;type&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"built_in\">sum</span>()</span><br><span class=\"line\">    .reset_index()</span><br><span class=\"line\">)</span><br><span class=\"line\">total18 = (</span><br><span class=\"line\">    df18[<span class=\"string\">&#x27;region&#x27;</span>]</span><br><span class=\"line\">    .value_counts()</span><br><span class=\"line\">    .to_frame()</span><br><span class=\"line\">    .reset_index()</span><br><span class=\"line\">    .rename(columns=&#123;<span class=\"string\">&#x27;index&#x27;</span>:<span class=\"string\">&#x27;type&#x27;</span>, <span class=\"string\">&#x27;region&#x27;</span>:<span class=\"string\">&#x27;respodents&#x27;</span>&#125;)</span><br><span class=\"line\">    .groupby(<span class=\"string\">&#x27;type&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"built_in\">sum</span>()</span><br><span class=\"line\">    .reset_index()</span><br><span class=\"line\">)</span><br><span class=\"line\">total19 = (</span><br><span class=\"line\">    df19[<span class=\"string\">&#x27;region&#x27;</span>]</span><br><span class=\"line\">    .value_counts()</span><br><span class=\"line\">    .to_frame()</span><br><span class=\"line\">    .reset_index()</span><br><span class=\"line\">    .rename(columns=&#123;<span class=\"string\">&#x27;index&#x27;</span>:<span class=\"string\">&#x27;type&#x27;</span>, <span class=\"string\">&#x27;region&#x27;</span>:<span class=\"string\">&#x27;respodents&#x27;</span>&#125;)</span><br><span class=\"line\">    .groupby(<span class=\"string\">&#x27;type&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"built_in\">sum</span>()</span><br><span class=\"line\">    .reset_index()</span><br><span class=\"line\">)</span><br><span class=\"line\">total20 = (</span><br><span class=\"line\">    df20[<span class=\"string\">&#x27;region&#x27;</span>]</span><br><span class=\"line\">    .value_counts()</span><br><span class=\"line\">    .to_frame()</span><br><span class=\"line\">    .reset_index()</span><br><span class=\"line\">    .rename(columns=&#123;<span class=\"string\">&#x27;index&#x27;</span>:<span class=\"string\">&#x27;type&#x27;</span>, <span class=\"string\">&#x27;region&#x27;</span>:<span class=\"string\">&#x27;respodents&#x27;</span>&#125;)</span><br><span class=\"line\">    .groupby(<span class=\"string\">&#x27;type&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"built_in\">sum</span>()</span><br><span class=\"line\">    .reset_index()</span><br><span class=\"line\">)</span><br><span class=\"line\">total21 = (</span><br><span class=\"line\">    df21[<span class=\"string\">&#x27;region&#x27;</span>]</span><br><span class=\"line\">    .value_counts()</span><br><span class=\"line\">    .to_frame()</span><br><span class=\"line\">    .reset_index()</span><br><span class=\"line\">    .rename(columns=&#123;<span class=\"string\">&#x27;index&#x27;</span>:<span class=\"string\">&#x27;type&#x27;</span>, <span class=\"string\">&#x27;region&#x27;</span>:<span class=\"string\">&#x27;respodents&#x27;</span>&#125;)</span><br><span class=\"line\">    .groupby(<span class=\"string\">&#x27;type&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"built_in\">sum</span>()</span><br><span class=\"line\">    .reset_index()</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#graph</span></span><br><span class=\"line\">colors = [<span class=\"string\">&#x27;#F2D64B&#x27;</span>,<span class=\"string\">&#x27;#979DA6&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">fig = make_subplots(rows=<span class=\"number\">1</span>, cols=<span class=\"number\">5</span>, specs=[[&#123;<span class=\"string\">&#x27;type&#x27;</span>:<span class=\"string\">&#x27;domain&#x27;</span>&#125;, &#123;<span class=\"string\">&#x27;type&#x27;</span>:<span class=\"string\">&#x27;domain&#x27;</span>&#125;, &#123;<span class=\"string\">&#x27;type&#x27;</span>:<span class=\"string\">&#x27;domain&#x27;</span>&#125;, &#123;<span class=\"string\">&#x27;type&#x27;</span>:<span class=\"string\">&#x27;domain&#x27;</span>&#125;, &#123;<span class=\"string\">&#x27;type&#x27;</span>:<span class=\"string\">&#x27;domain&#x27;</span>&#125;]],</span><br><span class=\"line\">                   subplot_titles=(<span class=\"string\">&quot;2017&quot;</span>, <span class=\"string\">&quot;2018&quot;</span>, <span class=\"string\">&quot;2019&quot;</span>, <span class=\"string\">&quot;2020&quot;</span>, <span class=\"string\">&quot;2021&quot;</span>))</span><br><span class=\"line\">fig.add_trace(go.Pie(marker=<span class=\"built_in\">dict</span>(colors=colors),labels=total21[<span class=\"string\">&#x27;type&#x27;</span>], values=total21[<span class=\"string\">&#x27;respodents&#x27;</span>], name=<span class=\"string\">&quot;2021&quot;</span>, scalegroup=<span class=\"string\">&#x27;one&#x27;</span>), <span class=\"number\">1</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">fig.add_trace(go.Pie(marker=<span class=\"built_in\">dict</span>(colors=colors),labels=total20[<span class=\"string\">&#x27;type&#x27;</span>], values=total20[<span class=\"string\">&#x27;respodents&#x27;</span>], name=<span class=\"string\">&quot;2020&quot;</span>, scalegroup=<span class=\"string\">&#x27;one&#x27;</span>), <span class=\"number\">1</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\">fig.add_trace(go.Pie(marker=<span class=\"built_in\">dict</span>(colors=colors),labels=total19[<span class=\"string\">&#x27;type&#x27;</span>], values=total19[<span class=\"string\">&#x27;respodents&#x27;</span>], name=<span class=\"string\">&quot;2019&quot;</span>, scalegroup=<span class=\"string\">&#x27;one&#x27;</span>), <span class=\"number\">1</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">fig.add_trace(go.Pie(marker=<span class=\"built_in\">dict</span>(colors=colors),labels=total18[<span class=\"string\">&#x27;type&#x27;</span>], values=total18[<span class=\"string\">&#x27;respodents&#x27;</span>], name=<span class=\"string\">&quot;2018&quot;</span>, scalegroup=<span class=\"string\">&#x27;one&#x27;</span>), <span class=\"number\">1</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\">fig.add_trace(go.Pie(marker=<span class=\"built_in\">dict</span>(colors=colors),labels=total17[<span class=\"string\">&#x27;type&#x27;</span>], values=total17[<span class=\"string\">&#x27;respodents&#x27;</span>], name=<span class=\"string\">&quot;2017&quot;</span>, scalegroup=<span class=\"string\">&#x27;one&#x27;</span>), <span class=\"number\">1</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_traces(hole=<span class=\"number\">.0</span>, hoverinfo=<span class=\"string\">&quot;label+percent+name&quot;</span>, textposition=<span class=\"string\">&#x27;inside&#x27;</span>, textinfo=<span class=\"string\">&#x27;percent+label&#x27;</span>,</span><br><span class=\"line\">                  textfont_size=<span class=\"number\">12</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(title=<span class=\"string\">&#x27;&lt;b&gt;World vs EastAsia&lt;/b&gt;&#x27;</span>,title_font_size=<span class=\"number\">23</span>,</span><br><span class=\"line\">                  margin = <span class=\"built_in\">dict</span>(t=<span class=\"number\">300</span>, l=<span class=\"number\">0</span>, r=<span class=\"number\">0</span>, b=<span class=\"number\">200</span>),</span><br><span class=\"line\">                  height=<span class=\"number\">700</span>, width=<span class=\"number\">700</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(legend=<span class=\"built_in\">dict</span>(</span><br><span class=\"line\">    orientation=<span class=\"string\">&quot;h&quot;</span>,</span><br><span class=\"line\">    yanchor=<span class=\"string\">&quot;bottom&quot;</span>,</span><br><span class=\"line\">    y=<span class=\"number\">1.3</span>,</span><br><span class=\"line\">    xanchor=<span class=\"string\">&quot;right&quot;</span>,</span><br><span class=\"line\">    x=<span class=\"number\">1</span>))</span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">14</span>),</span><br><span class=\"line\">                                    x=<span class=\"number\">0.8</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.25</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;@green_yhjw&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fig = go.Figure(data=[</span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;2017&#x27;</span>, x=df5years[<span class=\"string\">&#x27;Country&#x27;</span>], y=df5years[<span class=\"string\">&#x27;17&#x27;</span>], marker_color=<span class=\"string\">&#x27;#F2798F&#x27;</span>,text=df5years[<span class=\"string\">&#x27;17&#x27;</span>].tolist(), textposition=<span class=\"string\">&#x27;outside&#x27;</span>),</span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;2018&#x27;</span>, x=df5years[<span class=\"string\">&#x27;Country&#x27;</span>], y=df5years[<span class=\"string\">&#x27;18&#x27;</span>], marker_color=<span class=\"string\">&#x27;#88BFBA&#x27;</span>,text=df5years[<span class=\"string\">&#x27;18&#x27;</span>].fillna(<span class=\"number\">0</span>).astype(<span class=\"built_in\">int</span>).tolist(), textposition=<span class=\"string\">&#x27;outside&#x27;</span>,),</span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;2019&#x27;</span>, x=df5years[<span class=\"string\">&#x27;Country&#x27;</span>], y=df5years[<span class=\"string\">&#x27;19&#x27;</span>], marker_color=<span class=\"string\">&#x27;#CDD9A3&#x27;</span>,text=df5years[<span class=\"string\">&#x27;19&#x27;</span>].tolist(), textposition=<span class=\"string\">&#x27;outside&#x27;</span>),</span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;2020&#x27;</span>, x=df5years[<span class=\"string\">&#x27;Country&#x27;</span>], y=df5years[<span class=\"string\">&#x27;20&#x27;</span>], marker_color=<span class=\"string\">&#x27;#F28705&#x27;</span>,text=df5years[<span class=\"string\">&#x27;20&#x27;</span>].tolist(), textposition=<span class=\"string\">&#x27;outside&#x27;</span>,),</span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;2021&#x27;</span>, x=df5years[<span class=\"string\">&#x27;Country&#x27;</span>], y=df5years[<span class=\"string\">&#x27;21&#x27;</span>], marker_color=<span class=\"string\">&#x27;#D9946C&#x27;</span>,text=df5years[<span class=\"string\">&#x27;21&#x27;</span>].tolist(), textposition=<span class=\"string\">&#x27;outside&#x27;</span>)])</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(barmode=<span class=\"string\">&#x27;group&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(title=<span class=\"string\">&#x27;&lt;b&gt;Kaggle User in East Asia&lt;/b&gt;&#x27;</span>,title_font_size=<span class=\"number\">23</span>,</span><br><span class=\"line\">                  margin = <span class=\"built_in\">dict</span>(t=<span class=\"number\">200</span>, l=<span class=\"number\">100</span>, r=<span class=\"number\">10</span>, b=<span class=\"number\">200</span>),</span><br><span class=\"line\">                  height=<span class=\"number\">600</span>, width=<span class=\"number\">700</span>)</span><br><span class=\"line\">fig.update_xaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\">fig.update_yaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\">fig.update_traces(hovertemplate=<span class=\"string\">&#x27;&lt;b&gt;Count&lt;/b&gt;: %&#123;y&#125;&#x27;</span>)</span><br><span class=\"line\">fig.update_layout(legend=<span class=\"built_in\">dict</span>(</span><br><span class=\"line\">    orientation=<span class=\"string\">&quot;v&quot;</span>,</span><br><span class=\"line\">    yanchor=<span class=\"string\">&quot;bottom&quot;</span>,</span><br><span class=\"line\">    y=<span class=\"number\">1.15</span>,</span><br><span class=\"line\">    xanchor=<span class=\"string\">&quot;right&quot;</span>,</span><br><span class=\"line\">    x=<span class=\"number\">1</span>))</span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">14</span>),</span><br><span class=\"line\">                                    x=<span class=\"number\">0.8</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.5</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;@green_yhjw&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-1-2-Gender-transformation\"><a href=\"#3-1-2-Gender-transformation\" class=\"headerlink\" title=\"3.1.2 Gender transformation\"></a>3.1.2 Gender transformation</h1><hr>\n<h2>World: The proportion of female respondents increases (still below 20%) </h2>\n\n<p>The number of respondents is increasing in all genders.</p>\n<p>Our team is also a team with high female members and wants to contribute as a respondent in 2022.</p>\n<p><img src=\"/images/kaggle_final/newplot5.png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#data preprocessing</span></span><br><span class=\"line\">Gender_17 = (</span><br><span class=\"line\">    df17[<span class=\"string\">&#x27;GenderSelect&#x27;</span>]</span><br><span class=\"line\">    .replace([<span class=\"string\">&#x27;A different identity&#x27;</span>, <span class=\"string\">&#x27;Prefer to self-describe&#x27;</span>, <span class=\"string\">&#x27;Non-binary, genderqueer, or gender non-conforming&#x27;</span>], <span class=\"string\">&#x27;Others&#x27;</span>)</span><br><span class=\"line\">    .fillna(<span class=\"string\">&#x27;Others&#x27;</span>)</span><br><span class=\"line\">    .value_counts()</span><br><span class=\"line\">    .to_frame()</span><br><span class=\"line\">    .reset_index()</span><br><span class=\"line\">    .rename(columns=&#123;<span class=\"string\">&#x27;index&#x27;</span>:<span class=\"string\">&#x27;type&#x27;</span>, <span class=\"string\">&#x27;GenderSelect&#x27;</span>:<span class=\"string\">&#x27;Gender&#x27;</span>&#125;)</span><br><span class=\"line\">    .groupby(<span class=\"string\">&#x27;type&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"built_in\">sum</span>()</span><br><span class=\"line\">    .reset_index())</span><br><span class=\"line\">Gender_18 = (</span><br><span class=\"line\">    df18[<span class=\"string\">&#x27;Q1&#x27;</span>]</span><br><span class=\"line\">    .replace([<span class=\"string\">&#x27;Prefer not to say&#x27;</span>, <span class=\"string\">&#x27;Prefer to self-describe&#x27;</span>], <span class=\"string\">&#x27;Others&#x27;</span>)</span><br><span class=\"line\">    .fillna(<span class=\"string\">&#x27;Others&#x27;</span>)</span><br><span class=\"line\">    .value_counts()</span><br><span class=\"line\">    .to_frame()</span><br><span class=\"line\">    .reset_index()</span><br><span class=\"line\">    .rename(columns=&#123;<span class=\"string\">&#x27;index&#x27;</span>:<span class=\"string\">&#x27;type&#x27;</span>, <span class=\"string\">&#x27;Q1&#x27;</span>:<span class=\"string\">&#x27;Gender&#x27;</span>&#125;)</span><br><span class=\"line\">    .groupby(<span class=\"string\">&#x27;type&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"built_in\">sum</span>()</span><br><span class=\"line\">    .reset_index())</span><br><span class=\"line\">Gender_19 = (</span><br><span class=\"line\">    df19[<span class=\"string\">&#x27;Q2&#x27;</span>]</span><br><span class=\"line\">    .replace([<span class=\"string\">&#x27;Prefer not to say&#x27;</span>,<span class=\"string\">&#x27;Prefer to self-describe&#x27;</span>],<span class=\"string\">&#x27;Others&#x27;</span>)</span><br><span class=\"line\">    .fillna(<span class=\"string\">&#x27;Others&#x27;</span>)</span><br><span class=\"line\">    .value_counts()</span><br><span class=\"line\">    .to_frame()</span><br><span class=\"line\">    .reset_index()</span><br><span class=\"line\">    .rename(columns=&#123;<span class=\"string\">&#x27;index&#x27;</span>:<span class=\"string\">&#x27;type&#x27;</span>, <span class=\"string\">&#x27;Q2&#x27;</span>:<span class=\"string\">&#x27;Gender&#x27;</span>&#125;)</span><br><span class=\"line\">    .groupby(<span class=\"string\">&#x27;type&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"built_in\">sum</span>()</span><br><span class=\"line\">    .reset_index())</span><br><span class=\"line\">Gender_20 = (</span><br><span class=\"line\">    df20[<span class=\"string\">&#x27;Q2&#x27;</span>]</span><br><span class=\"line\">    .replace([<span class=\"string\">&#x27;Prefer not to say&#x27;</span>, <span class=\"string\">&#x27;Prefer to self-describe&#x27;</span>, <span class=\"string\">&#x27;Nonbinary&#x27;</span>], <span class=\"string\">&#x27;Others&#x27;</span>)</span><br><span class=\"line\">    .replace([<span class=\"string\">&#x27;Man&#x27;</span>, <span class=\"string\">&#x27;Woman&#x27;</span>], [<span class=\"string\">&#x27;Male&#x27;</span>, <span class=\"string\">&#x27;Female&#x27;</span>])</span><br><span class=\"line\">    .fillna(<span class=\"string\">&#x27;Others&#x27;</span>)</span><br><span class=\"line\">    .value_counts()</span><br><span class=\"line\">    .to_frame()</span><br><span class=\"line\">    .reset_index()</span><br><span class=\"line\">    .rename(columns=&#123;<span class=\"string\">&#x27;index&#x27;</span>:<span class=\"string\">&#x27;type&#x27;</span>, <span class=\"string\">&#x27;Q2&#x27;</span>:<span class=\"string\">&#x27;Gender&#x27;</span>&#125;)</span><br><span class=\"line\">    .groupby(<span class=\"string\">&#x27;type&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"built_in\">sum</span>()</span><br><span class=\"line\">    .reset_index())</span><br><span class=\"line\">Gender_21 = (</span><br><span class=\"line\">    df21[<span class=\"string\">&#x27;Q2&#x27;</span>]</span><br><span class=\"line\">    .replace([<span class=\"string\">&#x27;Prefer not to say&#x27;</span>, <span class=\"string\">&#x27;Prefer to self-describe&#x27;</span>, <span class=\"string\">&#x27;Nonbinary&#x27;</span>], <span class=\"string\">&#x27;Others&#x27;</span>)</span><br><span class=\"line\">    .replace([<span class=\"string\">&#x27;Man&#x27;</span>, <span class=\"string\">&#x27;Woman&#x27;</span>], [<span class=\"string\">&#x27;Male&#x27;</span>, <span class=\"string\">&#x27;Female&#x27;</span>])</span><br><span class=\"line\">    .fillna(<span class=\"string\">&#x27;Others&#x27;</span>)</span><br><span class=\"line\">    .value_counts()</span><br><span class=\"line\">    .to_frame()</span><br><span class=\"line\">    .reset_index()</span><br><span class=\"line\">    .rename(columns=&#123;<span class=\"string\">&#x27;index&#x27;</span>:<span class=\"string\">&#x27;type&#x27;</span>, <span class=\"string\">&#x27;Q2&#x27;</span>:<span class=\"string\">&#x27;Gender&#x27;</span>&#125;)</span><br><span class=\"line\">    .groupby(<span class=\"string\">&#x27;type&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"built_in\">sum</span>()</span><br><span class=\"line\">    .reset_index())</span><br><span class=\"line\"></span><br><span class=\"line\">colors = [<span class=\"string\">&#x27;#D9946C&#x27;</span>,<span class=\"string\">&#x27;#88BFBA&#x27;</span>, <span class=\"string\">&#x27;#CDD9A3&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">fig = make_subplots(rows=<span class=\"number\">1</span>, cols=<span class=\"number\">5</span>, specs=[[&#123;<span class=\"string\">&#x27;type&#x27;</span>:<span class=\"string\">&#x27;domain&#x27;</span>&#125;, &#123;<span class=\"string\">&#x27;type&#x27;</span>:<span class=\"string\">&#x27;domain&#x27;</span>&#125;, &#123;<span class=\"string\">&#x27;type&#x27;</span>:<span class=\"string\">&#x27;domain&#x27;</span>&#125;, &#123;<span class=\"string\">&#x27;type&#x27;</span>:<span class=\"string\">&#x27;domain&#x27;</span>&#125;, &#123;<span class=\"string\">&#x27;type&#x27;</span>:<span class=\"string\">&#x27;domain&#x27;</span>&#125;]],)</span><br><span class=\"line\">fig.add_trace(go.Pie(marker=<span class=\"built_in\">dict</span>(colors=colors), labels=Gender_21[<span class=\"string\">&#x27;type&#x27;</span>], values=Gender_21[<span class=\"string\">&#x27;Gender&#x27;</span>], name=<span class=\"string\">&quot;2021&quot;</span>, scalegroup=<span class=\"string\">&#x27;one&#x27;</span>, text=np.array(Gender_21[<span class=\"string\">&#x27;Gender&#x27;</span>].<span class=\"built_in\">sum</span>()), title=<span class=\"string\">&quot;2021&quot;</span>, titleposition=<span class=\"string\">&#x27;bottom center&#x27;</span>),</span><br><span class=\"line\">              <span class=\"number\">1</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">fig.add_trace(go.Pie(marker=<span class=\"built_in\">dict</span>(colors=colors), labels=Gender_20[<span class=\"string\">&#x27;type&#x27;</span>], values=Gender_20[<span class=\"string\">&#x27;Gender&#x27;</span>], name=<span class=\"string\">&quot;2020&quot;</span>, scalegroup=<span class=\"string\">&#x27;one&#x27;</span>, text=np.array(Gender_20[<span class=\"string\">&#x27;Gender&#x27;</span>].<span class=\"built_in\">sum</span>()), title=<span class=\"string\">&quot;2020&quot;</span>, titleposition=<span class=\"string\">&#x27;bottom center&#x27;</span>),</span><br><span class=\"line\">              <span class=\"number\">1</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\">fig.add_trace(go.Pie(marker=<span class=\"built_in\">dict</span>(colors=colors), labels=Gender_19[<span class=\"string\">&#x27;type&#x27;</span>], values=Gender_19[<span class=\"string\">&#x27;Gender&#x27;</span>], name=<span class=\"string\">&quot;2019&quot;</span>, scalegroup=<span class=\"string\">&#x27;one&#x27;</span>, text=np.array(Gender_19[<span class=\"string\">&#x27;Gender&#x27;</span>].<span class=\"built_in\">sum</span>()), title=<span class=\"string\">&quot;2019&quot;</span>, titleposition=<span class=\"string\">&#x27;bottom center&#x27;</span>),</span><br><span class=\"line\">              <span class=\"number\">1</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">fig.add_trace(go.Pie(marker=<span class=\"built_in\">dict</span>(colors=colors), labels=Gender_18[<span class=\"string\">&#x27;type&#x27;</span>], values=Gender_18[<span class=\"string\">&#x27;Gender&#x27;</span>], name=<span class=\"string\">&quot;2018&quot;</span>, scalegroup=<span class=\"string\">&#x27;one&#x27;</span>, text=np.array(Gender_18[<span class=\"string\">&#x27;Gender&#x27;</span>].<span class=\"built_in\">sum</span>()), title=<span class=\"string\">&quot;2018&quot;</span>, titleposition=<span class=\"string\">&#x27;bottom center&#x27;</span>),</span><br><span class=\"line\">              <span class=\"number\">1</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\">fig.add_trace(go.Pie(marker=<span class=\"built_in\">dict</span>(colors=colors), labels=Gender_17[<span class=\"string\">&#x27;type&#x27;</span>], values=Gender_17[<span class=\"string\">&#x27;Gender&#x27;</span>], name=<span class=\"string\">&quot;2017&quot;</span>, scalegroup=<span class=\"string\">&#x27;one&#x27;</span>, text=np.array(Gender_17[<span class=\"string\">&#x27;Gender&#x27;</span>].<span class=\"built_in\">sum</span>()), title=<span class=\"string\">&quot;2017&quot;</span>, titleposition=<span class=\"string\">&#x27;bottom center&#x27;</span>),</span><br><span class=\"line\">              <span class=\"number\">1</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_traces(hole=<span class=\"number\">.0</span>, hoverinfo=<span class=\"string\">&quot;label+percent+name&quot;</span>, </span><br><span class=\"line\">                  textinfo=<span class=\"string\">&#x27;label+percent+value&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(title=<span class=\"string\">&#x27;&lt;b&gt;World Gender&lt;/b&gt;&#x27;</span>,title_font_size=<span class=\"number\">23</span>,</span><br><span class=\"line\">                  margin = <span class=\"built_in\">dict</span>(t=<span class=\"number\">300</span>, l=<span class=\"number\">100</span>, r=<span class=\"number\">0</span>, b=<span class=\"number\">200</span>),</span><br><span class=\"line\">                  height=<span class=\"number\">700</span>, width=<span class=\"number\">1000</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(legend=<span class=\"built_in\">dict</span>(</span><br><span class=\"line\">    orientation=<span class=\"string\">&quot;v&quot;</span>,</span><br><span class=\"line\">    yanchor=<span class=\"string\">&quot;bottom&quot;</span>,</span><br><span class=\"line\">    y=<span class=\"number\">1.3</span>,</span><br><span class=\"line\">    xanchor=<span class=\"string\">&quot;right&quot;</span>,</span><br><span class=\"line\">    x=<span class=\"number\">1</span>))</span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">14</span>),</span><br><span class=\"line\">                                    x=<span class=\"number\">0.85</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.5</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;@green_yhjw&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n\n<h3>\n    \n<pre><code>- Male (1004-&gt;2037 : 2017-&gt;2021) double increase\n\n- Female 183-&gt;327 : 2017-&gt;2021 increased 1.8 times\n\n- Others (8-&gt;64 : 2017-&gt;2021) 8x increase\n</code></pre>\n</h3>\n[Compare the high and low points]\n\n<ul>\n<li><p>It can be seen that the number of female respondents and the ratio of male respondents hardly change, which is a difference compared to World data.</p>\n</li>\n<li><p>It can be seen that the degree of gender freedom in East Asia has increased relatively.</p>\n</li>\n<li><p>Compared to World data, it can be seen that in 2021 (1.87: 2.6= Wo: Ea), compared to 2017 (1.96: 0.7 = Ea), which was relatively conservative.</p>\n</li>\n</ul>\n<p><img src=\"/images/kaggle_final/newplot6.png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#data preprocessing</span></span><br><span class=\"line\">gender21= df21_Ea.loc[:, [<span class=\"string\">&#x27;Q3&#x27;</span>, <span class=\"string\">&#x27;Q2&#x27;</span>, <span class=\"string\">&#x27;year&#x27;</span>]].rename(columns=&#123;<span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;Country&#x27;</span>, <span class=\"string\">&#x27;Q2&#x27;</span>:<span class=\"string\">&#x27;Gender&#x27;</span>&#125;)</span><br><span class=\"line\">gender20= df20_Ea.loc[:, [<span class=\"string\">&#x27;Q3&#x27;</span>, <span class=\"string\">&#x27;Q2&#x27;</span>, <span class=\"string\">&#x27;year&#x27;</span>]].rename(columns=&#123;<span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;Country&#x27;</span>, <span class=\"string\">&#x27;Q2&#x27;</span>:<span class=\"string\">&#x27;Gender&#x27;</span>&#125;)</span><br><span class=\"line\">gender19= df19_Ea.loc[:, [<span class=\"string\">&#x27;Q3&#x27;</span>, <span class=\"string\">&#x27;Q2&#x27;</span>, <span class=\"string\">&#x27;year&#x27;</span>]].rename(columns=&#123;<span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;Country&#x27;</span>, <span class=\"string\">&#x27;Q2&#x27;</span>:<span class=\"string\">&#x27;Gender&#x27;</span>&#125;)</span><br><span class=\"line\">gender18= df18_Ea.loc[:, [<span class=\"string\">&#x27;Q3&#x27;</span>, <span class=\"string\">&#x27;Q1&#x27;</span>, <span class=\"string\">&#x27;year&#x27;</span>]].rename(columns=&#123;<span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;Country&#x27;</span>, <span class=\"string\">&#x27;Q1&#x27;</span>:<span class=\"string\">&#x27;Gender&#x27;</span>&#125;)</span><br><span class=\"line\">gender17= df17_Ea.loc[:, [<span class=\"string\">&#x27;Country&#x27;</span>, <span class=\"string\">&#x27;GenderSelect&#x27;</span>, <span class=\"string\">&#x27;year&#x27;</span>]].rename(columns=&#123;<span class=\"string\">&#x27;index&#x27;</span>:<span class=\"string\">&#x27;type&#x27;</span>, <span class=\"string\">&#x27;GenderSelect&#x27;</span>:<span class=\"string\">&#x27;Gender&#x27;</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">Gender5y= pd.concat([gender17, gender18, gender19, gender20, gender21])</span><br><span class=\"line\">Gender5y= (Gender5y.replace([<span class=\"string\">&#x27;Prefer not to say&#x27;</span>, <span class=\"string\">&#x27;Prefer to self-describe&#x27;</span>, <span class=\"string\">&#x27;Nonbinary&#x27;</span>, <span class=\"string\">&#x27;A different identity&#x27;</span>], <span class=\"string\">&#x27;Others&#x27;</span>)</span><br><span class=\"line\">           .replace([<span class=\"string\">&#x27;Man&#x27;</span>, <span class=\"string\">&#x27;Woman&#x27;</span>], [<span class=\"string\">&#x27;Male&#x27;</span>, <span class=\"string\">&#x27;Female&#x27;</span>])</span><br><span class=\"line\">           .groupby([<span class=\"string\">&#x27;year&#x27;</span>, <span class=\"string\">&#x27;Gender&#x27;</span>])</span><br><span class=\"line\">           .size()</span><br><span class=\"line\">           .reset_index()</span><br><span class=\"line\">           .rename(columns = &#123;<span class=\"number\">0</span>:<span class=\"string\">&quot;Count&quot;</span>&#125;))</span><br><span class=\"line\"></span><br><span class=\"line\">gen17_5y = Gender5y[Gender5y[<span class=\"string\">&#x27;year&#x27;</span>] == <span class=\"string\">&quot;2017&quot;</span>].reset_index(drop = <span class=\"literal\">True</span>)</span><br><span class=\"line\">gen18_5y = Gender5y[Gender5y[<span class=\"string\">&#x27;year&#x27;</span>] == <span class=\"string\">&quot;2018&quot;</span>].reset_index(drop = <span class=\"literal\">True</span>)</span><br><span class=\"line\">gen19_5y = Gender5y[Gender5y[<span class=\"string\">&#x27;year&#x27;</span>] == <span class=\"string\">&quot;2019&quot;</span>].reset_index(drop = <span class=\"literal\">True</span>)</span><br><span class=\"line\">gen20_5y = Gender5y[Gender5y[<span class=\"string\">&#x27;year&#x27;</span>] == <span class=\"string\">&quot;2020&quot;</span>].reset_index(drop = <span class=\"literal\">True</span>)</span><br><span class=\"line\">gen21_5y = Gender5y[Gender5y[<span class=\"string\">&#x27;year&#x27;</span>] == <span class=\"string\">&quot;2021&quot;</span>].reset_index(drop = <span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">Gen5y_ = pd.concat([gen17_5y, gen18_5y, gen19_5y, gen20_5y, gen21_5y], ignore_index = <span class=\"literal\">True</span>)</span><br><span class=\"line\">Gen5y_= pd.pivot(Gen5y_, index = <span class=\"string\">&quot;year&quot;</span>, columns = <span class=\"string\">&quot;Gender&quot;</span>, values = <span class=\"string\">&quot;Count&quot;</span>).reset_index()</span><br><span class=\"line\">Gen5y_</span><br><span class=\"line\"></span><br><span class=\"line\">Gen5y_[<span class=\"string\">&#x27;year&#x27;</span>].unique()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#graph</span></span><br><span class=\"line\">fig = go.Figure()</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_trace(go.Bar(</span><br><span class=\"line\">    x = Gen5y_[<span class=\"string\">&#x27;year&#x27;</span>],</span><br><span class=\"line\">    y = Gen5y_[<span class=\"string\">&#x27;Male&#x27;</span>].tolist(),</span><br><span class=\"line\">    name = <span class=\"string\">&#x27;Male&#x27;</span>,</span><br><span class=\"line\">marker_color=<span class=\"string\">&#x27;#88BFBA&#x27;</span>, text=Gen5y_[<span class=\"string\">&#x27;Male&#x27;</span>].tolist(), textposition=<span class=\"string\">&#x27;outside&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_trace(go.Bar(</span><br><span class=\"line\">    x = Gen5y_[<span class=\"string\">&#x27;year&#x27;</span>],</span><br><span class=\"line\">    y = Gen5y_[<span class=\"string\">&#x27;Female&#x27;</span>].tolist(),</span><br><span class=\"line\">    name = <span class=\"string\">&#x27;Female&#x27;</span>,</span><br><span class=\"line\">marker_color=<span class=\"string\">&#x27;#D9946C&#x27;</span>, text=Gen5y_[<span class=\"string\">&#x27;Female&#x27;</span>].tolist(), textposition=<span class=\"string\">&#x27;outside&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_trace(go.Bar(</span><br><span class=\"line\">    x = Gen5y_[<span class=\"string\">&#x27;year&#x27;</span>],</span><br><span class=\"line\">    y = Gen5y_[<span class=\"string\">&#x27;Others&#x27;</span>].tolist(),</span><br><span class=\"line\">    name = <span class=\"string\">&#x27;Others&#x27;</span>,</span><br><span class=\"line\">marker_color=<span class=\"string\">&#x27;#CDD9A3&#x27;</span>, text=Gen5y_[<span class=\"string\">&#x27;Others&#x27;</span>].tolist(), textposition=<span class=\"string\">&#x27;outside&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(barmode=<span class=\"string\">&quot;group&quot;</span>) </span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(title=<span class=\"string\">&#x27;&lt;b&gt;Gender by year&lt;/b&gt;&#x27;</span>,title_font_size=<span class=\"number\">22</span>,</span><br><span class=\"line\">                  margin = <span class=\"built_in\">dict</span>(t=<span class=\"number\">200</span>, l=<span class=\"number\">100</span>, r=<span class=\"number\">10</span>, b=<span class=\"number\">200</span>),</span><br><span class=\"line\">                  height=<span class=\"number\">700</span>, width=<span class=\"number\">700</span>,</span><br><span class=\"line\">                  xaxis_title=<span class=\"literal\">None</span>,</span><br><span class=\"line\">                  yaxis_title=<span class=\"literal\">None</span>)</span><br><span class=\"line\">fig.update_xaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\">fig.update_yaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">14</span>),</span><br><span class=\"line\">                                    x=<span class=\"number\">0.8</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.5</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;@green_yhjw&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-1-3-Job-transformation\"><a href=\"#3-1-3-Job-transformation\" class=\"headerlink\" title=\"3.1.3 Job transformation\"></a>3.1.3 Job transformation</h1><hr>\n<h2> 21' World Vs East Asia Age Ratio: Bar plot </h2>\n\n<ul>\n<li><p>Not Employed : More than 30% in both East Asia and the world, the highest.</p>\n<p>  <em>Because “Students” is included.</em></p>\n</li>\n<li><p>Data Scientist : High percentage in the world and East Asia.</p>\n</li>\n<li><p>Relatively low proportion in East Asia.<br>  <strong><strong>= Absolute lack of numbers</strong></strong></p>\n</li>\n</ul>\n<p style=\"color:#FF0000\";>\nWe would like to move forward by selecting a **data scientist** with insufficient numbers in East Asia.\n</p>\n\n<p><img src=\"/images/kaggle_final/newplot7.png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#data preprocessing</span></span><br><span class=\"line\">Data_Analyst =[<span class=\"string\">&#x27;Data Analyst&#x27;</span>,<span class=\"string\">&#x27;Data Miner,Information technology&#x27;</span>,<span class=\"string\">&#x27;Data Miner&#x27;</span>,</span><br><span class=\"line\">                <span class=\"string\">&#x27;Predictive Modeler&#x27;</span>,<span class=\"string\">&#x27;Information technology, networking, or system administration&#x27;</span>, </span><br><span class=\"line\">                <span class=\"string\">&#x27;A business discipline (accounting, economics, finance, etc.)&#x27;</span>, <span class=\"string\">&#x27;Business Analyst&#x27;</span>, <span class=\"string\">&#x27;Humanities&#x27;</span>,</span><br><span class=\"line\">                <span class=\"string\">&#x27;Statistician&#x27;</span>, <span class=\"string\">&#x27;Mathematics or statistics&#x27;</span>, <span class=\"string\">&#x27;Medical or life sciences (biology, chemistry, medicine, etc.)&#x27;</span>, </span><br><span class=\"line\">                <span class=\"string\">&#x27;Physics or astronomy&#x27;</span>,  <span class=\"string\">&#x27;Social sciences (anthropology, psychology, sociology, etc.)&#x27;</span>, <span class=\"string\">&#x27;Environmental science or geology&#x27;</span>,</span><br><span class=\"line\">                <span class=\"string\">&#x27;Humanities (history, literature, philosophy, etc.)&#x27;</span>]</span><br><span class=\"line\">Data_Scientist =[<span class=\"string\">&#x27;Data Scientist&#x27;</span>,  <span class=\"string\">&#x27;Research Scientist&#x27;</span>, <span class=\"string\">&#x27;Researcher&#x27;</span>,</span><br><span class=\"line\">                <span class=\"string\">&#x27;Machine Learning Engineer&#x27;</span>, <span class=\"string\">&#x27;Scientist/Researcher&#x27;</span>]</span><br><span class=\"line\">Developer=[<span class=\"string\">&#x27;Developer Relations/Advocacy&#x27;</span>,<span class=\"string\">&#x27;Data Engineer&#x27;</span>,<span class=\"string\">&#x27;Engineer&#x27;</span>,<span class=\"string\">&#x27;Engineering (non-computer focused)&#x27;</span>,</span><br><span class=\"line\">           <span class=\"string\">&#x27;Programmer&#x27;</span>,<span class=\"string\">&#x27;Software Engineer&#x27;</span>, <span class=\"string\">&#x27;Computer Scientist&#x27;</span>,<span class=\"string\">&#x27;Computer science (software engineering, etc.)&#x27;</span>, </span><br><span class=\"line\">           <span class=\"string\">&#x27;Fine arts or performing arts&#x27;</span>,<span class=\"string\">&#x27;Product Manager&#x27;</span>, <span class=\"string\">&#x27;Software Developer/Software Engineer&#x27;</span>,</span><br><span class=\"line\">           <span class=\"string\">&#x27;Product/Project Manager&#x27;</span>,<span class=\"string\">&#x27;Program/Project Manager&#x27;</span>,<span class=\"string\">&#x27;DBA/Database Engineer&#x27;</span>]</span><br><span class=\"line\">Not_Employed =[<span class=\"string\">&#x27;Currently not employed&#x27;</span>, <span class=\"string\">&#x27;Not employed&#x27;</span>, <span class=\"string\">&#x27;Student&#x27;</span>]</span><br><span class=\"line\">Others = [<span class=\"string\">&#x27;I never declared a major&#x27;</span>, <span class=\"string\">&#x27;Other&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">df21job_Ea = df21_Ea.loc[:,[<span class=\"string\">&#x27;Q3&#x27;</span>,<span class=\"string\">&#x27;Q5&#x27;</span>]].rename(columns=&#123;<span class=\"string\">&#x27;Q5&#x27;</span>:<span class=\"string\">&#x27;2021&#x27;</span>&#125;).fillna(<span class=\"string\">&#x27;Other&#x27;</span>)</span><br><span class=\"line\">df20job_Ea = df20_Ea.loc[:,[<span class=\"string\">&#x27;Q3&#x27;</span>,<span class=\"string\">&#x27;Q5&#x27;</span>]].rename(columns=&#123;<span class=\"string\">&#x27;Q5&#x27;</span>:<span class=\"string\">&#x27;2020&#x27;</span>&#125;).fillna(<span class=\"string\">&#x27;Other&#x27;</span>)</span><br><span class=\"line\">df19job_Ea = df19_Ea.loc[:,[<span class=\"string\">&#x27;Q3&#x27;</span>,<span class=\"string\">&#x27;Q5&#x27;</span>]].rename(columns=&#123;<span class=\"string\">&#x27;Q5&#x27;</span>:<span class=\"string\">&#x27;2019&#x27;</span>&#125;).fillna(<span class=\"string\">&#x27;Other&#x27;</span>)</span><br><span class=\"line\">df18job_Ea = df18_Ea.loc[:,[<span class=\"string\">&#x27;Q3&#x27;</span>,<span class=\"string\">&#x27;Q5&#x27;</span>]].rename(columns=&#123; <span class=\"string\">&#x27;Q5&#x27;</span>:<span class=\"string\">&#x27;2018&#x27;</span>&#125;).fillna(<span class=\"string\">&#x27;Other&#x27;</span>)</span><br><span class=\"line\">df17job_Ea = df17_Ea.loc[:,[<span class=\"string\">&#x27;Country&#x27;</span>,<span class=\"string\">&#x27;CurrentJobTitleSelect&#x27;</span>]].rename(columns=&#123;<span class=\"string\">&#x27;CurrentJobTitleSelect&#x27;</span>:<span class=\"string\">&#x27;2017&#x27;</span>&#125;).fillna(<span class=\"string\">&#x27;Other&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">df21job_Ea.value_counts(<span class=\"string\">&#x27;2021&#x27;</span>)</span><br><span class=\"line\">df21job_Ea[<span class=\"string\">&#x27;JOB&#x27;</span>]=[<span class=\"string\">&quot;Data Analyst&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> Data_Analyst</span><br><span class=\"line\">                   <span class=\"keyword\">else</span> <span class=\"string\">&quot;Data Scientist&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> Data_Scientist <span class=\"comment\"># Data Scientist</span></span><br><span class=\"line\">                   <span class=\"keyword\">else</span> <span class=\"string\">&quot;Developer&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> Developer</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"string\">&quot;NotEmployed&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> Not_Employed</span><br><span class=\"line\">                   <span class=\"keyword\">else</span> <span class=\"string\">&quot;Others&quot;</span> </span><br><span class=\"line\">                   <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> df21job_Ea[<span class=\"string\">&#x27;2021&#x27;</span>]]</span><br><span class=\"line\">df21job_Ea.value_counts(<span class=\"string\">&#x27;JOB&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">df20job_Ea.value_counts(<span class=\"string\">&#x27;2020&#x27;</span>)</span><br><span class=\"line\">df20job_Ea[<span class=\"string\">&#x27;JOB&#x27;</span>]=[<span class=\"string\">&quot;Data Analyst&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> Data_Analyst</span><br><span class=\"line\">                   <span class=\"keyword\">else</span> <span class=\"string\">&quot;Data Scientist&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> Data_Scientist </span><br><span class=\"line\">                   <span class=\"keyword\">else</span> <span class=\"string\">&quot;Developer&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> Developer</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"string\">&quot;NotEmployed&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> Not_Employed</span><br><span class=\"line\">                   <span class=\"keyword\">else</span> <span class=\"string\">&quot;Other&quot;</span></span><br><span class=\"line\">                   <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> df20job_Ea[<span class=\"string\">&#x27;2020&#x27;</span>]]</span><br><span class=\"line\">df20job_Ea[[<span class=\"string\">&#x27;2020&#x27;</span>,<span class=\"string\">&#x27;JOB&#x27;</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\">df19job_Ea.value_counts(<span class=\"string\">&#x27;2019&#x27;</span>)</span><br><span class=\"line\">df19job_Ea[<span class=\"string\">&#x27;JOB&#x27;</span>]=[<span class=\"string\">&quot;Data Analyst&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> Data_Analyst</span><br><span class=\"line\">                   <span class=\"keyword\">else</span> <span class=\"string\">&quot;Data Scientist&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> Data_Scientist </span><br><span class=\"line\">                   <span class=\"keyword\">else</span> <span class=\"string\">&quot;Developer&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> Developer</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"string\">&quot;NotEmployed&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> Not_Employed</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"string\">&quot;Other&quot;</span></span><br><span class=\"line\">                   <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> df19job_Ea[<span class=\"string\">&#x27;2019&#x27;</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\">df19jobTest = df19job_Ea.loc[df19job_Ea.JOB == <span class=\"string\">&#x27;Other&#x27;</span>]</span><br><span class=\"line\">df19jobTest[<span class=\"string\">&#x27;2019&#x27;</span>].value_counts()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">df18job_Ea.value_counts(<span class=\"string\">&#x27;2018&#x27;</span>)</span><br><span class=\"line\">df18job_Ea[<span class=\"string\">&#x27;JOB&#x27;</span>]=[<span class=\"string\">&quot;Data Analyst&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> Data_Analyst</span><br><span class=\"line\">                   <span class=\"keyword\">else</span> <span class=\"string\">&quot;Data Scientist&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> Data_Scientist </span><br><span class=\"line\">                   <span class=\"keyword\">else</span> <span class=\"string\">&quot;Developer&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> Developer</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"string\">&quot;NotEmployed&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> Not_Employed</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"string\">&quot;Other&quot;</span></span><br><span class=\"line\">                   <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> df18job_Ea[<span class=\"string\">&#x27;2018&#x27;</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\">df18jobTest = df18job_Ea.loc[df18job_Ea.JOB == <span class=\"string\">&#x27;Other&#x27;</span>]</span><br><span class=\"line\">df18jobTest[<span class=\"string\">&#x27;2018&#x27;</span>].value_counts()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">df17job_Ea.value_counts(<span class=\"string\">&#x27;2017&#x27;</span>)</span><br><span class=\"line\">df17job_Ea[<span class=\"string\">&#x27;JOB&#x27;</span>]=[<span class=\"string\">&quot;Data Analyst&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> Data_Analyst</span><br><span class=\"line\">                   <span class=\"keyword\">else</span> <span class=\"string\">&quot;Data Scientist&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> Data_Scientist </span><br><span class=\"line\">                   <span class=\"keyword\">else</span> <span class=\"string\">&quot;Developer&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> Developer</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"string\">&quot;NotEmployed&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> Not_Employed</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"string\">&quot;Other&quot;</span></span><br><span class=\"line\">                   <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> df17job_Ea[<span class=\"string\">&#x27;2017&#x27;</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\">df17jobTest = df17job_Ea.loc[df17job_Ea.JOB == <span class=\"string\">&#x27;Other&#x27;</span>]</span><br><span class=\"line\">df17jobTest[<span class=\"string\">&#x27;2017&#x27;</span>].value_counts()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">df21jobTest = df21job_Ea.loc[df21job_Ea.JOB == <span class=\"string\">&#x27;Other&#x27;</span>]</span><br><span class=\"line\">df21jobTest[<span class=\"string\">&#x27;2021&#x27;</span>].head()</span><br><span class=\"line\">df21job_Ea.value_counts(<span class=\"string\">&#x27;JOB&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">dfjob21 =df21job_Ea.groupby([<span class=\"string\">&#x27;Q3&#x27;</span>,<span class=\"string\">&#x27;JOB&#x27;</span>]).size().reset_index().rename(columns = &#123;<span class=\"number\">0</span>:<span class=\"string\">&quot;Count&quot;</span>&#125;).rename(columns=&#123;<span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;country&#x27;</span>&#125;)</span><br><span class=\"line\">dfjob20 =df20job_Ea.groupby([<span class=\"string\">&#x27;Q3&#x27;</span>,<span class=\"string\">&#x27;JOB&#x27;</span>]).size().reset_index().rename(columns = &#123;<span class=\"number\">0</span>:<span class=\"string\">&quot;Count&quot;</span>&#125;).rename(columns=&#123;<span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;country&#x27;</span>&#125;)</span><br><span class=\"line\">dfjob19 =df19job_Ea.groupby([<span class=\"string\">&#x27;Q3&#x27;</span>,<span class=\"string\">&#x27;JOB&#x27;</span>]).size().reset_index().rename(columns = &#123;<span class=\"number\">0</span>:<span class=\"string\">&quot;Count&quot;</span>&#125;).rename(columns=&#123;<span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;country&#x27;</span>&#125;)</span><br><span class=\"line\">dfjob18 =df18job_Ea.groupby([<span class=\"string\">&#x27;Q3&#x27;</span>,<span class=\"string\">&#x27;JOB&#x27;</span>]).size().reset_index().rename(columns = &#123;<span class=\"number\">0</span>:<span class=\"string\">&quot;Count&quot;</span>&#125;).rename(columns=&#123;<span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;country&#x27;</span>&#125;)</span><br><span class=\"line\">dfjob17 =df17job_Ea.groupby([<span class=\"string\">&#x27;Country&#x27;</span>,<span class=\"string\">&#x27;JOB&#x27;</span>]).size().reset_index().rename(columns = &#123;<span class=\"number\">0</span>:<span class=\"string\">&quot;Count&quot;</span>&#125;).rename(columns=&#123;<span class=\"string\">&#x27;Country&#x27;</span>:<span class=\"string\">&#x27;country&#x27;</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">df21_Ea_job =df21job_Ea.groupby([<span class=\"string\">&#x27;JOB&#x27;</span>]).size().reset_index().rename(columns = &#123;<span class=\"number\">0</span>:<span class=\"string\">&quot;Count&quot;</span>&#125;)</span><br><span class=\"line\">df20_Ea_job =df20job_Ea.groupby([<span class=\"string\">&#x27;JOB&#x27;</span>]).size().reset_index().rename(columns = &#123;<span class=\"number\">0</span>:<span class=\"string\">&quot;Count&quot;</span>&#125;)</span><br><span class=\"line\">df19_Ea_job =df19job_Ea.groupby([<span class=\"string\">&#x27;JOB&#x27;</span>]).size().reset_index().rename(columns = &#123;<span class=\"number\">0</span>:<span class=\"string\">&quot;Count&quot;</span>&#125;)</span><br><span class=\"line\">df18_Ea_job =df18job_Ea.groupby([<span class=\"string\">&#x27;JOB&#x27;</span>]).size().reset_index().rename(columns = &#123;<span class=\"number\">0</span>:<span class=\"string\">&quot;Count&quot;</span>&#125;)</span><br><span class=\"line\">df17_Ea_job =df17job_Ea.groupby([<span class=\"string\">&#x27;JOB&#x27;</span>]).size().reset_index().rename(columns = &#123;<span class=\"number\">0</span>:<span class=\"string\">&quot;Count&quot;</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">df21_DA=df21[df21[<span class=\"string\">&#x27;Q5&#x27;</span>].isin(Data_Analyst)]</span><br><span class=\"line\">df21_DS=df21[df21[<span class=\"string\">&#x27;Q5&#x27;</span>].isin(Data_Scientist)]</span><br><span class=\"line\">df21_D=df21[df21[<span class=\"string\">&#x27;Q5&#x27;</span>].isin(Developer)]</span><br><span class=\"line\">df21_N=df21[df21[<span class=\"string\">&#x27;Q5&#x27;</span>].isin(Not_Employed)]</span><br><span class=\"line\">df21_O=df21[df21[<span class=\"string\">&#x27;Q5&#x27;</span>].isin(Others)]</span><br><span class=\"line\"></span><br><span class=\"line\">World_ = np.array([df21_DA[<span class=\"string\">&#x27;Q5&#x27;</span>].count(), df21_DS[<span class=\"string\">&#x27;Q5&#x27;</span>].count(), df21_D[<span class=\"string\">&#x27;Q5&#x27;</span>].count(), df21_N[<span class=\"string\">&#x27;Q5&#x27;</span>].count(), df21_O[<span class=\"string\">&#x27;Q5&#x27;</span>].count()]) </span><br><span class=\"line\">East_Asia_ = df21_Ea_job[<span class=\"string\">&#x27;Count&#x27;</span>].to_numpy()</span><br><span class=\"line\">World =((World_/World_.<span class=\"built_in\">sum</span>())*<span class=\"number\">100</span>).<span class=\"built_in\">round</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">East_Asia =((East_Asia_/East_Asia_.<span class=\"built_in\">sum</span>())*<span class=\"number\">100</span>).<span class=\"built_in\">round</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">y = df21_Ea_job.JOB.to_numpy()</span><br><span class=\"line\"></span><br><span class=\"line\">fig = go.Figure(data=[</span><br><span class=\"line\">    go.Bar(y=y, x=World, orientation=<span class=\"string\">&#x27;h&#x27;</span>, name=<span class=\"string\">&quot;World&quot;</span>, base=<span class=\"number\">0</span>, hovertemplate=<span class=\"string\">&#x27;&lt;b&gt;World&lt;/b&gt;: %&#123;x&#125;%&lt;br&gt;&#x27;</span>, marker_color=<span class=\"string\">&#x27;#979DA6&#x27;</span>, text=World, textposition=<span class=\"string\">&#x27;outside&#x27;</span>),</span><br><span class=\"line\">    go.Bar(y=y, x=-East_Asia, orientation=<span class=\"string\">&#x27;h&#x27;</span>, name=<span class=\"string\">&quot;East Asia&quot;</span>, base=<span class=\"number\">0</span>, hovertemplate=<span class=\"string\">&#x27;&lt;b&gt;East Asia&lt;/b&gt;: %&#123;x&#125;%&lt;br&gt;&#x27;</span>, marker_color=<span class=\"string\">&#x27;#F2D64B&#x27;</span>, text=East_Asia, textposition=<span class=\"string\">&#x27;outside&#x27;</span>)])</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(barmode=<span class=\"string\">&#x27;stack&#x27;</span>)</span><br><span class=\"line\">fig.update_layout(title=<span class=\"string\">&#x27;&lt;b&gt;World vs EastAsia&lt;/b&gt;&#x27;</span>,title_font_size=<span class=\"number\">22</span>,</span><br><span class=\"line\">                  margin = <span class=\"built_in\">dict</span>(t=<span class=\"number\">200</span>, l=<span class=\"number\">100</span>, r=<span class=\"number\">50</span>, b=<span class=\"number\">200</span>),</span><br><span class=\"line\">                  height=<span class=\"number\">700</span>, width=<span class=\"number\">750</span>,</span><br><span class=\"line\">                  xaxis_title=<span class=\"literal\">None</span>,</span><br><span class=\"line\">                  yaxis_title=<span class=\"literal\">None</span>)</span><br><span class=\"line\">fig.update_xaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\">fig.update_yaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\">fig.update_layout(legend=<span class=\"built_in\">dict</span>(</span><br><span class=\"line\">    orientation=<span class=\"string\">&quot;h&quot;</span>,</span><br><span class=\"line\">    yanchor=<span class=\"string\">&quot;bottom&quot;</span>,</span><br><span class=\"line\">    y=<span class=\"number\">1.1</span>,</span><br><span class=\"line\">    xanchor=<span class=\"string\">&quot;right&quot;</span>,</span><br><span class=\"line\">    x=<span class=\"number\">1</span>))</span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">14</span>),</span><br><span class=\"line\">                                    x=<span class=\"number\">0.8</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.5</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;@green_yhjw&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n\n<h2> World Job Ratio: Heat Map </h2> \n\n<p>The trend of increasing each job except Others. <br><br>Data Scientist has a high proportion, and the trend is to increase further in 2022. <br></p>\n<h2> East Asia Job Ratio: Heat Map </h2> \nEast Asia : Increasing the ratio of data scientist. <br>\n\n<p><img src=\"/images/kaggle_final/newplot8.png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#data preprocessing</span></span><br><span class=\"line\">df21job= df21.loc[:,[<span class=\"string\">&#x27;region&#x27;</span>,<span class=\"string\">&#x27;Q5&#x27;</span>]].rename(columns=&#123;<span class=\"string\">&#x27;Q5&#x27;</span>:<span class=\"string\">&#x27;2021&#x27;</span>&#125;).fillna(<span class=\"string\">&#x27;Others&#x27;</span>)</span><br><span class=\"line\">df20job= df20.loc[:,[<span class=\"string\">&#x27;region&#x27;</span>,<span class=\"string\">&#x27;Q5&#x27;</span>]].rename(columns=&#123;<span class=\"string\">&#x27;Q5&#x27;</span>:<span class=\"string\">&#x27;2020&#x27;</span>&#125;).fillna(<span class=\"string\">&#x27;Others&#x27;</span>)</span><br><span class=\"line\">df19job= df19.loc[:,[<span class=\"string\">&#x27;region&#x27;</span>,<span class=\"string\">&#x27;Q5&#x27;</span>]].rename(columns=&#123;<span class=\"string\">&#x27;Q5&#x27;</span>:<span class=\"string\">&#x27;2019&#x27;</span>&#125;).fillna(<span class=\"string\">&#x27;Others&#x27;</span>)</span><br><span class=\"line\">df18job= df18.loc[:,[<span class=\"string\">&#x27;region&#x27;</span>,<span class=\"string\">&#x27;Q6&#x27;</span>]].rename(columns=&#123; <span class=\"string\">&#x27;Q6&#x27;</span>:<span class=\"string\">&#x27;2018&#x27;</span>&#125;).fillna(<span class=\"string\">&#x27;Others&#x27;</span>)</span><br><span class=\"line\">df17job= df17.loc[:,[<span class=\"string\">&#x27;region&#x27;</span>,<span class=\"string\">&#x27;CurrentJobTitleSelect&#x27;</span>]].rename(columns=&#123;<span class=\"string\">&#x27;CurrentJobTitleSelect&#x27;</span>:<span class=\"string\">&#x27;2017&#x27;</span>&#125;).fillna(<span class=\"string\">&#x27;Others&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">df21job[<span class=\"string\">&#x27;JOB&#x27;</span>]=[<span class=\"string\">&quot;Data Analyst&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> Data_Analyst</span><br><span class=\"line\">                   <span class=\"keyword\">else</span> <span class=\"string\">&quot;Data Scientist&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> Data_Scientist <span class=\"comment\"># Data Scientist</span></span><br><span class=\"line\">                   <span class=\"keyword\">else</span> <span class=\"string\">&quot;Developer&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> Developer</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"string\">&quot;NotEmployed&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> Not_Employed</span><br><span class=\"line\">                   <span class=\"keyword\">else</span> <span class=\"string\">&quot;Others&quot;</span> </span><br><span class=\"line\">                   <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> df21job[<span class=\"string\">&#x27;2021&#x27;</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">df20job[<span class=\"string\">&#x27;JOB&#x27;</span>]=[<span class=\"string\">&quot;Data Analyst&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> Data_Analyst</span><br><span class=\"line\">                   <span class=\"keyword\">else</span> <span class=\"string\">&quot;Data Scientist&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> Data_Scientist </span><br><span class=\"line\">                   <span class=\"keyword\">else</span> <span class=\"string\">&quot;Developer&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> Developer</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"string\">&quot;NotEmployed&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> Not_Employed</span><br><span class=\"line\">                   <span class=\"keyword\">else</span> <span class=\"string\">&quot;Others&quot;</span></span><br><span class=\"line\">                   <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> df20job[<span class=\"string\">&#x27;2020&#x27;</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">df19job[<span class=\"string\">&#x27;JOB&#x27;</span>]=[<span class=\"string\">&quot;Data Analyst&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> Data_Analyst</span><br><span class=\"line\">                   <span class=\"keyword\">else</span> <span class=\"string\">&quot;Data Scientist&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> Data_Scientist </span><br><span class=\"line\">                   <span class=\"keyword\">else</span> <span class=\"string\">&quot;Developer&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> Developer</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"string\">&quot;NotEmployed&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> Not_Employed</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"string\">&quot;Others&quot;</span></span><br><span class=\"line\">                   <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> df19job[<span class=\"string\">&#x27;2019&#x27;</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">df18job[<span class=\"string\">&#x27;JOB&#x27;</span>]=[<span class=\"string\">&quot;Data Analyst&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> Data_Analyst</span><br><span class=\"line\">                   <span class=\"keyword\">else</span> <span class=\"string\">&quot;Data Scientist&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> Data_Scientist </span><br><span class=\"line\">                   <span class=\"keyword\">else</span> <span class=\"string\">&quot;Developer&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> Developer</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"string\">&quot;NotEmployed&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> Not_Employed</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"string\">&quot;Others&quot;</span></span><br><span class=\"line\">                   <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> df18job[<span class=\"string\">&#x27;2018&#x27;</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">df17job[<span class=\"string\">&#x27;JOB&#x27;</span>]=[<span class=\"string\">&quot;Data Analyst&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> Data_Analyst</span><br><span class=\"line\">                   <span class=\"keyword\">else</span> <span class=\"string\">&quot;Data Scientist&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> Data_Scientist </span><br><span class=\"line\">                   <span class=\"keyword\">else</span> <span class=\"string\">&quot;Developer&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> Developer</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"string\">&quot;NotEmployed&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> Not_Employed</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"string\">&quot;Others&quot;</span></span><br><span class=\"line\">                   <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> df17job[<span class=\"string\">&#x27;2017&#x27;</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\">df21_job =df21job.groupby([<span class=\"string\">&#x27;JOB&#x27;</span>]).size().reset_index().rename(columns = &#123;<span class=\"number\">0</span>:<span class=\"string\">&quot;Count&quot;</span>&#125;)</span><br><span class=\"line\">df20_job =df20job.groupby([<span class=\"string\">&#x27;JOB&#x27;</span>]).size().reset_index().rename(columns = &#123;<span class=\"number\">0</span>:<span class=\"string\">&quot;Count&quot;</span>&#125;)</span><br><span class=\"line\">df19_job =df19job.groupby([<span class=\"string\">&#x27;JOB&#x27;</span>]).size().reset_index().rename(columns = &#123;<span class=\"number\">0</span>:<span class=\"string\">&quot;Count&quot;</span>&#125;)</span><br><span class=\"line\">df18_job =df18job.groupby([<span class=\"string\">&#x27;JOB&#x27;</span>]).size().reset_index().rename(columns = &#123;<span class=\"number\">0</span>:<span class=\"string\">&quot;Count&quot;</span>&#125;)</span><br><span class=\"line\">df17_job =df17job.groupby([<span class=\"string\">&#x27;JOB&#x27;</span>]).size().reset_index().rename(columns = &#123;<span class=\"number\">0</span>:<span class=\"string\">&quot;Count&quot;</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">merge11=pd.merge(df21_job,df20_job, how=<span class=\"string\">&#x27;outer&#x27;</span>,on=<span class=\"string\">&#x27;JOB&#x27;</span>)</span><br><span class=\"line\">merge21=pd.merge(df19_job,df18_job, how=<span class=\"string\">&#x27;outer&#x27;</span>,on=<span class=\"string\">&#x27;JOB&#x27;</span>)</span><br><span class=\"line\">merge31=pd.merge(merge11,merge21, how=<span class=\"string\">&#x27;outer&#x27;</span>,on=<span class=\"string\">&#x27;JOB&#x27;</span>)</span><br><span class=\"line\">merge_Wo=(pd.merge(merge31,df17_job, how=<span class=\"string\">&#x27;outer&#x27;</span>,on=<span class=\"string\">&#x27;JOB&#x27;</span>)</span><br><span class=\"line\">            .rename(columns = &#123;<span class=\"string\">&#x27;Count_x_x&#x27;</span>:<span class=\"string\">&#x27;2021&#x27;</span>,<span class=\"string\">&#x27;Count_y_x&#x27;</span>:<span class=\"string\">&#x27;2020&#x27;</span>,<span class=\"string\">&#x27;Count_x_y&#x27;</span>:<span class=\"string\">&#x27;2019&#x27;</span>,<span class=\"string\">&#x27;Count_y_y&#x27;</span>:<span class=\"string\">&#x27;2018&#x27;</span>,<span class=\"string\">&#x27;Count&#x27;</span>:<span class=\"string\">&#x27;2017&#x27;</span>&#125;).fillna(<span class=\"number\">0</span>)</span><br><span class=\"line\">            .reindex(columns = [<span class=\"string\">&#x27;JOB&#x27;</span>,<span class=\"string\">&#x27;2017&#x27;</span>,<span class=\"string\">&#x27;2018&#x27;</span>,<span class=\"string\">&#x27;2019&#x27;</span>,<span class=\"string\">&#x27;2020&#x27;</span>,<span class=\"string\">&#x27;2021&#x27;</span> ]))</span><br><span class=\"line\"></span><br><span class=\"line\">df21job_Ea = df21job[df21job[<span class=\"string\">&#x27;region&#x27;</span>] == <span class=\"string\">&#x27;EastAsia&#x27;</span>].loc[:,[<span class=\"string\">&#x27;region&#x27;</span>,<span class=\"string\">&#x27;JOB&#x27;</span>]].rename(columns=&#123;<span class=\"string\">&#x27;region&#x27;</span>:<span class=\"string\">&#x27;EastAsia&#x27;</span>&#125;)</span><br><span class=\"line\">df20job_Ea = df20job[df20job[<span class=\"string\">&#x27;region&#x27;</span>] == <span class=\"string\">&#x27;EastAsia&#x27;</span>].loc[:,[<span class=\"string\">&#x27;region&#x27;</span>,<span class=\"string\">&#x27;JOB&#x27;</span>]].rename(columns=&#123;<span class=\"string\">&#x27;region&#x27;</span>:<span class=\"string\">&#x27;EastAsia&#x27;</span>&#125;)</span><br><span class=\"line\">df19job_Ea = df19job[df19job[<span class=\"string\">&#x27;region&#x27;</span>] == <span class=\"string\">&#x27;EastAsia&#x27;</span>].loc[:,[<span class=\"string\">&#x27;region&#x27;</span>,<span class=\"string\">&#x27;JOB&#x27;</span>]].rename(columns=&#123;<span class=\"string\">&#x27;region&#x27;</span>:<span class=\"string\">&#x27;EastAsia&#x27;</span>&#125;)</span><br><span class=\"line\">df18job_Ea = df18job[df18job[<span class=\"string\">&#x27;region&#x27;</span>] == <span class=\"string\">&#x27;EastAsia&#x27;</span>].loc[:,[<span class=\"string\">&#x27;region&#x27;</span>,<span class=\"string\">&#x27;JOB&#x27;</span>]].rename(columns=&#123;<span class=\"string\">&#x27;region&#x27;</span>:<span class=\"string\">&#x27;EastAsia&#x27;</span>&#125;)</span><br><span class=\"line\">df17job_Ea = df17job[df17job[<span class=\"string\">&#x27;region&#x27;</span>] == <span class=\"string\">&#x27;EastAsia&#x27;</span>].loc[:,[<span class=\"string\">&#x27;region&#x27;</span>,<span class=\"string\">&#x27;JOB&#x27;</span>]].rename(columns=&#123;<span class=\"string\">&#x27;region&#x27;</span>:<span class=\"string\">&#x27;EastAsia&#x27;</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">df21job_Ea =df21job_Ea.groupby([<span class=\"string\">&#x27;JOB&#x27;</span>]).size().reset_index().rename(columns = &#123;<span class=\"number\">0</span>:<span class=\"string\">&quot;Count&quot;</span>&#125;)</span><br><span class=\"line\">df20job_Ea =df20job_Ea.groupby([<span class=\"string\">&#x27;JOB&#x27;</span>]).size().reset_index().rename(columns = &#123;<span class=\"number\">0</span>:<span class=\"string\">&quot;Count&quot;</span>&#125;)</span><br><span class=\"line\">df19job_Ea =df19job_Ea.groupby([<span class=\"string\">&#x27;JOB&#x27;</span>]).size().reset_index().rename(columns = &#123;<span class=\"number\">0</span>:<span class=\"string\">&quot;Count&quot;</span>&#125;)</span><br><span class=\"line\">df18job_Ea =df18job_Ea.groupby([<span class=\"string\">&#x27;JOB&#x27;</span>]).size().reset_index().rename(columns = &#123;<span class=\"number\">0</span>:<span class=\"string\">&quot;Count&quot;</span>&#125;)</span><br><span class=\"line\">df17job_Ea =df17job_Ea.groupby([<span class=\"string\">&#x27;JOB&#x27;</span>]).size().reset_index().rename(columns = &#123;<span class=\"number\">0</span>:<span class=\"string\">&quot;Count&quot;</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">merge1=pd.merge(df21job_Ea,df20job_Ea, how=<span class=\"string\">&#x27;outer&#x27;</span>,on=<span class=\"string\">&#x27;JOB&#x27;</span>)</span><br><span class=\"line\">merge2=pd.merge(df19job_Ea,df18job_Ea, how=<span class=\"string\">&#x27;outer&#x27;</span>,on=<span class=\"string\">&#x27;JOB&#x27;</span>)</span><br><span class=\"line\">merge3=pd.merge(merge1,merge2, how=<span class=\"string\">&#x27;outer&#x27;</span>,on=<span class=\"string\">&#x27;JOB&#x27;</span>)</span><br><span class=\"line\">merge=(pd.merge(merge3,df17job_Ea, how=<span class=\"string\">&#x27;outer&#x27;</span>,on=<span class=\"string\">&#x27;JOB&#x27;</span>)</span><br><span class=\"line\">         .rename(columns = &#123;<span class=\"string\">&#x27;Count_x_x&#x27;</span>:<span class=\"string\">&#x27;2021&#x27;</span>,<span class=\"string\">&#x27;Count_y_x&#x27;</span>:<span class=\"string\">&#x27;2020&#x27;</span>,<span class=\"string\">&#x27;Count_x_y&#x27;</span>:<span class=\"string\">&#x27;2019&#x27;</span>,<span class=\"string\">&#x27;Count_y_y&#x27;</span>:<span class=\"string\">&#x27;2018&#x27;</span>,<span class=\"string\">&#x27;Count&#x27;</span>:<span class=\"string\">&#x27;2017&#x27;</span>&#125;).fillna(<span class=\"number\">0</span>)</span><br><span class=\"line\">         .reindex(columns = [<span class=\"string\">&#x27;JOB&#x27;</span>,<span class=\"string\">&#x27;2017&#x27;</span>,<span class=\"string\">&#x27;2018&#x27;</span>,<span class=\"string\">&#x27;2019&#x27;</span>,<span class=\"string\">&#x27;2020&#x27;</span>,<span class=\"string\">&#x27;2021&#x27;</span> ]))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#graph</span></span><br><span class=\"line\">z1=((merge_Wo.iloc[:,[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]].to_numpy()/merge_Wo.iloc[:,[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]].to_numpy().<span class=\"built_in\">sum</span>())*<span class=\"number\">100</span>).<span class=\"built_in\">round</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">z2=((merge.iloc[:,[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]].to_numpy()/merge.iloc[:,[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]].to_numpy().<span class=\"built_in\">sum</span>())*<span class=\"number\">100</span>).<span class=\"built_in\">round</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">x=[<span class=\"string\">&#x27;2017-year&#x27;</span>,<span class=\"string\">&#x27;2018-year&#x27;</span>,<span class=\"string\">&#x27;2019-year&#x27;</span>,<span class=\"string\">&#x27;2020-year&#x27;</span>,<span class=\"string\">&#x27;2021-year&#x27;</span>]</span><br><span class=\"line\">y1=merge_Wo[<span class=\"string\">&#x27;JOB&#x27;</span>].tolist()</span><br><span class=\"line\">y2=merge[<span class=\"string\">&#x27;JOB&#x27;</span>].tolist()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">fig1 = ff.create_annotated_heatmap(z1, x = x, y = y1, colorscale=<span class=\"string\">&#x27;sunset&#x27;</span>)</span><br><span class=\"line\">fig2 = ff.create_annotated_heatmap(z2, x = x, y = y2, colorscale=<span class=\"string\">&#x27;sunset&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> annot <span class=\"keyword\">in</span> fig2[<span class=\"string\">&#x27;layout&#x27;</span>][<span class=\"string\">&#x27;annotations&#x27;</span>]:</span><br><span class=\"line\">    annot[<span class=\"string\">&#x27;xref&#x27;</span>] = <span class=\"string\">&#x27;x2&#x27;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">fig = make_subplots(rows=<span class=\"number\">1</span>, cols=<span class=\"number\">2</span>)</span><br><span class=\"line\">fig.add_trace(fig1.data[<span class=\"number\">0</span>], row=<span class=\"number\">1</span>, col=<span class=\"number\">1</span>)</span><br><span class=\"line\">fig.add_trace(fig2.data[<span class=\"number\">0</span>], row=<span class=\"number\">1</span>, col=<span class=\"number\">2</span>)</span><br><span class=\"line\">fig.update_layout(fig1.layout, title=<span class=\"string\">&#x27;&lt;b&gt;           World vs EastAsia&lt;/b&gt;&#x27;</span>,title_font_size=<span class=\"number\">22</span>,</span><br><span class=\"line\">                  margin = <span class=\"built_in\">dict</span>(t=<span class=\"number\">200</span>, l=<span class=\"number\">100</span>, r=<span class=\"number\">10</span>, b=<span class=\"number\">200</span>),</span><br><span class=\"line\">                  height=<span class=\"number\">700</span>, width=<span class=\"number\">1150</span>, coloraxis=<span class=\"built_in\">dict</span>(showscale=<span class=\"literal\">True</span>, colorscale=<span class=\"string\">&#x27;sunset&#x27;</span>))</span><br><span class=\"line\">fig.update_traces(hovertemplate=<span class=\"string\">&#x27;&lt;b&gt;Job&lt;/b&gt;: %&#123;y&#125;&lt;br&gt;&#x27;</span>+</span><br><span class=\"line\">                                <span class=\"string\">&#x27;&lt;b&gt;Year&lt;/b&gt;: %&#123;x&#125;&lt;br&gt;&#x27;</span>+</span><br><span class=\"line\">                                <span class=\"string\">&#x27;&lt;b&gt;Percent&lt;/b&gt;: %&#123;z&#125;%&#x27;</span>)</span><br><span class=\"line\">fig.layout.annotations += fig2.layout.annotations</span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">14</span>),</span><br><span class=\"line\">                                    x=<span class=\"number\">0.9</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.25</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;@green_yhjw&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-1-4-Age-transformation\"><a href=\"#3-1-4-Age-transformation\" class=\"headerlink\" title=\"3.1.4 Age transformation\"></a>3.1.4 Age transformation</h1><hr>\n<h2> > Age change in World and East Asia by year: Stacked scatter plot </h2>\n\n<ol>\n<li>In the case of Age data, there is no 2017 data.</li>\n<li>70% of the World respondents said 20s to 30s.</li>\n<li>70% of East Asia respondents said 20s to 30s.</li>\n<li>The number of respondents increases, but the ratio seems to have stabilized.</li>\n</ol>\n<p><img src=\"/images/kaggle_final/newplot9.png\"><br><img src=\"/images/kaggle_final/newplot10.png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#data preprocessing</span></span><br><span class=\"line\"><span class=\"comment\">#World</span></span><br><span class=\"line\">Age21_W = df21.loc[:,[<span class=\"string\">&#x27;Q3&#x27;</span>,<span class=\"string\">&#x27;Q1&#x27;</span>, <span class=\"string\">&#x27;year&#x27;</span>]].reset_index().rename(columns=&#123;<span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;East_Asia&#x27;</span>, <span class=\"string\">&#x27;Q1&#x27;</span>:<span class=\"string\">&#x27;age&#x27;</span>&#125;).fillna(<span class=\"string\">&#x27;etc&#x27;</span>)</span><br><span class=\"line\">Age20_W = df20.loc[:,[<span class=\"string\">&#x27;Q3&#x27;</span>,<span class=\"string\">&#x27;Q1&#x27;</span>,<span class=\"string\">&#x27;year&#x27;</span>]].reset_index().rename(columns=&#123;<span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;East_Asia&#x27;</span>, <span class=\"string\">&#x27;Q1&#x27;</span>:<span class=\"string\">&#x27;age&#x27;</span>&#125;).fillna(<span class=\"string\">&#x27;etc&#x27;</span>)</span><br><span class=\"line\">Age19_W = df19.loc[:,[<span class=\"string\">&#x27;Q3&#x27;</span>,<span class=\"string\">&#x27;Q1&#x27;</span>,<span class=\"string\">&#x27;year&#x27;</span>]].reset_index().rename(columns=&#123;<span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;East_Asia&#x27;</span>, <span class=\"string\">&#x27;Q1&#x27;</span>:<span class=\"string\">&#x27;age&#x27;</span>&#125;).fillna(<span class=\"string\">&#x27;etc&#x27;</span>)</span><br><span class=\"line\">Age18_W = df18.loc[:,[<span class=\"string\">&#x27;Q3&#x27;</span>,<span class=\"string\">&#x27;Q2&#x27;</span>,<span class=\"string\">&#x27;year&#x27;</span>]].reset_index().rename(columns=&#123;<span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;East_Asia&#x27;</span>, <span class=\"string\">&#x27;Q2&#x27;</span>:<span class=\"string\">&#x27;age&#x27;</span>&#125;).fillna(<span class=\"string\">&#x27;etc&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">Age5y_W= pd.concat([Age21_W, Age20_W, Age19_W, Age18_W])</span><br><span class=\"line\">Age5y_W= (Age5y_W.replace([<span class=\"string\">&#x27;60-69&#x27;</span>, <span class=\"string\">&#x27;70+&#x27;</span>, <span class=\"string\">&#x27;70-79&#x27;</span>, <span class=\"string\">&#x27;80+&#x27;</span>], <span class=\"string\">&#x27;60+&#x27;</span>)</span><br><span class=\"line\">           .replace([<span class=\"string\">&#x27;22-24&#x27;</span>, <span class=\"string\">&#x27;25-29&#x27;</span>], <span class=\"string\">&#x27;22-29&#x27;</span>)</span><br><span class=\"line\">           .replace([<span class=\"string\">&#x27;30-34&#x27;</span>, <span class=\"string\">&#x27;35-39&#x27;</span>], <span class=\"string\">&#x27;30-39&#x27;</span>)</span><br><span class=\"line\">            .replace([<span class=\"string\">&#x27;40-44&#x27;</span>, <span class=\"string\">&#x27;45-49&#x27;</span>], <span class=\"string\">&#x27;40-49&#x27;</span>)</span><br><span class=\"line\">        .replace([<span class=\"string\">&#x27;50-54&#x27;</span>, <span class=\"string\">&#x27;55-59&#x27;</span>], <span class=\"string\">&#x27;50-59&#x27;</span>)</span><br><span class=\"line\">           .groupby([<span class=\"string\">&#x27;year&#x27;</span>, <span class=\"string\">&#x27;age&#x27;</span>])</span><br><span class=\"line\">           .size()</span><br><span class=\"line\">           .reset_index()</span><br><span class=\"line\">           .rename(columns = &#123;<span class=\"number\">0</span>:<span class=\"string\">&quot;Count&quot;</span>&#125;))</span><br><span class=\"line\"></span><br><span class=\"line\">Age21_percent_W = Age5y_W[Age5y_W[<span class=\"string\">&#x27;year&#x27;</span>] == <span class=\"string\">&quot;2021&quot;</span>].reset_index(drop = <span class=\"literal\">True</span>)</span><br><span class=\"line\">Age21_percent_W[<span class=\"string\">&#x27;percentage&#x27;</span>] = Age21_percent_W[<span class=\"string\">&quot;Count&quot;</span>] / Age21_percent_W[<span class=\"string\">&quot;Count&quot;</span>].<span class=\"built_in\">sum</span>()</span><br><span class=\"line\">Age21_percent_W[<span class=\"string\">&#x27;%&#x27;</span>] = np.<span class=\"built_in\">round</span>(Age21_percent_W[<span class=\"string\">&#x27;percentage&#x27;</span>] * <span class=\"number\">100</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">Age20_percent_W = Age5y_W[Age5y_W[<span class=\"string\">&#x27;year&#x27;</span>] == <span class=\"string\">&quot;2020&quot;</span>].reset_index(drop = <span class=\"literal\">True</span>)</span><br><span class=\"line\">Age20_percent_W[<span class=\"string\">&#x27;percentage&#x27;</span>] = Age20_percent_W[<span class=\"string\">&quot;Count&quot;</span>] / Age20_percent_W[<span class=\"string\">&quot;Count&quot;</span>].<span class=\"built_in\">sum</span>()</span><br><span class=\"line\">Age20_percent_W[<span class=\"string\">&#x27;%&#x27;</span>] = np.<span class=\"built_in\">round</span>(Age20_percent_W[<span class=\"string\">&#x27;percentage&#x27;</span>] * <span class=\"number\">100</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">Age19_percent_W = Age5y_W[Age5y_W[<span class=\"string\">&#x27;year&#x27;</span>] == <span class=\"string\">&quot;2019&quot;</span>].reset_index(drop = <span class=\"literal\">True</span>)</span><br><span class=\"line\">Age19_percent_W[<span class=\"string\">&#x27;percentage&#x27;</span>] = Age19_percent_W[<span class=\"string\">&quot;Count&quot;</span>] / Age19_percent_W[<span class=\"string\">&quot;Count&quot;</span>].<span class=\"built_in\">sum</span>()</span><br><span class=\"line\">Age19_percent_W[<span class=\"string\">&#x27;%&#x27;</span>] = np.<span class=\"built_in\">round</span>(Age19_percent_W[<span class=\"string\">&#x27;percentage&#x27;</span>] * <span class=\"number\">100</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">Age18_percent_W = Age5y_W[Age5y_W[<span class=\"string\">&#x27;year&#x27;</span>] == <span class=\"string\">&quot;2018&quot;</span>].reset_index(drop = <span class=\"literal\">True</span>)</span><br><span class=\"line\">Age18_percent_W[<span class=\"string\">&#x27;percentage&#x27;</span>] = Age18_percent_W[<span class=\"string\">&quot;Count&quot;</span>] / Age18_percent_W[<span class=\"string\">&quot;Count&quot;</span>].<span class=\"built_in\">sum</span>()</span><br><span class=\"line\">Age18_percent_W[<span class=\"string\">&#x27;%&#x27;</span>] = np.<span class=\"built_in\">round</span>(Age18_percent_W[<span class=\"string\">&#x27;percentage&#x27;</span>] * <span class=\"number\">100</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">Age5y_percent_W = pd.concat([Age18_percent_W, Age19_percent_W, Age20_percent_W, Age21_percent_W], ignore_index = <span class=\"literal\">True</span>)</span><br><span class=\"line\">Age5y_percent_W= pd.pivot(Age5y_percent_W, index = <span class=\"string\">&quot;year&quot;</span>, columns = <span class=\"string\">&#x27;age&#x27;</span>, values = <span class=\"string\">&quot;%&quot;</span>).reset_index()</span><br><span class=\"line\">Age5y_percent_W</span><br><span class=\"line\"></span><br><span class=\"line\">Age21 = df21_Ea.loc[:,[<span class=\"string\">&#x27;Q3&#x27;</span>,<span class=\"string\">&#x27;Q1&#x27;</span>, <span class=\"string\">&#x27;year&#x27;</span>]].reset_index().rename(columns=&#123;<span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;East_Asia&#x27;</span>, <span class=\"string\">&#x27;Q1&#x27;</span>:<span class=\"string\">&#x27;age&#x27;</span>&#125;).fillna(<span class=\"string\">&#x27;etc&#x27;</span>)</span><br><span class=\"line\">Age20 = df20_Ea.loc[:,[<span class=\"string\">&#x27;Q3&#x27;</span>,<span class=\"string\">&#x27;Q1&#x27;</span>,<span class=\"string\">&#x27;year&#x27;</span>]].reset_index().rename(columns=&#123;<span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;East_Asia&#x27;</span>, <span class=\"string\">&#x27;Q1&#x27;</span>:<span class=\"string\">&#x27;age&#x27;</span>&#125;).fillna(<span class=\"string\">&#x27;etc&#x27;</span>)</span><br><span class=\"line\">Age19 = df19_Ea.loc[:,[<span class=\"string\">&#x27;Q3&#x27;</span>,<span class=\"string\">&#x27;Q1&#x27;</span>,<span class=\"string\">&#x27;year&#x27;</span>]].reset_index().rename(columns=&#123;<span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;East_Asia&#x27;</span>, <span class=\"string\">&#x27;Q1&#x27;</span>:<span class=\"string\">&#x27;age&#x27;</span>&#125;).fillna(<span class=\"string\">&#x27;etc&#x27;</span>)</span><br><span class=\"line\">Age18 = df18_Ea.loc[:,[<span class=\"string\">&#x27;Q3&#x27;</span>,<span class=\"string\">&#x27;Q2&#x27;</span>,<span class=\"string\">&#x27;year&#x27;</span>]].reset_index().rename(columns=&#123;<span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;East_Asia&#x27;</span>, <span class=\"string\">&#x27;Q2&#x27;</span>:<span class=\"string\">&#x27;age&#x27;</span>&#125;).fillna(<span class=\"string\">&#x27;etc&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">Age5y= pd.concat([Age21, Age20, Age19, Age18])</span><br><span class=\"line\">Age5y= (Age5y.replace([<span class=\"string\">&#x27;60-69&#x27;</span>, <span class=\"string\">&#x27;70+&#x27;</span>, <span class=\"string\">&#x27;70-79&#x27;</span>, <span class=\"string\">&#x27;80+&#x27;</span>], <span class=\"string\">&#x27;60+&#x27;</span>)</span><br><span class=\"line\">           .replace([<span class=\"string\">&#x27;22-24&#x27;</span>, <span class=\"string\">&#x27;25-29&#x27;</span>], <span class=\"string\">&#x27;22-29&#x27;</span>)</span><br><span class=\"line\">           .replace([<span class=\"string\">&#x27;30-34&#x27;</span>, <span class=\"string\">&#x27;35-39&#x27;</span>], <span class=\"string\">&#x27;30-39&#x27;</span>)</span><br><span class=\"line\">            .replace([<span class=\"string\">&#x27;40-44&#x27;</span>, <span class=\"string\">&#x27;45-49&#x27;</span>], <span class=\"string\">&#x27;40-49&#x27;</span>)</span><br><span class=\"line\">        .replace([<span class=\"string\">&#x27;50-54&#x27;</span>, <span class=\"string\">&#x27;55-59&#x27;</span>], <span class=\"string\">&#x27;50-59&#x27;</span>)</span><br><span class=\"line\">           .groupby([<span class=\"string\">&#x27;year&#x27;</span>, <span class=\"string\">&#x27;age&#x27;</span>])</span><br><span class=\"line\">           .size()</span><br><span class=\"line\">           .reset_index()</span><br><span class=\"line\">           .rename(columns = &#123;<span class=\"number\">0</span>:<span class=\"string\">&quot;Count&quot;</span>&#125;))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#EastAsia</span></span><br><span class=\"line\">Age21_percent = Age5y[Age5y[<span class=\"string\">&#x27;year&#x27;</span>] == <span class=\"string\">&quot;2021&quot;</span>].reset_index(drop = <span class=\"literal\">True</span>)</span><br><span class=\"line\">Age21_percent[<span class=\"string\">&#x27;percentage&#x27;</span>] = Age21_percent[<span class=\"string\">&quot;Count&quot;</span>] / Age21_percent[<span class=\"string\">&quot;Count&quot;</span>].<span class=\"built_in\">sum</span>()</span><br><span class=\"line\">Age21_percent[<span class=\"string\">&#x27;%&#x27;</span>] = np.<span class=\"built_in\">round</span>(Age21_percent[<span class=\"string\">&#x27;percentage&#x27;</span>] * <span class=\"number\">100</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">Age21_percent</span><br><span class=\"line\"></span><br><span class=\"line\">Age20_percent = Age5y[Age5y[<span class=\"string\">&#x27;year&#x27;</span>] == <span class=\"string\">&quot;2020&quot;</span>].reset_index(drop = <span class=\"literal\">True</span>)</span><br><span class=\"line\">Age20_percent[<span class=\"string\">&#x27;percentage&#x27;</span>] = Age20_percent[<span class=\"string\">&quot;Count&quot;</span>] / Age20_percent[<span class=\"string\">&quot;Count&quot;</span>].<span class=\"built_in\">sum</span>()</span><br><span class=\"line\">Age20_percent[<span class=\"string\">&#x27;%&#x27;</span>] = np.<span class=\"built_in\">round</span>(Age20_percent[<span class=\"string\">&#x27;percentage&#x27;</span>] * <span class=\"number\">100</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">Age20_percent</span><br><span class=\"line\"></span><br><span class=\"line\">Age19_percent = Age5y[Age5y[<span class=\"string\">&#x27;year&#x27;</span>] == <span class=\"string\">&quot;2019&quot;</span>].reset_index(drop = <span class=\"literal\">True</span>)</span><br><span class=\"line\">Age19_percent[<span class=\"string\">&#x27;percentage&#x27;</span>] = Age19_percent[<span class=\"string\">&quot;Count&quot;</span>] / Age19_percent[<span class=\"string\">&quot;Count&quot;</span>].<span class=\"built_in\">sum</span>()</span><br><span class=\"line\">Age19_percent[<span class=\"string\">&#x27;%&#x27;</span>] = np.<span class=\"built_in\">round</span>(Age19_percent[<span class=\"string\">&#x27;percentage&#x27;</span>] * <span class=\"number\">100</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">Age19_percent</span><br><span class=\"line\"></span><br><span class=\"line\">Age18_percent = Age5y[Age5y[<span class=\"string\">&#x27;year&#x27;</span>] == <span class=\"string\">&quot;2018&quot;</span>].reset_index(drop = <span class=\"literal\">True</span>)</span><br><span class=\"line\">Age18_percent[<span class=\"string\">&#x27;percentage&#x27;</span>] = Age18_percent[<span class=\"string\">&quot;Count&quot;</span>] / Age18_percent[<span class=\"string\">&quot;Count&quot;</span>].<span class=\"built_in\">sum</span>()</span><br><span class=\"line\">Age18_percent[<span class=\"string\">&#x27;%&#x27;</span>] = np.<span class=\"built_in\">round</span>(Age18_percent[<span class=\"string\">&#x27;percentage&#x27;</span>] * <span class=\"number\">100</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">Age18_percent</span><br><span class=\"line\"></span><br><span class=\"line\">Age5y_percent = pd.concat([Age18_percent, Age19_percent, Age20_percent, Age21_percent], ignore_index = <span class=\"literal\">True</span>)</span><br><span class=\"line\">Age5y_percent= pd.pivot(Age5y_percent, index = <span class=\"string\">&quot;year&quot;</span>, columns = <span class=\"string\">&#x27;age&#x27;</span>, values = <span class=\"string\">&quot;%&quot;</span>).reset_index()</span><br><span class=\"line\">Age5y_percent</span><br><span class=\"line\"></span><br><span class=\"line\">Age5y_percent_order = Age5y_percent_W[<span class=\"string\">&#x27;year&#x27;</span>].tolist()</span><br><span class=\"line\">Age5y_order = Age5y_W[<span class=\"string\">&#x27;age&#x27;</span>].unique().tolist()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#graph1</span></span><br><span class=\"line\">fig = go.Figure()</span><br><span class=\"line\">fig.add_trace(go.Scatter(</span><br><span class=\"line\">    x = Age5y_percent_order, </span><br><span class=\"line\">    y = Age5y_percent_W[<span class=\"string\">&#x27;18-21&#x27;</span>].tolist(), </span><br><span class=\"line\">    mode = <span class=\"string\">&quot;lines&quot;</span>, </span><br><span class=\"line\">    name = <span class=\"string\">&#x27;18-21&#x27;</span>,</span><br><span class=\"line\">    line = <span class=\"built_in\">dict</span>(width = <span class=\"number\">1</span>),</span><br><span class=\"line\">    stackgroup = <span class=\"string\">&quot;one&quot;</span>,</span><br><span class=\"line\">    marker_color=<span class=\"string\">&#x27;#F2798F&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_trace(go.Scatter(</span><br><span class=\"line\">    x = Age5y_percent_order, </span><br><span class=\"line\">    y = Age5y_percent_W[<span class=\"string\">&#x27;22-29&#x27;</span>].tolist(), </span><br><span class=\"line\">    mode = <span class=\"string\">&quot;lines&quot;</span>, </span><br><span class=\"line\">    name = <span class=\"string\">&quot;20s&quot;</span>,</span><br><span class=\"line\">    line = <span class=\"built_in\">dict</span>(width = <span class=\"number\">1</span>),</span><br><span class=\"line\">    stackgroup = <span class=\"string\">&quot;one&quot;</span>,</span><br><span class=\"line\">    marker_color=<span class=\"string\">&#x27;#88BFBA&#x27;</span>))</span><br><span class=\"line\">fig.add_trace(go.Scatter(</span><br><span class=\"line\">    x = Age5y_percent_order, </span><br><span class=\"line\">    y = Age5y_percent_W[<span class=\"string\">&#x27;30-39&#x27;</span>].tolist(), </span><br><span class=\"line\">    mode = <span class=\"string\">&quot;lines&quot;</span>, </span><br><span class=\"line\">    name = <span class=\"string\">&quot;30s&quot;</span>,</span><br><span class=\"line\">    line = <span class=\"built_in\">dict</span>(width = <span class=\"number\">1</span>),</span><br><span class=\"line\">    stackgroup = <span class=\"string\">&quot;one&quot;</span>,</span><br><span class=\"line\">    marker_color=<span class=\"string\">&#x27;#CDD9A3&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_trace(go.Scatter(</span><br><span class=\"line\">    x = Age5y_percent_order, </span><br><span class=\"line\">    y = Age5y_percent_W[<span class=\"string\">&#x27;40-49&#x27;</span>].tolist(), </span><br><span class=\"line\">    mode = <span class=\"string\">&quot;lines&quot;</span>, </span><br><span class=\"line\">    name = <span class=\"string\">&quot;40s&quot;</span>,</span><br><span class=\"line\">    line = <span class=\"built_in\">dict</span>(width = <span class=\"number\">1</span>),</span><br><span class=\"line\">    stackgroup = <span class=\"string\">&quot;one&quot;</span>,</span><br><span class=\"line\">    marker_color=<span class=\"string\">&#x27;#F28705&#x27;</span>))</span><br><span class=\"line\">fig.add_trace(go.Scatter(</span><br><span class=\"line\">    x = Age5y_percent_order, </span><br><span class=\"line\">    y = Age5y_percent_W[<span class=\"string\">&#x27;50-59&#x27;</span>].tolist(), </span><br><span class=\"line\">    mode = <span class=\"string\">&quot;lines&quot;</span>, </span><br><span class=\"line\">    name = <span class=\"string\">&quot;50s&quot;</span>,</span><br><span class=\"line\">    line = <span class=\"built_in\">dict</span>(width = <span class=\"number\">1</span>),</span><br><span class=\"line\">    stackgroup = <span class=\"string\">&quot;one&quot;</span>,</span><br><span class=\"line\">    marker_color=<span class=\"string\">&#x27;#D9946C&#x27;</span>))</span><br><span class=\"line\">fig.add_trace(go.Scatter(</span><br><span class=\"line\">    x = Age5y_percent_order, </span><br><span class=\"line\">    y = Age5y_percent_W[<span class=\"string\">&#x27;60+&#x27;</span>].tolist(), </span><br><span class=\"line\">    mode = <span class=\"string\">&quot;lines&quot;</span>, </span><br><span class=\"line\">    name = <span class=\"string\">&quot;60s&lt;&quot;</span>,</span><br><span class=\"line\">    line = <span class=\"built_in\">dict</span>(width = <span class=\"number\">1</span>),</span><br><span class=\"line\">    stackgroup = <span class=\"string\">&quot;one&quot;</span>,</span><br><span class=\"line\">    marker_color=<span class=\"string\">&#x27;#F2D64B&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_traces(hovertemplate=<span class=\"string\">&#x27;&lt;b&gt;Percent&lt;/b&gt;: %&#123;y&#125;%&lt;br&gt;&#x27;</span>+</span><br><span class=\"line\">                                <span class=\"string\">&#x27;&lt;b&gt;Year&lt;/b&gt;: %&#123;x&#125;&lt;br&gt;&#x27;</span>)</span><br><span class=\"line\">fig.update_layout(yaxis_range = (<span class=\"number\">0</span>, <span class=\"number\">100</span>), height=<span class=\"number\">500</span>, width=<span class=\"number\">700</span>,</span><br><span class=\"line\">                 title_text=<span class=\"string\">&quot;&lt;b&gt;World&lt;/b&gt;&quot;</span>, title_font_size=<span class=\"number\">20</span>,</span><br><span class=\"line\">                 title_x=<span class=\"number\">0.5</span>)</span><br><span class=\"line\">fig.update_xaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\">fig.update_yaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">14</span>),</span><br><span class=\"line\">                                    x=<span class=\"number\">0.8</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.2</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;@green_yhjw&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\">fig.show()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#graph2</span></span><br><span class=\"line\">Age5y_percent_order = Age5y_percent[<span class=\"string\">&#x27;year&#x27;</span>].tolist()</span><br><span class=\"line\">Age5y_order = Age5y[<span class=\"string\">&#x27;age&#x27;</span>].unique().tolist()</span><br><span class=\"line\"></span><br><span class=\"line\">fig = go.Figure()</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_trace(go.Scatter(</span><br><span class=\"line\">    x = Age5y_percent_order, </span><br><span class=\"line\">    y = Age5y_percent[<span class=\"string\">&#x27;18-21&#x27;</span>].tolist(), </span><br><span class=\"line\">    mode = <span class=\"string\">&quot;lines&quot;</span>, </span><br><span class=\"line\">    name = <span class=\"string\">&#x27;18-21&#x27;</span>,</span><br><span class=\"line\">    line = <span class=\"built_in\">dict</span>(width = <span class=\"number\">1</span>),</span><br><span class=\"line\">    stackgroup = <span class=\"string\">&quot;one&quot;</span>,</span><br><span class=\"line\">    marker_color=<span class=\"string\">&#x27;#F2798F&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_trace(go.Scatter(</span><br><span class=\"line\">    x = Age5y_percent_order, </span><br><span class=\"line\">    y = Age5y_percent[<span class=\"string\">&#x27;22-29&#x27;</span>].tolist(), </span><br><span class=\"line\">    mode = <span class=\"string\">&quot;lines&quot;</span>, </span><br><span class=\"line\">    name = <span class=\"string\">&quot;20s&quot;</span>,</span><br><span class=\"line\">    line = <span class=\"built_in\">dict</span>(width = <span class=\"number\">1</span>),</span><br><span class=\"line\">    stackgroup = <span class=\"string\">&quot;one&quot;</span>,</span><br><span class=\"line\">    marker_color=<span class=\"string\">&#x27;#88BFBA&#x27;</span>))</span><br><span class=\"line\">fig.add_trace(go.Scatter(</span><br><span class=\"line\">    x = Age5y_percent_order, </span><br><span class=\"line\">    y = Age5y_percent[<span class=\"string\">&#x27;30-39&#x27;</span>].tolist(), </span><br><span class=\"line\">    mode = <span class=\"string\">&quot;lines&quot;</span>, </span><br><span class=\"line\">    name = <span class=\"string\">&quot;30s&quot;</span>,</span><br><span class=\"line\">    line = <span class=\"built_in\">dict</span>(width = <span class=\"number\">1</span>),</span><br><span class=\"line\">    stackgroup = <span class=\"string\">&quot;one&quot;</span>,</span><br><span class=\"line\">    marker_color=<span class=\"string\">&#x27;#CDD9A3&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_trace(go.Scatter(</span><br><span class=\"line\">    x = Age5y_percent_order, </span><br><span class=\"line\">    y = Age5y_percent[<span class=\"string\">&#x27;40-49&#x27;</span>].tolist(), </span><br><span class=\"line\">    mode = <span class=\"string\">&quot;lines&quot;</span>, </span><br><span class=\"line\">    name = <span class=\"string\">&quot;40s&quot;</span>,</span><br><span class=\"line\">    line = <span class=\"built_in\">dict</span>(width = <span class=\"number\">1</span>),</span><br><span class=\"line\">    stackgroup = <span class=\"string\">&quot;one&quot;</span>,</span><br><span class=\"line\">    marker_color=<span class=\"string\">&#x27;#F28705&#x27;</span>))</span><br><span class=\"line\">fig.add_trace(go.Scatter(</span><br><span class=\"line\">    x = Age5y_percent_order, </span><br><span class=\"line\">    y = Age5y_percent[<span class=\"string\">&#x27;50-59&#x27;</span>].tolist(), </span><br><span class=\"line\">    mode = <span class=\"string\">&quot;lines&quot;</span>, </span><br><span class=\"line\">    name = <span class=\"string\">&quot;50s&quot;</span>,</span><br><span class=\"line\">    line = <span class=\"built_in\">dict</span>(width = <span class=\"number\">1</span>),</span><br><span class=\"line\">    stackgroup = <span class=\"string\">&quot;one&quot;</span>,</span><br><span class=\"line\">    marker_color=<span class=\"string\">&#x27;#D9946C&#x27;</span>))</span><br><span class=\"line\">fig.add_trace(go.Scatter(</span><br><span class=\"line\">    x = Age5y_percent_order, </span><br><span class=\"line\">    y = Age5y_percent[<span class=\"string\">&#x27;60+&#x27;</span>].tolist(), </span><br><span class=\"line\">    mode = <span class=\"string\">&quot;lines&quot;</span>, </span><br><span class=\"line\">    name = <span class=\"string\">&quot;60s&lt;&quot;</span>,</span><br><span class=\"line\">    line = <span class=\"built_in\">dict</span>(width = <span class=\"number\">1</span>),</span><br><span class=\"line\">    stackgroup = <span class=\"string\">&quot;one&quot;</span>,</span><br><span class=\"line\">    marker_color=<span class=\"string\">&#x27;#F2D64B&#x27;</span>))</span><br><span class=\"line\">fig.update_traces(hovertemplate=<span class=\"string\">&#x27;&lt;b&gt;Percent&lt;/b&gt;: %&#123;y&#125;%&lt;br&gt;&#x27;</span>+</span><br><span class=\"line\">                                <span class=\"string\">&#x27;&lt;b&gt;Year&lt;/b&gt;: %&#123;x&#125;&lt;br&gt;&#x27;</span>)</span><br><span class=\"line\">fig.update_layout(yaxis_range = (<span class=\"number\">0</span>, <span class=\"number\">100</span>), height=<span class=\"number\">500</span>, width=<span class=\"number\">700</span>,</span><br><span class=\"line\">                 title_text=<span class=\"string\">&quot;&lt;b&gt;East Asia&lt;/b&gt;&quot;</span>, title_font_size=<span class=\"number\">20</span>,</span><br><span class=\"line\">                 title_x=<span class=\"number\">0.5</span>)</span><br><span class=\"line\">fig.update_xaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\">fig.update_yaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">14</span>),</span><br><span class=\"line\">                                    x=<span class=\"number\">0.8</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.2</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;@green_yhjw&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n\n<h2> 17'East Asia Age Ratio: Heat Map </h2>\n\n<ul>\n<li><strong>East Asia</strong> : 50% or more. Those in their 20s and 30s.</li>\n<li><strong>Korea</strong>: Those in their 20s are the highest.<br>  The number of respondents in their 50s and older is also large.</li>\n<li><strong>Taiwan</strong> : The number of respondents in their 30s and older is relatively small.</li>\n<li><strong>China</strong>: 70% or more of respondents in their 30s or younger.<br>  Related to life expectancy?</li>\n<li><strong>Japan</strong>: Like an aging country, all ages are evenly distributed.<br>  Even if you’re older, there are many respondents to Kaggle.</li>\n</ul>\n<p><img src=\"/images/kaggle_final/newplot11.png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#data processing</span></span><br><span class=\"line\">df21Age_Ea = df21_Ea.loc[:,[<span class=\"string\">&#x27;Q3&#x27;</span>,<span class=\"string\">&#x27;Q1&#x27;</span>]].reset_index().rename(columns=&#123;<span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;East_Asia&#x27;</span>, <span class=\"string\">&#x27;Q1&#x27;</span>:<span class=\"string\">&#x27;2021&#x27;</span>&#125;).fillna(<span class=\"string\">&#x27;etc&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">df21Age_Ea=(df21Age_Ea.replace([<span class=\"string\">&#x27;60-69&#x27;</span>, <span class=\"string\">&#x27;70+&#x27;</span>, <span class=\"string\">&#x27;70-79&#x27;</span>, <span class=\"string\">&#x27;80+&#x27;</span>], <span class=\"string\">&#x27;60+&#x27;</span>)</span><br><span class=\"line\">           .replace([<span class=\"string\">&#x27;22-24&#x27;</span>, <span class=\"string\">&#x27;25-29&#x27;</span>], <span class=\"string\">&#x27;22-29&#x27;</span>)</span><br><span class=\"line\">           .replace([<span class=\"string\">&#x27;30-34&#x27;</span>, <span class=\"string\">&#x27;35-39&#x27;</span>], <span class=\"string\">&#x27;30-39&#x27;</span>)</span><br><span class=\"line\">            .replace([<span class=\"string\">&#x27;40-44&#x27;</span>, <span class=\"string\">&#x27;45-49&#x27;</span>], <span class=\"string\">&#x27;40-49&#x27;</span>)</span><br><span class=\"line\">        .replace([<span class=\"string\">&#x27;50-54&#x27;</span>, <span class=\"string\">&#x27;55-59&#x27;</span>], <span class=\"string\">&#x27;50-59&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 연령-지역 %</span></span><br><span class=\"line\">dfKo_Age21= df21Age_Ea[df21Age_Ea[<span class=\"string\">&#x27;East_Asia&#x27;</span>]==<span class=\"string\">&#x27;South Korea&#x27;</span>]</span><br><span class=\"line\">dfKo_Age21_per=dfKo_Age21[<span class=\"string\">&#x27;2021&#x27;</span>].value_counts().to_frame().reset_index()</span><br><span class=\"line\">dfKo_Age21_per[<span class=\"string\">&#x27;South Korea&#x27;</span>]=((dfKo_Age21_per[<span class=\"string\">&#x27;2021&#x27;</span>] / <span class=\"built_in\">len</span>(dfKo_Age21))*<span class=\"number\">100</span>).<span class=\"built_in\">round</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">dfTw_Age21= df21Age_Ea[df21Age_Ea[<span class=\"string\">&#x27;East_Asia&#x27;</span>]==<span class=\"string\">&#x27;Taiwan&#x27;</span>]</span><br><span class=\"line\">dfTw_Age21_per=dfTw_Age21[<span class=\"string\">&#x27;2021&#x27;</span>].value_counts().to_frame().reset_index()</span><br><span class=\"line\">dfTw_Age21_per[<span class=\"string\">&#x27;Taiwan&#x27;</span>]=((dfTw_Age21_per[<span class=\"string\">&#x27;2021&#x27;</span>] / <span class=\"built_in\">len</span>(dfTw_Age21))*<span class=\"number\">100</span>).<span class=\"built_in\">round</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\">dfTw_Age21_per</span><br><span class=\"line\"></span><br><span class=\"line\">dfCh_Age21= df21Age_Ea[df21Age_Ea[<span class=\"string\">&#x27;East_Asia&#x27;</span>]==<span class=\"string\">&#x27;China&#x27;</span>]</span><br><span class=\"line\">dfCh_Age21_per=dfCh_Age21[<span class=\"string\">&#x27;2021&#x27;</span>].value_counts().to_frame().reset_index()</span><br><span class=\"line\">dfCh_Age21_per[<span class=\"string\">&#x27;China&#x27;</span>]=((dfCh_Age21_per[<span class=\"string\">&#x27;2021&#x27;</span>] / <span class=\"built_in\">len</span>(dfCh_Age21))*<span class=\"number\">100</span>).<span class=\"built_in\">round</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\">dfCh_Age21_per</span><br><span class=\"line\"></span><br><span class=\"line\">df21Age_Ea.head()</span><br><span class=\"line\">dfJp_Age21= df21Age_Ea[df21Age_Ea[<span class=\"string\">&#x27;East_Asia&#x27;</span>]==<span class=\"string\">&#x27;Japan&#x27;</span>]</span><br><span class=\"line\">dfJp_Age21_per=dfJp_Age21[<span class=\"string\">&#x27;2021&#x27;</span>].value_counts().to_frame().reset_index()</span><br><span class=\"line\">dfJp_Age21_per[<span class=\"string\">&#x27;Japan&#x27;</span>]=((dfJp_Age21_per[<span class=\"string\">&#x27;2021&#x27;</span>] / <span class=\"built_in\">len</span>(dfJp_Age21))*<span class=\"number\">100</span>).<span class=\"built_in\">round</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\">dfJp_Age21_per</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">merge1= pd.merge(dfKo_Age21_per,dfTw_Age21_per, on=<span class=\"string\">&#x27;index&#x27;</span>, how=<span class=\"string\">&#x27;outer&#x27;</span>)</span><br><span class=\"line\">merge2= pd.merge(dfCh_Age21_per,dfJp_Age21_per, on=<span class=\"string\">&#x27;index&#x27;</span>, how=<span class=\"string\">&#x27;outer&#x27;</span>)</span><br><span class=\"line\">merge= pd.merge(merge1,merge2, on=<span class=\"string\">&#x27;index&#x27;</span>, how=<span class=\"string\">&#x27;outer&#x27;</span>).fillna(<span class=\"number\">0</span>).sort_values(by=[<span class=\"string\">&#x27;index&#x27;</span>],ascending=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#graph</span></span><br><span class=\"line\">x1=[<span class=\"string\">&#x27;South Korea&#x27;</span>,<span class=\"string\">&#x27;Taiwan&#x27;</span>,<span class=\"string\">&#x27;China&#x27;</span>,<span class=\"string\">&#x27;Japan&#x27;</span>]</span><br><span class=\"line\">y1=merge.sort_values(by=[<span class=\"string\">&#x27;index&#x27;</span>], ascending=<span class=\"literal\">True</span>)[<span class=\"string\">&#x27;index&#x27;</span>].tolist()</span><br><span class=\"line\">z1=merge.iloc[:,[<span class=\"number\">2</span>,<span class=\"number\">4</span>,<span class=\"number\">6</span>,<span class=\"number\">8</span>]].to_numpy()</span><br><span class=\"line\"></span><br><span class=\"line\">fig = go.Figure(data=go.Heatmap(</span><br><span class=\"line\">                   z=z1,</span><br><span class=\"line\">                   x=x1,</span><br><span class=\"line\">                   y=y1,</span><br><span class=\"line\">                   hoverongaps = <span class=\"literal\">True</span>,</span><br><span class=\"line\">                   opacity=<span class=\"number\">1.0</span>, xgap=<span class=\"number\">2.5</span>, ygap=<span class=\"number\">2.5</span>))</span><br><span class=\"line\">fig = ff.create_annotated_heatmap(z1, x = x1, y = y1, colorscale=<span class=\"string\">&#x27;sunset&#x27;</span>)</span><br><span class=\"line\">fig.update_layout(height=<span class=\"number\">500</span>, width=<span class=\"number\">600</span>,</span><br><span class=\"line\">                 title_text=<span class=\"string\">&quot;&lt;b&gt;East Asia Age (2021)&lt;/b&gt;&quot;</span>, title_font_size=<span class=\"number\">20</span>,</span><br><span class=\"line\">                 title_x=<span class=\"number\">0.5</span>)</span><br><span class=\"line\">fig.update_traces(hovertemplate=<span class=\"string\">&#x27;&lt;b&gt;Age&lt;/b&gt;: %&#123;y&#125;&lt;br&gt;&#x27;</span>+</span><br><span class=\"line\">                                <span class=\"string\">&#x27;&lt;b&gt;Country&lt;/b&gt;: %&#123;x&#125;&lt;br&gt;&#x27;</span>+</span><br><span class=\"line\">                                <span class=\"string\">&#x27;&lt;b&gt;Percent&lt;/b&gt;: %&#123;z&#125;%&#x27;</span>)</span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">14</span>),</span><br><span class=\"line\">                                    x=<span class=\"number\">0.8</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.2</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;@green_yhjw&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>17’East Asia’s age ratio: Box plot</p>\n</blockquote>\n<blockquote>\n<p>2017: Data is not a section but an individual number.  <br><br>If you divide the interval, you can add it to the previous graph. <br><br>It was data that I could draw a bar plot, so I drew it. <br><br>You can see a 100-year-old in China, but they don’t remove missing values on purpose.</p>\n</blockquote>\n<p><img src=\"/images/kaggle_final/newplot12.png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 연도별 나이 </span></span><br><span class=\"line\">df21Age_Ea = df21_Ea.loc[:,[<span class=\"string\">&#x27;Q3&#x27;</span>,<span class=\"string\">&#x27;Q1&#x27;</span>]].reset_index().rename(columns=&#123;<span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;East_Asia&#x27;</span>, <span class=\"string\">&#x27;Q1&#x27;</span>:<span class=\"string\">&#x27;2021&#x27;</span>&#125;).fillna(<span class=\"string\">&#x27;etc&#x27;</span>)</span><br><span class=\"line\">df20Age_Ea = df20_Ea.loc[:,[<span class=\"string\">&#x27;Q3&#x27;</span>,<span class=\"string\">&#x27;Q1&#x27;</span>]].reset_index().rename(columns=&#123;<span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;East_Asia&#x27;</span>, <span class=\"string\">&#x27;Q1&#x27;</span>:<span class=\"string\">&#x27;2020&#x27;</span>&#125;).fillna(<span class=\"string\">&#x27;etc&#x27;</span>)</span><br><span class=\"line\">df19Age_Ea = df19_Ea.loc[:,[<span class=\"string\">&#x27;Q3&#x27;</span>,<span class=\"string\">&#x27;Q1&#x27;</span>]].reset_index().rename(columns=&#123;<span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;East_Asia&#x27;</span>, <span class=\"string\">&#x27;Q1&#x27;</span>:<span class=\"string\">&#x27;2019&#x27;</span>&#125;).fillna(<span class=\"string\">&#x27;etc&#x27;</span>)</span><br><span class=\"line\">df18Age_Ea = df18_Ea.loc[:,[<span class=\"string\">&#x27;Q3&#x27;</span>,<span class=\"string\">&#x27;Q2&#x27;</span>]].reset_index().rename(columns=&#123;<span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;East_Asia&#x27;</span>, <span class=\"string\">&#x27;Q2&#x27;</span>:<span class=\"string\">&#x27;2018&#x27;</span>&#125;).fillna(<span class=\"string\">&#x27;etc&#x27;</span>)</span><br><span class=\"line\">df17Age_Ea = df17_Ea.loc[:,[<span class=\"string\">&#x27;Country&#x27;</span>,<span class=\"string\">&#x27;Age&#x27;</span>]].reset_index().rename(columns=&#123;<span class=\"string\">&#x27;Country&#x27;</span>:<span class=\"string\">&#x27;East_Asia&#x27;</span>, <span class=\"string\">&#x27;Age&#x27;</span>:<span class=\"string\">&#x27;2017&#x27;</span>&#125;).fillna(<span class=\"string\">&#x27;etc&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#data frame 정리</span></span><br><span class=\"line\">dfAge21 =df21Age_Ea.groupby([<span class=\"string\">&#x27;East_Asia&#x27;</span>,<span class=\"string\">&#x27;2021&#x27;</span>]).size().reset_index().rename(columns = &#123;<span class=\"number\">0</span>:<span class=\"string\">&quot;Count&quot;</span>&#125;)</span><br><span class=\"line\">dfAge20 =df20Age_Ea.groupby([<span class=\"string\">&#x27;East_Asia&#x27;</span>,<span class=\"string\">&#x27;2020&#x27;</span>]).size().reset_index().rename(columns = &#123;<span class=\"number\">0</span>:<span class=\"string\">&quot;Count&quot;</span>&#125;)</span><br><span class=\"line\">dfAge19 =df19Age_Ea.groupby([<span class=\"string\">&#x27;East_Asia&#x27;</span>,<span class=\"string\">&#x27;2019&#x27;</span>]).size().reset_index().rename(columns = &#123;<span class=\"number\">0</span>:<span class=\"string\">&quot;Count&quot;</span>&#125;)</span><br><span class=\"line\">dfAge18 =df18Age_Ea.groupby([<span class=\"string\">&#x27;East_Asia&#x27;</span>,<span class=\"string\">&#x27;2018&#x27;</span>]).size().reset_index().rename(columns = &#123;<span class=\"number\">0</span>:<span class=\"string\">&quot;Count&quot;</span>&#125;)</span><br><span class=\"line\">dfAge17 =(df17Age_Ea.groupby([<span class=\"string\">&#x27;East_Asia&#x27;</span>,<span class=\"string\">&#x27;2017&#x27;</span>])</span><br><span class=\"line\">          .size().reset_index().rename(columns = &#123;<span class=\"number\">0</span>:<span class=\"string\">&quot;Count&quot;</span>&#125;))</span><br><span class=\"line\"><span class=\"comment\">#graph</span></span><br><span class=\"line\">fig = go.Figure()</span><br><span class=\"line\"></span><br><span class=\"line\">x = [<span class=\"string\">&#x27;China&#x27;</span>,<span class=\"string\">&#x27;Japan&#x27;</span>,<span class=\"string\">&#x27;South Korea&#x27;</span>,<span class=\"string\">&#x27;Taiwan&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_trace(go.Box( y=dfAge17[<span class=\"string\">&#x27;2017&#x27;</span>][dfAge17[<span class=\"string\">&#x27;East_Asia&#x27;</span>]==<span class=\"string\">&quot;Japan&quot;</span>].to_numpy(),</span><br><span class=\"line\">    name=<span class=\"string\">&#x27;Japan&#x27;</span>,</span><br><span class=\"line\">    marker=<span class=\"built_in\">dict</span>(color=<span class=\"string\">&#x27;#CDD9A3&#x27;</span>)))</span><br><span class=\"line\">fig.add_trace(go.Box(y=dfAge17[<span class=\"string\">&#x27;2017&#x27;</span>][dfAge17[<span class=\"string\">&#x27;East_Asia&#x27;</span>]==<span class=\"string\">&quot;China&quot;</span>].to_numpy(),</span><br><span class=\"line\">    name=<span class=\"string\">&#x27;China&#x27;</span>,</span><br><span class=\"line\">    marker=<span class=\"built_in\">dict</span>(color=<span class=\"string\">&#x27;#88BFBA&#x27;</span>)))</span><br><span class=\"line\">fig.add_trace(go.Box(y=dfAge17[<span class=\"string\">&#x27;2017&#x27;</span>][dfAge17[<span class=\"string\">&#x27;East_Asia&#x27;</span>]==<span class=\"string\">&quot;South Korea&quot;</span>].to_numpy(),</span><br><span class=\"line\">    name=<span class=\"string\">&#x27;South Korea&#x27;</span>,</span><br><span class=\"line\">    marker=<span class=\"built_in\">dict</span>(color=<span class=\"string\">&#x27;#F2798F&#x27;</span>)))</span><br><span class=\"line\">fig.add_trace(go.Box(y=dfAge17[<span class=\"string\">&#x27;2017&#x27;</span>][dfAge17[<span class=\"string\">&#x27;East_Asia&#x27;</span>]==<span class=\"string\">&quot;Taiwan&quot;</span>].to_numpy(),</span><br><span class=\"line\">    name=<span class=\"string\">&#x27;Taiwan&#x27;</span>,</span><br><span class=\"line\">    marker=<span class=\"built_in\">dict</span>(color=<span class=\"string\">&#x27;#F28705&#x27;</span></span><br><span class=\"line\">    ),))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(yaxis = <span class=\"built_in\">dict</span>(<span class=\"built_in\">range</span>=[<span class=\"number\">0</span>, <span class=\"number\">120</span>]))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(yaxis_range = (<span class=\"number\">0</span>, <span class=\"number\">110</span>), height=<span class=\"number\">600</span>, width=<span class=\"number\">700</span>,</span><br><span class=\"line\">                  title_text=<span class=\"string\">&quot;&lt;b&gt;Age in East Asia (2017)&lt;/b&gt;&quot;</span>, title_font_size=<span class=\"number\">20</span>,</span><br><span class=\"line\">                  margin = <span class=\"built_in\">dict</span>(t=<span class=\"number\">100</span>, l=<span class=\"number\">50</span>, r=<span class=\"number\">50</span>, b=<span class=\"number\">100</span>),</span><br><span class=\"line\">                  title_x=<span class=\"number\">0.5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_xaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\">fig.update_yaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\">fig.update_layout(legend=<span class=\"built_in\">dict</span>(</span><br><span class=\"line\">    orientation=<span class=\"string\">&quot;v&quot;</span>,</span><br><span class=\"line\">    yanchor=<span class=\"string\">&quot;bottom&quot;</span>,</span><br><span class=\"line\">    y=<span class=\"number\">0.8</span>,</span><br><span class=\"line\">    xanchor=<span class=\"string\">&quot;right&quot;</span>,</span><br><span class=\"line\">    x=<span class=\"number\">1</span>))</span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">14</span>),</span><br><span class=\"line\">                                    x=<span class=\"number\">0.8</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.2</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;@green_yhjw&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-1-5-Degree-transformation\"><a href=\"#3-1-5-Degree-transformation\" class=\"headerlink\" title=\"3.1.5 Degree transformation\"></a>3.1.5 Degree transformation</h1><hr>\n<h2> World job ratio in each country: pie plot </h2>\n\n<ul>\n<li>World: 90% or higher Bachelor’s degree</li>\n<li>East Asia: 85% bachelor’s degree or higher</li>\n</ul>\n<p><img src=\"/images/kaggle_final/newplot13.png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#data preprocessing</span></span><br><span class=\"line\">degree_wo = (df21[<span class=\"string\">&#x27;Q4&#x27;</span>]</span><br><span class=\"line\">             .replace([<span class=\"string\">&#x27;No formal education past high school&#x27;</span>,</span><br><span class=\"line\">                       <span class=\"string\">&#x27;Some college/university study without earning a bachelor’s degree&#x27;</span>],<span class=\"string\">&#x27;~college&#x27;</span>)</span><br><span class=\"line\">             .replace([<span class=\"string\">&#x27;Doctoral degree&#x27;</span>,</span><br><span class=\"line\">                       <span class=\"string\">&#x27;Professional doctorate&#x27;</span>],<span class=\"string\">&#x27;Doctoral degree~&#x27;</span>)</span><br><span class=\"line\">             .value_counts().to_frame())</span><br><span class=\"line\">degree_ea = (df21_Ea[<span class=\"string\">&#x27;Q4&#x27;</span>]</span><br><span class=\"line\">             .replace([<span class=\"string\">&#x27;No formal education past high school&#x27;</span>,</span><br><span class=\"line\">                       <span class=\"string\">&#x27;Some college/university study without earning a bachelor’s degree&#x27;</span>],<span class=\"string\">&#x27;~college&#x27;</span>)</span><br><span class=\"line\">             .replace([<span class=\"string\">&#x27;Doctoral degree&#x27;</span>,</span><br><span class=\"line\">                       <span class=\"string\">&#x27;Professional doctorate&#x27;</span>],<span class=\"string\">&#x27;Doctoral degree~&#x27;</span>)</span><br><span class=\"line\">             .value_counts().to_frame())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#graph</span></span><br><span class=\"line\">colors = [<span class=\"string\">&#x27;#F2798F&#x27;</span>,<span class=\"string\">&#x27;#88BFBA&#x27;</span>, <span class=\"string\">&#x27;#CDD9A3&#x27;</span>, <span class=\"string\">&#x27;#F28705&#x27;</span>, <span class=\"string\">&#x27;#D9946C&#x27;</span>]</span><br><span class=\"line\">fig = make_subplots(rows=<span class=\"number\">1</span>, cols=<span class=\"number\">2</span>, specs=[[&#123;<span class=\"string\">&#x27;type&#x27;</span>:<span class=\"string\">&#x27;pie&#x27;</span>&#125;, &#123;<span class=\"string\">&#x27;type&#x27;</span>:<span class=\"string\">&#x27;pie&#x27;</span>&#125;]], subplot_titles=(<span class=\"string\">&quot;World&quot;</span>, <span class=\"string\">&quot;East Asia&quot;</span>))</span><br><span class=\"line\">fig.add_trace(go.Pie(marker=<span class=\"built_in\">dict</span>(colors=colors), labels=degree_wo.index, values=degree_wo[<span class=\"string\">&#x27;Q4&#x27;</span>].to_numpy(), name=<span class=\"string\">&quot;World&quot;</span>),</span><br><span class=\"line\">              <span class=\"number\">1</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">fig.add_trace(go.Pie(marker=<span class=\"built_in\">dict</span>(colors=colors), labels=degree_ea.index, values=degree_ea[<span class=\"string\">&#x27;Q4&#x27;</span>].to_numpy(), name=<span class=\"string\">&quot;East Asia&quot;</span>),</span><br><span class=\"line\">              <span class=\"number\">1</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_traces(hole=<span class=\"number\">.0</span>, hoverinfo=<span class=\"string\">&quot;label+percent+name&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(title=<span class=\"string\">&#x27;&lt;b&gt;World vs East Asia&lt;/b&gt;&#x27;</span>,title_font_size=<span class=\"number\">22</span>,</span><br><span class=\"line\">                  margin = <span class=\"built_in\">dict</span>(t=<span class=\"number\">200</span>, l=<span class=\"number\">30</span>, r=<span class=\"number\">0</span>, b=<span class=\"number\">200</span>),</span><br><span class=\"line\">                  height=<span class=\"number\">700</span>, width=<span class=\"number\">700</span>)</span><br><span class=\"line\">fig.update_layout(legend=<span class=\"built_in\">dict</span>(</span><br><span class=\"line\">    orientation=<span class=\"string\">&quot;h&quot;</span>,</span><br><span class=\"line\">    yanchor=<span class=\"string\">&quot;bottom&quot;</span>,</span><br><span class=\"line\">    y=<span class=\"number\">1.1</span>,</span><br><span class=\"line\">    xanchor=<span class=\"string\">&quot;right&quot;</span>,</span><br><span class=\"line\">    x=<span class=\"number\">1.0</span>))</span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">14</span>),</span><br><span class=\"line\">                                    x=<span class=\"number\">0.8</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.5</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;@green_yhjw&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\">fig.show()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2> Percentage of East Asia degrees by year: sunburst plot </h2>\n\n<p>The highest percentage of respondents with <strong>master’s degrees</strong> per year</p>\n<p><img src=\"/images/kaggle_final/newplot14.png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#data preprocessing</span></span><br><span class=\"line\">df21_Ea_degree=(df21_Ea[<span class=\"string\">&#x27;Q4&#x27;</span>].replace([<span class=\"string\">&#x27;No formal education past high school&#x27;</span>, <span class=\"string\">&#x27;Some college/university study without earning a bachelor’s degree&#x27;</span>],<span class=\"string\">&#x27;~college&#x27;</span>)</span><br><span class=\"line\">                             .replace([<span class=\"string\">&#x27;Doctoral degree&#x27;</span>,<span class=\"string\">&#x27;Professional doctorate&#x27;</span>],<span class=\"string\">&#x27;Doctoral degree~&#x27;</span>)</span><br><span class=\"line\">                             .value_counts().to_frame().rename(columns=&#123;<span class=\"string\">&#x27;Q4&#x27;</span>:<span class=\"string\">&#x27;2021&#x27;</span>&#125;))</span><br><span class=\"line\">df20_Ea_degree=(df20_Ea[<span class=\"string\">&#x27;Q4&#x27;</span>].replace([<span class=\"string\">&#x27;No formal education past high school&#x27;</span>, <span class=\"string\">&#x27;Some college/university study without earning a bachelor’s degree&#x27;</span>],<span class=\"string\">&#x27;~college&#x27;</span>)</span><br><span class=\"line\">                             .replace([<span class=\"string\">&#x27;Doctoral degree&#x27;</span>, <span class=\"string\">&#x27;Professional degree&#x27;</span>],<span class=\"string\">&#x27;Doctoral degree~&#x27;</span>)</span><br><span class=\"line\">                             .value_counts().to_frame().rename(columns=&#123;<span class=\"string\">&#x27;Q4&#x27;</span>:<span class=\"string\">&#x27;2020&#x27;</span>&#125;))</span><br><span class=\"line\">df19_Ea_degree=(df19_Ea[<span class=\"string\">&#x27;Q4&#x27;</span>].replace([<span class=\"string\">&#x27;No formal education past high school&#x27;</span>,<span class=\"string\">&#x27;Some college/university study without earning a bachelor’s degree&#x27;</span>],<span class=\"string\">&#x27;~college&#x27;</span>)</span><br><span class=\"line\">                             .replace([<span class=\"string\">&#x27;Doctoral degree&#x27;</span>, <span class=\"string\">&#x27;Professional degree&#x27;</span>],<span class=\"string\">&#x27;Doctoral degree~&#x27;</span>)</span><br><span class=\"line\">                             .value_counts().to_frame().rename(columns=&#123;<span class=\"string\">&#x27;Q4&#x27;</span>:<span class=\"string\">&#x27;2019&#x27;</span>&#125;))</span><br><span class=\"line\">df18_Ea_degree=(df18_Ea[<span class=\"string\">&#x27;Q4&#x27;</span>].replace([<span class=\"string\">&#x27;No formal education past high school&#x27;</span>, <span class=\"string\">&#x27;Some college/university study without earning a bachelor’s degree&#x27;</span>],<span class=\"string\">&#x27;~college&#x27;</span>)</span><br><span class=\"line\">                             .replace([<span class=\"string\">&#x27;Doctoral degree&#x27;</span>, <span class=\"string\">&#x27;Professional degree&#x27;</span>],<span class=\"string\">&#x27;Doctoral degree~&#x27;</span>)</span><br><span class=\"line\">                             .value_counts().to_frame().rename(columns=&#123;<span class=\"string\">&#x27;Q4&#x27;</span>:<span class=\"string\">&#x27;2018&#x27;</span>&#125;))</span><br><span class=\"line\">df17_Ea_degree=(df17_Ea[<span class=\"string\">&#x27;FormalEducation&#x27;</span>]</span><br><span class=\"line\">                .replace([<span class=\"string\">&#x27;No formal education past high school&#x27;</span>, <span class=\"string\">&#x27;Some college/university study without earning a bachelor’s degree&#x27;</span>],<span class=\"string\">&#x27;~college&#x27;</span>)</span><br><span class=\"line\">                .replace([<span class=\"string\">&#x27;Doctoral degree&#x27;</span>, <span class=\"string\">&#x27;Professional degree&#x27;</span>],<span class=\"string\">&#x27;Doctoral degree~&#x27;</span>)</span><br><span class=\"line\">                .value_counts().to_frame()</span><br><span class=\"line\">                .rename(columns=&#123;<span class=\"string\">&#x27;FormalEducation&#x27;</span>:<span class=\"string\">&#x27;2017&#x27;</span>&#125; ,index = &#123;<span class=\"string\">&#x27;I did not complete any formal education past high school&#x27;</span>:<span class=\"string\">&#x27;No formal education past high school&#x27;</span>,<span class=\"string\">&#x27;Master\\&#x27;s degree&#x27;</span>:<span class=\"string\">&#x27;Master’s degree&#x27;</span>,<span class=\"string\">&#x27;Bachelor\\&#x27;s degree&#x27;</span>:<span class=\"string\">&#x27;Bachelor’s degree&#x27;</span>,<span class=\"string\">&#x27;Some college/university study without earning a bachelor\\&#x27;s degree&#x27;</span>:<span class=\"string\">&#x27;Some college/university study without earning a bachelor’s degree&#x27;</span>&#125;)  )</span><br><span class=\"line\">                </span><br><span class=\"line\">concat1 = pd.concat([df21_Ea_degree,df20_Ea_degree],axis=<span class=\"number\">1</span>, join=<span class=\"string\">&#x27;outer&#x27;</span>)  </span><br><span class=\"line\">concat2 = pd.concat([df19_Ea_degree,df18_Ea_degree],axis=<span class=\"number\">1</span>, join=<span class=\"string\">&#x27;outer&#x27;</span>)  </span><br><span class=\"line\">concat3 = pd.concat([concat1,concat2],axis=<span class=\"number\">1</span>, join=<span class=\"string\">&#x27;outer&#x27;</span>) </span><br><span class=\"line\">df21_Ea_degree_yearly_=concat3.join(df17_Ea_degree).fillna(<span class=\"number\">0</span>).transpose() <span class=\"comment\">#.transpose() 행 열 바꾸기</span></span><br><span class=\"line\"></span><br><span class=\"line\">df21_Ea_degree_yearly=df21_Ea_degree_yearly_.stack().to_frame().reset_index().rename(columns=&#123;<span class=\"string\">&#x27;level_0&#x27;</span>:<span class=\"string\">&#x27;year&#x27;</span>,<span class=\"string\">&#x27;level_1&#x27;</span>:<span class=\"string\">&#x27;degree&#x27;</span>,<span class=\"number\">0</span>:<span class=\"string\">&#x27;value&#x27;</span>&#125;)</span><br><span class=\"line\">df21_Ea_degree_yearly</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#graph</span></span><br><span class=\"line\">fig = px.sunburst(df21_Ea_degree_yearly, path=[<span class=\"string\">&#x27;year&#x27;</span>,<span class=\"string\">&#x27;degree&#x27;</span>], values=df21_Ea_degree_yearly[<span class=\"string\">&#x27;value&#x27;</span>].tolist())</span><br><span class=\"line\">fig.update_layout( margin = <span class=\"built_in\">dict</span>(t=<span class=\"number\">10</span>, l=<span class=\"number\">10</span>, r=<span class=\"number\">10</span>, b=<span class=\"number\">10</span>),colorway=(<span class=\"string\">&quot;#F2798F&quot;</span>,<span class=\"string\">&quot;#88BFBA&quot;</span>,<span class=\"string\">&quot;#CDD9A3&quot;</span>,<span class=\"string\">&#x27;#F28705&#x27;</span>,<span class=\"string\">&#x27;#D9946C&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(title=<span class=\"string\">&#x27;&lt;b&gt;         Degree&lt;/b&gt;&#x27;</span>,title_font_size=<span class=\"number\">25</span>,</span><br><span class=\"line\">                  margin = <span class=\"built_in\">dict</span>(t=<span class=\"number\">100</span>, l=<span class=\"number\">100</span>, r=<span class=\"number\">50</span>, b=<span class=\"number\">100</span>),</span><br><span class=\"line\">                  height=<span class=\"number\">700</span>, width=<span class=\"number\">700</span>)</span><br><span class=\"line\">fig.update_traces(hovertemplate=<span class=\"string\">&#x27;&lt;b&gt;Name&lt;/b&gt;: %&#123;id&#125;&lt;br&gt;&#x27;</span>+</span><br><span class=\"line\">                                <span class=\"string\">&#x27;&lt;b&gt;Count&lt;/b&gt;: %&#123;value&#125;&lt;br&gt;&#x27;</span>+</span><br><span class=\"line\">                                <span class=\"string\">&#x27;&lt;b&gt;Parent&lt;/b&gt;: %&#123;parent&#125;&#x27;</span>) </span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">14</span>),</span><br><span class=\"line\">                                    x=<span class=\"number\">0.8</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.2</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;@green_yhjw&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n\n<h3> Plus we could see the advantages of Plotly in this graph. \n</h3>\n\n<p>Matplotlib draws a static graph, but Plotly can dynamically click and move, and it supports zooming out, zooming in, and downloading graphs.</p>\n<p>Because all of our graphs are made of plotly, the viewer can represent or remove items in the graph if desired.<br>   <strong>With a click</strong></p>\n<h2> East Asia Degree Ratio: Bar plot</h2>\n\n<p>40% of master’s degrees or higher, and respondents have a high educational background.</p>\n<ul>\n<li>China and Japan have similar trends to East Asia and the World. <br><br>  The number of people itself is large, so a representative trend seems to appear here. <br><br>  However, it is noteworthy that the two countries have the same tendency. <br></li>\n</ul>\n<ul>\n<li><p>Korea: It is the only country among the four countries with a high degree of education below Ph.D., bachelor’s degree, and junior college. Only masters are low.<br>  (Polarization of education?)</p>\n</li>\n<li><p>Taiwan: 1st place in master’s ratio (55%), 2nd place in Ph.D. or higher (13.8%).<br>  = The highest level of education.</p>\n</li>\n</ul>\n<p><img src=\"/images/kaggle_final/newplot15.png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#data preprocessing</span></span><br><span class=\"line\">df21Edu_Ea = df21_Ea.loc[:,[<span class=\"string\">&#x27;Q3&#x27;</span>,<span class=\"string\">&#x27;Q4&#x27;</span>]].reset_index().rename(columns=&#123;<span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;East_Asia&#x27;</span>, <span class=\"string\">&#x27;Q4&#x27;</span>:<span class=\"string\">&#x27;Dgree&#x27;</span>&#125;).fillna(<span class=\"string\">&#x27;etc&#x27;</span>)</span><br><span class=\"line\">df21Edu_Ea =(df21Edu_Ea.replace(&#123;<span class=\"string\">&#x27;I prefer not to answer&#x27;</span>:<span class=\"string\">&#x27;etc&#x27;</span>&#125;).replace([<span class=\"string\">&#x27;No formal education past high school&#x27;</span>,</span><br><span class=\"line\">                       <span class=\"string\">&#x27;Some college/university study without earning a bachelor’s degree&#x27;</span>],<span class=\"string\">&#x27;~college&#x27;</span>)</span><br><span class=\"line\">             .replace([<span class=\"string\">&#x27;Doctoral degree&#x27;</span>,</span><br><span class=\"line\">                       <span class=\"string\">&#x27;Professional doctorate&#x27;</span>],<span class=\"string\">&#x27;Doctoral degree~&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">df21Edu_Ea= (df21Edu_Ea</span><br><span class=\"line\">           .groupby([<span class=\"string\">&#x27;East_Asia&#x27;</span>, <span class=\"string\">&#x27;Dgree&#x27;</span>])</span><br><span class=\"line\">           .size()</span><br><span class=\"line\">           .reset_index()</span><br><span class=\"line\">           .rename(columns = &#123;<span class=\"number\">0</span>:<span class=\"string\">&quot;Count&quot;</span>&#125;))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 연령-지역 %</span></span><br><span class=\"line\">dfKo_Edu21= df21Edu_Ea[df21Edu_Ea[<span class=\"string\">&#x27;East_Asia&#x27;</span>]==<span class=\"string\">&#x27;South Korea&#x27;</span>]</span><br><span class=\"line\">dfKo_Edu21[<span class=\"string\">&#x27;%&#x27;</span>]=((dfKo_Edu21[<span class=\"string\">&#x27;Count&#x27;</span>] / dfKo_Edu21[<span class=\"string\">&#x27;Count&#x27;</span>].<span class=\"built_in\">sum</span>()*<span class=\"number\">100</span>)).<span class=\"built_in\">round</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\">dfKo_Edu21=dfKo_Edu21.sort_values(by=<span class=\"string\">&#x27;%&#x27;</span>, ascending=<span class=\"literal\">False</span>)</span><br><span class=\"line\">dfTw_Edu21= df21Edu_Ea[df21Edu_Ea[<span class=\"string\">&#x27;East_Asia&#x27;</span>]==<span class=\"string\">&#x27;Taiwan&#x27;</span>]</span><br><span class=\"line\">dfTw_Edu21[<span class=\"string\">&#x27;%&#x27;</span>]=((dfTw_Edu21[<span class=\"string\">&#x27;Count&#x27;</span>] / dfTw_Edu21[<span class=\"string\">&#x27;Count&#x27;</span>].<span class=\"built_in\">sum</span>())*<span class=\"number\">100</span>).<span class=\"built_in\">round</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\">dfTw_Edu21=dfTw_Edu21.sort_values(by=<span class=\"string\">&#x27;%&#x27;</span>, ascending=<span class=\"literal\">False</span>)</span><br><span class=\"line\">dfCh_Edu21= df21Edu_Ea[df21Edu_Ea[<span class=\"string\">&#x27;East_Asia&#x27;</span>]==<span class=\"string\">&#x27;China&#x27;</span>]</span><br><span class=\"line\">dfCh_Edu21[<span class=\"string\">&#x27;%&#x27;</span>]=((dfCh_Edu21[<span class=\"string\">&#x27;Count&#x27;</span>] / dfCh_Edu21[<span class=\"string\">&#x27;Count&#x27;</span>].<span class=\"built_in\">sum</span>())*<span class=\"number\">100</span>).<span class=\"built_in\">round</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\">dfCh_Edu21=dfCh_Edu21.sort_values(by=<span class=\"string\">&#x27;%&#x27;</span>, ascending=<span class=\"literal\">False</span>)</span><br><span class=\"line\">dfJp_Edu21= df21Edu_Ea[df21Edu_Ea[<span class=\"string\">&#x27;East_Asia&#x27;</span>]==<span class=\"string\">&#x27;Japan&#x27;</span>]</span><br><span class=\"line\">dfJp_Edu21[<span class=\"string\">&#x27;%&#x27;</span>]=((dfJp_Edu21[<span class=\"string\">&#x27;Count&#x27;</span>] / dfJp_Edu21[<span class=\"string\">&#x27;Count&#x27;</span>].<span class=\"built_in\">sum</span>())*<span class=\"number\">100</span>).<span class=\"built_in\">round</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\">dfJp_Edu21=dfJp_Edu21.sort_values(by=<span class=\"string\">&#x27;%&#x27;</span>, ascending=<span class=\"literal\">False</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># #data 완성</span></span><br><span class=\"line\"><span class=\"comment\"># dfEdu_21_per = pd.concat([dfKo_Edu21, dfTw_Edu21, dfCh_Edu21, dfJp_Edu21], ignore_index = True)</span></span><br><span class=\"line\"><span class=\"comment\"># dfEdu_21_per= pd.pivot(dfEdu_21_per, index = &quot;Dgree&quot;, columns = &#x27;East_Asia&#x27;, values = &quot;%&quot;).reset_index()</span></span><br><span class=\"line\"><span class=\"comment\"># dfEdu_21_per</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#graph</span></span><br><span class=\"line\">fig = make_subplots(rows = <span class=\"number\">1</span>, cols = <span class=\"number\">4</span>, </span><br><span class=\"line\">                    shared_yaxes=<span class=\"literal\">True</span>, </span><br><span class=\"line\">                    vertical_spacing = <span class=\"number\">0.05</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_trace(go.Bar(x = dfCh_Edu21[<span class=\"string\">&#x27;Dgree&#x27;</span>], </span><br><span class=\"line\">                     y = dfCh_Edu21[<span class=\"string\">&#x27;%&#x27;</span>], </span><br><span class=\"line\">                     text = dfCh_Edu21[<span class=\"string\">&#x27;%&#x27;</span>].astype(<span class=\"built_in\">str</span>) + <span class=\"string\">&quot;%&quot;</span>, </span><br><span class=\"line\">                     textposition=<span class=\"string\">&#x27;outside&#x27;</span>,</span><br><span class=\"line\">                     name=<span class=\"string\">&#x27;China&#x27;</span>,</span><br><span class=\"line\">                     marker_color=<span class=\"string\">&#x27;#88BFBA&#x27;</span>), </span><br><span class=\"line\">                     row = <span class=\"number\">1</span>, col = <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_trace(go.Bar(x = dfJp_Edu21[<span class=\"string\">&#x27;Dgree&#x27;</span>], </span><br><span class=\"line\">                     y = dfJp_Edu21[<span class=\"string\">&#x27;%&#x27;</span>], </span><br><span class=\"line\">                     text = dfJp_Edu21[<span class=\"string\">&#x27;%&#x27;</span>].astype(<span class=\"built_in\">str</span>) + <span class=\"string\">&quot;%&quot;</span>, </span><br><span class=\"line\">                     textposition=<span class=\"string\">&#x27;outside&#x27;</span>,</span><br><span class=\"line\">                     name=<span class=\"string\">&#x27;Japan&#x27;</span>,</span><br><span class=\"line\">                     marker_color=<span class=\"string\">&#x27;#CDD9A3&#x27;</span>), </span><br><span class=\"line\">                      row = <span class=\"number\">1</span>, col = <span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_trace(go.Bar(x = dfKo_Edu21[<span class=\"string\">&#x27;Dgree&#x27;</span>], </span><br><span class=\"line\">                     y = dfKo_Edu21[<span class=\"string\">&#x27;%&#x27;</span>], </span><br><span class=\"line\">                     text = dfKo_Edu21[<span class=\"string\">&#x27;%&#x27;</span>].astype(<span class=\"built_in\">str</span>) + <span class=\"string\">&quot;%&quot;</span>, </span><br><span class=\"line\">                     textposition=<span class=\"string\">&#x27;outside&#x27;</span>,</span><br><span class=\"line\">                     name=<span class=\"string\">&#x27;South Korea&#x27;</span>,</span><br><span class=\"line\">                     marker_color=<span class=\"string\">&#x27;#F28705&#x27;</span>), </span><br><span class=\"line\">                      row = <span class=\"number\">1</span>, col = <span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_trace(go.Bar(x = dfTw_Edu21[<span class=\"string\">&#x27;Dgree&#x27;</span>], </span><br><span class=\"line\">                     y = dfTw_Edu21[<span class=\"string\">&#x27;%&#x27;</span>], </span><br><span class=\"line\">                     text = dfTw_Edu21[<span class=\"string\">&#x27;%&#x27;</span>].astype(<span class=\"built_in\">str</span>) + <span class=\"string\">&quot;%&quot;</span>, </span><br><span class=\"line\">                     textposition=<span class=\"string\">&#x27;outside&#x27;</span>,</span><br><span class=\"line\">                     name=<span class=\"string\">&#x27;Taiwan&#x27;</span>,</span><br><span class=\"line\">                     marker_color=<span class=\"string\">&#x27;#D9946C&#x27;</span>), </span><br><span class=\"line\">                     row = <span class=\"number\">1</span>, col = <span class=\"number\">4</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(showlegend=<span class=\"literal\">True</span>,title=<span class=\"string\">&#x27;&lt;b&gt;Degree in East Asia&lt;/b&gt;&#x27;</span>,title_font_size=<span class=\"number\">22</span>,</span><br><span class=\"line\">                  margin = <span class=\"built_in\">dict</span>(t=<span class=\"number\">200</span>, l=<span class=\"number\">100</span>, r=<span class=\"number\">50</span>, b=<span class=\"number\">200</span>),</span><br><span class=\"line\">                  height=<span class=\"number\">700</span>, width=<span class=\"number\">700</span>)</span><br><span class=\"line\">fig.update_traces(hovertemplate=<span class=\"string\">&#x27;&lt;b&gt;Percent&lt;/b&gt;: %&#123;y&#125;%&lt;br&gt;&#x27;</span>+</span><br><span class=\"line\">                                <span class=\"string\">&#x27;&lt;b&gt;Degree&lt;/b&gt;: %&#123;x&#125;&lt;br&gt;&#x27;</span>)</span><br><span class=\"line\">fig.update_xaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\">fig.update_yaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\">fig.update_layout(legend=<span class=\"built_in\">dict</span>(</span><br><span class=\"line\">    orientation=<span class=\"string\">&quot;h&quot;</span>,</span><br><span class=\"line\">    yanchor=<span class=\"string\">&quot;bottom&quot;</span>,</span><br><span class=\"line\">    y=<span class=\"number\">1.1</span>,</span><br><span class=\"line\">    xanchor=<span class=\"string\">&quot;right&quot;</span>,</span><br><span class=\"line\">    x=<span class=\"number\">1</span>))</span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">14</span>),</span><br><span class=\"line\">                                    x=<span class=\"number\">0.8</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.5</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;@green_yhjw&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-1-6-Experience-transformation\"><a href=\"#3-1-6-Experience-transformation\" class=\"headerlink\" title=\"3.1.6 Experience transformation\"></a>3.1.6 Experience transformation</h1><hr>\n<h2> Trends in World & East Asia Career: Stacked Scatter plot </h2>\n- < 2 years: 50% of the total. <br>\n- 3-5 years: Decrease in the world, maintain East Asia ratio <br>\n- 2021 'etc data' disappeared. <br>\n\n<p><img src=\"/images/kaggle_final/newplot16.png\"><br><img src=\"/images/kaggle_final/newplot17.png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#Exp data 전처리</span></span><br><span class=\"line\"><span class=\"comment\"># Exp 뽑아오기</span></span><br><span class=\"line\">Exp21_Wo = df21.loc[:,[<span class=\"string\">&#x27;Q3&#x27;</span>,<span class=\"string\">&#x27;Q6&#x27;</span>, <span class=\"string\">&#x27;year&#x27;</span>]].reset_index().rename(columns=&#123;<span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;Country&#x27;</span>, <span class=\"string\">&#x27;Q6&#x27;</span>:<span class=\"string\">&#x27;Exp&#x27;</span>&#125;).fillna(<span class=\"string\">&#x27;etc&#x27;</span>)</span><br><span class=\"line\">Exp20_Wo = df20.loc[:,[<span class=\"string\">&#x27;Q3&#x27;</span>,<span class=\"string\">&#x27;Q6&#x27;</span>,<span class=\"string\">&#x27;year&#x27;</span>]].reset_index().rename(columns=&#123;<span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;Country&#x27;</span>, <span class=\"string\">&#x27;Q6&#x27;</span>:<span class=\"string\">&#x27;Exp&#x27;</span>&#125;).fillna(<span class=\"string\">&#x27;etc&#x27;</span>)</span><br><span class=\"line\">Exp19_Wo = df19.loc[:,[<span class=\"string\">&#x27;Q3&#x27;</span>,<span class=\"string\">&#x27;Q15&#x27;</span>,<span class=\"string\">&#x27;year&#x27;</span>]].reset_index().rename(columns=&#123;<span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;Country&#x27;</span>, <span class=\"string\">&#x27;Q15&#x27;</span>:<span class=\"string\">&#x27;Exp&#x27;</span>&#125;).fillna(<span class=\"string\">&#x27;etc&#x27;</span>)</span><br><span class=\"line\">Exp18_Wo = df18.loc[:,[<span class=\"string\">&#x27;Q3&#x27;</span>,<span class=\"string\">&#x27;Q8&#x27;</span>,<span class=\"string\">&#x27;year&#x27;</span>]].reset_index().rename(columns=&#123;<span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;Country&#x27;</span>, <span class=\"string\">&#x27;Q8&#x27;</span>:<span class=\"string\">&#x27;Exp&#x27;</span>&#125;).fillna(<span class=\"string\">&#x27;etc&#x27;</span>)</span><br><span class=\"line\">Exp17_Wo = df17.loc[:,[<span class=\"string\">&#x27;Country&#x27;</span>,<span class=\"string\">&#x27;Tenure&#x27;</span>, <span class=\"string\">&#x27;year&#x27;</span>]].reset_index().rename(columns=&#123;<span class=\"string\">&#x27;Country&#x27;</span>:<span class=\"string\">&#x27;Country&#x27;</span>, <span class=\"string\">&#x27;Tenure&#x27;</span>:<span class=\"string\">&#x27;Exp&#x27;</span>&#125;).fillna(<span class=\"string\">&#x27;etc&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">Exp21_Wo= Exp21_Wo.replace(&#123;<span class=\"string\">&#x27;I have never written code&#x27;</span>: <span class=\"string\">&#x27;&lt; 1 years&#x27;</span>,  <span class=\"string\">&#x27;1-3 years&#x27;</span>: <span class=\"string\">&#x27;1-2 years&#x27;</span>&#125;).replace([<span class=\"string\">&#x27;10-20 years&#x27;</span>, <span class=\"string\">&#x27;20+ years&#x27;</span>], <span class=\"string\">&#x27;10+ years&#x27;</span> )</span><br><span class=\"line\">Exp20_Wo= Exp20_Wo.replace(&#123;<span class=\"string\">&#x27;I have never written code&#x27;</span>: <span class=\"string\">&#x27;&lt; 1 years&#x27;</span>&#125;).replace([<span class=\"string\">&#x27;10-20 years&#x27;</span>, <span class=\"string\">&#x27;20+ years&#x27;</span>], <span class=\"string\">&#x27;10+ years&#x27;</span> )</span><br><span class=\"line\">Exp19_Wo= Exp19_Wo.replace(&#123;<span class=\"string\">&#x27;I have never written code&#x27;</span>: <span class=\"string\">&#x27;&lt; 1 years&#x27;</span>&#125;).replace([<span class=\"string\">&#x27;10-20 years&#x27;</span>, <span class=\"string\">&#x27;20+ years&#x27;</span>], <span class=\"string\">&#x27;10+ years&#x27;</span> )</span><br><span class=\"line\">Exp18_Wo= (Exp18_Wo.replace(&#123;<span class=\"string\">&#x27;0-1&#x27;</span>: <span class=\"string\">&#x27;&lt; 1 years&#x27;</span>, <span class=\"string\">&#x27;1-2&#x27;</span>: <span class=\"string\">&#x27;1-2 years&#x27;</span>, <span class=\"string\">&#x27;5-10&#x27;</span>:<span class=\"string\">&#x27;5-10 years&#x27;</span>&#125;)</span><br><span class=\"line\">        .replace([<span class=\"string\">&#x27;2-3&#x27;</span>, <span class=\"string\">&#x27;3-4&#x27;</span>,  <span class=\"string\">&#x27;4-5&#x27;</span>],<span class=\"string\">&#x27;3-5 years&#x27;</span>)</span><br><span class=\"line\">       .replace([<span class=\"string\">&#x27;10-15&#x27;</span>, <span class=\"string\">&#x27;15-20&#x27;</span>,<span class=\"string\">&#x27;20-25&#x27;</span>, <span class=\"string\">&#x27;30 +&#x27;</span>,<span class=\"string\">&#x27;25-30&#x27;</span>],<span class=\"string\">&#x27;10+ years&#x27;</span>))</span><br><span class=\"line\">Exp17_Wo=(Exp17_Wo.replace(&#123;<span class=\"string\">&#x27;More than 10 years&#x27;</span>:<span class=\"string\">&#x27;10+ years&#x27;</span>, <span class=\"string\">&#x27;1 to 2 years&#x27;</span>:<span class=\"string\">&#x27;1-2 years&#x27;</span>,  <span class=\"string\">&#x27;Less than a year&#x27;</span>:<span class=\"string\">&#x27;&lt; 1 years&#x27;</span>,</span><br><span class=\"line\">       <span class=\"string\">&#x27;3 to 5 years&#x27;</span>:<span class=\"string\">&#x27;3-5 years&#x27;</span>, <span class=\"string\">&quot;I don&#x27;t write code to analyze data&quot;</span>:<span class=\"string\">&#x27;&lt; 1 years&#x27;</span>,</span><br><span class=\"line\">       <span class=\"string\">&#x27;6 to 10 years&#x27;</span>:<span class=\"string\">&#x27;5-10 years&#x27;</span>&#125;))</span><br><span class=\"line\">                                                                                                                   </span><br><span class=\"line\"><span class=\"comment\">#data 정제(한꺼번에 이름바꾸기)</span></span><br><span class=\"line\">Exp5y_Wo= pd.concat([Exp17_Wo, Exp18_Wo, Exp19_Wo, Exp20_Wo, Exp21_Wo]).reset_index()</span><br><span class=\"line\">Exp5y_Wo=(Exp5y_Wo.groupby([<span class=\"string\">&#x27;year&#x27;</span>, <span class=\"string\">&#x27;Exp&#x27;</span>])</span><br><span class=\"line\">           .size()</span><br><span class=\"line\">           .reset_index()</span><br><span class=\"line\">           .rename(columns = &#123;<span class=\"number\">0</span>:<span class=\"string\">&quot;Count&quot;</span>&#125;))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#percent data 넣기</span></span><br><span class=\"line\">Exp21_per_W= Exp5y_Wo[Exp5y_Wo[<span class=\"string\">&#x27;year&#x27;</span>] == <span class=\"string\">&quot;2021&quot;</span>].reset_index(drop = <span class=\"literal\">True</span>)</span><br><span class=\"line\">Exp21_per_W[<span class=\"string\">&#x27;percentage&#x27;</span>] = Exp21_per_W[<span class=\"string\">&quot;Count&quot;</span>] / Exp21_per_W[<span class=\"string\">&quot;Count&quot;</span>].<span class=\"built_in\">sum</span>()</span><br><span class=\"line\">Exp21_per_W[<span class=\"string\">&#x27;%&#x27;</span>] = np.<span class=\"built_in\">round</span>(Exp21_per_W[<span class=\"string\">&#x27;percentage&#x27;</span>] * <span class=\"number\">100</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">Exp20_per_W = Exp5y_Wo[Exp5y_Wo[<span class=\"string\">&#x27;year&#x27;</span>] == <span class=\"string\">&quot;2020&quot;</span>].reset_index(drop = <span class=\"literal\">True</span>)</span><br><span class=\"line\">Exp20_per_W[<span class=\"string\">&#x27;percentage&#x27;</span>] = Exp20_per_W[<span class=\"string\">&quot;Count&quot;</span>] / Exp20_per_W[<span class=\"string\">&quot;Count&quot;</span>].<span class=\"built_in\">sum</span>()</span><br><span class=\"line\">Exp20_per_W[<span class=\"string\">&#x27;%&#x27;</span>] = np.<span class=\"built_in\">round</span>(Exp20_per_W[<span class=\"string\">&#x27;percentage&#x27;</span>] * <span class=\"number\">100</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">Exp19_per_W = Exp5y_Wo[Exp5y_Wo[<span class=\"string\">&#x27;year&#x27;</span>] == <span class=\"string\">&quot;2019&quot;</span>].reset_index(drop = <span class=\"literal\">True</span>)</span><br><span class=\"line\">Exp19_per_W[<span class=\"string\">&#x27;percentage&#x27;</span>] = Exp19_per_W[<span class=\"string\">&quot;Count&quot;</span>] / Exp19_per_W[<span class=\"string\">&quot;Count&quot;</span>].<span class=\"built_in\">sum</span>()</span><br><span class=\"line\">Exp19_per_W[<span class=\"string\">&#x27;%&#x27;</span>] = np.<span class=\"built_in\">round</span>(Exp19_per_W[<span class=\"string\">&#x27;percentage&#x27;</span>] * <span class=\"number\">100</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">Exp18_per_W = Exp5y_Wo[Exp5y_Wo[<span class=\"string\">&#x27;year&#x27;</span>] == <span class=\"string\">&quot;2018&quot;</span>].reset_index(drop = <span class=\"literal\">True</span>)</span><br><span class=\"line\">Exp18_per_W[<span class=\"string\">&#x27;percentage&#x27;</span>] = Exp18_per_W[<span class=\"string\">&quot;Count&quot;</span>] / Exp18_per_W[<span class=\"string\">&quot;Count&quot;</span>].<span class=\"built_in\">sum</span>()</span><br><span class=\"line\">Exp18_per_W[<span class=\"string\">&#x27;%&#x27;</span>] = np.<span class=\"built_in\">round</span>(Exp18_per_W[<span class=\"string\">&#x27;percentage&#x27;</span>] * <span class=\"number\">100</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">Exp17_per_W = Exp5y_Wo[Exp5y_Wo[<span class=\"string\">&#x27;year&#x27;</span>] == <span class=\"string\">&quot;2017&quot;</span>].reset_index(drop = <span class=\"literal\">True</span>)</span><br><span class=\"line\">Exp17_per_W[<span class=\"string\">&#x27;percentage&#x27;</span>] = Exp17_per_W[<span class=\"string\">&quot;Count&quot;</span>] / Exp17_per_W[<span class=\"string\">&quot;Count&quot;</span>].<span class=\"built_in\">sum</span>()</span><br><span class=\"line\">Exp17_per_W[<span class=\"string\">&#x27;%&#x27;</span>] = np.<span class=\"built_in\">round</span>(Exp17_per_W[<span class=\"string\">&#x27;percentage&#x27;</span>] * <span class=\"number\">100</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#data 완성</span></span><br><span class=\"line\">Exp5y_per_W = pd.concat([Exp17_per_W, Exp18_per_W, Exp19_per_W, Exp20_per_W, Exp21_per_W], ignore_index = <span class=\"literal\">True</span>)</span><br><span class=\"line\">Exp5y_per_W= pd.pivot(Exp5y_per_W, index = <span class=\"string\">&quot;year&quot;</span>, columns = <span class=\"string\">&#x27;Exp&#x27;</span>, values = <span class=\"string\">&quot;%&quot;</span>).reset_index()</span><br><span class=\"line\">Exp5y_per_W.fillna(<span class=\"string\">&#x27;0&#x27;</span>)</span><br><span class=\"line\">Exp5y_percent_order = Exp5y_per_W[<span class=\"string\">&#x27;year&#x27;</span>].tolist()</span><br><span class=\"line\"></span><br><span class=\"line\">fig = go.Figure()</span><br><span class=\"line\">fig.add_trace(go.Scatter(</span><br><span class=\"line\">    x = Exp5y_percent_order, </span><br><span class=\"line\">    y = Exp5y_per_W[<span class=\"string\">&#x27;&lt; 1 years&#x27;</span>].tolist(), </span><br><span class=\"line\">    mode = <span class=\"string\">&quot;lines&quot;</span>, </span><br><span class=\"line\">    name = <span class=\"string\">&#x27;&lt; 1 years&#x27;</span>,</span><br><span class=\"line\">    line = <span class=\"built_in\">dict</span>(width = <span class=\"number\">0.5</span>),</span><br><span class=\"line\">    stackgroup = <span class=\"string\">&quot;one&quot;</span>,</span><br><span class=\"line\">    marker_color=<span class=\"string\">&#x27;#F2798F&#x27;</span>))</span><br><span class=\"line\">fig.add_trace(go.Scatter(</span><br><span class=\"line\">    x = Exp5y_percent_order, </span><br><span class=\"line\">    y = Exp5y_per_W[<span class=\"string\">&#x27;1-2 years&#x27;</span>].tolist(), </span><br><span class=\"line\">    mode = <span class=\"string\">&quot;lines&quot;</span>, </span><br><span class=\"line\">    name = <span class=\"string\">&#x27;1-2 years&#x27;</span>,</span><br><span class=\"line\">    line = <span class=\"built_in\">dict</span>(width = <span class=\"number\">0.5</span>),</span><br><span class=\"line\">    stackgroup = <span class=\"string\">&quot;one&quot;</span>,</span><br><span class=\"line\">    marker_color=<span class=\"string\">&#x27;#88BFBA&#x27;</span>))</span><br><span class=\"line\">fig.add_trace(go.Scatter(</span><br><span class=\"line\">    x = Exp5y_percent_order, </span><br><span class=\"line\">    y = Exp5y_per_W[<span class=\"string\">&#x27;3-5 years&#x27;</span>].tolist(), </span><br><span class=\"line\">    mode = <span class=\"string\">&quot;lines&quot;</span>, </span><br><span class=\"line\">    name = <span class=\"string\">&#x27;3-5 years&#x27;</span>,</span><br><span class=\"line\">    line = <span class=\"built_in\">dict</span>(width = <span class=\"number\">0.5</span>),</span><br><span class=\"line\">    stackgroup = <span class=\"string\">&quot;one&quot;</span>,</span><br><span class=\"line\">    marker_color=<span class=\"string\">&#x27;#CDD9A3&#x27;</span>))</span><br><span class=\"line\">fig.add_trace(go.Scatter(</span><br><span class=\"line\">    x = Exp5y_percent_order, </span><br><span class=\"line\">    y = Exp5y_per_W[<span class=\"string\">&#x27;5-10 years&#x27;</span>].tolist(), </span><br><span class=\"line\">    mode = <span class=\"string\">&quot;lines&quot;</span>, </span><br><span class=\"line\">    name = <span class=\"string\">&#x27;5-10 years&#x27;</span>,</span><br><span class=\"line\">    line = <span class=\"built_in\">dict</span>(width = <span class=\"number\">0.5</span>),</span><br><span class=\"line\">    stackgroup = <span class=\"string\">&quot;one&quot;</span>,</span><br><span class=\"line\">    marker_color=<span class=\"string\">&#x27;#F28705&#x27;</span>))</span><br><span class=\"line\">fig.add_trace(go.Scatter(</span><br><span class=\"line\">    x = Exp5y_percent_order, </span><br><span class=\"line\">    y = Exp5y_per_W[<span class=\"string\">&#x27;10+ years&#x27;</span>].tolist(), </span><br><span class=\"line\">    mode = <span class=\"string\">&quot;lines&quot;</span>, </span><br><span class=\"line\">    name = <span class=\"string\">&#x27;10+ years&#x27;</span>,</span><br><span class=\"line\">    line = <span class=\"built_in\">dict</span>(width = <span class=\"number\">0.5</span>),</span><br><span class=\"line\">    stackgroup = <span class=\"string\">&quot;one&quot;</span>,</span><br><span class=\"line\">    marker_color=<span class=\"string\">&#x27;#D9946C&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_trace(go.Scatter(</span><br><span class=\"line\">    x = Exp5y_percent_order, </span><br><span class=\"line\">    y = Exp5y_per_W[<span class=\"string\">&#x27;etc&#x27;</span>].tolist(), </span><br><span class=\"line\">    mode = <span class=\"string\">&quot;lines&quot;</span>, </span><br><span class=\"line\">    name = <span class=\"string\">&#x27;etc&#x27;</span>,</span><br><span class=\"line\">    line = <span class=\"built_in\">dict</span>(width = <span class=\"number\">1</span>),</span><br><span class=\"line\">    stackgroup = <span class=\"string\">&quot;one&quot;</span>,</span><br><span class=\"line\">    marker_color=<span class=\"string\">&#x27;#F2D64B&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_traces(hovertemplate=<span class=\"string\">&#x27;&lt;b&gt;Percent&lt;/b&gt;: %&#123;y&#125;%&lt;br&gt;&#x27;</span>)</span><br><span class=\"line\">fig.update_layout(yaxis_range = (<span class=\"number\">0</span>, <span class=\"number\">100</span>), title_font_size=<span class=\"number\">20</span>,</span><br><span class=\"line\">                  title_text=<span class=\"string\">&quot;&lt;b&gt;Experience in world&lt;/b&gt;&quot;</span>,</span><br><span class=\"line\">                  height=<span class=\"number\">500</span>, width=<span class=\"number\">700</span>,</span><br><span class=\"line\">                  title_x=<span class=\"number\">0.5</span>)</span><br><span class=\"line\">fig.update_xaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\">fig.update_yaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">14</span>),</span><br><span class=\"line\">                                    x=<span class=\"number\">0.8</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.2</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;@green_yhjw&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\">fig.show()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#data preprocessing</span></span><br><span class=\"line\">Exp21 = df21_Ea.loc[:,[<span class=\"string\">&#x27;Q3&#x27;</span>,<span class=\"string\">&#x27;Q6&#x27;</span>, <span class=\"string\">&#x27;year&#x27;</span>]].reset_index().rename(columns=&#123;<span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;East_Asia&#x27;</span>, <span class=\"string\">&#x27;Q6&#x27;</span>:<span class=\"string\">&#x27;Exp&#x27;</span>&#125;).fillna(<span class=\"string\">&#x27;etc&#x27;</span>)</span><br><span class=\"line\">Exp20 = df20_Ea.loc[:,[<span class=\"string\">&#x27;Q3&#x27;</span>,<span class=\"string\">&#x27;Q6&#x27;</span>,<span class=\"string\">&#x27;year&#x27;</span>]].reset_index().rename(columns=&#123;<span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;East_Asia&#x27;</span>, <span class=\"string\">&#x27;Q6&#x27;</span>:<span class=\"string\">&#x27;Exp&#x27;</span>&#125;).fillna(<span class=\"string\">&#x27;etc&#x27;</span>)</span><br><span class=\"line\">Exp19 = df19_Ea.loc[:,[<span class=\"string\">&#x27;Q3&#x27;</span>,<span class=\"string\">&#x27;Q15&#x27;</span>,<span class=\"string\">&#x27;year&#x27;</span>]].reset_index().rename(columns=&#123;<span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;East_Asia&#x27;</span>, <span class=\"string\">&#x27;Q15&#x27;</span>:<span class=\"string\">&#x27;Exp&#x27;</span>&#125;).fillna(<span class=\"string\">&#x27;etc&#x27;</span>)</span><br><span class=\"line\">Exp18 = df18_Ea.loc[:,[<span class=\"string\">&#x27;Q3&#x27;</span>,<span class=\"string\">&#x27;Q8&#x27;</span>,<span class=\"string\">&#x27;year&#x27;</span>]].reset_index().rename(columns=&#123;<span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;East_Asia&#x27;</span>, <span class=\"string\">&#x27;Q8&#x27;</span>:<span class=\"string\">&#x27;Exp&#x27;</span>&#125;).fillna(<span class=\"string\">&#x27;etc&#x27;</span>)</span><br><span class=\"line\">Exp17 = df17_Ea.loc[:,[<span class=\"string\">&#x27;Country&#x27;</span>,<span class=\"string\">&#x27;Tenure&#x27;</span>, <span class=\"string\">&#x27;year&#x27;</span>]].reset_index().rename(columns=&#123;<span class=\"string\">&#x27;Country&#x27;</span>:<span class=\"string\">&#x27;East_Asia&#x27;</span>, <span class=\"string\">&#x27;Tenure&#x27;</span>:<span class=\"string\">&#x27;Exp&#x27;</span>&#125;).fillna(<span class=\"string\">&#x27;etc&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">Exp21Uni=[<span class=\"string\">&#x27;3-5 years&#x27;</span>, <span class=\"string\">&#x27;&lt; 1 years&#x27;</span>, <span class=\"string\">&#x27;1-3 years&#x27;</span>, <span class=\"string\">&#x27;10-20 years&#x27;</span>,</span><br><span class=\"line\">       <span class=\"string\">&#x27;I have never written code&#x27;</span>, <span class=\"string\">&#x27;5-10 years&#x27;</span>, <span class=\"string\">&#x27;20+ years&#x27;</span>]</span><br><span class=\"line\">Exp20Uni= [<span class=\"string\">&#x27;3-5 years&#x27;</span>, <span class=\"string\">&#x27;&lt; 1 years&#x27;</span>, <span class=\"string\">&#x27;5-10 years&#x27;</span>, <span class=\"string\">&#x27;1-2 years&#x27;</span>, <span class=\"string\">&#x27;etc&#x27;</span>,</span><br><span class=\"line\">       <span class=\"string\">&#x27;20+ years&#x27;</span>, <span class=\"string\">&#x27;10-20 years&#x27;</span>, <span class=\"string\">&#x27;I have never written code&#x27;</span>]</span><br><span class=\"line\">Exp19Uni=[<span class=\"string\">&#x27;1-2 years&#x27;</span>, <span class=\"string\">&#x27;5-10 years&#x27;</span>, <span class=\"string\">&#x27;&lt; 1 years&#x27;</span>,</span><br><span class=\"line\">       <span class=\"string\">&#x27;I have never written code&#x27;</span>, <span class=\"string\">&#x27;3-5 years&#x27;</span>, <span class=\"string\">&#x27;10-20 years&#x27;</span>,</span><br><span class=\"line\">       <span class=\"string\">&#x27;20+ years&#x27;</span>, <span class=\"string\">&#x27;etc&#x27;</span>]</span><br><span class=\"line\">Exp18Uni=[<span class=\"string\">&#x27;0-1&#x27;</span>, <span class=\"string\">&#x27;2-3&#x27;</span>, <span class=\"string\">&#x27;1-2&#x27;</span>, <span class=\"string\">&#x27;5-10&#x27;</span>, <span class=\"string\">&#x27;3-4&#x27;</span>, <span class=\"string\">&#x27;10-15&#x27;</span>, <span class=\"string\">&#x27;15-20&#x27;</span>, <span class=\"string\">&#x27;4-5&#x27;</span>,</span><br><span class=\"line\">       <span class=\"string\">&#x27;20-25&#x27;</span>, <span class=\"string\">&#x27;30 +&#x27;</span>, <span class=\"string\">&#x27;etc&#x27;</span>, <span class=\"string\">&#x27;25-30&#x27;</span>]</span><br><span class=\"line\">Exp17Uni=[<span class=\"string\">&#x27;More than 10 years&#x27;</span>, <span class=\"string\">&#x27;1 to 2 years&#x27;</span>, <span class=\"string\">&#x27;etc&#x27;</span>, <span class=\"string\">&#x27;Less than a year&#x27;</span>,</span><br><span class=\"line\">       <span class=\"string\">&#x27;3 to 5 years&#x27;</span>, <span class=\"string\">&quot;I don&#x27;t write code to analyze data&quot;</span>,</span><br><span class=\"line\">       <span class=\"string\">&#x27;6 to 10 years&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">Exp21= Exp21.replace(&#123;<span class=\"string\">&#x27;I have never written code&#x27;</span>: <span class=\"string\">&#x27;&lt; 1 years&#x27;</span>,  <span class=\"string\">&#x27;1-3 years&#x27;</span>: <span class=\"string\">&#x27;1-2 years&#x27;</span>&#125;).replace([<span class=\"string\">&#x27;10-20 years&#x27;</span>, <span class=\"string\">&#x27;20+ years&#x27;</span>], <span class=\"string\">&#x27;10+ years&#x27;</span> )</span><br><span class=\"line\">Exp20= Exp20.replace(&#123;<span class=\"string\">&#x27;I have never written code&#x27;</span>: <span class=\"string\">&#x27;&lt; 1 years&#x27;</span>&#125;).replace([<span class=\"string\">&#x27;10-20 years&#x27;</span>, <span class=\"string\">&#x27;20+ years&#x27;</span>], <span class=\"string\">&#x27;10+ years&#x27;</span> )</span><br><span class=\"line\">Exp19= Exp19.replace(&#123;<span class=\"string\">&#x27;I have never written code&#x27;</span>: <span class=\"string\">&#x27;&lt; 1 years&#x27;</span>&#125;).replace([<span class=\"string\">&#x27;10-20 years&#x27;</span>, <span class=\"string\">&#x27;20+ years&#x27;</span>], <span class=\"string\">&#x27;10+ years&#x27;</span> )</span><br><span class=\"line\">Exp18= (Exp18.replace(&#123;<span class=\"string\">&#x27;0-1&#x27;</span>: <span class=\"string\">&#x27;&lt; 1 years&#x27;</span>, <span class=\"string\">&#x27;1-2&#x27;</span>: <span class=\"string\">&#x27;1-2 years&#x27;</span>, <span class=\"string\">&#x27;5-10&#x27;</span>:<span class=\"string\">&#x27;5-10 years&#x27;</span>&#125;)</span><br><span class=\"line\">        .replace([<span class=\"string\">&#x27;2-3&#x27;</span>, <span class=\"string\">&#x27;3-4&#x27;</span>,  <span class=\"string\">&#x27;4-5&#x27;</span>],<span class=\"string\">&#x27;3-5 years&#x27;</span>)</span><br><span class=\"line\">       .replace([<span class=\"string\">&#x27;10-15&#x27;</span>, <span class=\"string\">&#x27;15-20&#x27;</span>,<span class=\"string\">&#x27;20-25&#x27;</span>, <span class=\"string\">&#x27;30 +&#x27;</span>,<span class=\"string\">&#x27;25-30&#x27;</span>],<span class=\"string\">&#x27;10+ years&#x27;</span>))</span><br><span class=\"line\">Exp17=(Exp17.replace(&#123;<span class=\"string\">&#x27;More than 10 years&#x27;</span>:<span class=\"string\">&#x27;10+ years&#x27;</span>, <span class=\"string\">&#x27;1 to 2 years&#x27;</span>:<span class=\"string\">&#x27;1-2 years&#x27;</span>,  <span class=\"string\">&#x27;Less than a year&#x27;</span>:<span class=\"string\">&#x27;&lt; 1 years&#x27;</span>,</span><br><span class=\"line\">       <span class=\"string\">&#x27;3 to 5 years&#x27;</span>:<span class=\"string\">&#x27;3-5 years&#x27;</span>, <span class=\"string\">&quot;I don&#x27;t write code to analyze data&quot;</span>:<span class=\"string\">&#x27;&lt; 1 years&#x27;</span>,</span><br><span class=\"line\">       <span class=\"string\">&#x27;6 to 10 years&#x27;</span>:<span class=\"string\">&#x27;5-10 years&#x27;</span>&#125;))</span><br><span class=\"line\">                                                                                                                </span><br><span class=\"line\">Exp5y= pd.concat([Exp17, Exp18, Exp19, Exp20, Exp21]).reset_index()</span><br><span class=\"line\">Exp5y=(Exp5y.groupby([<span class=\"string\">&#x27;year&#x27;</span>, <span class=\"string\">&#x27;Exp&#x27;</span>])</span><br><span class=\"line\">           .size()</span><br><span class=\"line\">           .reset_index()</span><br><span class=\"line\">           .rename(columns = &#123;<span class=\"number\">0</span>:<span class=\"string\">&quot;Count&quot;</span>&#125;))</span><br><span class=\"line\"></span><br><span class=\"line\">Exp21_percent = Exp5y[Exp5y[<span class=\"string\">&#x27;year&#x27;</span>] == <span class=\"string\">&quot;2021&quot;</span>].reset_index(drop = <span class=\"literal\">True</span>)</span><br><span class=\"line\">Exp21_percent[<span class=\"string\">&#x27;percentage&#x27;</span>] = Exp21_percent[<span class=\"string\">&quot;Count&quot;</span>] / Exp21_percent[<span class=\"string\">&quot;Count&quot;</span>].<span class=\"built_in\">sum</span>()</span><br><span class=\"line\">Exp21_percent[<span class=\"string\">&#x27;%&#x27;</span>] = np.<span class=\"built_in\">round</span>(Exp21_percent[<span class=\"string\">&#x27;percentage&#x27;</span>] * <span class=\"number\">100</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">Exp21_percent</span><br><span class=\"line\"></span><br><span class=\"line\">Exp20_percent = Exp5y[Exp5y[<span class=\"string\">&#x27;year&#x27;</span>] == <span class=\"string\">&quot;2020&quot;</span>].reset_index(drop = <span class=\"literal\">True</span>)</span><br><span class=\"line\">Exp20_percent[<span class=\"string\">&#x27;percentage&#x27;</span>] = Exp20_percent[<span class=\"string\">&quot;Count&quot;</span>] / Exp20_percent[<span class=\"string\">&quot;Count&quot;</span>].<span class=\"built_in\">sum</span>()</span><br><span class=\"line\">Exp20_percent[<span class=\"string\">&#x27;%&#x27;</span>] = np.<span class=\"built_in\">round</span>(Exp20_percent[<span class=\"string\">&#x27;percentage&#x27;</span>] * <span class=\"number\">100</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">Exp20_percent</span><br><span class=\"line\"></span><br><span class=\"line\">Exp19_percent = Exp5y[Exp5y[<span class=\"string\">&#x27;year&#x27;</span>] == <span class=\"string\">&quot;2019&quot;</span>].reset_index(drop = <span class=\"literal\">True</span>)</span><br><span class=\"line\">Exp19_percent[<span class=\"string\">&#x27;percentage&#x27;</span>] = Exp19_percent[<span class=\"string\">&quot;Count&quot;</span>] / Exp19_percent[<span class=\"string\">&quot;Count&quot;</span>].<span class=\"built_in\">sum</span>()</span><br><span class=\"line\">Exp19_percent[<span class=\"string\">&#x27;%&#x27;</span>] = np.<span class=\"built_in\">round</span>(Exp19_percent[<span class=\"string\">&#x27;percentage&#x27;</span>] * <span class=\"number\">100</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">Exp19_percent</span><br><span class=\"line\"></span><br><span class=\"line\">Exp18_percent = Exp5y[Exp5y[<span class=\"string\">&#x27;year&#x27;</span>] == <span class=\"string\">&quot;2018&quot;</span>].reset_index(drop = <span class=\"literal\">True</span>)</span><br><span class=\"line\">Exp18_percent[<span class=\"string\">&#x27;percentage&#x27;</span>] = Exp18_percent[<span class=\"string\">&quot;Count&quot;</span>] / Exp18_percent[<span class=\"string\">&quot;Count&quot;</span>].<span class=\"built_in\">sum</span>()</span><br><span class=\"line\">Exp18_percent[<span class=\"string\">&#x27;%&#x27;</span>] = np.<span class=\"built_in\">round</span>(Exp18_percent[<span class=\"string\">&#x27;percentage&#x27;</span>] * <span class=\"number\">100</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">Exp18_percent</span><br><span class=\"line\"></span><br><span class=\"line\">Exp17_percent = Exp5y[Exp5y[<span class=\"string\">&#x27;year&#x27;</span>] == <span class=\"string\">&quot;2017&quot;</span>].reset_index(drop = <span class=\"literal\">True</span>)</span><br><span class=\"line\">Exp17_percent[<span class=\"string\">&#x27;percentage&#x27;</span>] = Exp17_percent[<span class=\"string\">&quot;Count&quot;</span>] / Exp17_percent[<span class=\"string\">&quot;Count&quot;</span>].<span class=\"built_in\">sum</span>()</span><br><span class=\"line\">Exp17_percent[<span class=\"string\">&#x27;%&#x27;</span>] = np.<span class=\"built_in\">round</span>(Exp17_percent[<span class=\"string\">&#x27;percentage&#x27;</span>] * <span class=\"number\">100</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">Exp17_percent</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#graph</span></span><br><span class=\"line\">Exp5y_percent = pd.concat([Exp17_percent, Exp18_percent, Exp19_percent, Exp20_percent, Exp21_percent], ignore_index = <span class=\"literal\">True</span>)</span><br><span class=\"line\">Exp5y_percent= pd.pivot(Exp5y_percent, index = <span class=\"string\">&quot;year&quot;</span>, columns = <span class=\"string\">&#x27;Exp&#x27;</span>, values = <span class=\"string\">&quot;%&quot;</span>).reset_index()</span><br><span class=\"line\">Exp5y_percent.fillna(<span class=\"string\">&#x27;0&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">Exp5y_percent_order = Exp5y_percent[<span class=\"string\">&#x27;year&#x27;</span>].tolist()</span><br><span class=\"line\"></span><br><span class=\"line\">fig = go.Figure()</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_trace(go.Scatter(</span><br><span class=\"line\">    x = Exp5y_percent_order, </span><br><span class=\"line\">    y = Exp5y_percent[<span class=\"string\">&#x27;&lt; 1 years&#x27;</span>].tolist(), </span><br><span class=\"line\">    mode = <span class=\"string\">&quot;lines&quot;</span>, </span><br><span class=\"line\">    name = <span class=\"string\">&#x27;&lt; 1 years&#x27;</span>,</span><br><span class=\"line\">    line = <span class=\"built_in\">dict</span>(width = <span class=\"number\">0.5</span>),</span><br><span class=\"line\">    stackgroup = <span class=\"string\">&quot;one&quot;</span>,</span><br><span class=\"line\">    marker_color=<span class=\"string\">&#x27;#F2798F&#x27;</span>))</span><br><span class=\"line\">fig.add_trace(go.Scatter(</span><br><span class=\"line\">    x = Exp5y_percent_order, </span><br><span class=\"line\">    y = Exp5y_percent[<span class=\"string\">&#x27;1-2 years&#x27;</span>].tolist(), </span><br><span class=\"line\">    mode = <span class=\"string\">&quot;lines&quot;</span>, </span><br><span class=\"line\">    name = <span class=\"string\">&#x27;1-2 years&#x27;</span>,</span><br><span class=\"line\">    line = <span class=\"built_in\">dict</span>(width = <span class=\"number\">0.5</span>),</span><br><span class=\"line\">    stackgroup = <span class=\"string\">&quot;one&quot;</span>,</span><br><span class=\"line\">    marker_color=<span class=\"string\">&#x27;#88BFBA&#x27;</span>))</span><br><span class=\"line\">fig.add_trace(go.Scatter(</span><br><span class=\"line\">    x = Exp5y_percent_order, </span><br><span class=\"line\">    y = Exp5y_percent[<span class=\"string\">&#x27;3-5 years&#x27;</span>].tolist(), </span><br><span class=\"line\">    mode = <span class=\"string\">&quot;lines&quot;</span>, </span><br><span class=\"line\">    name = <span class=\"string\">&#x27;3-5 years&#x27;</span>,</span><br><span class=\"line\">    line = <span class=\"built_in\">dict</span>(width = <span class=\"number\">0.5</span>),</span><br><span class=\"line\">    stackgroup = <span class=\"string\">&quot;one&quot;</span>,</span><br><span class=\"line\">    marker_color=<span class=\"string\">&#x27;#CDD9A3&#x27;</span>))</span><br><span class=\"line\">fig.add_trace(go.Scatter(</span><br><span class=\"line\">    x = Exp5y_percent_order, </span><br><span class=\"line\">    y = Exp5y_percent[<span class=\"string\">&#x27;5-10 years&#x27;</span>].tolist(), </span><br><span class=\"line\">    mode = <span class=\"string\">&quot;lines&quot;</span>, </span><br><span class=\"line\">    name = <span class=\"string\">&#x27;5-10 years&#x27;</span>,</span><br><span class=\"line\">    line = <span class=\"built_in\">dict</span>(width = <span class=\"number\">0.5</span>),</span><br><span class=\"line\">    stackgroup = <span class=\"string\">&quot;one&quot;</span>,</span><br><span class=\"line\">    marker_color=<span class=\"string\">&#x27;#F28705&#x27;</span>))</span><br><span class=\"line\">fig.add_trace(go.Scatter(</span><br><span class=\"line\">    x = Exp5y_percent_order, </span><br><span class=\"line\">    y = Exp5y_percent[<span class=\"string\">&#x27;10+ years&#x27;</span>].tolist(), </span><br><span class=\"line\">    mode = <span class=\"string\">&quot;lines&quot;</span>, </span><br><span class=\"line\">    name = <span class=\"string\">&#x27;10+ years&#x27;</span>,</span><br><span class=\"line\">    line = <span class=\"built_in\">dict</span>(width = <span class=\"number\">0.5</span>),</span><br><span class=\"line\">    stackgroup = <span class=\"string\">&quot;one&quot;</span>,</span><br><span class=\"line\">    marker_color=<span class=\"string\">&#x27;#D9946C&#x27;</span>))</span><br><span class=\"line\">fig.add_trace(go.Scatter(</span><br><span class=\"line\">    x = Exp5y_percent_order, </span><br><span class=\"line\">    y = Exp5y_percent[<span class=\"string\">&#x27;etc&#x27;</span>].tolist(), </span><br><span class=\"line\">    mode = <span class=\"string\">&quot;lines&quot;</span>, </span><br><span class=\"line\">    name = <span class=\"string\">&#x27;etc&#x27;</span>,</span><br><span class=\"line\">    line = <span class=\"built_in\">dict</span>(width = <span class=\"number\">0.5</span>),</span><br><span class=\"line\">    stackgroup = <span class=\"string\">&quot;one&quot;</span>,</span><br><span class=\"line\">    marker_color=<span class=\"string\">&#x27;#F2D64B&#x27;</span>))</span><br><span class=\"line\">fig.update_traces(hovertemplate=<span class=\"string\">&#x27;&lt;b&gt;Percent&lt;/b&gt;: %&#123;y&#125;%&lt;br&gt;&#x27;</span>)</span><br><span class=\"line\">fig.update_layout(yaxis_range = (<span class=\"number\">0</span>, <span class=\"number\">100</span>),</span><br><span class=\"line\">                  title_text=<span class=\"string\">&quot;&lt;b&gt;Experience in East Asia&lt;/b&gt;&quot;</span>,</span><br><span class=\"line\">                  height=<span class=\"number\">500</span>, width=<span class=\"number\">700</span>, title_font_size=<span class=\"number\">20</span>,</span><br><span class=\"line\">                  title_x=<span class=\"number\">0.5</span>)</span><br><span class=\"line\">fig.update_xaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\">fig.update_yaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">14</span>),</span><br><span class=\"line\">                                    x=<span class=\"number\">0.8</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.2</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;@green_yhjw&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-1-7-Salary-transformation\"><a href=\"#3-1-7-Salary-transformation\" class=\"headerlink\" title=\"3.1.7 Salary transformation\"></a>3.1.7 Salary transformation</h1><hr>\n<h2> World & East Asia Annual salary: Bar-H plot\n</h2>\n\n<ul>\n<li>$ 200,000 ~ : World (2.9%) is more than 50% compared to East Asia (1.3%)</li>\n<li>$ ~250,000 : World (59.2%) is less than East Asia (50.3%) <br><br>  = East Asia’s annual salary gap between rich and poor is less.</li>\n<li>$ 25,000~60,000: The highest section in East Asia at 24%. <br><br>= The annual salary section that we aim for.</li>\n</ul>\n<p><img src=\"/images/kaggle_final/newplot18.png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#data preprocessing</span></span><br><span class=\"line\">df21_salary_=df21[<span class=\"string\">&#x27;Q25&#x27;</span>].value_counts().to_frame().rename(index=&#123;<span class=\"string\">&#x27;$0-999&#x27;</span>:<span class=\"string\">&#x27;&lt;999&#x27;</span>,<span class=\"string\">&#x27;&gt;$1,000,000&#x27;</span>:<span class=\"string\">&#x27;1,000,000~&#x27;</span>,<span class=\"string\">&#x27;$500,000-999,999&#x27;</span>:<span class=\"string\">&#x27;500,000-999,999&#x27;</span>&#125;).fillna(<span class=\"number\">0</span>)</span><br><span class=\"line\">df21_Ea_salary_=df21_Ea[<span class=\"string\">&#x27;Q25&#x27;</span>].value_counts().to_frame().rename(index=&#123;<span class=\"string\">&#x27;$0-999&#x27;</span>:<span class=\"string\">&#x27;&lt;999&#x27;</span>,<span class=\"string\">&#x27;&gt;$1,000,000&#x27;</span>:<span class=\"string\">&#x27;1,000,000~&#x27;</span>,<span class=\"string\">&#x27;$500,000-999,999&#x27;</span>:<span class=\"string\">&#x27;500,000-999,999&#x27;</span>&#125;).fillna(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#퍼센트</span></span><br><span class=\"line\">df21_salary__=(df21_salary_[<span class=\"string\">&#x27;Q25&#x27;</span>]/(df21_salary_[<span class=\"string\">&#x27;Q25&#x27;</span>].<span class=\"built_in\">sum</span>())*<span class=\"number\">100</span>).<span class=\"built_in\">round</span>(<span class=\"number\">1</span>).to_frame().rename(columns=&#123;<span class=\"string\">&#x27;Q25&#x27;</span>:<span class=\"string\">&#x27;World&#x27;</span>&#125;)</span><br><span class=\"line\">df21_Ea_salary__=(df21_Ea_salary_[<span class=\"string\">&#x27;Q25&#x27;</span>]/(df21_Ea_salary_[<span class=\"string\">&#x27;Q25&#x27;</span>].<span class=\"built_in\">sum</span>())*<span class=\"number\">100</span>).<span class=\"built_in\">round</span>(<span class=\"number\">1</span>).to_frame().rename(columns=&#123;<span class=\"string\">&#x27;Q25&#x27;</span>:<span class=\"string\">&#x27;EA&#x27;</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#그룹화</span></span><br><span class=\"line\">df21_salary=(df21_salary__.rename(index=</span><br><span class=\"line\">                               &#123;<span class=\"string\">&#x27;1,000-1,999&#x27;</span>:<span class=\"string\">&#x27;1,000-7,499&#x27;</span>,</span><br><span class=\"line\">                                <span class=\"string\">&#x27;2,000-2,999&#x27;</span>:<span class=\"string\">&#x27;1,000-7,499&#x27;</span>,</span><br><span class=\"line\">                                <span class=\"string\">&#x27;3,000-3,999&#x27;</span>:<span class=\"string\">&#x27;1,000-7,499&#x27;</span>,</span><br><span class=\"line\">                                <span class=\"string\">&#x27;4,000-4,999&#x27;</span>:<span class=\"string\">&#x27;1,000-7,499&#x27;</span>,</span><br><span class=\"line\">                                <span class=\"string\">&#x27;5,000-7,499&#x27;</span>:<span class=\"string\">&#x27;1,000-7,499&#x27;</span>&#125;)</span><br><span class=\"line\">                                .rename(index=&#123;<span class=\"string\">&#x27;7,500-9,999&#x27;</span>:<span class=\"string\">&#x27;7,500-24,999&#x27;</span>,</span><br><span class=\"line\">                                <span class=\"string\">&#x27;10,000-14,999&#x27;</span>:<span class=\"string\">&#x27;7,500-24,999&#x27;</span>,</span><br><span class=\"line\">                                <span class=\"string\">&#x27;15,000-19,999&#x27;</span>:<span class=\"string\">&#x27;7,500-24,999&#x27;</span>,</span><br><span class=\"line\">                                <span class=\"string\">&#x27;20,000-24,999&#x27;</span>:<span class=\"string\">&#x27;7,500-24,999&#x27;</span> &#125;)</span><br><span class=\"line\">                                .rename(index=&#123;<span class=\"string\">&#x27;25,000-29,999&#x27;</span>:<span class=\"string\">&#x27;25,000-59,999&#x27;</span>,</span><br><span class=\"line\">                                 <span class=\"string\">&#x27;30,000-39,999&#x27;</span>:<span class=\"string\">&#x27;25,000-59,999&#x27;</span>,</span><br><span class=\"line\">                                 <span class=\"string\">&#x27;40,000-49,999&#x27;</span>:<span class=\"string\">&#x27;25,000-59,999&#x27;</span>,</span><br><span class=\"line\">                                 <span class=\"string\">&#x27;50,000-59,999&#x27;</span>:<span class=\"string\">&#x27;25,000-59,999&#x27;</span>&#125;)</span><br><span class=\"line\">                                .rename(index=&#123;<span class=\"string\">&#x27;60,000-69,999&#x27;</span>:<span class=\"string\">&#x27;60,000-99,999&#x27;</span>,</span><br><span class=\"line\">                                 <span class=\"string\">&#x27;70,000-79,999&#x27;</span>:<span class=\"string\">&#x27;60,000-99,999&#x27;</span>,</span><br><span class=\"line\">                                 <span class=\"string\">&#x27;80,000-89,999&#x27;</span>:<span class=\"string\">&#x27;60,000-99,999&#x27;</span>,</span><br><span class=\"line\">                                 <span class=\"string\">&#x27;90,000-99,999&#x27;</span>:<span class=\"string\">&#x27;60,000-99,999&#x27;</span>&#125;)</span><br><span class=\"line\">                                .rename(index=&#123;<span class=\"string\">&#x27;100,000-124,999&#x27;</span>:<span class=\"string\">&#x27;100,000-199,999&#x27;</span>,</span><br><span class=\"line\">                                 <span class=\"string\">&#x27;125,000-149,999&#x27;</span>:<span class=\"string\">&#x27;100,000-199,999&#x27;</span>,</span><br><span class=\"line\">                                 <span class=\"string\">&#x27;150,000-199,999&#x27;</span>:<span class=\"string\">&#x27;100,000-199,999&#x27;</span>&#125;)</span><br><span class=\"line\">                                .rename(index=&#123;<span class=\"string\">&#x27;200,000-249,999&#x27;</span>:<span class=\"string\">&#x27;200,000-1,000,000~&#x27;</span>,</span><br><span class=\"line\">                                 <span class=\"string\">&#x27;250,000-299,999&#x27;</span>:<span class=\"string\">&#x27;200,000-1,000,000~&#x27;</span>,</span><br><span class=\"line\">                                 <span class=\"string\">&#x27;300,000-499,999&#x27;</span>:<span class=\"string\">&#x27;200,000-1,000,000~&#x27;</span>,</span><br><span class=\"line\">                                 <span class=\"string\">&#x27;500,000-999,999&#x27;</span>:<span class=\"string\">&#x27;200,000-1,000,000~&#x27;</span>,</span><br><span class=\"line\">                                 <span class=\"string\">&#x27;1,000,000~&#x27;</span>:<span class=\"string\">&#x27;200,000-1,000,000~&#x27;</span>&#125;)</span><br><span class=\"line\">                                .reset_index().groupby(<span class=\"string\">&#x27;index&#x27;</span>).<span class=\"built_in\">sum</span>()</span><br><span class=\"line\">                                 .reindex(index = [<span class=\"string\">&#x27;&lt;999&#x27;</span>, </span><br><span class=\"line\">                                                  <span class=\"string\">&#x27;1,000-7,499&#x27;</span>,</span><br><span class=\"line\">                                                  <span class=\"string\">&#x27;7,500-24,999&#x27;</span>, </span><br><span class=\"line\">                                                  <span class=\"string\">&#x27;25,000-59,999&#x27;</span>, </span><br><span class=\"line\">                                                  <span class=\"string\">&#x27;60,000-99,999&#x27;</span>, </span><br><span class=\"line\">                                                 <span class=\"string\">&#x27;100,000-199,999&#x27;</span>, </span><br><span class=\"line\">                                                 <span class=\"string\">&#x27;200,000-1,000,000~&#x27;</span>]))</span><br><span class=\"line\"></span><br><span class=\"line\">df21_Ea_salary=(df21_Ea_salary__.rename(index=</span><br><span class=\"line\">                               &#123;<span class=\"string\">&#x27;1,000-1,999&#x27;</span>:<span class=\"string\">&#x27;1,000-7,499&#x27;</span>,</span><br><span class=\"line\">                               <span class=\"string\">&#x27;2,000-2,999&#x27;</span>:<span class=\"string\">&#x27;1,000-7,499&#x27;</span>,</span><br><span class=\"line\">                               <span class=\"string\">&#x27;3,000-3,999&#x27;</span>:<span class=\"string\">&#x27;1,000-7,499&#x27;</span>,</span><br><span class=\"line\">                               <span class=\"string\">&#x27;4,000-4,999&#x27;</span>:<span class=\"string\">&#x27;1,000-7,499&#x27;</span>,</span><br><span class=\"line\">                               <span class=\"string\">&#x27;5,000-7,499&#x27;</span>:<span class=\"string\">&#x27;1,000-7,499&#x27;</span>&#125;)</span><br><span class=\"line\">                                .rename(index=&#123;<span class=\"string\">&#x27;7,500-9,999&#x27;</span>:<span class=\"string\">&#x27;7,500-24,999&#x27;</span>,</span><br><span class=\"line\">                               <span class=\"string\">&#x27;10,000-14,999&#x27;</span>:<span class=\"string\">&#x27;7,500-24,999&#x27;</span>,</span><br><span class=\"line\">                               <span class=\"string\">&#x27;15,000-19,999&#x27;</span>:<span class=\"string\">&#x27;7,500-24,999&#x27;</span>,</span><br><span class=\"line\">                               <span class=\"string\">&#x27;20,000-24,999&#x27;</span>:<span class=\"string\">&#x27;7,500-24,999&#x27;</span>&#125;)</span><br><span class=\"line\">                                .rename(index=&#123;<span class=\"string\">&#x27;25,000-29,999&#x27;</span>:<span class=\"string\">&#x27;25,000-59,999&#x27;</span>,</span><br><span class=\"line\">                               <span class=\"string\">&#x27;30,000-39,999&#x27;</span>:<span class=\"string\">&#x27;25,000-59,999&#x27;</span>,</span><br><span class=\"line\">                               <span class=\"string\">&#x27;40,000-49,999&#x27;</span>:<span class=\"string\">&#x27;25,000-59,999&#x27;</span>,</span><br><span class=\"line\">                               <span class=\"string\">&#x27;50,000-59,999&#x27;</span>:<span class=\"string\">&#x27;25,000-59,999&#x27;</span>&#125;)</span><br><span class=\"line\">                                .rename(index=&#123;<span class=\"string\">&#x27;60,000-69,999&#x27;</span>:<span class=\"string\">&#x27;60,000-99,999&#x27;</span>,</span><br><span class=\"line\">                               <span class=\"string\">&#x27;70,000-79,999&#x27;</span>:<span class=\"string\">&#x27;60,000-99,999&#x27;</span>,</span><br><span class=\"line\">                               <span class=\"string\">&#x27;80,000-89,999&#x27;</span>:<span class=\"string\">&#x27;60,000-99,999&#x27;</span>,</span><br><span class=\"line\">                               <span class=\"string\">&#x27;90,000-99,999&#x27;</span>:<span class=\"string\">&#x27;60,000-99,999&#x27;</span>&#125;)</span><br><span class=\"line\">                                .rename(index=&#123;<span class=\"string\">&#x27;100,000-124,999&#x27;</span>:<span class=\"string\">&#x27;100,000-199,999&#x27;</span>,</span><br><span class=\"line\">                               <span class=\"string\">&#x27;125,000-149,999&#x27;</span>:<span class=\"string\">&#x27;100,000-199,999&#x27;</span>,</span><br><span class=\"line\">                               <span class=\"string\">&#x27;150,000-199,999&#x27;</span>:<span class=\"string\">&#x27;100,000-199,999&#x27;</span>&#125;)</span><br><span class=\"line\">                                .rename(index=&#123;<span class=\"string\">&#x27;200,000-249,999&#x27;</span>:<span class=\"string\">&#x27;200,000-1,000,000~&#x27;</span>,</span><br><span class=\"line\">                               <span class=\"string\">&#x27;250,000-299,999&#x27;</span>:<span class=\"string\">&#x27;200,000-1,000,000~&#x27;</span>,</span><br><span class=\"line\">                               <span class=\"string\">&#x27;300,000-499,999\t&#x27;</span>:<span class=\"string\">&#x27;200,000-1,000,000~&#x27;</span>,</span><br><span class=\"line\">                               <span class=\"string\">&#x27;500,000-999,999&#x27;</span>:<span class=\"string\">&#x27;200,000-1,000,000~&#x27;</span>,</span><br><span class=\"line\">                               <span class=\"string\">&#x27;1,000,000~&#x27;</span>:<span class=\"string\">&#x27;200,000-1,000,000~&#x27;</span>&#125;)</span><br><span class=\"line\">                                .reset_index().groupby(<span class=\"string\">&#x27;index&#x27;</span>).<span class=\"built_in\">sum</span>()</span><br><span class=\"line\">                                .reindex(index = [<span class=\"string\">&#x27;&lt;999&#x27;</span>, </span><br><span class=\"line\">                                                  <span class=\"string\">&#x27;1,000-7,499&#x27;</span>,</span><br><span class=\"line\">                                                  <span class=\"string\">&#x27;7,500-24,999&#x27;</span>, </span><br><span class=\"line\">                                                  <span class=\"string\">&#x27;25,000-59,999&#x27;</span>, </span><br><span class=\"line\">                                                  <span class=\"string\">&#x27;60,000-99,999&#x27;</span>, </span><br><span class=\"line\">                                                 <span class=\"string\">&#x27;100,000-199,999&#x27;</span>, </span><br><span class=\"line\">                                                 <span class=\"string\">&#x27;200,000-1,000,000~&#x27;</span>]))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#graph</span></span><br><span class=\"line\">World = df21_salary[<span class=\"string\">&#x27;World&#x27;</span>].values</span><br><span class=\"line\">East_Asia = df21_Ea_salary[<span class=\"string\">&#x27;EA&#x27;</span>].values</span><br><span class=\"line\">y = df21_salary.index</span><br><span class=\"line\"></span><br><span class=\"line\">fig = go.Figure(data=[</span><br><span class=\"line\">    go.Bar(y=y, x=World, orientation=<span class=\"string\">&#x27;h&#x27;</span>, name=<span class=\"string\">&quot;World&quot;</span>, base=<span class=\"number\">0</span>, hovertemplate=<span class=\"string\">&#x27;&lt;b&gt;World&lt;/b&gt;: %&#123;x&#125;%&lt;br&gt;&#x27;</span>, marker_color=<span class=\"string\">&#x27;#979DA6&#x27;</span>),</span><br><span class=\"line\">    go.Bar(y=y, x=-East_Asia, orientation=<span class=\"string\">&#x27;h&#x27;</span>, name=<span class=\"string\">&quot;East Asia&quot;</span>, base=<span class=\"number\">0</span>, hovertemplate=<span class=\"string\">&#x27;&lt;b&gt;East Asia&lt;/b&gt;: %&#123;x&#125;%&lt;br&gt;&#x27;</span>, marker_color=<span class=\"string\">&#x27;#F2D64B&#x27;</span>)</span><br><span class=\"line\">    ])</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(barmode=<span class=\"string\">&#x27;stack&#x27;</span>)</span><br><span class=\"line\">fig.update_layout(</span><br><span class=\"line\">    margin=<span class=\"built_in\">dict</span>(l=<span class=\"number\">200</span>, r=<span class=\"number\">0</span>, t=<span class=\"number\">200</span>, b=<span class=\"number\">100</span>),</span><br><span class=\"line\">    autosize=<span class=\"literal\">False</span>,</span><br><span class=\"line\">    title_text=<span class=\"string\">&quot;&lt;b&gt;                       Salary in East Asia vs World&lt;/b&gt;&quot;</span>, height=<span class=\"number\">600</span>, width=<span class=\"number\">700</span>, title_font_size=<span class=\"number\">20</span>, title_x=<span class=\"number\">0.5</span>)</span><br><span class=\"line\">fig.update_xaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\">fig.update_yaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\">fig.update_layout(legend=<span class=\"built_in\">dict</span>(</span><br><span class=\"line\">    orientation=<span class=\"string\">&quot;h&quot;</span>,</span><br><span class=\"line\">    yanchor=<span class=\"string\">&quot;bottom&quot;</span>,</span><br><span class=\"line\">    y=<span class=\"number\">1.1</span>,</span><br><span class=\"line\">    xanchor=<span class=\"string\">&quot;right&quot;</span>,</span><br><span class=\"line\">    x=<span class=\"number\">1</span>))</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n\n<h2> World experience and annual salary: Heat Map </h2>\n\n<h4>Relatively **positive correlation.** </h4>\n\n<ul>\n<li><p>Even with 5-10 years of experience, more than 45% has an annual salary of less than $20,000</p>\n</li>\n<li><p>With more than 10 years of experience, more than 30% receive an annual salary of $100,000.</p>\n</li>\n</ul>\n<p><img src=\"/images/kaggle_final/newplot19.png\"><br><img src=\"/images/kaggle_final/newplot20.png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#data preprocessing</span></span><br><span class=\"line\">SalExp21= df21.loc[:, [<span class=\"string\">&#x27;region&#x27;</span>, <span class=\"string\">&#x27;Q25&#x27;</span>, <span class=\"string\">&#x27;Q6&#x27;</span>]].rename(columns=&#123;<span class=\"string\">&#x27;Q6&#x27;</span>:<span class=\"string\">&#x27;Exp&#x27;</span>, <span class=\"string\">&#x27;Q25&#x27;</span>:<span class=\"string\">&#x27;Salary&#x27;</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">SalExp21=(SalExp21</span><br><span class=\"line\">          .replace([<span class=\"string\">&#x27;0-999&#x27;</span>,<span class=\"string\">&#x27;$0-999&#x27;</span>,<span class=\"string\">&#x27;0&#x27;</span>], <span class=\"string\">&#x27;&lt; 999&#x27;</span>)</span><br><span class=\"line\">          .replace(&#123;<span class=\"string\">&#x27;&gt;$1,000,000&#x27;</span>:<span class=\"string\">&#x27;200,000~&#x27;</span>&#125;)</span><br><span class=\"line\">          .replace([<span class=\"string\">&#x27;1,000-1,999&#x27;</span>,<span class=\"string\">&#x27;2,000-2,999&#x27;</span>,<span class=\"string\">&#x27;3,000-3,999&#x27;</span>, </span><br><span class=\"line\">        <span class=\"string\">&#x27;4,000-4,999&#x27;</span>,<span class=\"string\">&#x27;5,000-7,499&#x27;</span>,<span class=\"string\">&#x27;7,500-9,999&#x27;</span>,<span class=\"string\">&#x27;10,000-14,999&#x27;</span>, <span class=\"string\">&#x27;15,000-19,999&#x27;</span>],<span class=\"string\">&#x27;1,000-20,000&#x27;</span>)</span><br><span class=\"line\">          .replace([<span class=\"string\">&#x27;20,000-24,999&#x27;</span><span class=\"string\">&#x27;25,000-29,999&#x27;</span>,<span class=\"string\">&#x27;30,000-39,999&#x27;</span>, <span class=\"string\">&#x27;40,000-49,999&#x27;</span>, </span><br><span class=\"line\">        <span class=\"string\">&#x27;50,000-59,999&#x27;</span>],<span class=\"string\">&#x27;20,000-59,999&#x27;</span>) </span><br><span class=\"line\">           .replace([<span class=\"string\">&#x27;60,000-69,999&#x27;</span>, <span class=\"string\">&#x27;70,000-79,999&#x27;</span>, <span class=\"string\">&#x27;80,000-89,999&#x27;</span>, </span><br><span class=\"line\">        <span class=\"string\">&#x27;90,000-99,999&#x27;</span>], <span class=\"string\">&#x27;60,000-99,999&#x27;</span>)</span><br><span class=\"line\">          .replace([<span class=\"string\">&#x27;100,000-124,999&#x27;</span>, <span class=\"string\">&#x27;300,000-499,999&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;125,000-149,999&#x27;</span>, <span class=\"string\">&#x27;125,000-149,999&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;150,000-199,999&#x27;</span>],<span class=\"string\">&#x27;100,000-199,999&#x27;</span>)</span><br><span class=\"line\">          .replace([<span class=\"string\">&#x27;200,000-249,999&#x27;</span>, <span class=\"string\">&#x27;250,000-299,999&#x27;</span>, </span><br><span class=\"line\">        <span class=\"string\">&#x27;1,000,000&#x27;</span>,<span class=\"string\">&#x27;$500,000-999,999&#x27;</span>], <span class=\"string\">&#x27;200,000~&#x27;</span>)</span><br><span class=\"line\">        .replace(&#123;<span class=\"string\">&#x27;I have never written code&#x27;</span>: <span class=\"string\">&#x27;&lt; 1 years&#x27;</span>&#125;)</span><br><span class=\"line\">          .replace([<span class=\"string\">&#x27;10-20 years&#x27;</span>, <span class=\"string\">&#x27;20+ years&#x27;</span>], <span class=\"string\">&#x27;10+ years&#x27;</span> )</span><br><span class=\"line\">         )</span><br><span class=\"line\"></span><br><span class=\"line\">sal_order=[<span class=\"string\">&#x27;&lt; 999&#x27;</span>, <span class=\"string\">&#x27;1,000-20,000&#x27;</span>, <span class=\"string\">&#x27;20,000-59,999&#x27;</span>, <span class=\"string\">&#x27;60,000-99,999&#x27;</span>,<span class=\"string\">&#x27;100,000-199,999&#x27;</span>, <span class=\"string\">&#x27;200,000~&#x27;</span>]</span><br><span class=\"line\">Exp21_order=[<span class=\"string\">&#x27;&lt; 1 years&#x27;</span>, <span class=\"string\">&#x27;1-3 years&#x27;</span>,<span class=\"string\">&#x27;3-5 years&#x27;</span>, <span class=\"string\">&#x27;5-10 years&#x27;</span>, <span class=\"string\">&#x27;10+ years&#x27;</span> ]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">SalExp21_Ea = SalExp21[SalExp21[<span class=\"string\">&#x27;region&#x27;</span>] == <span class=\"string\">&quot;EastAsia&quot;</span>].reset_index(drop = <span class=\"literal\">True</span>)</span><br><span class=\"line\">SalExp21_Ea=(SalExp21_Ea.groupby([<span class=\"string\">&#x27;Exp&#x27;</span>, <span class=\"string\">&#x27;Salary&#x27;</span>])</span><br><span class=\"line\">           .size()</span><br><span class=\"line\">          .unstack().fillna(<span class=\"number\">0</span>).astype(<span class=\"string\">&#x27;int64&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">SalExp21_Wo = SalExp21[SalExp21[<span class=\"string\">&#x27;region&#x27;</span>] == <span class=\"string\">&quot;World&quot;</span>].reset_index(drop = <span class=\"literal\">True</span>)</span><br><span class=\"line\">SalExp21_Wo=(SalExp21_Wo.groupby([<span class=\"string\">&#x27;Exp&#x27;</span>, <span class=\"string\">&#x27;Salary&#x27;</span>])</span><br><span class=\"line\">           .size()</span><br><span class=\"line\">          .unstack().fillna(<span class=\"number\">0</span>).astype(<span class=\"string\">&#x27;int64&#x27;</span>))</span><br><span class=\"line\">SalExp21_Wo</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#graph</span></span><br><span class=\"line\"><span class=\"comment\">#World</span></span><br><span class=\"line\">z = SalExp21_Wo</span><br><span class=\"line\">z = z[sal_order]</span><br><span class=\"line\">z = z.reindex(Exp21_order)</span><br><span class=\"line\"></span><br><span class=\"line\">z_data = z.apply(<span class=\"keyword\">lambda</span> x:np.<span class=\"built_in\">round</span>(x/x.<span class=\"built_in\">sum</span>()*<span class=\"number\">100</span>, <span class=\"number\">2</span>), axis = <span class=\"number\">1</span>).to_numpy() <span class=\"comment\"># convert to correlation matrix</span></span><br><span class=\"line\">x = sal_order</span><br><span class=\"line\">y = Exp21_order</span><br><span class=\"line\"></span><br><span class=\"line\">fig = ff.create_annotated_heatmap(z_data, x = x, y = y, colorscale = <span class=\"string\">&quot;sunset&quot;</span>)</span><br><span class=\"line\">fig.update_layout( title_text=<span class=\"string\">&quot;&lt;b&gt;Experience and salary in World&lt;/b&gt;&quot;</span>,</span><br><span class=\"line\">                  height=<span class=\"number\">700</span>, width=<span class=\"number\">700</span>, title_font_size=<span class=\"number\">20</span>,</span><br><span class=\"line\">                  title_x=<span class=\"number\">0.5</span>,</span><br><span class=\"line\">                  margin=<span class=\"built_in\">dict</span>(l=<span class=\"number\">100</span>, r=<span class=\"number\">100</span>, t=<span class=\"number\">200</span>, b=<span class=\"number\">100</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">14</span>),</span><br><span class=\"line\">                                    x=<span class=\"number\">0.85</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.1</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;@green_yhjw&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\">fig.show()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#East Asia</span></span><br><span class=\"line\">z = SalExp21_Ea</span><br><span class=\"line\">z = z[sal_order]</span><br><span class=\"line\">z = z.reindex(Exp21_order)</span><br><span class=\"line\">z_data = z.apply(<span class=\"keyword\">lambda</span> x:np.<span class=\"built_in\">round</span>(x/x.<span class=\"built_in\">sum</span>(), <span class=\"number\">2</span>), axis = <span class=\"number\">1</span>).to_numpy() <span class=\"comment\"># convert to correlation matrix</span></span><br><span class=\"line\">x = sal_order</span><br><span class=\"line\">y = Exp21_order</span><br><span class=\"line\"></span><br><span class=\"line\">fig = ff.create_annotated_heatmap(z_data, x = x, y = y, colorscale = <span class=\"string\">&quot;sunset&quot;</span>)</span><br><span class=\"line\">fig.update_layout(title_text=<span class=\"string\">&quot;&lt;b&gt;Experience and salary in East Asia&lt;/b&gt;&quot;</span>,</span><br><span class=\"line\">                  height=<span class=\"number\">700</span>, width=<span class=\"number\">700</span>, title_font_size=<span class=\"number\">20</span>,</span><br><span class=\"line\">                  title_x=<span class=\"number\">0.5</span>,</span><br><span class=\"line\">                  margin=<span class=\"built_in\">dict</span>(l=<span class=\"number\">100</span>, r=<span class=\"number\">100</span>, t=<span class=\"number\">200</span>, b=<span class=\"number\">100</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">14</span>),</span><br><span class=\"line\">                                    x=<span class=\"number\">0.85</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.1</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;@green_yhjw&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n\n<h2> World & East Asia Degree/Annual salary: Heat Map </h2>\n\n<ul>\n<li>\\$ ~20,000 : Regardless of degree, about 40% of the annual salary is $ 20,000 or less. <br><br>  Guess it’s the ratio that comes from a student. <br></li>\n<li>$ 25,000-100,000 : Earned more than 40% with a bachelor’s degree alone in East Asia  <br><br>  (World: less than 20%) <br></li>\n<li>$ 200,000~ : Even with a doctorate or higher, it is difficult to obtain it from East Asia.</li>\n</ul>\n<p><img src=\"/images/kaggle_final/newplot21.png\"><br><img src=\"/images/kaggle_final/newplot22.png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#data preprocessing</span></span><br><span class=\"line\">Salary21= df21.loc[:, [<span class=\"string\">&#x27;region&#x27;</span>, <span class=\"string\">&#x27;Q25&#x27;</span>, <span class=\"string\">&#x27;year&#x27;</span>]].rename(columns=&#123;<span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;Country&#x27;</span>, <span class=\"string\">&#x27;Q25&#x27;</span>:<span class=\"string\">&#x27;Salary&#x27;</span>&#125;)</span><br><span class=\"line\">salary21_Index=[<span class=\"string\">&#x27;&lt; 999&#x27;</span>, <span class=\"string\">&#x27;1,000-20,000&#x27;</span>, <span class=\"string\">&#x27;20,000-59,999&#x27;</span>, <span class=\"string\">&#x27;60,000-99,999&#x27;</span>,<span class=\"string\">&#x27;100,000-199,999&#x27;</span>, <span class=\"string\">&#x27;200,000~&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">Salary21=(Salary21</span><br><span class=\"line\">          .replace([<span class=\"string\">&#x27;0-999&#x27;</span>,<span class=\"string\">&#x27;$0-999&#x27;</span>,<span class=\"string\">&#x27;0&#x27;</span>], <span class=\"string\">&#x27;&lt; 999&#x27;</span>)</span><br><span class=\"line\">          .replace(&#123;<span class=\"string\">&#x27;&gt;$1,000,000&#x27;</span>:<span class=\"string\">&#x27;200,000~&#x27;</span>&#125;)</span><br><span class=\"line\">          .replace([<span class=\"string\">&#x27;1,000-1,999&#x27;</span>,<span class=\"string\">&#x27;2,000-2,999&#x27;</span>,<span class=\"string\">&#x27;3,000-3,999&#x27;</span>, <span class=\"string\">&#x27;4,000-4,999&#x27;</span>,<span class=\"string\">&#x27;5,000-7,499&#x27;</span>,<span class=\"string\">&#x27;7,500-9,999&#x27;</span>,<span class=\"string\">&#x27;10,000-14,999&#x27;</span>, <span class=\"string\">&#x27;15,000-19,999&#x27;</span>],<span class=\"string\">&#x27;1,000-20,000&#x27;</span>)</span><br><span class=\"line\">          .replace([<span class=\"string\">&#x27;20,000-24,999&#x27;</span><span class=\"string\">&#x27;25,000-29,999&#x27;</span>,<span class=\"string\">&#x27;30,000-39,999&#x27;</span>, <span class=\"string\">&#x27;40,000-49,999&#x27;</span>,  <span class=\"string\">&#x27;50,000-59,999&#x27;</span>],<span class=\"string\">&#x27;20,000-59,999&#x27;</span>) </span><br><span class=\"line\">           .replace([<span class=\"string\">&#x27;60,000-69,999&#x27;</span>, <span class=\"string\">&#x27;70,000-79,999&#x27;</span>, <span class=\"string\">&#x27;80,000-89,999&#x27;</span>,<span class=\"string\">&#x27;90,000-99,999&#x27;</span>], <span class=\"string\">&#x27;60,000-99,999&#x27;</span>)</span><br><span class=\"line\">          .replace([<span class=\"string\">&#x27;100,000-124,999&#x27;</span>, <span class=\"string\">&#x27;300,000-499,999&#x27;</span>, <span class=\"string\">&#x27;125,000-149,999&#x27;</span>, <span class=\"string\">&#x27;125,000-149,999&#x27;</span>, <span class=\"string\">&#x27;150,000-199,999&#x27;</span>],<span class=\"string\">&#x27;100,000-199,999&#x27;</span>)</span><br><span class=\"line\">          .replace([<span class=\"string\">&#x27;200,000-249,999&#x27;</span>, <span class=\"string\">&#x27;250,000-299,999&#x27;</span>,<span class=\"string\">&#x27;1,000,000&#x27;</span>,<span class=\"string\">&#x27;$500,000-999,999&#x27;</span>], <span class=\"string\">&#x27;200,000~&#x27;</span>)).fillna(<span class=\"string\">&#x27;0&#x27;</span>)</span><br><span class=\"line\">sal_order=[<span class=\"string\">&#x27;&lt; 999&#x27;</span>, <span class=\"string\">&#x27;1,000-20,000&#x27;</span>, <span class=\"string\">&#x27;20,000-59,999&#x27;</span>, <span class=\"string\">&#x27;60,000-99,999&#x27;</span>,<span class=\"string\">&#x27;100,000-199,999&#x27;</span>, <span class=\"string\">&#x27;200,000~&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">Salary21=(Salary21.groupby([<span class=\"string\">&#x27;region&#x27;</span>, <span class=\"string\">&#x27;Salary&#x27;</span>])</span><br><span class=\"line\">           .size()</span><br><span class=\"line\">           .reset_index()</span><br><span class=\"line\">           .rename(columns = &#123;<span class=\"number\">0</span>:<span class=\"string\">&quot;Count&quot;</span>&#125;))</span><br><span class=\"line\"></span><br><span class=\"line\">Salary21_Ea = Salary21[Salary21[<span class=\"string\">&#x27;region&#x27;</span>] == <span class=\"string\">&quot;EastAsia&quot;</span>].reset_index(drop = <span class=\"literal\">True</span>)</span><br><span class=\"line\">Salary21_Ea[<span class=\"string\">&#x27;%&#x27;</span>]=((Salary21_Ea[<span class=\"string\">&#x27;Count&#x27;</span>] / Salary21_Ea[<span class=\"string\">&#x27;Count&#x27;</span>].<span class=\"built_in\">sum</span>())*<span class=\"number\">100</span>).<span class=\"built_in\">round</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\">Salary21_Wo = Salary21[Salary21[<span class=\"string\">&#x27;region&#x27;</span>] == <span class=\"string\">&quot;World&quot;</span>].reset_index(drop = <span class=\"literal\">True</span>)</span><br><span class=\"line\">Salary21_Wo[<span class=\"string\">&#x27;%&#x27;</span>]=((Salary21_Wo[<span class=\"string\">&#x27;Count&#x27;</span>] / Salary21_Wo[<span class=\"string\">&#x27;Count&#x27;</span>].<span class=\"built_in\">sum</span>())*<span class=\"number\">100</span>).<span class=\"built_in\">round</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">Dgr_Sal_21= df21.loc[:, [<span class=\"string\">&#x27;region&#x27;</span>, <span class=\"string\">&#x27;Q25&#x27;</span>, <span class=\"string\">&#x27;Q4&#x27;</span>]].rename(columns=&#123;<span class=\"string\">&#x27;Q4&#x27;</span>:<span class=\"string\">&#x27;Dgree&#x27;</span>, <span class=\"string\">&#x27;Q25&#x27;</span>:<span class=\"string\">&#x27;Salary&#x27;</span>&#125;)</span><br><span class=\"line\">Dgr_Sal_21 = (Dgr_Sal_21.replace([<span class=\"string\">&#x27;0-999&#x27;</span>,<span class=\"string\">&#x27;$0-999&#x27;</span>,<span class=\"string\">&#x27;0&#x27;</span>], <span class=\"string\">&#x27;&lt; 999&#x27;</span>)</span><br><span class=\"line\">          .replace(&#123;<span class=\"string\">&#x27;&gt;$1,000,000&#x27;</span>:<span class=\"string\">&#x27;200,000~&#x27;</span>&#125;)</span><br><span class=\"line\">          .replace([<span class=\"string\">&#x27;1,000-1,999&#x27;</span>,<span class=\"string\">&#x27;2,000-2,999&#x27;</span>,<span class=\"string\">&#x27;3,000-3,999&#x27;</span>, <span class=\"string\">&#x27;4,000-4,999&#x27;</span>,<span class=\"string\">&#x27;5,000-7,499&#x27;</span>,<span class=\"string\">&#x27;7,500-9,999&#x27;</span>,<span class=\"string\">&#x27;10,000-14,999&#x27;</span>, <span class=\"string\">&#x27;15,000-19,999&#x27;</span>],<span class=\"string\">&#x27;1,000-20,000&#x27;</span>)</span><br><span class=\"line\">          .replace([<span class=\"string\">&#x27;20,000-24,999&#x27;</span><span class=\"string\">&#x27;25,000-29,999&#x27;</span>,<span class=\"string\">&#x27;30,000-39,999&#x27;</span>, <span class=\"string\">&#x27;40,000-49,999&#x27;</span>, <span class=\"string\">&#x27;50,000-59,999&#x27;</span>],<span class=\"string\">&#x27;20,000-59,999&#x27;</span>) </span><br><span class=\"line\">          .replace([<span class=\"string\">&#x27;60,000-69,999&#x27;</span>, <span class=\"string\">&#x27;70,000-79,999&#x27;</span>, <span class=\"string\">&#x27;80,000-89,999&#x27;</span>, <span class=\"string\">&#x27;90,000-99,999&#x27;</span>], <span class=\"string\">&#x27;60,000-99,999&#x27;</span>)</span><br><span class=\"line\">          .replace([<span class=\"string\">&#x27;100,000-124,999&#x27;</span>, <span class=\"string\">&#x27;300,000-499,999&#x27;</span>, <span class=\"string\">&#x27;125,000-149,999&#x27;</span>, <span class=\"string\">&#x27;125,000-149,999&#x27;</span>,<span class=\"string\">&#x27;150,000-199,999&#x27;</span>],<span class=\"string\">&#x27;100,000-199,999&#x27;</span>)</span><br><span class=\"line\">          .replace([<span class=\"string\">&#x27;200,000-249,999&#x27;</span>, <span class=\"string\">&#x27;250,000-299,999&#x27;</span>,<span class=\"string\">&#x27;1,000,000&#x27;</span>,<span class=\"string\">&#x27;$500,000-999,999&#x27;</span>], <span class=\"string\">&#x27;200,000~&#x27;</span>)</span><br><span class=\"line\">          .replace(&#123;<span class=\"string\">&#x27;I prefer not to answer&#x27;</span>:<span class=\"string\">&#x27;etc&#x27;</span>&#125;)</span><br><span class=\"line\">          .replace([<span class=\"string\">&#x27;No formal education past high school&#x27;</span>, <span class=\"string\">&#x27;Some college/university study without earning a bachelor’s degree&#x27;</span>],<span class=\"string\">&#x27;~college&#x27;</span>)</span><br><span class=\"line\">          .replace([<span class=\"string\">&#x27;Doctoral degree&#x27;</span>, <span class=\"string\">&#x27;Professional doctorate&#x27;</span>],<span class=\"string\">&#x27;Doctoral degree~&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#EastAsia 뽑기</span></span><br><span class=\"line\">Dgr_Sal_21_Ea= Dgr_Sal_21[Dgr_Sal_21[<span class=\"string\">&#x27;region&#x27;</span>] == <span class=\"string\">&quot;EastAsia&quot;</span>].reset_index(drop = <span class=\"literal\">True</span>)</span><br><span class=\"line\">Dgr_Sal_21_Ea = Dgr_Sal_21_Ea.groupby([<span class=\"string\">&#x27;Dgree&#x27;</span>, <span class=\"string\">&#x27;Salary&#x27;</span>]).size().unstack().fillna(<span class=\"number\">0</span>).astype(<span class=\"string\">&#x27;int64&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">dgree_order=[ <span class=\"string\">&#x27;~college&#x27;</span>,<span class=\"string\">&#x27;Bachelor’s degree&#x27;</span>, <span class=\"string\">&#x27;Master’s degree&#x27;</span>, <span class=\"string\">&#x27;Doctoral degree~&#x27;</span>, <span class=\"string\">&#x27;etc&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#graph</span></span><br><span class=\"line\"><span class=\"comment\">#World</span></span><br><span class=\"line\">z = Dgr_Sal_21.groupby([<span class=\"string\">&#x27;Dgree&#x27;</span>, <span class=\"string\">&#x27;Salary&#x27;</span>]).size().unstack().fillna(<span class=\"number\">0</span>).astype(<span class=\"string\">&#x27;int64&#x27;</span>)</span><br><span class=\"line\">z = z[sal_order]</span><br><span class=\"line\">z = z.reindex(dgree_order)</span><br><span class=\"line\"></span><br><span class=\"line\">z_data = z.apply(<span class=\"keyword\">lambda</span> x:np.<span class=\"built_in\">round</span>(x/x.<span class=\"built_in\">sum</span>()*<span class=\"number\">100</span>, <span class=\"number\">2</span>), axis = <span class=\"number\">1</span>).to_numpy() <span class=\"comment\"># convert to correlation matrix</span></span><br><span class=\"line\">x = sal_order</span><br><span class=\"line\">y = dgree_order</span><br><span class=\"line\"></span><br><span class=\"line\">fig = ff.create_annotated_heatmap(z_data, x = x, y = y, colorscale = <span class=\"string\">&quot;sunset&quot;</span>)</span><br><span class=\"line\">fig.update_layout( title_text=<span class=\"string\">&quot;&lt;b&gt;    Degree-Salary in World&lt;/b&gt;&quot;</span>,</span><br><span class=\"line\">                  height=<span class=\"number\">700</span>, width=<span class=\"number\">700</span>, title_font_size=<span class=\"number\">20</span>,</span><br><span class=\"line\">                  title_x=<span class=\"number\">0.5</span>,</span><br><span class=\"line\">                  margin=<span class=\"built_in\">dict</span>(l=<span class=\"number\">150</span>, r=<span class=\"number\">100</span>, t=<span class=\"number\">200</span>, b=<span class=\"number\">50</span>))</span><br><span class=\"line\">fig.update_traces(hovertemplate=<span class=\"string\">&#x27;&lt;b&gt;Degree&lt;/b&gt;: %&#123;y&#125;&lt;br&gt;&#x27;</span>+</span><br><span class=\"line\">                                <span class=\"string\">&#x27;&lt;b&gt;Salary&lt;/b&gt;: %&#123;x&#125;&lt;br&gt;&#x27;</span>+</span><br><span class=\"line\">                                <span class=\"string\">&#x27;&lt;b&gt;Percent&lt;/b&gt;: %&#123;z&#125;%&#x27;</span>)</span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">14</span>),</span><br><span class=\"line\">                                    x=<span class=\"number\">0.8</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.1</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;@green_yhjw&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\">fig.show()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#East Asia</span></span><br><span class=\"line\">z = Dgr_Sal_21_Ea</span><br><span class=\"line\">z = z[sal_order]</span><br><span class=\"line\">z = z.reindex(dgree_order)</span><br><span class=\"line\">z_data = z.apply(<span class=\"keyword\">lambda</span> x:np.<span class=\"built_in\">round</span>(x/x.<span class=\"built_in\">sum</span>()*<span class=\"number\">100</span>, <span class=\"number\">2</span>), axis = <span class=\"number\">1</span>).to_numpy() <span class=\"comment\"># convert to correlation matrix</span></span><br><span class=\"line\">x = sal_order</span><br><span class=\"line\">y = dgree_order</span><br><span class=\"line\"></span><br><span class=\"line\">fig = ff.create_annotated_heatmap(z_data, x = x, y = y, colorscale = <span class=\"string\">&quot;sunset&quot;</span>)</span><br><span class=\"line\">fig.update_layout(title_text=<span class=\"string\">&quot;&lt;b&gt;    Degree-Salary in East Asia&lt;/b&gt;&quot;</span>,</span><br><span class=\"line\">                  height=<span class=\"number\">700</span>, width=<span class=\"number\">700</span>, title_font_size=<span class=\"number\">20</span>,</span><br><span class=\"line\">                  title_x=<span class=\"number\">0.5</span>,</span><br><span class=\"line\">                  margin=<span class=\"built_in\">dict</span>(l=<span class=\"number\">150</span>, r=<span class=\"number\">100</span>, t=<span class=\"number\">200</span>, b=<span class=\"number\">50</span>))</span><br><span class=\"line\">fig.update_traces(hovertemplate=<span class=\"string\">&#x27;&lt;b&gt;Degree&lt;/b&gt;: %&#123;y&#125;&lt;br&gt;&#x27;</span>+</span><br><span class=\"line\">                                <span class=\"string\">&#x27;&lt;b&gt;Salary&lt;/b&gt;: %&#123;x&#125;&lt;br&gt;&#x27;</span>+</span><br><span class=\"line\">                                <span class=\"string\">&#x27;&lt;b&gt;Percent&lt;/b&gt;: %&#123;z&#125;%&#x27;</span>)</span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">14</span>),</span><br><span class=\"line\">                                    x=<span class=\"number\">0.8</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.1</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;@green_yhjw&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-1-8-Language-transformation\"><a href=\"#3-1-8-Language-transformation\" class=\"headerlink\" title=\"3.1.8 Language transformation\"></a>3.1.8 Language transformation</h1><hr>\n<h2>World & East Asia Programming Language: Bar plot </h2>\n- Python: 80% of the world and 85% of East Asia use it.\n\n<h4>\n<p style=\"color:#FF0000\";>\nWe've been working on the project as python, so I hope we can continue to learn python and become experienced Data Scientists!\n    </p></h4>\n\n<p><img src=\"/images/kaggle_final/newplot23.png\"><br><img src=\"/images/kaggle_final/newplot24.png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#data preprocessing</span></span><br><span class=\"line\"><span class=\"comment\">#world</span></span><br><span class=\"line\">programming_list = [<span class=\"string\">&quot;Python&quot;</span>, <span class=\"string\">&quot;R&quot;</span>, <span class=\"string\">&quot;SQL&quot;</span>, <span class=\"string\">&quot;Java&quot;</span>, <span class=\"string\">&quot;C&quot;</span>, <span class=\"string\">&quot;Bash&quot;</span>, <span class=\"string\">&quot;Javascript&quot;</span>, <span class=\"string\">&quot;C++&quot;</span>]</span><br><span class=\"line\">programming_df = pd.Series(programming_list)</span><br><span class=\"line\"></span><br><span class=\"line\">df_2019 = df19[df19[<span class=\"string\">&#x27;Q19&#x27;</span>].isin(programming_df)]</span><br><span class=\"line\">df_2020 = df20[df20[<span class=\"string\">&#x27;Q8&#x27;</span>].isin(programming_df)]</span><br><span class=\"line\">df_2021 = df21[df21[<span class=\"string\">&#x27;Q8&#x27;</span>].isin(programming_df)]</span><br><span class=\"line\"></span><br><span class=\"line\">df19Lag = df_2019.loc[:, [<span class=\"string\">&#x27;region&#x27;</span>, <span class=\"string\">&#x27;Q5&#x27;</span>, <span class=\"string\">&#x27;Q19&#x27;</span>, <span class=\"string\">&#x27;year&#x27;</span>]]</span><br><span class=\"line\">df19Lag = df19Lag.rename(columns = &#123;<span class=\"string\">&#x27;Q19&#x27;</span>: <span class=\"string\">&#x27;Language&#x27;</span>&#125;, inplace = <span class=\"literal\">False</span>) <span class=\"comment\"># To match with other datasets</span></span><br><span class=\"line\">df20Lag = df_2020.loc[:, [<span class=\"string\">&#x27;region&#x27;</span>, <span class=\"string\">&#x27;Q5&#x27;</span>, <span class=\"string\">&#x27;Q8&#x27;</span>, <span class=\"string\">&#x27;year&#x27;</span>]].rename(columns = &#123;<span class=\"string\">&#x27;Q8&#x27;</span>: <span class=\"string\">&#x27;Language&#x27;</span>&#125;, inplace = <span class=\"literal\">False</span>)</span><br><span class=\"line\">df21Lag = df_2021.loc[:, [<span class=\"string\">&#x27;region&#x27;</span>, <span class=\"string\">&#x27;Q5&#x27;</span>, <span class=\"string\">&#x27;Q8&#x27;</span>, <span class=\"string\">&#x27;year&#x27;</span>]].rename(columns = &#123;<span class=\"string\">&#x27;Q8&#x27;</span>: <span class=\"string\">&#x27;Language&#x27;</span>&#125;, inplace = <span class=\"literal\">False</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">df3y_Lag = pd.concat([df19Lag, df20Lag, df21Lag])</span><br><span class=\"line\">df3y_Lag = df3y_Lag.groupby([<span class=\"string\">&#x27;year&#x27;</span>, <span class=\"string\">&#x27;Language&#x27;</span>]).size().reset_index().rename(columns = &#123;<span class=\"number\">0</span>:<span class=\"string\">&quot;Count&quot;</span>&#125;)</span><br><span class=\"line\">df3y_Lag</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2019</span></span><br><span class=\"line\">dfLang_19 = df3y_Lag[df3y_Lag[<span class=\"string\">&#x27;year&#x27;</span>] == <span class=\"string\">&quot;2019&quot;</span>].reset_index(drop = <span class=\"literal\">True</span>)</span><br><span class=\"line\">dfLang_19[<span class=\"string\">&#x27;percentage&#x27;</span>] = dfLang_19[<span class=\"string\">&quot;Count&quot;</span>] / dfLang_19[<span class=\"string\">&quot;Count&quot;</span>].<span class=\"built_in\">sum</span>()</span><br><span class=\"line\">dfLang_19[<span class=\"string\">&#x27;%&#x27;</span>] = np.<span class=\"built_in\">round</span>(dfLang_19[<span class=\"string\">&#x27;percentage&#x27;</span>] * <span class=\"number\">100</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2020</span></span><br><span class=\"line\">dfLang_20 = df3y_Lag[df3y_Lag[<span class=\"string\">&#x27;year&#x27;</span>] == <span class=\"string\">&quot;2020&quot;</span>].reset_index(drop = <span class=\"literal\">True</span>)</span><br><span class=\"line\">dfLang_20[<span class=\"string\">&#x27;percentage&#x27;</span>] = dfLang_20[<span class=\"string\">&quot;Count&quot;</span>] / dfLang_20[<span class=\"string\">&quot;Count&quot;</span>].<span class=\"built_in\">sum</span>()</span><br><span class=\"line\">dfLang_20[<span class=\"string\">&#x27;%&#x27;</span>] = np.<span class=\"built_in\">round</span>(dfLang_20[<span class=\"string\">&#x27;percentage&#x27;</span>] * <span class=\"number\">100</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2021</span></span><br><span class=\"line\">dfLang_21 = df3y_Lag[df3y_Lag[<span class=\"string\">&#x27;year&#x27;</span>] == <span class=\"string\">&quot;2021&quot;</span>].reset_index(drop = <span class=\"literal\">True</span>)</span><br><span class=\"line\">dfLang_21[<span class=\"string\">&#x27;percentage&#x27;</span>] = dfLang_21[<span class=\"string\">&quot;Count&quot;</span>] / dfLang_21[<span class=\"string\">&quot;Count&quot;</span>].<span class=\"built_in\">sum</span>()</span><br><span class=\"line\">dfLang_21[<span class=\"string\">&#x27;%&#x27;</span>] = np.<span class=\"built_in\">round</span>(dfLang_21[<span class=\"string\">&#x27;percentage&#x27;</span>] * <span class=\"number\">100</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">dfLang_19=dfLang_19.sort_values(by=<span class=\"string\">&#x27;%&#x27;</span>, ascending=<span class=\"literal\">False</span>)</span><br><span class=\"line\">dfLang_20=dfLang_20.sort_values(by=<span class=\"string\">&#x27;%&#x27;</span>, ascending=<span class=\"literal\">False</span>)</span><br><span class=\"line\">dfLang_21=dfLang_21.sort_values(by=<span class=\"string\">&#x27;%&#x27;</span>, ascending=<span class=\"literal\">False</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#graph</span></span><br><span class=\"line\">fig = go.Figure()</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_trace(go.Bar(x = dfLang_19[<span class=\"string\">&#x27;Language&#x27;</span>], </span><br><span class=\"line\">                     y = dfLang_19[<span class=\"string\">&#x27;%&#x27;</span>], </span><br><span class=\"line\">                     name = <span class=\"string\">&quot;2019&quot;</span>, </span><br><span class=\"line\">                     text = dfLang_19[<span class=\"string\">&#x27;%&#x27;</span>].astype(<span class=\"built_in\">str</span>) + <span class=\"string\">&quot;%&quot;</span>, </span><br><span class=\"line\">                     textposition=<span class=\"string\">&#x27;auto&#x27;</span>, marker_color=<span class=\"string\">&#x27;#CDD9A3&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_trace(go.Bar(x = dfLang_20[<span class=\"string\">&#x27;Language&#x27;</span>], </span><br><span class=\"line\">                     y = dfLang_20[<span class=\"string\">&#x27;%&#x27;</span>], </span><br><span class=\"line\">                     name = <span class=\"string\">&quot;2020&quot;</span>, </span><br><span class=\"line\">                     text = dfLang_20[<span class=\"string\">&#x27;%&#x27;</span>].astype(<span class=\"built_in\">str</span>) + <span class=\"string\">&quot;%&quot;</span>, </span><br><span class=\"line\">                     textposition=<span class=\"string\">&#x27;auto&#x27;</span>, marker_color=<span class=\"string\">&#x27;#F28705&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_trace(go.Bar(x = dfLang_21[<span class=\"string\">&#x27;Language&#x27;</span>], </span><br><span class=\"line\">                     y = dfLang_21[<span class=\"string\">&#x27;%&#x27;</span>], </span><br><span class=\"line\">                     name = <span class=\"string\">&quot;2021&quot;</span>, </span><br><span class=\"line\">                     text = dfLang_21[<span class=\"string\">&#x27;%&#x27;</span>].astype(<span class=\"built_in\">str</span>) + <span class=\"string\">&quot;%&quot;</span>, </span><br><span class=\"line\">                     textposition=<span class=\"string\">&#x27;auto&#x27;</span>, marker_color=<span class=\"string\">&#x27;#88BFBA&#x27;</span>))</span><br><span class=\"line\">fig.update_layout(title=<span class=\"string\">&#x27;&lt;b&gt;Language in World&lt;/b&gt;&#x27;</span>,title_font_size=<span class=\"number\">20</span>,</span><br><span class=\"line\">                  margin = <span class=\"built_in\">dict</span>(t=<span class=\"number\">100</span>, l=<span class=\"number\">100</span>, r=<span class=\"number\">50</span>, b=<span class=\"number\">100</span>),</span><br><span class=\"line\">                  height=<span class=\"number\">600</span>, width=<span class=\"number\">700</span>,</span><br><span class=\"line\">                  xaxis_title=<span class=\"literal\">None</span>,</span><br><span class=\"line\">                  yaxis_title=<span class=\"literal\">None</span>)</span><br><span class=\"line\">fig.update_traces(hovertemplate=<span class=\"string\">&#x27;&lt;b&gt;Percent&lt;/b&gt;: %&#123;y&#125;%&lt;br&gt;&#x27;</span>+</span><br><span class=\"line\">                                <span class=\"string\">&#x27;&lt;b&gt;Language&lt;/b&gt;: %&#123;x&#125;&lt;br&gt;&#x27;</span>)</span><br><span class=\"line\">fig.update_xaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\">fig.update_yaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\">fig.update_layout(legend=<span class=\"built_in\">dict</span>(</span><br><span class=\"line\">    orientation=<span class=\"string\">&quot;v&quot;</span>,</span><br><span class=\"line\">    yanchor=<span class=\"string\">&quot;bottom&quot;</span>,</span><br><span class=\"line\">    y=<span class=\"number\">0.8</span>,</span><br><span class=\"line\">    xanchor=<span class=\"string\">&quot;right&quot;</span>,</span><br><span class=\"line\">    x=<span class=\"number\">1</span>))</span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">14</span>),</span><br><span class=\"line\">                                    x=<span class=\"number\">0.8</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.2</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;@green_yhjw&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#data prprocessing</span></span><br><span class=\"line\"><span class=\"comment\">#Ea</span></span><br><span class=\"line\"></span><br><span class=\"line\">df_2019 = df19_Ea[df19_Ea[<span class=\"string\">&#x27;Q19&#x27;</span>].isin(programming_df)]</span><br><span class=\"line\">df_2020 = df20_Ea[df20_Ea[<span class=\"string\">&#x27;Q8&#x27;</span>].isin(programming_df)]</span><br><span class=\"line\">df_2021 = df21_Ea[df21_Ea[<span class=\"string\">&#x27;Q8&#x27;</span>].isin(programming_df)]</span><br><span class=\"line\"></span><br><span class=\"line\">df19Lag = df_2019.loc[:, [<span class=\"string\">&#x27;region&#x27;</span>, <span class=\"string\">&#x27;Q5&#x27;</span>, <span class=\"string\">&#x27;Q19&#x27;</span>, <span class=\"string\">&#x27;year&#x27;</span>]]</span><br><span class=\"line\">df19Lag = df19Lag.rename(columns = &#123;<span class=\"string\">&#x27;Q19&#x27;</span>: <span class=\"string\">&#x27;Language&#x27;</span>&#125;, inplace = <span class=\"literal\">False</span>) <span class=\"comment\"># To match with other datasets</span></span><br><span class=\"line\">df20Lag = df_2020.loc[:, [<span class=\"string\">&#x27;region&#x27;</span>, <span class=\"string\">&#x27;Q5&#x27;</span>, <span class=\"string\">&#x27;Q8&#x27;</span>, <span class=\"string\">&#x27;year&#x27;</span>]].rename(columns = &#123;<span class=\"string\">&#x27;Q8&#x27;</span>: <span class=\"string\">&#x27;Language&#x27;</span>&#125;, inplace = <span class=\"literal\">False</span>)</span><br><span class=\"line\">df21Lag = df_2021.loc[:, [<span class=\"string\">&#x27;region&#x27;</span>, <span class=\"string\">&#x27;Q5&#x27;</span>, <span class=\"string\">&#x27;Q8&#x27;</span>, <span class=\"string\">&#x27;year&#x27;</span>]].rename(columns = &#123;<span class=\"string\">&#x27;Q8&#x27;</span>: <span class=\"string\">&#x27;Language&#x27;</span>&#125;, inplace = <span class=\"literal\">False</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">df3y_Lag = pd.concat([df19Lag, df20Lag, df21Lag])</span><br><span class=\"line\">df3y_Lag = df3y_Lag.groupby([<span class=\"string\">&#x27;year&#x27;</span>, <span class=\"string\">&#x27;Language&#x27;</span>]).size().reset_index().rename(columns = &#123;<span class=\"number\">0</span>:<span class=\"string\">&quot;Count&quot;</span>&#125;)</span><br><span class=\"line\">df3y_Lag</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2019</span></span><br><span class=\"line\">dfLang_19 = df3y_Lag[df3y_Lag[<span class=\"string\">&#x27;year&#x27;</span>] == <span class=\"string\">&quot;2019&quot;</span>].reset_index(drop = <span class=\"literal\">True</span>)</span><br><span class=\"line\">dfLang_19[<span class=\"string\">&#x27;percentage&#x27;</span>] = dfLang_19[<span class=\"string\">&quot;Count&quot;</span>] / dfLang_19[<span class=\"string\">&quot;Count&quot;</span>].<span class=\"built_in\">sum</span>()</span><br><span class=\"line\">dfLang_19[<span class=\"string\">&#x27;%&#x27;</span>] = np.<span class=\"built_in\">round</span>(dfLang_19[<span class=\"string\">&#x27;percentage&#x27;</span>] * <span class=\"number\">100</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2020</span></span><br><span class=\"line\">dfLang_20 = df3y_Lag[df3y_Lag[<span class=\"string\">&#x27;year&#x27;</span>] == <span class=\"string\">&quot;2020&quot;</span>].reset_index(drop = <span class=\"literal\">True</span>)</span><br><span class=\"line\">dfLang_20[<span class=\"string\">&#x27;percentage&#x27;</span>] = dfLang_20[<span class=\"string\">&quot;Count&quot;</span>] / dfLang_20[<span class=\"string\">&quot;Count&quot;</span>].<span class=\"built_in\">sum</span>()</span><br><span class=\"line\">dfLang_20[<span class=\"string\">&#x27;%&#x27;</span>] = np.<span class=\"built_in\">round</span>(dfLang_20[<span class=\"string\">&#x27;percentage&#x27;</span>] * <span class=\"number\">100</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2021</span></span><br><span class=\"line\">dfLang_21 = df3y_Lag[df3y_Lag[<span class=\"string\">&#x27;year&#x27;</span>] == <span class=\"string\">&quot;2021&quot;</span>].reset_index(drop = <span class=\"literal\">True</span>)</span><br><span class=\"line\">dfLang_21[<span class=\"string\">&#x27;percentage&#x27;</span>] = dfLang_21[<span class=\"string\">&quot;Count&quot;</span>] / dfLang_21[<span class=\"string\">&quot;Count&quot;</span>].<span class=\"built_in\">sum</span>()</span><br><span class=\"line\">dfLang_21[<span class=\"string\">&#x27;%&#x27;</span>] = np.<span class=\"built_in\">round</span>(dfLang_21[<span class=\"string\">&#x27;percentage&#x27;</span>] * <span class=\"number\">100</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">dfLang_19=dfLang_19.sort_values(by=<span class=\"string\">&#x27;%&#x27;</span>, ascending=<span class=\"literal\">False</span>)</span><br><span class=\"line\">dfLang_20=dfLang_20.sort_values(by=<span class=\"string\">&#x27;%&#x27;</span>, ascending=<span class=\"literal\">False</span>)</span><br><span class=\"line\">dfLang_21=dfLang_21.sort_values(by=<span class=\"string\">&#x27;%&#x27;</span>, ascending=<span class=\"literal\">False</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#graph</span></span><br><span class=\"line\">fig = go.Figure()</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_trace(go.Bar(x = dfLang_19[<span class=\"string\">&#x27;Language&#x27;</span>], </span><br><span class=\"line\">                     y = dfLang_19[<span class=\"string\">&#x27;%&#x27;</span>], </span><br><span class=\"line\">                     name = <span class=\"string\">&quot;2019&quot;</span>, </span><br><span class=\"line\">                     text = dfLang_19[<span class=\"string\">&#x27;%&#x27;</span>].astype(<span class=\"built_in\">str</span>) + <span class=\"string\">&quot;%&quot;</span>, </span><br><span class=\"line\">                     textposition=<span class=\"string\">&#x27;auto&#x27;</span>, marker_color=<span class=\"string\">&#x27;#CDD9A3&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_trace(go.Bar(x = dfLang_20[<span class=\"string\">&#x27;Language&#x27;</span>], </span><br><span class=\"line\">                     y = dfLang_20[<span class=\"string\">&#x27;%&#x27;</span>], </span><br><span class=\"line\">                     name = <span class=\"string\">&quot;2020&quot;</span>, </span><br><span class=\"line\">                     text = dfLang_20[<span class=\"string\">&#x27;%&#x27;</span>].astype(<span class=\"built_in\">str</span>) + <span class=\"string\">&quot;%&quot;</span>, </span><br><span class=\"line\">                     textposition=<span class=\"string\">&#x27;auto&#x27;</span>, marker_color=<span class=\"string\">&#x27;#F28705&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_trace(go.Bar(x = dfLang_21[<span class=\"string\">&#x27;Language&#x27;</span>], </span><br><span class=\"line\">                     y = dfLang_21[<span class=\"string\">&#x27;%&#x27;</span>], </span><br><span class=\"line\">                     name = <span class=\"string\">&quot;2021&quot;</span>, </span><br><span class=\"line\">                     text = dfLang_21[<span class=\"string\">&#x27;%&#x27;</span>].astype(<span class=\"built_in\">str</span>) + <span class=\"string\">&quot;%&quot;</span>, </span><br><span class=\"line\">                     textposition=<span class=\"string\">&#x27;auto&#x27;</span>, marker_color=<span class=\"string\">&#x27;#88BFBA&#x27;</span>))</span><br><span class=\"line\">fig.update_layout(title=<span class=\"string\">&#x27;&lt;b&gt;Language in EastAsia&lt;/b&gt;&#x27;</span>,title_font_size=<span class=\"number\">20</span>,</span><br><span class=\"line\">                  margin = <span class=\"built_in\">dict</span>(t=<span class=\"number\">100</span>, l=<span class=\"number\">100</span>, r=<span class=\"number\">50</span>, b=<span class=\"number\">100</span>),</span><br><span class=\"line\">                  height=<span class=\"number\">600</span>, width=<span class=\"number\">700</span>,</span><br><span class=\"line\">                  xaxis_title=<span class=\"literal\">None</span>,</span><br><span class=\"line\">                  yaxis_title=<span class=\"literal\">None</span>)</span><br><span class=\"line\">fig.update_traces(hovertemplate=<span class=\"string\">&#x27;&lt;b&gt;Percent&lt;/b&gt;: %&#123;text&#125;&#x27;</span>)</span><br><span class=\"line\">fig.update_xaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\">fig.update_yaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">14</span>),</span><br><span class=\"line\">                                    x=<span class=\"number\">0.8</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.2</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;@green_yhjw&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-2-Position-of-Data-Scientist-in-East-Asia\"><a href=\"#3-2-Position-of-Data-Scientist-in-East-Asia\" class=\"headerlink\" title=\"3.2 Position of Data Scientist in East Asia\"></a>3.2 Position of Data Scientist in East Asia</h1><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># data preprocessing</span></span><br><span class=\"line\">df21_Ea_DS = df21_Ea[df21_Ea[<span class=\"string\">&#x27;Q5&#x27;</span>].isin(Data_Scientist)].fillna(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">salary_order= [<span class=\"string\">&#x27;&lt;999&#x27;</span>, <span class=\"string\">&#x27;1,000-19,999&#x27;</span>, <span class=\"string\">&#x27;20,000-59,999&#x27;</span>, <span class=\"string\">&#x27;60,000-99,999&#x27;</span>,<span class=\"string\">&#x27;100,000-199,999&#x27;</span>, <span class=\"string\">&#x27;200,000~&#x27;</span>]</span><br><span class=\"line\">dgree_order=[ <span class=\"string\">&#x27;~college&#x27;</span>,<span class=\"string\">&#x27;Bachelor’s degree&#x27;</span>, <span class=\"string\">&#x27;Master’s degree&#x27;</span>, <span class=\"string\">&#x27;Doctoral degree~&#x27;</span>, <span class=\"string\">&#x27;etc&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">df21_Ea_DS=(df21_Ea_DS</span><br><span class=\"line\">  <span class=\"comment\">#salary      </span></span><br><span class=\"line\">          .replace(&#123;<span class=\"string\">&#x27;$0-999&#x27;</span>:<span class=\"string\">&#x27;&lt;999&#x27;</span>,<span class=\"string\">&#x27;&gt;$1,000,000&#x27;</span>:<span class=\"string\">&#x27;1,000,000~&#x27;</span>,<span class=\"string\">&#x27;$500,000-999,999&#x27;</span>:<span class=\"string\">&#x27;500,000-999,999&#x27;</span>&#125;)</span><br><span class=\"line\">         </span><br><span class=\"line\">          .replace([<span class=\"string\">&#x27;1,000-1,999&#x27;</span>,<span class=\"string\">&#x27;2,000-2,999&#x27;</span>,<span class=\"string\">&#x27;3,000-3,999&#x27;</span>, <span class=\"string\">&#x27;4,000-4,999&#x27;</span>,<span class=\"string\">&#x27;5,000-7,499&#x27;</span>,<span class=\"string\">&#x27;7,500-9,999&#x27;</span>,<span class=\"string\">&#x27;10,000-14,999&#x27;</span>, <span class=\"string\">&#x27;15,000-19,999&#x27;</span>],<span class=\"string\">&#x27;1,000-19,999&#x27;</span>)</span><br><span class=\"line\">          .replace([<span class=\"string\">&#x27;20,000-24,999&#x27;</span>,<span class=\"string\">&#x27;25,000-29,999&#x27;</span>,<span class=\"string\">&#x27;30,000-39,999&#x27;</span>, <span class=\"string\">&#x27;40,000-49,999&#x27;</span>, <span class=\"string\">&#x27;50,000-59,999&#x27;</span>],<span class=\"string\">&#x27;20,000-59,999&#x27;</span>) </span><br><span class=\"line\">          .replace([<span class=\"string\">&#x27;60,000-69,999&#x27;</span>, <span class=\"string\">&#x27;70,000-79,999&#x27;</span>, <span class=\"string\">&#x27;80,000-89,999&#x27;</span>, <span class=\"string\">&#x27;90,000-99,999&#x27;</span>], <span class=\"string\">&#x27;60,000-99,999&#x27;</span>)</span><br><span class=\"line\">          .replace([<span class=\"string\">&#x27;100,000-124,999&#x27;</span>,<span class=\"string\">&#x27;125,000-149,999&#x27;</span>,<span class=\"string\">&#x27;150,000-199,999&#x27;</span>],<span class=\"string\">&#x27;100,000-199,999&#x27;</span>)</span><br><span class=\"line\">          .replace([<span class=\"string\">&#x27;200,000-249,999&#x27;</span>, <span class=\"string\">&#x27;250,000-299,999&#x27;</span>, <span class=\"string\">&#x27;300,000-499,999&#x27;</span>,<span class=\"string\">&#x27;500,000-999,999&#x27;</span>, <span class=\"string\">&#x27;1,000,000~&#x27;</span>], <span class=\"string\">&#x27;200,000~&#x27;</span>)</span><br><span class=\"line\">  <span class=\"comment\">#degree          </span></span><br><span class=\"line\">          .replace(&#123;<span class=\"string\">&#x27;I prefer not to answer&#x27;</span>:<span class=\"string\">&#x27;etc&#x27;</span>&#125;)</span><br><span class=\"line\">          .replace([<span class=\"string\">&#x27;No formal education past high school&#x27;</span>,<span class=\"string\">&#x27;Some college/university study without earning a bachelor’s degree&#x27;</span>],<span class=\"string\">&#x27;~college&#x27;</span>)</span><br><span class=\"line\">          .replace([<span class=\"string\">&#x27;Doctoral degree&#x27;</span>, <span class=\"string\">&#x27;Professional doctorate&#x27;</span>],<span class=\"string\">&#x27;Doctoral degree~&#x27;</span>)</span><br><span class=\"line\">          )</span><br><span class=\"line\">sal_order= [<span class=\"string\">&#x27;&lt;999&#x27;</span>, <span class=\"string\">&#x27;1,000-19,999&#x27;</span>, <span class=\"string\">&#x27;20,000-59,999&#x27;</span>, <span class=\"string\">&#x27;60,000-99,999&#x27;</span>,<span class=\"string\">&#x27;100,000-199,999&#x27;</span>, <span class=\"string\">&#x27;200,000~&#x27;</span>]</span><br><span class=\"line\">dgree_order=[ <span class=\"string\">&#x27;~college&#x27;</span>,<span class=\"string\">&#x27;Bachelor’s degree&#x27;</span>, <span class=\"string\">&#x27;Master’s degree&#x27;</span>, <span class=\"string\">&#x27;Doctoral degree~&#x27;</span>, <span class=\"string\">&#x27;etc&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-2-1-Salary\"><a href=\"#3-2-1-Salary\" class=\"headerlink\" title=\"3.2.1 Salary\"></a>3.2.1 Salary</h1><hr>\n<ul>\n<li><dl><dt>Annual salary of Research Scientist.</dt><dd>The highest percentage of $2.6 million is 29.81%.</dd></dl></li>\n<li><dl><dt>The annual salary of Machine Learning Engineer.</dt><dd>The highest rate of $999 is 31.89%.</dd></dl></li>\n<li><dl><dt>The annual salary of Data Scientist is..</dt><dd>The ratio of $1,000 to $20,000 is the highest at 29.19%.</dd></dl></li>\n</ul>\n<h2>⇒ The higher the annual salary, the lower the overall job rate.</h2>\n\n<p><img src=\"/images/kaggle_final/newplot25.png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df21_Ea_DS_= df21_Ea_DS.loc[:,[<span class=\"string\">&#x27;Q5&#x27;</span>,<span class=\"string\">&#x27;Q25&#x27;</span>]].reset_index().rename(columns=&#123;<span class=\"string\">&#x27;Q5&#x27;</span>:<span class=\"string\">&#x27;Data_Scientist&#x27;</span>, <span class=\"string\">&#x27;Q25&#x27;</span>:<span class=\"string\">&#x27;Salary&#x27;</span>&#125;).fillna(<span class=\"string\">&#x27;etc&#x27;</span>)</span><br><span class=\"line\">df21_Ea_DS_= (df21_Ea_DS_.groupby([<span class=\"string\">&#x27;Data_Scientist&#x27;</span>, <span class=\"string\">&#x27;Salary&#x27;</span>]).size()</span><br><span class=\"line\">                         .reset_index()</span><br><span class=\"line\">                         .rename(columns = &#123;<span class=\"number\">0</span>:<span class=\"string\">&quot;Count&quot;</span>&#125;))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#Data Scientist</span></span><br><span class=\"line\">df21_Ea_DS_Ds = df21_Ea_DS_[df21_Ea_DS_[<span class=\"string\">&#x27;Data_Scientist&#x27;</span>] == <span class=\"string\">&quot;Data Scientist&quot;</span>].reset_index(drop = <span class=\"literal\">True</span>)</span><br><span class=\"line\">df21_Ea_DS_Ds[<span class=\"string\">&#x27;%&#x27;</span>]=((df21_Ea_DS_Ds[<span class=\"string\">&#x27;Count&#x27;</span>] / df21_Ea_DS_Ds[<span class=\"string\">&#x27;Count&#x27;</span>].<span class=\"built_in\">sum</span>())*<span class=\"number\">100</span>).<span class=\"built_in\">round</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#Machine Learning Engineer</span></span><br><span class=\"line\">df21_Ea_DS_Mle = df21_Ea_DS_[df21_Ea_DS_[<span class=\"string\">&#x27;Data_Scientist&#x27;</span>] == <span class=\"string\">&quot;Machine Learning Engineer&quot;</span>].reset_index(drop = <span class=\"literal\">True</span>)</span><br><span class=\"line\">df21_Ea_DS_Mle[<span class=\"string\">&#x27;%&#x27;</span>]=((df21_Ea_DS_Mle[<span class=\"string\">&#x27;Count&#x27;</span>] / df21_Ea_DS_Mle[<span class=\"string\">&#x27;Count&#x27;</span>].<span class=\"built_in\">sum</span>())*<span class=\"number\">100</span>).<span class=\"built_in\">round</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#Research Scientist</span></span><br><span class=\"line\">df21_Ea_DS_Rs = df21_Ea_DS_[df21_Ea_DS_[<span class=\"string\">&#x27;Data_Scientist&#x27;</span>] == <span class=\"string\">&quot;Research Scientist&quot;</span>].reset_index(drop = <span class=\"literal\">True</span>)</span><br><span class=\"line\">df21_Ea_DS_Rs[<span class=\"string\">&#x27;%&#x27;</span>]=((df21_Ea_DS_Rs[<span class=\"string\">&#x27;Count&#x27;</span>] / df21_Ea_DS_Rs[<span class=\"string\">&#x27;Count&#x27;</span>].<span class=\"built_in\">sum</span>())*<span class=\"number\">100</span>).<span class=\"built_in\">round</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\">df21_Ea_DS_Rs</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">df21_Ea_DS_salary = pd.concat([df21_Ea_DS_Ds, df21_Ea_DS_Mle, df21_Ea_DS_Rs], ignore_index = <span class=\"literal\">True</span>)</span><br><span class=\"line\">df21_Ea_DS_salary= pd.pivot(df21_Ea_DS_salary, index = <span class=\"string\">&quot;Salary&quot;</span>, columns = <span class=\"string\">&#x27;Data_Scientist&#x27;</span>, values = <span class=\"string\">&quot;%&quot;</span>).reset_index().fillna(<span class=\"string\">&#x27;0&#x27;</span>)</span><br><span class=\"line\">df21_Ea_DS_salary= df21_Ea_DS_salary.set_index(<span class=\"string\">&quot;Salary&quot;</span>).reindex(sal_order)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#graph</span></span><br><span class=\"line\">fig = go.Figure()</span><br><span class=\"line\">fig.add_trace(go.Bar(x = df21_Ea_DS_salary.index, </span><br><span class=\"line\">                     y = df21_Ea_DS_salary[<span class=\"string\">&#x27;Data Scientist&#x27;</span>], </span><br><span class=\"line\">                     name = <span class=\"string\">&quot;Data Scientist&quot;</span>, </span><br><span class=\"line\">                     text = df21_Ea_DS_salary[<span class=\"string\">&#x27;Data Scientist&#x27;</span>].astype(<span class=\"built_in\">str</span>) + <span class=\"string\">&quot;%&quot;</span>, </span><br><span class=\"line\">                     textposition=<span class=\"string\">&#x27;auto&#x27;</span>, marker_color=<span class=\"string\">&#x27;#F2798F&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_trace(go.Bar(x = df21_Ea_DS_salary.index, </span><br><span class=\"line\">                     y = df21_Ea_DS_salary[<span class=\"string\">&#x27;Machine Learning Engineer&#x27;</span>], </span><br><span class=\"line\">                     name = <span class=\"string\">&quot;Machine Learning Engineer&quot;</span>, </span><br><span class=\"line\">                     text = df21_Ea_DS_salary[<span class=\"string\">&#x27;Machine Learning Engineer&#x27;</span>].astype(<span class=\"built_in\">str</span>) + <span class=\"string\">&quot;%&quot;</span>, </span><br><span class=\"line\">                     textposition=<span class=\"string\">&#x27;auto&#x27;</span>, marker_color=<span class=\"string\">&#x27;#CDD9A3&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_trace(go.Bar(x = df21_Ea_DS_salary.index, </span><br><span class=\"line\">                     y = df21_Ea_DS_salary[<span class=\"string\">&#x27;Research Scientist&#x27;</span>], </span><br><span class=\"line\">                     name = <span class=\"string\">&quot;Research Scientist&quot;</span>, </span><br><span class=\"line\">                     text = df21_Ea_DS_salary[<span class=\"string\">&#x27;Research Scientist&#x27;</span>].astype(<span class=\"built_in\">str</span>) + <span class=\"string\">&quot;%&quot;</span>, </span><br><span class=\"line\">                     textposition=<span class=\"string\">&#x27;auto&#x27;</span>, marker_color=<span class=\"string\">&#x27;#88BFBA&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(barmode=<span class=\"string\">&#x27;stack&#x27;</span>,</span><br><span class=\"line\">                 showlegend=<span class=\"literal\">True</span>,</span><br><span class=\"line\">                 height=<span class=\"number\">600</span>, width=<span class=\"number\">700</span>,</span><br><span class=\"line\">                 title_text=<span class=\"string\">&quot;&lt;b&gt;Data Scientist&#x27;s Salary in East Asia&lt;/b&gt;&quot;</span>,</span><br><span class=\"line\">                 title_x=<span class=\"number\">0.5</span>,</span><br><span class=\"line\">                 title_font_size=<span class=\"number\">20</span>, </span><br><span class=\"line\">                  margin=<span class=\"built_in\">dict</span>(l=<span class=\"number\">100</span>, r=<span class=\"number\">100</span>, t=<span class=\"number\">100</span>, b=<span class=\"number\">100</span>))</span><br><span class=\"line\">fig.update_traces(hovertemplate=<span class=\"string\">&#x27;&lt;b&gt;Percent&lt;/b&gt;: %&#123;y&#125;%&lt;br&gt;&#x27;</span>+</span><br><span class=\"line\">                                <span class=\"string\">&#x27;&lt;b&gt;Salary&lt;/b&gt;: %&#123;x&#125;$&lt;br&gt;&#x27;</span>)</span><br><span class=\"line\">fig.update_xaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\">fig.update_yaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\">fig.update_layout(legend=<span class=\"built_in\">dict</span>(</span><br><span class=\"line\">    orientation=<span class=\"string\">&quot;v&quot;</span>,</span><br><span class=\"line\">    yanchor=<span class=\"string\">&quot;bottom&quot;</span>,</span><br><span class=\"line\">    y=<span class=\"number\">0.8</span>,</span><br><span class=\"line\">    xanchor=<span class=\"string\">&quot;right&quot;</span>,</span><br><span class=\"line\">    x=<span class=\"number\">1.2</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-2-2-Salary-Experience\"><a href=\"#3-2-2-Salary-Experience\" class=\"headerlink\" title=\"3.2.2 Salary-Experience\"></a>3.2.2 Salary-Experience</h1><hr>\n<h2>The correlation between the career of a Data Scientist and the annual salary.</h2>\n\n<p>If you don’t have experience, you have the highest rate of $999.</p>\n<p>Less than 1 year, 1-3 years have the highest percentage of $999.</p>\n<p>The highest percentage of $20,000 to $60,000 in 3-10 years.</p>\n<p>10-20 years have the highest percentage of $60,000 to $100,000.</p>\n<p><img src=\"/images/kaggle_final/newplot26.png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df21Ea_DS_ExSal = df21_Ea_DS.loc[:,[<span class=\"string\">&#x27;Q6&#x27;</span>,<span class=\"string\">&#x27;Q25&#x27;</span>]].reset_index().rename(columns=&#123;<span class=\"string\">&#x27;Q25&#x27;</span>:<span class=\"string\">&#x27;Salary&#x27;</span>, <span class=\"string\">&#x27;Q6&#x27;</span>:<span class=\"string\">&#x27;Exp&#x27;</span>&#125;).fillna(<span class=\"string\">&#x27;etc&#x27;</span>)</span><br><span class=\"line\">df21Ea_DS_ExSal= (df21Ea_DS_ExSal.groupby([<span class=\"string\">&#x27;Exp&#x27;</span>, <span class=\"string\">&#x27;Salary&#x27;</span>]).size().unstack().fillna(<span class=\"number\">0</span>).astype(<span class=\"string\">&#x27;int64&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">Exp_order=[<span class=\"string\">&#x27;&lt; 1 years&#x27;</span>,<span class=\"string\">&#x27;1-3 years&#x27;</span>,<span class=\"string\">&#x27;3-5 years&#x27;</span>, <span class=\"string\">&#x27;5-10 years&#x27;</span>, <span class=\"string\">&#x27;10-20 years&#x27;</span>, <span class=\"string\">&#x27;20+ years&#x27;</span>, <span class=\"string\">&#x27;I have never written code&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">df21Ea_DS_ExSal</span><br><span class=\"line\"></span><br><span class=\"line\">z = df21Ea_DS_ExSal</span><br><span class=\"line\">z = z[sal_order]</span><br><span class=\"line\">z = z.reindex(Exp_order)</span><br><span class=\"line\"></span><br><span class=\"line\">z_data = z.apply(<span class=\"keyword\">lambda</span> x:np.<span class=\"built_in\">round</span>(x/x.<span class=\"built_in\">sum</span>()*<span class=\"number\">100</span>, <span class=\"number\">2</span>), axis = <span class=\"number\">1</span>).to_numpy() <span class=\"comment\"># convert to correlation matrix</span></span><br><span class=\"line\">x = sal_order</span><br><span class=\"line\">y = Exp_order</span><br><span class=\"line\"></span><br><span class=\"line\">fig = ff.create_annotated_heatmap(z_data, x = x, y = y, colorscale = <span class=\"string\">&quot;sunset&quot;</span>)</span><br><span class=\"line\">fig.update_layout(title_text=<span class=\"string\">&quot;&lt;b&gt;    Data Scientist&#x27;s Experience &amp; Salary &lt;/b&gt;&quot;</span>,title_font_size=<span class=\"number\">20</span>,</span><br><span class=\"line\">                  height=<span class=\"number\">700</span>, width=<span class=\"number\">700</span>,</span><br><span class=\"line\">                  title_x=<span class=\"number\">0.5</span>,</span><br><span class=\"line\">                  margin=<span class=\"built_in\">dict</span>(l=<span class=\"number\">100</span>, r=<span class=\"number\">100</span>, t=<span class=\"number\">200</span>, b=<span class=\"number\">100</span>))</span><br><span class=\"line\">fig.update_traces(hovertemplate=<span class=\"string\">&#x27;&lt;b&gt;Salary&lt;/b&gt;: %&#123;y&#125;&lt;br&gt;&#x27;</span>+</span><br><span class=\"line\">                                <span class=\"string\">&#x27;&lt;b&gt;Experience&lt;/b&gt;: %&#123;x&#125;&lt;br&gt;&#x27;</span>+</span><br><span class=\"line\">                                <span class=\"string\">&#x27;&lt;b&gt;Percent&lt;/b&gt;: %&#123;z&#125;%&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-2-3-Degree\"><a href=\"#3-2-3-Degree\" class=\"headerlink\" title=\"3.2.3 Degree\"></a>3.2.3 Degree</h1><hr>\n<h2>Comparison of educational background of Data Scientists. <br></h2>\n <br>\n- It has the highest level of Master's Degrees. <br>\n <br>\n- Next, Doctoral Degree, <br>\n <br>\n- The figure was high in the order of Bachelor's Degree. <br>\n\n<p><img src=\"/images/kaggle_final/newplot27.png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df21_Ea_degree = df21_Ea_DS[<span class=\"string\">&#x27;Q4&#x27;</span>].value_counts().to_frame()</span><br><span class=\"line\">degree = df21_Ea_degree.index</span><br><span class=\"line\">values = df21_Ea_degree[<span class=\"string\">&#x27;Q4&#x27;</span>].tolist()</span><br><span class=\"line\"></span><br><span class=\"line\">colors = [<span class=\"string\">&#x27;#F2798F&#x27;</span>,<span class=\"string\">&#x27;#88BFBA&#x27;</span>, <span class=\"string\">&#x27;#CDD9A3&#x27;</span>, <span class=\"string\">&#x27;#F28705&#x27;</span>, <span class=\"string\">&#x27;#D9946C&#x27;</span>]</span><br><span class=\"line\">fig = go.Figure(data=[go.Bar(name=<span class=\"string\">&#x27;Degree&#x27;</span>, x=degree, y=values ,orientation=<span class=\"string\">&#x27;v&#x27;</span>, marker_color=colors, text=values, textposition=<span class=\"string\">&#x27;outside&#x27;</span>)])</span><br><span class=\"line\">fig.update_layout(title_text=<span class=\"string\">&quot;&lt;b&gt;Data Scientist&#x27;s Degree (2021)&lt;/b&gt;&quot;</span>, title_font_size=<span class=\"number\">20</span>,</span><br><span class=\"line\">                  height=<span class=\"number\">600</span>, width=<span class=\"number\">700</span>,</span><br><span class=\"line\">                  title_x=<span class=\"number\">0.5</span>,</span><br><span class=\"line\">                  margin=<span class=\"built_in\">dict</span>(l=<span class=\"number\">100</span>, r=<span class=\"number\">100</span>, t=<span class=\"number\">200</span>, b=<span class=\"number\">100</span>))</span><br><span class=\"line\">fig.update_traces(hovertemplate=<span class=\"string\">&#x27;&lt;b&gt;Count&lt;/b&gt;: %&#123;y&#125;&lt;br&gt;&#x27;</span>+</span><br><span class=\"line\">                                <span class=\"string\">&#x27;&lt;b&gt;Degree&lt;/b&gt;: %&#123;x&#125;&lt;br&gt;&#x27;</span>)</span><br><span class=\"line\">fig.update_xaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\">fig.update_yaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">14</span>),</span><br><span class=\"line\">                                    x=<span class=\"number\">0.8</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.2</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;@green_yhjw&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-2-4-Salary-Degree\"><a href=\"#3-2-4-Salary-Degree\" class=\"headerlink\" title=\"3.2.4 Salary-Degree\"></a>3.2.4 Salary-Degree</h1><hr>\n<h2>Relationship between Data Scientist's academic background and annual salary. <br></h2>\n <br>\n \n<ul>\n<li><dl><dt>If your educational background is below college, <br></dt><dd>Less than 999 dollars. <br></dd></dl><br></li>\n<li><p>The lowest annual salary accounts for the highest percentage.<br></p>\n<br></li>\n<li><p>Bachelor’s degree, Master’s Degree, Doctoral degree <br><br>:$2~60,000 dollars accounts for a large proportion <br></p>\n</li>\n</ul>\n <br>\n<h2>⇒ The higher the education level, the higher the annual salary. <br></h2>\n\n<p><img src=\"/images/kaggle_final/newplot28.png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df21Ea_DS_EduSal= df21_Ea_DS.loc[:, [<span class=\"string\">&#x27;Q4&#x27;</span>, <span class=\"string\">&#x27;Q25&#x27;</span>]].rename(columns=&#123;<span class=\"string\">&#x27;Q4&#x27;</span>:<span class=\"string\">&#x27;Edu&#x27;</span>, <span class=\"string\">&#x27;Q25&#x27;</span>:<span class=\"string\">&#x27;Salary&#x27;</span>&#125;)</span><br><span class=\"line\">df21Ea_DS_EduSal[<span class=\"string\">&#x27;Edu&#x27;</span>].unique()</span><br><span class=\"line\">Edu_order=[<span class=\"string\">&#x27;~college&#x27;</span>, <span class=\"string\">&#x27;Bachelor’s degree&#x27;</span>,<span class=\"string\">&#x27;Master’s degree&#x27;</span>, <span class=\"string\">&#x27;Doctoral degree~&#x27;</span>, <span class=\"string\">&#x27;etc&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">df21Ea_DS_EduSal= (df21Ea_DS_EduSal.groupby([<span class=\"string\">&#x27;Edu&#x27;</span>, <span class=\"string\">&#x27;Salary&#x27;</span>]).size().unstack().fillna(<span class=\"number\">0</span>).astype(<span class=\"string\">&#x27;int64&#x27;</span>))</span><br><span class=\"line\">df21Ea_DS_EduSal</span><br><span class=\"line\"></span><br><span class=\"line\">z = df21Ea_DS_EduSal</span><br><span class=\"line\">z = z[sal_order]</span><br><span class=\"line\">z = z.reindex(Edu_order)</span><br><span class=\"line\"></span><br><span class=\"line\">z_data = z.apply(<span class=\"keyword\">lambda</span> x:np.<span class=\"built_in\">round</span>(x/x.<span class=\"built_in\">sum</span>()*<span class=\"number\">100</span>, <span class=\"number\">2</span>), axis = <span class=\"number\">1</span>).to_numpy() <span class=\"comment\"># convert to correlation matrix</span></span><br><span class=\"line\">x = sal_order</span><br><span class=\"line\">y = Edu_order</span><br><span class=\"line\"></span><br><span class=\"line\">fig = ff.create_annotated_heatmap(z_data, x = x, y = y, colorscale = <span class=\"string\">&quot;sunset&quot;</span>)</span><br><span class=\"line\">fig.update_layout(title_text=<span class=\"string\">&quot;&lt;b&gt;       Data Scientist&#x27;s Degree &amp; Salary &lt;/b&gt;&quot;</span>, title_font_size=<span class=\"number\">20</span>,</span><br><span class=\"line\">                  height=<span class=\"number\">700</span>, width=<span class=\"number\">700</span>,</span><br><span class=\"line\">                  title_x=<span class=\"number\">0.5</span>,</span><br><span class=\"line\">                  margin=<span class=\"built_in\">dict</span>(l=<span class=\"number\">150</span>, r=<span class=\"number\">100</span>, t=<span class=\"number\">200</span>, b=<span class=\"number\">50</span>))</span><br><span class=\"line\">fig.update_traces(hovertemplate=<span class=\"string\">&#x27;&lt;b&gt;Degree&lt;/b&gt;: %&#123;y&#125;&lt;br&gt;&#x27;</span>+</span><br><span class=\"line\">                                <span class=\"string\">&#x27;&lt;b&gt;Salary&lt;/b&gt;: %&#123;x&#125;&lt;br&gt;&#x27;</span>+</span><br><span class=\"line\">                                <span class=\"string\">&#x27;&lt;b&gt;Percent&lt;/b&gt;: %&#123;z&#125;%&#x27;</span>)</span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">14</span>),</span><br><span class=\"line\">                                    x=<span class=\"number\">0.8</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.1</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;@green_yhjw&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-2-5-Language\"><a href=\"#3-2-5-Language\" class=\"headerlink\" title=\"3.2.5 Language\"></a>3.2.5 Language</h1><hr>\n<h2>The language that Data Scientist uses a lot. <br></h2>\n <br>\n- Python accounts for the highest percentage of 80% or more. <br>\n <br>\n- Second, I use R the most. <br>\nR is used less frequently in the order of 2019, 20, and 21. <br>\n <br>\n- From 19 to 21, the percentage of use rate of use 10% -> 4%, a total of 6% decrease. <br>\n <br>\n- The third most frequently used language is SQL. <br>\nSQL increased 0.6 percent in 2020 from 2021. <br>\n <br>\n- The fourth most frequently used languages are C language and C++. <br>\n <br>\n<h2>⇒ To become a Data Scientist, Let's study Python first! <br></h2>\n\n<p><img src=\"/images/kaggle_final/newplot29.png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#data preprocessing</span></span><br><span class=\"line\">df20_Ea_DS = df20_Ea[df20_Ea[<span class=\"string\">&#x27;Q5&#x27;</span>].isin(Data_Scientist)]</span><br><span class=\"line\">df19_Ea_DS =df19_Ea[df19_Ea[<span class=\"string\">&#x27;Q5&#x27;</span>].isin(Data_Scientist)]</span><br><span class=\"line\">df19Ea_DSLag = df19_Ea_DS.loc[:, [ <span class=\"string\">&#x27;Q5&#x27;</span>, <span class=\"string\">&#x27;Q19&#x27;</span>, <span class=\"string\">&#x27;year&#x27;</span>]]</span><br><span class=\"line\">df19Ea_DSLag = df19Ea_DSLag.rename(columns = &#123;<span class=\"string\">&#x27;Q19&#x27;</span>: <span class=\"string\">&#x27;Language&#x27;</span>&#125;, inplace = <span class=\"literal\">False</span>) <span class=\"comment\"># To match with other datasets</span></span><br><span class=\"line\">df20Ea_DSLag = df20_Ea_DS.loc[:, [ <span class=\"string\">&#x27;Q5&#x27;</span>, <span class=\"string\">&#x27;Q8&#x27;</span>, <span class=\"string\">&#x27;year&#x27;</span>]].rename(columns = &#123;<span class=\"string\">&#x27;Q8&#x27;</span>: <span class=\"string\">&#x27;Language&#x27;</span>&#125;, inplace = <span class=\"literal\">False</span>)</span><br><span class=\"line\">df21Ea_DSLag = df21_Ea_DS.loc[:, [ <span class=\"string\">&#x27;Q5&#x27;</span>, <span class=\"string\">&#x27;Q8&#x27;</span>, <span class=\"string\">&#x27;year&#x27;</span>]].rename(columns = &#123;<span class=\"string\">&#x27;Q8&#x27;</span>: <span class=\"string\">&#x27;Language&#x27;</span>&#125;, inplace = <span class=\"literal\">False</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">df3y_Ds_Lag = pd.concat([df19Ea_DSLag, df20Ea_DSLag, df21Ea_DSLag])</span><br><span class=\"line\">df3y_Ds_Lag = df3y_Ds_Lag.groupby([<span class=\"string\">&#x27;year&#x27;</span>, <span class=\"string\">&#x27;Language&#x27;</span>]).size().reset_index().rename(columns = &#123;<span class=\"number\">0</span>:<span class=\"string\">&quot;Count&quot;</span>&#125;)</span><br><span class=\"line\">df3y_Ds_Lag</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2019</span></span><br><span class=\"line\">dfLang_Ds_19 = df3y_Ds_Lag[df3y_Ds_Lag[<span class=\"string\">&#x27;year&#x27;</span>] == <span class=\"string\">&quot;2019&quot;</span>].reset_index(drop = <span class=\"literal\">True</span>)</span><br><span class=\"line\">dfLang_Ds_19[<span class=\"string\">&#x27;percentage&#x27;</span>] = dfLang_Ds_19[<span class=\"string\">&quot;Count&quot;</span>] / dfLang_Ds_19[<span class=\"string\">&quot;Count&quot;</span>].<span class=\"built_in\">sum</span>()</span><br><span class=\"line\">dfLang_Ds_19[<span class=\"string\">&#x27;%&#x27;</span>] = np.<span class=\"built_in\">round</span>(dfLang_Ds_19[<span class=\"string\">&#x27;percentage&#x27;</span>] * <span class=\"number\">100</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2020</span></span><br><span class=\"line\">dfLang_Ds_20 = df3y_Ds_Lag[df3y_Ds_Lag[<span class=\"string\">&#x27;year&#x27;</span>] == <span class=\"string\">&quot;2020&quot;</span>].reset_index(drop = <span class=\"literal\">True</span>)</span><br><span class=\"line\">dfLang_Ds_20[<span class=\"string\">&#x27;percentage&#x27;</span>] = dfLang_Ds_20[<span class=\"string\">&quot;Count&quot;</span>] / dfLang_Ds_20[<span class=\"string\">&quot;Count&quot;</span>].<span class=\"built_in\">sum</span>()</span><br><span class=\"line\">dfLang_Ds_20[<span class=\"string\">&#x27;%&#x27;</span>] = np.<span class=\"built_in\">round</span>(dfLang_Ds_20[<span class=\"string\">&#x27;percentage&#x27;</span>] * <span class=\"number\">100</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2021</span></span><br><span class=\"line\">dfLang_Ds_21 = df3y_Ds_Lag[df3y_Ds_Lag[<span class=\"string\">&#x27;year&#x27;</span>] == <span class=\"string\">&quot;2021&quot;</span>].reset_index(drop = <span class=\"literal\">True</span>)</span><br><span class=\"line\">dfLang_Ds_21[<span class=\"string\">&#x27;percentage&#x27;</span>] = dfLang_Ds_21[<span class=\"string\">&quot;Count&quot;</span>] / dfLang_Ds_21[<span class=\"string\">&quot;Count&quot;</span>].<span class=\"built_in\">sum</span>()</span><br><span class=\"line\">dfLang_Ds_21[<span class=\"string\">&#x27;%&#x27;</span>] = np.<span class=\"built_in\">round</span>(dfLang_Ds_21[<span class=\"string\">&#x27;percentage&#x27;</span>] * <span class=\"number\">100</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">dfLang_Ds_19=dfLang_Ds_19.sort_values(by=<span class=\"string\">&#x27;%&#x27;</span>, ascending=<span class=\"literal\">False</span>)</span><br><span class=\"line\">dfLang_Ds_20=dfLang_Ds_20.sort_values(by=<span class=\"string\">&#x27;%&#x27;</span>, ascending=<span class=\"literal\">False</span>)</span><br><span class=\"line\">dfLang_Ds_21=dfLang_Ds_21.sort_values(by=<span class=\"string\">&#x27;%&#x27;</span>, ascending=<span class=\"literal\">False</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#graph</span></span><br><span class=\"line\">fig = go.Figure()</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_trace(go.Bar(x = dfLang_Ds_19[<span class=\"string\">&#x27;Language&#x27;</span>], </span><br><span class=\"line\">                     y = dfLang_Ds_19[<span class=\"string\">&#x27;%&#x27;</span>], </span><br><span class=\"line\">                     name = <span class=\"string\">&quot;2019&quot;</span>, </span><br><span class=\"line\">                     text = dfLang_Ds_19[<span class=\"string\">&#x27;%&#x27;</span>].astype(<span class=\"built_in\">str</span>) + <span class=\"string\">&quot;%&quot;</span>, </span><br><span class=\"line\">                     textposition=<span class=\"string\">&#x27;auto&#x27;</span>, </span><br><span class=\"line\">                     marker_color=<span class=\"string\">&#x27;#CDD9A3&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_trace(go.Bar(x = dfLang_Ds_20[<span class=\"string\">&#x27;Language&#x27;</span>], </span><br><span class=\"line\">                     y = dfLang_Ds_20[<span class=\"string\">&#x27;%&#x27;</span>], </span><br><span class=\"line\">                     name = <span class=\"string\">&quot;2020&quot;</span>, </span><br><span class=\"line\">                     text = dfLang_Ds_20[<span class=\"string\">&#x27;%&#x27;</span>].astype(<span class=\"built_in\">str</span>) + <span class=\"string\">&quot;%&quot;</span>, </span><br><span class=\"line\">                     textposition=<span class=\"string\">&#x27;auto&#x27;</span>, </span><br><span class=\"line\">                     marker_color=<span class=\"string\">&#x27;#F28705&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_trace(go.Bar(x = dfLang_Ds_21[<span class=\"string\">&#x27;Language&#x27;</span>], </span><br><span class=\"line\">                     y = dfLang_Ds_21[<span class=\"string\">&#x27;%&#x27;</span>], </span><br><span class=\"line\">                     name = <span class=\"string\">&quot;2021&quot;</span>, </span><br><span class=\"line\">                     text = dfLang_Ds_21[<span class=\"string\">&#x27;%&#x27;</span>].astype(<span class=\"built_in\">str</span>) + <span class=\"string\">&quot;%&quot;</span>, </span><br><span class=\"line\">                     textposition=<span class=\"string\">&#x27;auto&#x27;</span>, </span><br><span class=\"line\">                     marker_color=<span class=\"string\">&#x27;#88BFBA&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(title=<span class=\"string\">&#x27;&lt;b&gt;        The language used by the data scientist&lt;/b&gt;&#x27;</span>,title_font_size=<span class=\"number\">22</span>,</span><br><span class=\"line\">                  margin = <span class=\"built_in\">dict</span>(t=<span class=\"number\">120</span>, l=<span class=\"number\">100</span>, r=<span class=\"number\">10</span>, b=<span class=\"number\">150</span>),</span><br><span class=\"line\">                  height=<span class=\"number\">600</span>, width=<span class=\"number\">700</span>)</span><br><span class=\"line\">fig.update_traces(hovertemplate=<span class=\"string\">&#x27;&lt;b&gt;Percent&lt;/b&gt;: %&#123;y&#125;%&lt;br&gt;&#x27;</span>+</span><br><span class=\"line\">                                <span class=\"string\">&#x27;&lt;b&gt;Language&lt;/b&gt;: %&#123;x&#125;&lt;br&gt;&#x27;</span>)</span><br><span class=\"line\">fig.update_xaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\">fig.update_yaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\">fig.update_layout(legend=<span class=\"built_in\">dict</span>(</span><br><span class=\"line\">    orientation=<span class=\"string\">&quot;h&quot;</span>,</span><br><span class=\"line\">    yanchor=<span class=\"string\">&quot;bottom&quot;</span>,</span><br><span class=\"line\">    y=<span class=\"number\">0.8</span>,</span><br><span class=\"line\">    xanchor=<span class=\"string\">&quot;right&quot;</span>,</span><br><span class=\"line\">    x=<span class=\"number\">1</span>))</span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">14</span>),</span><br><span class=\"line\">                                    x=<span class=\"number\">0.8</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.2</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;@green_yhjw&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n\n<h3> Parallel Categories Diagram <br></h3>\n: Visualization of multidimensional categorical datasets <br>\n <br>\nAbout 555 Data Scientist Jobs, Visualize it. <br>\nThe higher the height of the category, the more data is generated. <br>\nIt indicates that the frequency increases. <br>\n\n<p><img src=\"/images/kaggle_final/newplot30.png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ds_pc=(df21_Ea_DS.loc[:, [<span class=\"string\">&#x27;Q5&#x27;</span>,<span class=\"string\">&#x27;Q25&#x27;</span>,<span class=\"string\">&#x27;Q6&#x27;</span>,<span class=\"string\">&#x27;Q4&#x27;</span>,<span class=\"string\">&#x27;Q8&#x27;</span>]]</span><br><span class=\"line\">                 .replace(&#123;<span class=\"string\">&#x27;I have never written code&#x27;</span>: <span class=\"string\">&#x27;&lt; 1 years&#x27;</span>,  <span class=\"string\">&#x27;1-3 years&#x27;</span>: <span class=\"string\">&#x27;1-2 years&#x27;</span>&#125;)</span><br><span class=\"line\">                 .replace([<span class=\"string\">&#x27;10-20 years&#x27;</span>, <span class=\"string\">&#x27;20+ years&#x27;</span>], <span class=\"string\">&#x27;10+ years&#x27;</span> )</span><br><span class=\"line\">                 .replace([<span class=\"number\">0</span>,<span class=\"string\">&#x27;&lt;999&#x27;</span>])</span><br><span class=\"line\">                 )</span><br><span class=\"line\">fig = px.parallel_categories(ds_pc, labels=&#123;<span class=\"string\">&#x27;Q5&#x27;</span>:<span class=\"string\">&#x27;Job&#x27;</span>, <span class=\"string\">&#x27;Q25&#x27;</span>:<span class=\"string\">&#x27;Salary&#x27;</span>, <span class=\"string\">&#x27;Q6&#x27;</span>:<span class=\"string\">&#x27;Experience&#x27;</span>, <span class=\"string\">&#x27;Q4&#x27;</span>:<span class=\"string\">&#x27;Degree&#x27;</span>, <span class=\"string\">&#x27;Q8&#x27;</span>:<span class=\"string\">&#x27;Language&#x27;</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(hovermode = <span class=\"string\">&#x27;x&#x27;</span>)</span><br><span class=\"line\">fig.update_layout(title=<span class=\"string\">&#x27;&lt;b&gt;        Data Scientist&lt;/b&gt;&#x27;</span>,title_font_size=<span class=\"number\">20</span>,</span><br><span class=\"line\">                  margin = <span class=\"built_in\">dict</span>(t=<span class=\"number\">120</span>, l=<span class=\"number\">100</span>, r=<span class=\"number\">10</span>, b=<span class=\"number\">150</span>),</span><br><span class=\"line\">                  height=<span class=\"number\">600</span>, width=<span class=\"number\">700</span>)</span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">14</span>),</span><br><span class=\"line\">                                    x=<span class=\"number\">0.8</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.2</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;@green_yhjw&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"4-Ref\"><a href=\"#4-Ref\" class=\"headerlink\" title=\"4. Ref.\"></a>4. Ref.</h1><hr>\n<h2> Ref. </h2>\n\n<ul>\n<li><p>동아시아 지역 <a href=\"https://ko.wikipedia.org/wiki/%EB%8F%99%EC%95%84%EC%8B%9C%EC%95%84\">https://ko.wikipedia.org/wiki/%EB%8F%99%EC%95%84%EC%8B%9C%EC%95%84</a></p>\n</li>\n<li><p>동아시아 인구 <a href=\"https://ko.wikipedia.org/wiki/%EC%95%84%EC%8B%9C%EC%95%84%EC%9D%98_%EC%9D%B8%EA%B5%AC\">https://ko.wikipedia.org/wiki/%EC%95%84%EC%8B%9C%EC%95%84%EC%9D%98_%EC%9D%B8%EA%B5%AC</a></p>\n</li>\n<li><p>세계 인구 <a href=\"https://ko.wikipedia.org/wiki/%EC%84%B8%EA%B3%84_%EC%9D%B8%EA%B5%AC\">https://ko.wikipedia.org/wiki/%EC%84%B8%EA%B3%84_%EC%9D%B8%EA%B5%AC</a> <br> <a href=\"https://ko.wikipedia.org/wiki/%EC%9D%B8%EA%B0%84_%EA%B0%9C%EB%B0%9C_%EC%A7%80%EC%88%98#2020%EB%85%84\">https://ko.wikipedia.org/wiki/%EC%9D%B8%EA%B0%84_%EA%B0%9C%EB%B0%9C_%EC%A7%80%EC%88%98#2020%EB%85%84</a></p>\n</li>\n<li><p>동아시아 인간개발지수  <a href=\"https://namu.wiki/w/%EB%8F%99%EC%95%84%EC%8B%9C%EC%95%84\">https://namu.wiki/w/%EB%8F%99%EC%95%84%EC%8B%9C%EC%95%84</a></p>\n</li>\n<li><p> Data Scientist란  <a href=\"https://dataprofessional.tistory.com/126\">https://dataprofessional.tistory.com/126</a> <br> <a href=\"https://terms.naver.com/entry.naver?docId=1691563&amp;cid=42171&amp;categoryId=42183\">https://terms.naver.com/entry.naver?docId=1691563&amp;cid=42171&amp;categoryId=42183</a></p>\n</li>\n<li><p>Kaggle이란 <a href=\"https://ko.wikipedia.org/wiki/%EC%BA%90%EA%B8%80\">https://ko.wikipedia.org/wiki/%EC%BA%90%EA%B8%80</a></p>\n</li>\n<li><p>Python이란 <a href=\"https://ko.wikipedia.org/wiki/%ED%8C%8C%EC%9D%B4%EC%8D%AC\">https://ko.wikipedia.org/wiki/%ED%8C%8C%EC%9D%B4%EC%8D%AC</a></p>\n</li>\n<li><p>Kaggle competition Ref. <a href=\"https://www.kaggle.com/miguelfzzz/the-typical-kaggle-data-scientist-in-2021\">https://www.kaggle.com/miguelfzzz/the-typical-kaggle-data-scientist-in-2021</a> <br> <a href=\"https://www.kaggle.com/desalegngeb/how-popular-is-kaggle-in-africa\">https://www.kaggle.com/desalegngeb/how-popular-is-kaggle-in-africa</a></p>\n</li>\n</ul>\n<ul>\n<li>flaricon: <div>Icons made by <a href=\"https://www.freepik.com\" title=\"Freepik\">Freepik</a> from <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">www.flaticon.com</a></div></li>\n</ul>\n<h1 id=\"5-close\"><a href=\"#5-close\" class=\"headerlink\" title=\"5. close\"></a>5. close</h1><hr>\n<p>안녕하세요 한국에 사는 YH입니다. <br><br>python을 배운지 한달이 채 안되서 명이 한 팀이 되어  이번 대회에 참가 하게 되었습니다. <br><br>많이 부족하지만 여기까지 읽어 주셔서 감사합니다. <br><br>아직은 너무너무 부족한 제출물 이지만, 앞으로 열심히 해서 케글 대회에서 1등하는 그 날까지 지켜봐 주세요 ^^! <br><br> 혹시 코멘트로 다 전하지 못하셨던 말이 있으시다면, 저의 <a href=\"https://yoonhwa-p.github.io/\">github blog</a>에 방문하여 도움을 주세요!  <br><br>별거 없지만 놀러오세요  ;-)</p>\n<p>Hello, I’m YH and I live in Korea.<br><br>Less than a month after learning python, people became a team and participated in this competition.  <br><br>It’s not enough, but thank you for reading it up to here.  <br><br>It’s still not enough, but please watch until the day we win first place at the Kaggle competition ^^! <br><br> <br><br>If there’s anything you haven’t said in the comments, please visit my <a href=\"https://yoonhwa-p.github.io/\">github blog</a> and help me! <br><br> It’s nothing special, but come and play. ;-) <br></p>\n <br>\n <br>\n \n<p>안녕하세요 저는 YH님과 같이 Kaggle 대회를 준비 한JW 입니다.  <br><br>python을 제대로 배우지도 못한채로 나오게 된 대회라 코드 부분에서 미숙한 점도 많고  <br><br>오류도 많습니다!   <br><br>하지만 대회를 출전하면서, python에 대해서 많은 공부도 되었고, 재미도 있어서 좋은 기회가 되었던것 같습니다.  <br><br>   <br><br>아래는 저의 깃허브 주소 입니다  <br><br>데이터 관련 분야에서 일하시는 분들은 저에게 팔로우를 걸어주세요!  <br><br><a href=\"https://github.com/wldnjd2\">github</a>   <br></p>\n<p> Hello, I’m JW who prepared for the Kaggle competition with YH.  <br><br>It’s a competition where I didn’t learn python properly, so I’m not good at codes.  <br><br>There are a lot of errors, too!  <br><br>However, as I participated in the competition, I studied a lot about Python and it was a good opportunity because it was fun.  <br><br>  <br><br>Below is my Git Hub address.  <br><br>For those who work in data-related fields, please follow me!  <br><br><a href=\"https://github.com/wldnjd2\">github</a>   <br></p>\n <br>\n <br>\n <br>\n <br>"},{"title":"원형그래프(Pie)","date":"2021-11-06T15:00:00.000Z","toc":true,"thumbnail":"/images/0302_1-2/6.PNG","widgets":null,"_content":"\n## **1-2. 원형그래프**\n### **라이브러리 임포트 해주기**\n---\n```python\nimport pandas as pd \nimport numpy as np\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objects as go\n\n#warning 라이브러리를 이용해서 경고 메세지 숨기기\nimport warnings\nwarnings.filterwarnings('ignore')     \n```\n\n<br>\n<br>\n<br>\n\n### **캐글 데이터 불러오기**\n---\n\n```python\ndf = pd.read_csv('../input/kaggle-survey-2021/kaggle_survey_2021_responses.csv')\ndf = df.iloc[1:, :]      \n```\n<br>\n\n### **column값이 Q2인 데이터 출력**\n---\n\n```python\nprint(df['Q2'])\n```\n![](/images/0302_1-2/1.PNG)\n\n<br>\n\n### **.value_counts()**\n---\n- .value_counts()\ndf의 'Q2' 컬럼의 중복된 데이터 값들의 갯수 표시<br>\n\n```python\n print(df['Q2'].value_counts())\n    #Q1의 데이터 값에서 중복된 데이터 값들의 갯수를표시\n```\n![](/images/0302_1-2/2.PNG)\n\n<br>\n\n### **gender**\n---\n\n- .reset_index()\n인덱스값을 재배열 해주는 함수\n- .rename(columns={'index':'Gender', 'Q2':'Count'})\n컬럼명 변경\n- replace(old, new, [count])\n문자열 변경 할 수 있는 함수\nold : 현재 문자열에서 변경하고 싶은 문자\nnew: 새로 바꿀 문자\ncount: 변경할 횟수\n- .replace(['Prefer not to say','Nonbinary','Prefer to self-describe'], 'Other')\ncount를 입력안했을때 기본값음 -1로 전체를 의미한다<br>\n\n\n\n```python\ngender = (\n    df['Q2']\n    .value_counts()\n    .to_frame()\n    .reset_index()\n    .rename(columns={'index':'Gender', 'Q2':'Count'})\n    .replace(['Prefer not to say','Nonbinary','Prefer to self-describe'], 'Other')  \n    .replace(['Man','Woman'], ['Male', 'Female']) \n    .groupby('Gender')\n    .sum()\n    .reset_index()    \n          )   \nprint(gender)\n```\n\n![](/images/0302_1-2/3.PNG)\n\n<br>\n\n### **go.Pie**\n---\n\n\n- fig = go.Figure\n객체 선언\n- go.Pie()\n원형 그래프 그리기\n- hole=.4\n가운데 구멍 크기\n\n\n```python\ncolors = ['#5abbf9','#033351', 'b9e2fc']\nfig = go.Figure(data=[go.Pie(labels=gender['Gender'],\n                            values=gender['Count'],\n                            hole=.4)])\n\nfig.show()\n```\n![](/images/0302_1-2/4.PNG)\n\n<br>\n\n### **.update_traces**\n---\n\n- hover data\n클릭과 반응하는 인터렉티브 그래프를 구축\n데이터의 세부 정보를 추가적으로 보여주는 팝업 정보창인 호버링\n마우스 가져다 대면 data 정보를 볼 수 있다\n- hoverinfo = 'percent'\n마우스를 그래프에 가져다 대면 퍼센트 값으로 데이터가 표시됨<br>\n- line=dict(color='#000000',width=1)\n테두리 색상 값, 테두리 두께\n\n\n```python\nfig.update_traces(hoverinfo='percent',\n                 textinfo='label',\n                 textfont_size=20,\n                 marker=dict(colors=colors,\n                            line=dict(color='#000000',width=1)))\nfig.show()\n```\n![](/images/0302_1-2/7.PNG)\n\n<br>\n\n### **.update_layout**\n---\n- showlegend=False\n범례 제거<br>\n- 폰트 크기, 도표 제목 설정 등등\n\n```python\nfig.update_layout(showlegend=False,\n                 plot_bgcolor='#F7F7F7',\n                 paper_bgcolor='#F7F7F7',\n                 title_text=\"<b>Gender</b> Distrigution\",\n                 title_x=0.5,\n                 font=dict(family=\"Hiragino Kaku Gothic Pro, sans-serif\",size =25,\n                          color='#000000'))\nfig.show()\n```\n![](/images/0302_1-2/5.PNG)\n<br>\n \n### **annotation**\n---\n- annotation\n주석\n\n\n```python\nfig.add_annotation(dict(font=dict(size=14),\n                                    x=1.1,\n                                    y=-0.16,\n                                    showarrow=False,\n                                    text=\"@miguelfzzz\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\nfig.add_annotation(dict(font=dict(size=12),\n                                    x=-0.28,\n                                    y=-0.16,\n                                    showarrow=False,\n                                    text=\"Source: 2021 Kaggle Machine Learning & Data Science Survey\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\nfig.show()\n```\n![](/images/0302_1-2/6.PNG)\n\n<br>\n\n### **전체 코드**\n---\n남성은 전체의 79%로 응답자의 대다수를 차지한다\n\n```python\ngender = (\n    df['Q2']\n    .value_counts()\n    .to_frame()\n    .reset_index()\n    .rename(columns={'index':'Gender', 'Q2':'Count'})\n    .replace(['Prefer not to say','Nonbinary','Prefer to self-describe'], 'Other')  \n    .replace(['Man','Woman'], ['Male', 'Female']) \n    .groupby('Gender')\n    .sum()\n    .reset_index()    \n          )   \n\ncolors = ['#5abbf9','#033351', 'b9e2fc']\n\nfig = go.Figure(data=[go.Pie(labels=gender['Gender'], \n                             values=gender['Count'], \n                             hole=.4)])\n\nfig.update_traces(hoverinfo='percent', \n                  textinfo='label', \n                  textfont_size=20,\n                  marker=dict(colors=colors, \n                              line=dict(color='#000000', width=1)))\n\nfig.update_layout(showlegend=False, \n                  plot_bgcolor='#F7F7F7', \n                  paper_bgcolor='#F7F7F7',\n                  title_text=\"<b>Gender</b> Distribution\",\n                  title_x=0.5,\n                  font=dict(family=\"Hiragino Kaku Gothic Pro, sans-serif\", size=25, color='#000000'))\n\nfig.add_annotation(dict(font=dict(size=14),\n                                    x=1.1,\n                                    y=-0.16,\n                                    showarrow=False,\n                                    text=\"@miguelfzzz\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\n\nfig.add_annotation(dict(font=dict(size=12),\n                                    x=-0.28,\n                                    y=-0.16,\n                                    showarrow=False,\n                                    text=\"Source: 2021 Kaggle Machine Learning & Data Science Survey\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\nfig.show()\n```\n![](/images/0302_1-2/6.PNG)\n\n\n<br>\n<br>","source":"_posts/kaggle2_원형그래프.md","raw":"---\ntitle: 원형그래프(Pie)\ndate: 2021-11-07\ntags: kaggle, plotly\ntoc: true\nthumbnail: /images/0302_1-2/6.PNG\ncategories: \n- kaggle 필사\nwidgets: null\n---\n\n## **1-2. 원형그래프**\n### **라이브러리 임포트 해주기**\n---\n```python\nimport pandas as pd \nimport numpy as np\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objects as go\n\n#warning 라이브러리를 이용해서 경고 메세지 숨기기\nimport warnings\nwarnings.filterwarnings('ignore')     \n```\n\n<br>\n<br>\n<br>\n\n### **캐글 데이터 불러오기**\n---\n\n```python\ndf = pd.read_csv('../input/kaggle-survey-2021/kaggle_survey_2021_responses.csv')\ndf = df.iloc[1:, :]      \n```\n<br>\n\n### **column값이 Q2인 데이터 출력**\n---\n\n```python\nprint(df['Q2'])\n```\n![](/images/0302_1-2/1.PNG)\n\n<br>\n\n### **.value_counts()**\n---\n- .value_counts()\ndf의 'Q2' 컬럼의 중복된 데이터 값들의 갯수 표시<br>\n\n```python\n print(df['Q2'].value_counts())\n    #Q1의 데이터 값에서 중복된 데이터 값들의 갯수를표시\n```\n![](/images/0302_1-2/2.PNG)\n\n<br>\n\n### **gender**\n---\n\n- .reset_index()\n인덱스값을 재배열 해주는 함수\n- .rename(columns={'index':'Gender', 'Q2':'Count'})\n컬럼명 변경\n- replace(old, new, [count])\n문자열 변경 할 수 있는 함수\nold : 현재 문자열에서 변경하고 싶은 문자\nnew: 새로 바꿀 문자\ncount: 변경할 횟수\n- .replace(['Prefer not to say','Nonbinary','Prefer to self-describe'], 'Other')\ncount를 입력안했을때 기본값음 -1로 전체를 의미한다<br>\n\n\n\n```python\ngender = (\n    df['Q2']\n    .value_counts()\n    .to_frame()\n    .reset_index()\n    .rename(columns={'index':'Gender', 'Q2':'Count'})\n    .replace(['Prefer not to say','Nonbinary','Prefer to self-describe'], 'Other')  \n    .replace(['Man','Woman'], ['Male', 'Female']) \n    .groupby('Gender')\n    .sum()\n    .reset_index()    \n          )   \nprint(gender)\n```\n\n![](/images/0302_1-2/3.PNG)\n\n<br>\n\n### **go.Pie**\n---\n\n\n- fig = go.Figure\n객체 선언\n- go.Pie()\n원형 그래프 그리기\n- hole=.4\n가운데 구멍 크기\n\n\n```python\ncolors = ['#5abbf9','#033351', 'b9e2fc']\nfig = go.Figure(data=[go.Pie(labels=gender['Gender'],\n                            values=gender['Count'],\n                            hole=.4)])\n\nfig.show()\n```\n![](/images/0302_1-2/4.PNG)\n\n<br>\n\n### **.update_traces**\n---\n\n- hover data\n클릭과 반응하는 인터렉티브 그래프를 구축\n데이터의 세부 정보를 추가적으로 보여주는 팝업 정보창인 호버링\n마우스 가져다 대면 data 정보를 볼 수 있다\n- hoverinfo = 'percent'\n마우스를 그래프에 가져다 대면 퍼센트 값으로 데이터가 표시됨<br>\n- line=dict(color='#000000',width=1)\n테두리 색상 값, 테두리 두께\n\n\n```python\nfig.update_traces(hoverinfo='percent',\n                 textinfo='label',\n                 textfont_size=20,\n                 marker=dict(colors=colors,\n                            line=dict(color='#000000',width=1)))\nfig.show()\n```\n![](/images/0302_1-2/7.PNG)\n\n<br>\n\n### **.update_layout**\n---\n- showlegend=False\n범례 제거<br>\n- 폰트 크기, 도표 제목 설정 등등\n\n```python\nfig.update_layout(showlegend=False,\n                 plot_bgcolor='#F7F7F7',\n                 paper_bgcolor='#F7F7F7',\n                 title_text=\"<b>Gender</b> Distrigution\",\n                 title_x=0.5,\n                 font=dict(family=\"Hiragino Kaku Gothic Pro, sans-serif\",size =25,\n                          color='#000000'))\nfig.show()\n```\n![](/images/0302_1-2/5.PNG)\n<br>\n \n### **annotation**\n---\n- annotation\n주석\n\n\n```python\nfig.add_annotation(dict(font=dict(size=14),\n                                    x=1.1,\n                                    y=-0.16,\n                                    showarrow=False,\n                                    text=\"@miguelfzzz\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\nfig.add_annotation(dict(font=dict(size=12),\n                                    x=-0.28,\n                                    y=-0.16,\n                                    showarrow=False,\n                                    text=\"Source: 2021 Kaggle Machine Learning & Data Science Survey\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\nfig.show()\n```\n![](/images/0302_1-2/6.PNG)\n\n<br>\n\n### **전체 코드**\n---\n남성은 전체의 79%로 응답자의 대다수를 차지한다\n\n```python\ngender = (\n    df['Q2']\n    .value_counts()\n    .to_frame()\n    .reset_index()\n    .rename(columns={'index':'Gender', 'Q2':'Count'})\n    .replace(['Prefer not to say','Nonbinary','Prefer to self-describe'], 'Other')  \n    .replace(['Man','Woman'], ['Male', 'Female']) \n    .groupby('Gender')\n    .sum()\n    .reset_index()    \n          )   \n\ncolors = ['#5abbf9','#033351', 'b9e2fc']\n\nfig = go.Figure(data=[go.Pie(labels=gender['Gender'], \n                             values=gender['Count'], \n                             hole=.4)])\n\nfig.update_traces(hoverinfo='percent', \n                  textinfo='label', \n                  textfont_size=20,\n                  marker=dict(colors=colors, \n                              line=dict(color='#000000', width=1)))\n\nfig.update_layout(showlegend=False, \n                  plot_bgcolor='#F7F7F7', \n                  paper_bgcolor='#F7F7F7',\n                  title_text=\"<b>Gender</b> Distribution\",\n                  title_x=0.5,\n                  font=dict(family=\"Hiragino Kaku Gothic Pro, sans-serif\", size=25, color='#000000'))\n\nfig.add_annotation(dict(font=dict(size=14),\n                                    x=1.1,\n                                    y=-0.16,\n                                    showarrow=False,\n                                    text=\"@miguelfzzz\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\n\nfig.add_annotation(dict(font=dict(size=12),\n                                    x=-0.28,\n                                    y=-0.16,\n                                    showarrow=False,\n                                    text=\"Source: 2021 Kaggle Machine Learning & Data Science Survey\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\nfig.show()\n```\n![](/images/0302_1-2/6.PNG)\n\n\n<br>\n<br>","slug":"kaggle2-원형그래프","published":1,"updated":"2022-01-03T12:20:08.048Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cky2hohes00195nrjau3labgv","content":"<h2 id=\"1-2-원형그래프\"><a href=\"#1-2-원형그래프\" class=\"headerlink\" title=\"1-2. 원형그래프\"></a><strong>1-2. 원형그래프</strong></h2><h3 id=\"라이브러리-임포트-해주기\"><a href=\"#라이브러리-임포트-해주기\" class=\"headerlink\" title=\"라이브러리 임포트 해주기\"></a><strong>라이브러리 임포트 해주기</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd </span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> seaborn <span class=\"keyword\">as</span> sns</span><br><span class=\"line\"><span class=\"keyword\">import</span> plotly.express <span class=\"keyword\">as</span> px</span><br><span class=\"line\"><span class=\"keyword\">import</span> plotly.graph_objects <span class=\"keyword\">as</span> go</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#warning 라이브러리를 이용해서 경고 메세지 숨기기</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> warnings</span><br><span class=\"line\">warnings.filterwarnings(<span class=\"string\">&#x27;ignore&#x27;</span>)     </span><br></pre></td></tr></table></figure>\n\n<br>\n<br>\n<br>\n\n<h3 id=\"캐글-데이터-불러오기\"><a href=\"#캐글-데이터-불러오기\" class=\"headerlink\" title=\"캐글 데이터 불러오기\"></a><strong>캐글 데이터 불러오기</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df = pd.read_csv(<span class=\"string\">&#x27;../input/kaggle-survey-2021/kaggle_survey_2021_responses.csv&#x27;</span>)</span><br><span class=\"line\">df = df.iloc[<span class=\"number\">1</span>:, :]      </span><br></pre></td></tr></table></figure>\n<br>\n\n<h3 id=\"column값이-Q2인-데이터-출력\"><a href=\"#column값이-Q2인-데이터-출력\" class=\"headerlink\" title=\"column값이 Q2인 데이터 출력\"></a><strong>column값이 Q2인 데이터 출력</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(df[<span class=\"string\">&#x27;Q2&#x27;</span>])</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/0302_1-2/1.PNG\"></p>\n<br>\n\n<h3 id=\"value-counts\"><a href=\"#value-counts\" class=\"headerlink\" title=\".value_counts()\"></a><strong>.value_counts()</strong></h3><hr>\n<ul>\n<li>.value_counts()<br>df의 ‘Q2’ 컬럼의 중복된 데이터 값들의 갯수 표시<br></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(df[<span class=\"string\">&#x27;Q2&#x27;</span>].value_counts())</span><br><span class=\"line\">   <span class=\"comment\">#Q1의 데이터 값에서 중복된 데이터 값들의 갯수를표시</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/0302_1-2/2.PNG\"></p>\n<br>\n\n<h3 id=\"gender\"><a href=\"#gender\" class=\"headerlink\" title=\"gender\"></a><strong>gender</strong></h3><hr>\n<ul>\n<li>.reset_index()<br>인덱스값을 재배열 해주는 함수</li>\n<li>.rename(columns={‘index’:’Gender’, ‘Q2’:’Count’})<br>컬럼명 변경</li>\n<li>replace(old, new, [count])<br>문자열 변경 할 수 있는 함수<br>old : 현재 문자열에서 변경하고 싶은 문자<br>new: 새로 바꿀 문자<br>count: 변경할 횟수</li>\n<li>.replace([‘Prefer not to say’,’Nonbinary’,’Prefer to self-describe’], ‘Other’)<br>count를 입력안했을때 기본값음 -1로 전체를 의미한다<br></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gender = (</span><br><span class=\"line\">    df[<span class=\"string\">&#x27;Q2&#x27;</span>]</span><br><span class=\"line\">    .value_counts()</span><br><span class=\"line\">    .to_frame()</span><br><span class=\"line\">    .reset_index()</span><br><span class=\"line\">    .rename(columns=&#123;<span class=\"string\">&#x27;index&#x27;</span>:<span class=\"string\">&#x27;Gender&#x27;</span>, <span class=\"string\">&#x27;Q2&#x27;</span>:<span class=\"string\">&#x27;Count&#x27;</span>&#125;)</span><br><span class=\"line\">    .replace([<span class=\"string\">&#x27;Prefer not to say&#x27;</span>,<span class=\"string\">&#x27;Nonbinary&#x27;</span>,<span class=\"string\">&#x27;Prefer to self-describe&#x27;</span>], <span class=\"string\">&#x27;Other&#x27;</span>)  </span><br><span class=\"line\">    .replace([<span class=\"string\">&#x27;Man&#x27;</span>,<span class=\"string\">&#x27;Woman&#x27;</span>], [<span class=\"string\">&#x27;Male&#x27;</span>, <span class=\"string\">&#x27;Female&#x27;</span>]) </span><br><span class=\"line\">    .groupby(<span class=\"string\">&#x27;Gender&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"built_in\">sum</span>()</span><br><span class=\"line\">    .reset_index()    </span><br><span class=\"line\">          )   </span><br><span class=\"line\"><span class=\"built_in\">print</span>(gender)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/0302_1-2/3.PNG\"></p>\n<br>\n\n<h3 id=\"go-Pie\"><a href=\"#go-Pie\" class=\"headerlink\" title=\"go.Pie\"></a><strong>go.Pie</strong></h3><hr>\n<ul>\n<li>fig = go.Figure<br>객체 선언</li>\n<li>go.Pie()<br>원형 그래프 그리기</li>\n<li>hole=.4<br>가운데 구멍 크기</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">colors = [<span class=\"string\">&#x27;#5abbf9&#x27;</span>,<span class=\"string\">&#x27;#033351&#x27;</span>, <span class=\"string\">&#x27;b9e2fc&#x27;</span>]</span><br><span class=\"line\">fig = go.Figure(data=[go.Pie(labels=gender[<span class=\"string\">&#x27;Gender&#x27;</span>],</span><br><span class=\"line\">                            values=gender[<span class=\"string\">&#x27;Count&#x27;</span>],</span><br><span class=\"line\">                            hole=<span class=\"number\">.4</span>)])</span><br><span class=\"line\"></span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/0302_1-2/4.PNG\"></p>\n<br>\n\n<h3 id=\"update-traces\"><a href=\"#update-traces\" class=\"headerlink\" title=\".update_traces\"></a><strong>.update_traces</strong></h3><hr>\n<ul>\n<li>hover data<br>클릭과 반응하는 인터렉티브 그래프를 구축<br>데이터의 세부 정보를 추가적으로 보여주는 팝업 정보창인 호버링<br>마우스 가져다 대면 data 정보를 볼 수 있다</li>\n<li>hoverinfo = ‘percent’<br>마우스를 그래프에 가져다 대면 퍼센트 값으로 데이터가 표시됨<br></li>\n<li>line=dict(color=’#000000’,width=1)<br>테두리 색상 값, 테두리 두께</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fig.update_traces(hoverinfo=<span class=\"string\">&#x27;percent&#x27;</span>,</span><br><span class=\"line\">                 textinfo=<span class=\"string\">&#x27;label&#x27;</span>,</span><br><span class=\"line\">                 textfont_size=<span class=\"number\">20</span>,</span><br><span class=\"line\">                 marker=<span class=\"built_in\">dict</span>(colors=colors,</span><br><span class=\"line\">                            line=<span class=\"built_in\">dict</span>(color=<span class=\"string\">&#x27;#000000&#x27;</span>,width=<span class=\"number\">1</span>)))</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/0302_1-2/7.PNG\"></p>\n<br>\n\n<h3 id=\"update-layout\"><a href=\"#update-layout\" class=\"headerlink\" title=\".update_layout\"></a><strong>.update_layout</strong></h3><hr>\n<ul>\n<li>showlegend=False<br>범례 제거<br></li>\n<li>폰트 크기, 도표 제목 설정 등등</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fig.update_layout(showlegend=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                 plot_bgcolor=<span class=\"string\">&#x27;#F7F7F7&#x27;</span>,</span><br><span class=\"line\">                 paper_bgcolor=<span class=\"string\">&#x27;#F7F7F7&#x27;</span>,</span><br><span class=\"line\">                 title_text=<span class=\"string\">&quot;&lt;b&gt;Gender&lt;/b&gt; Distrigution&quot;</span>,</span><br><span class=\"line\">                 title_x=<span class=\"number\">0.5</span>,</span><br><span class=\"line\">                 font=<span class=\"built_in\">dict</span>(family=<span class=\"string\">&quot;Hiragino Kaku Gothic Pro, sans-serif&quot;</span>,size =<span class=\"number\">25</span>,</span><br><span class=\"line\">                          color=<span class=\"string\">&#x27;#000000&#x27;</span>))</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/0302_1-2/5.PNG\"><br><br></p>\n<h3 id=\"annotation\"><a href=\"#annotation\" class=\"headerlink\" title=\"annotation\"></a><strong>annotation</strong></h3><hr>\n<ul>\n<li>annotation<br>주석</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">14</span>),</span><br><span class=\"line\">                                    x=<span class=\"number\">1.1</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.16</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;@miguelfzzz&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">12</span>),</span><br><span class=\"line\">                                    x=-<span class=\"number\">0.28</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.16</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;Source: 2021 Kaggle Machine Learning &amp; Data Science Survey&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/0302_1-2/6.PNG\"></p>\n<br>\n\n<h3 id=\"전체-코드\"><a href=\"#전체-코드\" class=\"headerlink\" title=\"전체 코드\"></a><strong>전체 코드</strong></h3><hr>\n<p>남성은 전체의 79%로 응답자의 대다수를 차지한다</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gender = (</span><br><span class=\"line\">    df[<span class=\"string\">&#x27;Q2&#x27;</span>]</span><br><span class=\"line\">    .value_counts()</span><br><span class=\"line\">    .to_frame()</span><br><span class=\"line\">    .reset_index()</span><br><span class=\"line\">    .rename(columns=&#123;<span class=\"string\">&#x27;index&#x27;</span>:<span class=\"string\">&#x27;Gender&#x27;</span>, <span class=\"string\">&#x27;Q2&#x27;</span>:<span class=\"string\">&#x27;Count&#x27;</span>&#125;)</span><br><span class=\"line\">    .replace([<span class=\"string\">&#x27;Prefer not to say&#x27;</span>,<span class=\"string\">&#x27;Nonbinary&#x27;</span>,<span class=\"string\">&#x27;Prefer to self-describe&#x27;</span>], <span class=\"string\">&#x27;Other&#x27;</span>)  </span><br><span class=\"line\">    .replace([<span class=\"string\">&#x27;Man&#x27;</span>,<span class=\"string\">&#x27;Woman&#x27;</span>], [<span class=\"string\">&#x27;Male&#x27;</span>, <span class=\"string\">&#x27;Female&#x27;</span>]) </span><br><span class=\"line\">    .groupby(<span class=\"string\">&#x27;Gender&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"built_in\">sum</span>()</span><br><span class=\"line\">    .reset_index()    </span><br><span class=\"line\">          )   </span><br><span class=\"line\"></span><br><span class=\"line\">colors = [<span class=\"string\">&#x27;#5abbf9&#x27;</span>,<span class=\"string\">&#x27;#033351&#x27;</span>, <span class=\"string\">&#x27;b9e2fc&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">fig = go.Figure(data=[go.Pie(labels=gender[<span class=\"string\">&#x27;Gender&#x27;</span>], </span><br><span class=\"line\">                             values=gender[<span class=\"string\">&#x27;Count&#x27;</span>], </span><br><span class=\"line\">                             hole=<span class=\"number\">.4</span>)])</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_traces(hoverinfo=<span class=\"string\">&#x27;percent&#x27;</span>, </span><br><span class=\"line\">                  textinfo=<span class=\"string\">&#x27;label&#x27;</span>, </span><br><span class=\"line\">                  textfont_size=<span class=\"number\">20</span>,</span><br><span class=\"line\">                  marker=<span class=\"built_in\">dict</span>(colors=colors, </span><br><span class=\"line\">                              line=<span class=\"built_in\">dict</span>(color=<span class=\"string\">&#x27;#000000&#x27;</span>, width=<span class=\"number\">1</span>)))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(showlegend=<span class=\"literal\">False</span>, </span><br><span class=\"line\">                  plot_bgcolor=<span class=\"string\">&#x27;#F7F7F7&#x27;</span>, </span><br><span class=\"line\">                  paper_bgcolor=<span class=\"string\">&#x27;#F7F7F7&#x27;</span>,</span><br><span class=\"line\">                  title_text=<span class=\"string\">&quot;&lt;b&gt;Gender&lt;/b&gt; Distribution&quot;</span>,</span><br><span class=\"line\">                  title_x=<span class=\"number\">0.5</span>,</span><br><span class=\"line\">                  font=<span class=\"built_in\">dict</span>(family=<span class=\"string\">&quot;Hiragino Kaku Gothic Pro, sans-serif&quot;</span>, size=<span class=\"number\">25</span>, color=<span class=\"string\">&#x27;#000000&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">14</span>),</span><br><span class=\"line\">                                    x=<span class=\"number\">1.1</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.16</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;@miguelfzzz&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">12</span>),</span><br><span class=\"line\">                                    x=-<span class=\"number\">0.28</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.16</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;Source: 2021 Kaggle Machine Learning &amp; Data Science Survey&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/0302_1-2/6.PNG\"></p>\n<br>\n<br>","site":{"data":{}},"excerpt":"1-2. 원형그래프\n라이브러리 임포트 해주기\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\nimport pandas as pd \nimport numpy as np\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objects as go\n\n#warning 라이브러리를 이용해서 경고 메세지 숨기기\nimport warnings\nwarnings.filterwarnings('ignore')     \n\n\n\n\n\n캐글 데이터 불러오기\n\n\n\n1\n2\n\n\ndf = pd.read_c","more":"<h2 id=\"1-2-원형그래프\"><a href=\"#1-2-원형그래프\" class=\"headerlink\" title=\"1-2. 원형그래프\"></a><strong>1-2. 원형그래프</strong></h2><h3 id=\"라이브러리-임포트-해주기\"><a href=\"#라이브러리-임포트-해주기\" class=\"headerlink\" title=\"라이브러리 임포트 해주기\"></a><strong>라이브러리 임포트 해주기</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd </span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> seaborn <span class=\"keyword\">as</span> sns</span><br><span class=\"line\"><span class=\"keyword\">import</span> plotly.express <span class=\"keyword\">as</span> px</span><br><span class=\"line\"><span class=\"keyword\">import</span> plotly.graph_objects <span class=\"keyword\">as</span> go</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#warning 라이브러리를 이용해서 경고 메세지 숨기기</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> warnings</span><br><span class=\"line\">warnings.filterwarnings(<span class=\"string\">&#x27;ignore&#x27;</span>)     </span><br></pre></td></tr></table></figure>\n\n<br>\n<br>\n<br>\n\n<h3 id=\"캐글-데이터-불러오기\"><a href=\"#캐글-데이터-불러오기\" class=\"headerlink\" title=\"캐글 데이터 불러오기\"></a><strong>캐글 데이터 불러오기</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df = pd.read_csv(<span class=\"string\">&#x27;../input/kaggle-survey-2021/kaggle_survey_2021_responses.csv&#x27;</span>)</span><br><span class=\"line\">df = df.iloc[<span class=\"number\">1</span>:, :]      </span><br></pre></td></tr></table></figure>\n<br>\n\n<h3 id=\"column값이-Q2인-데이터-출력\"><a href=\"#column값이-Q2인-데이터-출력\" class=\"headerlink\" title=\"column값이 Q2인 데이터 출력\"></a><strong>column값이 Q2인 데이터 출력</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(df[<span class=\"string\">&#x27;Q2&#x27;</span>])</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/0302_1-2/1.PNG\"></p>\n<br>\n\n<h3 id=\"value-counts\"><a href=\"#value-counts\" class=\"headerlink\" title=\".value_counts()\"></a><strong>.value_counts()</strong></h3><hr>\n<ul>\n<li>.value_counts()<br>df의 ‘Q2’ 컬럼의 중복된 데이터 값들의 갯수 표시<br></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(df[<span class=\"string\">&#x27;Q2&#x27;</span>].value_counts())</span><br><span class=\"line\">   <span class=\"comment\">#Q1의 데이터 값에서 중복된 데이터 값들의 갯수를표시</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/0302_1-2/2.PNG\"></p>\n<br>\n\n<h3 id=\"gender\"><a href=\"#gender\" class=\"headerlink\" title=\"gender\"></a><strong>gender</strong></h3><hr>\n<ul>\n<li>.reset_index()<br>인덱스값을 재배열 해주는 함수</li>\n<li>.rename(columns={‘index’:’Gender’, ‘Q2’:’Count’})<br>컬럼명 변경</li>\n<li>replace(old, new, [count])<br>문자열 변경 할 수 있는 함수<br>old : 현재 문자열에서 변경하고 싶은 문자<br>new: 새로 바꿀 문자<br>count: 변경할 횟수</li>\n<li>.replace([‘Prefer not to say’,’Nonbinary’,’Prefer to self-describe’], ‘Other’)<br>count를 입력안했을때 기본값음 -1로 전체를 의미한다<br></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gender = (</span><br><span class=\"line\">    df[<span class=\"string\">&#x27;Q2&#x27;</span>]</span><br><span class=\"line\">    .value_counts()</span><br><span class=\"line\">    .to_frame()</span><br><span class=\"line\">    .reset_index()</span><br><span class=\"line\">    .rename(columns=&#123;<span class=\"string\">&#x27;index&#x27;</span>:<span class=\"string\">&#x27;Gender&#x27;</span>, <span class=\"string\">&#x27;Q2&#x27;</span>:<span class=\"string\">&#x27;Count&#x27;</span>&#125;)</span><br><span class=\"line\">    .replace([<span class=\"string\">&#x27;Prefer not to say&#x27;</span>,<span class=\"string\">&#x27;Nonbinary&#x27;</span>,<span class=\"string\">&#x27;Prefer to self-describe&#x27;</span>], <span class=\"string\">&#x27;Other&#x27;</span>)  </span><br><span class=\"line\">    .replace([<span class=\"string\">&#x27;Man&#x27;</span>,<span class=\"string\">&#x27;Woman&#x27;</span>], [<span class=\"string\">&#x27;Male&#x27;</span>, <span class=\"string\">&#x27;Female&#x27;</span>]) </span><br><span class=\"line\">    .groupby(<span class=\"string\">&#x27;Gender&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"built_in\">sum</span>()</span><br><span class=\"line\">    .reset_index()    </span><br><span class=\"line\">          )   </span><br><span class=\"line\"><span class=\"built_in\">print</span>(gender)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/0302_1-2/3.PNG\"></p>\n<br>\n\n<h3 id=\"go-Pie\"><a href=\"#go-Pie\" class=\"headerlink\" title=\"go.Pie\"></a><strong>go.Pie</strong></h3><hr>\n<ul>\n<li>fig = go.Figure<br>객체 선언</li>\n<li>go.Pie()<br>원형 그래프 그리기</li>\n<li>hole=.4<br>가운데 구멍 크기</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">colors = [<span class=\"string\">&#x27;#5abbf9&#x27;</span>,<span class=\"string\">&#x27;#033351&#x27;</span>, <span class=\"string\">&#x27;b9e2fc&#x27;</span>]</span><br><span class=\"line\">fig = go.Figure(data=[go.Pie(labels=gender[<span class=\"string\">&#x27;Gender&#x27;</span>],</span><br><span class=\"line\">                            values=gender[<span class=\"string\">&#x27;Count&#x27;</span>],</span><br><span class=\"line\">                            hole=<span class=\"number\">.4</span>)])</span><br><span class=\"line\"></span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/0302_1-2/4.PNG\"></p>\n<br>\n\n<h3 id=\"update-traces\"><a href=\"#update-traces\" class=\"headerlink\" title=\".update_traces\"></a><strong>.update_traces</strong></h3><hr>\n<ul>\n<li>hover data<br>클릭과 반응하는 인터렉티브 그래프를 구축<br>데이터의 세부 정보를 추가적으로 보여주는 팝업 정보창인 호버링<br>마우스 가져다 대면 data 정보를 볼 수 있다</li>\n<li>hoverinfo = ‘percent’<br>마우스를 그래프에 가져다 대면 퍼센트 값으로 데이터가 표시됨<br></li>\n<li>line=dict(color=’#000000’,width=1)<br>테두리 색상 값, 테두리 두께</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fig.update_traces(hoverinfo=<span class=\"string\">&#x27;percent&#x27;</span>,</span><br><span class=\"line\">                 textinfo=<span class=\"string\">&#x27;label&#x27;</span>,</span><br><span class=\"line\">                 textfont_size=<span class=\"number\">20</span>,</span><br><span class=\"line\">                 marker=<span class=\"built_in\">dict</span>(colors=colors,</span><br><span class=\"line\">                            line=<span class=\"built_in\">dict</span>(color=<span class=\"string\">&#x27;#000000&#x27;</span>,width=<span class=\"number\">1</span>)))</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/0302_1-2/7.PNG\"></p>\n<br>\n\n<h3 id=\"update-layout\"><a href=\"#update-layout\" class=\"headerlink\" title=\".update_layout\"></a><strong>.update_layout</strong></h3><hr>\n<ul>\n<li>showlegend=False<br>범례 제거<br></li>\n<li>폰트 크기, 도표 제목 설정 등등</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fig.update_layout(showlegend=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                 plot_bgcolor=<span class=\"string\">&#x27;#F7F7F7&#x27;</span>,</span><br><span class=\"line\">                 paper_bgcolor=<span class=\"string\">&#x27;#F7F7F7&#x27;</span>,</span><br><span class=\"line\">                 title_text=<span class=\"string\">&quot;&lt;b&gt;Gender&lt;/b&gt; Distrigution&quot;</span>,</span><br><span class=\"line\">                 title_x=<span class=\"number\">0.5</span>,</span><br><span class=\"line\">                 font=<span class=\"built_in\">dict</span>(family=<span class=\"string\">&quot;Hiragino Kaku Gothic Pro, sans-serif&quot;</span>,size =<span class=\"number\">25</span>,</span><br><span class=\"line\">                          color=<span class=\"string\">&#x27;#000000&#x27;</span>))</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/0302_1-2/5.PNG\"><br><br></p>\n<h3 id=\"annotation\"><a href=\"#annotation\" class=\"headerlink\" title=\"annotation\"></a><strong>annotation</strong></h3><hr>\n<ul>\n<li>annotation<br>주석</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">14</span>),</span><br><span class=\"line\">                                    x=<span class=\"number\">1.1</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.16</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;@miguelfzzz&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">12</span>),</span><br><span class=\"line\">                                    x=-<span class=\"number\">0.28</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.16</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;Source: 2021 Kaggle Machine Learning &amp; Data Science Survey&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/0302_1-2/6.PNG\"></p>\n<br>\n\n<h3 id=\"전체-코드\"><a href=\"#전체-코드\" class=\"headerlink\" title=\"전체 코드\"></a><strong>전체 코드</strong></h3><hr>\n<p>남성은 전체의 79%로 응답자의 대다수를 차지한다</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gender = (</span><br><span class=\"line\">    df[<span class=\"string\">&#x27;Q2&#x27;</span>]</span><br><span class=\"line\">    .value_counts()</span><br><span class=\"line\">    .to_frame()</span><br><span class=\"line\">    .reset_index()</span><br><span class=\"line\">    .rename(columns=&#123;<span class=\"string\">&#x27;index&#x27;</span>:<span class=\"string\">&#x27;Gender&#x27;</span>, <span class=\"string\">&#x27;Q2&#x27;</span>:<span class=\"string\">&#x27;Count&#x27;</span>&#125;)</span><br><span class=\"line\">    .replace([<span class=\"string\">&#x27;Prefer not to say&#x27;</span>,<span class=\"string\">&#x27;Nonbinary&#x27;</span>,<span class=\"string\">&#x27;Prefer to self-describe&#x27;</span>], <span class=\"string\">&#x27;Other&#x27;</span>)  </span><br><span class=\"line\">    .replace([<span class=\"string\">&#x27;Man&#x27;</span>,<span class=\"string\">&#x27;Woman&#x27;</span>], [<span class=\"string\">&#x27;Male&#x27;</span>, <span class=\"string\">&#x27;Female&#x27;</span>]) </span><br><span class=\"line\">    .groupby(<span class=\"string\">&#x27;Gender&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"built_in\">sum</span>()</span><br><span class=\"line\">    .reset_index()    </span><br><span class=\"line\">          )   </span><br><span class=\"line\"></span><br><span class=\"line\">colors = [<span class=\"string\">&#x27;#5abbf9&#x27;</span>,<span class=\"string\">&#x27;#033351&#x27;</span>, <span class=\"string\">&#x27;b9e2fc&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">fig = go.Figure(data=[go.Pie(labels=gender[<span class=\"string\">&#x27;Gender&#x27;</span>], </span><br><span class=\"line\">                             values=gender[<span class=\"string\">&#x27;Count&#x27;</span>], </span><br><span class=\"line\">                             hole=<span class=\"number\">.4</span>)])</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_traces(hoverinfo=<span class=\"string\">&#x27;percent&#x27;</span>, </span><br><span class=\"line\">                  textinfo=<span class=\"string\">&#x27;label&#x27;</span>, </span><br><span class=\"line\">                  textfont_size=<span class=\"number\">20</span>,</span><br><span class=\"line\">                  marker=<span class=\"built_in\">dict</span>(colors=colors, </span><br><span class=\"line\">                              line=<span class=\"built_in\">dict</span>(color=<span class=\"string\">&#x27;#000000&#x27;</span>, width=<span class=\"number\">1</span>)))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(showlegend=<span class=\"literal\">False</span>, </span><br><span class=\"line\">                  plot_bgcolor=<span class=\"string\">&#x27;#F7F7F7&#x27;</span>, </span><br><span class=\"line\">                  paper_bgcolor=<span class=\"string\">&#x27;#F7F7F7&#x27;</span>,</span><br><span class=\"line\">                  title_text=<span class=\"string\">&quot;&lt;b&gt;Gender&lt;/b&gt; Distribution&quot;</span>,</span><br><span class=\"line\">                  title_x=<span class=\"number\">0.5</span>,</span><br><span class=\"line\">                  font=<span class=\"built_in\">dict</span>(family=<span class=\"string\">&quot;Hiragino Kaku Gothic Pro, sans-serif&quot;</span>, size=<span class=\"number\">25</span>, color=<span class=\"string\">&#x27;#000000&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">14</span>),</span><br><span class=\"line\">                                    x=<span class=\"number\">1.1</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.16</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;@miguelfzzz&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">12</span>),</span><br><span class=\"line\">                                    x=-<span class=\"number\">0.28</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.16</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;Source: 2021 Kaggle Machine Learning &amp; Data Science Survey&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/0302_1-2/6.PNG\"></p>\n<br>\n<br>"},{"title":"막대그래프(for문, 수평)","date":"2021-11-08T15:00:00.000Z","toc":true,"thumbnail":"/images/0306_3-2/4.PNG","widgets":null,"_content":"\n### **3-2. 막대그래프 (수평)**\n---\n**라이브러리 임포트 해주기 & 캐글 데이터 불러오기 생략!**\n<br>\n\n### **startswith()**\n---\n메소드는 어떤 문자열이 특정 문자로 시작하는지 확인하여 결과를 true 혹은 false로 반환합니다.\n<br>\n- python for문 문\n>for 카운터변수 in range(반복횟수):\n>    반복해서 실행할 명령\n\n- algorithms_cols = [col for col in df if col.startswith('Q17')]\n첫번째 컬럼부터 df 끝까지 뒤의 if문이 반복된다\nif문은 컬럼 값이 문자열 Q17로 시작하는지 확인하여 true일때만 데이터 가져온다\n- col(뒤)\n카운터 변수\n- df\n반복하는 범위\n- col(앞) => List Comprehension\n반복문인 for문의 결과값을 받아주는 역할을 한다\n\n```python\nalgorithms_cols = [col for col in df if col.startswith('Q17')]\nalgorithms = df[algorithms_cols]\nprint(algorithms)\n```\n![](/images/0306_3-2/1.PNG)\n<br>\n\n### **List Comprehension**\n[참고 블로그 링크_1](https://yjs-program.tistory.com/177)\n[참고링크](https://dojang.io/mod/page/view.php?id=2285)\n---\n- 표현식\n리스트 안에 식 for문을 지정한다.\n[식 for 변수 in 리스트]\nlist(식 for 변수 in 리스트)\n\n\n<br>\n\n### **columns 이름 바꿔주기**\n---\n```python\nalgorithms.columns = ['Linear or Logistic Regression', 'Decision Trees or Random Forests', \n                     'Gradient Boosting Machines', 'Bayesian Approaches', 'Evolutionary Approaches', \n                     'Dense Neural Networks', 'Convolutional Neural Networks', 'Generative Adversarial Networks',\n                     'Recurrent Neural Networks', 'Transformer Networks', 'None', 'Other']\nprint(algorithms)\n```\n![](/images/0306_3-2/2.PNG)\n<br>\n\n### **algorithms 객체 생성**\n---\n\n```python\nalgorithms = (\n    algorithms\n    .count()\n    .to_frame()\n    .reset_index()\n    .rename(columns={'index':'Algorithms', 0:'Count'})\n    .sort_values(by=['Count'], ascending=False)\n    )\nprint(algorithms)\n```\n![](/images/0306_3-2/3.PNG)\n<br>\n\n### **percent 컬럼 추가**\n---\n```python\nalgorithms['percent'] = ((algorithms['Count'] / len(df))*100).round(2).astype(str) + '%'\nprint(algorithms)\n```\n![](/images/0306_3-2/5.PNG)\n<br>\n\n```python\ncolors = ['#033351',] * 12\ncolors[0] = '#5abbf9'\ncolors[1] = '#5abbf9'\ncolors[2] = '#066eb0'\ncolors[3] = '#066eb0'\ncolors[4] = '#044a77'\ncolors[5] = '#044a77'\ncolors[6] = '#044a77'\nfig = go.Figure(go.Bar(\n            x=algorithms['Count'],\n            y=algorithms['Algorithms'],\n            text=algorithms['percent'],\n            orientation='h',\n            marker_color=colors\n                        ))\n\nfig.update_traces(texttemplate='%{text}', \n                  textposition='outside',\n                  cliponaxis = False,\n                  hovertemplate='<b>Algorithm</b>: %{y}<br><extra></extra>'+\n                                '<b>Count</b>: %{x}',\n                  textfont_size=12)\n                  \nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\n \nfig.update_layout(showlegend=False, \n                  plot_bgcolor='#F7F7F7', \n                  margin=dict(pad=20),\n                  paper_bgcolor='#F7F7F7',\n                  xaxis={'showticklabels': False},\n                  yaxis_title=None,\n                  height = 600,\n                  xaxis_title=None,\n                  yaxis={'categoryorder':'total ascending'},\n                  title_text=\"Most Commonly Used <b>Algorithms</b>\",\n                  title_x=0.5,\n                  font=dict(family=\"Hiragino Kaku Gothic Pro, sans-serif\", size=15, color='#000000'),\n                  title_font_size=35)\n\nfig.add_annotation(dict(font=dict(size=14),\n                                    x=0.98,\n                                    y=-0.17,\n                                    showarrow=False,\n                                    text=\"@miguelfzzz\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\n\nfig.add_annotation(dict(font=dict(size=12),\n                                    x=0,\n                                    y=-0.17,\n                                    showarrow=False,\n                                    text=\"Source: 2021 Kaggle Machine Learning & Data Science Survey\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\n\n\nfig.show()\n```\n![](/images/0306_3-2/4.PNG)\n<br>\n<br>\n<br>","source":"_posts/kaggle6_막대그래프(for문).md","raw":"---\ntitle: 막대그래프(for문, 수평)\ndate: 2021-11-09\ntags: kaggle, plotly\ntoc: true\nthumbnail: /images/0306_3-2/4.PNG\ncategories: \n- kaggle 필사\nwidgets: null\n---\n\n### **3-2. 막대그래프 (수평)**\n---\n**라이브러리 임포트 해주기 & 캐글 데이터 불러오기 생략!**\n<br>\n\n### **startswith()**\n---\n메소드는 어떤 문자열이 특정 문자로 시작하는지 확인하여 결과를 true 혹은 false로 반환합니다.\n<br>\n- python for문 문\n>for 카운터변수 in range(반복횟수):\n>    반복해서 실행할 명령\n\n- algorithms_cols = [col for col in df if col.startswith('Q17')]\n첫번째 컬럼부터 df 끝까지 뒤의 if문이 반복된다\nif문은 컬럼 값이 문자열 Q17로 시작하는지 확인하여 true일때만 데이터 가져온다\n- col(뒤)\n카운터 변수\n- df\n반복하는 범위\n- col(앞) => List Comprehension\n반복문인 for문의 결과값을 받아주는 역할을 한다\n\n```python\nalgorithms_cols = [col for col in df if col.startswith('Q17')]\nalgorithms = df[algorithms_cols]\nprint(algorithms)\n```\n![](/images/0306_3-2/1.PNG)\n<br>\n\n### **List Comprehension**\n[참고 블로그 링크_1](https://yjs-program.tistory.com/177)\n[참고링크](https://dojang.io/mod/page/view.php?id=2285)\n---\n- 표현식\n리스트 안에 식 for문을 지정한다.\n[식 for 변수 in 리스트]\nlist(식 for 변수 in 리스트)\n\n\n<br>\n\n### **columns 이름 바꿔주기**\n---\n```python\nalgorithms.columns = ['Linear or Logistic Regression', 'Decision Trees or Random Forests', \n                     'Gradient Boosting Machines', 'Bayesian Approaches', 'Evolutionary Approaches', \n                     'Dense Neural Networks', 'Convolutional Neural Networks', 'Generative Adversarial Networks',\n                     'Recurrent Neural Networks', 'Transformer Networks', 'None', 'Other']\nprint(algorithms)\n```\n![](/images/0306_3-2/2.PNG)\n<br>\n\n### **algorithms 객체 생성**\n---\n\n```python\nalgorithms = (\n    algorithms\n    .count()\n    .to_frame()\n    .reset_index()\n    .rename(columns={'index':'Algorithms', 0:'Count'})\n    .sort_values(by=['Count'], ascending=False)\n    )\nprint(algorithms)\n```\n![](/images/0306_3-2/3.PNG)\n<br>\n\n### **percent 컬럼 추가**\n---\n```python\nalgorithms['percent'] = ((algorithms['Count'] / len(df))*100).round(2).astype(str) + '%'\nprint(algorithms)\n```\n![](/images/0306_3-2/5.PNG)\n<br>\n\n```python\ncolors = ['#033351',] * 12\ncolors[0] = '#5abbf9'\ncolors[1] = '#5abbf9'\ncolors[2] = '#066eb0'\ncolors[3] = '#066eb0'\ncolors[4] = '#044a77'\ncolors[5] = '#044a77'\ncolors[6] = '#044a77'\nfig = go.Figure(go.Bar(\n            x=algorithms['Count'],\n            y=algorithms['Algorithms'],\n            text=algorithms['percent'],\n            orientation='h',\n            marker_color=colors\n                        ))\n\nfig.update_traces(texttemplate='%{text}', \n                  textposition='outside',\n                  cliponaxis = False,\n                  hovertemplate='<b>Algorithm</b>: %{y}<br><extra></extra>'+\n                                '<b>Count</b>: %{x}',\n                  textfont_size=12)\n                  \nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\n \nfig.update_layout(showlegend=False, \n                  plot_bgcolor='#F7F7F7', \n                  margin=dict(pad=20),\n                  paper_bgcolor='#F7F7F7',\n                  xaxis={'showticklabels': False},\n                  yaxis_title=None,\n                  height = 600,\n                  xaxis_title=None,\n                  yaxis={'categoryorder':'total ascending'},\n                  title_text=\"Most Commonly Used <b>Algorithms</b>\",\n                  title_x=0.5,\n                  font=dict(family=\"Hiragino Kaku Gothic Pro, sans-serif\", size=15, color='#000000'),\n                  title_font_size=35)\n\nfig.add_annotation(dict(font=dict(size=14),\n                                    x=0.98,\n                                    y=-0.17,\n                                    showarrow=False,\n                                    text=\"@miguelfzzz\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\n\nfig.add_annotation(dict(font=dict(size=12),\n                                    x=0,\n                                    y=-0.17,\n                                    showarrow=False,\n                                    text=\"Source: 2021 Kaggle Machine Learning & Data Science Survey\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\n\n\nfig.show()\n```\n![](/images/0306_3-2/4.PNG)\n<br>\n<br>\n<br>","slug":"kaggle6-막대그래프-for문","published":1,"updated":"2022-01-03T12:20:08.048Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cky2hohes001c5nrjhg3k2um3","content":"<h3 id=\"3-2-막대그래프-수평\"><a href=\"#3-2-막대그래프-수평\" class=\"headerlink\" title=\"3-2. 막대그래프 (수평)\"></a><strong>3-2. 막대그래프 (수평)</strong></h3><hr>\n<p><strong>라이브러리 임포트 해주기 &amp; 캐글 데이터 불러오기 생략!</strong><br><br></p>\n<h3 id=\"startswith\"><a href=\"#startswith\" class=\"headerlink\" title=\"startswith()\"></a><strong>startswith()</strong></h3><hr>\n<p>메소드는 어떤 문자열이 특정 문자로 시작하는지 확인하여 결과를 true 혹은 false로 반환합니다.<br><br></p>\n<ul>\n<li><p>python for문 문</p>\n<blockquote>\n<p>for 카운터변수 in range(반복횟수):<br>   반복해서 실행할 명령</p>\n</blockquote>\n</li>\n<li><p>algorithms_cols = [col for col in df if col.startswith(‘Q17’)]<br>첫번째 컬럼부터 df 끝까지 뒤의 if문이 반복된다<br>if문은 컬럼 값이 문자열 Q17로 시작하는지 확인하여 true일때만 데이터 가져온다</p>\n</li>\n<li><p>col(뒤)<br>카운터 변수</p>\n</li>\n<li><p>df<br>반복하는 범위</p>\n</li>\n<li><p>col(앞) =&gt; List Comprehension<br>반복문인 for문의 결과값을 받아주는 역할을 한다</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">algorithms_cols = [col <span class=\"keyword\">for</span> col <span class=\"keyword\">in</span> df <span class=\"keyword\">if</span> col.startswith(<span class=\"string\">&#x27;Q17&#x27;</span>)]</span><br><span class=\"line\">algorithms = df[algorithms_cols]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(algorithms)</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/0306_3-2/1.PNG\"><br><br></p>\n<h3 id=\"List-Comprehension\"><a href=\"#List-Comprehension\" class=\"headerlink\" title=\"List Comprehension\"></a><strong>List Comprehension</strong></h3><p><a href=\"https://yjs-program.tistory.com/177\">참고 블로그 링크_1</a><br><a href=\"https://dojang.io/mod/page/view.php?id=2285\">참고링크</a></p>\n<hr>\n<ul>\n<li>표현식<br>리스트 안에 식 for문을 지정한다.<br>[식 for 변수 in 리스트]<br>list(식 for 변수 in 리스트)</li>\n</ul>\n<br>\n\n<h3 id=\"columns-이름-바꿔주기\"><a href=\"#columns-이름-바꿔주기\" class=\"headerlink\" title=\"columns 이름 바꿔주기\"></a><strong>columns 이름 바꿔주기</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">algorithms.columns = [<span class=\"string\">&#x27;Linear or Logistic Regression&#x27;</span>, <span class=\"string\">&#x27;Decision Trees or Random Forests&#x27;</span>, </span><br><span class=\"line\">                     <span class=\"string\">&#x27;Gradient Boosting Machines&#x27;</span>, <span class=\"string\">&#x27;Bayesian Approaches&#x27;</span>, <span class=\"string\">&#x27;Evolutionary Approaches&#x27;</span>, </span><br><span class=\"line\">                     <span class=\"string\">&#x27;Dense Neural Networks&#x27;</span>, <span class=\"string\">&#x27;Convolutional Neural Networks&#x27;</span>, <span class=\"string\">&#x27;Generative Adversarial Networks&#x27;</span>,</span><br><span class=\"line\">                     <span class=\"string\">&#x27;Recurrent Neural Networks&#x27;</span>, <span class=\"string\">&#x27;Transformer Networks&#x27;</span>, <span class=\"string\">&#x27;None&#x27;</span>, <span class=\"string\">&#x27;Other&#x27;</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(algorithms)</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/0306_3-2/2.PNG\"><br><br></p>\n<h3 id=\"algorithms-객체-생성\"><a href=\"#algorithms-객체-생성\" class=\"headerlink\" title=\"algorithms 객체 생성\"></a><strong>algorithms 객체 생성</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">algorithms = (</span><br><span class=\"line\">    algorithms</span><br><span class=\"line\">    .count()</span><br><span class=\"line\">    .to_frame()</span><br><span class=\"line\">    .reset_index()</span><br><span class=\"line\">    .rename(columns=&#123;<span class=\"string\">&#x27;index&#x27;</span>:<span class=\"string\">&#x27;Algorithms&#x27;</span>, <span class=\"number\">0</span>:<span class=\"string\">&#x27;Count&#x27;</span>&#125;)</span><br><span class=\"line\">    .sort_values(by=[<span class=\"string\">&#x27;Count&#x27;</span>], ascending=<span class=\"literal\">False</span>)</span><br><span class=\"line\">    )</span><br><span class=\"line\"><span class=\"built_in\">print</span>(algorithms)</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/0306_3-2/3.PNG\"><br><br></p>\n<h3 id=\"percent-컬럼-추가\"><a href=\"#percent-컬럼-추가\" class=\"headerlink\" title=\"percent 컬럼 추가\"></a><strong>percent 컬럼 추가</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">algorithms[<span class=\"string\">&#x27;percent&#x27;</span>] = ((algorithms[<span class=\"string\">&#x27;Count&#x27;</span>] / <span class=\"built_in\">len</span>(df))*<span class=\"number\">100</span>).<span class=\"built_in\">round</span>(<span class=\"number\">2</span>).astype(<span class=\"built_in\">str</span>) + <span class=\"string\">&#x27;%&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(algorithms)</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/0306_3-2/5.PNG\"><br><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">colors = [<span class=\"string\">&#x27;#033351&#x27;</span>,] * <span class=\"number\">12</span></span><br><span class=\"line\">colors[<span class=\"number\">0</span>] = <span class=\"string\">&#x27;#5abbf9&#x27;</span></span><br><span class=\"line\">colors[<span class=\"number\">1</span>] = <span class=\"string\">&#x27;#5abbf9&#x27;</span></span><br><span class=\"line\">colors[<span class=\"number\">2</span>] = <span class=\"string\">&#x27;#066eb0&#x27;</span></span><br><span class=\"line\">colors[<span class=\"number\">3</span>] = <span class=\"string\">&#x27;#066eb0&#x27;</span></span><br><span class=\"line\">colors[<span class=\"number\">4</span>] = <span class=\"string\">&#x27;#044a77&#x27;</span></span><br><span class=\"line\">colors[<span class=\"number\">5</span>] = <span class=\"string\">&#x27;#044a77&#x27;</span></span><br><span class=\"line\">colors[<span class=\"number\">6</span>] = <span class=\"string\">&#x27;#044a77&#x27;</span></span><br><span class=\"line\">fig = go.Figure(go.Bar(</span><br><span class=\"line\">            x=algorithms[<span class=\"string\">&#x27;Count&#x27;</span>],</span><br><span class=\"line\">            y=algorithms[<span class=\"string\">&#x27;Algorithms&#x27;</span>],</span><br><span class=\"line\">            text=algorithms[<span class=\"string\">&#x27;percent&#x27;</span>],</span><br><span class=\"line\">            orientation=<span class=\"string\">&#x27;h&#x27;</span>,</span><br><span class=\"line\">            marker_color=colors</span><br><span class=\"line\">                        ))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_traces(texttemplate=<span class=\"string\">&#x27;%&#123;text&#125;&#x27;</span>, </span><br><span class=\"line\">                  textposition=<span class=\"string\">&#x27;outside&#x27;</span>,</span><br><span class=\"line\">                  cliponaxis = <span class=\"literal\">False</span>,</span><br><span class=\"line\">                  hovertemplate=<span class=\"string\">&#x27;&lt;b&gt;Algorithm&lt;/b&gt;: %&#123;y&#125;&lt;br&gt;&lt;extra&gt;&lt;/extra&gt;&#x27;</span>+</span><br><span class=\"line\">                                <span class=\"string\">&#x27;&lt;b&gt;Count&lt;/b&gt;: %&#123;x&#125;&#x27;</span>,</span><br><span class=\"line\">                  textfont_size=<span class=\"number\">12</span>)</span><br><span class=\"line\">                  </span><br><span class=\"line\">fig.update_xaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\">fig.update_yaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\">fig.update_layout(showlegend=<span class=\"literal\">False</span>, </span><br><span class=\"line\">                  plot_bgcolor=<span class=\"string\">&#x27;#F7F7F7&#x27;</span>, </span><br><span class=\"line\">                  margin=<span class=\"built_in\">dict</span>(pad=<span class=\"number\">20</span>),</span><br><span class=\"line\">                  paper_bgcolor=<span class=\"string\">&#x27;#F7F7F7&#x27;</span>,</span><br><span class=\"line\">                  xaxis=&#123;<span class=\"string\">&#x27;showticklabels&#x27;</span>: <span class=\"literal\">False</span>&#125;,</span><br><span class=\"line\">                  yaxis_title=<span class=\"literal\">None</span>,</span><br><span class=\"line\">                  height = <span class=\"number\">600</span>,</span><br><span class=\"line\">                  xaxis_title=<span class=\"literal\">None</span>,</span><br><span class=\"line\">                  yaxis=&#123;<span class=\"string\">&#x27;categoryorder&#x27;</span>:<span class=\"string\">&#x27;total ascending&#x27;</span>&#125;,</span><br><span class=\"line\">                  title_text=<span class=\"string\">&quot;Most Commonly Used &lt;b&gt;Algorithms&lt;/b&gt;&quot;</span>,</span><br><span class=\"line\">                  title_x=<span class=\"number\">0.5</span>,</span><br><span class=\"line\">                  font=<span class=\"built_in\">dict</span>(family=<span class=\"string\">&quot;Hiragino Kaku Gothic Pro, sans-serif&quot;</span>, size=<span class=\"number\">15</span>, color=<span class=\"string\">&#x27;#000000&#x27;</span>),</span><br><span class=\"line\">                  title_font_size=<span class=\"number\">35</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">14</span>),</span><br><span class=\"line\">                                    x=<span class=\"number\">0.98</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.17</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;@miguelfzzz&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">12</span>),</span><br><span class=\"line\">                                    x=<span class=\"number\">0</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.17</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;Source: 2021 Kaggle Machine Learning &amp; Data Science Survey&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/0306_3-2/4.PNG\"><br><br><br><br><br><br></p>\n","site":{"data":{}},"excerpt":"3-2. 막대그래프 (수평)\n\n\n\n라이브러리 임포트 해주기 & 캐글 데이터 불러오기 생략!\n\n\n\nstartswith()\n\n\n\n메소드는 어떤 문자열이 특정 문자로 시작하는지 확인하여 결과를 true 혹은 false로 반환합니다.\n\n\n\n * python for문 문\n   \n   for 카운터변수 in range(반복횟수):\n   반복해서 실행할 명령\n   \n   \n * algorithms_cols = [col for col in df if col.startswith(‘Q17’)]\n   첫번째 컬럼부터 df 끝까지 뒤의 if문이 반복된다","more":"<h3 id=\"3-2-막대그래프-수평\"><a href=\"#3-2-막대그래프-수평\" class=\"headerlink\" title=\"3-2. 막대그래프 (수평)\"></a><strong>3-2. 막대그래프 (수평)</strong></h3><hr>\n<p><strong>라이브러리 임포트 해주기 &amp; 캐글 데이터 불러오기 생략!</strong><br><br></p>\n<h3 id=\"startswith\"><a href=\"#startswith\" class=\"headerlink\" title=\"startswith()\"></a><strong>startswith()</strong></h3><hr>\n<p>메소드는 어떤 문자열이 특정 문자로 시작하는지 확인하여 결과를 true 혹은 false로 반환합니다.<br><br></p>\n<ul>\n<li><p>python for문 문</p>\n<blockquote>\n<p>for 카운터변수 in range(반복횟수):<br>   반복해서 실행할 명령</p>\n</blockquote>\n</li>\n<li><p>algorithms_cols = [col for col in df if col.startswith(‘Q17’)]<br>첫번째 컬럼부터 df 끝까지 뒤의 if문이 반복된다<br>if문은 컬럼 값이 문자열 Q17로 시작하는지 확인하여 true일때만 데이터 가져온다</p>\n</li>\n<li><p>col(뒤)<br>카운터 변수</p>\n</li>\n<li><p>df<br>반복하는 범위</p>\n</li>\n<li><p>col(앞) =&gt; List Comprehension<br>반복문인 for문의 결과값을 받아주는 역할을 한다</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">algorithms_cols = [col <span class=\"keyword\">for</span> col <span class=\"keyword\">in</span> df <span class=\"keyword\">if</span> col.startswith(<span class=\"string\">&#x27;Q17&#x27;</span>)]</span><br><span class=\"line\">algorithms = df[algorithms_cols]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(algorithms)</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/0306_3-2/1.PNG\"><br><br></p>\n<h3 id=\"List-Comprehension\"><a href=\"#List-Comprehension\" class=\"headerlink\" title=\"List Comprehension\"></a><strong>List Comprehension</strong></h3><p><a href=\"https://yjs-program.tistory.com/177\">참고 블로그 링크_1</a><br><a href=\"https://dojang.io/mod/page/view.php?id=2285\">참고링크</a></p>\n<hr>\n<ul>\n<li>표현식<br>리스트 안에 식 for문을 지정한다.<br>[식 for 변수 in 리스트]<br>list(식 for 변수 in 리스트)</li>\n</ul>\n<br>\n\n<h3 id=\"columns-이름-바꿔주기\"><a href=\"#columns-이름-바꿔주기\" class=\"headerlink\" title=\"columns 이름 바꿔주기\"></a><strong>columns 이름 바꿔주기</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">algorithms.columns = [<span class=\"string\">&#x27;Linear or Logistic Regression&#x27;</span>, <span class=\"string\">&#x27;Decision Trees or Random Forests&#x27;</span>, </span><br><span class=\"line\">                     <span class=\"string\">&#x27;Gradient Boosting Machines&#x27;</span>, <span class=\"string\">&#x27;Bayesian Approaches&#x27;</span>, <span class=\"string\">&#x27;Evolutionary Approaches&#x27;</span>, </span><br><span class=\"line\">                     <span class=\"string\">&#x27;Dense Neural Networks&#x27;</span>, <span class=\"string\">&#x27;Convolutional Neural Networks&#x27;</span>, <span class=\"string\">&#x27;Generative Adversarial Networks&#x27;</span>,</span><br><span class=\"line\">                     <span class=\"string\">&#x27;Recurrent Neural Networks&#x27;</span>, <span class=\"string\">&#x27;Transformer Networks&#x27;</span>, <span class=\"string\">&#x27;None&#x27;</span>, <span class=\"string\">&#x27;Other&#x27;</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(algorithms)</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/0306_3-2/2.PNG\"><br><br></p>\n<h3 id=\"algorithms-객체-생성\"><a href=\"#algorithms-객체-생성\" class=\"headerlink\" title=\"algorithms 객체 생성\"></a><strong>algorithms 객체 생성</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">algorithms = (</span><br><span class=\"line\">    algorithms</span><br><span class=\"line\">    .count()</span><br><span class=\"line\">    .to_frame()</span><br><span class=\"line\">    .reset_index()</span><br><span class=\"line\">    .rename(columns=&#123;<span class=\"string\">&#x27;index&#x27;</span>:<span class=\"string\">&#x27;Algorithms&#x27;</span>, <span class=\"number\">0</span>:<span class=\"string\">&#x27;Count&#x27;</span>&#125;)</span><br><span class=\"line\">    .sort_values(by=[<span class=\"string\">&#x27;Count&#x27;</span>], ascending=<span class=\"literal\">False</span>)</span><br><span class=\"line\">    )</span><br><span class=\"line\"><span class=\"built_in\">print</span>(algorithms)</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/0306_3-2/3.PNG\"><br><br></p>\n<h3 id=\"percent-컬럼-추가\"><a href=\"#percent-컬럼-추가\" class=\"headerlink\" title=\"percent 컬럼 추가\"></a><strong>percent 컬럼 추가</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">algorithms[<span class=\"string\">&#x27;percent&#x27;</span>] = ((algorithms[<span class=\"string\">&#x27;Count&#x27;</span>] / <span class=\"built_in\">len</span>(df))*<span class=\"number\">100</span>).<span class=\"built_in\">round</span>(<span class=\"number\">2</span>).astype(<span class=\"built_in\">str</span>) + <span class=\"string\">&#x27;%&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(algorithms)</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/0306_3-2/5.PNG\"><br><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">colors = [<span class=\"string\">&#x27;#033351&#x27;</span>,] * <span class=\"number\">12</span></span><br><span class=\"line\">colors[<span class=\"number\">0</span>] = <span class=\"string\">&#x27;#5abbf9&#x27;</span></span><br><span class=\"line\">colors[<span class=\"number\">1</span>] = <span class=\"string\">&#x27;#5abbf9&#x27;</span></span><br><span class=\"line\">colors[<span class=\"number\">2</span>] = <span class=\"string\">&#x27;#066eb0&#x27;</span></span><br><span class=\"line\">colors[<span class=\"number\">3</span>] = <span class=\"string\">&#x27;#066eb0&#x27;</span></span><br><span class=\"line\">colors[<span class=\"number\">4</span>] = <span class=\"string\">&#x27;#044a77&#x27;</span></span><br><span class=\"line\">colors[<span class=\"number\">5</span>] = <span class=\"string\">&#x27;#044a77&#x27;</span></span><br><span class=\"line\">colors[<span class=\"number\">6</span>] = <span class=\"string\">&#x27;#044a77&#x27;</span></span><br><span class=\"line\">fig = go.Figure(go.Bar(</span><br><span class=\"line\">            x=algorithms[<span class=\"string\">&#x27;Count&#x27;</span>],</span><br><span class=\"line\">            y=algorithms[<span class=\"string\">&#x27;Algorithms&#x27;</span>],</span><br><span class=\"line\">            text=algorithms[<span class=\"string\">&#x27;percent&#x27;</span>],</span><br><span class=\"line\">            orientation=<span class=\"string\">&#x27;h&#x27;</span>,</span><br><span class=\"line\">            marker_color=colors</span><br><span class=\"line\">                        ))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_traces(texttemplate=<span class=\"string\">&#x27;%&#123;text&#125;&#x27;</span>, </span><br><span class=\"line\">                  textposition=<span class=\"string\">&#x27;outside&#x27;</span>,</span><br><span class=\"line\">                  cliponaxis = <span class=\"literal\">False</span>,</span><br><span class=\"line\">                  hovertemplate=<span class=\"string\">&#x27;&lt;b&gt;Algorithm&lt;/b&gt;: %&#123;y&#125;&lt;br&gt;&lt;extra&gt;&lt;/extra&gt;&#x27;</span>+</span><br><span class=\"line\">                                <span class=\"string\">&#x27;&lt;b&gt;Count&lt;/b&gt;: %&#123;x&#125;&#x27;</span>,</span><br><span class=\"line\">                  textfont_size=<span class=\"number\">12</span>)</span><br><span class=\"line\">                  </span><br><span class=\"line\">fig.update_xaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\">fig.update_yaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\">fig.update_layout(showlegend=<span class=\"literal\">False</span>, </span><br><span class=\"line\">                  plot_bgcolor=<span class=\"string\">&#x27;#F7F7F7&#x27;</span>, </span><br><span class=\"line\">                  margin=<span class=\"built_in\">dict</span>(pad=<span class=\"number\">20</span>),</span><br><span class=\"line\">                  paper_bgcolor=<span class=\"string\">&#x27;#F7F7F7&#x27;</span>,</span><br><span class=\"line\">                  xaxis=&#123;<span class=\"string\">&#x27;showticklabels&#x27;</span>: <span class=\"literal\">False</span>&#125;,</span><br><span class=\"line\">                  yaxis_title=<span class=\"literal\">None</span>,</span><br><span class=\"line\">                  height = <span class=\"number\">600</span>,</span><br><span class=\"line\">                  xaxis_title=<span class=\"literal\">None</span>,</span><br><span class=\"line\">                  yaxis=&#123;<span class=\"string\">&#x27;categoryorder&#x27;</span>:<span class=\"string\">&#x27;total ascending&#x27;</span>&#125;,</span><br><span class=\"line\">                  title_text=<span class=\"string\">&quot;Most Commonly Used &lt;b&gt;Algorithms&lt;/b&gt;&quot;</span>,</span><br><span class=\"line\">                  title_x=<span class=\"number\">0.5</span>,</span><br><span class=\"line\">                  font=<span class=\"built_in\">dict</span>(family=<span class=\"string\">&quot;Hiragino Kaku Gothic Pro, sans-serif&quot;</span>, size=<span class=\"number\">15</span>, color=<span class=\"string\">&#x27;#000000&#x27;</span>),</span><br><span class=\"line\">                  title_font_size=<span class=\"number\">35</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">14</span>),</span><br><span class=\"line\">                                    x=<span class=\"number\">0.98</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.17</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;@miguelfzzz&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">12</span>),</span><br><span class=\"line\">                                    x=<span class=\"number\">0</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.17</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;Source: 2021 Kaggle Machine Learning &amp; Data Science Survey&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/0306_3-2/4.PNG\"><br><br><br><br><br><br></p>\n"},{"title":"막대그래프(Bar, 수평)","date":"2021-11-07T15:00:00.000Z","toc":true,"thumbnail":"/images/0304_2-1/9.PNG","widgets":null,"_content":"\n### **2. Education & Occupation**\n---\n응답자의 77% 이상이 학사 및/또는 석사 학위를 가지고 있습니다.\n<br>\n\n## **2-1. 막대그래프(수평)**\n### **캐글 데이터 불러오기**\n---\n```python\n# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session\n```\n<br>\n\n### **라이브러리 임포트 해주기**\n---\n- import plotly.express as px\n- import plotly.graph_objects as go\n\nPlotly는 그래프를 만드는데에는 두가지 방법이 있다 \n- **px** \nexpress의 줄임으로\n빠르게 그래프를 제작\n- **go**\n그래프를 하나하나 설정하여 제작\n\n\n```python\nimport pandas as pd \nimport numpy as np\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objects as go\n\n#warning 라이브러리를 이용해서 경고 메세지 숨기기\nimport warnings\nwarnings.filterwarnings('ignore')   \n```\n\n\n```python\ndf = pd.read_csv('../input/kaggle-survey-2021/kaggle_survey_2021_responses.csv')\ndf = df.iloc[1:, :]     \nprint(df)\n```\n![](/images/0304_2-1/1.PNG)\n<br>\n\n### **dataframe 생성**\n---\n- education\neducation이라는 데이터 프레임을 만들어줌\n컬럼 값으로 Q4의 데이터 값을 가졌음\n- .value_counts()\nQ4의 컬럼의 중복된 데이터 값들의 갯수 표시\n- .to_frame()\n데이터 프레임으로 변환\n- .reset_index()\n컬럼명 인덱스가 아닌 행 번호 인덱스(숫자)를 사용하고 싶을때 사용\n밑의 예시 참고.\n- replace(old, new, [count])\n문자열 변경 할 수 있는 함수\nold : 현재 문자열에서 변경하고 싶은 문자\nnew: 새로 바꿀 문자\ncount: 변경할 횟수\n\n\n```python\nprint(df['Q4'])\n```\n![](/images/0304_2-1/2.PNG)\n\n```python\nprint(df['Q4'].value_counts())\n```\n![](/images/0304_2-1/3.PNG)\n\n```python\neducation = (\n    df['Q4']\n    .value_counts()\n    .to_frame()\n    .reset_index()\n    .rename(columns={'index':'Education', 'Q4':'Count'})\n    .replace(['Some college/university study without earning a bachelor’s degree'], 'University studies - No degree')\n          )  \neducation['percent'] = ((education['Count'] / education['Count'].sum())*100).round(2).astype(str) + '%'\n\nprint(education)\n```\n![](/images/0304_2-1/4.PNG)\n<br>\n\n### **colors**\n---\n색상의 범위를 정해줌 \n\n\n```python\ncolors = ['#033351',] * 7   #남색\ncolors[0] = '#5abbf9' #맨위의 색 하늘색\ncolors[1] = '#5abbf9'\ncolors[2] = '#0779c3' #진하늘색\ncolors[3] = '#0779c3'\n```\n<br>\n\n### **go.figure**\n---\n\n- x=education['Count']\neducation 컬럼 Count의 data 값을 x축에 대입\n- y=education['Education']\neducation 컬럼 Education의 data 값을y 축에 대입\n- text=education['percent']\n문자열을 추가해줌\n이때 education 데이터프레임의 컬럼 percent의 데이터 값을 추가함\n- orientation='h'\nh는 horizontal bar을 의미한다.\n이 문장을 입력하지 않을때 수평 바가 만들어지지 않는다\n- marker_color=colors\n위에 정의해준 colors 값으로 그래프를 다른 색으로 표현함\n\n\n```python\nfig = go.Figure(go.Bar(\n            x = education['Count'],\n            y = education['Education'],\n            text = education['percent'],\n            orientation = 'h',\n            marker_color = colors\n                        ))\nfig.show()\n```\n![](/images/0304_2-1/5.PNG)\n<br>\n\n- orientation='h'가 없을때\n---\n\n\n```python\nfig = go.Figure(go.Bar(\n            x=education['Count'],\n            y=education['Education'],\n            text=education['percent'],\n            marker_color=colors\n                        ))\nfig.show()\n```\n![](/images/0304_2-1/6.PNG)\n<br>\n\n### **update_traces()**\n---\n여러가지 그래프를 한번에 업데이트 할 수 있다\n예를들면 Scatter(), bar()를 동시에 포함할 수 있다\n\n\n```python\nfig.update_traces(texttemplate='%{text}', \n                  textposition='outside',\n                  cliponaxis = False,\n                  hovertemplate='<b>Education</b>: %{y}<br><extra></extra>'+\n                                '<b>Count</b>: %{x}',\n                  textfont_size=12)\n                  \nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\n```\n![](/images/0304_2-1/7.PNG)\n<br>\n\n### **.update_layout()**\n---\n\n```python\nfig.update_layout(showlegend=False, \n                  plot_bgcolor='#F7F7F7', \n                  margin=dict(pad=20),\n                  paper_bgcolor='#F7F7F7',\n                  xaxis={'showticklabels': False},\n                  yaxis_title=None,\n                  xaxis_title=None,\n                  yaxis={'categoryorder':'total ascending'},\n                  title_text=\"<b>Education</b> Distribution\",\n                  title_x=0.5,\n                  font=dict(family=\"Hiragino Kaku Gothic Pro, sans-serif\", size=15, color='#000000'),\n                  title_font_size=35)\n```\n![](/images/0304_2-1/8.PNG)\n<br>\n\n\n### **annotation**\n---\n\n\n```python\nfig.add_annotation(dict(font=dict(size=14),\n                                    x=0.98,\n                                    y=-0.21,\n                                    showarrow=False,\n                                    text=\"@miguelfzzz\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\n\nfig.add_annotation(dict(font=dict(size=12),\n                                    x=0,\n                                    y=-0.21,\n                                    showarrow=False,\n                                    text=\"Source: 2021 Kaggle Machine Learning & Data Science Survey\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\n\nfig.show()\n```\n<br>\n\n### **전체코드**\n\n\n```python\neducation = (\n    df['Q4']\n    .value_counts()\n    .to_frame()\n    .reset_index()\n    .rename(columns={'index':'Education', 'Q4':'Count'})\n    .replace(['Some college/university study without earning a bachelor’s degree'], 'University studies - No degree')\n          )  \n\neducation['percent'] = ((education['Count'] / education['Count'].sum())*100).round(2).astype(str) + '%'\n\ncolors = ['#033351',]*7\ncolors[0] = '#5abbf9'\ncolors[1] = '#5abbf9'\ncolors[2] = '#0779c3'\ncolors[3] = '#0779c3'\n\n\nfig = go.Figure(go.Bar(\n            x=education['Count'],\n            y=education['Education'],\n            text=education['percent'],\n            orientation='h',\n            marker_color=colors\n                        ))\n\nfig.update_traces(texttemplate='%{text}', \n                  textposition='outside',\n                  cliponaxis = False,\n                  hovertemplate='<b>Education</b>: %{y}<br><extra></extra>'+\n                                '<b>Count</b>: %{x}',\n                  textfont_size=12)\n                  \nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\n \nfig.update_layout(showlegend=False, \n                  plot_bgcolor='#F7F7F7', \n                  margin=dict(pad=20),\n                  paper_bgcolor='#F7F7F7',\n                  xaxis={'showticklabels': False},\n                  yaxis_title=None,\n                  xaxis_title=None,\n                  yaxis={'categoryorder':'total ascending'},\n                  title_text=\"<b>Education</b> Distribution\",\n                  title_x=0.5,\n                  font=dict(family=\"Hiragino Kaku Gothic Pro, sans-serif\", size=15, color='#000000'),\n                  title_font_size=35)\n\nfig.add_annotation(dict(font=dict(size=14),\n                                    x=0.98,\n                                    y=-0.21,\n                                    showarrow=False,\n                                    text=\"@miguelfzzz\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\n\nfig.add_annotation(dict(font=dict(size=12),\n                                    x=0,\n                                    y=-0.21,\n                                    showarrow=False,\n                                    text=\"Source: 2021 Kaggle Machine Learning & Data Science Survey\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\n\nfig.show()\n```\n![](/images/0304_2-1/9.PNG)\n<br>\n<br>","source":"_posts/kaggle4_막대그래프(수평).md","raw":"---\ntitle: 막대그래프(Bar, 수평)\ndate: 2021-11-08\ntags: kaggle, plotly\ntoc: true\nthumbnail: /images/0304_2-1/9.PNG\ncategories: \n- kaggle 필사\nwidgets: null\n---\n\n### **2. Education & Occupation**\n---\n응답자의 77% 이상이 학사 및/또는 석사 학위를 가지고 있습니다.\n<br>\n\n## **2-1. 막대그래프(수평)**\n### **캐글 데이터 불러오기**\n---\n```python\n# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session\n```\n<br>\n\n### **라이브러리 임포트 해주기**\n---\n- import plotly.express as px\n- import plotly.graph_objects as go\n\nPlotly는 그래프를 만드는데에는 두가지 방법이 있다 \n- **px** \nexpress의 줄임으로\n빠르게 그래프를 제작\n- **go**\n그래프를 하나하나 설정하여 제작\n\n\n```python\nimport pandas as pd \nimport numpy as np\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objects as go\n\n#warning 라이브러리를 이용해서 경고 메세지 숨기기\nimport warnings\nwarnings.filterwarnings('ignore')   \n```\n\n\n```python\ndf = pd.read_csv('../input/kaggle-survey-2021/kaggle_survey_2021_responses.csv')\ndf = df.iloc[1:, :]     \nprint(df)\n```\n![](/images/0304_2-1/1.PNG)\n<br>\n\n### **dataframe 생성**\n---\n- education\neducation이라는 데이터 프레임을 만들어줌\n컬럼 값으로 Q4의 데이터 값을 가졌음\n- .value_counts()\nQ4의 컬럼의 중복된 데이터 값들의 갯수 표시\n- .to_frame()\n데이터 프레임으로 변환\n- .reset_index()\n컬럼명 인덱스가 아닌 행 번호 인덱스(숫자)를 사용하고 싶을때 사용\n밑의 예시 참고.\n- replace(old, new, [count])\n문자열 변경 할 수 있는 함수\nold : 현재 문자열에서 변경하고 싶은 문자\nnew: 새로 바꿀 문자\ncount: 변경할 횟수\n\n\n```python\nprint(df['Q4'])\n```\n![](/images/0304_2-1/2.PNG)\n\n```python\nprint(df['Q4'].value_counts())\n```\n![](/images/0304_2-1/3.PNG)\n\n```python\neducation = (\n    df['Q4']\n    .value_counts()\n    .to_frame()\n    .reset_index()\n    .rename(columns={'index':'Education', 'Q4':'Count'})\n    .replace(['Some college/university study without earning a bachelor’s degree'], 'University studies - No degree')\n          )  \neducation['percent'] = ((education['Count'] / education['Count'].sum())*100).round(2).astype(str) + '%'\n\nprint(education)\n```\n![](/images/0304_2-1/4.PNG)\n<br>\n\n### **colors**\n---\n색상의 범위를 정해줌 \n\n\n```python\ncolors = ['#033351',] * 7   #남색\ncolors[0] = '#5abbf9' #맨위의 색 하늘색\ncolors[1] = '#5abbf9'\ncolors[2] = '#0779c3' #진하늘색\ncolors[3] = '#0779c3'\n```\n<br>\n\n### **go.figure**\n---\n\n- x=education['Count']\neducation 컬럼 Count의 data 값을 x축에 대입\n- y=education['Education']\neducation 컬럼 Education의 data 값을y 축에 대입\n- text=education['percent']\n문자열을 추가해줌\n이때 education 데이터프레임의 컬럼 percent의 데이터 값을 추가함\n- orientation='h'\nh는 horizontal bar을 의미한다.\n이 문장을 입력하지 않을때 수평 바가 만들어지지 않는다\n- marker_color=colors\n위에 정의해준 colors 값으로 그래프를 다른 색으로 표현함\n\n\n```python\nfig = go.Figure(go.Bar(\n            x = education['Count'],\n            y = education['Education'],\n            text = education['percent'],\n            orientation = 'h',\n            marker_color = colors\n                        ))\nfig.show()\n```\n![](/images/0304_2-1/5.PNG)\n<br>\n\n- orientation='h'가 없을때\n---\n\n\n```python\nfig = go.Figure(go.Bar(\n            x=education['Count'],\n            y=education['Education'],\n            text=education['percent'],\n            marker_color=colors\n                        ))\nfig.show()\n```\n![](/images/0304_2-1/6.PNG)\n<br>\n\n### **update_traces()**\n---\n여러가지 그래프를 한번에 업데이트 할 수 있다\n예를들면 Scatter(), bar()를 동시에 포함할 수 있다\n\n\n```python\nfig.update_traces(texttemplate='%{text}', \n                  textposition='outside',\n                  cliponaxis = False,\n                  hovertemplate='<b>Education</b>: %{y}<br><extra></extra>'+\n                                '<b>Count</b>: %{x}',\n                  textfont_size=12)\n                  \nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\n```\n![](/images/0304_2-1/7.PNG)\n<br>\n\n### **.update_layout()**\n---\n\n```python\nfig.update_layout(showlegend=False, \n                  plot_bgcolor='#F7F7F7', \n                  margin=dict(pad=20),\n                  paper_bgcolor='#F7F7F7',\n                  xaxis={'showticklabels': False},\n                  yaxis_title=None,\n                  xaxis_title=None,\n                  yaxis={'categoryorder':'total ascending'},\n                  title_text=\"<b>Education</b> Distribution\",\n                  title_x=0.5,\n                  font=dict(family=\"Hiragino Kaku Gothic Pro, sans-serif\", size=15, color='#000000'),\n                  title_font_size=35)\n```\n![](/images/0304_2-1/8.PNG)\n<br>\n\n\n### **annotation**\n---\n\n\n```python\nfig.add_annotation(dict(font=dict(size=14),\n                                    x=0.98,\n                                    y=-0.21,\n                                    showarrow=False,\n                                    text=\"@miguelfzzz\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\n\nfig.add_annotation(dict(font=dict(size=12),\n                                    x=0,\n                                    y=-0.21,\n                                    showarrow=False,\n                                    text=\"Source: 2021 Kaggle Machine Learning & Data Science Survey\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\n\nfig.show()\n```\n<br>\n\n### **전체코드**\n\n\n```python\neducation = (\n    df['Q4']\n    .value_counts()\n    .to_frame()\n    .reset_index()\n    .rename(columns={'index':'Education', 'Q4':'Count'})\n    .replace(['Some college/university study without earning a bachelor’s degree'], 'University studies - No degree')\n          )  \n\neducation['percent'] = ((education['Count'] / education['Count'].sum())*100).round(2).astype(str) + '%'\n\ncolors = ['#033351',]*7\ncolors[0] = '#5abbf9'\ncolors[1] = '#5abbf9'\ncolors[2] = '#0779c3'\ncolors[3] = '#0779c3'\n\n\nfig = go.Figure(go.Bar(\n            x=education['Count'],\n            y=education['Education'],\n            text=education['percent'],\n            orientation='h',\n            marker_color=colors\n                        ))\n\nfig.update_traces(texttemplate='%{text}', \n                  textposition='outside',\n                  cliponaxis = False,\n                  hovertemplate='<b>Education</b>: %{y}<br><extra></extra>'+\n                                '<b>Count</b>: %{x}',\n                  textfont_size=12)\n                  \nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\n \nfig.update_layout(showlegend=False, \n                  plot_bgcolor='#F7F7F7', \n                  margin=dict(pad=20),\n                  paper_bgcolor='#F7F7F7',\n                  xaxis={'showticklabels': False},\n                  yaxis_title=None,\n                  xaxis_title=None,\n                  yaxis={'categoryorder':'total ascending'},\n                  title_text=\"<b>Education</b> Distribution\",\n                  title_x=0.5,\n                  font=dict(family=\"Hiragino Kaku Gothic Pro, sans-serif\", size=15, color='#000000'),\n                  title_font_size=35)\n\nfig.add_annotation(dict(font=dict(size=14),\n                                    x=0.98,\n                                    y=-0.21,\n                                    showarrow=False,\n                                    text=\"@miguelfzzz\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\n\nfig.add_annotation(dict(font=dict(size=12),\n                                    x=0,\n                                    y=-0.21,\n                                    showarrow=False,\n                                    text=\"Source: 2021 Kaggle Machine Learning & Data Science Survey\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\n\nfig.show()\n```\n![](/images/0304_2-1/9.PNG)\n<br>\n<br>","slug":"kaggle4-막대그래프-수평","published":1,"updated":"2022-01-03T12:20:08.048Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cky2hohet001f5nrj30172m79","content":"<h3 id=\"2-Education-amp-Occupation\"><a href=\"#2-Education-amp-Occupation\" class=\"headerlink\" title=\"2. Education &amp; Occupation\"></a><strong>2. Education &amp; Occupation</strong></h3><hr>\n<p>응답자의 77% 이상이 학사 및/또는 석사 학위를 가지고 있습니다.<br><br></p>\n<h2 id=\"2-1-막대그래프-수평\"><a href=\"#2-1-막대그래프-수평\" class=\"headerlink\" title=\"2-1. 막대그래프(수평)\"></a><strong>2-1. 막대그래프(수평)</strong></h2><h3 id=\"캐글-데이터-불러오기\"><a href=\"#캐글-데이터-불러오기\" class=\"headerlink\" title=\"캐글 데이터 불러오기\"></a><strong>캐글 데이터 불러오기</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># This Python 3 environment comes with many helpful analytics libraries installed</span></span><br><span class=\"line\"><span class=\"comment\"># It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python</span></span><br><span class=\"line\"><span class=\"comment\"># For example, here&#x27;s several helpful packages to load</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np <span class=\"comment\"># linear algebra</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd <span class=\"comment\"># data processing, CSV file I/O (e.g. pd.read_csv)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Input data files are available in the read-only &quot;../input/&quot; directory</span></span><br><span class=\"line\"><span class=\"comment\"># For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">for</span> dirname, _, filenames <span class=\"keyword\">in</span> os.walk(<span class=\"string\">&#x27;/kaggle/input&#x27;</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> filename <span class=\"keyword\">in</span> filenames:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(os.path.join(dirname, filename))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using &quot;Save &amp; Run All&quot; </span></span><br><span class=\"line\"><span class=\"comment\"># You can also write temporary files to /kaggle/temp/, but they won&#x27;t be saved outside of the current session</span></span><br></pre></td></tr></table></figure>\n<br>\n\n<h3 id=\"라이브러리-임포트-해주기\"><a href=\"#라이브러리-임포트-해주기\" class=\"headerlink\" title=\"라이브러리 임포트 해주기\"></a><strong>라이브러리 임포트 해주기</strong></h3><hr>\n<ul>\n<li>import plotly.express as px</li>\n<li>import plotly.graph_objects as go</li>\n</ul>\n<p>Plotly는 그래프를 만드는데에는 두가지 방법이 있다 </p>\n<ul>\n<li><strong>px</strong><br>express의 줄임으로<br>빠르게 그래프를 제작</li>\n<li><strong>go</strong><br>그래프를 하나하나 설정하여 제작</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd </span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> seaborn <span class=\"keyword\">as</span> sns</span><br><span class=\"line\"><span class=\"keyword\">import</span> plotly.express <span class=\"keyword\">as</span> px</span><br><span class=\"line\"><span class=\"keyword\">import</span> plotly.graph_objects <span class=\"keyword\">as</span> go</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#warning 라이브러리를 이용해서 경고 메세지 숨기기</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> warnings</span><br><span class=\"line\">warnings.filterwarnings(<span class=\"string\">&#x27;ignore&#x27;</span>)   </span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df = pd.read_csv(<span class=\"string\">&#x27;../input/kaggle-survey-2021/kaggle_survey_2021_responses.csv&#x27;</span>)</span><br><span class=\"line\">df = df.iloc[<span class=\"number\">1</span>:, :]     </span><br><span class=\"line\"><span class=\"built_in\">print</span>(df)</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/0304_2-1/1.PNG\"><br><br></p>\n<h3 id=\"dataframe-생성\"><a href=\"#dataframe-생성\" class=\"headerlink\" title=\"dataframe 생성\"></a><strong>dataframe 생성</strong></h3><hr>\n<ul>\n<li>education<br>education이라는 데이터 프레임을 만들어줌<br>컬럼 값으로 Q4의 데이터 값을 가졌음</li>\n<li>.value_counts()<br>Q4의 컬럼의 중복된 데이터 값들의 갯수 표시</li>\n<li>.to_frame()<br>데이터 프레임으로 변환</li>\n<li>.reset_index()<br>컬럼명 인덱스가 아닌 행 번호 인덱스(숫자)를 사용하고 싶을때 사용<br>밑의 예시 참고.</li>\n<li>replace(old, new, [count])<br>문자열 변경 할 수 있는 함수<br>old : 현재 문자열에서 변경하고 싶은 문자<br>new: 새로 바꿀 문자<br>count: 변경할 횟수</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(df[<span class=\"string\">&#x27;Q4&#x27;</span>])</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/0304_2-1/2.PNG\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(df[<span class=\"string\">&#x27;Q4&#x27;</span>].value_counts())</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/0304_2-1/3.PNG\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">education = (</span><br><span class=\"line\">    df[<span class=\"string\">&#x27;Q4&#x27;</span>]</span><br><span class=\"line\">    .value_counts()</span><br><span class=\"line\">    .to_frame()</span><br><span class=\"line\">    .reset_index()</span><br><span class=\"line\">    .rename(columns=&#123;<span class=\"string\">&#x27;index&#x27;</span>:<span class=\"string\">&#x27;Education&#x27;</span>, <span class=\"string\">&#x27;Q4&#x27;</span>:<span class=\"string\">&#x27;Count&#x27;</span>&#125;)</span><br><span class=\"line\">    .replace([<span class=\"string\">&#x27;Some college/university study without earning a bachelor’s degree&#x27;</span>], <span class=\"string\">&#x27;University studies - No degree&#x27;</span>)</span><br><span class=\"line\">          )  </span><br><span class=\"line\">education[<span class=\"string\">&#x27;percent&#x27;</span>] = ((education[<span class=\"string\">&#x27;Count&#x27;</span>] / education[<span class=\"string\">&#x27;Count&#x27;</span>].<span class=\"built_in\">sum</span>())*<span class=\"number\">100</span>).<span class=\"built_in\">round</span>(<span class=\"number\">2</span>).astype(<span class=\"built_in\">str</span>) + <span class=\"string\">&#x27;%&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(education)</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/0304_2-1/4.PNG\"><br><br></p>\n<h3 id=\"colors\"><a href=\"#colors\" class=\"headerlink\" title=\"colors\"></a><strong>colors</strong></h3><hr>\n<p>색상의 범위를 정해줌 </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">colors = [<span class=\"string\">&#x27;#033351&#x27;</span>,] * <span class=\"number\">7</span>   <span class=\"comment\">#남색</span></span><br><span class=\"line\">colors[<span class=\"number\">0</span>] = <span class=\"string\">&#x27;#5abbf9&#x27;</span> <span class=\"comment\">#맨위의 색 하늘색</span></span><br><span class=\"line\">colors[<span class=\"number\">1</span>] = <span class=\"string\">&#x27;#5abbf9&#x27;</span></span><br><span class=\"line\">colors[<span class=\"number\">2</span>] = <span class=\"string\">&#x27;#0779c3&#x27;</span> <span class=\"comment\">#진하늘색</span></span><br><span class=\"line\">colors[<span class=\"number\">3</span>] = <span class=\"string\">&#x27;#0779c3&#x27;</span></span><br></pre></td></tr></table></figure>\n<br>\n\n<h3 id=\"go-figure\"><a href=\"#go-figure\" class=\"headerlink\" title=\"go.figure\"></a><strong>go.figure</strong></h3><hr>\n<ul>\n<li>x=education[‘Count’]<br>education 컬럼 Count의 data 값을 x축에 대입</li>\n<li>y=education[‘Education’]<br>education 컬럼 Education의 data 값을y 축에 대입</li>\n<li>text=education[‘percent’]<br>문자열을 추가해줌<br>이때 education 데이터프레임의 컬럼 percent의 데이터 값을 추가함</li>\n<li>orientation=’h’<br>h는 horizontal bar을 의미한다.<br>이 문장을 입력하지 않을때 수평 바가 만들어지지 않는다</li>\n<li>marker_color=colors<br>위에 정의해준 colors 값으로 그래프를 다른 색으로 표현함</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fig = go.Figure(go.Bar(</span><br><span class=\"line\">            x = education[<span class=\"string\">&#x27;Count&#x27;</span>],</span><br><span class=\"line\">            y = education[<span class=\"string\">&#x27;Education&#x27;</span>],</span><br><span class=\"line\">            text = education[<span class=\"string\">&#x27;percent&#x27;</span>],</span><br><span class=\"line\">            orientation = <span class=\"string\">&#x27;h&#x27;</span>,</span><br><span class=\"line\">            marker_color = colors</span><br><span class=\"line\">                        ))</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/0304_2-1/5.PNG\"><br><br></p>\n<ul>\n<li>orientation=’h’가 없을때</li>\n</ul>\n<hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fig = go.Figure(go.Bar(</span><br><span class=\"line\">            x=education[<span class=\"string\">&#x27;Count&#x27;</span>],</span><br><span class=\"line\">            y=education[<span class=\"string\">&#x27;Education&#x27;</span>],</span><br><span class=\"line\">            text=education[<span class=\"string\">&#x27;percent&#x27;</span>],</span><br><span class=\"line\">            marker_color=colors</span><br><span class=\"line\">                        ))</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/0304_2-1/6.PNG\"><br><br></p>\n<h3 id=\"update-traces\"><a href=\"#update-traces\" class=\"headerlink\" title=\"update_traces()\"></a><strong>update_traces()</strong></h3><hr>\n<p>여러가지 그래프를 한번에 업데이트 할 수 있다<br>예를들면 Scatter(), bar()를 동시에 포함할 수 있다</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fig.update_traces(texttemplate=<span class=\"string\">&#x27;%&#123;text&#125;&#x27;</span>, </span><br><span class=\"line\">                  textposition=<span class=\"string\">&#x27;outside&#x27;</span>,</span><br><span class=\"line\">                  cliponaxis = <span class=\"literal\">False</span>,</span><br><span class=\"line\">                  hovertemplate=<span class=\"string\">&#x27;&lt;b&gt;Education&lt;/b&gt;: %&#123;y&#125;&lt;br&gt;&lt;extra&gt;&lt;/extra&gt;&#x27;</span>+</span><br><span class=\"line\">                                <span class=\"string\">&#x27;&lt;b&gt;Count&lt;/b&gt;: %&#123;x&#125;&#x27;</span>,</span><br><span class=\"line\">                  textfont_size=<span class=\"number\">12</span>)</span><br><span class=\"line\">                  </span><br><span class=\"line\">fig.update_xaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\">fig.update_yaxes(showgrid=<span class=\"literal\">False</span>)</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/0304_2-1/7.PNG\"><br><br></p>\n<h3 id=\"update-layout\"><a href=\"#update-layout\" class=\"headerlink\" title=\".update_layout()\"></a><strong>.update_layout()</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fig.update_layout(showlegend=<span class=\"literal\">False</span>, </span><br><span class=\"line\">                  plot_bgcolor=<span class=\"string\">&#x27;#F7F7F7&#x27;</span>, </span><br><span class=\"line\">                  margin=<span class=\"built_in\">dict</span>(pad=<span class=\"number\">20</span>),</span><br><span class=\"line\">                  paper_bgcolor=<span class=\"string\">&#x27;#F7F7F7&#x27;</span>,</span><br><span class=\"line\">                  xaxis=&#123;<span class=\"string\">&#x27;showticklabels&#x27;</span>: <span class=\"literal\">False</span>&#125;,</span><br><span class=\"line\">                  yaxis_title=<span class=\"literal\">None</span>,</span><br><span class=\"line\">                  xaxis_title=<span class=\"literal\">None</span>,</span><br><span class=\"line\">                  yaxis=&#123;<span class=\"string\">&#x27;categoryorder&#x27;</span>:<span class=\"string\">&#x27;total ascending&#x27;</span>&#125;,</span><br><span class=\"line\">                  title_text=<span class=\"string\">&quot;&lt;b&gt;Education&lt;/b&gt; Distribution&quot;</span>,</span><br><span class=\"line\">                  title_x=<span class=\"number\">0.5</span>,</span><br><span class=\"line\">                  font=<span class=\"built_in\">dict</span>(family=<span class=\"string\">&quot;Hiragino Kaku Gothic Pro, sans-serif&quot;</span>, size=<span class=\"number\">15</span>, color=<span class=\"string\">&#x27;#000000&#x27;</span>),</span><br><span class=\"line\">                  title_font_size=<span class=\"number\">35</span>)</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/0304_2-1/8.PNG\"><br><br></p>\n<h3 id=\"annotation\"><a href=\"#annotation\" class=\"headerlink\" title=\"annotation\"></a><strong>annotation</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">14</span>),</span><br><span class=\"line\">                                    x=<span class=\"number\">0.98</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.21</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;@miguelfzzz&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">12</span>),</span><br><span class=\"line\">                                    x=<span class=\"number\">0</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.21</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;Source: 2021 Kaggle Machine Learning &amp; Data Science Survey&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n<br>\n\n<h3 id=\"전체코드\"><a href=\"#전체코드\" class=\"headerlink\" title=\"전체코드\"></a><strong>전체코드</strong></h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">education = (</span><br><span class=\"line\">    df[<span class=\"string\">&#x27;Q4&#x27;</span>]</span><br><span class=\"line\">    .value_counts()</span><br><span class=\"line\">    .to_frame()</span><br><span class=\"line\">    .reset_index()</span><br><span class=\"line\">    .rename(columns=&#123;<span class=\"string\">&#x27;index&#x27;</span>:<span class=\"string\">&#x27;Education&#x27;</span>, <span class=\"string\">&#x27;Q4&#x27;</span>:<span class=\"string\">&#x27;Count&#x27;</span>&#125;)</span><br><span class=\"line\">    .replace([<span class=\"string\">&#x27;Some college/university study without earning a bachelor’s degree&#x27;</span>], <span class=\"string\">&#x27;University studies - No degree&#x27;</span>)</span><br><span class=\"line\">          )  </span><br><span class=\"line\"></span><br><span class=\"line\">education[<span class=\"string\">&#x27;percent&#x27;</span>] = ((education[<span class=\"string\">&#x27;Count&#x27;</span>] / education[<span class=\"string\">&#x27;Count&#x27;</span>].<span class=\"built_in\">sum</span>())*<span class=\"number\">100</span>).<span class=\"built_in\">round</span>(<span class=\"number\">2</span>).astype(<span class=\"built_in\">str</span>) + <span class=\"string\">&#x27;%&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">colors = [<span class=\"string\">&#x27;#033351&#x27;</span>,]*<span class=\"number\">7</span></span><br><span class=\"line\">colors[<span class=\"number\">0</span>] = <span class=\"string\">&#x27;#5abbf9&#x27;</span></span><br><span class=\"line\">colors[<span class=\"number\">1</span>] = <span class=\"string\">&#x27;#5abbf9&#x27;</span></span><br><span class=\"line\">colors[<span class=\"number\">2</span>] = <span class=\"string\">&#x27;#0779c3&#x27;</span></span><br><span class=\"line\">colors[<span class=\"number\">3</span>] = <span class=\"string\">&#x27;#0779c3&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">fig = go.Figure(go.Bar(</span><br><span class=\"line\">            x=education[<span class=\"string\">&#x27;Count&#x27;</span>],</span><br><span class=\"line\">            y=education[<span class=\"string\">&#x27;Education&#x27;</span>],</span><br><span class=\"line\">            text=education[<span class=\"string\">&#x27;percent&#x27;</span>],</span><br><span class=\"line\">            orientation=<span class=\"string\">&#x27;h&#x27;</span>,</span><br><span class=\"line\">            marker_color=colors</span><br><span class=\"line\">                        ))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_traces(texttemplate=<span class=\"string\">&#x27;%&#123;text&#125;&#x27;</span>, </span><br><span class=\"line\">                  textposition=<span class=\"string\">&#x27;outside&#x27;</span>,</span><br><span class=\"line\">                  cliponaxis = <span class=\"literal\">False</span>,</span><br><span class=\"line\">                  hovertemplate=<span class=\"string\">&#x27;&lt;b&gt;Education&lt;/b&gt;: %&#123;y&#125;&lt;br&gt;&lt;extra&gt;&lt;/extra&gt;&#x27;</span>+</span><br><span class=\"line\">                                <span class=\"string\">&#x27;&lt;b&gt;Count&lt;/b&gt;: %&#123;x&#125;&#x27;</span>,</span><br><span class=\"line\">                  textfont_size=<span class=\"number\">12</span>)</span><br><span class=\"line\">                  </span><br><span class=\"line\">fig.update_xaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\">fig.update_yaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\">fig.update_layout(showlegend=<span class=\"literal\">False</span>, </span><br><span class=\"line\">                  plot_bgcolor=<span class=\"string\">&#x27;#F7F7F7&#x27;</span>, </span><br><span class=\"line\">                  margin=<span class=\"built_in\">dict</span>(pad=<span class=\"number\">20</span>),</span><br><span class=\"line\">                  paper_bgcolor=<span class=\"string\">&#x27;#F7F7F7&#x27;</span>,</span><br><span class=\"line\">                  xaxis=&#123;<span class=\"string\">&#x27;showticklabels&#x27;</span>: <span class=\"literal\">False</span>&#125;,</span><br><span class=\"line\">                  yaxis_title=<span class=\"literal\">None</span>,</span><br><span class=\"line\">                  xaxis_title=<span class=\"literal\">None</span>,</span><br><span class=\"line\">                  yaxis=&#123;<span class=\"string\">&#x27;categoryorder&#x27;</span>:<span class=\"string\">&#x27;total ascending&#x27;</span>&#125;,</span><br><span class=\"line\">                  title_text=<span class=\"string\">&quot;&lt;b&gt;Education&lt;/b&gt; Distribution&quot;</span>,</span><br><span class=\"line\">                  title_x=<span class=\"number\">0.5</span>,</span><br><span class=\"line\">                  font=<span class=\"built_in\">dict</span>(family=<span class=\"string\">&quot;Hiragino Kaku Gothic Pro, sans-serif&quot;</span>, size=<span class=\"number\">15</span>, color=<span class=\"string\">&#x27;#000000&#x27;</span>),</span><br><span class=\"line\">                  title_font_size=<span class=\"number\">35</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">14</span>),</span><br><span class=\"line\">                                    x=<span class=\"number\">0.98</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.21</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;@miguelfzzz&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">12</span>),</span><br><span class=\"line\">                                    x=<span class=\"number\">0</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.21</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;Source: 2021 Kaggle Machine Learning &amp; Data Science Survey&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/0304_2-1/9.PNG\"><br><br><br><br></p>\n","site":{"data":{}},"excerpt":"2. Education & Occupation\n\n\n\n응답자의 77% 이상이 학사 및/또는 석사 학위를 가지고 있습니다.\n\n\n\n2-1. 막대그래프(수평)\n캐글 데이터 불러오기\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kagg","more":"<h3 id=\"2-Education-amp-Occupation\"><a href=\"#2-Education-amp-Occupation\" class=\"headerlink\" title=\"2. Education &amp; Occupation\"></a><strong>2. Education &amp; Occupation</strong></h3><hr>\n<p>응답자의 77% 이상이 학사 및/또는 석사 학위를 가지고 있습니다.<br><br></p>\n<h2 id=\"2-1-막대그래프-수평\"><a href=\"#2-1-막대그래프-수평\" class=\"headerlink\" title=\"2-1. 막대그래프(수평)\"></a><strong>2-1. 막대그래프(수평)</strong></h2><h3 id=\"캐글-데이터-불러오기\"><a href=\"#캐글-데이터-불러오기\" class=\"headerlink\" title=\"캐글 데이터 불러오기\"></a><strong>캐글 데이터 불러오기</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># This Python 3 environment comes with many helpful analytics libraries installed</span></span><br><span class=\"line\"><span class=\"comment\"># It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python</span></span><br><span class=\"line\"><span class=\"comment\"># For example, here&#x27;s several helpful packages to load</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np <span class=\"comment\"># linear algebra</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd <span class=\"comment\"># data processing, CSV file I/O (e.g. pd.read_csv)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Input data files are available in the read-only &quot;../input/&quot; directory</span></span><br><span class=\"line\"><span class=\"comment\"># For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">for</span> dirname, _, filenames <span class=\"keyword\">in</span> os.walk(<span class=\"string\">&#x27;/kaggle/input&#x27;</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> filename <span class=\"keyword\">in</span> filenames:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(os.path.join(dirname, filename))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using &quot;Save &amp; Run All&quot; </span></span><br><span class=\"line\"><span class=\"comment\"># You can also write temporary files to /kaggle/temp/, but they won&#x27;t be saved outside of the current session</span></span><br></pre></td></tr></table></figure>\n<br>\n\n<h3 id=\"라이브러리-임포트-해주기\"><a href=\"#라이브러리-임포트-해주기\" class=\"headerlink\" title=\"라이브러리 임포트 해주기\"></a><strong>라이브러리 임포트 해주기</strong></h3><hr>\n<ul>\n<li>import plotly.express as px</li>\n<li>import plotly.graph_objects as go</li>\n</ul>\n<p>Plotly는 그래프를 만드는데에는 두가지 방법이 있다 </p>\n<ul>\n<li><strong>px</strong><br>express의 줄임으로<br>빠르게 그래프를 제작</li>\n<li><strong>go</strong><br>그래프를 하나하나 설정하여 제작</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd </span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> seaborn <span class=\"keyword\">as</span> sns</span><br><span class=\"line\"><span class=\"keyword\">import</span> plotly.express <span class=\"keyword\">as</span> px</span><br><span class=\"line\"><span class=\"keyword\">import</span> plotly.graph_objects <span class=\"keyword\">as</span> go</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#warning 라이브러리를 이용해서 경고 메세지 숨기기</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> warnings</span><br><span class=\"line\">warnings.filterwarnings(<span class=\"string\">&#x27;ignore&#x27;</span>)   </span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df = pd.read_csv(<span class=\"string\">&#x27;../input/kaggle-survey-2021/kaggle_survey_2021_responses.csv&#x27;</span>)</span><br><span class=\"line\">df = df.iloc[<span class=\"number\">1</span>:, :]     </span><br><span class=\"line\"><span class=\"built_in\">print</span>(df)</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/0304_2-1/1.PNG\"><br><br></p>\n<h3 id=\"dataframe-생성\"><a href=\"#dataframe-생성\" class=\"headerlink\" title=\"dataframe 생성\"></a><strong>dataframe 생성</strong></h3><hr>\n<ul>\n<li>education<br>education이라는 데이터 프레임을 만들어줌<br>컬럼 값으로 Q4의 데이터 값을 가졌음</li>\n<li>.value_counts()<br>Q4의 컬럼의 중복된 데이터 값들의 갯수 표시</li>\n<li>.to_frame()<br>데이터 프레임으로 변환</li>\n<li>.reset_index()<br>컬럼명 인덱스가 아닌 행 번호 인덱스(숫자)를 사용하고 싶을때 사용<br>밑의 예시 참고.</li>\n<li>replace(old, new, [count])<br>문자열 변경 할 수 있는 함수<br>old : 현재 문자열에서 변경하고 싶은 문자<br>new: 새로 바꿀 문자<br>count: 변경할 횟수</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(df[<span class=\"string\">&#x27;Q4&#x27;</span>])</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/0304_2-1/2.PNG\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(df[<span class=\"string\">&#x27;Q4&#x27;</span>].value_counts())</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/0304_2-1/3.PNG\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">education = (</span><br><span class=\"line\">    df[<span class=\"string\">&#x27;Q4&#x27;</span>]</span><br><span class=\"line\">    .value_counts()</span><br><span class=\"line\">    .to_frame()</span><br><span class=\"line\">    .reset_index()</span><br><span class=\"line\">    .rename(columns=&#123;<span class=\"string\">&#x27;index&#x27;</span>:<span class=\"string\">&#x27;Education&#x27;</span>, <span class=\"string\">&#x27;Q4&#x27;</span>:<span class=\"string\">&#x27;Count&#x27;</span>&#125;)</span><br><span class=\"line\">    .replace([<span class=\"string\">&#x27;Some college/university study without earning a bachelor’s degree&#x27;</span>], <span class=\"string\">&#x27;University studies - No degree&#x27;</span>)</span><br><span class=\"line\">          )  </span><br><span class=\"line\">education[<span class=\"string\">&#x27;percent&#x27;</span>] = ((education[<span class=\"string\">&#x27;Count&#x27;</span>] / education[<span class=\"string\">&#x27;Count&#x27;</span>].<span class=\"built_in\">sum</span>())*<span class=\"number\">100</span>).<span class=\"built_in\">round</span>(<span class=\"number\">2</span>).astype(<span class=\"built_in\">str</span>) + <span class=\"string\">&#x27;%&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(education)</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/0304_2-1/4.PNG\"><br><br></p>\n<h3 id=\"colors\"><a href=\"#colors\" class=\"headerlink\" title=\"colors\"></a><strong>colors</strong></h3><hr>\n<p>색상의 범위를 정해줌 </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">colors = [<span class=\"string\">&#x27;#033351&#x27;</span>,] * <span class=\"number\">7</span>   <span class=\"comment\">#남색</span></span><br><span class=\"line\">colors[<span class=\"number\">0</span>] = <span class=\"string\">&#x27;#5abbf9&#x27;</span> <span class=\"comment\">#맨위의 색 하늘색</span></span><br><span class=\"line\">colors[<span class=\"number\">1</span>] = <span class=\"string\">&#x27;#5abbf9&#x27;</span></span><br><span class=\"line\">colors[<span class=\"number\">2</span>] = <span class=\"string\">&#x27;#0779c3&#x27;</span> <span class=\"comment\">#진하늘색</span></span><br><span class=\"line\">colors[<span class=\"number\">3</span>] = <span class=\"string\">&#x27;#0779c3&#x27;</span></span><br></pre></td></tr></table></figure>\n<br>\n\n<h3 id=\"go-figure\"><a href=\"#go-figure\" class=\"headerlink\" title=\"go.figure\"></a><strong>go.figure</strong></h3><hr>\n<ul>\n<li>x=education[‘Count’]<br>education 컬럼 Count의 data 값을 x축에 대입</li>\n<li>y=education[‘Education’]<br>education 컬럼 Education의 data 값을y 축에 대입</li>\n<li>text=education[‘percent’]<br>문자열을 추가해줌<br>이때 education 데이터프레임의 컬럼 percent의 데이터 값을 추가함</li>\n<li>orientation=’h’<br>h는 horizontal bar을 의미한다.<br>이 문장을 입력하지 않을때 수평 바가 만들어지지 않는다</li>\n<li>marker_color=colors<br>위에 정의해준 colors 값으로 그래프를 다른 색으로 표현함</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fig = go.Figure(go.Bar(</span><br><span class=\"line\">            x = education[<span class=\"string\">&#x27;Count&#x27;</span>],</span><br><span class=\"line\">            y = education[<span class=\"string\">&#x27;Education&#x27;</span>],</span><br><span class=\"line\">            text = education[<span class=\"string\">&#x27;percent&#x27;</span>],</span><br><span class=\"line\">            orientation = <span class=\"string\">&#x27;h&#x27;</span>,</span><br><span class=\"line\">            marker_color = colors</span><br><span class=\"line\">                        ))</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/0304_2-1/5.PNG\"><br><br></p>\n<ul>\n<li>orientation=’h’가 없을때</li>\n</ul>\n<hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fig = go.Figure(go.Bar(</span><br><span class=\"line\">            x=education[<span class=\"string\">&#x27;Count&#x27;</span>],</span><br><span class=\"line\">            y=education[<span class=\"string\">&#x27;Education&#x27;</span>],</span><br><span class=\"line\">            text=education[<span class=\"string\">&#x27;percent&#x27;</span>],</span><br><span class=\"line\">            marker_color=colors</span><br><span class=\"line\">                        ))</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/0304_2-1/6.PNG\"><br><br></p>\n<h3 id=\"update-traces\"><a href=\"#update-traces\" class=\"headerlink\" title=\"update_traces()\"></a><strong>update_traces()</strong></h3><hr>\n<p>여러가지 그래프를 한번에 업데이트 할 수 있다<br>예를들면 Scatter(), bar()를 동시에 포함할 수 있다</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fig.update_traces(texttemplate=<span class=\"string\">&#x27;%&#123;text&#125;&#x27;</span>, </span><br><span class=\"line\">                  textposition=<span class=\"string\">&#x27;outside&#x27;</span>,</span><br><span class=\"line\">                  cliponaxis = <span class=\"literal\">False</span>,</span><br><span class=\"line\">                  hovertemplate=<span class=\"string\">&#x27;&lt;b&gt;Education&lt;/b&gt;: %&#123;y&#125;&lt;br&gt;&lt;extra&gt;&lt;/extra&gt;&#x27;</span>+</span><br><span class=\"line\">                                <span class=\"string\">&#x27;&lt;b&gt;Count&lt;/b&gt;: %&#123;x&#125;&#x27;</span>,</span><br><span class=\"line\">                  textfont_size=<span class=\"number\">12</span>)</span><br><span class=\"line\">                  </span><br><span class=\"line\">fig.update_xaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\">fig.update_yaxes(showgrid=<span class=\"literal\">False</span>)</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/0304_2-1/7.PNG\"><br><br></p>\n<h3 id=\"update-layout\"><a href=\"#update-layout\" class=\"headerlink\" title=\".update_layout()\"></a><strong>.update_layout()</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fig.update_layout(showlegend=<span class=\"literal\">False</span>, </span><br><span class=\"line\">                  plot_bgcolor=<span class=\"string\">&#x27;#F7F7F7&#x27;</span>, </span><br><span class=\"line\">                  margin=<span class=\"built_in\">dict</span>(pad=<span class=\"number\">20</span>),</span><br><span class=\"line\">                  paper_bgcolor=<span class=\"string\">&#x27;#F7F7F7&#x27;</span>,</span><br><span class=\"line\">                  xaxis=&#123;<span class=\"string\">&#x27;showticklabels&#x27;</span>: <span class=\"literal\">False</span>&#125;,</span><br><span class=\"line\">                  yaxis_title=<span class=\"literal\">None</span>,</span><br><span class=\"line\">                  xaxis_title=<span class=\"literal\">None</span>,</span><br><span class=\"line\">                  yaxis=&#123;<span class=\"string\">&#x27;categoryorder&#x27;</span>:<span class=\"string\">&#x27;total ascending&#x27;</span>&#125;,</span><br><span class=\"line\">                  title_text=<span class=\"string\">&quot;&lt;b&gt;Education&lt;/b&gt; Distribution&quot;</span>,</span><br><span class=\"line\">                  title_x=<span class=\"number\">0.5</span>,</span><br><span class=\"line\">                  font=<span class=\"built_in\">dict</span>(family=<span class=\"string\">&quot;Hiragino Kaku Gothic Pro, sans-serif&quot;</span>, size=<span class=\"number\">15</span>, color=<span class=\"string\">&#x27;#000000&#x27;</span>),</span><br><span class=\"line\">                  title_font_size=<span class=\"number\">35</span>)</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/0304_2-1/8.PNG\"><br><br></p>\n<h3 id=\"annotation\"><a href=\"#annotation\" class=\"headerlink\" title=\"annotation\"></a><strong>annotation</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">14</span>),</span><br><span class=\"line\">                                    x=<span class=\"number\">0.98</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.21</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;@miguelfzzz&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">12</span>),</span><br><span class=\"line\">                                    x=<span class=\"number\">0</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.21</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;Source: 2021 Kaggle Machine Learning &amp; Data Science Survey&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n<br>\n\n<h3 id=\"전체코드\"><a href=\"#전체코드\" class=\"headerlink\" title=\"전체코드\"></a><strong>전체코드</strong></h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">education = (</span><br><span class=\"line\">    df[<span class=\"string\">&#x27;Q4&#x27;</span>]</span><br><span class=\"line\">    .value_counts()</span><br><span class=\"line\">    .to_frame()</span><br><span class=\"line\">    .reset_index()</span><br><span class=\"line\">    .rename(columns=&#123;<span class=\"string\">&#x27;index&#x27;</span>:<span class=\"string\">&#x27;Education&#x27;</span>, <span class=\"string\">&#x27;Q4&#x27;</span>:<span class=\"string\">&#x27;Count&#x27;</span>&#125;)</span><br><span class=\"line\">    .replace([<span class=\"string\">&#x27;Some college/university study without earning a bachelor’s degree&#x27;</span>], <span class=\"string\">&#x27;University studies - No degree&#x27;</span>)</span><br><span class=\"line\">          )  </span><br><span class=\"line\"></span><br><span class=\"line\">education[<span class=\"string\">&#x27;percent&#x27;</span>] = ((education[<span class=\"string\">&#x27;Count&#x27;</span>] / education[<span class=\"string\">&#x27;Count&#x27;</span>].<span class=\"built_in\">sum</span>())*<span class=\"number\">100</span>).<span class=\"built_in\">round</span>(<span class=\"number\">2</span>).astype(<span class=\"built_in\">str</span>) + <span class=\"string\">&#x27;%&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">colors = [<span class=\"string\">&#x27;#033351&#x27;</span>,]*<span class=\"number\">7</span></span><br><span class=\"line\">colors[<span class=\"number\">0</span>] = <span class=\"string\">&#x27;#5abbf9&#x27;</span></span><br><span class=\"line\">colors[<span class=\"number\">1</span>] = <span class=\"string\">&#x27;#5abbf9&#x27;</span></span><br><span class=\"line\">colors[<span class=\"number\">2</span>] = <span class=\"string\">&#x27;#0779c3&#x27;</span></span><br><span class=\"line\">colors[<span class=\"number\">3</span>] = <span class=\"string\">&#x27;#0779c3&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">fig = go.Figure(go.Bar(</span><br><span class=\"line\">            x=education[<span class=\"string\">&#x27;Count&#x27;</span>],</span><br><span class=\"line\">            y=education[<span class=\"string\">&#x27;Education&#x27;</span>],</span><br><span class=\"line\">            text=education[<span class=\"string\">&#x27;percent&#x27;</span>],</span><br><span class=\"line\">            orientation=<span class=\"string\">&#x27;h&#x27;</span>,</span><br><span class=\"line\">            marker_color=colors</span><br><span class=\"line\">                        ))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_traces(texttemplate=<span class=\"string\">&#x27;%&#123;text&#125;&#x27;</span>, </span><br><span class=\"line\">                  textposition=<span class=\"string\">&#x27;outside&#x27;</span>,</span><br><span class=\"line\">                  cliponaxis = <span class=\"literal\">False</span>,</span><br><span class=\"line\">                  hovertemplate=<span class=\"string\">&#x27;&lt;b&gt;Education&lt;/b&gt;: %&#123;y&#125;&lt;br&gt;&lt;extra&gt;&lt;/extra&gt;&#x27;</span>+</span><br><span class=\"line\">                                <span class=\"string\">&#x27;&lt;b&gt;Count&lt;/b&gt;: %&#123;x&#125;&#x27;</span>,</span><br><span class=\"line\">                  textfont_size=<span class=\"number\">12</span>)</span><br><span class=\"line\">                  </span><br><span class=\"line\">fig.update_xaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\">fig.update_yaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\">fig.update_layout(showlegend=<span class=\"literal\">False</span>, </span><br><span class=\"line\">                  plot_bgcolor=<span class=\"string\">&#x27;#F7F7F7&#x27;</span>, </span><br><span class=\"line\">                  margin=<span class=\"built_in\">dict</span>(pad=<span class=\"number\">20</span>),</span><br><span class=\"line\">                  paper_bgcolor=<span class=\"string\">&#x27;#F7F7F7&#x27;</span>,</span><br><span class=\"line\">                  xaxis=&#123;<span class=\"string\">&#x27;showticklabels&#x27;</span>: <span class=\"literal\">False</span>&#125;,</span><br><span class=\"line\">                  yaxis_title=<span class=\"literal\">None</span>,</span><br><span class=\"line\">                  xaxis_title=<span class=\"literal\">None</span>,</span><br><span class=\"line\">                  yaxis=&#123;<span class=\"string\">&#x27;categoryorder&#x27;</span>:<span class=\"string\">&#x27;total ascending&#x27;</span>&#125;,</span><br><span class=\"line\">                  title_text=<span class=\"string\">&quot;&lt;b&gt;Education&lt;/b&gt; Distribution&quot;</span>,</span><br><span class=\"line\">                  title_x=<span class=\"number\">0.5</span>,</span><br><span class=\"line\">                  font=<span class=\"built_in\">dict</span>(family=<span class=\"string\">&quot;Hiragino Kaku Gothic Pro, sans-serif&quot;</span>, size=<span class=\"number\">15</span>, color=<span class=\"string\">&#x27;#000000&#x27;</span>),</span><br><span class=\"line\">                  title_font_size=<span class=\"number\">35</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">14</span>),</span><br><span class=\"line\">                                    x=<span class=\"number\">0.98</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.21</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;@miguelfzzz&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">12</span>),</span><br><span class=\"line\">                                    x=<span class=\"number\">0</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.21</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;Source: 2021 Kaggle Machine Learning &amp; Data Science Survey&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/0304_2-1/9.PNG\"><br><br><br><br></p>\n"},{"title":"treemap","date":"2021-11-08T15:00:00.000Z","toc":true,"thumbnail":"/images/0307_3-4/2.PNG","widgets":null,"_content":"```python\n# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session\n```\n\n\n```python\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objects as go\n\nimport warnings\nwarnings.filterwarnings('ignore') \n\ndf = pd.read_csv('../input/kaggle-survey-2021/kaggle_survey_2021_responses.csv')\ndf = df.iloc[1:, :]\n```\n\n### **3-4 Treemap**\n---\nrecommend_leng 객체 생성\n\n\n```python\nrecommend_leng = (\n    df['Q8']\n    .value_counts()\n    .to_frame()\n    .reset_index()\n    .rename(columns={'index':'Lenguage', 'Q8':'Count'})\n    .sort_values(by=['Count'], ascending=False)   \n          )   \nprint(recommend_leng)\n```\n![](/images/0307_3-4/1.PNG)\n\n<br>\n\n### **color**\n---\n\n```python\ncolors = ['#033351',] * 13\ncolors[0] = '#5abbf9'\ncolors[1] = '#066eb0'\ncolors[2] = '#044a77'\ncolors[3] = '#043e64'\ncolors[4] = '#043e64'\n```\n<br>\n\n### **Treemap**\n[참고사이트](https://plotly.com/python/treemaps/)\n---\n트리맵 차트는 내포된 직사각형을 사용하여 계층적 데이터를 시각화합니다.\n계층 구조는 레이블(px.tremap의 이름) 및 상위 속성에 의해 정의됩니다.\n\n- labels = recommend_leng['Lenguage']\nlabels값\n- values = recommend_leng['Count']\nvalues값\n- parents = ['']*recommend_leng.shape[0]\ntreemap의 계층을 따로 만들어 주지 않았기 때문에 \nrecommend_leng.shape[0] 으로 정해줍니다.\n- \n```python\nfig = go.Figure(go.Treemap(\n    labels = recommend_leng['Lenguage'],\n    values = recommend_leng['Count'],\n    parents = ['']*recommend_leng.shape[0],\n    textinfo = \"percent root+label+value+text\",\n))\nfig.show()\n```\n![](/images/0307_3-4/2.PNG)\n<br>\n\n### **나머지 코드**\n---\n- treemapcolorway = colors\ntreemap 컬러 지정\n- \n```python\nfig.update_traces(hovertemplate='<b>Lenguage</b>: %{label}<br><extra></extra>'+\n                                '<b>Count</b>: %{value}')\n \nfig.update_layout(showlegend=False, \n                  treemapcolorway = colors,\n                  margin=dict(pad=20),\n                  paper_bgcolor='#F7F7F7',\n                  plot_bgcolor='#F7F7F7',\n                  height=600,\n                  yaxis={'showticklabels': False},\n                  yaxis_title=None,\n                  xaxis_title=None,\n                  title_text=\"Most Recommended <b>Programming Language</b>\",\n                  title_x=0.5,\n                  title_y=0.95,\n                  font=dict(family=\"Hiragino Kaku Gothic Pro, sans-serif\", size=17, color='#000000'),\n                  title_font_size=35)\n\nfig.add_annotation(dict(font=dict(size=14),\n                                    x=0.96,\n                                    y=-0.14,\n                                    showarrow=False,\n                                    text=\"@miguelfzzz\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\n\nfig.add_annotation(dict(font=dict(size=12),\n                                    x=0.01,\n                                    y=-0.14,\n                                    showarrow=False,\n                                    text=\"Source: 2021 Kaggle Machine Learning & Data Science Survey\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\n\nfig.show()\n```\n![](/images/0307_3-4/3.PNG)\n<br>\n<br>\n","source":"_posts/kaggle7_treemap.md","raw":"---\ntitle: treemap\ndate: 2021-11-09\ntags: kaggle, plotly\ntoc: true\nthumbnail: /images/0307_3-4/2.PNG\ncategories: \n- kaggle 필사\nwidgets: null\n---\n```python\n# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session\n```\n\n\n```python\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objects as go\n\nimport warnings\nwarnings.filterwarnings('ignore') \n\ndf = pd.read_csv('../input/kaggle-survey-2021/kaggle_survey_2021_responses.csv')\ndf = df.iloc[1:, :]\n```\n\n### **3-4 Treemap**\n---\nrecommend_leng 객체 생성\n\n\n```python\nrecommend_leng = (\n    df['Q8']\n    .value_counts()\n    .to_frame()\n    .reset_index()\n    .rename(columns={'index':'Lenguage', 'Q8':'Count'})\n    .sort_values(by=['Count'], ascending=False)   \n          )   \nprint(recommend_leng)\n```\n![](/images/0307_3-4/1.PNG)\n\n<br>\n\n### **color**\n---\n\n```python\ncolors = ['#033351',] * 13\ncolors[0] = '#5abbf9'\ncolors[1] = '#066eb0'\ncolors[2] = '#044a77'\ncolors[3] = '#043e64'\ncolors[4] = '#043e64'\n```\n<br>\n\n### **Treemap**\n[참고사이트](https://plotly.com/python/treemaps/)\n---\n트리맵 차트는 내포된 직사각형을 사용하여 계층적 데이터를 시각화합니다.\n계층 구조는 레이블(px.tremap의 이름) 및 상위 속성에 의해 정의됩니다.\n\n- labels = recommend_leng['Lenguage']\nlabels값\n- values = recommend_leng['Count']\nvalues값\n- parents = ['']*recommend_leng.shape[0]\ntreemap의 계층을 따로 만들어 주지 않았기 때문에 \nrecommend_leng.shape[0] 으로 정해줍니다.\n- \n```python\nfig = go.Figure(go.Treemap(\n    labels = recommend_leng['Lenguage'],\n    values = recommend_leng['Count'],\n    parents = ['']*recommend_leng.shape[0],\n    textinfo = \"percent root+label+value+text\",\n))\nfig.show()\n```\n![](/images/0307_3-4/2.PNG)\n<br>\n\n### **나머지 코드**\n---\n- treemapcolorway = colors\ntreemap 컬러 지정\n- \n```python\nfig.update_traces(hovertemplate='<b>Lenguage</b>: %{label}<br><extra></extra>'+\n                                '<b>Count</b>: %{value}')\n \nfig.update_layout(showlegend=False, \n                  treemapcolorway = colors,\n                  margin=dict(pad=20),\n                  paper_bgcolor='#F7F7F7',\n                  plot_bgcolor='#F7F7F7',\n                  height=600,\n                  yaxis={'showticklabels': False},\n                  yaxis_title=None,\n                  xaxis_title=None,\n                  title_text=\"Most Recommended <b>Programming Language</b>\",\n                  title_x=0.5,\n                  title_y=0.95,\n                  font=dict(family=\"Hiragino Kaku Gothic Pro, sans-serif\", size=17, color='#000000'),\n                  title_font_size=35)\n\nfig.add_annotation(dict(font=dict(size=14),\n                                    x=0.96,\n                                    y=-0.14,\n                                    showarrow=False,\n                                    text=\"@miguelfzzz\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\n\nfig.add_annotation(dict(font=dict(size=12),\n                                    x=0.01,\n                                    y=-0.14,\n                                    showarrow=False,\n                                    text=\"Source: 2021 Kaggle Machine Learning & Data Science Survey\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\n\nfig.show()\n```\n![](/images/0307_3-4/3.PNG)\n<br>\n<br>\n","slug":"kaggle7-treemap","published":1,"updated":"2022-01-03T12:20:08.048Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cky2hohet001i5nrja5v22vnp","content":"<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># This Python 3 environment comes with many helpful analytics libraries installed</span></span><br><span class=\"line\"><span class=\"comment\"># It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python</span></span><br><span class=\"line\"><span class=\"comment\"># For example, here&#x27;s several helpful packages to load</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np <span class=\"comment\"># linear algebra</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd <span class=\"comment\"># data processing, CSV file I/O (e.g. pd.read_csv)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Input data files are available in the read-only &quot;../input/&quot; directory</span></span><br><span class=\"line\"><span class=\"comment\"># For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">for</span> dirname, _, filenames <span class=\"keyword\">in</span> os.walk(<span class=\"string\">&#x27;/kaggle/input&#x27;</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> filename <span class=\"keyword\">in</span> filenames:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(os.path.join(dirname, filename))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using &quot;Save &amp; Run All&quot; </span></span><br><span class=\"line\"><span class=\"comment\"># You can also write temporary files to /kaggle/temp/, but they won&#x27;t be saved outside of the current session</span></span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> seaborn <span class=\"keyword\">as</span> sns</span><br><span class=\"line\"><span class=\"keyword\">import</span> plotly.express <span class=\"keyword\">as</span> px</span><br><span class=\"line\"><span class=\"keyword\">import</span> plotly.graph_objects <span class=\"keyword\">as</span> go</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> warnings</span><br><span class=\"line\">warnings.filterwarnings(<span class=\"string\">&#x27;ignore&#x27;</span>) </span><br><span class=\"line\"></span><br><span class=\"line\">df = pd.read_csv(<span class=\"string\">&#x27;../input/kaggle-survey-2021/kaggle_survey_2021_responses.csv&#x27;</span>)</span><br><span class=\"line\">df = df.iloc[<span class=\"number\">1</span>:, :]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-4-Treemap\"><a href=\"#3-4-Treemap\" class=\"headerlink\" title=\"3-4 Treemap\"></a><strong>3-4 Treemap</strong></h3><hr>\n<p>recommend_leng 객체 생성</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">recommend_leng = (</span><br><span class=\"line\">    df[<span class=\"string\">&#x27;Q8&#x27;</span>]</span><br><span class=\"line\">    .value_counts()</span><br><span class=\"line\">    .to_frame()</span><br><span class=\"line\">    .reset_index()</span><br><span class=\"line\">    .rename(columns=&#123;<span class=\"string\">&#x27;index&#x27;</span>:<span class=\"string\">&#x27;Lenguage&#x27;</span>, <span class=\"string\">&#x27;Q8&#x27;</span>:<span class=\"string\">&#x27;Count&#x27;</span>&#125;)</span><br><span class=\"line\">    .sort_values(by=[<span class=\"string\">&#x27;Count&#x27;</span>], ascending=<span class=\"literal\">False</span>)   </span><br><span class=\"line\">          )   </span><br><span class=\"line\"><span class=\"built_in\">print</span>(recommend_leng)</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/0307_3-4/1.PNG\"></p>\n<br>\n\n<h3 id=\"color\"><a href=\"#color\" class=\"headerlink\" title=\"color\"></a><strong>color</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">colors = [<span class=\"string\">&#x27;#033351&#x27;</span>,] * <span class=\"number\">13</span></span><br><span class=\"line\">colors[<span class=\"number\">0</span>] = <span class=\"string\">&#x27;#5abbf9&#x27;</span></span><br><span class=\"line\">colors[<span class=\"number\">1</span>] = <span class=\"string\">&#x27;#066eb0&#x27;</span></span><br><span class=\"line\">colors[<span class=\"number\">2</span>] = <span class=\"string\">&#x27;#044a77&#x27;</span></span><br><span class=\"line\">colors[<span class=\"number\">3</span>] = <span class=\"string\">&#x27;#043e64&#x27;</span></span><br><span class=\"line\">colors[<span class=\"number\">4</span>] = <span class=\"string\">&#x27;#043e64&#x27;</span></span><br></pre></td></tr></table></figure>\n<br>\n\n<h3 id=\"Treemap\"><a href=\"#Treemap\" class=\"headerlink\" title=\"Treemap\"></a><strong>Treemap</strong></h3><h2 id=\"참고사이트\"><a href=\"#참고사이트\" class=\"headerlink\" title=\"참고사이트\"></a><a href=\"https://plotly.com/python/treemaps/\">참고사이트</a></h2><p>트리맵 차트는 내포된 직사각형을 사용하여 계층적 데이터를 시각화합니다.<br>계층 구조는 레이블(px.tremap의 이름) 및 상위 속성에 의해 정의됩니다.</p>\n<ul>\n<li>labels = recommend_leng[‘Lenguage’]<br>labels값</li>\n<li>values = recommend_leng[‘Count’]<br>values값</li>\n<li>parents = [‘’]*recommend_leng.shape[0]<br>treemap의 계층을 따로 만들어 주지 않았기 때문에<br>recommend_leng.shape[0] 으로 정해줍니다.</li>\n<li><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fig = go.Figure(go.Treemap(</span><br><span class=\"line\">    labels = recommend_leng[<span class=\"string\">&#x27;Lenguage&#x27;</span>],</span><br><span class=\"line\">    values = recommend_leng[<span class=\"string\">&#x27;Count&#x27;</span>],</span><br><span class=\"line\">    parents = [<span class=\"string\">&#x27;&#x27;</span>]*recommend_leng.shape[<span class=\"number\">0</span>],</span><br><span class=\"line\">    textinfo = <span class=\"string\">&quot;percent root+label+value+text&quot;</span>,</span><br><span class=\"line\">))</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n<img src=\"/images/0307_3-4/2.PNG\"><br></li>\n</ul>\n<h3 id=\"나머지-코드\"><a href=\"#나머지-코드\" class=\"headerlink\" title=\"나머지 코드\"></a><strong>나머지 코드</strong></h3><hr>\n<ul>\n<li>treemapcolorway = colors<br>treemap 컬러 지정</li>\n<li><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fig.update_traces(hovertemplate=<span class=\"string\">&#x27;&lt;b&gt;Lenguage&lt;/b&gt;: %&#123;label&#125;&lt;br&gt;&lt;extra&gt;&lt;/extra&gt;&#x27;</span>+</span><br><span class=\"line\">                                <span class=\"string\">&#x27;&lt;b&gt;Count&lt;/b&gt;: %&#123;value&#125;&#x27;</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\">fig.update_layout(showlegend=<span class=\"literal\">False</span>, </span><br><span class=\"line\">                  treemapcolorway = colors,</span><br><span class=\"line\">                  margin=<span class=\"built_in\">dict</span>(pad=<span class=\"number\">20</span>),</span><br><span class=\"line\">                  paper_bgcolor=<span class=\"string\">&#x27;#F7F7F7&#x27;</span>,</span><br><span class=\"line\">                  plot_bgcolor=<span class=\"string\">&#x27;#F7F7F7&#x27;</span>,</span><br><span class=\"line\">                  height=<span class=\"number\">600</span>,</span><br><span class=\"line\">                  yaxis=&#123;<span class=\"string\">&#x27;showticklabels&#x27;</span>: <span class=\"literal\">False</span>&#125;,</span><br><span class=\"line\">                  yaxis_title=<span class=\"literal\">None</span>,</span><br><span class=\"line\">                  xaxis_title=<span class=\"literal\">None</span>,</span><br><span class=\"line\">                  title_text=<span class=\"string\">&quot;Most Recommended &lt;b&gt;Programming Language&lt;/b&gt;&quot;</span>,</span><br><span class=\"line\">                  title_x=<span class=\"number\">0.5</span>,</span><br><span class=\"line\">                  title_y=<span class=\"number\">0.95</span>,</span><br><span class=\"line\">                  font=<span class=\"built_in\">dict</span>(family=<span class=\"string\">&quot;Hiragino Kaku Gothic Pro, sans-serif&quot;</span>, size=<span class=\"number\">17</span>, color=<span class=\"string\">&#x27;#000000&#x27;</span>),</span><br><span class=\"line\">                  title_font_size=<span class=\"number\">35</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">14</span>),</span><br><span class=\"line\">                                    x=<span class=\"number\">0.96</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.14</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;@miguelfzzz&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">12</span>),</span><br><span class=\"line\">                                    x=<span class=\"number\">0.01</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.14</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;Source: 2021 Kaggle Machine Learning &amp; Data Science Survey&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n<img src=\"/images/0307_3-4/3.PNG\"><br>\n<br></li>\n</ul>\n","site":{"data":{}},"excerpt":"1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear","more":"<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># This Python 3 environment comes with many helpful analytics libraries installed</span></span><br><span class=\"line\"><span class=\"comment\"># It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python</span></span><br><span class=\"line\"><span class=\"comment\"># For example, here&#x27;s several helpful packages to load</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np <span class=\"comment\"># linear algebra</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd <span class=\"comment\"># data processing, CSV file I/O (e.g. pd.read_csv)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Input data files are available in the read-only &quot;../input/&quot; directory</span></span><br><span class=\"line\"><span class=\"comment\"># For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">for</span> dirname, _, filenames <span class=\"keyword\">in</span> os.walk(<span class=\"string\">&#x27;/kaggle/input&#x27;</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> filename <span class=\"keyword\">in</span> filenames:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(os.path.join(dirname, filename))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using &quot;Save &amp; Run All&quot; </span></span><br><span class=\"line\"><span class=\"comment\"># You can also write temporary files to /kaggle/temp/, but they won&#x27;t be saved outside of the current session</span></span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> seaborn <span class=\"keyword\">as</span> sns</span><br><span class=\"line\"><span class=\"keyword\">import</span> plotly.express <span class=\"keyword\">as</span> px</span><br><span class=\"line\"><span class=\"keyword\">import</span> plotly.graph_objects <span class=\"keyword\">as</span> go</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> warnings</span><br><span class=\"line\">warnings.filterwarnings(<span class=\"string\">&#x27;ignore&#x27;</span>) </span><br><span class=\"line\"></span><br><span class=\"line\">df = pd.read_csv(<span class=\"string\">&#x27;../input/kaggle-survey-2021/kaggle_survey_2021_responses.csv&#x27;</span>)</span><br><span class=\"line\">df = df.iloc[<span class=\"number\">1</span>:, :]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-4-Treemap\"><a href=\"#3-4-Treemap\" class=\"headerlink\" title=\"3-4 Treemap\"></a><strong>3-4 Treemap</strong></h3><hr>\n<p>recommend_leng 객체 생성</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">recommend_leng = (</span><br><span class=\"line\">    df[<span class=\"string\">&#x27;Q8&#x27;</span>]</span><br><span class=\"line\">    .value_counts()</span><br><span class=\"line\">    .to_frame()</span><br><span class=\"line\">    .reset_index()</span><br><span class=\"line\">    .rename(columns=&#123;<span class=\"string\">&#x27;index&#x27;</span>:<span class=\"string\">&#x27;Lenguage&#x27;</span>, <span class=\"string\">&#x27;Q8&#x27;</span>:<span class=\"string\">&#x27;Count&#x27;</span>&#125;)</span><br><span class=\"line\">    .sort_values(by=[<span class=\"string\">&#x27;Count&#x27;</span>], ascending=<span class=\"literal\">False</span>)   </span><br><span class=\"line\">          )   </span><br><span class=\"line\"><span class=\"built_in\">print</span>(recommend_leng)</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/0307_3-4/1.PNG\"></p>\n<br>\n\n<h3 id=\"color\"><a href=\"#color\" class=\"headerlink\" title=\"color\"></a><strong>color</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">colors = [<span class=\"string\">&#x27;#033351&#x27;</span>,] * <span class=\"number\">13</span></span><br><span class=\"line\">colors[<span class=\"number\">0</span>] = <span class=\"string\">&#x27;#5abbf9&#x27;</span></span><br><span class=\"line\">colors[<span class=\"number\">1</span>] = <span class=\"string\">&#x27;#066eb0&#x27;</span></span><br><span class=\"line\">colors[<span class=\"number\">2</span>] = <span class=\"string\">&#x27;#044a77&#x27;</span></span><br><span class=\"line\">colors[<span class=\"number\">3</span>] = <span class=\"string\">&#x27;#043e64&#x27;</span></span><br><span class=\"line\">colors[<span class=\"number\">4</span>] = <span class=\"string\">&#x27;#043e64&#x27;</span></span><br></pre></td></tr></table></figure>\n<br>\n\n<h3 id=\"Treemap\"><a href=\"#Treemap\" class=\"headerlink\" title=\"Treemap\"></a><strong>Treemap</strong></h3><h2 id=\"참고사이트\"><a href=\"#참고사이트\" class=\"headerlink\" title=\"참고사이트\"></a><a href=\"https://plotly.com/python/treemaps/\">참고사이트</a></h2><p>트리맵 차트는 내포된 직사각형을 사용하여 계층적 데이터를 시각화합니다.<br>계층 구조는 레이블(px.tremap의 이름) 및 상위 속성에 의해 정의됩니다.</p>\n<ul>\n<li>labels = recommend_leng[‘Lenguage’]<br>labels값</li>\n<li>values = recommend_leng[‘Count’]<br>values값</li>\n<li>parents = [‘’]*recommend_leng.shape[0]<br>treemap의 계층을 따로 만들어 주지 않았기 때문에<br>recommend_leng.shape[0] 으로 정해줍니다.</li>\n<li><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fig = go.Figure(go.Treemap(</span><br><span class=\"line\">    labels = recommend_leng[<span class=\"string\">&#x27;Lenguage&#x27;</span>],</span><br><span class=\"line\">    values = recommend_leng[<span class=\"string\">&#x27;Count&#x27;</span>],</span><br><span class=\"line\">    parents = [<span class=\"string\">&#x27;&#x27;</span>]*recommend_leng.shape[<span class=\"number\">0</span>],</span><br><span class=\"line\">    textinfo = <span class=\"string\">&quot;percent root+label+value+text&quot;</span>,</span><br><span class=\"line\">))</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n<img src=\"/images/0307_3-4/2.PNG\"><br></li>\n</ul>\n<h3 id=\"나머지-코드\"><a href=\"#나머지-코드\" class=\"headerlink\" title=\"나머지 코드\"></a><strong>나머지 코드</strong></h3><hr>\n<ul>\n<li>treemapcolorway = colors<br>treemap 컬러 지정</li>\n<li><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fig.update_traces(hovertemplate=<span class=\"string\">&#x27;&lt;b&gt;Lenguage&lt;/b&gt;: %&#123;label&#125;&lt;br&gt;&lt;extra&gt;&lt;/extra&gt;&#x27;</span>+</span><br><span class=\"line\">                                <span class=\"string\">&#x27;&lt;b&gt;Count&lt;/b&gt;: %&#123;value&#125;&#x27;</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\">fig.update_layout(showlegend=<span class=\"literal\">False</span>, </span><br><span class=\"line\">                  treemapcolorway = colors,</span><br><span class=\"line\">                  margin=<span class=\"built_in\">dict</span>(pad=<span class=\"number\">20</span>),</span><br><span class=\"line\">                  paper_bgcolor=<span class=\"string\">&#x27;#F7F7F7&#x27;</span>,</span><br><span class=\"line\">                  plot_bgcolor=<span class=\"string\">&#x27;#F7F7F7&#x27;</span>,</span><br><span class=\"line\">                  height=<span class=\"number\">600</span>,</span><br><span class=\"line\">                  yaxis=&#123;<span class=\"string\">&#x27;showticklabels&#x27;</span>: <span class=\"literal\">False</span>&#125;,</span><br><span class=\"line\">                  yaxis_title=<span class=\"literal\">None</span>,</span><br><span class=\"line\">                  xaxis_title=<span class=\"literal\">None</span>,</span><br><span class=\"line\">                  title_text=<span class=\"string\">&quot;Most Recommended &lt;b&gt;Programming Language&lt;/b&gt;&quot;</span>,</span><br><span class=\"line\">                  title_x=<span class=\"number\">0.5</span>,</span><br><span class=\"line\">                  title_y=<span class=\"number\">0.95</span>,</span><br><span class=\"line\">                  font=<span class=\"built_in\">dict</span>(family=<span class=\"string\">&quot;Hiragino Kaku Gothic Pro, sans-serif&quot;</span>, size=<span class=\"number\">17</span>, color=<span class=\"string\">&#x27;#000000&#x27;</span>),</span><br><span class=\"line\">                  title_font_size=<span class=\"number\">35</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">14</span>),</span><br><span class=\"line\">                                    x=<span class=\"number\">0.96</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.14</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;@miguelfzzz&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">12</span>),</span><br><span class=\"line\">                                    x=<span class=\"number\">0.01</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.14</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;Source: 2021 Kaggle Machine Learning &amp; Data Science Survey&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n<img src=\"/images/0307_3-4/3.PNG\"><br>\n<br></li>\n</ul>\n"},{"title":"Kaggle Competition(2)","date":"2021-11-14T15:00:00.000Z","toc":true,"thumbnail":"images/mykaggle2/6.png","widgets":null,"_content":"\n### **라이브러리 불러오기 & 캐글 데이터 불러오기**\n---\n\n\n```python\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pylab as plt\n\nimport plotly.io as pio\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.figure_factory as ff\nfrom plotly.subplots import make_subplots\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\npio.templates.default = \"none\"\n# import plotly.offline as py\n# py.offline.init_notebook_mode()\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n```\n\n\n```python\ndf17= pd.read_csv(\"/kaggle/input/kaggle-survey-2017/multipleChoiceResponses.csv\", encoding=\"ISO-8859-1\")\ndf18= pd.read_csv(\"/kaggle/input/kaggle-survey-2018/multipleChoiceResponses.csv\", )\ndf19= pd.read_csv(\"/kaggle/input/kaggle-survey-2019/multiple_choice_responses.csv\", )\ndf20= pd.read_csv(\"/kaggle/input/kaggle-survey-2020/kaggle_survey_2020_responses.csv\", )\ndf21= pd.read_csv(\"/kaggle/input/kaggle-survey-2021/kaggle_survey_2021_responses.csv\", )\n```\n\n<br>\n\n### **데이터 Grouping**\n---\n\n\n```python\n## East Asia에는 대한민국, 일본, 중국, 타이완, 몽골, 북조선 총 6개의 국가가 속해 있다. \n\nEastAsia17 = ['China',\"People 's Republic of China\", 'Taiwan', 'South Korea', 'Japan']\nEastAsia18 = ['China', 'South Korea', 'Japan', 'Republic of Korea'] \nEastAsia19 = ['China','Taiwan', 'South Korea', 'Japan', 'Republic of Korea']\nEastAsia20 = ['China','Taiwan', 'South Korea', 'Japan', 'Republic of Korea']\nEastAsia21 = ['China','Taiwan', 'South Korea', 'Japan']\nEastAsia = ['Republic of Korea','China','Taiwan', 'South Korea', 'Japan', \"People 's Republic of China\" ]\n\n#21년\ndf21_Ea = df21[df21['Q3'].isin(EastAsia)]\ndf21_Wo = df21[~df21['Q3'].isin(EastAsia )]\n\n##  동아시아 국가를 제외한 국가들을 region 열의 데이터 값을 World 로 바꿔줌\ndf21['region']=[\"EastAsia\" if x in EastAsia \n                            else \"World\" for x in df21['Q3']]\n\n#20년\ndf20_Ea = df20[df20['Q3'].isin(EastAsia)]\ndf20_Wo = df20[~df20['Q3'].isin(EastAsia )]\ndf20['region']=[\"EastAsia\" if x in EastAsia \n                            else \"World\" for x in df20['Q3']]\n\n#19년\ndf19_Ea = df19[df19['Q3'].isin(EastAsia)]\ndf19_Wo = df19[~df19['Q3'].isin(EastAsia )]\ndf19['region']=[\"EastAsia\" if x in EastAsia\n                            else \"World\" for x in df19['Q3']]\n\n#18년\ndf18_Ea = df18[df18['Q3'].isin(EastAsia)]\ndf18_Wo = df18[~df18['Q3'].isin(EastAsia )]\ndf18['region']=[\"EastAsia\" if x in EastAsia \n                            else \"World\" for x in df18['Q3']]\n\n#17년\ndf17_Ea = df17[df17['Country'].isin(EastAsia)]\ndf17_Wo = df17[~df17['Country'].isin(EastAsia )]\ndf17['region']=[\"EastAsia\" if x in EastAsia \n                            else \"World\" for x in df17['Country']]\n```\n<br>\n\n### **Stack Bar 그래프 데이터 전처리1**\n---\n- 연도별로 데이터 정리 했음\n\n\n```python\ndf21_Ea=df21[df21['Q3'].isin(EastAsia21)]\ndf21_Ea['Q3'].value_counts().to_frame().reset_index().rename(columns={'index':'Country', 'Q3':'21_n'})\n```\n![](/images/mykaggle2/1.PNG)\n<br>\n\n\n```python\ndf20_Ea=df20[df20['Q3'].isin(EastAsia20)]\ndf20_Ea['Q3'].replace('Republic of Korea','South Korea').value_counts().to_frame().reset_index().rename(columns={'index':'Country', 'Q3':'20_n'})\n```\n![](/images/mykaggle2/2.PNG)\n<br>\n\n```python\ndf19_Ea=df19[df19['Q3'].isin(EastAsia19)]\ndf19_Ea['Q3'].replace('Republic of Korea','South Korea').value_counts().to_frame().reset_index().rename(columns={'index':'Country', 'Q3':'19_n'})\n```\n![](/images/mykaggle2/3.PNG)\n<br>\n\n- append() 메서드를 사용해서 Taiwan = 0 값 추가해줌\n- ignore_index=True  원래 있던 df의 index를 무시\n```python\ndf18_Ea=df18[df18['Q3'].isin(EastAsia18)]\ndf18_Ea['Q3'].replace('Republic of Korea','South Korea').value_counts().to_frame().reset_index().append({'index': 'Taiwan','Q3':'0'}, ignore_index=True).rename(columns={'index':'Country', 'Q3':'18_n'})\n```\n![](/images/mykaggle2/4.PNG)\n<br>\n\n```python\ndf17_Ea = df17[df17['Country'].isin(EastAsia)]\ndf17_Ea['Country'].replace(\"People 's Republic of China\",\"China\").value_counts().to_frame().reset_index().rename(columns={'index':'Country', 'Country':'17_n'})\n```\n![](/images/mykaggle2/5.PNG)\n<br>\n\n### **Stack Bar 그래프 데이터 전처리2**\n---\n\n- 18년도 Taiwan 데이터 값이 없음\n- iloc: 데이터프레임의 행이나 컬럼에 인덱스 값으로 접근\n- loc: 데이터프레임의 행이나 컬럼에 label이나 boolean array로 접근 (location의 약자)\n<br>\n<br>\n- 위에 전처리 내용을 아래 그래프에 맞게 더 다듬어 정리하였다\n\n\n```python\ndf17_Ea = df17[df17['Country'].isin(EastAsia)]\ndf17_StackB = df17_Ea['Country'].replace(\"People 's Republic of China\",\"China\").value_counts().to_frame().reset_index()\n\ndf18_Ea = df18[df18['Q3'].isin(EastAsia18)]\ndf18_StackB = df18_Ea['Q3'].replace('Republic of Korea','South Korea').value_counts().to_frame().reset_index().append({'index': 'Taiwan','Q3':'0'}, ignore_index=True)\n\ndf19_Ea = df19[df19['Q3'].isin(EastAsia19)]\ndf19_StackB = df19_Ea['Q3'].replace('Republic of Korea','South Korea').value_counts().to_frame().reset_index()\n\ndf20_Ea = df20[df20['Q3'].isin(EastAsia20)]\ndf20_StackB = df20_Ea['Q3'].replace('Republic of Korea','South Korea').value_counts().to_frame().reset_index()\n\ndf21_Ea = df21[df21['Q3'].isin(EastAsia21)]\ndf21_StackB = df21_Ea['Q3'].value_counts().to_frame().reset_index()\n```\n\n- barmode ='stack'\nBar 그래프를 stack 형식으로 쌓아서 표현하였다\n\n```python\nfig = go.Figure(data=[\n    go.Bar(name='China', x=years, y=[df17_StackB.iloc[0,1], df18_StackB.iloc[0,1], df19_StackB.iloc[1,1], df20_StackB.iloc[1,1], df21_StackB.iloc[1,1]]),\n    \n    go.Bar(name='Japan', x=years, y=[df17_StackB.iloc[1,1], df18_StackB.iloc[1,1], df19_StackB.iloc[0,1], df20_StackB.iloc[0,1], df21_StackB.iloc[0,1]]),\n    \n    go.Bar(name='Taiwan', x=years, y=[df17_StackB.iloc[2,1], df18_StackB.iloc[3,1], df19_StackB.iloc[2,1], df20_StackB.iloc[2,1], df21_StackB.iloc[3,1]]),\n    \n    go.Bar(name='South Korea', x=years, y=[df17_StackB.iloc[3,1], df18_StackB.iloc[2,1], df19_StackB.iloc[3,1], df20_StackB.iloc[3,1], df21_StackB.iloc[2,1]])\n    \n    ])\n\nfig.update_layout(barmode ='stack')\nfig.show()\n```\n![](/images/mykaggle2/6.png)\n<br>\n\n### **Pie 그래프**\n### **데이터 전처리**\n---\n\n\n```python\nfig = make_subplots(rows=1, cols=5)\ntotal17 = (\n    df17['region']\n    .value_counts()\n    .to_frame()\n    .reset_index()\n    .rename(columns={'index':'type', 'region':'respodents'})\n    .groupby('type')\n    .sum()\n    .reset_index()\n)\ntotal18 = (\n    df18['region']\n    .value_counts()\n    .to_frame()\n    .reset_index()\n    .rename(columns={'index':'type', 'region':'respodents'})\n    .groupby('type')\n    .sum()\n    .reset_index()\n)\ntotal19 = (\n    df19['region']\n    .value_counts()\n    .to_frame()\n    .reset_index()\n    .rename(columns={'index':'type', 'region':'respodents'})\n    .groupby('type')\n    .sum()\n    .reset_index()\n)\ntotal20 = (\n    df20['region']\n    .value_counts()\n    .to_frame()\n    .reset_index()\n    .rename(columns={'index':'type', 'region':'respodents'})\n    .groupby('type')\n    .sum()\n    .reset_index()\n)\ntotal21 = (\n    df21['region']\n    .value_counts()\n    .to_frame()\n    .reset_index()\n    .rename(columns={'index':'type', 'region':'respodents'})\n    .groupby('type')\n    .sum()\n    .reset_index()\n)\n```\n<br>\n\n### **Pie 그래프 그리기**\n---\n- scalegroup='one'\n원 그래프의 자체 사이즈를 변경 할 수 있다.\n```python\nfig = make_subplots(rows=1, cols=5, specs=[[{'type':'domain'}, {'type':'domain'}, {'type':'domain'}, {'type':'domain'}, {'type':'domain'}]])\n\nfig.add_trace(go.Pie(labels=total21['type'], values=total21['respodents'], name=\"2021\", scalegroup='one'),\n              1, 1)\nfig.add_trace(go.Pie(labels=total20['type'], values=total20['respodents'], name=\"2020\", scalegroup='one'),\n              1, 2)\nfig.add_trace(go.Pie(labels=total19['type'], values=total19['respodents'], name=\"2019\", scalegroup='one'),\n              1, 3)\nfig.add_trace(go.Pie(labels=total18['type'], values=total18['respodents'], name=\"2018\", scalegroup='one'),\n              1, 4)\nfig.add_trace(go.Pie(labels=total17['type'], values=total17['respodents'], name=\"2017\", scalegroup='one'),\n              1, 5)\n\nfig.update_traces(hole=.2, hoverinfo=\"label+percent+name\")\nfig.update_layout(\n    title_text=\"<b>World vs EastAsia</b>\",\n    \n   )\nfig.show()\n```\n![](/images/mykaggle2/7.png)\n<br>\n\n### **느낀점**\n---\n그래프 그리는것보다\n데이터 전처리가 더 힘든것 같다..\n그래도 이번에 직접 해보면서\n헷갈렸던 문법들을 다시 정리할수 있었고\n의미를 완벽하게 익혔고 어느정도 감이 잡혔음을 느꼈다.\n\n내일도 더 열심히...\n\n\n### **Ref**\n---\nhttps://plotly.com/python/pie-charts/\n<br>\n<br>\n<br>\n","source":"_posts/mykaggle2.md","raw":"---\ntitle: Kaggle Competition(2)\ndate: 2021-11-15\ntags: kaggle, plotly, pie, bar\ntoc: true\nthumbnail: images/mykaggle2/6.png\ncategories: \n- kaggle 필사\nwidgets: null\n---\n\n### **라이브러리 불러오기 & 캐글 데이터 불러오기**\n---\n\n\n```python\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pylab as plt\n\nimport plotly.io as pio\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.figure_factory as ff\nfrom plotly.subplots import make_subplots\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\npio.templates.default = \"none\"\n# import plotly.offline as py\n# py.offline.init_notebook_mode()\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n```\n\n\n```python\ndf17= pd.read_csv(\"/kaggle/input/kaggle-survey-2017/multipleChoiceResponses.csv\", encoding=\"ISO-8859-1\")\ndf18= pd.read_csv(\"/kaggle/input/kaggle-survey-2018/multipleChoiceResponses.csv\", )\ndf19= pd.read_csv(\"/kaggle/input/kaggle-survey-2019/multiple_choice_responses.csv\", )\ndf20= pd.read_csv(\"/kaggle/input/kaggle-survey-2020/kaggle_survey_2020_responses.csv\", )\ndf21= pd.read_csv(\"/kaggle/input/kaggle-survey-2021/kaggle_survey_2021_responses.csv\", )\n```\n\n<br>\n\n### **데이터 Grouping**\n---\n\n\n```python\n## East Asia에는 대한민국, 일본, 중국, 타이완, 몽골, 북조선 총 6개의 국가가 속해 있다. \n\nEastAsia17 = ['China',\"People 's Republic of China\", 'Taiwan', 'South Korea', 'Japan']\nEastAsia18 = ['China', 'South Korea', 'Japan', 'Republic of Korea'] \nEastAsia19 = ['China','Taiwan', 'South Korea', 'Japan', 'Republic of Korea']\nEastAsia20 = ['China','Taiwan', 'South Korea', 'Japan', 'Republic of Korea']\nEastAsia21 = ['China','Taiwan', 'South Korea', 'Japan']\nEastAsia = ['Republic of Korea','China','Taiwan', 'South Korea', 'Japan', \"People 's Republic of China\" ]\n\n#21년\ndf21_Ea = df21[df21['Q3'].isin(EastAsia)]\ndf21_Wo = df21[~df21['Q3'].isin(EastAsia )]\n\n##  동아시아 국가를 제외한 국가들을 region 열의 데이터 값을 World 로 바꿔줌\ndf21['region']=[\"EastAsia\" if x in EastAsia \n                            else \"World\" for x in df21['Q3']]\n\n#20년\ndf20_Ea = df20[df20['Q3'].isin(EastAsia)]\ndf20_Wo = df20[~df20['Q3'].isin(EastAsia )]\ndf20['region']=[\"EastAsia\" if x in EastAsia \n                            else \"World\" for x in df20['Q3']]\n\n#19년\ndf19_Ea = df19[df19['Q3'].isin(EastAsia)]\ndf19_Wo = df19[~df19['Q3'].isin(EastAsia )]\ndf19['region']=[\"EastAsia\" if x in EastAsia\n                            else \"World\" for x in df19['Q3']]\n\n#18년\ndf18_Ea = df18[df18['Q3'].isin(EastAsia)]\ndf18_Wo = df18[~df18['Q3'].isin(EastAsia )]\ndf18['region']=[\"EastAsia\" if x in EastAsia \n                            else \"World\" for x in df18['Q3']]\n\n#17년\ndf17_Ea = df17[df17['Country'].isin(EastAsia)]\ndf17_Wo = df17[~df17['Country'].isin(EastAsia )]\ndf17['region']=[\"EastAsia\" if x in EastAsia \n                            else \"World\" for x in df17['Country']]\n```\n<br>\n\n### **Stack Bar 그래프 데이터 전처리1**\n---\n- 연도별로 데이터 정리 했음\n\n\n```python\ndf21_Ea=df21[df21['Q3'].isin(EastAsia21)]\ndf21_Ea['Q3'].value_counts().to_frame().reset_index().rename(columns={'index':'Country', 'Q3':'21_n'})\n```\n![](/images/mykaggle2/1.PNG)\n<br>\n\n\n```python\ndf20_Ea=df20[df20['Q3'].isin(EastAsia20)]\ndf20_Ea['Q3'].replace('Republic of Korea','South Korea').value_counts().to_frame().reset_index().rename(columns={'index':'Country', 'Q3':'20_n'})\n```\n![](/images/mykaggle2/2.PNG)\n<br>\n\n```python\ndf19_Ea=df19[df19['Q3'].isin(EastAsia19)]\ndf19_Ea['Q3'].replace('Republic of Korea','South Korea').value_counts().to_frame().reset_index().rename(columns={'index':'Country', 'Q3':'19_n'})\n```\n![](/images/mykaggle2/3.PNG)\n<br>\n\n- append() 메서드를 사용해서 Taiwan = 0 값 추가해줌\n- ignore_index=True  원래 있던 df의 index를 무시\n```python\ndf18_Ea=df18[df18['Q3'].isin(EastAsia18)]\ndf18_Ea['Q3'].replace('Republic of Korea','South Korea').value_counts().to_frame().reset_index().append({'index': 'Taiwan','Q3':'0'}, ignore_index=True).rename(columns={'index':'Country', 'Q3':'18_n'})\n```\n![](/images/mykaggle2/4.PNG)\n<br>\n\n```python\ndf17_Ea = df17[df17['Country'].isin(EastAsia)]\ndf17_Ea['Country'].replace(\"People 's Republic of China\",\"China\").value_counts().to_frame().reset_index().rename(columns={'index':'Country', 'Country':'17_n'})\n```\n![](/images/mykaggle2/5.PNG)\n<br>\n\n### **Stack Bar 그래프 데이터 전처리2**\n---\n\n- 18년도 Taiwan 데이터 값이 없음\n- iloc: 데이터프레임의 행이나 컬럼에 인덱스 값으로 접근\n- loc: 데이터프레임의 행이나 컬럼에 label이나 boolean array로 접근 (location의 약자)\n<br>\n<br>\n- 위에 전처리 내용을 아래 그래프에 맞게 더 다듬어 정리하였다\n\n\n```python\ndf17_Ea = df17[df17['Country'].isin(EastAsia)]\ndf17_StackB = df17_Ea['Country'].replace(\"People 's Republic of China\",\"China\").value_counts().to_frame().reset_index()\n\ndf18_Ea = df18[df18['Q3'].isin(EastAsia18)]\ndf18_StackB = df18_Ea['Q3'].replace('Republic of Korea','South Korea').value_counts().to_frame().reset_index().append({'index': 'Taiwan','Q3':'0'}, ignore_index=True)\n\ndf19_Ea = df19[df19['Q3'].isin(EastAsia19)]\ndf19_StackB = df19_Ea['Q3'].replace('Republic of Korea','South Korea').value_counts().to_frame().reset_index()\n\ndf20_Ea = df20[df20['Q3'].isin(EastAsia20)]\ndf20_StackB = df20_Ea['Q3'].replace('Republic of Korea','South Korea').value_counts().to_frame().reset_index()\n\ndf21_Ea = df21[df21['Q3'].isin(EastAsia21)]\ndf21_StackB = df21_Ea['Q3'].value_counts().to_frame().reset_index()\n```\n\n- barmode ='stack'\nBar 그래프를 stack 형식으로 쌓아서 표현하였다\n\n```python\nfig = go.Figure(data=[\n    go.Bar(name='China', x=years, y=[df17_StackB.iloc[0,1], df18_StackB.iloc[0,1], df19_StackB.iloc[1,1], df20_StackB.iloc[1,1], df21_StackB.iloc[1,1]]),\n    \n    go.Bar(name='Japan', x=years, y=[df17_StackB.iloc[1,1], df18_StackB.iloc[1,1], df19_StackB.iloc[0,1], df20_StackB.iloc[0,1], df21_StackB.iloc[0,1]]),\n    \n    go.Bar(name='Taiwan', x=years, y=[df17_StackB.iloc[2,1], df18_StackB.iloc[3,1], df19_StackB.iloc[2,1], df20_StackB.iloc[2,1], df21_StackB.iloc[3,1]]),\n    \n    go.Bar(name='South Korea', x=years, y=[df17_StackB.iloc[3,1], df18_StackB.iloc[2,1], df19_StackB.iloc[3,1], df20_StackB.iloc[3,1], df21_StackB.iloc[2,1]])\n    \n    ])\n\nfig.update_layout(barmode ='stack')\nfig.show()\n```\n![](/images/mykaggle2/6.png)\n<br>\n\n### **Pie 그래프**\n### **데이터 전처리**\n---\n\n\n```python\nfig = make_subplots(rows=1, cols=5)\ntotal17 = (\n    df17['region']\n    .value_counts()\n    .to_frame()\n    .reset_index()\n    .rename(columns={'index':'type', 'region':'respodents'})\n    .groupby('type')\n    .sum()\n    .reset_index()\n)\ntotal18 = (\n    df18['region']\n    .value_counts()\n    .to_frame()\n    .reset_index()\n    .rename(columns={'index':'type', 'region':'respodents'})\n    .groupby('type')\n    .sum()\n    .reset_index()\n)\ntotal19 = (\n    df19['region']\n    .value_counts()\n    .to_frame()\n    .reset_index()\n    .rename(columns={'index':'type', 'region':'respodents'})\n    .groupby('type')\n    .sum()\n    .reset_index()\n)\ntotal20 = (\n    df20['region']\n    .value_counts()\n    .to_frame()\n    .reset_index()\n    .rename(columns={'index':'type', 'region':'respodents'})\n    .groupby('type')\n    .sum()\n    .reset_index()\n)\ntotal21 = (\n    df21['region']\n    .value_counts()\n    .to_frame()\n    .reset_index()\n    .rename(columns={'index':'type', 'region':'respodents'})\n    .groupby('type')\n    .sum()\n    .reset_index()\n)\n```\n<br>\n\n### **Pie 그래프 그리기**\n---\n- scalegroup='one'\n원 그래프의 자체 사이즈를 변경 할 수 있다.\n```python\nfig = make_subplots(rows=1, cols=5, specs=[[{'type':'domain'}, {'type':'domain'}, {'type':'domain'}, {'type':'domain'}, {'type':'domain'}]])\n\nfig.add_trace(go.Pie(labels=total21['type'], values=total21['respodents'], name=\"2021\", scalegroup='one'),\n              1, 1)\nfig.add_trace(go.Pie(labels=total20['type'], values=total20['respodents'], name=\"2020\", scalegroup='one'),\n              1, 2)\nfig.add_trace(go.Pie(labels=total19['type'], values=total19['respodents'], name=\"2019\", scalegroup='one'),\n              1, 3)\nfig.add_trace(go.Pie(labels=total18['type'], values=total18['respodents'], name=\"2018\", scalegroup='one'),\n              1, 4)\nfig.add_trace(go.Pie(labels=total17['type'], values=total17['respodents'], name=\"2017\", scalegroup='one'),\n              1, 5)\n\nfig.update_traces(hole=.2, hoverinfo=\"label+percent+name\")\nfig.update_layout(\n    title_text=\"<b>World vs EastAsia</b>\",\n    \n   )\nfig.show()\n```\n![](/images/mykaggle2/7.png)\n<br>\n\n### **느낀점**\n---\n그래프 그리는것보다\n데이터 전처리가 더 힘든것 같다..\n그래도 이번에 직접 해보면서\n헷갈렸던 문법들을 다시 정리할수 있었고\n의미를 완벽하게 익혔고 어느정도 감이 잡혔음을 느꼈다.\n\n내일도 더 열심히...\n\n\n### **Ref**\n---\nhttps://plotly.com/python/pie-charts/\n<br>\n<br>\n<br>\n","slug":"mykaggle2","published":1,"updated":"2022-01-03T12:20:08.049Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cky2hohet001l5nrjhz4efa6w","content":"<h3 id=\"라이브러리-불러오기-amp-캐글-데이터-불러오기\"><a href=\"#라이브러리-불러오기-amp-캐글-데이터-불러오기\" class=\"headerlink\" title=\"라이브러리 불러오기 &amp; 캐글 데이터 불러오기\"></a><strong>라이브러리 불러오기 &amp; 캐글 데이터 불러오기</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">import</span> seaborn <span class=\"keyword\">as</span> sns</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pylab <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> plotly.io <span class=\"keyword\">as</span> pio</span><br><span class=\"line\"><span class=\"keyword\">import</span> plotly.express <span class=\"keyword\">as</span> px</span><br><span class=\"line\"><span class=\"keyword\">import</span> plotly.graph_objects <span class=\"keyword\">as</span> go</span><br><span class=\"line\"><span class=\"keyword\">import</span> plotly.figure_factory <span class=\"keyword\">as</span> ff</span><br><span class=\"line\"><span class=\"keyword\">from</span> plotly.subplots <span class=\"keyword\">import</span> make_subplots</span><br><span class=\"line\"><span class=\"keyword\">from</span> plotly.offline <span class=\"keyword\">import</span> init_notebook_mode, iplot</span><br><span class=\"line\">init_notebook_mode(connected=<span class=\"literal\">True</span>)</span><br><span class=\"line\">pio.templates.default = <span class=\"string\">&quot;none&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># import plotly.offline as py</span></span><br><span class=\"line\"><span class=\"comment\"># py.offline.init_notebook_mode()</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">for</span> dirname, _, filenames <span class=\"keyword\">in</span> os.walk(<span class=\"string\">&#x27;/kaggle/input&#x27;</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> filename <span class=\"keyword\">in</span> filenames:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(os.path.join(dirname, filename))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> warnings</span><br><span class=\"line\">warnings.filterwarnings(<span class=\"string\">&quot;ignore&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df17= pd.read_csv(<span class=\"string\">&quot;/kaggle/input/kaggle-survey-2017/multipleChoiceResponses.csv&quot;</span>, encoding=<span class=\"string\">&quot;ISO-8859-1&quot;</span>)</span><br><span class=\"line\">df18= pd.read_csv(<span class=\"string\">&quot;/kaggle/input/kaggle-survey-2018/multipleChoiceResponses.csv&quot;</span>, )</span><br><span class=\"line\">df19= pd.read_csv(<span class=\"string\">&quot;/kaggle/input/kaggle-survey-2019/multiple_choice_responses.csv&quot;</span>, )</span><br><span class=\"line\">df20= pd.read_csv(<span class=\"string\">&quot;/kaggle/input/kaggle-survey-2020/kaggle_survey_2020_responses.csv&quot;</span>, )</span><br><span class=\"line\">df21= pd.read_csv(<span class=\"string\">&quot;/kaggle/input/kaggle-survey-2021/kaggle_survey_2021_responses.csv&quot;</span>, )</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h3 id=\"데이터-Grouping\"><a href=\"#데이터-Grouping\" class=\"headerlink\" title=\"데이터 Grouping\"></a><strong>데이터 Grouping</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## East Asia에는 대한민국, 일본, 중국, 타이완, 몽골, 북조선 총 6개의 국가가 속해 있다. </span></span><br><span class=\"line\"></span><br><span class=\"line\">EastAsia17 = [<span class=\"string\">&#x27;China&#x27;</span>,<span class=\"string\">&quot;People &#x27;s Republic of China&quot;</span>, <span class=\"string\">&#x27;Taiwan&#x27;</span>, <span class=\"string\">&#x27;South Korea&#x27;</span>, <span class=\"string\">&#x27;Japan&#x27;</span>]</span><br><span class=\"line\">EastAsia18 = [<span class=\"string\">&#x27;China&#x27;</span>, <span class=\"string\">&#x27;South Korea&#x27;</span>, <span class=\"string\">&#x27;Japan&#x27;</span>, <span class=\"string\">&#x27;Republic of Korea&#x27;</span>] </span><br><span class=\"line\">EastAsia19 = [<span class=\"string\">&#x27;China&#x27;</span>,<span class=\"string\">&#x27;Taiwan&#x27;</span>, <span class=\"string\">&#x27;South Korea&#x27;</span>, <span class=\"string\">&#x27;Japan&#x27;</span>, <span class=\"string\">&#x27;Republic of Korea&#x27;</span>]</span><br><span class=\"line\">EastAsia20 = [<span class=\"string\">&#x27;China&#x27;</span>,<span class=\"string\">&#x27;Taiwan&#x27;</span>, <span class=\"string\">&#x27;South Korea&#x27;</span>, <span class=\"string\">&#x27;Japan&#x27;</span>, <span class=\"string\">&#x27;Republic of Korea&#x27;</span>]</span><br><span class=\"line\">EastAsia21 = [<span class=\"string\">&#x27;China&#x27;</span>,<span class=\"string\">&#x27;Taiwan&#x27;</span>, <span class=\"string\">&#x27;South Korea&#x27;</span>, <span class=\"string\">&#x27;Japan&#x27;</span>]</span><br><span class=\"line\">EastAsia = [<span class=\"string\">&#x27;Republic of Korea&#x27;</span>,<span class=\"string\">&#x27;China&#x27;</span>,<span class=\"string\">&#x27;Taiwan&#x27;</span>, <span class=\"string\">&#x27;South Korea&#x27;</span>, <span class=\"string\">&#x27;Japan&#x27;</span>, <span class=\"string\">&quot;People &#x27;s Republic of China&quot;</span> ]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#21년</span></span><br><span class=\"line\">df21_Ea = df21[df21[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(EastAsia)]</span><br><span class=\"line\">df21_Wo = df21[~df21[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(EastAsia )]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##  동아시아 국가를 제외한 국가들을 region 열의 데이터 값을 World 로 바꿔줌</span></span><br><span class=\"line\">df21[<span class=\"string\">&#x27;region&#x27;</span>]=[<span class=\"string\">&quot;EastAsia&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> EastAsia </span><br><span class=\"line\">                            <span class=\"keyword\">else</span> <span class=\"string\">&quot;World&quot;</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> df21[<span class=\"string\">&#x27;Q3&#x27;</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#20년</span></span><br><span class=\"line\">df20_Ea = df20[df20[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(EastAsia)]</span><br><span class=\"line\">df20_Wo = df20[~df20[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(EastAsia )]</span><br><span class=\"line\">df20[<span class=\"string\">&#x27;region&#x27;</span>]=[<span class=\"string\">&quot;EastAsia&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> EastAsia </span><br><span class=\"line\">                            <span class=\"keyword\">else</span> <span class=\"string\">&quot;World&quot;</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> df20[<span class=\"string\">&#x27;Q3&#x27;</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#19년</span></span><br><span class=\"line\">df19_Ea = df19[df19[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(EastAsia)]</span><br><span class=\"line\">df19_Wo = df19[~df19[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(EastAsia )]</span><br><span class=\"line\">df19[<span class=\"string\">&#x27;region&#x27;</span>]=[<span class=\"string\">&quot;EastAsia&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> EastAsia</span><br><span class=\"line\">                            <span class=\"keyword\">else</span> <span class=\"string\">&quot;World&quot;</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> df19[<span class=\"string\">&#x27;Q3&#x27;</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#18년</span></span><br><span class=\"line\">df18_Ea = df18[df18[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(EastAsia)]</span><br><span class=\"line\">df18_Wo = df18[~df18[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(EastAsia )]</span><br><span class=\"line\">df18[<span class=\"string\">&#x27;region&#x27;</span>]=[<span class=\"string\">&quot;EastAsia&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> EastAsia </span><br><span class=\"line\">                            <span class=\"keyword\">else</span> <span class=\"string\">&quot;World&quot;</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> df18[<span class=\"string\">&#x27;Q3&#x27;</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#17년</span></span><br><span class=\"line\">df17_Ea = df17[df17[<span class=\"string\">&#x27;Country&#x27;</span>].isin(EastAsia)]</span><br><span class=\"line\">df17_Wo = df17[~df17[<span class=\"string\">&#x27;Country&#x27;</span>].isin(EastAsia )]</span><br><span class=\"line\">df17[<span class=\"string\">&#x27;region&#x27;</span>]=[<span class=\"string\">&quot;EastAsia&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> EastAsia </span><br><span class=\"line\">                            <span class=\"keyword\">else</span> <span class=\"string\">&quot;World&quot;</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> df17[<span class=\"string\">&#x27;Country&#x27;</span>]]</span><br></pre></td></tr></table></figure>\n<br>\n\n<h3 id=\"Stack-Bar-그래프-데이터-전처리1\"><a href=\"#Stack-Bar-그래프-데이터-전처리1\" class=\"headerlink\" title=\"Stack Bar 그래프 데이터 전처리1\"></a><strong>Stack Bar 그래프 데이터 전처리1</strong></h3><hr>\n<ul>\n<li>연도별로 데이터 정리 했음</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df21_Ea=df21[df21[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(EastAsia21)]</span><br><span class=\"line\">df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>].value_counts().to_frame().reset_index().rename(columns=&#123;<span class=\"string\">&#x27;index&#x27;</span>:<span class=\"string\">&#x27;Country&#x27;</span>, <span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;21_n&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mykaggle2/1.PNG\"><br><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df20_Ea=df20[df20[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(EastAsia20)]</span><br><span class=\"line\">df20_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>].replace(<span class=\"string\">&#x27;Republic of Korea&#x27;</span>,<span class=\"string\">&#x27;South Korea&#x27;</span>).value_counts().to_frame().reset_index().rename(columns=&#123;<span class=\"string\">&#x27;index&#x27;</span>:<span class=\"string\">&#x27;Country&#x27;</span>, <span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;20_n&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mykaggle2/2.PNG\"><br><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df19_Ea=df19[df19[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(EastAsia19)]</span><br><span class=\"line\">df19_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>].replace(<span class=\"string\">&#x27;Republic of Korea&#x27;</span>,<span class=\"string\">&#x27;South Korea&#x27;</span>).value_counts().to_frame().reset_index().rename(columns=&#123;<span class=\"string\">&#x27;index&#x27;</span>:<span class=\"string\">&#x27;Country&#x27;</span>, <span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;19_n&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mykaggle2/3.PNG\"><br><br></p>\n<ul>\n<li>append() 메서드를 사용해서 Taiwan = 0 값 추가해줌</li>\n<li>ignore_index=True  원래 있던 df의 index를 무시<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df18_Ea=df18[df18[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(EastAsia18)]</span><br><span class=\"line\">df18_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>].replace(<span class=\"string\">&#x27;Republic of Korea&#x27;</span>,<span class=\"string\">&#x27;South Korea&#x27;</span>).value_counts().to_frame().reset_index().append(&#123;<span class=\"string\">&#x27;index&#x27;</span>: <span class=\"string\">&#x27;Taiwan&#x27;</span>,<span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;0&#x27;</span>&#125;, ignore_index=<span class=\"literal\">True</span>).rename(columns=&#123;<span class=\"string\">&#x27;index&#x27;</span>:<span class=\"string\">&#x27;Country&#x27;</span>, <span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;18_n&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure>\n<img src=\"/images/mykaggle2/4.PNG\"><br></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df17_Ea = df17[df17[<span class=\"string\">&#x27;Country&#x27;</span>].isin(EastAsia)]</span><br><span class=\"line\">df17_Ea[<span class=\"string\">&#x27;Country&#x27;</span>].replace(<span class=\"string\">&quot;People &#x27;s Republic of China&quot;</span>,<span class=\"string\">&quot;China&quot;</span>).value_counts().to_frame().reset_index().rename(columns=&#123;<span class=\"string\">&#x27;index&#x27;</span>:<span class=\"string\">&#x27;Country&#x27;</span>, <span class=\"string\">&#x27;Country&#x27;</span>:<span class=\"string\">&#x27;17_n&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mykaggle2/5.PNG\"><br><br></p>\n<h3 id=\"Stack-Bar-그래프-데이터-전처리2\"><a href=\"#Stack-Bar-그래프-데이터-전처리2\" class=\"headerlink\" title=\"Stack Bar 그래프 데이터 전처리2\"></a><strong>Stack Bar 그래프 데이터 전처리2</strong></h3><hr>\n<ul>\n<li>18년도 Taiwan 데이터 값이 없음</li>\n<li>iloc: 데이터프레임의 행이나 컬럼에 인덱스 값으로 접근</li>\n<li>loc: 데이터프레임의 행이나 컬럼에 label이나 boolean array로 접근 (location의 약자)<br>\n<br></li>\n<li>위에 전처리 내용을 아래 그래프에 맞게 더 다듬어 정리하였다</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df17_Ea = df17[df17[<span class=\"string\">&#x27;Country&#x27;</span>].isin(EastAsia)]</span><br><span class=\"line\">df17_StackB = df17_Ea[<span class=\"string\">&#x27;Country&#x27;</span>].replace(<span class=\"string\">&quot;People &#x27;s Republic of China&quot;</span>,<span class=\"string\">&quot;China&quot;</span>).value_counts().to_frame().reset_index()</span><br><span class=\"line\"></span><br><span class=\"line\">df18_Ea = df18[df18[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(EastAsia18)]</span><br><span class=\"line\">df18_StackB = df18_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>].replace(<span class=\"string\">&#x27;Republic of Korea&#x27;</span>,<span class=\"string\">&#x27;South Korea&#x27;</span>).value_counts().to_frame().reset_index().append(&#123;<span class=\"string\">&#x27;index&#x27;</span>: <span class=\"string\">&#x27;Taiwan&#x27;</span>,<span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;0&#x27;</span>&#125;, ignore_index=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">df19_Ea = df19[df19[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(EastAsia19)]</span><br><span class=\"line\">df19_StackB = df19_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>].replace(<span class=\"string\">&#x27;Republic of Korea&#x27;</span>,<span class=\"string\">&#x27;South Korea&#x27;</span>).value_counts().to_frame().reset_index()</span><br><span class=\"line\"></span><br><span class=\"line\">df20_Ea = df20[df20[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(EastAsia20)]</span><br><span class=\"line\">df20_StackB = df20_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>].replace(<span class=\"string\">&#x27;Republic of Korea&#x27;</span>,<span class=\"string\">&#x27;South Korea&#x27;</span>).value_counts().to_frame().reset_index()</span><br><span class=\"line\"></span><br><span class=\"line\">df21_Ea = df21[df21[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(EastAsia21)]</span><br><span class=\"line\">df21_StackB = df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>].value_counts().to_frame().reset_index()</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>barmode =’stack’<br>Bar 그래프를 stack 형식으로 쌓아서 표현하였다</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fig = go.Figure(data=[</span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;China&#x27;</span>, x=years, y=[df17_StackB.iloc[<span class=\"number\">0</span>,<span class=\"number\">1</span>], df18_StackB.iloc[<span class=\"number\">0</span>,<span class=\"number\">1</span>], df19_StackB.iloc[<span class=\"number\">1</span>,<span class=\"number\">1</span>], df20_StackB.iloc[<span class=\"number\">1</span>,<span class=\"number\">1</span>], df21_StackB.iloc[<span class=\"number\">1</span>,<span class=\"number\">1</span>]]),</span><br><span class=\"line\">    </span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;Japan&#x27;</span>, x=years, y=[df17_StackB.iloc[<span class=\"number\">1</span>,<span class=\"number\">1</span>], df18_StackB.iloc[<span class=\"number\">1</span>,<span class=\"number\">1</span>], df19_StackB.iloc[<span class=\"number\">0</span>,<span class=\"number\">1</span>], df20_StackB.iloc[<span class=\"number\">0</span>,<span class=\"number\">1</span>], df21_StackB.iloc[<span class=\"number\">0</span>,<span class=\"number\">1</span>]]),</span><br><span class=\"line\">    </span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;Taiwan&#x27;</span>, x=years, y=[df17_StackB.iloc[<span class=\"number\">2</span>,<span class=\"number\">1</span>], df18_StackB.iloc[<span class=\"number\">3</span>,<span class=\"number\">1</span>], df19_StackB.iloc[<span class=\"number\">2</span>,<span class=\"number\">1</span>], df20_StackB.iloc[<span class=\"number\">2</span>,<span class=\"number\">1</span>], df21_StackB.iloc[<span class=\"number\">3</span>,<span class=\"number\">1</span>]]),</span><br><span class=\"line\">    </span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;South Korea&#x27;</span>, x=years, y=[df17_StackB.iloc[<span class=\"number\">3</span>,<span class=\"number\">1</span>], df18_StackB.iloc[<span class=\"number\">2</span>,<span class=\"number\">1</span>], df19_StackB.iloc[<span class=\"number\">3</span>,<span class=\"number\">1</span>], df20_StackB.iloc[<span class=\"number\">3</span>,<span class=\"number\">1</span>], df21_StackB.iloc[<span class=\"number\">2</span>,<span class=\"number\">1</span>]])</span><br><span class=\"line\">    </span><br><span class=\"line\">    ])</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(barmode =<span class=\"string\">&#x27;stack&#x27;</span>)</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mykaggle2/6.png\"><br><br></p>\n<h3 id=\"Pie-그래프\"><a href=\"#Pie-그래프\" class=\"headerlink\" title=\"Pie 그래프\"></a><strong>Pie 그래프</strong></h3><h3 id=\"데이터-전처리\"><a href=\"#데이터-전처리\" class=\"headerlink\" title=\"데이터 전처리\"></a><strong>데이터 전처리</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fig = make_subplots(rows=<span class=\"number\">1</span>, cols=<span class=\"number\">5</span>)</span><br><span class=\"line\">total17 = (</span><br><span class=\"line\">    df17[<span class=\"string\">&#x27;region&#x27;</span>]</span><br><span class=\"line\">    .value_counts()</span><br><span class=\"line\">    .to_frame()</span><br><span class=\"line\">    .reset_index()</span><br><span class=\"line\">    .rename(columns=&#123;<span class=\"string\">&#x27;index&#x27;</span>:<span class=\"string\">&#x27;type&#x27;</span>, <span class=\"string\">&#x27;region&#x27;</span>:<span class=\"string\">&#x27;respodents&#x27;</span>&#125;)</span><br><span class=\"line\">    .groupby(<span class=\"string\">&#x27;type&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"built_in\">sum</span>()</span><br><span class=\"line\">    .reset_index()</span><br><span class=\"line\">)</span><br><span class=\"line\">total18 = (</span><br><span class=\"line\">    df18[<span class=\"string\">&#x27;region&#x27;</span>]</span><br><span class=\"line\">    .value_counts()</span><br><span class=\"line\">    .to_frame()</span><br><span class=\"line\">    .reset_index()</span><br><span class=\"line\">    .rename(columns=&#123;<span class=\"string\">&#x27;index&#x27;</span>:<span class=\"string\">&#x27;type&#x27;</span>, <span class=\"string\">&#x27;region&#x27;</span>:<span class=\"string\">&#x27;respodents&#x27;</span>&#125;)</span><br><span class=\"line\">    .groupby(<span class=\"string\">&#x27;type&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"built_in\">sum</span>()</span><br><span class=\"line\">    .reset_index()</span><br><span class=\"line\">)</span><br><span class=\"line\">total19 = (</span><br><span class=\"line\">    df19[<span class=\"string\">&#x27;region&#x27;</span>]</span><br><span class=\"line\">    .value_counts()</span><br><span class=\"line\">    .to_frame()</span><br><span class=\"line\">    .reset_index()</span><br><span class=\"line\">    .rename(columns=&#123;<span class=\"string\">&#x27;index&#x27;</span>:<span class=\"string\">&#x27;type&#x27;</span>, <span class=\"string\">&#x27;region&#x27;</span>:<span class=\"string\">&#x27;respodents&#x27;</span>&#125;)</span><br><span class=\"line\">    .groupby(<span class=\"string\">&#x27;type&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"built_in\">sum</span>()</span><br><span class=\"line\">    .reset_index()</span><br><span class=\"line\">)</span><br><span class=\"line\">total20 = (</span><br><span class=\"line\">    df20[<span class=\"string\">&#x27;region&#x27;</span>]</span><br><span class=\"line\">    .value_counts()</span><br><span class=\"line\">    .to_frame()</span><br><span class=\"line\">    .reset_index()</span><br><span class=\"line\">    .rename(columns=&#123;<span class=\"string\">&#x27;index&#x27;</span>:<span class=\"string\">&#x27;type&#x27;</span>, <span class=\"string\">&#x27;region&#x27;</span>:<span class=\"string\">&#x27;respodents&#x27;</span>&#125;)</span><br><span class=\"line\">    .groupby(<span class=\"string\">&#x27;type&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"built_in\">sum</span>()</span><br><span class=\"line\">    .reset_index()</span><br><span class=\"line\">)</span><br><span class=\"line\">total21 = (</span><br><span class=\"line\">    df21[<span class=\"string\">&#x27;region&#x27;</span>]</span><br><span class=\"line\">    .value_counts()</span><br><span class=\"line\">    .to_frame()</span><br><span class=\"line\">    .reset_index()</span><br><span class=\"line\">    .rename(columns=&#123;<span class=\"string\">&#x27;index&#x27;</span>:<span class=\"string\">&#x27;type&#x27;</span>, <span class=\"string\">&#x27;region&#x27;</span>:<span class=\"string\">&#x27;respodents&#x27;</span>&#125;)</span><br><span class=\"line\">    .groupby(<span class=\"string\">&#x27;type&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"built_in\">sum</span>()</span><br><span class=\"line\">    .reset_index()</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<br>\n\n<h3 id=\"Pie-그래프-그리기\"><a href=\"#Pie-그래프-그리기\" class=\"headerlink\" title=\"Pie 그래프 그리기\"></a><strong>Pie 그래프 그리기</strong></h3><hr>\n<ul>\n<li>scalegroup=’one’<br>원 그래프의 자체 사이즈를 변경 할 수 있다.<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fig = make_subplots(rows=<span class=\"number\">1</span>, cols=<span class=\"number\">5</span>, specs=[[&#123;<span class=\"string\">&#x27;type&#x27;</span>:<span class=\"string\">&#x27;domain&#x27;</span>&#125;, &#123;<span class=\"string\">&#x27;type&#x27;</span>:<span class=\"string\">&#x27;domain&#x27;</span>&#125;, &#123;<span class=\"string\">&#x27;type&#x27;</span>:<span class=\"string\">&#x27;domain&#x27;</span>&#125;, &#123;<span class=\"string\">&#x27;type&#x27;</span>:<span class=\"string\">&#x27;domain&#x27;</span>&#125;, &#123;<span class=\"string\">&#x27;type&#x27;</span>:<span class=\"string\">&#x27;domain&#x27;</span>&#125;]])</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_trace(go.Pie(labels=total21[<span class=\"string\">&#x27;type&#x27;</span>], values=total21[<span class=\"string\">&#x27;respodents&#x27;</span>], name=<span class=\"string\">&quot;2021&quot;</span>, scalegroup=<span class=\"string\">&#x27;one&#x27;</span>),</span><br><span class=\"line\">              <span class=\"number\">1</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">fig.add_trace(go.Pie(labels=total20[<span class=\"string\">&#x27;type&#x27;</span>], values=total20[<span class=\"string\">&#x27;respodents&#x27;</span>], name=<span class=\"string\">&quot;2020&quot;</span>, scalegroup=<span class=\"string\">&#x27;one&#x27;</span>),</span><br><span class=\"line\">              <span class=\"number\">1</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\">fig.add_trace(go.Pie(labels=total19[<span class=\"string\">&#x27;type&#x27;</span>], values=total19[<span class=\"string\">&#x27;respodents&#x27;</span>], name=<span class=\"string\">&quot;2019&quot;</span>, scalegroup=<span class=\"string\">&#x27;one&#x27;</span>),</span><br><span class=\"line\">              <span class=\"number\">1</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">fig.add_trace(go.Pie(labels=total18[<span class=\"string\">&#x27;type&#x27;</span>], values=total18[<span class=\"string\">&#x27;respodents&#x27;</span>], name=<span class=\"string\">&quot;2018&quot;</span>, scalegroup=<span class=\"string\">&#x27;one&#x27;</span>),</span><br><span class=\"line\">              <span class=\"number\">1</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\">fig.add_trace(go.Pie(labels=total17[<span class=\"string\">&#x27;type&#x27;</span>], values=total17[<span class=\"string\">&#x27;respodents&#x27;</span>], name=<span class=\"string\">&quot;2017&quot;</span>, scalegroup=<span class=\"string\">&#x27;one&#x27;</span>),</span><br><span class=\"line\">              <span class=\"number\">1</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_traces(hole=<span class=\"number\">.2</span>, hoverinfo=<span class=\"string\">&quot;label+percent+name&quot;</span>)</span><br><span class=\"line\">fig.update_layout(</span><br><span class=\"line\">    title_text=<span class=\"string\">&quot;&lt;b&gt;World vs EastAsia&lt;/b&gt;&quot;</span>,</span><br><span class=\"line\">    </span><br><span class=\"line\">   )</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n<img src=\"/images/mykaggle2/7.png\"><br></li>\n</ul>\n<h3 id=\"느낀점\"><a href=\"#느낀점\" class=\"headerlink\" title=\"느낀점\"></a><strong>느낀점</strong></h3><hr>\n<p>그래프 그리는것보다<br>데이터 전처리가 더 힘든것 같다..<br>그래도 이번에 직접 해보면서<br>헷갈렸던 문법들을 다시 정리할수 있었고<br>의미를 완벽하게 익혔고 어느정도 감이 잡혔음을 느꼈다.</p>\n<p>내일도 더 열심히…</p>\n<h3 id=\"Ref\"><a href=\"#Ref\" class=\"headerlink\" title=\"Ref\"></a><strong>Ref</strong></h3><hr>\n<p><a href=\"https://plotly.com/python/pie-charts/\">https://plotly.com/python/pie-charts/</a><br><br><br><br><br><br></p>\n","site":{"data":{}},"excerpt":"라이브러리 불러오기 & 캐글 데이터 불러오기\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pylab as plt\n\nimport plotly.io as pio\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.figure_factory as","more":"<h3 id=\"라이브러리-불러오기-amp-캐글-데이터-불러오기\"><a href=\"#라이브러리-불러오기-amp-캐글-데이터-불러오기\" class=\"headerlink\" title=\"라이브러리 불러오기 &amp; 캐글 데이터 불러오기\"></a><strong>라이브러리 불러오기 &amp; 캐글 데이터 불러오기</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">import</span> seaborn <span class=\"keyword\">as</span> sns</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pylab <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> plotly.io <span class=\"keyword\">as</span> pio</span><br><span class=\"line\"><span class=\"keyword\">import</span> plotly.express <span class=\"keyword\">as</span> px</span><br><span class=\"line\"><span class=\"keyword\">import</span> plotly.graph_objects <span class=\"keyword\">as</span> go</span><br><span class=\"line\"><span class=\"keyword\">import</span> plotly.figure_factory <span class=\"keyword\">as</span> ff</span><br><span class=\"line\"><span class=\"keyword\">from</span> plotly.subplots <span class=\"keyword\">import</span> make_subplots</span><br><span class=\"line\"><span class=\"keyword\">from</span> plotly.offline <span class=\"keyword\">import</span> init_notebook_mode, iplot</span><br><span class=\"line\">init_notebook_mode(connected=<span class=\"literal\">True</span>)</span><br><span class=\"line\">pio.templates.default = <span class=\"string\">&quot;none&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># import plotly.offline as py</span></span><br><span class=\"line\"><span class=\"comment\"># py.offline.init_notebook_mode()</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">for</span> dirname, _, filenames <span class=\"keyword\">in</span> os.walk(<span class=\"string\">&#x27;/kaggle/input&#x27;</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> filename <span class=\"keyword\">in</span> filenames:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(os.path.join(dirname, filename))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> warnings</span><br><span class=\"line\">warnings.filterwarnings(<span class=\"string\">&quot;ignore&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df17= pd.read_csv(<span class=\"string\">&quot;/kaggle/input/kaggle-survey-2017/multipleChoiceResponses.csv&quot;</span>, encoding=<span class=\"string\">&quot;ISO-8859-1&quot;</span>)</span><br><span class=\"line\">df18= pd.read_csv(<span class=\"string\">&quot;/kaggle/input/kaggle-survey-2018/multipleChoiceResponses.csv&quot;</span>, )</span><br><span class=\"line\">df19= pd.read_csv(<span class=\"string\">&quot;/kaggle/input/kaggle-survey-2019/multiple_choice_responses.csv&quot;</span>, )</span><br><span class=\"line\">df20= pd.read_csv(<span class=\"string\">&quot;/kaggle/input/kaggle-survey-2020/kaggle_survey_2020_responses.csv&quot;</span>, )</span><br><span class=\"line\">df21= pd.read_csv(<span class=\"string\">&quot;/kaggle/input/kaggle-survey-2021/kaggle_survey_2021_responses.csv&quot;</span>, )</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h3 id=\"데이터-Grouping\"><a href=\"#데이터-Grouping\" class=\"headerlink\" title=\"데이터 Grouping\"></a><strong>데이터 Grouping</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## East Asia에는 대한민국, 일본, 중국, 타이완, 몽골, 북조선 총 6개의 국가가 속해 있다. </span></span><br><span class=\"line\"></span><br><span class=\"line\">EastAsia17 = [<span class=\"string\">&#x27;China&#x27;</span>,<span class=\"string\">&quot;People &#x27;s Republic of China&quot;</span>, <span class=\"string\">&#x27;Taiwan&#x27;</span>, <span class=\"string\">&#x27;South Korea&#x27;</span>, <span class=\"string\">&#x27;Japan&#x27;</span>]</span><br><span class=\"line\">EastAsia18 = [<span class=\"string\">&#x27;China&#x27;</span>, <span class=\"string\">&#x27;South Korea&#x27;</span>, <span class=\"string\">&#x27;Japan&#x27;</span>, <span class=\"string\">&#x27;Republic of Korea&#x27;</span>] </span><br><span class=\"line\">EastAsia19 = [<span class=\"string\">&#x27;China&#x27;</span>,<span class=\"string\">&#x27;Taiwan&#x27;</span>, <span class=\"string\">&#x27;South Korea&#x27;</span>, <span class=\"string\">&#x27;Japan&#x27;</span>, <span class=\"string\">&#x27;Republic of Korea&#x27;</span>]</span><br><span class=\"line\">EastAsia20 = [<span class=\"string\">&#x27;China&#x27;</span>,<span class=\"string\">&#x27;Taiwan&#x27;</span>, <span class=\"string\">&#x27;South Korea&#x27;</span>, <span class=\"string\">&#x27;Japan&#x27;</span>, <span class=\"string\">&#x27;Republic of Korea&#x27;</span>]</span><br><span class=\"line\">EastAsia21 = [<span class=\"string\">&#x27;China&#x27;</span>,<span class=\"string\">&#x27;Taiwan&#x27;</span>, <span class=\"string\">&#x27;South Korea&#x27;</span>, <span class=\"string\">&#x27;Japan&#x27;</span>]</span><br><span class=\"line\">EastAsia = [<span class=\"string\">&#x27;Republic of Korea&#x27;</span>,<span class=\"string\">&#x27;China&#x27;</span>,<span class=\"string\">&#x27;Taiwan&#x27;</span>, <span class=\"string\">&#x27;South Korea&#x27;</span>, <span class=\"string\">&#x27;Japan&#x27;</span>, <span class=\"string\">&quot;People &#x27;s Republic of China&quot;</span> ]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#21년</span></span><br><span class=\"line\">df21_Ea = df21[df21[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(EastAsia)]</span><br><span class=\"line\">df21_Wo = df21[~df21[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(EastAsia )]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##  동아시아 국가를 제외한 국가들을 region 열의 데이터 값을 World 로 바꿔줌</span></span><br><span class=\"line\">df21[<span class=\"string\">&#x27;region&#x27;</span>]=[<span class=\"string\">&quot;EastAsia&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> EastAsia </span><br><span class=\"line\">                            <span class=\"keyword\">else</span> <span class=\"string\">&quot;World&quot;</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> df21[<span class=\"string\">&#x27;Q3&#x27;</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#20년</span></span><br><span class=\"line\">df20_Ea = df20[df20[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(EastAsia)]</span><br><span class=\"line\">df20_Wo = df20[~df20[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(EastAsia )]</span><br><span class=\"line\">df20[<span class=\"string\">&#x27;region&#x27;</span>]=[<span class=\"string\">&quot;EastAsia&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> EastAsia </span><br><span class=\"line\">                            <span class=\"keyword\">else</span> <span class=\"string\">&quot;World&quot;</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> df20[<span class=\"string\">&#x27;Q3&#x27;</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#19년</span></span><br><span class=\"line\">df19_Ea = df19[df19[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(EastAsia)]</span><br><span class=\"line\">df19_Wo = df19[~df19[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(EastAsia )]</span><br><span class=\"line\">df19[<span class=\"string\">&#x27;region&#x27;</span>]=[<span class=\"string\">&quot;EastAsia&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> EastAsia</span><br><span class=\"line\">                            <span class=\"keyword\">else</span> <span class=\"string\">&quot;World&quot;</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> df19[<span class=\"string\">&#x27;Q3&#x27;</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#18년</span></span><br><span class=\"line\">df18_Ea = df18[df18[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(EastAsia)]</span><br><span class=\"line\">df18_Wo = df18[~df18[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(EastAsia )]</span><br><span class=\"line\">df18[<span class=\"string\">&#x27;region&#x27;</span>]=[<span class=\"string\">&quot;EastAsia&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> EastAsia </span><br><span class=\"line\">                            <span class=\"keyword\">else</span> <span class=\"string\">&quot;World&quot;</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> df18[<span class=\"string\">&#x27;Q3&#x27;</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#17년</span></span><br><span class=\"line\">df17_Ea = df17[df17[<span class=\"string\">&#x27;Country&#x27;</span>].isin(EastAsia)]</span><br><span class=\"line\">df17_Wo = df17[~df17[<span class=\"string\">&#x27;Country&#x27;</span>].isin(EastAsia )]</span><br><span class=\"line\">df17[<span class=\"string\">&#x27;region&#x27;</span>]=[<span class=\"string\">&quot;EastAsia&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> EastAsia </span><br><span class=\"line\">                            <span class=\"keyword\">else</span> <span class=\"string\">&quot;World&quot;</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> df17[<span class=\"string\">&#x27;Country&#x27;</span>]]</span><br></pre></td></tr></table></figure>\n<br>\n\n<h3 id=\"Stack-Bar-그래프-데이터-전처리1\"><a href=\"#Stack-Bar-그래프-데이터-전처리1\" class=\"headerlink\" title=\"Stack Bar 그래프 데이터 전처리1\"></a><strong>Stack Bar 그래프 데이터 전처리1</strong></h3><hr>\n<ul>\n<li>연도별로 데이터 정리 했음</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df21_Ea=df21[df21[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(EastAsia21)]</span><br><span class=\"line\">df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>].value_counts().to_frame().reset_index().rename(columns=&#123;<span class=\"string\">&#x27;index&#x27;</span>:<span class=\"string\">&#x27;Country&#x27;</span>, <span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;21_n&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mykaggle2/1.PNG\"><br><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df20_Ea=df20[df20[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(EastAsia20)]</span><br><span class=\"line\">df20_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>].replace(<span class=\"string\">&#x27;Republic of Korea&#x27;</span>,<span class=\"string\">&#x27;South Korea&#x27;</span>).value_counts().to_frame().reset_index().rename(columns=&#123;<span class=\"string\">&#x27;index&#x27;</span>:<span class=\"string\">&#x27;Country&#x27;</span>, <span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;20_n&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mykaggle2/2.PNG\"><br><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df19_Ea=df19[df19[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(EastAsia19)]</span><br><span class=\"line\">df19_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>].replace(<span class=\"string\">&#x27;Republic of Korea&#x27;</span>,<span class=\"string\">&#x27;South Korea&#x27;</span>).value_counts().to_frame().reset_index().rename(columns=&#123;<span class=\"string\">&#x27;index&#x27;</span>:<span class=\"string\">&#x27;Country&#x27;</span>, <span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;19_n&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mykaggle2/3.PNG\"><br><br></p>\n<ul>\n<li>append() 메서드를 사용해서 Taiwan = 0 값 추가해줌</li>\n<li>ignore_index=True  원래 있던 df의 index를 무시<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df18_Ea=df18[df18[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(EastAsia18)]</span><br><span class=\"line\">df18_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>].replace(<span class=\"string\">&#x27;Republic of Korea&#x27;</span>,<span class=\"string\">&#x27;South Korea&#x27;</span>).value_counts().to_frame().reset_index().append(&#123;<span class=\"string\">&#x27;index&#x27;</span>: <span class=\"string\">&#x27;Taiwan&#x27;</span>,<span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;0&#x27;</span>&#125;, ignore_index=<span class=\"literal\">True</span>).rename(columns=&#123;<span class=\"string\">&#x27;index&#x27;</span>:<span class=\"string\">&#x27;Country&#x27;</span>, <span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;18_n&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure>\n<img src=\"/images/mykaggle2/4.PNG\"><br></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df17_Ea = df17[df17[<span class=\"string\">&#x27;Country&#x27;</span>].isin(EastAsia)]</span><br><span class=\"line\">df17_Ea[<span class=\"string\">&#x27;Country&#x27;</span>].replace(<span class=\"string\">&quot;People &#x27;s Republic of China&quot;</span>,<span class=\"string\">&quot;China&quot;</span>).value_counts().to_frame().reset_index().rename(columns=&#123;<span class=\"string\">&#x27;index&#x27;</span>:<span class=\"string\">&#x27;Country&#x27;</span>, <span class=\"string\">&#x27;Country&#x27;</span>:<span class=\"string\">&#x27;17_n&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mykaggle2/5.PNG\"><br><br></p>\n<h3 id=\"Stack-Bar-그래프-데이터-전처리2\"><a href=\"#Stack-Bar-그래프-데이터-전처리2\" class=\"headerlink\" title=\"Stack Bar 그래프 데이터 전처리2\"></a><strong>Stack Bar 그래프 데이터 전처리2</strong></h3><hr>\n<ul>\n<li>18년도 Taiwan 데이터 값이 없음</li>\n<li>iloc: 데이터프레임의 행이나 컬럼에 인덱스 값으로 접근</li>\n<li>loc: 데이터프레임의 행이나 컬럼에 label이나 boolean array로 접근 (location의 약자)<br>\n<br></li>\n<li>위에 전처리 내용을 아래 그래프에 맞게 더 다듬어 정리하였다</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df17_Ea = df17[df17[<span class=\"string\">&#x27;Country&#x27;</span>].isin(EastAsia)]</span><br><span class=\"line\">df17_StackB = df17_Ea[<span class=\"string\">&#x27;Country&#x27;</span>].replace(<span class=\"string\">&quot;People &#x27;s Republic of China&quot;</span>,<span class=\"string\">&quot;China&quot;</span>).value_counts().to_frame().reset_index()</span><br><span class=\"line\"></span><br><span class=\"line\">df18_Ea = df18[df18[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(EastAsia18)]</span><br><span class=\"line\">df18_StackB = df18_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>].replace(<span class=\"string\">&#x27;Republic of Korea&#x27;</span>,<span class=\"string\">&#x27;South Korea&#x27;</span>).value_counts().to_frame().reset_index().append(&#123;<span class=\"string\">&#x27;index&#x27;</span>: <span class=\"string\">&#x27;Taiwan&#x27;</span>,<span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;0&#x27;</span>&#125;, ignore_index=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">df19_Ea = df19[df19[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(EastAsia19)]</span><br><span class=\"line\">df19_StackB = df19_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>].replace(<span class=\"string\">&#x27;Republic of Korea&#x27;</span>,<span class=\"string\">&#x27;South Korea&#x27;</span>).value_counts().to_frame().reset_index()</span><br><span class=\"line\"></span><br><span class=\"line\">df20_Ea = df20[df20[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(EastAsia20)]</span><br><span class=\"line\">df20_StackB = df20_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>].replace(<span class=\"string\">&#x27;Republic of Korea&#x27;</span>,<span class=\"string\">&#x27;South Korea&#x27;</span>).value_counts().to_frame().reset_index()</span><br><span class=\"line\"></span><br><span class=\"line\">df21_Ea = df21[df21[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(EastAsia21)]</span><br><span class=\"line\">df21_StackB = df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>].value_counts().to_frame().reset_index()</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>barmode =’stack’<br>Bar 그래프를 stack 형식으로 쌓아서 표현하였다</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fig = go.Figure(data=[</span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;China&#x27;</span>, x=years, y=[df17_StackB.iloc[<span class=\"number\">0</span>,<span class=\"number\">1</span>], df18_StackB.iloc[<span class=\"number\">0</span>,<span class=\"number\">1</span>], df19_StackB.iloc[<span class=\"number\">1</span>,<span class=\"number\">1</span>], df20_StackB.iloc[<span class=\"number\">1</span>,<span class=\"number\">1</span>], df21_StackB.iloc[<span class=\"number\">1</span>,<span class=\"number\">1</span>]]),</span><br><span class=\"line\">    </span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;Japan&#x27;</span>, x=years, y=[df17_StackB.iloc[<span class=\"number\">1</span>,<span class=\"number\">1</span>], df18_StackB.iloc[<span class=\"number\">1</span>,<span class=\"number\">1</span>], df19_StackB.iloc[<span class=\"number\">0</span>,<span class=\"number\">1</span>], df20_StackB.iloc[<span class=\"number\">0</span>,<span class=\"number\">1</span>], df21_StackB.iloc[<span class=\"number\">0</span>,<span class=\"number\">1</span>]]),</span><br><span class=\"line\">    </span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;Taiwan&#x27;</span>, x=years, y=[df17_StackB.iloc[<span class=\"number\">2</span>,<span class=\"number\">1</span>], df18_StackB.iloc[<span class=\"number\">3</span>,<span class=\"number\">1</span>], df19_StackB.iloc[<span class=\"number\">2</span>,<span class=\"number\">1</span>], df20_StackB.iloc[<span class=\"number\">2</span>,<span class=\"number\">1</span>], df21_StackB.iloc[<span class=\"number\">3</span>,<span class=\"number\">1</span>]]),</span><br><span class=\"line\">    </span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;South Korea&#x27;</span>, x=years, y=[df17_StackB.iloc[<span class=\"number\">3</span>,<span class=\"number\">1</span>], df18_StackB.iloc[<span class=\"number\">2</span>,<span class=\"number\">1</span>], df19_StackB.iloc[<span class=\"number\">3</span>,<span class=\"number\">1</span>], df20_StackB.iloc[<span class=\"number\">3</span>,<span class=\"number\">1</span>], df21_StackB.iloc[<span class=\"number\">2</span>,<span class=\"number\">1</span>]])</span><br><span class=\"line\">    </span><br><span class=\"line\">    ])</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(barmode =<span class=\"string\">&#x27;stack&#x27;</span>)</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mykaggle2/6.png\"><br><br></p>\n<h3 id=\"Pie-그래프\"><a href=\"#Pie-그래프\" class=\"headerlink\" title=\"Pie 그래프\"></a><strong>Pie 그래프</strong></h3><h3 id=\"데이터-전처리\"><a href=\"#데이터-전처리\" class=\"headerlink\" title=\"데이터 전처리\"></a><strong>데이터 전처리</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fig = make_subplots(rows=<span class=\"number\">1</span>, cols=<span class=\"number\">5</span>)</span><br><span class=\"line\">total17 = (</span><br><span class=\"line\">    df17[<span class=\"string\">&#x27;region&#x27;</span>]</span><br><span class=\"line\">    .value_counts()</span><br><span class=\"line\">    .to_frame()</span><br><span class=\"line\">    .reset_index()</span><br><span class=\"line\">    .rename(columns=&#123;<span class=\"string\">&#x27;index&#x27;</span>:<span class=\"string\">&#x27;type&#x27;</span>, <span class=\"string\">&#x27;region&#x27;</span>:<span class=\"string\">&#x27;respodents&#x27;</span>&#125;)</span><br><span class=\"line\">    .groupby(<span class=\"string\">&#x27;type&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"built_in\">sum</span>()</span><br><span class=\"line\">    .reset_index()</span><br><span class=\"line\">)</span><br><span class=\"line\">total18 = (</span><br><span class=\"line\">    df18[<span class=\"string\">&#x27;region&#x27;</span>]</span><br><span class=\"line\">    .value_counts()</span><br><span class=\"line\">    .to_frame()</span><br><span class=\"line\">    .reset_index()</span><br><span class=\"line\">    .rename(columns=&#123;<span class=\"string\">&#x27;index&#x27;</span>:<span class=\"string\">&#x27;type&#x27;</span>, <span class=\"string\">&#x27;region&#x27;</span>:<span class=\"string\">&#x27;respodents&#x27;</span>&#125;)</span><br><span class=\"line\">    .groupby(<span class=\"string\">&#x27;type&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"built_in\">sum</span>()</span><br><span class=\"line\">    .reset_index()</span><br><span class=\"line\">)</span><br><span class=\"line\">total19 = (</span><br><span class=\"line\">    df19[<span class=\"string\">&#x27;region&#x27;</span>]</span><br><span class=\"line\">    .value_counts()</span><br><span class=\"line\">    .to_frame()</span><br><span class=\"line\">    .reset_index()</span><br><span class=\"line\">    .rename(columns=&#123;<span class=\"string\">&#x27;index&#x27;</span>:<span class=\"string\">&#x27;type&#x27;</span>, <span class=\"string\">&#x27;region&#x27;</span>:<span class=\"string\">&#x27;respodents&#x27;</span>&#125;)</span><br><span class=\"line\">    .groupby(<span class=\"string\">&#x27;type&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"built_in\">sum</span>()</span><br><span class=\"line\">    .reset_index()</span><br><span class=\"line\">)</span><br><span class=\"line\">total20 = (</span><br><span class=\"line\">    df20[<span class=\"string\">&#x27;region&#x27;</span>]</span><br><span class=\"line\">    .value_counts()</span><br><span class=\"line\">    .to_frame()</span><br><span class=\"line\">    .reset_index()</span><br><span class=\"line\">    .rename(columns=&#123;<span class=\"string\">&#x27;index&#x27;</span>:<span class=\"string\">&#x27;type&#x27;</span>, <span class=\"string\">&#x27;region&#x27;</span>:<span class=\"string\">&#x27;respodents&#x27;</span>&#125;)</span><br><span class=\"line\">    .groupby(<span class=\"string\">&#x27;type&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"built_in\">sum</span>()</span><br><span class=\"line\">    .reset_index()</span><br><span class=\"line\">)</span><br><span class=\"line\">total21 = (</span><br><span class=\"line\">    df21[<span class=\"string\">&#x27;region&#x27;</span>]</span><br><span class=\"line\">    .value_counts()</span><br><span class=\"line\">    .to_frame()</span><br><span class=\"line\">    .reset_index()</span><br><span class=\"line\">    .rename(columns=&#123;<span class=\"string\">&#x27;index&#x27;</span>:<span class=\"string\">&#x27;type&#x27;</span>, <span class=\"string\">&#x27;region&#x27;</span>:<span class=\"string\">&#x27;respodents&#x27;</span>&#125;)</span><br><span class=\"line\">    .groupby(<span class=\"string\">&#x27;type&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"built_in\">sum</span>()</span><br><span class=\"line\">    .reset_index()</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<br>\n\n<h3 id=\"Pie-그래프-그리기\"><a href=\"#Pie-그래프-그리기\" class=\"headerlink\" title=\"Pie 그래프 그리기\"></a><strong>Pie 그래프 그리기</strong></h3><hr>\n<ul>\n<li>scalegroup=’one’<br>원 그래프의 자체 사이즈를 변경 할 수 있다.<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fig = make_subplots(rows=<span class=\"number\">1</span>, cols=<span class=\"number\">5</span>, specs=[[&#123;<span class=\"string\">&#x27;type&#x27;</span>:<span class=\"string\">&#x27;domain&#x27;</span>&#125;, &#123;<span class=\"string\">&#x27;type&#x27;</span>:<span class=\"string\">&#x27;domain&#x27;</span>&#125;, &#123;<span class=\"string\">&#x27;type&#x27;</span>:<span class=\"string\">&#x27;domain&#x27;</span>&#125;, &#123;<span class=\"string\">&#x27;type&#x27;</span>:<span class=\"string\">&#x27;domain&#x27;</span>&#125;, &#123;<span class=\"string\">&#x27;type&#x27;</span>:<span class=\"string\">&#x27;domain&#x27;</span>&#125;]])</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_trace(go.Pie(labels=total21[<span class=\"string\">&#x27;type&#x27;</span>], values=total21[<span class=\"string\">&#x27;respodents&#x27;</span>], name=<span class=\"string\">&quot;2021&quot;</span>, scalegroup=<span class=\"string\">&#x27;one&#x27;</span>),</span><br><span class=\"line\">              <span class=\"number\">1</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">fig.add_trace(go.Pie(labels=total20[<span class=\"string\">&#x27;type&#x27;</span>], values=total20[<span class=\"string\">&#x27;respodents&#x27;</span>], name=<span class=\"string\">&quot;2020&quot;</span>, scalegroup=<span class=\"string\">&#x27;one&#x27;</span>),</span><br><span class=\"line\">              <span class=\"number\">1</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\">fig.add_trace(go.Pie(labels=total19[<span class=\"string\">&#x27;type&#x27;</span>], values=total19[<span class=\"string\">&#x27;respodents&#x27;</span>], name=<span class=\"string\">&quot;2019&quot;</span>, scalegroup=<span class=\"string\">&#x27;one&#x27;</span>),</span><br><span class=\"line\">              <span class=\"number\">1</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">fig.add_trace(go.Pie(labels=total18[<span class=\"string\">&#x27;type&#x27;</span>], values=total18[<span class=\"string\">&#x27;respodents&#x27;</span>], name=<span class=\"string\">&quot;2018&quot;</span>, scalegroup=<span class=\"string\">&#x27;one&#x27;</span>),</span><br><span class=\"line\">              <span class=\"number\">1</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\">fig.add_trace(go.Pie(labels=total17[<span class=\"string\">&#x27;type&#x27;</span>], values=total17[<span class=\"string\">&#x27;respodents&#x27;</span>], name=<span class=\"string\">&quot;2017&quot;</span>, scalegroup=<span class=\"string\">&#x27;one&#x27;</span>),</span><br><span class=\"line\">              <span class=\"number\">1</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_traces(hole=<span class=\"number\">.2</span>, hoverinfo=<span class=\"string\">&quot;label+percent+name&quot;</span>)</span><br><span class=\"line\">fig.update_layout(</span><br><span class=\"line\">    title_text=<span class=\"string\">&quot;&lt;b&gt;World vs EastAsia&lt;/b&gt;&quot;</span>,</span><br><span class=\"line\">    </span><br><span class=\"line\">   )</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n<img src=\"/images/mykaggle2/7.png\"><br></li>\n</ul>\n<h3 id=\"느낀점\"><a href=\"#느낀점\" class=\"headerlink\" title=\"느낀점\"></a><strong>느낀점</strong></h3><hr>\n<p>그래프 그리는것보다<br>데이터 전처리가 더 힘든것 같다..<br>그래도 이번에 직접 해보면서<br>헷갈렸던 문법들을 다시 정리할수 있었고<br>의미를 완벽하게 익혔고 어느정도 감이 잡혔음을 느꼈다.</p>\n<p>내일도 더 열심히…</p>\n<h3 id=\"Ref\"><a href=\"#Ref\" class=\"headerlink\" title=\"Ref\"></a><strong>Ref</strong></h3><hr>\n<p><a href=\"https://plotly.com/python/pie-charts/\">https://plotly.com/python/pie-charts/</a><br><br><br><br><br><br></p>\n"},{"title":"Kaggle Competition(1)","date":"2021-11-13T15:00:00.000Z","toc":true,"thumbnail":"images/mykaggle1/11.PNG","widgets":null,"_content":"### **데이터 불러오기**\n---\n실행환경: kaggle notebook\n사용언어: Python Plotly\n[준비하는 kaggle competition 링크](https://www.kaggle.com/c/kaggle-survey-2021)\n<br>\n\n```python\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pylab as plt\n\nimport plotly.io as pio\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.figure_factory as ff\nfrom plotly.subplots import make_subplots\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\npio.templates.default = \"none\"\n# import plotly.offline as py\n# py.offline.init_notebook_mode()\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n```\n<br>\n\n### **17년 - 21년도 데이터 불러오기**\n---\n```python\ndf17= pd.read_csv(\"/kaggle/input/kaggle-survey-2017/multipleChoiceResponses.csv\", encoding=\"ISO-8859-1\")\ndf18= pd.read_csv(\"/kaggle/input/kaggle-survey-2018/multipleChoiceResponses.csv\", )\ndf19= pd.read_csv(\"/kaggle/input/kaggle-survey-2019/multiple_choice_responses.csv\", )\ndf20= pd.read_csv(\"/kaggle/input/kaggle-survey-2020/kaggle_survey_2020_responses.csv\", )\ndf21= pd.read_csv(\"/kaggle/input/kaggle-survey-2021/kaggle_survey_2021_responses.csv\", )\n```\n<br>\n\n### **데이터 전처리**\n---\n\n```python\n#21년도에 설문조사에 참여한 국가들\npd.set_option('display.max_rows', None)\ndf21['Q3'].value_counts().sort_index(ascending=True)\n```\n![](/images/mykaggle1/1.PNG)\n<br>\n\n```python\n#South Korea에 해당하는 참여자만 출력\ndf21_Ko = df21[df21['Q3'] == 'South Korea']\ndf21_Ko.head()\n```\n![](/images/mykaggle1/2.PNG)\n<br>\n\n```python\n#한국을 제외한 참여자들의 투표결과\ndf21_Wo = df21[~(df21['Q3'] == 'South Korea')]\ndf21_Wo.head()\n```\n![](/images/mykaggle1/3.PNG)\n<br>\n\n\n```python\n## 설문조사에 참여한 사람 비율\n\n#한국\ndf21_Ko = df21[df21['Q3'] == 'South Korea']\n#전세계\ndf21_Wo = df21[~(df21['Q3'] == 'South Korea')]\n\n#동아시아를 제외한 국가는 전부 거주지역을 World로 바꿈\ndf21['region']=[\"Korea\" if x == 'South Korea' \n                        else \"World\" for x in df21['Q3']]\ndf21['region'].value_counts()\n```\n\n<br>\n\n\n```python\n## if 변수 x 가 South Korea 일때\n## else  -> South Korea가 아닐때\n##          x가 0부터 df21['Q3']의 행값을 차례로 World값을 넣는다 \n####        이 결과를 df['region'] 에 넣는다\n##          따라서 동아시아가 아닌 국가들의 행 값은 전부 World로 바뀜\ndf21['region']=[\"Korea\" if x == 'South Korea' \n                        else \"World\" for x in df21['Q3']]\ndf21['region'].head()\n```\n![](/images/mykaggle1/4.PNG)\n### **데이터 Grouping**\n---\n\n- **연도별 EastAsia 국가 정리**\nEastAsia17\nEastAsia18\nEastAsia19\nEastAsia20\nEastAsia21 \n- **연도별 정리**\ndf21_Ea : 동아시아 국가만 데이터\ndf21_Wo : 동아시아 제외한 전세계 국가 데이터\ndf21['region'] : 동아시아를 제외한 국가는 World로 저장됨 (World랑 동아시아국가 이름밖에 없음)\n- **isin()**\ndf21의 Q3열에 EastAsia의 리스트값과 동일한게 있을때 True , 없으면 False\n\n\n```python\n## East Asia에는 대한민국, 일본, 중국, 타이완, 몽골, 북조선 총 6개의 국가가 속해 있다. \n\nEastAsia17 = ['China',\"People 's Republic of China\", 'Taiwan', 'South Korea', 'Japan']\nEastAsia18 = ['China', 'South Korea', 'Japan', 'Republic of Korea'] \nEastAsia19 = ['China','Taiwan', 'South Korea', 'Japan', 'Republic of Korea']\nEastAsia20 = ['China','Taiwan', 'South Korea', 'Japan', 'Republic of Korea']\nEastAsia21 = ['China','Taiwan', 'South Korea', 'Japan']\nEastAsia = ['Republic of Korea','China','Taiwan', 'South Korea', 'Japan', \"People 's Republic of China\" ]\n\n#21년\ndf21_Ea = df21[df21['Q3'].isin(EastAsia)]\ndf21_Wo = df21[~df21['Q3'].isin(EastAsia )]\n\n##  동아시아 국가를 제외한 국가들을 region 열의 데이터 값을 World 로 바꿔줌\ndf21['region']=[\"EastAsia\" if x in EastAsia \n                            else \"World\" for x in df21['Q3']]\n\n#20년\ndf20_Ea = df20[df20['Q3'].isin(EastAsia)]\ndf20_Wo = df20[~df20['Q3'].isin(EastAsia )]\ndf20['region']=[\"EastAsia\" if x in EastAsia \n                            else \"World\" for x in df20['Q3']]\n\n#19년\ndf19_Ea = df19[df19['Q3'].isin(EastAsia)]\ndf19_Wo = df19[~df19['Q3'].isin(EastAsia )]\ndf19['region']=[\"EastAsia\" if x in EastAsia\n                            else \"World\" for x in df19['Q3']]\n\n#18년\ndf18_Ea = df18[df18['Q3'].isin(EastAsia)]\ndf18_Wo = df18[~df18['Q3'].isin(EastAsia )]\ndf18['region']=[\"EastAsia\" if x in EastAsia \n                            else \"World\" for x in df18['Q3']]\n\n#17년\ndf17_Ea = df17[df17['Country'].isin(EastAsia)]\ndf17_Wo = df17[~df17['Country'].isin(EastAsia )]\ndf17['region']=[\"EastAsia\" if x in EastAsia \n                            else \"World\" for x in df17['Country']]\n```\n\n\n<br>\n\n```python\n## 마지막 열에 region이 추가된 것을 확인 할 수 있음\ndf21.head()\n```\n![](/images/mykaggle1/5.PNG)\n<br>\n\n```python\ndf21['region'].value_counts()\n##df20['region'].value_counts()\n##df19['region'].value_counts()\n##df18['region'].value_counts()\n##df17['region'].value_counts()\n```\n![](/images/mykaggle1/6.PNG)\n<br>\n\n### **Bar 그래프 생성**\n#### 연도별 kaggle 사용자 (전세계 vs 동아시아)\n---\n\n```python\n# 설문 참여자 총 인원\nEa21 = len(df21_Ea)\nWo21 = len(df21) - len(df21_Ea)\n\nEa20 = len(df20_Ea)\nWo20 = len(df20) - len(df20_Ea)\n\nEa19 = len(df19_Ea)\nWo19 = len(df19) - len(df19_Ea)\n\nEa18 = len(df18_Ea)\nWo18 = len(df18) -  len(df18_Ea)\n\nEa17 = len(df17_Ea)\nWo17 = len(df17) - len(df17_Ea)\n\n# 퍼센트 함수 만들어줌\n# percent, percentR\ndef percent (a, b):\n    result =a/(a+b)*100\n    return result\n\ndef percentR (b, a):\n    result =a/(a+b)*100\n    return result\n\n\ncountry = ['East Asia', 'Rest of the World']\nyears = ['2017', '2018', '2019', '2020', '2021']\n```\n\n```python\nfig = go.Figure(data=[\n    go.Bar(name='Rest of the World', x=years, y=[percentR(Ea17, Wo17), percentR(Ea18, Wo18), percentR(Ea19, Wo19), \n                                                 percentR(Ea20, Wo20), percentR(Ea21, Wo21)]),\n    go.Bar(name='East Asia', x=years, y=[percent(Ea17, Wo17), percent(Ea18, Wo18), percent(Ea19, Wo19), \n                                                 percent(Ea20, Wo20), percent(Ea21, Wo21)])\n])\n\nfig.update_layout(barmode='stack')\nfig.show()\n```\n![](/images/mykaggle1/7.PNG)\n\n- **barmode ='stack' 이거 제거하면 그래프가 나란히 나온다**\n![](/images/mykaggle1/13.PNG)\n### **Pie 그래프 생성**\n#### 연도별 kaggle 사용자 (전세계 vs 동아시아)\n---\n\n```python\ntotal = (\n    df21['region']\n    .value_counts()\n    .to_frame()\n    .reset_index()\n    .rename(columns={'index':'type', 'region':'respodents'})\n    .groupby('type')\n    .sum()\n    .reset_index() \n)\ntotal\n```\n![](/images/mykaggle1/8.PNG)\n<br>\n\n```python\ncolors = ['#f2eda5','#bbbcbd', '#bbbcbd']\n\nfig = go.Figure(data=[go.Pie(labels=total['type'], \n                             values=total['respodents'], \n                             hole=.3)])\n\nfig.update_traces(hoverinfo='percent', \n                  textinfo='label', \n                  textfont_size=20,\n                  marker=dict(colors=colors)\n                 )\n\nfig.update_layout(showlegend=False, \n                  plot_bgcolor='#F7F7F7', \n                  paper_bgcolor='#F7F7F7',\n                  title_text=\"<b>World vs EastAsia</b>\",\n                  title_x=0.5,\n                  font=dict(family=\"Hiragino Kaku Gothic Pro, sans-serif\", size=25, color='#000000')\n                 )\n\nfig.show()\n# marker=dict(colors=colors,line=dict(color='#000000', width=1)) #테두리\n```\n![](/images/mykaggle1/9.PNG)\n<br>\n\n### **원형그래프 메서드 만들기**\n---\n\n```python\ndef pie(df):\n    total = (\n    df['region']\n    .value_counts()\n    .to_frame()\n    .reset_index()\n    .rename(columns={'index':'type', 'region':'respodents'})\n    .groupby('type')\n    .sum()\n    .reset_index() \n    )\n\n\n    colors = ['#f2eda5','#bbbcbd', '#bbbcbd']\n\n    fig = go.Figure(data=[go.Pie(labels=total['type'], \n                             values=total['respodents'], \n                             hole=.3)])\n\n    fig.update_traces(hoverinfo='percent', \n                  textinfo='label', \n                  textfont_size=20,\n                  marker=dict(colors=colors)\n                 )\n\n    fig.update_layout(showlegend=False, \n                  plot_bgcolor='#F7F7F7', \n                  paper_bgcolor='#F7F7F7',\n                  title_text=\"<b>World vs EastAsia</b>\",\n                  title_x=0.5,\n                  font=dict(family=\"Hiragino Kaku Gothic Pro, sans-serif\", size=25, color='#000000')\n                 )\n\n    fig.show()\n# marker=dict(colors=colors,line=dict(color='#000000', width=1)) #테두리\n```\n\n- 메서드 호출\n\n\n```python\npie(df21)\n```\n<br>\n\n\n### **choropleth 지도 그래프 그리기**\n---\n\n```python\ndf21_Ea['Q3'].value_counts()\n```\n![](/images/mykaggle1/10.PNG)\n<br>\n\n```python\ndef world_map(locations,counts,title):\n    data = [ dict(\n            type = 'choropleth',\n            locations = locations,\n            z = counts,\n            colorscale = 'Blues',\n            locationmode = 'country names',\n            autocolorscale = False,\n            reversescale = True,\n            marker = dict(\n                line = dict(color = '#F7F7F7', width = 1.5)),\n                colorbar = dict(autotick = True, legth = 3, len=0.75, title = 'respodents',\n                               max = 1000, min = 0)\n                )\n           ]\n    layout = dict(\n        title = title,\n        titlefont={'size': 28, 'family': 'san serif'},\n        width=750, \n        height=475,\n        paper_bgcolor='#F7F7F7',\n        geo = dict(\n            showframe = True,\n            showcoastlines = True,\n            fitbounds=\"locations\",\n            )\n    )\n    \n    fig = dict(data=data, layout=layout)\n    iplot(fig, validate=False, filename='world-map')\n    \nz = df21_Ea['Q3'].value_counts()\n \n## 메서드 호출\nworld_map(locations=z.index, counts=z.values, title= '<b> EastAsia Countries (2021 survey) <b>')\n```\n![](/images/mykaggle1/11.PNG)\n<br>\n\n### **Bar 그래프**\n---\n\n21년도만\n\n```python\n## vertical bar graphs##########################\n## def plotly_vBar(df, q, title, l=50,r=50,b=50,t=100):   \nfig = px.histogram(df21.iloc[1:],\n                       x = df21['region'],\n                       orientation='v',\n                       width=700,\n                       height=450,\n                       histnorm='percent',\n                     \n                       color_discrete_map={\n                           \"EastAsia\": \"gold\", \"World\": \"salmon\"\n                       },\n                       opacity=0.6\n                       )\nfig.update_layout(title=\"21년도 전세계 vs 동아시아\",\n                      font_family=\"San Serif\",\n                      bargap=0.2,\n                      barmode='group',\n                      titlefont={'size': 28},\n                      paper_bgcolor='#F5F5F5',\n                      plot_bgcolor='#F5F5F5',\n                      legend=dict(\n                      orientation=\"v\", \n                          y=1, \n                          yanchor=\"top\", \n                          x=1.250, \n                          xanchor=\"right\",)                 \n                      ).update_xaxes(categoryorder='total descending')\nfig.show()\n\n```\n![](/images/mykaggle1/12.PNG)\n<br>\n<br>\n<br>\n\n### **Ref**\n---\n[참고사이트](https://www.kaggle.com/desalegngeb/how-popular-is-kaggle-in-africa)\n","source":"_posts/mykaggle1.md","raw":"---\ntitle: Kaggle Competition(1)\ndate: 2021-11-14\ntags: kaggle, plotly\ntoc: true\nthumbnail: images/mykaggle1/11.PNG\ncategories: \n- kaggle 필사\nwidgets: null\n---\n### **데이터 불러오기**\n---\n실행환경: kaggle notebook\n사용언어: Python Plotly\n[준비하는 kaggle competition 링크](https://www.kaggle.com/c/kaggle-survey-2021)\n<br>\n\n```python\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pylab as plt\n\nimport plotly.io as pio\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.figure_factory as ff\nfrom plotly.subplots import make_subplots\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\npio.templates.default = \"none\"\n# import plotly.offline as py\n# py.offline.init_notebook_mode()\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n```\n<br>\n\n### **17년 - 21년도 데이터 불러오기**\n---\n```python\ndf17= pd.read_csv(\"/kaggle/input/kaggle-survey-2017/multipleChoiceResponses.csv\", encoding=\"ISO-8859-1\")\ndf18= pd.read_csv(\"/kaggle/input/kaggle-survey-2018/multipleChoiceResponses.csv\", )\ndf19= pd.read_csv(\"/kaggle/input/kaggle-survey-2019/multiple_choice_responses.csv\", )\ndf20= pd.read_csv(\"/kaggle/input/kaggle-survey-2020/kaggle_survey_2020_responses.csv\", )\ndf21= pd.read_csv(\"/kaggle/input/kaggle-survey-2021/kaggle_survey_2021_responses.csv\", )\n```\n<br>\n\n### **데이터 전처리**\n---\n\n```python\n#21년도에 설문조사에 참여한 국가들\npd.set_option('display.max_rows', None)\ndf21['Q3'].value_counts().sort_index(ascending=True)\n```\n![](/images/mykaggle1/1.PNG)\n<br>\n\n```python\n#South Korea에 해당하는 참여자만 출력\ndf21_Ko = df21[df21['Q3'] == 'South Korea']\ndf21_Ko.head()\n```\n![](/images/mykaggle1/2.PNG)\n<br>\n\n```python\n#한국을 제외한 참여자들의 투표결과\ndf21_Wo = df21[~(df21['Q3'] == 'South Korea')]\ndf21_Wo.head()\n```\n![](/images/mykaggle1/3.PNG)\n<br>\n\n\n```python\n## 설문조사에 참여한 사람 비율\n\n#한국\ndf21_Ko = df21[df21['Q3'] == 'South Korea']\n#전세계\ndf21_Wo = df21[~(df21['Q3'] == 'South Korea')]\n\n#동아시아를 제외한 국가는 전부 거주지역을 World로 바꿈\ndf21['region']=[\"Korea\" if x == 'South Korea' \n                        else \"World\" for x in df21['Q3']]\ndf21['region'].value_counts()\n```\n\n<br>\n\n\n```python\n## if 변수 x 가 South Korea 일때\n## else  -> South Korea가 아닐때\n##          x가 0부터 df21['Q3']의 행값을 차례로 World값을 넣는다 \n####        이 결과를 df['region'] 에 넣는다\n##          따라서 동아시아가 아닌 국가들의 행 값은 전부 World로 바뀜\ndf21['region']=[\"Korea\" if x == 'South Korea' \n                        else \"World\" for x in df21['Q3']]\ndf21['region'].head()\n```\n![](/images/mykaggle1/4.PNG)\n### **데이터 Grouping**\n---\n\n- **연도별 EastAsia 국가 정리**\nEastAsia17\nEastAsia18\nEastAsia19\nEastAsia20\nEastAsia21 \n- **연도별 정리**\ndf21_Ea : 동아시아 국가만 데이터\ndf21_Wo : 동아시아 제외한 전세계 국가 데이터\ndf21['region'] : 동아시아를 제외한 국가는 World로 저장됨 (World랑 동아시아국가 이름밖에 없음)\n- **isin()**\ndf21의 Q3열에 EastAsia의 리스트값과 동일한게 있을때 True , 없으면 False\n\n\n```python\n## East Asia에는 대한민국, 일본, 중국, 타이완, 몽골, 북조선 총 6개의 국가가 속해 있다. \n\nEastAsia17 = ['China',\"People 's Republic of China\", 'Taiwan', 'South Korea', 'Japan']\nEastAsia18 = ['China', 'South Korea', 'Japan', 'Republic of Korea'] \nEastAsia19 = ['China','Taiwan', 'South Korea', 'Japan', 'Republic of Korea']\nEastAsia20 = ['China','Taiwan', 'South Korea', 'Japan', 'Republic of Korea']\nEastAsia21 = ['China','Taiwan', 'South Korea', 'Japan']\nEastAsia = ['Republic of Korea','China','Taiwan', 'South Korea', 'Japan', \"People 's Republic of China\" ]\n\n#21년\ndf21_Ea = df21[df21['Q3'].isin(EastAsia)]\ndf21_Wo = df21[~df21['Q3'].isin(EastAsia )]\n\n##  동아시아 국가를 제외한 국가들을 region 열의 데이터 값을 World 로 바꿔줌\ndf21['region']=[\"EastAsia\" if x in EastAsia \n                            else \"World\" for x in df21['Q3']]\n\n#20년\ndf20_Ea = df20[df20['Q3'].isin(EastAsia)]\ndf20_Wo = df20[~df20['Q3'].isin(EastAsia )]\ndf20['region']=[\"EastAsia\" if x in EastAsia \n                            else \"World\" for x in df20['Q3']]\n\n#19년\ndf19_Ea = df19[df19['Q3'].isin(EastAsia)]\ndf19_Wo = df19[~df19['Q3'].isin(EastAsia )]\ndf19['region']=[\"EastAsia\" if x in EastAsia\n                            else \"World\" for x in df19['Q3']]\n\n#18년\ndf18_Ea = df18[df18['Q3'].isin(EastAsia)]\ndf18_Wo = df18[~df18['Q3'].isin(EastAsia )]\ndf18['region']=[\"EastAsia\" if x in EastAsia \n                            else \"World\" for x in df18['Q3']]\n\n#17년\ndf17_Ea = df17[df17['Country'].isin(EastAsia)]\ndf17_Wo = df17[~df17['Country'].isin(EastAsia )]\ndf17['region']=[\"EastAsia\" if x in EastAsia \n                            else \"World\" for x in df17['Country']]\n```\n\n\n<br>\n\n```python\n## 마지막 열에 region이 추가된 것을 확인 할 수 있음\ndf21.head()\n```\n![](/images/mykaggle1/5.PNG)\n<br>\n\n```python\ndf21['region'].value_counts()\n##df20['region'].value_counts()\n##df19['region'].value_counts()\n##df18['region'].value_counts()\n##df17['region'].value_counts()\n```\n![](/images/mykaggle1/6.PNG)\n<br>\n\n### **Bar 그래프 생성**\n#### 연도별 kaggle 사용자 (전세계 vs 동아시아)\n---\n\n```python\n# 설문 참여자 총 인원\nEa21 = len(df21_Ea)\nWo21 = len(df21) - len(df21_Ea)\n\nEa20 = len(df20_Ea)\nWo20 = len(df20) - len(df20_Ea)\n\nEa19 = len(df19_Ea)\nWo19 = len(df19) - len(df19_Ea)\n\nEa18 = len(df18_Ea)\nWo18 = len(df18) -  len(df18_Ea)\n\nEa17 = len(df17_Ea)\nWo17 = len(df17) - len(df17_Ea)\n\n# 퍼센트 함수 만들어줌\n# percent, percentR\ndef percent (a, b):\n    result =a/(a+b)*100\n    return result\n\ndef percentR (b, a):\n    result =a/(a+b)*100\n    return result\n\n\ncountry = ['East Asia', 'Rest of the World']\nyears = ['2017', '2018', '2019', '2020', '2021']\n```\n\n```python\nfig = go.Figure(data=[\n    go.Bar(name='Rest of the World', x=years, y=[percentR(Ea17, Wo17), percentR(Ea18, Wo18), percentR(Ea19, Wo19), \n                                                 percentR(Ea20, Wo20), percentR(Ea21, Wo21)]),\n    go.Bar(name='East Asia', x=years, y=[percent(Ea17, Wo17), percent(Ea18, Wo18), percent(Ea19, Wo19), \n                                                 percent(Ea20, Wo20), percent(Ea21, Wo21)])\n])\n\nfig.update_layout(barmode='stack')\nfig.show()\n```\n![](/images/mykaggle1/7.PNG)\n\n- **barmode ='stack' 이거 제거하면 그래프가 나란히 나온다**\n![](/images/mykaggle1/13.PNG)\n### **Pie 그래프 생성**\n#### 연도별 kaggle 사용자 (전세계 vs 동아시아)\n---\n\n```python\ntotal = (\n    df21['region']\n    .value_counts()\n    .to_frame()\n    .reset_index()\n    .rename(columns={'index':'type', 'region':'respodents'})\n    .groupby('type')\n    .sum()\n    .reset_index() \n)\ntotal\n```\n![](/images/mykaggle1/8.PNG)\n<br>\n\n```python\ncolors = ['#f2eda5','#bbbcbd', '#bbbcbd']\n\nfig = go.Figure(data=[go.Pie(labels=total['type'], \n                             values=total['respodents'], \n                             hole=.3)])\n\nfig.update_traces(hoverinfo='percent', \n                  textinfo='label', \n                  textfont_size=20,\n                  marker=dict(colors=colors)\n                 )\n\nfig.update_layout(showlegend=False, \n                  plot_bgcolor='#F7F7F7', \n                  paper_bgcolor='#F7F7F7',\n                  title_text=\"<b>World vs EastAsia</b>\",\n                  title_x=0.5,\n                  font=dict(family=\"Hiragino Kaku Gothic Pro, sans-serif\", size=25, color='#000000')\n                 )\n\nfig.show()\n# marker=dict(colors=colors,line=dict(color='#000000', width=1)) #테두리\n```\n![](/images/mykaggle1/9.PNG)\n<br>\n\n### **원형그래프 메서드 만들기**\n---\n\n```python\ndef pie(df):\n    total = (\n    df['region']\n    .value_counts()\n    .to_frame()\n    .reset_index()\n    .rename(columns={'index':'type', 'region':'respodents'})\n    .groupby('type')\n    .sum()\n    .reset_index() \n    )\n\n\n    colors = ['#f2eda5','#bbbcbd', '#bbbcbd']\n\n    fig = go.Figure(data=[go.Pie(labels=total['type'], \n                             values=total['respodents'], \n                             hole=.3)])\n\n    fig.update_traces(hoverinfo='percent', \n                  textinfo='label', \n                  textfont_size=20,\n                  marker=dict(colors=colors)\n                 )\n\n    fig.update_layout(showlegend=False, \n                  plot_bgcolor='#F7F7F7', \n                  paper_bgcolor='#F7F7F7',\n                  title_text=\"<b>World vs EastAsia</b>\",\n                  title_x=0.5,\n                  font=dict(family=\"Hiragino Kaku Gothic Pro, sans-serif\", size=25, color='#000000')\n                 )\n\n    fig.show()\n# marker=dict(colors=colors,line=dict(color='#000000', width=1)) #테두리\n```\n\n- 메서드 호출\n\n\n```python\npie(df21)\n```\n<br>\n\n\n### **choropleth 지도 그래프 그리기**\n---\n\n```python\ndf21_Ea['Q3'].value_counts()\n```\n![](/images/mykaggle1/10.PNG)\n<br>\n\n```python\ndef world_map(locations,counts,title):\n    data = [ dict(\n            type = 'choropleth',\n            locations = locations,\n            z = counts,\n            colorscale = 'Blues',\n            locationmode = 'country names',\n            autocolorscale = False,\n            reversescale = True,\n            marker = dict(\n                line = dict(color = '#F7F7F7', width = 1.5)),\n                colorbar = dict(autotick = True, legth = 3, len=0.75, title = 'respodents',\n                               max = 1000, min = 0)\n                )\n           ]\n    layout = dict(\n        title = title,\n        titlefont={'size': 28, 'family': 'san serif'},\n        width=750, \n        height=475,\n        paper_bgcolor='#F7F7F7',\n        geo = dict(\n            showframe = True,\n            showcoastlines = True,\n            fitbounds=\"locations\",\n            )\n    )\n    \n    fig = dict(data=data, layout=layout)\n    iplot(fig, validate=False, filename='world-map')\n    \nz = df21_Ea['Q3'].value_counts()\n \n## 메서드 호출\nworld_map(locations=z.index, counts=z.values, title= '<b> EastAsia Countries (2021 survey) <b>')\n```\n![](/images/mykaggle1/11.PNG)\n<br>\n\n### **Bar 그래프**\n---\n\n21년도만\n\n```python\n## vertical bar graphs##########################\n## def plotly_vBar(df, q, title, l=50,r=50,b=50,t=100):   \nfig = px.histogram(df21.iloc[1:],\n                       x = df21['region'],\n                       orientation='v',\n                       width=700,\n                       height=450,\n                       histnorm='percent',\n                     \n                       color_discrete_map={\n                           \"EastAsia\": \"gold\", \"World\": \"salmon\"\n                       },\n                       opacity=0.6\n                       )\nfig.update_layout(title=\"21년도 전세계 vs 동아시아\",\n                      font_family=\"San Serif\",\n                      bargap=0.2,\n                      barmode='group',\n                      titlefont={'size': 28},\n                      paper_bgcolor='#F5F5F5',\n                      plot_bgcolor='#F5F5F5',\n                      legend=dict(\n                      orientation=\"v\", \n                          y=1, \n                          yanchor=\"top\", \n                          x=1.250, \n                          xanchor=\"right\",)                 \n                      ).update_xaxes(categoryorder='total descending')\nfig.show()\n\n```\n![](/images/mykaggle1/12.PNG)\n<br>\n<br>\n<br>\n\n### **Ref**\n---\n[참고사이트](https://www.kaggle.com/desalegngeb/how-popular-is-kaggle-in-africa)\n","slug":"mykaggle1","published":1,"updated":"2022-01-03T12:20:08.049Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cky2hoheu001o5nrjfgk5gfea","content":"<h3 id=\"데이터-불러오기\"><a href=\"#데이터-불러오기\" class=\"headerlink\" title=\"데이터 불러오기\"></a><strong>데이터 불러오기</strong></h3><hr>\n<p>실행환경: kaggle notebook<br>사용언어: Python Plotly<br><a href=\"https://www.kaggle.com/c/kaggle-survey-2021\">준비하는 kaggle competition 링크</a><br><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">import</span> seaborn <span class=\"keyword\">as</span> sns</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pylab <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> plotly.io <span class=\"keyword\">as</span> pio</span><br><span class=\"line\"><span class=\"keyword\">import</span> plotly.express <span class=\"keyword\">as</span> px</span><br><span class=\"line\"><span class=\"keyword\">import</span> plotly.graph_objects <span class=\"keyword\">as</span> go</span><br><span class=\"line\"><span class=\"keyword\">import</span> plotly.figure_factory <span class=\"keyword\">as</span> ff</span><br><span class=\"line\"><span class=\"keyword\">from</span> plotly.subplots <span class=\"keyword\">import</span> make_subplots</span><br><span class=\"line\"><span class=\"keyword\">from</span> plotly.offline <span class=\"keyword\">import</span> init_notebook_mode, iplot</span><br><span class=\"line\">init_notebook_mode(connected=<span class=\"literal\">True</span>)</span><br><span class=\"line\">pio.templates.default = <span class=\"string\">&quot;none&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># import plotly.offline as py</span></span><br><span class=\"line\"><span class=\"comment\"># py.offline.init_notebook_mode()</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">for</span> dirname, _, filenames <span class=\"keyword\">in</span> os.walk(<span class=\"string\">&#x27;/kaggle/input&#x27;</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> filename <span class=\"keyword\">in</span> filenames:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(os.path.join(dirname, filename))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> warnings</span><br><span class=\"line\">warnings.filterwarnings(<span class=\"string\">&quot;ignore&quot;</span>)</span><br></pre></td></tr></table></figure>\n<br>\n\n<h3 id=\"17년-21년도-데이터-불러오기\"><a href=\"#17년-21년도-데이터-불러오기\" class=\"headerlink\" title=\"17년 - 21년도 데이터 불러오기\"></a><strong>17년 - 21년도 데이터 불러오기</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df17= pd.read_csv(<span class=\"string\">&quot;/kaggle/input/kaggle-survey-2017/multipleChoiceResponses.csv&quot;</span>, encoding=<span class=\"string\">&quot;ISO-8859-1&quot;</span>)</span><br><span class=\"line\">df18= pd.read_csv(<span class=\"string\">&quot;/kaggle/input/kaggle-survey-2018/multipleChoiceResponses.csv&quot;</span>, )</span><br><span class=\"line\">df19= pd.read_csv(<span class=\"string\">&quot;/kaggle/input/kaggle-survey-2019/multiple_choice_responses.csv&quot;</span>, )</span><br><span class=\"line\">df20= pd.read_csv(<span class=\"string\">&quot;/kaggle/input/kaggle-survey-2020/kaggle_survey_2020_responses.csv&quot;</span>, )</span><br><span class=\"line\">df21= pd.read_csv(<span class=\"string\">&quot;/kaggle/input/kaggle-survey-2021/kaggle_survey_2021_responses.csv&quot;</span>, )</span><br></pre></td></tr></table></figure>\n<br>\n\n<h3 id=\"데이터-전처리\"><a href=\"#데이터-전처리\" class=\"headerlink\" title=\"데이터 전처리\"></a><strong>데이터 전처리</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#21년도에 설문조사에 참여한 국가들</span></span><br><span class=\"line\">pd.set_option(<span class=\"string\">&#x27;display.max_rows&#x27;</span>, <span class=\"literal\">None</span>)</span><br><span class=\"line\">df21[<span class=\"string\">&#x27;Q3&#x27;</span>].value_counts().sort_index(ascending=<span class=\"literal\">True</span>)</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mykaggle1/1.PNG\"><br><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#South Korea에 해당하는 참여자만 출력</span></span><br><span class=\"line\">df21_Ko = df21[df21[<span class=\"string\">&#x27;Q3&#x27;</span>] == <span class=\"string\">&#x27;South Korea&#x27;</span>]</span><br><span class=\"line\">df21_Ko.head()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mykaggle1/2.PNG\"><br><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#한국을 제외한 참여자들의 투표결과</span></span><br><span class=\"line\">df21_Wo = df21[~(df21[<span class=\"string\">&#x27;Q3&#x27;</span>] == <span class=\"string\">&#x27;South Korea&#x27;</span>)]</span><br><span class=\"line\">df21_Wo.head()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mykaggle1/3.PNG\"><br><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 설문조사에 참여한 사람 비율</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#한국</span></span><br><span class=\"line\">df21_Ko = df21[df21[<span class=\"string\">&#x27;Q3&#x27;</span>] == <span class=\"string\">&#x27;South Korea&#x27;</span>]</span><br><span class=\"line\"><span class=\"comment\">#전세계</span></span><br><span class=\"line\">df21_Wo = df21[~(df21[<span class=\"string\">&#x27;Q3&#x27;</span>] == <span class=\"string\">&#x27;South Korea&#x27;</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#동아시아를 제외한 국가는 전부 거주지역을 World로 바꿈</span></span><br><span class=\"line\">df21[<span class=\"string\">&#x27;region&#x27;</span>]=[<span class=\"string\">&quot;Korea&quot;</span> <span class=\"keyword\">if</span> x == <span class=\"string\">&#x27;South Korea&#x27;</span> </span><br><span class=\"line\">                        <span class=\"keyword\">else</span> <span class=\"string\">&quot;World&quot;</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> df21[<span class=\"string\">&#x27;Q3&#x27;</span>]]</span><br><span class=\"line\">df21[<span class=\"string\">&#x27;region&#x27;</span>].value_counts()</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## if 변수 x 가 South Korea 일때</span></span><br><span class=\"line\"><span class=\"comment\">## else  -&gt; South Korea가 아닐때</span></span><br><span class=\"line\"><span class=\"comment\">##          x가 0부터 df21[&#x27;Q3&#x27;]의 행값을 차례로 World값을 넣는다 </span></span><br><span class=\"line\"><span class=\"comment\">####        이 결과를 df[&#x27;region&#x27;] 에 넣는다</span></span><br><span class=\"line\"><span class=\"comment\">##          따라서 동아시아가 아닌 국가들의 행 값은 전부 World로 바뀜</span></span><br><span class=\"line\">df21[<span class=\"string\">&#x27;region&#x27;</span>]=[<span class=\"string\">&quot;Korea&quot;</span> <span class=\"keyword\">if</span> x == <span class=\"string\">&#x27;South Korea&#x27;</span> </span><br><span class=\"line\">                        <span class=\"keyword\">else</span> <span class=\"string\">&quot;World&quot;</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> df21[<span class=\"string\">&#x27;Q3&#x27;</span>]]</span><br><span class=\"line\">df21[<span class=\"string\">&#x27;region&#x27;</span>].head()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mykaggle1/4.PNG\"></p>\n<h3 id=\"데이터-Grouping\"><a href=\"#데이터-Grouping\" class=\"headerlink\" title=\"데이터 Grouping\"></a><strong>데이터 Grouping</strong></h3><hr>\n<ul>\n<li><strong>연도별 EastAsia 국가 정리</strong><br>EastAsia17<br>EastAsia18<br>EastAsia19<br>EastAsia20<br>EastAsia21 </li>\n<li><strong>연도별 정리</strong><br>df21_Ea : 동아시아 국가만 데이터<br>df21_Wo : 동아시아 제외한 전세계 국가 데이터<br>df21[‘region’] : 동아시아를 제외한 국가는 World로 저장됨 (World랑 동아시아국가 이름밖에 없음)</li>\n<li><strong>isin()</strong><br>df21의 Q3열에 EastAsia의 리스트값과 동일한게 있을때 True , 없으면 False</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## East Asia에는 대한민국, 일본, 중국, 타이완, 몽골, 북조선 총 6개의 국가가 속해 있다. </span></span><br><span class=\"line\"></span><br><span class=\"line\">EastAsia17 = [<span class=\"string\">&#x27;China&#x27;</span>,<span class=\"string\">&quot;People &#x27;s Republic of China&quot;</span>, <span class=\"string\">&#x27;Taiwan&#x27;</span>, <span class=\"string\">&#x27;South Korea&#x27;</span>, <span class=\"string\">&#x27;Japan&#x27;</span>]</span><br><span class=\"line\">EastAsia18 = [<span class=\"string\">&#x27;China&#x27;</span>, <span class=\"string\">&#x27;South Korea&#x27;</span>, <span class=\"string\">&#x27;Japan&#x27;</span>, <span class=\"string\">&#x27;Republic of Korea&#x27;</span>] </span><br><span class=\"line\">EastAsia19 = [<span class=\"string\">&#x27;China&#x27;</span>,<span class=\"string\">&#x27;Taiwan&#x27;</span>, <span class=\"string\">&#x27;South Korea&#x27;</span>, <span class=\"string\">&#x27;Japan&#x27;</span>, <span class=\"string\">&#x27;Republic of Korea&#x27;</span>]</span><br><span class=\"line\">EastAsia20 = [<span class=\"string\">&#x27;China&#x27;</span>,<span class=\"string\">&#x27;Taiwan&#x27;</span>, <span class=\"string\">&#x27;South Korea&#x27;</span>, <span class=\"string\">&#x27;Japan&#x27;</span>, <span class=\"string\">&#x27;Republic of Korea&#x27;</span>]</span><br><span class=\"line\">EastAsia21 = [<span class=\"string\">&#x27;China&#x27;</span>,<span class=\"string\">&#x27;Taiwan&#x27;</span>, <span class=\"string\">&#x27;South Korea&#x27;</span>, <span class=\"string\">&#x27;Japan&#x27;</span>]</span><br><span class=\"line\">EastAsia = [<span class=\"string\">&#x27;Republic of Korea&#x27;</span>,<span class=\"string\">&#x27;China&#x27;</span>,<span class=\"string\">&#x27;Taiwan&#x27;</span>, <span class=\"string\">&#x27;South Korea&#x27;</span>, <span class=\"string\">&#x27;Japan&#x27;</span>, <span class=\"string\">&quot;People &#x27;s Republic of China&quot;</span> ]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#21년</span></span><br><span class=\"line\">df21_Ea = df21[df21[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(EastAsia)]</span><br><span class=\"line\">df21_Wo = df21[~df21[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(EastAsia )]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##  동아시아 국가를 제외한 국가들을 region 열의 데이터 값을 World 로 바꿔줌</span></span><br><span class=\"line\">df21[<span class=\"string\">&#x27;region&#x27;</span>]=[<span class=\"string\">&quot;EastAsia&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> EastAsia </span><br><span class=\"line\">                            <span class=\"keyword\">else</span> <span class=\"string\">&quot;World&quot;</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> df21[<span class=\"string\">&#x27;Q3&#x27;</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#20년</span></span><br><span class=\"line\">df20_Ea = df20[df20[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(EastAsia)]</span><br><span class=\"line\">df20_Wo = df20[~df20[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(EastAsia )]</span><br><span class=\"line\">df20[<span class=\"string\">&#x27;region&#x27;</span>]=[<span class=\"string\">&quot;EastAsia&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> EastAsia </span><br><span class=\"line\">                            <span class=\"keyword\">else</span> <span class=\"string\">&quot;World&quot;</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> df20[<span class=\"string\">&#x27;Q3&#x27;</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#19년</span></span><br><span class=\"line\">df19_Ea = df19[df19[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(EastAsia)]</span><br><span class=\"line\">df19_Wo = df19[~df19[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(EastAsia )]</span><br><span class=\"line\">df19[<span class=\"string\">&#x27;region&#x27;</span>]=[<span class=\"string\">&quot;EastAsia&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> EastAsia</span><br><span class=\"line\">                            <span class=\"keyword\">else</span> <span class=\"string\">&quot;World&quot;</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> df19[<span class=\"string\">&#x27;Q3&#x27;</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#18년</span></span><br><span class=\"line\">df18_Ea = df18[df18[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(EastAsia)]</span><br><span class=\"line\">df18_Wo = df18[~df18[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(EastAsia )]</span><br><span class=\"line\">df18[<span class=\"string\">&#x27;region&#x27;</span>]=[<span class=\"string\">&quot;EastAsia&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> EastAsia </span><br><span class=\"line\">                            <span class=\"keyword\">else</span> <span class=\"string\">&quot;World&quot;</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> df18[<span class=\"string\">&#x27;Q3&#x27;</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#17년</span></span><br><span class=\"line\">df17_Ea = df17[df17[<span class=\"string\">&#x27;Country&#x27;</span>].isin(EastAsia)]</span><br><span class=\"line\">df17_Wo = df17[~df17[<span class=\"string\">&#x27;Country&#x27;</span>].isin(EastAsia )]</span><br><span class=\"line\">df17[<span class=\"string\">&#x27;region&#x27;</span>]=[<span class=\"string\">&quot;EastAsia&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> EastAsia </span><br><span class=\"line\">                            <span class=\"keyword\">else</span> <span class=\"string\">&quot;World&quot;</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> df17[<span class=\"string\">&#x27;Country&#x27;</span>]]</span><br></pre></td></tr></table></figure>\n\n\n<br>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 마지막 열에 region이 추가된 것을 확인 할 수 있음</span></span><br><span class=\"line\">df21.head()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mykaggle1/5.PNG\"><br><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df21[<span class=\"string\">&#x27;region&#x27;</span>].value_counts()</span><br><span class=\"line\"><span class=\"comment\">##df20[&#x27;region&#x27;].value_counts()</span></span><br><span class=\"line\"><span class=\"comment\">##df19[&#x27;region&#x27;].value_counts()</span></span><br><span class=\"line\"><span class=\"comment\">##df18[&#x27;region&#x27;].value_counts()</span></span><br><span class=\"line\"><span class=\"comment\">##df17[&#x27;region&#x27;].value_counts()</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mykaggle1/6.PNG\"><br><br></p>\n<h3 id=\"Bar-그래프-생성\"><a href=\"#Bar-그래프-생성\" class=\"headerlink\" title=\"Bar 그래프 생성\"></a><strong>Bar 그래프 생성</strong></h3><h4 id=\"연도별-kaggle-사용자-전세계-vs-동아시아\"><a href=\"#연도별-kaggle-사용자-전세계-vs-동아시아\" class=\"headerlink\" title=\"연도별 kaggle 사용자 (전세계 vs 동아시아)\"></a>연도별 kaggle 사용자 (전세계 vs 동아시아)</h4><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 설문 참여자 총 인원</span></span><br><span class=\"line\">Ea21 = <span class=\"built_in\">len</span>(df21_Ea)</span><br><span class=\"line\">Wo21 = <span class=\"built_in\">len</span>(df21) - <span class=\"built_in\">len</span>(df21_Ea)</span><br><span class=\"line\"></span><br><span class=\"line\">Ea20 = <span class=\"built_in\">len</span>(df20_Ea)</span><br><span class=\"line\">Wo20 = <span class=\"built_in\">len</span>(df20) - <span class=\"built_in\">len</span>(df20_Ea)</span><br><span class=\"line\"></span><br><span class=\"line\">Ea19 = <span class=\"built_in\">len</span>(df19_Ea)</span><br><span class=\"line\">Wo19 = <span class=\"built_in\">len</span>(df19) - <span class=\"built_in\">len</span>(df19_Ea)</span><br><span class=\"line\"></span><br><span class=\"line\">Ea18 = <span class=\"built_in\">len</span>(df18_Ea)</span><br><span class=\"line\">Wo18 = <span class=\"built_in\">len</span>(df18) -  <span class=\"built_in\">len</span>(df18_Ea)</span><br><span class=\"line\"></span><br><span class=\"line\">Ea17 = <span class=\"built_in\">len</span>(df17_Ea)</span><br><span class=\"line\">Wo17 = <span class=\"built_in\">len</span>(df17) - <span class=\"built_in\">len</span>(df17_Ea)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 퍼센트 함수 만들어줌</span></span><br><span class=\"line\"><span class=\"comment\"># percent, percentR</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">percent</span> (<span class=\"params\">a, b</span>):</span></span><br><span class=\"line\">    result =a/(a+b)*<span class=\"number\">100</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">percentR</span> (<span class=\"params\">b, a</span>):</span></span><br><span class=\"line\">    result =a/(a+b)*<span class=\"number\">100</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">country = [<span class=\"string\">&#x27;East Asia&#x27;</span>, <span class=\"string\">&#x27;Rest of the World&#x27;</span>]</span><br><span class=\"line\">years = [<span class=\"string\">&#x27;2017&#x27;</span>, <span class=\"string\">&#x27;2018&#x27;</span>, <span class=\"string\">&#x27;2019&#x27;</span>, <span class=\"string\">&#x27;2020&#x27;</span>, <span class=\"string\">&#x27;2021&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fig = go.Figure(data=[</span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;Rest of the World&#x27;</span>, x=years, y=[percentR(Ea17, Wo17), percentR(Ea18, Wo18), percentR(Ea19, Wo19), </span><br><span class=\"line\">                                                 percentR(Ea20, Wo20), percentR(Ea21, Wo21)]),</span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;East Asia&#x27;</span>, x=years, y=[percent(Ea17, Wo17), percent(Ea18, Wo18), percent(Ea19, Wo19), </span><br><span class=\"line\">                                                 percent(Ea20, Wo20), percent(Ea21, Wo21)])</span><br><span class=\"line\">])</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(barmode=<span class=\"string\">&#x27;stack&#x27;</span>)</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mykaggle1/7.PNG\"></p>\n<ul>\n<li><strong>barmode =’stack’ 이거 제거하면 그래프가 나란히 나온다</strong><br><img src=\"/images/mykaggle1/13.PNG\"><h3 id=\"Pie-그래프-생성\"><a href=\"#Pie-그래프-생성\" class=\"headerlink\" title=\"Pie 그래프 생성\"></a><strong>Pie 그래프 생성</strong></h3><h4 id=\"연도별-kaggle-사용자-전세계-vs-동아시아-1\"><a href=\"#연도별-kaggle-사용자-전세계-vs-동아시아-1\" class=\"headerlink\" title=\"연도별 kaggle 사용자 (전세계 vs 동아시아)\"></a>연도별 kaggle 사용자 (전세계 vs 동아시아)</h4></li>\n</ul>\n<hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">total = (</span><br><span class=\"line\">    df21[<span class=\"string\">&#x27;region&#x27;</span>]</span><br><span class=\"line\">    .value_counts()</span><br><span class=\"line\">    .to_frame()</span><br><span class=\"line\">    .reset_index()</span><br><span class=\"line\">    .rename(columns=&#123;<span class=\"string\">&#x27;index&#x27;</span>:<span class=\"string\">&#x27;type&#x27;</span>, <span class=\"string\">&#x27;region&#x27;</span>:<span class=\"string\">&#x27;respodents&#x27;</span>&#125;)</span><br><span class=\"line\">    .groupby(<span class=\"string\">&#x27;type&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"built_in\">sum</span>()</span><br><span class=\"line\">    .reset_index() </span><br><span class=\"line\">)</span><br><span class=\"line\">total</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mykaggle1/8.PNG\"><br><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">colors = [<span class=\"string\">&#x27;#f2eda5&#x27;</span>,<span class=\"string\">&#x27;#bbbcbd&#x27;</span>, <span class=\"string\">&#x27;#bbbcbd&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">fig = go.Figure(data=[go.Pie(labels=total[<span class=\"string\">&#x27;type&#x27;</span>], </span><br><span class=\"line\">                             values=total[<span class=\"string\">&#x27;respodents&#x27;</span>], </span><br><span class=\"line\">                             hole=<span class=\"number\">.3</span>)])</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_traces(hoverinfo=<span class=\"string\">&#x27;percent&#x27;</span>, </span><br><span class=\"line\">                  textinfo=<span class=\"string\">&#x27;label&#x27;</span>, </span><br><span class=\"line\">                  textfont_size=<span class=\"number\">20</span>,</span><br><span class=\"line\">                  marker=<span class=\"built_in\">dict</span>(colors=colors)</span><br><span class=\"line\">                 )</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(showlegend=<span class=\"literal\">False</span>, </span><br><span class=\"line\">                  plot_bgcolor=<span class=\"string\">&#x27;#F7F7F7&#x27;</span>, </span><br><span class=\"line\">                  paper_bgcolor=<span class=\"string\">&#x27;#F7F7F7&#x27;</span>,</span><br><span class=\"line\">                  title_text=<span class=\"string\">&quot;&lt;b&gt;World vs EastAsia&lt;/b&gt;&quot;</span>,</span><br><span class=\"line\">                  title_x=<span class=\"number\">0.5</span>,</span><br><span class=\"line\">                  font=<span class=\"built_in\">dict</span>(family=<span class=\"string\">&quot;Hiragino Kaku Gothic Pro, sans-serif&quot;</span>, size=<span class=\"number\">25</span>, color=<span class=\"string\">&#x27;#000000&#x27;</span>)</span><br><span class=\"line\">                 )</span><br><span class=\"line\"></span><br><span class=\"line\">fig.show()</span><br><span class=\"line\"><span class=\"comment\"># marker=dict(colors=colors,line=dict(color=&#x27;#000000&#x27;, width=1)) #테두리</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mykaggle1/9.PNG\"><br><br></p>\n<h3 id=\"원형그래프-메서드-만들기\"><a href=\"#원형그래프-메서드-만들기\" class=\"headerlink\" title=\"원형그래프 메서드 만들기\"></a><strong>원형그래프 메서드 만들기</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pie</span>(<span class=\"params\">df</span>):</span></span><br><span class=\"line\">    total = (</span><br><span class=\"line\">    df[<span class=\"string\">&#x27;region&#x27;</span>]</span><br><span class=\"line\">    .value_counts()</span><br><span class=\"line\">    .to_frame()</span><br><span class=\"line\">    .reset_index()</span><br><span class=\"line\">    .rename(columns=&#123;<span class=\"string\">&#x27;index&#x27;</span>:<span class=\"string\">&#x27;type&#x27;</span>, <span class=\"string\">&#x27;region&#x27;</span>:<span class=\"string\">&#x27;respodents&#x27;</span>&#125;)</span><br><span class=\"line\">    .groupby(<span class=\"string\">&#x27;type&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"built_in\">sum</span>()</span><br><span class=\"line\">    .reset_index() </span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    colors = [<span class=\"string\">&#x27;#f2eda5&#x27;</span>,<span class=\"string\">&#x27;#bbbcbd&#x27;</span>, <span class=\"string\">&#x27;#bbbcbd&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    fig = go.Figure(data=[go.Pie(labels=total[<span class=\"string\">&#x27;type&#x27;</span>], </span><br><span class=\"line\">                             values=total[<span class=\"string\">&#x27;respodents&#x27;</span>], </span><br><span class=\"line\">                             hole=<span class=\"number\">.3</span>)])</span><br><span class=\"line\"></span><br><span class=\"line\">    fig.update_traces(hoverinfo=<span class=\"string\">&#x27;percent&#x27;</span>, </span><br><span class=\"line\">                  textinfo=<span class=\"string\">&#x27;label&#x27;</span>, </span><br><span class=\"line\">                  textfont_size=<span class=\"number\">20</span>,</span><br><span class=\"line\">                  marker=<span class=\"built_in\">dict</span>(colors=colors)</span><br><span class=\"line\">                 )</span><br><span class=\"line\"></span><br><span class=\"line\">    fig.update_layout(showlegend=<span class=\"literal\">False</span>, </span><br><span class=\"line\">                  plot_bgcolor=<span class=\"string\">&#x27;#F7F7F7&#x27;</span>, </span><br><span class=\"line\">                  paper_bgcolor=<span class=\"string\">&#x27;#F7F7F7&#x27;</span>,</span><br><span class=\"line\">                  title_text=<span class=\"string\">&quot;&lt;b&gt;World vs EastAsia&lt;/b&gt;&quot;</span>,</span><br><span class=\"line\">                  title_x=<span class=\"number\">0.5</span>,</span><br><span class=\"line\">                  font=<span class=\"built_in\">dict</span>(family=<span class=\"string\">&quot;Hiragino Kaku Gothic Pro, sans-serif&quot;</span>, size=<span class=\"number\">25</span>, color=<span class=\"string\">&#x27;#000000&#x27;</span>)</span><br><span class=\"line\">                 )</span><br><span class=\"line\"></span><br><span class=\"line\">    fig.show()</span><br><span class=\"line\"><span class=\"comment\"># marker=dict(colors=colors,line=dict(color=&#x27;#000000&#x27;, width=1)) #테두리</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>메서드 호출</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pie(df21)</span><br></pre></td></tr></table></figure>\n<br>\n\n\n<h3 id=\"choropleth-지도-그래프-그리기\"><a href=\"#choropleth-지도-그래프-그리기\" class=\"headerlink\" title=\"choropleth 지도 그래프 그리기\"></a><strong>choropleth 지도 그래프 그리기</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>].value_counts()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mykaggle1/10.PNG\"><br><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">world_map</span>(<span class=\"params\">locations,counts,title</span>):</span></span><br><span class=\"line\">    data = [ <span class=\"built_in\">dict</span>(</span><br><span class=\"line\">            <span class=\"built_in\">type</span> = <span class=\"string\">&#x27;choropleth&#x27;</span>,</span><br><span class=\"line\">            locations = locations,</span><br><span class=\"line\">            z = counts,</span><br><span class=\"line\">            colorscale = <span class=\"string\">&#x27;Blues&#x27;</span>,</span><br><span class=\"line\">            locationmode = <span class=\"string\">&#x27;country names&#x27;</span>,</span><br><span class=\"line\">            autocolorscale = <span class=\"literal\">False</span>,</span><br><span class=\"line\">            reversescale = <span class=\"literal\">True</span>,</span><br><span class=\"line\">            marker = <span class=\"built_in\">dict</span>(</span><br><span class=\"line\">                line = <span class=\"built_in\">dict</span>(color = <span class=\"string\">&#x27;#F7F7F7&#x27;</span>, width = <span class=\"number\">1.5</span>)),</span><br><span class=\"line\">                colorbar = <span class=\"built_in\">dict</span>(autotick = <span class=\"literal\">True</span>, legth = <span class=\"number\">3</span>, <span class=\"built_in\">len</span>=<span class=\"number\">0.75</span>, title = <span class=\"string\">&#x27;respodents&#x27;</span>,</span><br><span class=\"line\">                               <span class=\"built_in\">max</span> = <span class=\"number\">1000</span>, <span class=\"built_in\">min</span> = <span class=\"number\">0</span>)</span><br><span class=\"line\">                )</span><br><span class=\"line\">           ]</span><br><span class=\"line\">    layout = <span class=\"built_in\">dict</span>(</span><br><span class=\"line\">        title = title,</span><br><span class=\"line\">        titlefont=&#123;<span class=\"string\">&#x27;size&#x27;</span>: <span class=\"number\">28</span>, <span class=\"string\">&#x27;family&#x27;</span>: <span class=\"string\">&#x27;san serif&#x27;</span>&#125;,</span><br><span class=\"line\">        width=<span class=\"number\">750</span>, </span><br><span class=\"line\">        height=<span class=\"number\">475</span>,</span><br><span class=\"line\">        paper_bgcolor=<span class=\"string\">&#x27;#F7F7F7&#x27;</span>,</span><br><span class=\"line\">        geo = <span class=\"built_in\">dict</span>(</span><br><span class=\"line\">            showframe = <span class=\"literal\">True</span>,</span><br><span class=\"line\">            showcoastlines = <span class=\"literal\">True</span>,</span><br><span class=\"line\">            fitbounds=<span class=\"string\">&quot;locations&quot;</span>,</span><br><span class=\"line\">            )</span><br><span class=\"line\">    )</span><br><span class=\"line\">    </span><br><span class=\"line\">    fig = <span class=\"built_in\">dict</span>(data=data, layout=layout)</span><br><span class=\"line\">    iplot(fig, validate=<span class=\"literal\">False</span>, filename=<span class=\"string\">&#x27;world-map&#x27;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">z = df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>].value_counts()</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">## 메서드 호출</span></span><br><span class=\"line\">world_map(locations=z.index, counts=z.values, title= <span class=\"string\">&#x27;&lt;b&gt; EastAsia Countries (2021 survey) &lt;b&gt;&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mykaggle1/11.PNG\"><br><br></p>\n<h3 id=\"Bar-그래프\"><a href=\"#Bar-그래프\" class=\"headerlink\" title=\"Bar 그래프\"></a><strong>Bar 그래프</strong></h3><hr>\n<p>21년도만</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## vertical bar graphs##########################</span></span><br><span class=\"line\"><span class=\"comment\">## def plotly_vBar(df, q, title, l=50,r=50,b=50,t=100):   </span></span><br><span class=\"line\">fig = px.histogram(df21.iloc[<span class=\"number\">1</span>:],</span><br><span class=\"line\">                       x = df21[<span class=\"string\">&#x27;region&#x27;</span>],</span><br><span class=\"line\">                       orientation=<span class=\"string\">&#x27;v&#x27;</span>,</span><br><span class=\"line\">                       width=<span class=\"number\">700</span>,</span><br><span class=\"line\">                       height=<span class=\"number\">450</span>,</span><br><span class=\"line\">                       histnorm=<span class=\"string\">&#x27;percent&#x27;</span>,</span><br><span class=\"line\">                     </span><br><span class=\"line\">                       color_discrete_map=&#123;</span><br><span class=\"line\">                           <span class=\"string\">&quot;EastAsia&quot;</span>: <span class=\"string\">&quot;gold&quot;</span>, <span class=\"string\">&quot;World&quot;</span>: <span class=\"string\">&quot;salmon&quot;</span></span><br><span class=\"line\">                       &#125;,</span><br><span class=\"line\">                       opacity=<span class=\"number\">0.6</span></span><br><span class=\"line\">                       )</span><br><span class=\"line\">fig.update_layout(title=<span class=\"string\">&quot;21년도 전세계 vs 동아시아&quot;</span>,</span><br><span class=\"line\">                      font_family=<span class=\"string\">&quot;San Serif&quot;</span>,</span><br><span class=\"line\">                      bargap=<span class=\"number\">0.2</span>,</span><br><span class=\"line\">                      barmode=<span class=\"string\">&#x27;group&#x27;</span>,</span><br><span class=\"line\">                      titlefont=&#123;<span class=\"string\">&#x27;size&#x27;</span>: <span class=\"number\">28</span>&#125;,</span><br><span class=\"line\">                      paper_bgcolor=<span class=\"string\">&#x27;#F5F5F5&#x27;</span>,</span><br><span class=\"line\">                      plot_bgcolor=<span class=\"string\">&#x27;#F5F5F5&#x27;</span>,</span><br><span class=\"line\">                      legend=<span class=\"built_in\">dict</span>(</span><br><span class=\"line\">                      orientation=<span class=\"string\">&quot;v&quot;</span>, </span><br><span class=\"line\">                          y=<span class=\"number\">1</span>, </span><br><span class=\"line\">                          yanchor=<span class=\"string\">&quot;top&quot;</span>, </span><br><span class=\"line\">                          x=<span class=\"number\">1.250</span>, </span><br><span class=\"line\">                          xanchor=<span class=\"string\">&quot;right&quot;</span>,)                 </span><br><span class=\"line\">                      ).update_xaxes(categoryorder=<span class=\"string\">&#x27;total descending&#x27;</span>)</span><br><span class=\"line\">fig.show()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mykaggle1/12.PNG\"><br><br><br><br><br><br></p>\n<h3 id=\"Ref\"><a href=\"#Ref\" class=\"headerlink\" title=\"Ref\"></a><strong>Ref</strong></h3><hr>\n<p><a href=\"https://www.kaggle.com/desalegngeb/how-popular-is-kaggle-in-africa\">참고사이트</a></p>\n","site":{"data":{}},"excerpt":"데이터 불러오기\n\n\n\n실행환경: kaggle notebook\n사용언어: Python Plotly\n준비하는 kaggle competition 링크\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pylab as plt\n\nimport plotly.io as pio\nimport plotly.express as px\nimport pl","more":"<h3 id=\"데이터-불러오기\"><a href=\"#데이터-불러오기\" class=\"headerlink\" title=\"데이터 불러오기\"></a><strong>데이터 불러오기</strong></h3><hr>\n<p>실행환경: kaggle notebook<br>사용언어: Python Plotly<br><a href=\"https://www.kaggle.com/c/kaggle-survey-2021\">준비하는 kaggle competition 링크</a><br><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">import</span> seaborn <span class=\"keyword\">as</span> sns</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pylab <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> plotly.io <span class=\"keyword\">as</span> pio</span><br><span class=\"line\"><span class=\"keyword\">import</span> plotly.express <span class=\"keyword\">as</span> px</span><br><span class=\"line\"><span class=\"keyword\">import</span> plotly.graph_objects <span class=\"keyword\">as</span> go</span><br><span class=\"line\"><span class=\"keyword\">import</span> plotly.figure_factory <span class=\"keyword\">as</span> ff</span><br><span class=\"line\"><span class=\"keyword\">from</span> plotly.subplots <span class=\"keyword\">import</span> make_subplots</span><br><span class=\"line\"><span class=\"keyword\">from</span> plotly.offline <span class=\"keyword\">import</span> init_notebook_mode, iplot</span><br><span class=\"line\">init_notebook_mode(connected=<span class=\"literal\">True</span>)</span><br><span class=\"line\">pio.templates.default = <span class=\"string\">&quot;none&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># import plotly.offline as py</span></span><br><span class=\"line\"><span class=\"comment\"># py.offline.init_notebook_mode()</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">for</span> dirname, _, filenames <span class=\"keyword\">in</span> os.walk(<span class=\"string\">&#x27;/kaggle/input&#x27;</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> filename <span class=\"keyword\">in</span> filenames:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(os.path.join(dirname, filename))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> warnings</span><br><span class=\"line\">warnings.filterwarnings(<span class=\"string\">&quot;ignore&quot;</span>)</span><br></pre></td></tr></table></figure>\n<br>\n\n<h3 id=\"17년-21년도-데이터-불러오기\"><a href=\"#17년-21년도-데이터-불러오기\" class=\"headerlink\" title=\"17년 - 21년도 데이터 불러오기\"></a><strong>17년 - 21년도 데이터 불러오기</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df17= pd.read_csv(<span class=\"string\">&quot;/kaggle/input/kaggle-survey-2017/multipleChoiceResponses.csv&quot;</span>, encoding=<span class=\"string\">&quot;ISO-8859-1&quot;</span>)</span><br><span class=\"line\">df18= pd.read_csv(<span class=\"string\">&quot;/kaggle/input/kaggle-survey-2018/multipleChoiceResponses.csv&quot;</span>, )</span><br><span class=\"line\">df19= pd.read_csv(<span class=\"string\">&quot;/kaggle/input/kaggle-survey-2019/multiple_choice_responses.csv&quot;</span>, )</span><br><span class=\"line\">df20= pd.read_csv(<span class=\"string\">&quot;/kaggle/input/kaggle-survey-2020/kaggle_survey_2020_responses.csv&quot;</span>, )</span><br><span class=\"line\">df21= pd.read_csv(<span class=\"string\">&quot;/kaggle/input/kaggle-survey-2021/kaggle_survey_2021_responses.csv&quot;</span>, )</span><br></pre></td></tr></table></figure>\n<br>\n\n<h3 id=\"데이터-전처리\"><a href=\"#데이터-전처리\" class=\"headerlink\" title=\"데이터 전처리\"></a><strong>데이터 전처리</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#21년도에 설문조사에 참여한 국가들</span></span><br><span class=\"line\">pd.set_option(<span class=\"string\">&#x27;display.max_rows&#x27;</span>, <span class=\"literal\">None</span>)</span><br><span class=\"line\">df21[<span class=\"string\">&#x27;Q3&#x27;</span>].value_counts().sort_index(ascending=<span class=\"literal\">True</span>)</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mykaggle1/1.PNG\"><br><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#South Korea에 해당하는 참여자만 출력</span></span><br><span class=\"line\">df21_Ko = df21[df21[<span class=\"string\">&#x27;Q3&#x27;</span>] == <span class=\"string\">&#x27;South Korea&#x27;</span>]</span><br><span class=\"line\">df21_Ko.head()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mykaggle1/2.PNG\"><br><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#한국을 제외한 참여자들의 투표결과</span></span><br><span class=\"line\">df21_Wo = df21[~(df21[<span class=\"string\">&#x27;Q3&#x27;</span>] == <span class=\"string\">&#x27;South Korea&#x27;</span>)]</span><br><span class=\"line\">df21_Wo.head()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mykaggle1/3.PNG\"><br><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 설문조사에 참여한 사람 비율</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#한국</span></span><br><span class=\"line\">df21_Ko = df21[df21[<span class=\"string\">&#x27;Q3&#x27;</span>] == <span class=\"string\">&#x27;South Korea&#x27;</span>]</span><br><span class=\"line\"><span class=\"comment\">#전세계</span></span><br><span class=\"line\">df21_Wo = df21[~(df21[<span class=\"string\">&#x27;Q3&#x27;</span>] == <span class=\"string\">&#x27;South Korea&#x27;</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#동아시아를 제외한 국가는 전부 거주지역을 World로 바꿈</span></span><br><span class=\"line\">df21[<span class=\"string\">&#x27;region&#x27;</span>]=[<span class=\"string\">&quot;Korea&quot;</span> <span class=\"keyword\">if</span> x == <span class=\"string\">&#x27;South Korea&#x27;</span> </span><br><span class=\"line\">                        <span class=\"keyword\">else</span> <span class=\"string\">&quot;World&quot;</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> df21[<span class=\"string\">&#x27;Q3&#x27;</span>]]</span><br><span class=\"line\">df21[<span class=\"string\">&#x27;region&#x27;</span>].value_counts()</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## if 변수 x 가 South Korea 일때</span></span><br><span class=\"line\"><span class=\"comment\">## else  -&gt; South Korea가 아닐때</span></span><br><span class=\"line\"><span class=\"comment\">##          x가 0부터 df21[&#x27;Q3&#x27;]의 행값을 차례로 World값을 넣는다 </span></span><br><span class=\"line\"><span class=\"comment\">####        이 결과를 df[&#x27;region&#x27;] 에 넣는다</span></span><br><span class=\"line\"><span class=\"comment\">##          따라서 동아시아가 아닌 국가들의 행 값은 전부 World로 바뀜</span></span><br><span class=\"line\">df21[<span class=\"string\">&#x27;region&#x27;</span>]=[<span class=\"string\">&quot;Korea&quot;</span> <span class=\"keyword\">if</span> x == <span class=\"string\">&#x27;South Korea&#x27;</span> </span><br><span class=\"line\">                        <span class=\"keyword\">else</span> <span class=\"string\">&quot;World&quot;</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> df21[<span class=\"string\">&#x27;Q3&#x27;</span>]]</span><br><span class=\"line\">df21[<span class=\"string\">&#x27;region&#x27;</span>].head()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mykaggle1/4.PNG\"></p>\n<h3 id=\"데이터-Grouping\"><a href=\"#데이터-Grouping\" class=\"headerlink\" title=\"데이터 Grouping\"></a><strong>데이터 Grouping</strong></h3><hr>\n<ul>\n<li><strong>연도별 EastAsia 국가 정리</strong><br>EastAsia17<br>EastAsia18<br>EastAsia19<br>EastAsia20<br>EastAsia21 </li>\n<li><strong>연도별 정리</strong><br>df21_Ea : 동아시아 국가만 데이터<br>df21_Wo : 동아시아 제외한 전세계 국가 데이터<br>df21[‘region’] : 동아시아를 제외한 국가는 World로 저장됨 (World랑 동아시아국가 이름밖에 없음)</li>\n<li><strong>isin()</strong><br>df21의 Q3열에 EastAsia의 리스트값과 동일한게 있을때 True , 없으면 False</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## East Asia에는 대한민국, 일본, 중국, 타이완, 몽골, 북조선 총 6개의 국가가 속해 있다. </span></span><br><span class=\"line\"></span><br><span class=\"line\">EastAsia17 = [<span class=\"string\">&#x27;China&#x27;</span>,<span class=\"string\">&quot;People &#x27;s Republic of China&quot;</span>, <span class=\"string\">&#x27;Taiwan&#x27;</span>, <span class=\"string\">&#x27;South Korea&#x27;</span>, <span class=\"string\">&#x27;Japan&#x27;</span>]</span><br><span class=\"line\">EastAsia18 = [<span class=\"string\">&#x27;China&#x27;</span>, <span class=\"string\">&#x27;South Korea&#x27;</span>, <span class=\"string\">&#x27;Japan&#x27;</span>, <span class=\"string\">&#x27;Republic of Korea&#x27;</span>] </span><br><span class=\"line\">EastAsia19 = [<span class=\"string\">&#x27;China&#x27;</span>,<span class=\"string\">&#x27;Taiwan&#x27;</span>, <span class=\"string\">&#x27;South Korea&#x27;</span>, <span class=\"string\">&#x27;Japan&#x27;</span>, <span class=\"string\">&#x27;Republic of Korea&#x27;</span>]</span><br><span class=\"line\">EastAsia20 = [<span class=\"string\">&#x27;China&#x27;</span>,<span class=\"string\">&#x27;Taiwan&#x27;</span>, <span class=\"string\">&#x27;South Korea&#x27;</span>, <span class=\"string\">&#x27;Japan&#x27;</span>, <span class=\"string\">&#x27;Republic of Korea&#x27;</span>]</span><br><span class=\"line\">EastAsia21 = [<span class=\"string\">&#x27;China&#x27;</span>,<span class=\"string\">&#x27;Taiwan&#x27;</span>, <span class=\"string\">&#x27;South Korea&#x27;</span>, <span class=\"string\">&#x27;Japan&#x27;</span>]</span><br><span class=\"line\">EastAsia = [<span class=\"string\">&#x27;Republic of Korea&#x27;</span>,<span class=\"string\">&#x27;China&#x27;</span>,<span class=\"string\">&#x27;Taiwan&#x27;</span>, <span class=\"string\">&#x27;South Korea&#x27;</span>, <span class=\"string\">&#x27;Japan&#x27;</span>, <span class=\"string\">&quot;People &#x27;s Republic of China&quot;</span> ]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#21년</span></span><br><span class=\"line\">df21_Ea = df21[df21[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(EastAsia)]</span><br><span class=\"line\">df21_Wo = df21[~df21[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(EastAsia )]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##  동아시아 국가를 제외한 국가들을 region 열의 데이터 값을 World 로 바꿔줌</span></span><br><span class=\"line\">df21[<span class=\"string\">&#x27;region&#x27;</span>]=[<span class=\"string\">&quot;EastAsia&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> EastAsia </span><br><span class=\"line\">                            <span class=\"keyword\">else</span> <span class=\"string\">&quot;World&quot;</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> df21[<span class=\"string\">&#x27;Q3&#x27;</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#20년</span></span><br><span class=\"line\">df20_Ea = df20[df20[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(EastAsia)]</span><br><span class=\"line\">df20_Wo = df20[~df20[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(EastAsia )]</span><br><span class=\"line\">df20[<span class=\"string\">&#x27;region&#x27;</span>]=[<span class=\"string\">&quot;EastAsia&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> EastAsia </span><br><span class=\"line\">                            <span class=\"keyword\">else</span> <span class=\"string\">&quot;World&quot;</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> df20[<span class=\"string\">&#x27;Q3&#x27;</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#19년</span></span><br><span class=\"line\">df19_Ea = df19[df19[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(EastAsia)]</span><br><span class=\"line\">df19_Wo = df19[~df19[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(EastAsia )]</span><br><span class=\"line\">df19[<span class=\"string\">&#x27;region&#x27;</span>]=[<span class=\"string\">&quot;EastAsia&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> EastAsia</span><br><span class=\"line\">                            <span class=\"keyword\">else</span> <span class=\"string\">&quot;World&quot;</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> df19[<span class=\"string\">&#x27;Q3&#x27;</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#18년</span></span><br><span class=\"line\">df18_Ea = df18[df18[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(EastAsia)]</span><br><span class=\"line\">df18_Wo = df18[~df18[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(EastAsia )]</span><br><span class=\"line\">df18[<span class=\"string\">&#x27;region&#x27;</span>]=[<span class=\"string\">&quot;EastAsia&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> EastAsia </span><br><span class=\"line\">                            <span class=\"keyword\">else</span> <span class=\"string\">&quot;World&quot;</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> df18[<span class=\"string\">&#x27;Q3&#x27;</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#17년</span></span><br><span class=\"line\">df17_Ea = df17[df17[<span class=\"string\">&#x27;Country&#x27;</span>].isin(EastAsia)]</span><br><span class=\"line\">df17_Wo = df17[~df17[<span class=\"string\">&#x27;Country&#x27;</span>].isin(EastAsia )]</span><br><span class=\"line\">df17[<span class=\"string\">&#x27;region&#x27;</span>]=[<span class=\"string\">&quot;EastAsia&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> EastAsia </span><br><span class=\"line\">                            <span class=\"keyword\">else</span> <span class=\"string\">&quot;World&quot;</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> df17[<span class=\"string\">&#x27;Country&#x27;</span>]]</span><br></pre></td></tr></table></figure>\n\n\n<br>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 마지막 열에 region이 추가된 것을 확인 할 수 있음</span></span><br><span class=\"line\">df21.head()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mykaggle1/5.PNG\"><br><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df21[<span class=\"string\">&#x27;region&#x27;</span>].value_counts()</span><br><span class=\"line\"><span class=\"comment\">##df20[&#x27;region&#x27;].value_counts()</span></span><br><span class=\"line\"><span class=\"comment\">##df19[&#x27;region&#x27;].value_counts()</span></span><br><span class=\"line\"><span class=\"comment\">##df18[&#x27;region&#x27;].value_counts()</span></span><br><span class=\"line\"><span class=\"comment\">##df17[&#x27;region&#x27;].value_counts()</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mykaggle1/6.PNG\"><br><br></p>\n<h3 id=\"Bar-그래프-생성\"><a href=\"#Bar-그래프-생성\" class=\"headerlink\" title=\"Bar 그래프 생성\"></a><strong>Bar 그래프 생성</strong></h3><h4 id=\"연도별-kaggle-사용자-전세계-vs-동아시아\"><a href=\"#연도별-kaggle-사용자-전세계-vs-동아시아\" class=\"headerlink\" title=\"연도별 kaggle 사용자 (전세계 vs 동아시아)\"></a>연도별 kaggle 사용자 (전세계 vs 동아시아)</h4><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 설문 참여자 총 인원</span></span><br><span class=\"line\">Ea21 = <span class=\"built_in\">len</span>(df21_Ea)</span><br><span class=\"line\">Wo21 = <span class=\"built_in\">len</span>(df21) - <span class=\"built_in\">len</span>(df21_Ea)</span><br><span class=\"line\"></span><br><span class=\"line\">Ea20 = <span class=\"built_in\">len</span>(df20_Ea)</span><br><span class=\"line\">Wo20 = <span class=\"built_in\">len</span>(df20) - <span class=\"built_in\">len</span>(df20_Ea)</span><br><span class=\"line\"></span><br><span class=\"line\">Ea19 = <span class=\"built_in\">len</span>(df19_Ea)</span><br><span class=\"line\">Wo19 = <span class=\"built_in\">len</span>(df19) - <span class=\"built_in\">len</span>(df19_Ea)</span><br><span class=\"line\"></span><br><span class=\"line\">Ea18 = <span class=\"built_in\">len</span>(df18_Ea)</span><br><span class=\"line\">Wo18 = <span class=\"built_in\">len</span>(df18) -  <span class=\"built_in\">len</span>(df18_Ea)</span><br><span class=\"line\"></span><br><span class=\"line\">Ea17 = <span class=\"built_in\">len</span>(df17_Ea)</span><br><span class=\"line\">Wo17 = <span class=\"built_in\">len</span>(df17) - <span class=\"built_in\">len</span>(df17_Ea)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 퍼센트 함수 만들어줌</span></span><br><span class=\"line\"><span class=\"comment\"># percent, percentR</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">percent</span> (<span class=\"params\">a, b</span>):</span></span><br><span class=\"line\">    result =a/(a+b)*<span class=\"number\">100</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">percentR</span> (<span class=\"params\">b, a</span>):</span></span><br><span class=\"line\">    result =a/(a+b)*<span class=\"number\">100</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">country = [<span class=\"string\">&#x27;East Asia&#x27;</span>, <span class=\"string\">&#x27;Rest of the World&#x27;</span>]</span><br><span class=\"line\">years = [<span class=\"string\">&#x27;2017&#x27;</span>, <span class=\"string\">&#x27;2018&#x27;</span>, <span class=\"string\">&#x27;2019&#x27;</span>, <span class=\"string\">&#x27;2020&#x27;</span>, <span class=\"string\">&#x27;2021&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fig = go.Figure(data=[</span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;Rest of the World&#x27;</span>, x=years, y=[percentR(Ea17, Wo17), percentR(Ea18, Wo18), percentR(Ea19, Wo19), </span><br><span class=\"line\">                                                 percentR(Ea20, Wo20), percentR(Ea21, Wo21)]),</span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;East Asia&#x27;</span>, x=years, y=[percent(Ea17, Wo17), percent(Ea18, Wo18), percent(Ea19, Wo19), </span><br><span class=\"line\">                                                 percent(Ea20, Wo20), percent(Ea21, Wo21)])</span><br><span class=\"line\">])</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(barmode=<span class=\"string\">&#x27;stack&#x27;</span>)</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mykaggle1/7.PNG\"></p>\n<ul>\n<li><strong>barmode =’stack’ 이거 제거하면 그래프가 나란히 나온다</strong><br><img src=\"/images/mykaggle1/13.PNG\"><h3 id=\"Pie-그래프-생성\"><a href=\"#Pie-그래프-생성\" class=\"headerlink\" title=\"Pie 그래프 생성\"></a><strong>Pie 그래프 생성</strong></h3><h4 id=\"연도별-kaggle-사용자-전세계-vs-동아시아-1\"><a href=\"#연도별-kaggle-사용자-전세계-vs-동아시아-1\" class=\"headerlink\" title=\"연도별 kaggle 사용자 (전세계 vs 동아시아)\"></a>연도별 kaggle 사용자 (전세계 vs 동아시아)</h4></li>\n</ul>\n<hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">total = (</span><br><span class=\"line\">    df21[<span class=\"string\">&#x27;region&#x27;</span>]</span><br><span class=\"line\">    .value_counts()</span><br><span class=\"line\">    .to_frame()</span><br><span class=\"line\">    .reset_index()</span><br><span class=\"line\">    .rename(columns=&#123;<span class=\"string\">&#x27;index&#x27;</span>:<span class=\"string\">&#x27;type&#x27;</span>, <span class=\"string\">&#x27;region&#x27;</span>:<span class=\"string\">&#x27;respodents&#x27;</span>&#125;)</span><br><span class=\"line\">    .groupby(<span class=\"string\">&#x27;type&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"built_in\">sum</span>()</span><br><span class=\"line\">    .reset_index() </span><br><span class=\"line\">)</span><br><span class=\"line\">total</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mykaggle1/8.PNG\"><br><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">colors = [<span class=\"string\">&#x27;#f2eda5&#x27;</span>,<span class=\"string\">&#x27;#bbbcbd&#x27;</span>, <span class=\"string\">&#x27;#bbbcbd&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">fig = go.Figure(data=[go.Pie(labels=total[<span class=\"string\">&#x27;type&#x27;</span>], </span><br><span class=\"line\">                             values=total[<span class=\"string\">&#x27;respodents&#x27;</span>], </span><br><span class=\"line\">                             hole=<span class=\"number\">.3</span>)])</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_traces(hoverinfo=<span class=\"string\">&#x27;percent&#x27;</span>, </span><br><span class=\"line\">                  textinfo=<span class=\"string\">&#x27;label&#x27;</span>, </span><br><span class=\"line\">                  textfont_size=<span class=\"number\">20</span>,</span><br><span class=\"line\">                  marker=<span class=\"built_in\">dict</span>(colors=colors)</span><br><span class=\"line\">                 )</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(showlegend=<span class=\"literal\">False</span>, </span><br><span class=\"line\">                  plot_bgcolor=<span class=\"string\">&#x27;#F7F7F7&#x27;</span>, </span><br><span class=\"line\">                  paper_bgcolor=<span class=\"string\">&#x27;#F7F7F7&#x27;</span>,</span><br><span class=\"line\">                  title_text=<span class=\"string\">&quot;&lt;b&gt;World vs EastAsia&lt;/b&gt;&quot;</span>,</span><br><span class=\"line\">                  title_x=<span class=\"number\">0.5</span>,</span><br><span class=\"line\">                  font=<span class=\"built_in\">dict</span>(family=<span class=\"string\">&quot;Hiragino Kaku Gothic Pro, sans-serif&quot;</span>, size=<span class=\"number\">25</span>, color=<span class=\"string\">&#x27;#000000&#x27;</span>)</span><br><span class=\"line\">                 )</span><br><span class=\"line\"></span><br><span class=\"line\">fig.show()</span><br><span class=\"line\"><span class=\"comment\"># marker=dict(colors=colors,line=dict(color=&#x27;#000000&#x27;, width=1)) #테두리</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mykaggle1/9.PNG\"><br><br></p>\n<h3 id=\"원형그래프-메서드-만들기\"><a href=\"#원형그래프-메서드-만들기\" class=\"headerlink\" title=\"원형그래프 메서드 만들기\"></a><strong>원형그래프 메서드 만들기</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pie</span>(<span class=\"params\">df</span>):</span></span><br><span class=\"line\">    total = (</span><br><span class=\"line\">    df[<span class=\"string\">&#x27;region&#x27;</span>]</span><br><span class=\"line\">    .value_counts()</span><br><span class=\"line\">    .to_frame()</span><br><span class=\"line\">    .reset_index()</span><br><span class=\"line\">    .rename(columns=&#123;<span class=\"string\">&#x27;index&#x27;</span>:<span class=\"string\">&#x27;type&#x27;</span>, <span class=\"string\">&#x27;region&#x27;</span>:<span class=\"string\">&#x27;respodents&#x27;</span>&#125;)</span><br><span class=\"line\">    .groupby(<span class=\"string\">&#x27;type&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"built_in\">sum</span>()</span><br><span class=\"line\">    .reset_index() </span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    colors = [<span class=\"string\">&#x27;#f2eda5&#x27;</span>,<span class=\"string\">&#x27;#bbbcbd&#x27;</span>, <span class=\"string\">&#x27;#bbbcbd&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    fig = go.Figure(data=[go.Pie(labels=total[<span class=\"string\">&#x27;type&#x27;</span>], </span><br><span class=\"line\">                             values=total[<span class=\"string\">&#x27;respodents&#x27;</span>], </span><br><span class=\"line\">                             hole=<span class=\"number\">.3</span>)])</span><br><span class=\"line\"></span><br><span class=\"line\">    fig.update_traces(hoverinfo=<span class=\"string\">&#x27;percent&#x27;</span>, </span><br><span class=\"line\">                  textinfo=<span class=\"string\">&#x27;label&#x27;</span>, </span><br><span class=\"line\">                  textfont_size=<span class=\"number\">20</span>,</span><br><span class=\"line\">                  marker=<span class=\"built_in\">dict</span>(colors=colors)</span><br><span class=\"line\">                 )</span><br><span class=\"line\"></span><br><span class=\"line\">    fig.update_layout(showlegend=<span class=\"literal\">False</span>, </span><br><span class=\"line\">                  plot_bgcolor=<span class=\"string\">&#x27;#F7F7F7&#x27;</span>, </span><br><span class=\"line\">                  paper_bgcolor=<span class=\"string\">&#x27;#F7F7F7&#x27;</span>,</span><br><span class=\"line\">                  title_text=<span class=\"string\">&quot;&lt;b&gt;World vs EastAsia&lt;/b&gt;&quot;</span>,</span><br><span class=\"line\">                  title_x=<span class=\"number\">0.5</span>,</span><br><span class=\"line\">                  font=<span class=\"built_in\">dict</span>(family=<span class=\"string\">&quot;Hiragino Kaku Gothic Pro, sans-serif&quot;</span>, size=<span class=\"number\">25</span>, color=<span class=\"string\">&#x27;#000000&#x27;</span>)</span><br><span class=\"line\">                 )</span><br><span class=\"line\"></span><br><span class=\"line\">    fig.show()</span><br><span class=\"line\"><span class=\"comment\"># marker=dict(colors=colors,line=dict(color=&#x27;#000000&#x27;, width=1)) #테두리</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>메서드 호출</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pie(df21)</span><br></pre></td></tr></table></figure>\n<br>\n\n\n<h3 id=\"choropleth-지도-그래프-그리기\"><a href=\"#choropleth-지도-그래프-그리기\" class=\"headerlink\" title=\"choropleth 지도 그래프 그리기\"></a><strong>choropleth 지도 그래프 그리기</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>].value_counts()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mykaggle1/10.PNG\"><br><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">world_map</span>(<span class=\"params\">locations,counts,title</span>):</span></span><br><span class=\"line\">    data = [ <span class=\"built_in\">dict</span>(</span><br><span class=\"line\">            <span class=\"built_in\">type</span> = <span class=\"string\">&#x27;choropleth&#x27;</span>,</span><br><span class=\"line\">            locations = locations,</span><br><span class=\"line\">            z = counts,</span><br><span class=\"line\">            colorscale = <span class=\"string\">&#x27;Blues&#x27;</span>,</span><br><span class=\"line\">            locationmode = <span class=\"string\">&#x27;country names&#x27;</span>,</span><br><span class=\"line\">            autocolorscale = <span class=\"literal\">False</span>,</span><br><span class=\"line\">            reversescale = <span class=\"literal\">True</span>,</span><br><span class=\"line\">            marker = <span class=\"built_in\">dict</span>(</span><br><span class=\"line\">                line = <span class=\"built_in\">dict</span>(color = <span class=\"string\">&#x27;#F7F7F7&#x27;</span>, width = <span class=\"number\">1.5</span>)),</span><br><span class=\"line\">                colorbar = <span class=\"built_in\">dict</span>(autotick = <span class=\"literal\">True</span>, legth = <span class=\"number\">3</span>, <span class=\"built_in\">len</span>=<span class=\"number\">0.75</span>, title = <span class=\"string\">&#x27;respodents&#x27;</span>,</span><br><span class=\"line\">                               <span class=\"built_in\">max</span> = <span class=\"number\">1000</span>, <span class=\"built_in\">min</span> = <span class=\"number\">0</span>)</span><br><span class=\"line\">                )</span><br><span class=\"line\">           ]</span><br><span class=\"line\">    layout = <span class=\"built_in\">dict</span>(</span><br><span class=\"line\">        title = title,</span><br><span class=\"line\">        titlefont=&#123;<span class=\"string\">&#x27;size&#x27;</span>: <span class=\"number\">28</span>, <span class=\"string\">&#x27;family&#x27;</span>: <span class=\"string\">&#x27;san serif&#x27;</span>&#125;,</span><br><span class=\"line\">        width=<span class=\"number\">750</span>, </span><br><span class=\"line\">        height=<span class=\"number\">475</span>,</span><br><span class=\"line\">        paper_bgcolor=<span class=\"string\">&#x27;#F7F7F7&#x27;</span>,</span><br><span class=\"line\">        geo = <span class=\"built_in\">dict</span>(</span><br><span class=\"line\">            showframe = <span class=\"literal\">True</span>,</span><br><span class=\"line\">            showcoastlines = <span class=\"literal\">True</span>,</span><br><span class=\"line\">            fitbounds=<span class=\"string\">&quot;locations&quot;</span>,</span><br><span class=\"line\">            )</span><br><span class=\"line\">    )</span><br><span class=\"line\">    </span><br><span class=\"line\">    fig = <span class=\"built_in\">dict</span>(data=data, layout=layout)</span><br><span class=\"line\">    iplot(fig, validate=<span class=\"literal\">False</span>, filename=<span class=\"string\">&#x27;world-map&#x27;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">z = df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>].value_counts()</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">## 메서드 호출</span></span><br><span class=\"line\">world_map(locations=z.index, counts=z.values, title= <span class=\"string\">&#x27;&lt;b&gt; EastAsia Countries (2021 survey) &lt;b&gt;&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mykaggle1/11.PNG\"><br><br></p>\n<h3 id=\"Bar-그래프\"><a href=\"#Bar-그래프\" class=\"headerlink\" title=\"Bar 그래프\"></a><strong>Bar 그래프</strong></h3><hr>\n<p>21년도만</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## vertical bar graphs##########################</span></span><br><span class=\"line\"><span class=\"comment\">## def plotly_vBar(df, q, title, l=50,r=50,b=50,t=100):   </span></span><br><span class=\"line\">fig = px.histogram(df21.iloc[<span class=\"number\">1</span>:],</span><br><span class=\"line\">                       x = df21[<span class=\"string\">&#x27;region&#x27;</span>],</span><br><span class=\"line\">                       orientation=<span class=\"string\">&#x27;v&#x27;</span>,</span><br><span class=\"line\">                       width=<span class=\"number\">700</span>,</span><br><span class=\"line\">                       height=<span class=\"number\">450</span>,</span><br><span class=\"line\">                       histnorm=<span class=\"string\">&#x27;percent&#x27;</span>,</span><br><span class=\"line\">                     </span><br><span class=\"line\">                       color_discrete_map=&#123;</span><br><span class=\"line\">                           <span class=\"string\">&quot;EastAsia&quot;</span>: <span class=\"string\">&quot;gold&quot;</span>, <span class=\"string\">&quot;World&quot;</span>: <span class=\"string\">&quot;salmon&quot;</span></span><br><span class=\"line\">                       &#125;,</span><br><span class=\"line\">                       opacity=<span class=\"number\">0.6</span></span><br><span class=\"line\">                       )</span><br><span class=\"line\">fig.update_layout(title=<span class=\"string\">&quot;21년도 전세계 vs 동아시아&quot;</span>,</span><br><span class=\"line\">                      font_family=<span class=\"string\">&quot;San Serif&quot;</span>,</span><br><span class=\"line\">                      bargap=<span class=\"number\">0.2</span>,</span><br><span class=\"line\">                      barmode=<span class=\"string\">&#x27;group&#x27;</span>,</span><br><span class=\"line\">                      titlefont=&#123;<span class=\"string\">&#x27;size&#x27;</span>: <span class=\"number\">28</span>&#125;,</span><br><span class=\"line\">                      paper_bgcolor=<span class=\"string\">&#x27;#F5F5F5&#x27;</span>,</span><br><span class=\"line\">                      plot_bgcolor=<span class=\"string\">&#x27;#F5F5F5&#x27;</span>,</span><br><span class=\"line\">                      legend=<span class=\"built_in\">dict</span>(</span><br><span class=\"line\">                      orientation=<span class=\"string\">&quot;v&quot;</span>, </span><br><span class=\"line\">                          y=<span class=\"number\">1</span>, </span><br><span class=\"line\">                          yanchor=<span class=\"string\">&quot;top&quot;</span>, </span><br><span class=\"line\">                          x=<span class=\"number\">1.250</span>, </span><br><span class=\"line\">                          xanchor=<span class=\"string\">&quot;right&quot;</span>,)                 </span><br><span class=\"line\">                      ).update_xaxes(categoryorder=<span class=\"string\">&#x27;total descending&#x27;</span>)</span><br><span class=\"line\">fig.show()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mykaggle1/12.PNG\"><br><br><br><br><br><br></p>\n<h3 id=\"Ref\"><a href=\"#Ref\" class=\"headerlink\" title=\"Ref\"></a><strong>Ref</strong></h3><hr>\n<p><a href=\"https://www.kaggle.com/desalegngeb/how-popular-is-kaggle-in-africa\">참고사이트</a></p>\n"},{"date":"2021-12-31T15:00:00.000Z","title":"맥북 초기 셋팅","toc":true,"_content":"\n### **TMI**\n\n아빠가 사준신 15년도에 구입한 엘지 그램을 거의 7년동안 사용하고,\n너무 느려져서 최근에 맥북을 구매했다.\n윈도우를 사용하던 내가 처음으로 새로운 IOS 운영체제를 사용해보는거라\n설렘 반 걱정 반 이었던 것 같다.\n\n애플 기기에 관심이 무척 많아서 수원역에 애플 스토어 매장에 자주 방문에서 구경하고는 했는데\n맥북을 만져봤더니 정말 하나도 모르겠더라\n\n<img src=\"/images/macbookair/나의맥북.jpeg\" width=\"500\" height=\"500\"/>\n\n애플이 마감과 디자인 하나는 정말 좋다! 짱이뿜\n\n나는 RAM 8기가, SSD 256기가로 구입했다\n솔직히 RAM 16기가가 욕심이 났는데, 가격도 만만치 않았고\nIOS 운영체제가 나한테 잘 맞을지에 대한 확신이 없었기 때문에 깡통 옵션으로 구매하였다.\n나중에 돈 많이 벌면 프로로 바꿀거다 ㅎ \n\n<br>\n<br>\n\n### **Apple Developer**\n\n<img src=\"/images/macbookair/appledeveloper.png\" width=\"500\" height=\"500\"/>\n<br>\n위의 Apple Developer를 설치하면 xcode와 Developer가 설치된다\n설치하는데 굉장히 오랜 시간이 걸렸다. 아마 30분 정도 걸린것 같다.\n\n- xcode란?\nApple의 macOS, iOS, watchOS 및 tvOS용 소프트웨어 개발을 위한 IDE. 엑스코드라 읽으며, macOS 전용이다.\n\n\n<br>\n\n### **Nodejs**\n    🔗 https://nodejs.org/ko/\n위의 사이트에서 nodejs를 설치 할 수 있다\n\n<br>\n\n### **pycharm 설치**\npython을 사용할건 아닌데, 블로그를 좀 편하게 사용할 IDE가 필요했다\n\n<br>\n\n### **git 설치**\n\n- **Homebrew를 설치**\ngit을 설치하기 전에 먼저 Homebrew를 설치해야한다\n\n\n     🔗 https://brew.sh/\n\n위의 링크에 접속하면 방법이 나와있다. \n결론은 아래 코드를 터미널에서 입력하면 바로 설치 완료 <br>\n \n    /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n\n<br>\n\n- **git 설치**\n아래 사이트에 들어가면 깃을 설치하는 방법이 나와있지만\n아래 코드를 터미널에서 입력하면 깃 설치가 완료됨\n\n\n    🔗 http://git-scm.com/download/mac\n   \n윈도우와 다르게 터미널에서 아래 코드 한 줄 입력하면 git 설치가 끝난다\n     brew install git\n\n<br>\n\n- **git config 설정 (계정 로그인)**\n\n\n    git config global user.name \"wldnjd2\"\n    git config global user.email \"jeewon3665@naver.com\"\n\n깃을 처음 설치했을때 계정 로그인을 해줘야 하는데 위와 같이 하면 된다.\n각자의 아이디와 이메일을 적으면 된다\n\n<br>\n\n- **hexo blog 옮기기**\nblog는 git clone으로 내려받아서 할 수 있는게 아니였다 ㅜ ㅜ\n다른 컴퓨터에서 블로그를 하려면 결국 설정을 다시 해줘야하는데 \n\n아래와 같이 하면 된다\n\n    hexo init myblog (각자블로그 레포지토리 이름적기)\n    cd myblog\n    git init\n    git remote add origin http://~~ (각자의 레포 주소)\n    git clean -d -f\n    git pull --set-upstream origin main\n    npm installl\n    hexo clean\n\n마지막엔 아래의 코드로 옮겨진 블로그를 localhost:4000 에서 확인 할 수 있다\n\n    hexo g\n    hexo s\n\n<br>\n\n- **블로그 수정사항 깃허브에 올리기**\n\n블로그를 깃허브에 올리려고 아래 명령어를 실행했지만 에러가 났다..\nadd와 commit은 되는데 push가 안되었다\n\n    git add .\n    gti commit -m \"updated\"\n    git push\n\n<br>\n\n### **error 1번)**\n\nAccess Token error 에러가 계속 해서 발생했는데\n아래와 같은 방법으로 하니까 해결 되었다\n그러나, 나의 뻘짓으로 문제가 있었는데\n토큰 설정 해주고 push를 했는데, push는 안되고 계속 아래와 같은 문구만 반복해서 나왔다\n\n    Username for 'https://github.com': wldnjs2\n    Password for 'https://wldnjs2@github.com':\n\nusername이랑 password를 틀렸을리 없다 생각했는데,\n저기서 password는 깃허브의 password가 아닌 발급받은 토큰 시리얼넘버를 적는거였다\n고로, 복사 붙여넣기 하면 해결\n\n난 그것도 모르고 계속 깃허브 비번 쳤다 ^0^ ... 정말 화난다\n\n\n👉 [깃허브 토큰 설정](https://velog.io/@gillog/Github-MacOS-Access-Token-%EC%9D%B8%EC%A6%9D-%EB%B0%A9%EC%8B%9D-%EB%B3%80%EA%B2%BD-%EC%A0%81%EC%9A%A9-%EB%B0%A9%EB%B2%95-remote-Support-for-password-authentication-was-removed-on-August-13-2021)\n\n<br>\n\n### **error 2번)**\n    \n\n    fatal: The upstream branch of your current branch does not match\n    the name of your current branch. To push to the upstream branch\n    on the remote, use\n\n    git push origin HEAD:main\n\n    To push to the branch of the same name on the remote, use\n\n    git push origin HEAD\n \npush가 안되고 계속 위의 error가 떴다\n이때 저기 적혀있는 git push origin HEAD:main 으로 push를 하니까 \n해결되었지만, 문제는 계속 저렇게 push를 해야했다...\n\ngit push 로는 계속 저 명령어가 떴다\n\n해결방법은 아래의 코드를 쳐주면 된다\ngit push --set-upstream origin master\n\n다행히 해결되서 git push로 간단하게 push를 할 수 있게 되었다 ㅜㅜ\n\n👉 [에러 해결 블로그](https://uiyoji-journal.tistory.com/35)\n\n<br>\n\n<br>\n<br>\n","source":"_posts/macbook.md","raw":"---\ndate: 2022-01-01\ntitle: 맥북 초기 셋팅\ntags: mac, macbook\ncategories:\n- 맥북\ntoc: true\n---\n\n### **TMI**\n\n아빠가 사준신 15년도에 구입한 엘지 그램을 거의 7년동안 사용하고,\n너무 느려져서 최근에 맥북을 구매했다.\n윈도우를 사용하던 내가 처음으로 새로운 IOS 운영체제를 사용해보는거라\n설렘 반 걱정 반 이었던 것 같다.\n\n애플 기기에 관심이 무척 많아서 수원역에 애플 스토어 매장에 자주 방문에서 구경하고는 했는데\n맥북을 만져봤더니 정말 하나도 모르겠더라\n\n<img src=\"/images/macbookair/나의맥북.jpeg\" width=\"500\" height=\"500\"/>\n\n애플이 마감과 디자인 하나는 정말 좋다! 짱이뿜\n\n나는 RAM 8기가, SSD 256기가로 구입했다\n솔직히 RAM 16기가가 욕심이 났는데, 가격도 만만치 않았고\nIOS 운영체제가 나한테 잘 맞을지에 대한 확신이 없었기 때문에 깡통 옵션으로 구매하였다.\n나중에 돈 많이 벌면 프로로 바꿀거다 ㅎ \n\n<br>\n<br>\n\n### **Apple Developer**\n\n<img src=\"/images/macbookair/appledeveloper.png\" width=\"500\" height=\"500\"/>\n<br>\n위의 Apple Developer를 설치하면 xcode와 Developer가 설치된다\n설치하는데 굉장히 오랜 시간이 걸렸다. 아마 30분 정도 걸린것 같다.\n\n- xcode란?\nApple의 macOS, iOS, watchOS 및 tvOS용 소프트웨어 개발을 위한 IDE. 엑스코드라 읽으며, macOS 전용이다.\n\n\n<br>\n\n### **Nodejs**\n    🔗 https://nodejs.org/ko/\n위의 사이트에서 nodejs를 설치 할 수 있다\n\n<br>\n\n### **pycharm 설치**\npython을 사용할건 아닌데, 블로그를 좀 편하게 사용할 IDE가 필요했다\n\n<br>\n\n### **git 설치**\n\n- **Homebrew를 설치**\ngit을 설치하기 전에 먼저 Homebrew를 설치해야한다\n\n\n     🔗 https://brew.sh/\n\n위의 링크에 접속하면 방법이 나와있다. \n결론은 아래 코드를 터미널에서 입력하면 바로 설치 완료 <br>\n \n    /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n\n<br>\n\n- **git 설치**\n아래 사이트에 들어가면 깃을 설치하는 방법이 나와있지만\n아래 코드를 터미널에서 입력하면 깃 설치가 완료됨\n\n\n    🔗 http://git-scm.com/download/mac\n   \n윈도우와 다르게 터미널에서 아래 코드 한 줄 입력하면 git 설치가 끝난다\n     brew install git\n\n<br>\n\n- **git config 설정 (계정 로그인)**\n\n\n    git config global user.name \"wldnjd2\"\n    git config global user.email \"jeewon3665@naver.com\"\n\n깃을 처음 설치했을때 계정 로그인을 해줘야 하는데 위와 같이 하면 된다.\n각자의 아이디와 이메일을 적으면 된다\n\n<br>\n\n- **hexo blog 옮기기**\nblog는 git clone으로 내려받아서 할 수 있는게 아니였다 ㅜ ㅜ\n다른 컴퓨터에서 블로그를 하려면 결국 설정을 다시 해줘야하는데 \n\n아래와 같이 하면 된다\n\n    hexo init myblog (각자블로그 레포지토리 이름적기)\n    cd myblog\n    git init\n    git remote add origin http://~~ (각자의 레포 주소)\n    git clean -d -f\n    git pull --set-upstream origin main\n    npm installl\n    hexo clean\n\n마지막엔 아래의 코드로 옮겨진 블로그를 localhost:4000 에서 확인 할 수 있다\n\n    hexo g\n    hexo s\n\n<br>\n\n- **블로그 수정사항 깃허브에 올리기**\n\n블로그를 깃허브에 올리려고 아래 명령어를 실행했지만 에러가 났다..\nadd와 commit은 되는데 push가 안되었다\n\n    git add .\n    gti commit -m \"updated\"\n    git push\n\n<br>\n\n### **error 1번)**\n\nAccess Token error 에러가 계속 해서 발생했는데\n아래와 같은 방법으로 하니까 해결 되었다\n그러나, 나의 뻘짓으로 문제가 있었는데\n토큰 설정 해주고 push를 했는데, push는 안되고 계속 아래와 같은 문구만 반복해서 나왔다\n\n    Username for 'https://github.com': wldnjs2\n    Password for 'https://wldnjs2@github.com':\n\nusername이랑 password를 틀렸을리 없다 생각했는데,\n저기서 password는 깃허브의 password가 아닌 발급받은 토큰 시리얼넘버를 적는거였다\n고로, 복사 붙여넣기 하면 해결\n\n난 그것도 모르고 계속 깃허브 비번 쳤다 ^0^ ... 정말 화난다\n\n\n👉 [깃허브 토큰 설정](https://velog.io/@gillog/Github-MacOS-Access-Token-%EC%9D%B8%EC%A6%9D-%EB%B0%A9%EC%8B%9D-%EB%B3%80%EA%B2%BD-%EC%A0%81%EC%9A%A9-%EB%B0%A9%EB%B2%95-remote-Support-for-password-authentication-was-removed-on-August-13-2021)\n\n<br>\n\n### **error 2번)**\n    \n\n    fatal: The upstream branch of your current branch does not match\n    the name of your current branch. To push to the upstream branch\n    on the remote, use\n\n    git push origin HEAD:main\n\n    To push to the branch of the same name on the remote, use\n\n    git push origin HEAD\n \npush가 안되고 계속 위의 error가 떴다\n이때 저기 적혀있는 git push origin HEAD:main 으로 push를 하니까 \n해결되었지만, 문제는 계속 저렇게 push를 해야했다...\n\ngit push 로는 계속 저 명령어가 떴다\n\n해결방법은 아래의 코드를 쳐주면 된다\ngit push --set-upstream origin master\n\n다행히 해결되서 git push로 간단하게 push를 할 수 있게 되었다 ㅜㅜ\n\n👉 [에러 해결 블로그](https://uiyoji-journal.tistory.com/35)\n\n<br>\n\n<br>\n<br>\n","slug":"macbook","published":1,"updated":"2022-01-06T14:24:05.736Z","_id":"cky2hoheu001r5nrj4vyt4bi2","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"TMI\"><a href=\"#TMI\" class=\"headerlink\" title=\"TMI\"></a><strong>TMI</strong></h3><p>아빠가 사준신 15년도에 구입한 엘지 그램을 거의 7년동안 사용하고,<br>너무 느려져서 최근에 맥북을 구매했다.<br>윈도우를 사용하던 내가 처음으로 새로운 IOS 운영체제를 사용해보는거라<br>설렘 반 걱정 반 이었던 것 같다.</p>\n<p>애플 기기에 관심이 무척 많아서 수원역에 애플 스토어 매장에 자주 방문에서 구경하고는 했는데<br>맥북을 만져봤더니 정말 하나도 모르겠더라</p>\n<img src=\"/images/macbookair/나의맥북.jpeg\" width=\"500\" height=\"500\"/>\n\n<p>애플이 마감과 디자인 하나는 정말 좋다! 짱이뿜</p>\n<p>나는 RAM 8기가, SSD 256기가로 구입했다<br>솔직히 RAM 16기가가 욕심이 났는데, 가격도 만만치 않았고<br>IOS 운영체제가 나한테 잘 맞을지에 대한 확신이 없었기 때문에 깡통 옵션으로 구매하였다.<br>나중에 돈 많이 벌면 프로로 바꿀거다 ㅎ </p>\n<br>\n<br>\n\n<h3 id=\"Apple-Developer\"><a href=\"#Apple-Developer\" class=\"headerlink\" title=\"Apple Developer\"></a><strong>Apple Developer</strong></h3><img src=\"/images/macbookair/appledeveloper.png\" width=\"500\" height=\"500\"/>\n<br>\n위의 Apple Developer를 설치하면 xcode와 Developer가 설치된다\n설치하는데 굉장히 오랜 시간이 걸렸다. 아마 30분 정도 걸린것 같다.\n\n<ul>\n<li>xcode란?<br>Apple의 macOS, iOS, watchOS 및 tvOS용 소프트웨어 개발을 위한 IDE. 엑스코드라 읽으며, macOS 전용이다.</li>\n</ul>\n<br>\n\n<h3 id=\"Nodejs\"><a href=\"#Nodejs\" class=\"headerlink\" title=\"Nodejs\"></a><strong>Nodejs</strong></h3><pre><code>🔗 https://nodejs.org/ko/\n</code></pre>\n<p>위의 사이트에서 nodejs를 설치 할 수 있다</p>\n<br>\n\n<h3 id=\"pycharm-설치\"><a href=\"#pycharm-설치\" class=\"headerlink\" title=\"pycharm 설치\"></a><strong>pycharm 설치</strong></h3><p>python을 사용할건 아닌데, 블로그를 좀 편하게 사용할 IDE가 필요했다</p>\n<br>\n\n<h3 id=\"git-설치\"><a href=\"#git-설치\" class=\"headerlink\" title=\"git 설치\"></a><strong>git 설치</strong></h3><ul>\n<li><strong>Homebrew를 설치</strong><br>git을 설치하기 전에 먼저 Homebrew를 설치해야한다</li>\n</ul>\n<pre><code> 🔗 https://brew.sh/\n</code></pre>\n<p>위의 링크에 접속하면 방법이 나와있다.<br>결론은 아래 코드를 터미널에서 입력하면 바로 설치 완료 <br></p>\n<pre><code>/bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot;\n</code></pre>\n<br>\n\n<ul>\n<li><strong>git 설치</strong><br>아래 사이트에 들어가면 깃을 설치하는 방법이 나와있지만<br>아래 코드를 터미널에서 입력하면 깃 설치가 완료됨</li>\n</ul>\n<pre><code>🔗 http://git-scm.com/download/mac\n</code></pre>\n<p>윈도우와 다르게 터미널에서 아래 코드 한 줄 입력하면 git 설치가 끝난다<br>     brew install git</p>\n<br>\n\n<ul>\n<li><strong>git config 설정 (계정 로그인)</strong></li>\n</ul>\n<pre><code>git config global user.name &quot;wldnjd2&quot;\ngit config global user.email &quot;jeewon3665@naver.com&quot;\n</code></pre>\n<p>깃을 처음 설치했을때 계정 로그인을 해줘야 하는데 위와 같이 하면 된다.<br>각자의 아이디와 이메일을 적으면 된다</p>\n<br>\n\n<ul>\n<li><strong>hexo blog 옮기기</strong><br>blog는 git clone으로 내려받아서 할 수 있는게 아니였다 ㅜ ㅜ<br>다른 컴퓨터에서 블로그를 하려면 결국 설정을 다시 해줘야하는데 </li>\n</ul>\n<p>아래와 같이 하면 된다</p>\n<pre><code>hexo init myblog (각자블로그 레포지토리 이름적기)\ncd myblog\ngit init\ngit remote add origin http://~~ (각자의 레포 주소)\ngit clean -d -f\ngit pull --set-upstream origin main\nnpm installl\nhexo clean\n</code></pre>\n<p>마지막엔 아래의 코드로 옮겨진 블로그를 localhost:4000 에서 확인 할 수 있다</p>\n<pre><code>hexo g\nhexo s\n</code></pre>\n<br>\n\n<ul>\n<li><strong>블로그 수정사항 깃허브에 올리기</strong></li>\n</ul>\n<p>블로그를 깃허브에 올리려고 아래 명령어를 실행했지만 에러가 났다..<br>add와 commit은 되는데 push가 안되었다</p>\n<pre><code>git add .\ngti commit -m &quot;updated&quot;\ngit push\n</code></pre>\n<br>\n\n<h3 id=\"error-1번\"><a href=\"#error-1번\" class=\"headerlink\" title=\"error 1번)\"></a><strong>error 1번)</strong></h3><p>Access Token error 에러가 계속 해서 발생했는데<br>아래와 같은 방법으로 하니까 해결 되었다<br>그러나, 나의 뻘짓으로 문제가 있었는데<br>토큰 설정 해주고 push를 했는데, push는 안되고 계속 아래와 같은 문구만 반복해서 나왔다</p>\n<pre><code>Username for &#39;https://github.com&#39;: wldnjs2\nPassword for &#39;https://wldnjs2@github.com&#39;:\n</code></pre>\n<p>username이랑 password를 틀렸을리 없다 생각했는데,<br>저기서 password는 깃허브의 password가 아닌 발급받은 토큰 시리얼넘버를 적는거였다<br>고로, 복사 붙여넣기 하면 해결</p>\n<p>난 그것도 모르고 계속 깃허브 비번 쳤다 ^0^ … 정말 화난다</p>\n<p>👉 <a href=\"https://velog.io/@gillog/Github-MacOS-Access-Token-%EC%9D%B8%EC%A6%9D-%EB%B0%A9%EC%8B%9D-%EB%B3%80%EA%B2%BD-%EC%A0%81%EC%9A%A9-%EB%B0%A9%EB%B2%95-remote-Support-for-password-authentication-was-removed-on-August-13-2021\">깃허브 토큰 설정</a></p>\n<br>\n\n<h3 id=\"error-2번\"><a href=\"#error-2번\" class=\"headerlink\" title=\"error 2번)\"></a><strong>error 2번)</strong></h3><pre><code>fatal: The upstream branch of your current branch does not match\nthe name of your current branch. To push to the upstream branch\non the remote, use\n\ngit push origin HEAD:main\n\nTo push to the branch of the same name on the remote, use\n\ngit push origin HEAD\n</code></pre>\n<p>push가 안되고 계속 위의 error가 떴다<br>이때 저기 적혀있는 git push origin HEAD:main 으로 push를 하니까<br>해결되었지만, 문제는 계속 저렇게 push를 해야했다…</p>\n<p>git push 로는 계속 저 명령어가 떴다</p>\n<p>해결방법은 아래의 코드를 쳐주면 된다<br>git push –set-upstream origin master</p>\n<p>다행히 해결되서 git push로 간단하게 push를 할 수 있게 되었다 ㅜㅜ</p>\n<p>👉 <a href=\"https://uiyoji-journal.tistory.com/35\">에러 해결 블로그</a></p>\n<br>\n\n<br>\n<br>\n","site":{"data":{}},"excerpt":"TMI\n아빠가 사준신 15년도에 구입한 엘지 그램을 거의 7년동안 사용하고,\n너무 느려져서 최근에 맥북을 구매했다.\n윈도우를 사용하던 내가 처음으로 새로운 IOS 운영체제를 사용해보는거라\n설렘 반 걱정 반 이었던 것 같다.\n\n애플 기기에 관심이 무척 많아서 수원역에 애플 스토어 매장에 자주 방문에서 구경하고는 했는데\n맥북을 만져봤더니 정말 하나도 모르겠더라\n\n애플이 마감과 디자인 하나는 정말 좋다! 짱이뿜\n\n나는 RAM 8기가, SSD 256기가로 구입했다\n솔직히 RAM 16기가가 욕심이 났는데, 가격도 만만치 않았고\nIOS 운영체","more":"<h3 id=\"TMI\"><a href=\"#TMI\" class=\"headerlink\" title=\"TMI\"></a><strong>TMI</strong></h3><p>아빠가 사준신 15년도에 구입한 엘지 그램을 거의 7년동안 사용하고,<br>너무 느려져서 최근에 맥북을 구매했다.<br>윈도우를 사용하던 내가 처음으로 새로운 IOS 운영체제를 사용해보는거라<br>설렘 반 걱정 반 이었던 것 같다.</p>\n<p>애플 기기에 관심이 무척 많아서 수원역에 애플 스토어 매장에 자주 방문에서 구경하고는 했는데<br>맥북을 만져봤더니 정말 하나도 모르겠더라</p>\n<img src=\"/images/macbookair/나의맥북.jpeg\" width=\"500\" height=\"500\"/>\n\n<p>애플이 마감과 디자인 하나는 정말 좋다! 짱이뿜</p>\n<p>나는 RAM 8기가, SSD 256기가로 구입했다<br>솔직히 RAM 16기가가 욕심이 났는데, 가격도 만만치 않았고<br>IOS 운영체제가 나한테 잘 맞을지에 대한 확신이 없었기 때문에 깡통 옵션으로 구매하였다.<br>나중에 돈 많이 벌면 프로로 바꿀거다 ㅎ </p>\n<br>\n<br>\n\n<h3 id=\"Apple-Developer\"><a href=\"#Apple-Developer\" class=\"headerlink\" title=\"Apple Developer\"></a><strong>Apple Developer</strong></h3><img src=\"/images/macbookair/appledeveloper.png\" width=\"500\" height=\"500\"/>\n<br>\n위의 Apple Developer를 설치하면 xcode와 Developer가 설치된다\n설치하는데 굉장히 오랜 시간이 걸렸다. 아마 30분 정도 걸린것 같다.\n\n<ul>\n<li>xcode란?<br>Apple의 macOS, iOS, watchOS 및 tvOS용 소프트웨어 개발을 위한 IDE. 엑스코드라 읽으며, macOS 전용이다.</li>\n</ul>\n<br>\n\n<h3 id=\"Nodejs\"><a href=\"#Nodejs\" class=\"headerlink\" title=\"Nodejs\"></a><strong>Nodejs</strong></h3><pre><code>🔗 https://nodejs.org/ko/\n</code></pre>\n<p>위의 사이트에서 nodejs를 설치 할 수 있다</p>\n<br>\n\n<h3 id=\"pycharm-설치\"><a href=\"#pycharm-설치\" class=\"headerlink\" title=\"pycharm 설치\"></a><strong>pycharm 설치</strong></h3><p>python을 사용할건 아닌데, 블로그를 좀 편하게 사용할 IDE가 필요했다</p>\n<br>\n\n<h3 id=\"git-설치\"><a href=\"#git-설치\" class=\"headerlink\" title=\"git 설치\"></a><strong>git 설치</strong></h3><ul>\n<li><strong>Homebrew를 설치</strong><br>git을 설치하기 전에 먼저 Homebrew를 설치해야한다</li>\n</ul>\n<pre><code> 🔗 https://brew.sh/\n</code></pre>\n<p>위의 링크에 접속하면 방법이 나와있다.<br>결론은 아래 코드를 터미널에서 입력하면 바로 설치 완료 <br></p>\n<pre><code>/bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot;\n</code></pre>\n<br>\n\n<ul>\n<li><strong>git 설치</strong><br>아래 사이트에 들어가면 깃을 설치하는 방법이 나와있지만<br>아래 코드를 터미널에서 입력하면 깃 설치가 완료됨</li>\n</ul>\n<pre><code>🔗 http://git-scm.com/download/mac\n</code></pre>\n<p>윈도우와 다르게 터미널에서 아래 코드 한 줄 입력하면 git 설치가 끝난다<br>     brew install git</p>\n<br>\n\n<ul>\n<li><strong>git config 설정 (계정 로그인)</strong></li>\n</ul>\n<pre><code>git config global user.name &quot;wldnjd2&quot;\ngit config global user.email &quot;jeewon3665@naver.com&quot;\n</code></pre>\n<p>깃을 처음 설치했을때 계정 로그인을 해줘야 하는데 위와 같이 하면 된다.<br>각자의 아이디와 이메일을 적으면 된다</p>\n<br>\n\n<ul>\n<li><strong>hexo blog 옮기기</strong><br>blog는 git clone으로 내려받아서 할 수 있는게 아니였다 ㅜ ㅜ<br>다른 컴퓨터에서 블로그를 하려면 결국 설정을 다시 해줘야하는데 </li>\n</ul>\n<p>아래와 같이 하면 된다</p>\n<pre><code>hexo init myblog (각자블로그 레포지토리 이름적기)\ncd myblog\ngit init\ngit remote add origin http://~~ (각자의 레포 주소)\ngit clean -d -f\ngit pull --set-upstream origin main\nnpm installl\nhexo clean\n</code></pre>\n<p>마지막엔 아래의 코드로 옮겨진 블로그를 localhost:4000 에서 확인 할 수 있다</p>\n<pre><code>hexo g\nhexo s\n</code></pre>\n<br>\n\n<ul>\n<li><strong>블로그 수정사항 깃허브에 올리기</strong></li>\n</ul>\n<p>블로그를 깃허브에 올리려고 아래 명령어를 실행했지만 에러가 났다..<br>add와 commit은 되는데 push가 안되었다</p>\n<pre><code>git add .\ngti commit -m &quot;updated&quot;\ngit push\n</code></pre>\n<br>\n\n<h3 id=\"error-1번\"><a href=\"#error-1번\" class=\"headerlink\" title=\"error 1번)\"></a><strong>error 1번)</strong></h3><p>Access Token error 에러가 계속 해서 발생했는데<br>아래와 같은 방법으로 하니까 해결 되었다<br>그러나, 나의 뻘짓으로 문제가 있었는데<br>토큰 설정 해주고 push를 했는데, push는 안되고 계속 아래와 같은 문구만 반복해서 나왔다</p>\n<pre><code>Username for &#39;https://github.com&#39;: wldnjs2\nPassword for &#39;https://wldnjs2@github.com&#39;:\n</code></pre>\n<p>username이랑 password를 틀렸을리 없다 생각했는데,<br>저기서 password는 깃허브의 password가 아닌 발급받은 토큰 시리얼넘버를 적는거였다<br>고로, 복사 붙여넣기 하면 해결</p>\n<p>난 그것도 모르고 계속 깃허브 비번 쳤다 ^0^ … 정말 화난다</p>\n<p>👉 <a href=\"https://velog.io/@gillog/Github-MacOS-Access-Token-%EC%9D%B8%EC%A6%9D-%EB%B0%A9%EC%8B%9D-%EB%B3%80%EA%B2%BD-%EC%A0%81%EC%9A%A9-%EB%B0%A9%EB%B2%95-remote-Support-for-password-authentication-was-removed-on-August-13-2021\">깃허브 토큰 설정</a></p>\n<br>\n\n<h3 id=\"error-2번\"><a href=\"#error-2번\" class=\"headerlink\" title=\"error 2번)\"></a><strong>error 2번)</strong></h3><pre><code>fatal: The upstream branch of your current branch does not match\nthe name of your current branch. To push to the upstream branch\non the remote, use\n\ngit push origin HEAD:main\n\nTo push to the branch of the same name on the remote, use\n\ngit push origin HEAD\n</code></pre>\n<p>push가 안되고 계속 위의 error가 떴다<br>이때 저기 적혀있는 git push origin HEAD:main 으로 push를 하니까<br>해결되었지만, 문제는 계속 저렇게 push를 해야했다…</p>\n<p>git push 로는 계속 저 명령어가 떴다</p>\n<p>해결방법은 아래의 코드를 쳐주면 된다<br>git push –set-upstream origin master</p>\n<p>다행히 해결되서 git push로 간단하게 push를 할 수 있게 되었다 ㅜㅜ</p>\n<p>👉 <a href=\"https://uiyoji-journal.tistory.com/35\">에러 해결 블로그</a></p>\n<br>\n\n<br>\n<br>\n"},{"date":"2021-12-02T15:00:00.000Z","title":"내가 사용한 Pandas 메서드","toc":true,"_content":"### **Pandas란**\n---\nPandas는 데이터 조작 및 분석을 위한 Python 프로그래밍 언어 용으로 작성된 소프트웨어 라이브러이다. \n특히 숫자 테이블과 시계열 을 조작하기 위한 데이터 구조 와 연산을 제공한다. 주로 데이터 분석에 사용 된다.\n\nKaggle 대회를 준비할때 데이터 전처리에 사용했던 라이브러리이다.\n<br>\n\n### **import pandas as pd**\n---\n    import pandas as pd\n\n라이브러리를 불러주기 위한 명령어로 as 뒤의 약어는 pd로 정해 주로 호출한다.\n\n<br>\n\n### **csv 파일 불러오기**\n---\ndf = pd.read_csv(\"파일경로/파일명.csv\")\n\n    df21= pd.read_csv(\"/kaggle/input/kaggle-survey-2021/kaggle_survey_2021_responses.csv\")\n\n<br>\n\n### **isin**\n---\nlist에 존재하는 요소가 대상 dataframe에 존재하는지 반환하는 메서드\n(True와 False로 반환)\n\n    df21['Q3'].isin(['China','Taiwan', 'South Korea', 'Japan'])\n\ndf21이라는 데이터프레임의 Q3라는 컬럼값에\nChina Taiwan South Korea Japan 값이 있다면 반환한다.\n\n    EastAsia21 = ['China','Taiwan', 'South Korea', 'Japan']\n    df21_Ea = df21[df21['Q3'].isin(EastAsia21)]\n\n위와 같이 작성하게 되면 df21에서 EastAsia21의 리스트를 가진 True 값의 행들만 가진 df21_Ea의 \n데이터 프레임이 만들어짐\n<br>\n\n### **replace**\n---\n데이터의 문자열을 치환해줌, 저장된 문자열을 바꿔준다.\nex1. Q3의 컬럼값이 치환된다. \n\n    df18['Q3'].replace({'Republic of Korea':'South Korea','I do not wish to disclose my location' : 'Other'})\n    #결과값\n    1                                 United States of America\n    2                                                Indonesia\n    3                                 United States of America\n    4                                 United States of America\n    5                                                    India\n                                 ...                        \n\nex2. 위와 같지만 테이블 형식으로 데이터가 출력된다.\n\n    df18.replace({'Q3': {'Republic of Korea':'South Korea','I do not wish to disclose my location' : 'Other'}})\n\n![](/images/pandas/1.PNG)\n\nex3. 전체 데이터에서 Republic of Korea의 데이터값이 모두 South Korea로 바뀐다\n\n    df18.replace{'Republic of Korea':'South Korea'}\n\n<br>\n\n### **merge**\n---\n데이터 프레임을 합치는 메서드이다.\n\n    mer = pd.merge(df21, df20, how = 'outer', on = 'JOB' )\n\n데이터 프레임 df21과 df20을 컬럼 JOB을 기준으로 합침\n\n- on: 두개의 데이터 프레임의 기준열\n- how: 조인 방식 {'left', 'rigtht', 'inner', 'outer'}\n       기본값은 inner이다.\n- left: 왼쪽 데이터 프레임을 기준으로 조인\n- right: 오른쪽 데이터 프레임을 기준으로 조인\n- inner: 교집합을 조인\n- outer: 모든 값이 나타나도록 한다\n  (데이터 프레임에 없는 값들은 NaN으로 표시됨)\n\n\n\n<br>\n\n### **concat**\n---\nmerge와 마찬가지로 데이터 프레임을 합치는 메서드\nmerge는 DB의 join과 비슷하다면, Concat은 단순한 붙이기이다.   \n\n    con = pd.concat([df21, df20, df19, df18], axis = 0)\n\n- **axis = 0** (기본값)\n행 기준으로 데이터 프레임을 합친다\n동일한 column명을 기준으로 데이터 프레임이 위아래로 쌓아진다.\n- **axis = 1**\n열기준으로 데이터 프레임을 합친다\n데이터 프레임이 옆으로 붙는다\n\n<br>\n\n### **sort_values**\n---\n데이터를 정렬하는 메서드이다\n\n    df = df21.sort_values(by=\"Q3\", ascending=False)\n\nQ3 컬럼을 내림차순으로 정렬한다\n- ascending=False\n내림차순 정렬 \n- ascending=True\n오름차순 정렬\n<br>\n\n### **groupby**\n---\n그룹별로 데이터를 집계, 요약하는 연산자이다.\n\n    df21 = df21.groupby(['Q3'])\n\n컬럼 Q3의 데이터 값이 같은것끼리 그룹별로 묶는다\n예를들어 Q3 컬럼값으로 국가이름이 여러개 있다면, 국가별로 묶어서 볼 수 있다.\n\n<br>\n\n### **fillna**\n---\nfillna는 결측값을 특정값으로 채울수 있다.\n\n    df21.fillna(0)\n\n결측값을 0으로 채움, 문자열도 가능하다\n\n<br>\n\n### **pivot**\n---\n데이터를 재구조화하는 함수이다.\n    \nhttps://m.blog.naver.com/PostView.naver?isHttpsRedirect=true&blogId=wideeyed&logNo=221347221214\n\n\n<br>\n\n### **transpose**\n---\n데이터 프레임의 행과 열을 바꾸는 메서드이다.\n\n\n<br>\n\n\n### **to_numpy**\n---\npandas 객체를 numpy 배열 객체로 반환하는 메서드이다.\nplotly로 그래프를 그릴때 데이터 값을 넣어줘야하는데 이때 numpy를 통해 배열로 바꿔줘서 넣어주는데 사용했다.\n\n    df21['Q3'].to_numpy()\n\n결과값\n\n    array(['India', 'Indonesia', 'Pakistan', ..., 'Sweden', 'United States of America', 'India'], dtype=object)\n<br>\n\n### **tolist**\n---\ndataframe의 값을 리스트로 변환하는 메소드\n\n    df21['Q3'].tolist()\n\n결과값\n\n    ['India', 'Indonesia', 'Pakistan', ..., 'Sweden', 'United States of America', 'India']\n\n<br>\n\n\n### Ref\n---\n[위키백과](https://ko.wikipedia.org/wiki/Pandas)\n[merge](https://mizykk.tistory.com/82)\n[concat](https://mizykk.tistory.com/126)","source":"_posts/pandas_01.md","raw":"---\ndate: 2021-12-03\ntitle: 내가 사용한 Pandas 메서드\ntags: python, pandas\ncategories:\n - 파이썬\n - Python Pandas\ntoc: true\n---\n### **Pandas란**\n---\nPandas는 데이터 조작 및 분석을 위한 Python 프로그래밍 언어 용으로 작성된 소프트웨어 라이브러이다. \n특히 숫자 테이블과 시계열 을 조작하기 위한 데이터 구조 와 연산을 제공한다. 주로 데이터 분석에 사용 된다.\n\nKaggle 대회를 준비할때 데이터 전처리에 사용했던 라이브러리이다.\n<br>\n\n### **import pandas as pd**\n---\n    import pandas as pd\n\n라이브러리를 불러주기 위한 명령어로 as 뒤의 약어는 pd로 정해 주로 호출한다.\n\n<br>\n\n### **csv 파일 불러오기**\n---\ndf = pd.read_csv(\"파일경로/파일명.csv\")\n\n    df21= pd.read_csv(\"/kaggle/input/kaggle-survey-2021/kaggle_survey_2021_responses.csv\")\n\n<br>\n\n### **isin**\n---\nlist에 존재하는 요소가 대상 dataframe에 존재하는지 반환하는 메서드\n(True와 False로 반환)\n\n    df21['Q3'].isin(['China','Taiwan', 'South Korea', 'Japan'])\n\ndf21이라는 데이터프레임의 Q3라는 컬럼값에\nChina Taiwan South Korea Japan 값이 있다면 반환한다.\n\n    EastAsia21 = ['China','Taiwan', 'South Korea', 'Japan']\n    df21_Ea = df21[df21['Q3'].isin(EastAsia21)]\n\n위와 같이 작성하게 되면 df21에서 EastAsia21의 리스트를 가진 True 값의 행들만 가진 df21_Ea의 \n데이터 프레임이 만들어짐\n<br>\n\n### **replace**\n---\n데이터의 문자열을 치환해줌, 저장된 문자열을 바꿔준다.\nex1. Q3의 컬럼값이 치환된다. \n\n    df18['Q3'].replace({'Republic of Korea':'South Korea','I do not wish to disclose my location' : 'Other'})\n    #결과값\n    1                                 United States of America\n    2                                                Indonesia\n    3                                 United States of America\n    4                                 United States of America\n    5                                                    India\n                                 ...                        \n\nex2. 위와 같지만 테이블 형식으로 데이터가 출력된다.\n\n    df18.replace({'Q3': {'Republic of Korea':'South Korea','I do not wish to disclose my location' : 'Other'}})\n\n![](/images/pandas/1.PNG)\n\nex3. 전체 데이터에서 Republic of Korea의 데이터값이 모두 South Korea로 바뀐다\n\n    df18.replace{'Republic of Korea':'South Korea'}\n\n<br>\n\n### **merge**\n---\n데이터 프레임을 합치는 메서드이다.\n\n    mer = pd.merge(df21, df20, how = 'outer', on = 'JOB' )\n\n데이터 프레임 df21과 df20을 컬럼 JOB을 기준으로 합침\n\n- on: 두개의 데이터 프레임의 기준열\n- how: 조인 방식 {'left', 'rigtht', 'inner', 'outer'}\n       기본값은 inner이다.\n- left: 왼쪽 데이터 프레임을 기준으로 조인\n- right: 오른쪽 데이터 프레임을 기준으로 조인\n- inner: 교집합을 조인\n- outer: 모든 값이 나타나도록 한다\n  (데이터 프레임에 없는 값들은 NaN으로 표시됨)\n\n\n\n<br>\n\n### **concat**\n---\nmerge와 마찬가지로 데이터 프레임을 합치는 메서드\nmerge는 DB의 join과 비슷하다면, Concat은 단순한 붙이기이다.   \n\n    con = pd.concat([df21, df20, df19, df18], axis = 0)\n\n- **axis = 0** (기본값)\n행 기준으로 데이터 프레임을 합친다\n동일한 column명을 기준으로 데이터 프레임이 위아래로 쌓아진다.\n- **axis = 1**\n열기준으로 데이터 프레임을 합친다\n데이터 프레임이 옆으로 붙는다\n\n<br>\n\n### **sort_values**\n---\n데이터를 정렬하는 메서드이다\n\n    df = df21.sort_values(by=\"Q3\", ascending=False)\n\nQ3 컬럼을 내림차순으로 정렬한다\n- ascending=False\n내림차순 정렬 \n- ascending=True\n오름차순 정렬\n<br>\n\n### **groupby**\n---\n그룹별로 데이터를 집계, 요약하는 연산자이다.\n\n    df21 = df21.groupby(['Q3'])\n\n컬럼 Q3의 데이터 값이 같은것끼리 그룹별로 묶는다\n예를들어 Q3 컬럼값으로 국가이름이 여러개 있다면, 국가별로 묶어서 볼 수 있다.\n\n<br>\n\n### **fillna**\n---\nfillna는 결측값을 특정값으로 채울수 있다.\n\n    df21.fillna(0)\n\n결측값을 0으로 채움, 문자열도 가능하다\n\n<br>\n\n### **pivot**\n---\n데이터를 재구조화하는 함수이다.\n    \nhttps://m.blog.naver.com/PostView.naver?isHttpsRedirect=true&blogId=wideeyed&logNo=221347221214\n\n\n<br>\n\n### **transpose**\n---\n데이터 프레임의 행과 열을 바꾸는 메서드이다.\n\n\n<br>\n\n\n### **to_numpy**\n---\npandas 객체를 numpy 배열 객체로 반환하는 메서드이다.\nplotly로 그래프를 그릴때 데이터 값을 넣어줘야하는데 이때 numpy를 통해 배열로 바꿔줘서 넣어주는데 사용했다.\n\n    df21['Q3'].to_numpy()\n\n결과값\n\n    array(['India', 'Indonesia', 'Pakistan', ..., 'Sweden', 'United States of America', 'India'], dtype=object)\n<br>\n\n### **tolist**\n---\ndataframe의 값을 리스트로 변환하는 메소드\n\n    df21['Q3'].tolist()\n\n결과값\n\n    ['India', 'Indonesia', 'Pakistan', ..., 'Sweden', 'United States of America', 'India']\n\n<br>\n\n\n### Ref\n---\n[위키백과](https://ko.wikipedia.org/wiki/Pandas)\n[merge](https://mizykk.tistory.com/82)\n[concat](https://mizykk.tistory.com/126)","slug":"pandas-01","published":1,"updated":"2022-01-03T12:20:08.049Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cky2hoheu001u5nrj10ca95iy","content":"<h3 id=\"Pandas란\"><a href=\"#Pandas란\" class=\"headerlink\" title=\"Pandas란\"></a><strong>Pandas란</strong></h3><hr>\n<p>Pandas는 데이터 조작 및 분석을 위한 Python 프로그래밍 언어 용으로 작성된 소프트웨어 라이브러이다.<br>특히 숫자 테이블과 시계열 을 조작하기 위한 데이터 구조 와 연산을 제공한다. 주로 데이터 분석에 사용 된다.</p>\n<p>Kaggle 대회를 준비할때 데이터 전처리에 사용했던 라이브러리이다.<br><br></p>\n<h3 id=\"import-pandas-as-pd\"><a href=\"#import-pandas-as-pd\" class=\"headerlink\" title=\"import pandas as pd\"></a><strong>import pandas as pd</strong></h3><hr>\n<pre><code>import pandas as pd\n</code></pre>\n<p>라이브러리를 불러주기 위한 명령어로 as 뒤의 약어는 pd로 정해 주로 호출한다.</p>\n<br>\n\n<h3 id=\"csv-파일-불러오기\"><a href=\"#csv-파일-불러오기\" class=\"headerlink\" title=\"csv 파일 불러오기\"></a><strong>csv 파일 불러오기</strong></h3><hr>\n<p>df = pd.read_csv(“파일경로/파일명.csv”)</p>\n<pre><code>df21= pd.read_csv(&quot;/kaggle/input/kaggle-survey-2021/kaggle_survey_2021_responses.csv&quot;)\n</code></pre>\n<br>\n\n<h3 id=\"isin\"><a href=\"#isin\" class=\"headerlink\" title=\"isin\"></a><strong>isin</strong></h3><hr>\n<p>list에 존재하는 요소가 대상 dataframe에 존재하는지 반환하는 메서드<br>(True와 False로 반환)</p>\n<pre><code>df21[&#39;Q3&#39;].isin([&#39;China&#39;,&#39;Taiwan&#39;, &#39;South Korea&#39;, &#39;Japan&#39;])\n</code></pre>\n<p>df21이라는 데이터프레임의 Q3라는 컬럼값에<br>China Taiwan South Korea Japan 값이 있다면 반환한다.</p>\n<pre><code>EastAsia21 = [&#39;China&#39;,&#39;Taiwan&#39;, &#39;South Korea&#39;, &#39;Japan&#39;]\ndf21_Ea = df21[df21[&#39;Q3&#39;].isin(EastAsia21)]\n</code></pre>\n<p>위와 같이 작성하게 되면 df21에서 EastAsia21의 리스트를 가진 True 값의 행들만 가진 df21_Ea의<br>데이터 프레임이 만들어짐<br><br></p>\n<h3 id=\"replace\"><a href=\"#replace\" class=\"headerlink\" title=\"replace\"></a><strong>replace</strong></h3><hr>\n<p>데이터의 문자열을 치환해줌, 저장된 문자열을 바꿔준다.<br>ex1. Q3의 컬럼값이 치환된다. </p>\n<pre><code>df18[&#39;Q3&#39;].replace(&#123;&#39;Republic of Korea&#39;:&#39;South Korea&#39;,&#39;I do not wish to disclose my location&#39; : &#39;Other&#39;&#125;)\n#결과값\n1                                 United States of America\n2                                                Indonesia\n3                                 United States of America\n4                                 United States of America\n5                                                    India\n                             ...                        \n</code></pre>\n<p>ex2. 위와 같지만 테이블 형식으로 데이터가 출력된다.</p>\n<pre><code>df18.replace(&#123;&#39;Q3&#39;: &#123;&#39;Republic of Korea&#39;:&#39;South Korea&#39;,&#39;I do not wish to disclose my location&#39; : &#39;Other&#39;&#125;&#125;)\n</code></pre>\n<p><img src=\"/images/pandas/1.PNG\"></p>\n<p>ex3. 전체 데이터에서 Republic of Korea의 데이터값이 모두 South Korea로 바뀐다</p>\n<pre><code>df18.replace&#123;&#39;Republic of Korea&#39;:&#39;South Korea&#39;&#125;\n</code></pre>\n<br>\n\n<h3 id=\"merge\"><a href=\"#merge\" class=\"headerlink\" title=\"merge\"></a><strong>merge</strong></h3><hr>\n<p>데이터 프레임을 합치는 메서드이다.</p>\n<pre><code>mer = pd.merge(df21, df20, how = &#39;outer&#39;, on = &#39;JOB&#39; )\n</code></pre>\n<p>데이터 프레임 df21과 df20을 컬럼 JOB을 기준으로 합침</p>\n<ul>\n<li>on: 두개의 데이터 프레임의 기준열</li>\n<li>how: 조인 방식 {‘left’, ‘rigtht’, ‘inner’, ‘outer’}<pre><code> 기본값은 inner이다.\n</code></pre>\n</li>\n<li>left: 왼쪽 데이터 프레임을 기준으로 조인</li>\n<li>right: 오른쪽 데이터 프레임을 기준으로 조인</li>\n<li>inner: 교집합을 조인</li>\n<li>outer: 모든 값이 나타나도록 한다<br>(데이터 프레임에 없는 값들은 NaN으로 표시됨)</li>\n</ul>\n<br>\n\n<h3 id=\"concat\"><a href=\"#concat\" class=\"headerlink\" title=\"concat\"></a><strong>concat</strong></h3><hr>\n<p>merge와 마찬가지로 데이터 프레임을 합치는 메서드<br>merge는 DB의 join과 비슷하다면, Concat은 단순한 붙이기이다.   </p>\n<pre><code>con = pd.concat([df21, df20, df19, df18], axis = 0)\n</code></pre>\n<ul>\n<li><strong>axis = 0</strong> (기본값)<br>행 기준으로 데이터 프레임을 합친다<br>동일한 column명을 기준으로 데이터 프레임이 위아래로 쌓아진다.</li>\n<li><strong>axis = 1</strong><br>열기준으로 데이터 프레임을 합친다<br>데이터 프레임이 옆으로 붙는다</li>\n</ul>\n<br>\n\n<h3 id=\"sort-values\"><a href=\"#sort-values\" class=\"headerlink\" title=\"sort_values\"></a><strong>sort_values</strong></h3><hr>\n<p>데이터를 정렬하는 메서드이다</p>\n<pre><code>df = df21.sort_values(by=&quot;Q3&quot;, ascending=False)\n</code></pre>\n<p>Q3 컬럼을 내림차순으로 정렬한다</p>\n<ul>\n<li>ascending=False<br>내림차순 정렬 </li>\n<li>ascending=True<br>오름차순 정렬<br></li>\n</ul>\n<h3 id=\"groupby\"><a href=\"#groupby\" class=\"headerlink\" title=\"groupby\"></a><strong>groupby</strong></h3><hr>\n<p>그룹별로 데이터를 집계, 요약하는 연산자이다.</p>\n<pre><code>df21 = df21.groupby([&#39;Q3&#39;])\n</code></pre>\n<p>컬럼 Q3의 데이터 값이 같은것끼리 그룹별로 묶는다<br>예를들어 Q3 컬럼값으로 국가이름이 여러개 있다면, 국가별로 묶어서 볼 수 있다.</p>\n<br>\n\n<h3 id=\"fillna\"><a href=\"#fillna\" class=\"headerlink\" title=\"fillna\"></a><strong>fillna</strong></h3><hr>\n<p>fillna는 결측값을 특정값으로 채울수 있다.</p>\n<pre><code>df21.fillna(0)\n</code></pre>\n<p>결측값을 0으로 채움, 문자열도 가능하다</p>\n<br>\n\n<h3 id=\"pivot\"><a href=\"#pivot\" class=\"headerlink\" title=\"pivot\"></a><strong>pivot</strong></h3><hr>\n<p>데이터를 재구조화하는 함수이다.</p>\n<p><a href=\"https://m.blog.naver.com/PostView.naver?isHttpsRedirect=true&amp;blogId=wideeyed&amp;logNo=221347221214\">https://m.blog.naver.com/PostView.naver?isHttpsRedirect=true&amp;blogId=wideeyed&amp;logNo=221347221214</a></p>\n<br>\n\n<h3 id=\"transpose\"><a href=\"#transpose\" class=\"headerlink\" title=\"transpose\"></a><strong>transpose</strong></h3><hr>\n<p>데이터 프레임의 행과 열을 바꾸는 메서드이다.</p>\n<br>\n\n\n<h3 id=\"to-numpy\"><a href=\"#to-numpy\" class=\"headerlink\" title=\"to_numpy\"></a><strong>to_numpy</strong></h3><hr>\n<p>pandas 객체를 numpy 배열 객체로 반환하는 메서드이다.<br>plotly로 그래프를 그릴때 데이터 값을 넣어줘야하는데 이때 numpy를 통해 배열로 바꿔줘서 넣어주는데 사용했다.</p>\n<pre><code>df21[&#39;Q3&#39;].to_numpy()\n</code></pre>\n<p>결과값</p>\n<pre><code>array([&#39;India&#39;, &#39;Indonesia&#39;, &#39;Pakistan&#39;, ..., &#39;Sweden&#39;, &#39;United States of America&#39;, &#39;India&#39;], dtype=object)\n</code></pre>\n<br>\n\n<h3 id=\"tolist\"><a href=\"#tolist\" class=\"headerlink\" title=\"tolist\"></a><strong>tolist</strong></h3><hr>\n<p>dataframe의 값을 리스트로 변환하는 메소드</p>\n<pre><code>df21[&#39;Q3&#39;].tolist()\n</code></pre>\n<p>결과값</p>\n<pre><code>[&#39;India&#39;, &#39;Indonesia&#39;, &#39;Pakistan&#39;, ..., &#39;Sweden&#39;, &#39;United States of America&#39;, &#39;India&#39;]\n</code></pre>\n<br>\n\n\n<h3 id=\"Ref\"><a href=\"#Ref\" class=\"headerlink\" title=\"Ref\"></a>Ref</h3><hr>\n<p><a href=\"https://ko.wikipedia.org/wiki/Pandas\">위키백과</a><br><a href=\"https://mizykk.tistory.com/82\">merge</a><br><a href=\"https://mizykk.tistory.com/126\">concat</a></p>\n","site":{"data":{}},"excerpt":"Pandas란\n\n\n\nPandas는 데이터 조작 및 분석을 위한 Python 프로그래밍 언어 용으로 작성된 소프트웨어 라이브러이다.\n특히 숫자 테이블과 시계열 을 조작하기 위한 데이터 구조 와 연산을 제공한다. 주로 데이터 분석에 사용 된다.\n\nKaggle 대회를 준비할때 데이터 전처리에 사용했던 라이브러리이다.\n\n\n\nimport pandas as pd\n\n\n\nimport pandas as pd\n\n\n라이브러리를 불러주기 위한 명령어로 as 뒤의 약어는 pd로 정해 주로 호출한다.\n\n\ncsv 파일 불러오기\n\n\n\ndf = pd.read_c","more":"<h3 id=\"Pandas란\"><a href=\"#Pandas란\" class=\"headerlink\" title=\"Pandas란\"></a><strong>Pandas란</strong></h3><hr>\n<p>Pandas는 데이터 조작 및 분석을 위한 Python 프로그래밍 언어 용으로 작성된 소프트웨어 라이브러이다.<br>특히 숫자 테이블과 시계열 을 조작하기 위한 데이터 구조 와 연산을 제공한다. 주로 데이터 분석에 사용 된다.</p>\n<p>Kaggle 대회를 준비할때 데이터 전처리에 사용했던 라이브러리이다.<br><br></p>\n<h3 id=\"import-pandas-as-pd\"><a href=\"#import-pandas-as-pd\" class=\"headerlink\" title=\"import pandas as pd\"></a><strong>import pandas as pd</strong></h3><hr>\n<pre><code>import pandas as pd\n</code></pre>\n<p>라이브러리를 불러주기 위한 명령어로 as 뒤의 약어는 pd로 정해 주로 호출한다.</p>\n<br>\n\n<h3 id=\"csv-파일-불러오기\"><a href=\"#csv-파일-불러오기\" class=\"headerlink\" title=\"csv 파일 불러오기\"></a><strong>csv 파일 불러오기</strong></h3><hr>\n<p>df = pd.read_csv(“파일경로/파일명.csv”)</p>\n<pre><code>df21= pd.read_csv(&quot;/kaggle/input/kaggle-survey-2021/kaggle_survey_2021_responses.csv&quot;)\n</code></pre>\n<br>\n\n<h3 id=\"isin\"><a href=\"#isin\" class=\"headerlink\" title=\"isin\"></a><strong>isin</strong></h3><hr>\n<p>list에 존재하는 요소가 대상 dataframe에 존재하는지 반환하는 메서드<br>(True와 False로 반환)</p>\n<pre><code>df21[&#39;Q3&#39;].isin([&#39;China&#39;,&#39;Taiwan&#39;, &#39;South Korea&#39;, &#39;Japan&#39;])\n</code></pre>\n<p>df21이라는 데이터프레임의 Q3라는 컬럼값에<br>China Taiwan South Korea Japan 값이 있다면 반환한다.</p>\n<pre><code>EastAsia21 = [&#39;China&#39;,&#39;Taiwan&#39;, &#39;South Korea&#39;, &#39;Japan&#39;]\ndf21_Ea = df21[df21[&#39;Q3&#39;].isin(EastAsia21)]\n</code></pre>\n<p>위와 같이 작성하게 되면 df21에서 EastAsia21의 리스트를 가진 True 값의 행들만 가진 df21_Ea의<br>데이터 프레임이 만들어짐<br><br></p>\n<h3 id=\"replace\"><a href=\"#replace\" class=\"headerlink\" title=\"replace\"></a><strong>replace</strong></h3><hr>\n<p>데이터의 문자열을 치환해줌, 저장된 문자열을 바꿔준다.<br>ex1. Q3의 컬럼값이 치환된다. </p>\n<pre><code>df18[&#39;Q3&#39;].replace(&#123;&#39;Republic of Korea&#39;:&#39;South Korea&#39;,&#39;I do not wish to disclose my location&#39; : &#39;Other&#39;&#125;)\n#결과값\n1                                 United States of America\n2                                                Indonesia\n3                                 United States of America\n4                                 United States of America\n5                                                    India\n                             ...                        \n</code></pre>\n<p>ex2. 위와 같지만 테이블 형식으로 데이터가 출력된다.</p>\n<pre><code>df18.replace(&#123;&#39;Q3&#39;: &#123;&#39;Republic of Korea&#39;:&#39;South Korea&#39;,&#39;I do not wish to disclose my location&#39; : &#39;Other&#39;&#125;&#125;)\n</code></pre>\n<p><img src=\"/images/pandas/1.PNG\"></p>\n<p>ex3. 전체 데이터에서 Republic of Korea의 데이터값이 모두 South Korea로 바뀐다</p>\n<pre><code>df18.replace&#123;&#39;Republic of Korea&#39;:&#39;South Korea&#39;&#125;\n</code></pre>\n<br>\n\n<h3 id=\"merge\"><a href=\"#merge\" class=\"headerlink\" title=\"merge\"></a><strong>merge</strong></h3><hr>\n<p>데이터 프레임을 합치는 메서드이다.</p>\n<pre><code>mer = pd.merge(df21, df20, how = &#39;outer&#39;, on = &#39;JOB&#39; )\n</code></pre>\n<p>데이터 프레임 df21과 df20을 컬럼 JOB을 기준으로 합침</p>\n<ul>\n<li>on: 두개의 데이터 프레임의 기준열</li>\n<li>how: 조인 방식 {‘left’, ‘rigtht’, ‘inner’, ‘outer’}<pre><code> 기본값은 inner이다.\n</code></pre>\n</li>\n<li>left: 왼쪽 데이터 프레임을 기준으로 조인</li>\n<li>right: 오른쪽 데이터 프레임을 기준으로 조인</li>\n<li>inner: 교집합을 조인</li>\n<li>outer: 모든 값이 나타나도록 한다<br>(데이터 프레임에 없는 값들은 NaN으로 표시됨)</li>\n</ul>\n<br>\n\n<h3 id=\"concat\"><a href=\"#concat\" class=\"headerlink\" title=\"concat\"></a><strong>concat</strong></h3><hr>\n<p>merge와 마찬가지로 데이터 프레임을 합치는 메서드<br>merge는 DB의 join과 비슷하다면, Concat은 단순한 붙이기이다.   </p>\n<pre><code>con = pd.concat([df21, df20, df19, df18], axis = 0)\n</code></pre>\n<ul>\n<li><strong>axis = 0</strong> (기본값)<br>행 기준으로 데이터 프레임을 합친다<br>동일한 column명을 기준으로 데이터 프레임이 위아래로 쌓아진다.</li>\n<li><strong>axis = 1</strong><br>열기준으로 데이터 프레임을 합친다<br>데이터 프레임이 옆으로 붙는다</li>\n</ul>\n<br>\n\n<h3 id=\"sort-values\"><a href=\"#sort-values\" class=\"headerlink\" title=\"sort_values\"></a><strong>sort_values</strong></h3><hr>\n<p>데이터를 정렬하는 메서드이다</p>\n<pre><code>df = df21.sort_values(by=&quot;Q3&quot;, ascending=False)\n</code></pre>\n<p>Q3 컬럼을 내림차순으로 정렬한다</p>\n<ul>\n<li>ascending=False<br>내림차순 정렬 </li>\n<li>ascending=True<br>오름차순 정렬<br></li>\n</ul>\n<h3 id=\"groupby\"><a href=\"#groupby\" class=\"headerlink\" title=\"groupby\"></a><strong>groupby</strong></h3><hr>\n<p>그룹별로 데이터를 집계, 요약하는 연산자이다.</p>\n<pre><code>df21 = df21.groupby([&#39;Q3&#39;])\n</code></pre>\n<p>컬럼 Q3의 데이터 값이 같은것끼리 그룹별로 묶는다<br>예를들어 Q3 컬럼값으로 국가이름이 여러개 있다면, 국가별로 묶어서 볼 수 있다.</p>\n<br>\n\n<h3 id=\"fillna\"><a href=\"#fillna\" class=\"headerlink\" title=\"fillna\"></a><strong>fillna</strong></h3><hr>\n<p>fillna는 결측값을 특정값으로 채울수 있다.</p>\n<pre><code>df21.fillna(0)\n</code></pre>\n<p>결측값을 0으로 채움, 문자열도 가능하다</p>\n<br>\n\n<h3 id=\"pivot\"><a href=\"#pivot\" class=\"headerlink\" title=\"pivot\"></a><strong>pivot</strong></h3><hr>\n<p>데이터를 재구조화하는 함수이다.</p>\n<p><a href=\"https://m.blog.naver.com/PostView.naver?isHttpsRedirect=true&amp;blogId=wideeyed&amp;logNo=221347221214\">https://m.blog.naver.com/PostView.naver?isHttpsRedirect=true&amp;blogId=wideeyed&amp;logNo=221347221214</a></p>\n<br>\n\n<h3 id=\"transpose\"><a href=\"#transpose\" class=\"headerlink\" title=\"transpose\"></a><strong>transpose</strong></h3><hr>\n<p>데이터 프레임의 행과 열을 바꾸는 메서드이다.</p>\n<br>\n\n\n<h3 id=\"to-numpy\"><a href=\"#to-numpy\" class=\"headerlink\" title=\"to_numpy\"></a><strong>to_numpy</strong></h3><hr>\n<p>pandas 객체를 numpy 배열 객체로 반환하는 메서드이다.<br>plotly로 그래프를 그릴때 데이터 값을 넣어줘야하는데 이때 numpy를 통해 배열로 바꿔줘서 넣어주는데 사용했다.</p>\n<pre><code>df21[&#39;Q3&#39;].to_numpy()\n</code></pre>\n<p>결과값</p>\n<pre><code>array([&#39;India&#39;, &#39;Indonesia&#39;, &#39;Pakistan&#39;, ..., &#39;Sweden&#39;, &#39;United States of America&#39;, &#39;India&#39;], dtype=object)\n</code></pre>\n<br>\n\n<h3 id=\"tolist\"><a href=\"#tolist\" class=\"headerlink\" title=\"tolist\"></a><strong>tolist</strong></h3><hr>\n<p>dataframe의 값을 리스트로 변환하는 메소드</p>\n<pre><code>df21[&#39;Q3&#39;].tolist()\n</code></pre>\n<p>결과값</p>\n<pre><code>[&#39;India&#39;, &#39;Indonesia&#39;, &#39;Pakistan&#39;, ..., &#39;Sweden&#39;, &#39;United States of America&#39;, &#39;India&#39;]\n</code></pre>\n<br>\n\n\n<h3 id=\"Ref\"><a href=\"#Ref\" class=\"headerlink\" title=\"Ref\"></a>Ref</h3><hr>\n<p><a href=\"https://ko.wikipedia.org/wiki/Pandas\">위키백과</a><br><a href=\"https://mizykk.tistory.com/82\">merge</a><br><a href=\"https://mizykk.tistory.com/126\">concat</a></p>\n"},{"title":"Kaggle Competition(3)","date":"2021-11-15T15:00:00.000Z","toc":true,"widgets":null,"_content":"\n### \n\n\n### **라이브러리 불러오기 & 캐글 데이터 불러오기**\n---\n\n```python\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pylab as plt\n\nimport plotly.io as pio\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.figure_factory as ff\nfrom plotly.subplots import make_subplots\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\npio.templates.default = \"none\"\n# import plotly.offline as py\n# py.offline.init_notebook_mode()\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n```\n\n\n```python\ndf17= pd.read_csv(\"/kaggle/input/kaggle-survey-2017/multipleChoiceResponses.csv\", encoding=\"ISO-8859-1\")\ndf18= pd.read_csv(\"/kaggle/input/kaggle-survey-2018/multipleChoiceResponses.csv\", )\ndf19= pd.read_csv(\"/kaggle/input/kaggle-survey-2019/multiple_choice_responses.csv\", )\ndf20= pd.read_csv(\"/kaggle/input/kaggle-survey-2020/kaggle_survey_2020_responses.csv\", )\ndf21= pd.read_csv(\"/kaggle/input/kaggle-survey-2021/kaggle_survey_2021_responses.csv\", )\n```\n<br>\n\n### **데이터 Grouping**\n---\n\n\n```python\n## East Asia에는 대한민국, 일본, 중국, 타이완, 몽골, 북조선 총 6개의 국가가 속해 있다. \n\nEastAsia17 = ['China',\"People 's Republic of China\", 'Taiwan', 'South Korea', 'Japan']\nEastAsia18 = ['China', 'South Korea', 'Japan', 'Republic of Korea'] \nEastAsia19 = ['China','Taiwan', 'South Korea', 'Japan', 'Republic of Korea']\nEastAsia20 = ['China','Taiwan', 'South Korea', 'Japan', 'Republic of Korea']\nEastAsia21 = ['China','Taiwan', 'South Korea', 'Japan']\nEastAsia = ['Republic of Korea','China','Taiwan', 'South Korea', 'Japan', \"People 's Republic of China\" ]\n\n#21년\ndf21_Ea = df21[df21['Q3'].isin(EastAsia)]\ndf21_Wo = df21[~df21['Q3'].isin(EastAsia )]\n\n##  동아시아 국가를 제외한 국가들을 region 열의 데이터 값을 World 로 바꿔줌\ndf21['region']=[\"EastAsia\" if x in EastAsia \n                            else \"World\" for x in df21['Q3']]\n\n#20년\ndf20_Ea = df20[df20['Q3'].isin(EastAsia)]\ndf20_Wo = df20[~df20['Q3'].isin(EastAsia )]\ndf20['region']=[\"EastAsia\" if x in EastAsia \n                            else \"World\" for x in df20['Q3']]\n\n#19년\ndf19_Ea = df19[df19['Q3'].isin(EastAsia)]\ndf19_Wo = df19[~df19['Q3'].isin(EastAsia )]\ndf19['region']=[\"EastAsia\" if x in EastAsia\n                            else \"World\" for x in df19['Q3']]\n\n#18년\ndf18_Ea = df18[df18['Q3'].isin(EastAsia)]\ndf18_Wo = df18[~df18['Q3'].isin(EastAsia )]\ndf18['region']=[\"EastAsia\" if x in EastAsia \n                            else \"World\" for x in df18['Q3']]\n\n#17년\ndf17_Ea = df17[df17['Country'].isin(EastAsia)]\ndf17_Wo = df17[~df17['Country'].isin(EastAsia )]\ndf17['region']=[\"EastAsia\" if x in EastAsia \n                            else \"World\" for x in df17['Country']]\n```\n<br>\n\n### **Heatmap**\n---\n\n\n```python\n# 21년 Business Analyst가 직업인 국가별 인원수\ndf21_BA = df21[df21['Q5'] == 'Business Analyst']\ndf21_BA = df21_BA['Q3'].value_counts().to_frame().reset_index().rename(columns={'index':'Country', 'Q3':'Business Analyst'})\ndf21_BA\n\n# 21년 Data Analyst가 직업인 국가별 인원수\ndf21_DA = df21[df21['Q5'] == 'Data Analyst']\ndf21_DA = df21_DA['Q3'].value_counts().to_frame().reset_index().rename(columns={'index':'Country', 'Q3':'Data Analyst'})\ndf21_DA\n\n# 21년 Data Engineer가 직업인 국가별 인원수\ndf21_DE = df21[df21['Q5'] == 'Data Engineer']\ndf21_DE = df21_DE['Q3'].value_counts().to_frame().reset_index().rename(columns={'index':'Country', 'Q3':'Data Engineer'})\ndf21_DE\n\n# 21년 Data Scientist가 직업인 국가별 인원수\ndf21_DS = df21[df21['Q5'] == 'Data Scientist']\ndf21_DS = df21_DS['Q3'].value_counts().to_frame().reset_index().rename(columns={'index':'Country', 'Q3':'Data Scientist'})\ndf21_DS\n```\n![](/images/mykaggle3/1.PNG)\n<br>\n\n\n```python\nmerge = pd.merge(df21_BA, df21_DA)\njob=merge.loc[:,[\"Business Analyst\",\"Data Analyst\"]]\njob.columns.tolist()\n```\n    ['B]usiness Analyst', 'Data Analyst]\n<br>\n\n```python\nmerge\n```\n![](/images/mykaggle3/2.PNG)\n<br>\n\n\n```python\nmerge.to_numpy().reshape(-1)\n```\n![](/images/mykaggle3/3.PNG)\n<br>\n\n\n```python\nmerge.columns.tolist()\n#merge.Country.tolist()\n```\n    ['Country', Business Analyst', 'Data Analyst]\n<br>\n\n```python\nmerge.to_numpy()\n```\n![](/images/mykaggle3/4.PNG)\n<br>\n\n\n```python\n# 21년 Data Engineer가 직업인 국가별 인원수\ndf21_DE = df21[df21['Q5'] == 'Data Engineer']\ndf21_DE = df21_DE['Q3'].value_counts().to_frame().reset_index().rename(columns={'index':'Country', 'Q3':'Data Engineer'})\ndf21_DE.head()\n```\n![](/images/mykaggle3/5.PNG)\n<br>\n\n\n```python\nmerge.iloc[:,[1,2]].to_numpy()\n```\n![](/images/mykaggle3/6.PNG)\n<br>\n\n\n```python\n# x축직업\n# y축국가\nfig = go.Figure(data=go.Heatmap(\n                   z=merge.iloc[:,[1,2]].to_numpy(),\n                   x=job.columns.tolist(),\n                   y = merge.Country.tolist(),\n                   hoverongaps = True,\n     coloraxis = \"coloraxis\"\n    \n                ))\n\nfig.update_layout(title_text='<i><b>Heatmap</b></i>',\n                  xaxis = dict(title='x'),\n                  yaxis = dict(title='x')\n                 )\n# add custom xaxis title\nfig.add_annotation(dict(font=dict(color=\"black\",size=14),\n                        x=0.5,\n                        y=-0.15,\n                        showarrow=False,\n                        text=\"\",\n                        xref=\"paper\",\n                        yref=\"paper\"))\n\n# add custom yaxis title\nfig.add_annotation(dict(font=dict(color=\"black\",size=14),\n                        x=-0.35,\n                        y=0.5,\n                        showarrow=False,\n                        text=\"\",\n                        textangle=-90,\n                        xref=\"paper\",\n                        yref=\"paper\"))\n\n# adjust margins to make room for yaxis title\nfig.update_layout(margin=dict(t=50, l=200))\n\n# add colorbar\nfig['data'][0]['showscale'] = True\n\nfig.show()\n\n```\n![](/images/mykaggle3/7.png)\n<br>\n\n\n\n```python\nmerge.iloc[0,[1,2]].values.tolist()\n```\n\n\n```python\nmerge['Business Analyst'].values.tolist()\n```\n\n\n```python\n#21년 직업 종류\ndf21_job = df21['Q5'].value_counts().to_frame().reset_index().rename(columns={'index':'Job', 'Q5':'CNT'})\ndf21_job = df21_job['Job'].to_frame()\n```\n\n### **데이터 전처리**\n---\n\n\n```python\n#data 확인\n\nData_Analyst =['Data Analyst','Data Engineer','Data Miner,Information technology', 'networking, or system ...','Predictive Modeler' ]\nData_Engineer =['A business discipline (accounting, economics, ...', 'Business Analyst',\n                'Statistician', 'Mathematics or statistics', 'Data Scientist', 'Environmental science or geology', \n                'Humanities', 'Machine Learning Engineer', 'Medical or life sciences (biology, chemistry, ...', \n                'Physics or astronomy', 'Research Scientist', 'Researcher', 'Scientist/Researcher', \n                'Social sciences (anthropology, psychology, soc...','Software Developer/Software Engineer']\nDeveloper=['Developer Relations/Advocacy','Engineer','Engineering (non-computer focused)',\n           'Programmer','Software Engineer', 'Computer Scientist','Computer science (software engineering, etc.)', \n           'Fine arts or performing arts','Product Manager', \n           'Product/Project Manager','Program/Project Manager','DBA/Database Engineer']\nNot_Employeed =['Currently not employed', 'Not employed', 'Student']\nOthers = ['I never declared a major', 'Other']\n```\n","source":"_posts/mykaggle3_Heatmap.md","raw":"\n---\ntitle: Kaggle Competition(3)\ndate: 2021-11-16\ntags: kaggle, plotly\ntoc: true\ncategories: \n- kaggle 필사\nwidgets: null\n---\n\n### \n\n\n### **라이브러리 불러오기 & 캐글 데이터 불러오기**\n---\n\n```python\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pylab as plt\n\nimport plotly.io as pio\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.figure_factory as ff\nfrom plotly.subplots import make_subplots\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\npio.templates.default = \"none\"\n# import plotly.offline as py\n# py.offline.init_notebook_mode()\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n```\n\n\n```python\ndf17= pd.read_csv(\"/kaggle/input/kaggle-survey-2017/multipleChoiceResponses.csv\", encoding=\"ISO-8859-1\")\ndf18= pd.read_csv(\"/kaggle/input/kaggle-survey-2018/multipleChoiceResponses.csv\", )\ndf19= pd.read_csv(\"/kaggle/input/kaggle-survey-2019/multiple_choice_responses.csv\", )\ndf20= pd.read_csv(\"/kaggle/input/kaggle-survey-2020/kaggle_survey_2020_responses.csv\", )\ndf21= pd.read_csv(\"/kaggle/input/kaggle-survey-2021/kaggle_survey_2021_responses.csv\", )\n```\n<br>\n\n### **데이터 Grouping**\n---\n\n\n```python\n## East Asia에는 대한민국, 일본, 중국, 타이완, 몽골, 북조선 총 6개의 국가가 속해 있다. \n\nEastAsia17 = ['China',\"People 's Republic of China\", 'Taiwan', 'South Korea', 'Japan']\nEastAsia18 = ['China', 'South Korea', 'Japan', 'Republic of Korea'] \nEastAsia19 = ['China','Taiwan', 'South Korea', 'Japan', 'Republic of Korea']\nEastAsia20 = ['China','Taiwan', 'South Korea', 'Japan', 'Republic of Korea']\nEastAsia21 = ['China','Taiwan', 'South Korea', 'Japan']\nEastAsia = ['Republic of Korea','China','Taiwan', 'South Korea', 'Japan', \"People 's Republic of China\" ]\n\n#21년\ndf21_Ea = df21[df21['Q3'].isin(EastAsia)]\ndf21_Wo = df21[~df21['Q3'].isin(EastAsia )]\n\n##  동아시아 국가를 제외한 국가들을 region 열의 데이터 값을 World 로 바꿔줌\ndf21['region']=[\"EastAsia\" if x in EastAsia \n                            else \"World\" for x in df21['Q3']]\n\n#20년\ndf20_Ea = df20[df20['Q3'].isin(EastAsia)]\ndf20_Wo = df20[~df20['Q3'].isin(EastAsia )]\ndf20['region']=[\"EastAsia\" if x in EastAsia \n                            else \"World\" for x in df20['Q3']]\n\n#19년\ndf19_Ea = df19[df19['Q3'].isin(EastAsia)]\ndf19_Wo = df19[~df19['Q3'].isin(EastAsia )]\ndf19['region']=[\"EastAsia\" if x in EastAsia\n                            else \"World\" for x in df19['Q3']]\n\n#18년\ndf18_Ea = df18[df18['Q3'].isin(EastAsia)]\ndf18_Wo = df18[~df18['Q3'].isin(EastAsia )]\ndf18['region']=[\"EastAsia\" if x in EastAsia \n                            else \"World\" for x in df18['Q3']]\n\n#17년\ndf17_Ea = df17[df17['Country'].isin(EastAsia)]\ndf17_Wo = df17[~df17['Country'].isin(EastAsia )]\ndf17['region']=[\"EastAsia\" if x in EastAsia \n                            else \"World\" for x in df17['Country']]\n```\n<br>\n\n### **Heatmap**\n---\n\n\n```python\n# 21년 Business Analyst가 직업인 국가별 인원수\ndf21_BA = df21[df21['Q5'] == 'Business Analyst']\ndf21_BA = df21_BA['Q3'].value_counts().to_frame().reset_index().rename(columns={'index':'Country', 'Q3':'Business Analyst'})\ndf21_BA\n\n# 21년 Data Analyst가 직업인 국가별 인원수\ndf21_DA = df21[df21['Q5'] == 'Data Analyst']\ndf21_DA = df21_DA['Q3'].value_counts().to_frame().reset_index().rename(columns={'index':'Country', 'Q3':'Data Analyst'})\ndf21_DA\n\n# 21년 Data Engineer가 직업인 국가별 인원수\ndf21_DE = df21[df21['Q5'] == 'Data Engineer']\ndf21_DE = df21_DE['Q3'].value_counts().to_frame().reset_index().rename(columns={'index':'Country', 'Q3':'Data Engineer'})\ndf21_DE\n\n# 21년 Data Scientist가 직업인 국가별 인원수\ndf21_DS = df21[df21['Q5'] == 'Data Scientist']\ndf21_DS = df21_DS['Q3'].value_counts().to_frame().reset_index().rename(columns={'index':'Country', 'Q3':'Data Scientist'})\ndf21_DS\n```\n![](/images/mykaggle3/1.PNG)\n<br>\n\n\n```python\nmerge = pd.merge(df21_BA, df21_DA)\njob=merge.loc[:,[\"Business Analyst\",\"Data Analyst\"]]\njob.columns.tolist()\n```\n    ['B]usiness Analyst', 'Data Analyst]\n<br>\n\n```python\nmerge\n```\n![](/images/mykaggle3/2.PNG)\n<br>\n\n\n```python\nmerge.to_numpy().reshape(-1)\n```\n![](/images/mykaggle3/3.PNG)\n<br>\n\n\n```python\nmerge.columns.tolist()\n#merge.Country.tolist()\n```\n    ['Country', Business Analyst', 'Data Analyst]\n<br>\n\n```python\nmerge.to_numpy()\n```\n![](/images/mykaggle3/4.PNG)\n<br>\n\n\n```python\n# 21년 Data Engineer가 직업인 국가별 인원수\ndf21_DE = df21[df21['Q5'] == 'Data Engineer']\ndf21_DE = df21_DE['Q3'].value_counts().to_frame().reset_index().rename(columns={'index':'Country', 'Q3':'Data Engineer'})\ndf21_DE.head()\n```\n![](/images/mykaggle3/5.PNG)\n<br>\n\n\n```python\nmerge.iloc[:,[1,2]].to_numpy()\n```\n![](/images/mykaggle3/6.PNG)\n<br>\n\n\n```python\n# x축직업\n# y축국가\nfig = go.Figure(data=go.Heatmap(\n                   z=merge.iloc[:,[1,2]].to_numpy(),\n                   x=job.columns.tolist(),\n                   y = merge.Country.tolist(),\n                   hoverongaps = True,\n     coloraxis = \"coloraxis\"\n    \n                ))\n\nfig.update_layout(title_text='<i><b>Heatmap</b></i>',\n                  xaxis = dict(title='x'),\n                  yaxis = dict(title='x')\n                 )\n# add custom xaxis title\nfig.add_annotation(dict(font=dict(color=\"black\",size=14),\n                        x=0.5,\n                        y=-0.15,\n                        showarrow=False,\n                        text=\"\",\n                        xref=\"paper\",\n                        yref=\"paper\"))\n\n# add custom yaxis title\nfig.add_annotation(dict(font=dict(color=\"black\",size=14),\n                        x=-0.35,\n                        y=0.5,\n                        showarrow=False,\n                        text=\"\",\n                        textangle=-90,\n                        xref=\"paper\",\n                        yref=\"paper\"))\n\n# adjust margins to make room for yaxis title\nfig.update_layout(margin=dict(t=50, l=200))\n\n# add colorbar\nfig['data'][0]['showscale'] = True\n\nfig.show()\n\n```\n![](/images/mykaggle3/7.png)\n<br>\n\n\n\n```python\nmerge.iloc[0,[1,2]].values.tolist()\n```\n\n\n```python\nmerge['Business Analyst'].values.tolist()\n```\n\n\n```python\n#21년 직업 종류\ndf21_job = df21['Q5'].value_counts().to_frame().reset_index().rename(columns={'index':'Job', 'Q5':'CNT'})\ndf21_job = df21_job['Job'].to_frame()\n```\n\n### **데이터 전처리**\n---\n\n\n```python\n#data 확인\n\nData_Analyst =['Data Analyst','Data Engineer','Data Miner,Information technology', 'networking, or system ...','Predictive Modeler' ]\nData_Engineer =['A business discipline (accounting, economics, ...', 'Business Analyst',\n                'Statistician', 'Mathematics or statistics', 'Data Scientist', 'Environmental science or geology', \n                'Humanities', 'Machine Learning Engineer', 'Medical or life sciences (biology, chemistry, ...', \n                'Physics or astronomy', 'Research Scientist', 'Researcher', 'Scientist/Researcher', \n                'Social sciences (anthropology, psychology, soc...','Software Developer/Software Engineer']\nDeveloper=['Developer Relations/Advocacy','Engineer','Engineering (non-computer focused)',\n           'Programmer','Software Engineer', 'Computer Scientist','Computer science (software engineering, etc.)', \n           'Fine arts or performing arts','Product Manager', \n           'Product/Project Manager','Program/Project Manager','DBA/Database Engineer']\nNot_Employeed =['Currently not employed', 'Not employed', 'Student']\nOthers = ['I never declared a major', 'Other']\n```\n","slug":"mykaggle3-Heatmap","published":1,"updated":"2022-01-03T12:20:08.049Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cky2hohev001w5nrjedm2csev","content":"<h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h3><h3 id=\"라이브러리-불러오기-amp-캐글-데이터-불러오기\"><a href=\"#라이브러리-불러오기-amp-캐글-데이터-불러오기\" class=\"headerlink\" title=\"라이브러리 불러오기 &amp; 캐글 데이터 불러오기\"></a><strong>라이브러리 불러오기 &amp; 캐글 데이터 불러오기</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">import</span> seaborn <span class=\"keyword\">as</span> sns</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pylab <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> plotly.io <span class=\"keyword\">as</span> pio</span><br><span class=\"line\"><span class=\"keyword\">import</span> plotly.express <span class=\"keyword\">as</span> px</span><br><span class=\"line\"><span class=\"keyword\">import</span> plotly.graph_objects <span class=\"keyword\">as</span> go</span><br><span class=\"line\"><span class=\"keyword\">import</span> plotly.figure_factory <span class=\"keyword\">as</span> ff</span><br><span class=\"line\"><span class=\"keyword\">from</span> plotly.subplots <span class=\"keyword\">import</span> make_subplots</span><br><span class=\"line\"><span class=\"keyword\">from</span> plotly.offline <span class=\"keyword\">import</span> init_notebook_mode, iplot</span><br><span class=\"line\">init_notebook_mode(connected=<span class=\"literal\">True</span>)</span><br><span class=\"line\">pio.templates.default = <span class=\"string\">&quot;none&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># import plotly.offline as py</span></span><br><span class=\"line\"><span class=\"comment\"># py.offline.init_notebook_mode()</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">for</span> dirname, _, filenames <span class=\"keyword\">in</span> os.walk(<span class=\"string\">&#x27;/kaggle/input&#x27;</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> filename <span class=\"keyword\">in</span> filenames:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(os.path.join(dirname, filename))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> warnings</span><br><span class=\"line\">warnings.filterwarnings(<span class=\"string\">&quot;ignore&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df17= pd.read_csv(<span class=\"string\">&quot;/kaggle/input/kaggle-survey-2017/multipleChoiceResponses.csv&quot;</span>, encoding=<span class=\"string\">&quot;ISO-8859-1&quot;</span>)</span><br><span class=\"line\">df18= pd.read_csv(<span class=\"string\">&quot;/kaggle/input/kaggle-survey-2018/multipleChoiceResponses.csv&quot;</span>, )</span><br><span class=\"line\">df19= pd.read_csv(<span class=\"string\">&quot;/kaggle/input/kaggle-survey-2019/multiple_choice_responses.csv&quot;</span>, )</span><br><span class=\"line\">df20= pd.read_csv(<span class=\"string\">&quot;/kaggle/input/kaggle-survey-2020/kaggle_survey_2020_responses.csv&quot;</span>, )</span><br><span class=\"line\">df21= pd.read_csv(<span class=\"string\">&quot;/kaggle/input/kaggle-survey-2021/kaggle_survey_2021_responses.csv&quot;</span>, )</span><br></pre></td></tr></table></figure>\n<br>\n\n<h3 id=\"데이터-Grouping\"><a href=\"#데이터-Grouping\" class=\"headerlink\" title=\"데이터 Grouping\"></a><strong>데이터 Grouping</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## East Asia에는 대한민국, 일본, 중국, 타이완, 몽골, 북조선 총 6개의 국가가 속해 있다. </span></span><br><span class=\"line\"></span><br><span class=\"line\">EastAsia17 = [<span class=\"string\">&#x27;China&#x27;</span>,<span class=\"string\">&quot;People &#x27;s Republic of China&quot;</span>, <span class=\"string\">&#x27;Taiwan&#x27;</span>, <span class=\"string\">&#x27;South Korea&#x27;</span>, <span class=\"string\">&#x27;Japan&#x27;</span>]</span><br><span class=\"line\">EastAsia18 = [<span class=\"string\">&#x27;China&#x27;</span>, <span class=\"string\">&#x27;South Korea&#x27;</span>, <span class=\"string\">&#x27;Japan&#x27;</span>, <span class=\"string\">&#x27;Republic of Korea&#x27;</span>] </span><br><span class=\"line\">EastAsia19 = [<span class=\"string\">&#x27;China&#x27;</span>,<span class=\"string\">&#x27;Taiwan&#x27;</span>, <span class=\"string\">&#x27;South Korea&#x27;</span>, <span class=\"string\">&#x27;Japan&#x27;</span>, <span class=\"string\">&#x27;Republic of Korea&#x27;</span>]</span><br><span class=\"line\">EastAsia20 = [<span class=\"string\">&#x27;China&#x27;</span>,<span class=\"string\">&#x27;Taiwan&#x27;</span>, <span class=\"string\">&#x27;South Korea&#x27;</span>, <span class=\"string\">&#x27;Japan&#x27;</span>, <span class=\"string\">&#x27;Republic of Korea&#x27;</span>]</span><br><span class=\"line\">EastAsia21 = [<span class=\"string\">&#x27;China&#x27;</span>,<span class=\"string\">&#x27;Taiwan&#x27;</span>, <span class=\"string\">&#x27;South Korea&#x27;</span>, <span class=\"string\">&#x27;Japan&#x27;</span>]</span><br><span class=\"line\">EastAsia = [<span class=\"string\">&#x27;Republic of Korea&#x27;</span>,<span class=\"string\">&#x27;China&#x27;</span>,<span class=\"string\">&#x27;Taiwan&#x27;</span>, <span class=\"string\">&#x27;South Korea&#x27;</span>, <span class=\"string\">&#x27;Japan&#x27;</span>, <span class=\"string\">&quot;People &#x27;s Republic of China&quot;</span> ]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#21년</span></span><br><span class=\"line\">df21_Ea = df21[df21[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(EastAsia)]</span><br><span class=\"line\">df21_Wo = df21[~df21[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(EastAsia )]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##  동아시아 국가를 제외한 국가들을 region 열의 데이터 값을 World 로 바꿔줌</span></span><br><span class=\"line\">df21[<span class=\"string\">&#x27;region&#x27;</span>]=[<span class=\"string\">&quot;EastAsia&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> EastAsia </span><br><span class=\"line\">                            <span class=\"keyword\">else</span> <span class=\"string\">&quot;World&quot;</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> df21[<span class=\"string\">&#x27;Q3&#x27;</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#20년</span></span><br><span class=\"line\">df20_Ea = df20[df20[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(EastAsia)]</span><br><span class=\"line\">df20_Wo = df20[~df20[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(EastAsia )]</span><br><span class=\"line\">df20[<span class=\"string\">&#x27;region&#x27;</span>]=[<span class=\"string\">&quot;EastAsia&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> EastAsia </span><br><span class=\"line\">                            <span class=\"keyword\">else</span> <span class=\"string\">&quot;World&quot;</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> df20[<span class=\"string\">&#x27;Q3&#x27;</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#19년</span></span><br><span class=\"line\">df19_Ea = df19[df19[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(EastAsia)]</span><br><span class=\"line\">df19_Wo = df19[~df19[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(EastAsia )]</span><br><span class=\"line\">df19[<span class=\"string\">&#x27;region&#x27;</span>]=[<span class=\"string\">&quot;EastAsia&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> EastAsia</span><br><span class=\"line\">                            <span class=\"keyword\">else</span> <span class=\"string\">&quot;World&quot;</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> df19[<span class=\"string\">&#x27;Q3&#x27;</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#18년</span></span><br><span class=\"line\">df18_Ea = df18[df18[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(EastAsia)]</span><br><span class=\"line\">df18_Wo = df18[~df18[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(EastAsia )]</span><br><span class=\"line\">df18[<span class=\"string\">&#x27;region&#x27;</span>]=[<span class=\"string\">&quot;EastAsia&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> EastAsia </span><br><span class=\"line\">                            <span class=\"keyword\">else</span> <span class=\"string\">&quot;World&quot;</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> df18[<span class=\"string\">&#x27;Q3&#x27;</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#17년</span></span><br><span class=\"line\">df17_Ea = df17[df17[<span class=\"string\">&#x27;Country&#x27;</span>].isin(EastAsia)]</span><br><span class=\"line\">df17_Wo = df17[~df17[<span class=\"string\">&#x27;Country&#x27;</span>].isin(EastAsia )]</span><br><span class=\"line\">df17[<span class=\"string\">&#x27;region&#x27;</span>]=[<span class=\"string\">&quot;EastAsia&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> EastAsia </span><br><span class=\"line\">                            <span class=\"keyword\">else</span> <span class=\"string\">&quot;World&quot;</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> df17[<span class=\"string\">&#x27;Country&#x27;</span>]]</span><br></pre></td></tr></table></figure>\n<br>\n\n<h3 id=\"Heatmap\"><a href=\"#Heatmap\" class=\"headerlink\" title=\"Heatmap\"></a><strong>Heatmap</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 21년 Business Analyst가 직업인 국가별 인원수</span></span><br><span class=\"line\">df21_BA = df21[df21[<span class=\"string\">&#x27;Q5&#x27;</span>] == <span class=\"string\">&#x27;Business Analyst&#x27;</span>]</span><br><span class=\"line\">df21_BA = df21_BA[<span class=\"string\">&#x27;Q3&#x27;</span>].value_counts().to_frame().reset_index().rename(columns=&#123;<span class=\"string\">&#x27;index&#x27;</span>:<span class=\"string\">&#x27;Country&#x27;</span>, <span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;Business Analyst&#x27;</span>&#125;)</span><br><span class=\"line\">df21_BA</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 21년 Data Analyst가 직업인 국가별 인원수</span></span><br><span class=\"line\">df21_DA = df21[df21[<span class=\"string\">&#x27;Q5&#x27;</span>] == <span class=\"string\">&#x27;Data Analyst&#x27;</span>]</span><br><span class=\"line\">df21_DA = df21_DA[<span class=\"string\">&#x27;Q3&#x27;</span>].value_counts().to_frame().reset_index().rename(columns=&#123;<span class=\"string\">&#x27;index&#x27;</span>:<span class=\"string\">&#x27;Country&#x27;</span>, <span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;Data Analyst&#x27;</span>&#125;)</span><br><span class=\"line\">df21_DA</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 21년 Data Engineer가 직업인 국가별 인원수</span></span><br><span class=\"line\">df21_DE = df21[df21[<span class=\"string\">&#x27;Q5&#x27;</span>] == <span class=\"string\">&#x27;Data Engineer&#x27;</span>]</span><br><span class=\"line\">df21_DE = df21_DE[<span class=\"string\">&#x27;Q3&#x27;</span>].value_counts().to_frame().reset_index().rename(columns=&#123;<span class=\"string\">&#x27;index&#x27;</span>:<span class=\"string\">&#x27;Country&#x27;</span>, <span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;Data Engineer&#x27;</span>&#125;)</span><br><span class=\"line\">df21_DE</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 21년 Data Scientist가 직업인 국가별 인원수</span></span><br><span class=\"line\">df21_DS = df21[df21[<span class=\"string\">&#x27;Q5&#x27;</span>] == <span class=\"string\">&#x27;Data Scientist&#x27;</span>]</span><br><span class=\"line\">df21_DS = df21_DS[<span class=\"string\">&#x27;Q3&#x27;</span>].value_counts().to_frame().reset_index().rename(columns=&#123;<span class=\"string\">&#x27;index&#x27;</span>:<span class=\"string\">&#x27;Country&#x27;</span>, <span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;Data Scientist&#x27;</span>&#125;)</span><br><span class=\"line\">df21_DS</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mykaggle3/1.PNG\"><br><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">merge = pd.merge(df21_BA, df21_DA)</span><br><span class=\"line\">job=merge.loc[:,[<span class=\"string\">&quot;Business Analyst&quot;</span>,<span class=\"string\">&quot;Data Analyst&quot;</span>]]</span><br><span class=\"line\">job.columns.tolist()</span><br></pre></td></tr></table></figure>\n<pre><code>[&#39;B]usiness Analyst&#39;, &#39;Data Analyst]\n</code></pre>\n<br>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">merge</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mykaggle3/2.PNG\"><br><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">merge.to_numpy().reshape(-<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mykaggle3/3.PNG\"><br><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">merge.columns.tolist()</span><br><span class=\"line\"><span class=\"comment\">#merge.Country.tolist()</span></span><br></pre></td></tr></table></figure>\n<pre><code>[&#39;Country&#39;, Business Analyst&#39;, &#39;Data Analyst]\n</code></pre>\n<br>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">merge.to_numpy()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mykaggle3/4.PNG\"><br><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 21년 Data Engineer가 직업인 국가별 인원수</span></span><br><span class=\"line\">df21_DE = df21[df21[<span class=\"string\">&#x27;Q5&#x27;</span>] == <span class=\"string\">&#x27;Data Engineer&#x27;</span>]</span><br><span class=\"line\">df21_DE = df21_DE[<span class=\"string\">&#x27;Q3&#x27;</span>].value_counts().to_frame().reset_index().rename(columns=&#123;<span class=\"string\">&#x27;index&#x27;</span>:<span class=\"string\">&#x27;Country&#x27;</span>, <span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;Data Engineer&#x27;</span>&#125;)</span><br><span class=\"line\">df21_DE.head()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mykaggle3/5.PNG\"><br><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">merge.iloc[:,[<span class=\"number\">1</span>,<span class=\"number\">2</span>]].to_numpy()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mykaggle3/6.PNG\"><br><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># x축직업</span></span><br><span class=\"line\"><span class=\"comment\"># y축국가</span></span><br><span class=\"line\">fig = go.Figure(data=go.Heatmap(</span><br><span class=\"line\">                   z=merge.iloc[:,[<span class=\"number\">1</span>,<span class=\"number\">2</span>]].to_numpy(),</span><br><span class=\"line\">                   x=job.columns.tolist(),</span><br><span class=\"line\">                   y = merge.Country.tolist(),</span><br><span class=\"line\">                   hoverongaps = <span class=\"literal\">True</span>,</span><br><span class=\"line\">     coloraxis = <span class=\"string\">&quot;coloraxis&quot;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">                ))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(title_text=<span class=\"string\">&#x27;&lt;i&gt;&lt;b&gt;Heatmap&lt;/b&gt;&lt;/i&gt;&#x27;</span>,</span><br><span class=\"line\">                  xaxis = <span class=\"built_in\">dict</span>(title=<span class=\"string\">&#x27;x&#x27;</span>),</span><br><span class=\"line\">                  yaxis = <span class=\"built_in\">dict</span>(title=<span class=\"string\">&#x27;x&#x27;</span>)</span><br><span class=\"line\">                 )</span><br><span class=\"line\"><span class=\"comment\"># add custom xaxis title</span></span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(color=<span class=\"string\">&quot;black&quot;</span>,size=<span class=\"number\">14</span>),</span><br><span class=\"line\">                        x=<span class=\"number\">0.5</span>,</span><br><span class=\"line\">                        y=-<span class=\"number\">0.15</span>,</span><br><span class=\"line\">                        showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                        text=<span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">                        xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                        yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># add custom yaxis title</span></span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(color=<span class=\"string\">&quot;black&quot;</span>,size=<span class=\"number\">14</span>),</span><br><span class=\"line\">                        x=-<span class=\"number\">0.35</span>,</span><br><span class=\"line\">                        y=<span class=\"number\">0.5</span>,</span><br><span class=\"line\">                        showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                        text=<span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">                        textangle=-<span class=\"number\">90</span>,</span><br><span class=\"line\">                        xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                        yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># adjust margins to make room for yaxis title</span></span><br><span class=\"line\">fig.update_layout(margin=<span class=\"built_in\">dict</span>(t=<span class=\"number\">50</span>, l=<span class=\"number\">200</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># add colorbar</span></span><br><span class=\"line\">fig[<span class=\"string\">&#x27;data&#x27;</span>][<span class=\"number\">0</span>][<span class=\"string\">&#x27;showscale&#x27;</span>] = <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\">fig.show()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mykaggle3/7.png\"><br><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">merge.iloc[<span class=\"number\">0</span>,[<span class=\"number\">1</span>,<span class=\"number\">2</span>]].values.tolist()</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">merge[<span class=\"string\">&#x27;Business Analyst&#x27;</span>].values.tolist()</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#21년 직업 종류</span></span><br><span class=\"line\">df21_job = df21[<span class=\"string\">&#x27;Q5&#x27;</span>].value_counts().to_frame().reset_index().rename(columns=&#123;<span class=\"string\">&#x27;index&#x27;</span>:<span class=\"string\">&#x27;Job&#x27;</span>, <span class=\"string\">&#x27;Q5&#x27;</span>:<span class=\"string\">&#x27;CNT&#x27;</span>&#125;)</span><br><span class=\"line\">df21_job = df21_job[<span class=\"string\">&#x27;Job&#x27;</span>].to_frame()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"데이터-전처리\"><a href=\"#데이터-전처리\" class=\"headerlink\" title=\"데이터 전처리\"></a><strong>데이터 전처리</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#data 확인</span></span><br><span class=\"line\"></span><br><span class=\"line\">Data_Analyst =[<span class=\"string\">&#x27;Data Analyst&#x27;</span>,<span class=\"string\">&#x27;Data Engineer&#x27;</span>,<span class=\"string\">&#x27;Data Miner,Information technology&#x27;</span>, <span class=\"string\">&#x27;networking, or system ...&#x27;</span>,<span class=\"string\">&#x27;Predictive Modeler&#x27;</span> ]</span><br><span class=\"line\">Data_Engineer =[<span class=\"string\">&#x27;A business discipline (accounting, economics, ...&#x27;</span>, <span class=\"string\">&#x27;Business Analyst&#x27;</span>,</span><br><span class=\"line\">                <span class=\"string\">&#x27;Statistician&#x27;</span>, <span class=\"string\">&#x27;Mathematics or statistics&#x27;</span>, <span class=\"string\">&#x27;Data Scientist&#x27;</span>, <span class=\"string\">&#x27;Environmental science or geology&#x27;</span>, </span><br><span class=\"line\">                <span class=\"string\">&#x27;Humanities&#x27;</span>, <span class=\"string\">&#x27;Machine Learning Engineer&#x27;</span>, <span class=\"string\">&#x27;Medical or life sciences (biology, chemistry, ...&#x27;</span>, </span><br><span class=\"line\">                <span class=\"string\">&#x27;Physics or astronomy&#x27;</span>, <span class=\"string\">&#x27;Research Scientist&#x27;</span>, <span class=\"string\">&#x27;Researcher&#x27;</span>, <span class=\"string\">&#x27;Scientist/Researcher&#x27;</span>, </span><br><span class=\"line\">                <span class=\"string\">&#x27;Social sciences (anthropology, psychology, soc...&#x27;</span>,<span class=\"string\">&#x27;Software Developer/Software Engineer&#x27;</span>]</span><br><span class=\"line\">Developer=[<span class=\"string\">&#x27;Developer Relations/Advocacy&#x27;</span>,<span class=\"string\">&#x27;Engineer&#x27;</span>,<span class=\"string\">&#x27;Engineering (non-computer focused)&#x27;</span>,</span><br><span class=\"line\">           <span class=\"string\">&#x27;Programmer&#x27;</span>,<span class=\"string\">&#x27;Software Engineer&#x27;</span>, <span class=\"string\">&#x27;Computer Scientist&#x27;</span>,<span class=\"string\">&#x27;Computer science (software engineering, etc.)&#x27;</span>, </span><br><span class=\"line\">           <span class=\"string\">&#x27;Fine arts or performing arts&#x27;</span>,<span class=\"string\">&#x27;Product Manager&#x27;</span>, </span><br><span class=\"line\">           <span class=\"string\">&#x27;Product/Project Manager&#x27;</span>,<span class=\"string\">&#x27;Program/Project Manager&#x27;</span>,<span class=\"string\">&#x27;DBA/Database Engineer&#x27;</span>]</span><br><span class=\"line\">Not_Employeed =[<span class=\"string\">&#x27;Currently not employed&#x27;</span>, <span class=\"string\">&#x27;Not employed&#x27;</span>, <span class=\"string\">&#x27;Student&#x27;</span>]</span><br><span class=\"line\">Others = [<span class=\"string\">&#x27;I never declared a major&#x27;</span>, <span class=\"string\">&#x27;Other&#x27;</span>]</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"라이브러리 불러오기 & 캐글 데이터 불러오기\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pylab as plt\n\nimport plotly.io as pio\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.figure_factory as","more":"<h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h3><h3 id=\"라이브러리-불러오기-amp-캐글-데이터-불러오기\"><a href=\"#라이브러리-불러오기-amp-캐글-데이터-불러오기\" class=\"headerlink\" title=\"라이브러리 불러오기 &amp; 캐글 데이터 불러오기\"></a><strong>라이브러리 불러오기 &amp; 캐글 데이터 불러오기</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">import</span> seaborn <span class=\"keyword\">as</span> sns</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pylab <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> plotly.io <span class=\"keyword\">as</span> pio</span><br><span class=\"line\"><span class=\"keyword\">import</span> plotly.express <span class=\"keyword\">as</span> px</span><br><span class=\"line\"><span class=\"keyword\">import</span> plotly.graph_objects <span class=\"keyword\">as</span> go</span><br><span class=\"line\"><span class=\"keyword\">import</span> plotly.figure_factory <span class=\"keyword\">as</span> ff</span><br><span class=\"line\"><span class=\"keyword\">from</span> plotly.subplots <span class=\"keyword\">import</span> make_subplots</span><br><span class=\"line\"><span class=\"keyword\">from</span> plotly.offline <span class=\"keyword\">import</span> init_notebook_mode, iplot</span><br><span class=\"line\">init_notebook_mode(connected=<span class=\"literal\">True</span>)</span><br><span class=\"line\">pio.templates.default = <span class=\"string\">&quot;none&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># import plotly.offline as py</span></span><br><span class=\"line\"><span class=\"comment\"># py.offline.init_notebook_mode()</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">for</span> dirname, _, filenames <span class=\"keyword\">in</span> os.walk(<span class=\"string\">&#x27;/kaggle/input&#x27;</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> filename <span class=\"keyword\">in</span> filenames:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(os.path.join(dirname, filename))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> warnings</span><br><span class=\"line\">warnings.filterwarnings(<span class=\"string\">&quot;ignore&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df17= pd.read_csv(<span class=\"string\">&quot;/kaggle/input/kaggle-survey-2017/multipleChoiceResponses.csv&quot;</span>, encoding=<span class=\"string\">&quot;ISO-8859-1&quot;</span>)</span><br><span class=\"line\">df18= pd.read_csv(<span class=\"string\">&quot;/kaggle/input/kaggle-survey-2018/multipleChoiceResponses.csv&quot;</span>, )</span><br><span class=\"line\">df19= pd.read_csv(<span class=\"string\">&quot;/kaggle/input/kaggle-survey-2019/multiple_choice_responses.csv&quot;</span>, )</span><br><span class=\"line\">df20= pd.read_csv(<span class=\"string\">&quot;/kaggle/input/kaggle-survey-2020/kaggle_survey_2020_responses.csv&quot;</span>, )</span><br><span class=\"line\">df21= pd.read_csv(<span class=\"string\">&quot;/kaggle/input/kaggle-survey-2021/kaggle_survey_2021_responses.csv&quot;</span>, )</span><br></pre></td></tr></table></figure>\n<br>\n\n<h3 id=\"데이터-Grouping\"><a href=\"#데이터-Grouping\" class=\"headerlink\" title=\"데이터 Grouping\"></a><strong>데이터 Grouping</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## East Asia에는 대한민국, 일본, 중국, 타이완, 몽골, 북조선 총 6개의 국가가 속해 있다. </span></span><br><span class=\"line\"></span><br><span class=\"line\">EastAsia17 = [<span class=\"string\">&#x27;China&#x27;</span>,<span class=\"string\">&quot;People &#x27;s Republic of China&quot;</span>, <span class=\"string\">&#x27;Taiwan&#x27;</span>, <span class=\"string\">&#x27;South Korea&#x27;</span>, <span class=\"string\">&#x27;Japan&#x27;</span>]</span><br><span class=\"line\">EastAsia18 = [<span class=\"string\">&#x27;China&#x27;</span>, <span class=\"string\">&#x27;South Korea&#x27;</span>, <span class=\"string\">&#x27;Japan&#x27;</span>, <span class=\"string\">&#x27;Republic of Korea&#x27;</span>] </span><br><span class=\"line\">EastAsia19 = [<span class=\"string\">&#x27;China&#x27;</span>,<span class=\"string\">&#x27;Taiwan&#x27;</span>, <span class=\"string\">&#x27;South Korea&#x27;</span>, <span class=\"string\">&#x27;Japan&#x27;</span>, <span class=\"string\">&#x27;Republic of Korea&#x27;</span>]</span><br><span class=\"line\">EastAsia20 = [<span class=\"string\">&#x27;China&#x27;</span>,<span class=\"string\">&#x27;Taiwan&#x27;</span>, <span class=\"string\">&#x27;South Korea&#x27;</span>, <span class=\"string\">&#x27;Japan&#x27;</span>, <span class=\"string\">&#x27;Republic of Korea&#x27;</span>]</span><br><span class=\"line\">EastAsia21 = [<span class=\"string\">&#x27;China&#x27;</span>,<span class=\"string\">&#x27;Taiwan&#x27;</span>, <span class=\"string\">&#x27;South Korea&#x27;</span>, <span class=\"string\">&#x27;Japan&#x27;</span>]</span><br><span class=\"line\">EastAsia = [<span class=\"string\">&#x27;Republic of Korea&#x27;</span>,<span class=\"string\">&#x27;China&#x27;</span>,<span class=\"string\">&#x27;Taiwan&#x27;</span>, <span class=\"string\">&#x27;South Korea&#x27;</span>, <span class=\"string\">&#x27;Japan&#x27;</span>, <span class=\"string\">&quot;People &#x27;s Republic of China&quot;</span> ]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#21년</span></span><br><span class=\"line\">df21_Ea = df21[df21[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(EastAsia)]</span><br><span class=\"line\">df21_Wo = df21[~df21[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(EastAsia )]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##  동아시아 국가를 제외한 국가들을 region 열의 데이터 값을 World 로 바꿔줌</span></span><br><span class=\"line\">df21[<span class=\"string\">&#x27;region&#x27;</span>]=[<span class=\"string\">&quot;EastAsia&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> EastAsia </span><br><span class=\"line\">                            <span class=\"keyword\">else</span> <span class=\"string\">&quot;World&quot;</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> df21[<span class=\"string\">&#x27;Q3&#x27;</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#20년</span></span><br><span class=\"line\">df20_Ea = df20[df20[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(EastAsia)]</span><br><span class=\"line\">df20_Wo = df20[~df20[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(EastAsia )]</span><br><span class=\"line\">df20[<span class=\"string\">&#x27;region&#x27;</span>]=[<span class=\"string\">&quot;EastAsia&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> EastAsia </span><br><span class=\"line\">                            <span class=\"keyword\">else</span> <span class=\"string\">&quot;World&quot;</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> df20[<span class=\"string\">&#x27;Q3&#x27;</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#19년</span></span><br><span class=\"line\">df19_Ea = df19[df19[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(EastAsia)]</span><br><span class=\"line\">df19_Wo = df19[~df19[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(EastAsia )]</span><br><span class=\"line\">df19[<span class=\"string\">&#x27;region&#x27;</span>]=[<span class=\"string\">&quot;EastAsia&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> EastAsia</span><br><span class=\"line\">                            <span class=\"keyword\">else</span> <span class=\"string\">&quot;World&quot;</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> df19[<span class=\"string\">&#x27;Q3&#x27;</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#18년</span></span><br><span class=\"line\">df18_Ea = df18[df18[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(EastAsia)]</span><br><span class=\"line\">df18_Wo = df18[~df18[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(EastAsia )]</span><br><span class=\"line\">df18[<span class=\"string\">&#x27;region&#x27;</span>]=[<span class=\"string\">&quot;EastAsia&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> EastAsia </span><br><span class=\"line\">                            <span class=\"keyword\">else</span> <span class=\"string\">&quot;World&quot;</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> df18[<span class=\"string\">&#x27;Q3&#x27;</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#17년</span></span><br><span class=\"line\">df17_Ea = df17[df17[<span class=\"string\">&#x27;Country&#x27;</span>].isin(EastAsia)]</span><br><span class=\"line\">df17_Wo = df17[~df17[<span class=\"string\">&#x27;Country&#x27;</span>].isin(EastAsia )]</span><br><span class=\"line\">df17[<span class=\"string\">&#x27;region&#x27;</span>]=[<span class=\"string\">&quot;EastAsia&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> EastAsia </span><br><span class=\"line\">                            <span class=\"keyword\">else</span> <span class=\"string\">&quot;World&quot;</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> df17[<span class=\"string\">&#x27;Country&#x27;</span>]]</span><br></pre></td></tr></table></figure>\n<br>\n\n<h3 id=\"Heatmap\"><a href=\"#Heatmap\" class=\"headerlink\" title=\"Heatmap\"></a><strong>Heatmap</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 21년 Business Analyst가 직업인 국가별 인원수</span></span><br><span class=\"line\">df21_BA = df21[df21[<span class=\"string\">&#x27;Q5&#x27;</span>] == <span class=\"string\">&#x27;Business Analyst&#x27;</span>]</span><br><span class=\"line\">df21_BA = df21_BA[<span class=\"string\">&#x27;Q3&#x27;</span>].value_counts().to_frame().reset_index().rename(columns=&#123;<span class=\"string\">&#x27;index&#x27;</span>:<span class=\"string\">&#x27;Country&#x27;</span>, <span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;Business Analyst&#x27;</span>&#125;)</span><br><span class=\"line\">df21_BA</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 21년 Data Analyst가 직업인 국가별 인원수</span></span><br><span class=\"line\">df21_DA = df21[df21[<span class=\"string\">&#x27;Q5&#x27;</span>] == <span class=\"string\">&#x27;Data Analyst&#x27;</span>]</span><br><span class=\"line\">df21_DA = df21_DA[<span class=\"string\">&#x27;Q3&#x27;</span>].value_counts().to_frame().reset_index().rename(columns=&#123;<span class=\"string\">&#x27;index&#x27;</span>:<span class=\"string\">&#x27;Country&#x27;</span>, <span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;Data Analyst&#x27;</span>&#125;)</span><br><span class=\"line\">df21_DA</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 21년 Data Engineer가 직업인 국가별 인원수</span></span><br><span class=\"line\">df21_DE = df21[df21[<span class=\"string\">&#x27;Q5&#x27;</span>] == <span class=\"string\">&#x27;Data Engineer&#x27;</span>]</span><br><span class=\"line\">df21_DE = df21_DE[<span class=\"string\">&#x27;Q3&#x27;</span>].value_counts().to_frame().reset_index().rename(columns=&#123;<span class=\"string\">&#x27;index&#x27;</span>:<span class=\"string\">&#x27;Country&#x27;</span>, <span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;Data Engineer&#x27;</span>&#125;)</span><br><span class=\"line\">df21_DE</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 21년 Data Scientist가 직업인 국가별 인원수</span></span><br><span class=\"line\">df21_DS = df21[df21[<span class=\"string\">&#x27;Q5&#x27;</span>] == <span class=\"string\">&#x27;Data Scientist&#x27;</span>]</span><br><span class=\"line\">df21_DS = df21_DS[<span class=\"string\">&#x27;Q3&#x27;</span>].value_counts().to_frame().reset_index().rename(columns=&#123;<span class=\"string\">&#x27;index&#x27;</span>:<span class=\"string\">&#x27;Country&#x27;</span>, <span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;Data Scientist&#x27;</span>&#125;)</span><br><span class=\"line\">df21_DS</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mykaggle3/1.PNG\"><br><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">merge = pd.merge(df21_BA, df21_DA)</span><br><span class=\"line\">job=merge.loc[:,[<span class=\"string\">&quot;Business Analyst&quot;</span>,<span class=\"string\">&quot;Data Analyst&quot;</span>]]</span><br><span class=\"line\">job.columns.tolist()</span><br></pre></td></tr></table></figure>\n<pre><code>[&#39;B]usiness Analyst&#39;, &#39;Data Analyst]\n</code></pre>\n<br>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">merge</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mykaggle3/2.PNG\"><br><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">merge.to_numpy().reshape(-<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mykaggle3/3.PNG\"><br><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">merge.columns.tolist()</span><br><span class=\"line\"><span class=\"comment\">#merge.Country.tolist()</span></span><br></pre></td></tr></table></figure>\n<pre><code>[&#39;Country&#39;, Business Analyst&#39;, &#39;Data Analyst]\n</code></pre>\n<br>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">merge.to_numpy()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mykaggle3/4.PNG\"><br><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 21년 Data Engineer가 직업인 국가별 인원수</span></span><br><span class=\"line\">df21_DE = df21[df21[<span class=\"string\">&#x27;Q5&#x27;</span>] == <span class=\"string\">&#x27;Data Engineer&#x27;</span>]</span><br><span class=\"line\">df21_DE = df21_DE[<span class=\"string\">&#x27;Q3&#x27;</span>].value_counts().to_frame().reset_index().rename(columns=&#123;<span class=\"string\">&#x27;index&#x27;</span>:<span class=\"string\">&#x27;Country&#x27;</span>, <span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;Data Engineer&#x27;</span>&#125;)</span><br><span class=\"line\">df21_DE.head()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mykaggle3/5.PNG\"><br><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">merge.iloc[:,[<span class=\"number\">1</span>,<span class=\"number\">2</span>]].to_numpy()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mykaggle3/6.PNG\"><br><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># x축직업</span></span><br><span class=\"line\"><span class=\"comment\"># y축국가</span></span><br><span class=\"line\">fig = go.Figure(data=go.Heatmap(</span><br><span class=\"line\">                   z=merge.iloc[:,[<span class=\"number\">1</span>,<span class=\"number\">2</span>]].to_numpy(),</span><br><span class=\"line\">                   x=job.columns.tolist(),</span><br><span class=\"line\">                   y = merge.Country.tolist(),</span><br><span class=\"line\">                   hoverongaps = <span class=\"literal\">True</span>,</span><br><span class=\"line\">     coloraxis = <span class=\"string\">&quot;coloraxis&quot;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">                ))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(title_text=<span class=\"string\">&#x27;&lt;i&gt;&lt;b&gt;Heatmap&lt;/b&gt;&lt;/i&gt;&#x27;</span>,</span><br><span class=\"line\">                  xaxis = <span class=\"built_in\">dict</span>(title=<span class=\"string\">&#x27;x&#x27;</span>),</span><br><span class=\"line\">                  yaxis = <span class=\"built_in\">dict</span>(title=<span class=\"string\">&#x27;x&#x27;</span>)</span><br><span class=\"line\">                 )</span><br><span class=\"line\"><span class=\"comment\"># add custom xaxis title</span></span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(color=<span class=\"string\">&quot;black&quot;</span>,size=<span class=\"number\">14</span>),</span><br><span class=\"line\">                        x=<span class=\"number\">0.5</span>,</span><br><span class=\"line\">                        y=-<span class=\"number\">0.15</span>,</span><br><span class=\"line\">                        showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                        text=<span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">                        xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                        yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># add custom yaxis title</span></span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(color=<span class=\"string\">&quot;black&quot;</span>,size=<span class=\"number\">14</span>),</span><br><span class=\"line\">                        x=-<span class=\"number\">0.35</span>,</span><br><span class=\"line\">                        y=<span class=\"number\">0.5</span>,</span><br><span class=\"line\">                        showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                        text=<span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">                        textangle=-<span class=\"number\">90</span>,</span><br><span class=\"line\">                        xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                        yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># adjust margins to make room for yaxis title</span></span><br><span class=\"line\">fig.update_layout(margin=<span class=\"built_in\">dict</span>(t=<span class=\"number\">50</span>, l=<span class=\"number\">200</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># add colorbar</span></span><br><span class=\"line\">fig[<span class=\"string\">&#x27;data&#x27;</span>][<span class=\"number\">0</span>][<span class=\"string\">&#x27;showscale&#x27;</span>] = <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\">fig.show()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mykaggle3/7.png\"><br><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">merge.iloc[<span class=\"number\">0</span>,[<span class=\"number\">1</span>,<span class=\"number\">2</span>]].values.tolist()</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">merge[<span class=\"string\">&#x27;Business Analyst&#x27;</span>].values.tolist()</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#21년 직업 종류</span></span><br><span class=\"line\">df21_job = df21[<span class=\"string\">&#x27;Q5&#x27;</span>].value_counts().to_frame().reset_index().rename(columns=&#123;<span class=\"string\">&#x27;index&#x27;</span>:<span class=\"string\">&#x27;Job&#x27;</span>, <span class=\"string\">&#x27;Q5&#x27;</span>:<span class=\"string\">&#x27;CNT&#x27;</span>&#125;)</span><br><span class=\"line\">df21_job = df21_job[<span class=\"string\">&#x27;Job&#x27;</span>].to_frame()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"데이터-전처리\"><a href=\"#데이터-전처리\" class=\"headerlink\" title=\"데이터 전처리\"></a><strong>데이터 전처리</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#data 확인</span></span><br><span class=\"line\"></span><br><span class=\"line\">Data_Analyst =[<span class=\"string\">&#x27;Data Analyst&#x27;</span>,<span class=\"string\">&#x27;Data Engineer&#x27;</span>,<span class=\"string\">&#x27;Data Miner,Information technology&#x27;</span>, <span class=\"string\">&#x27;networking, or system ...&#x27;</span>,<span class=\"string\">&#x27;Predictive Modeler&#x27;</span> ]</span><br><span class=\"line\">Data_Engineer =[<span class=\"string\">&#x27;A business discipline (accounting, economics, ...&#x27;</span>, <span class=\"string\">&#x27;Business Analyst&#x27;</span>,</span><br><span class=\"line\">                <span class=\"string\">&#x27;Statistician&#x27;</span>, <span class=\"string\">&#x27;Mathematics or statistics&#x27;</span>, <span class=\"string\">&#x27;Data Scientist&#x27;</span>, <span class=\"string\">&#x27;Environmental science or geology&#x27;</span>, </span><br><span class=\"line\">                <span class=\"string\">&#x27;Humanities&#x27;</span>, <span class=\"string\">&#x27;Machine Learning Engineer&#x27;</span>, <span class=\"string\">&#x27;Medical or life sciences (biology, chemistry, ...&#x27;</span>, </span><br><span class=\"line\">                <span class=\"string\">&#x27;Physics or astronomy&#x27;</span>, <span class=\"string\">&#x27;Research Scientist&#x27;</span>, <span class=\"string\">&#x27;Researcher&#x27;</span>, <span class=\"string\">&#x27;Scientist/Researcher&#x27;</span>, </span><br><span class=\"line\">                <span class=\"string\">&#x27;Social sciences (anthropology, psychology, soc...&#x27;</span>,<span class=\"string\">&#x27;Software Developer/Software Engineer&#x27;</span>]</span><br><span class=\"line\">Developer=[<span class=\"string\">&#x27;Developer Relations/Advocacy&#x27;</span>,<span class=\"string\">&#x27;Engineer&#x27;</span>,<span class=\"string\">&#x27;Engineering (non-computer focused)&#x27;</span>,</span><br><span class=\"line\">           <span class=\"string\">&#x27;Programmer&#x27;</span>,<span class=\"string\">&#x27;Software Engineer&#x27;</span>, <span class=\"string\">&#x27;Computer Scientist&#x27;</span>,<span class=\"string\">&#x27;Computer science (software engineering, etc.)&#x27;</span>, </span><br><span class=\"line\">           <span class=\"string\">&#x27;Fine arts or performing arts&#x27;</span>,<span class=\"string\">&#x27;Product Manager&#x27;</span>, </span><br><span class=\"line\">           <span class=\"string\">&#x27;Product/Project Manager&#x27;</span>,<span class=\"string\">&#x27;Program/Project Manager&#x27;</span>,<span class=\"string\">&#x27;DBA/Database Engineer&#x27;</span>]</span><br><span class=\"line\">Not_Employeed =[<span class=\"string\">&#x27;Currently not employed&#x27;</span>, <span class=\"string\">&#x27;Not employed&#x27;</span>, <span class=\"string\">&#x27;Student&#x27;</span>]</span><br><span class=\"line\">Others = [<span class=\"string\">&#x27;I never declared a major&#x27;</span>, <span class=\"string\">&#x27;Other&#x27;</span>]</span><br></pre></td></tr></table></figure>\n"},{"title":"Plotly를 이용해 다양한 bar 그래프 그리기","date":"2021-11-27T15:00:00.000Z","thumbnail":"/images/plotlybar/newplot.png","_content":"  \n### **Bar Graph 1**\n---\n\n![](/images/plotlybar/newplot.png)\n\n\n위의 그래프 경우는 bar 그래프만 있는게 아니고 scatter 그래프도 같이 있다.\n따라서 그래프 2개를 하나의 페이지에 그린다고 볼 수 있다.\n\n두개의 그래프를 동시에 그릴때 add_trace를 이용해서 하나씩 그린다고 보면 된다.\nfig.add_trace(go.Bar)      --> 그래프-1\nfig.add_trace(go.Scatter)  --> 그래프-2\n\n<br>\n\nx축은 공통사항이므로 같은 값을 넣어주었다.\ny는 값이 다르므로 각각의 값을 넣어주었다\n\n아래는 왼쪽 오른쪽 각각의 축을 나타냈고, 각각의 그래프에 지정해주었다.\nyaxis = \"y1\"   \nyaxis = \"y2\"\n\n나머지 fig.update_trace, fig.update_layout, fig.add_annotation는 그래프를 꾸며주는 역할을 한다.\n<br>\n\n\n\n```python\nfig = go.Figure()\n\nfig.add_trace(go.Bar(x=years, y=[len(df17_Ea),len(df18_Ea), len(df19_Ea),len(df20_Ea),len(df21_Ea)],\n                marker_color='#F2D64B',\n                yaxis = \"y1\",\n                name='East Asia',\n                text= percent,\n                texttemplate='%{text}  %', \n                textposition='outside',\n                hovertemplate='<b>KaggleUser</b>: %{x}<br>'+ '<b>Count</b>: %{y}'))\n\nfig.add_trace(go.Scatter(name = \"World\",\n           x=years, \n           y=[len(df17), len(df18), len(df19), len(df20), len(df21)],\n           marker_color='#979DA6',\n           mode = 'lines+markers', # please check option here\n           yaxis = \"y2\"))\n\nfig.update_traces(hovertemplate='<b>Count</b>: %{y}<br><extra></extra>'+\n                                '<b>Year</b>: %{x}<br>')\n\nfig.update_layout(yaxis  = dict(title = \"Kaggle User in East Asia\",showgrid = False, range=[0, len(df21_Ea)*1.2]),\n                  yaxis2 = dict(title = \"Kaggle User in World\", overlaying = \"y1\", side = \"right\", \n                  showgrid = False, \n                  zeroline = False, range=[0, len(df21)*1.2]))\n\nfig.update_layout(title='<b>Kaggle Users</b>',title_font_size=20,\n                  margin = dict(t=200, l=100, r=50, b=200),\n                  height=700, width=700)\n\nfig.update_layout(legend=dict(\n    orientation=\"h\",\n    yanchor=\"bottom\",\n    y=1.1,\n    xanchor=\"right\",\n    x=1))\nfig.add_annotation(dict(font=dict(size=14),\n                                    x=0.9,\n                                    y=-0.25,\n                                    showarrow=False,\n                                    text=\"@green_yhjw\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\nfig.show()\n\n```\n<br>\n\n\n### **Bar Graph2**\n---\n\n![](/images/plotlybar/newplot1.png)\n\n하나의 그래프에 여러개의 데이터를 표현할때\ndata=[]는 왜 쓸까? 안쓰면 에러남 의문\n\n똑같이 go.bar로 x축 y축에 각각의 값을 넣어준다.\n이때 내가 그리고자 하는 그래프가 총 5개이니까 하나씩 설정해서 그린다고 생각하면 된다.\n\n다른 방법으로는 add_trace 이용해서 그려도 된다\n```python\nfig = go.Figure(data=[\n    go.Bar(name='2017', x=df5years['Country'], y=df5years['17'], marker_color='#F2798F',text=df5years['17'].tolist(), textposition='outside'),\n    go.Bar(name='2018', x=df5years['Country'], y=df5years['18'], marker_color='#88BFBA',text=df5years['18'].fillna(0).astype(int).tolist(), textposition='outside',),\n    go.Bar(name='2019', x=df5years['Country'], y=df5years['19'], marker_color='#CDD9A3',text=df5years['19'].tolist(), textposition='outside'),\n    go.Bar(name='2020', x=df5years['Country'], y=df5years['20'], marker_color='#F28705',text=df5years['20'].tolist(), textposition='outside',),\n    go.Bar(name='2021', x=df5years['Country'], y=df5years['21'], marker_color='#D9946C',text=df5years['21'].tolist(), textposition='outside')])\n\nfig.update_layout(title='<b>Kaggle User in East Asia</b>',title_font_size=23,\n                  margin = dict(t=200, l=100, r=10, b=200),\n                  height=600, width=700)\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\nfig.update_traces(hovertemplate='<b>Count</b>: %{y}')\nfig.update_layout(legend=dict(\n    orientation=\"v\",\n    yanchor=\"bottom\",\n    y=1.15,\n    xanchor=\"right\",\n    x=1))\nfig.add_annotation(dict(font=dict(size=14),\n                                    x=0.8,\n                                    y=-0.5,\n                                    showarrow=False,\n                                    text=\"@green_yhjw\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\nfig.show()\n```\n<br>\n\n### **Bar Graph3**\n---\n\n![](/images/plotlybar/newplot2.png)\n\n위의 그래프는 수평으로 그린 그래프이다.\norientation='h' -> 수평으로 그래프를 그린다\norientation='v' -> 수직으로 그래프를 그린다\n\nbase = 0는 값의 기준점이 0 이라는 의미\n\ny값은 같지만, x값은 0을 기준으로 -와 +로 나누어지기 때문에\n한쪽값에 -을 붙여야 한다\n나는 x=World, x=-East_Asia 각각 이렇게 설정해주었다\n\n```python\nfig = go.Figure(data=[\n    go.Bar(y=y, x=World, orientation='h', name=\"World\", base=0, hovertemplate='<b>World</b>: %{x}%<br>', marker_color='#979DA6', text=World, textposition='outside'),\n    go.Bar(y=y, x=-East_Asia, orientation='h', name=\"East Asia\", base=0, hovertemplate='<b>East Asia</b>: %{x}%<br>', marker_color='#F2D64B', text=East_Asia, textposition='outside')])\n\nfig.update_layout(barmode='stack')\nfig.update_layout(title='<b>World vs EastAsia</b>',title_font_size=22,\n                  margin = dict(t=200, l=100, r=50, b=200),\n                  height=700, width=750,\n                  xaxis_title=None,\n                  yaxis_title=None)\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\nfig.update_layout(legend=dict(\n    orientation=\"h\",\n    yanchor=\"bottom\",\n    y=1.1,\n    xanchor=\"right\",\n    x=1))\nfig.add_annotation(dict(font=dict(size=14),\n                                    x=0.8,\n                                    y=-0.5,\n                                    showarrow=False,\n                                    text=\"@green_yhjw\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\nfig.show()\n```\n<br>\n\n\n### **Bar Graph4**\n---\n\n![](/images/plotlybar/newplot3.png)\n\nsubplot을 이용해 그려준것이다\nsubplot이란 하나의 페이지에 여러개의 그래프를 합쳐놓은 것이다\n \n    fig = make_subplots(rows = 1, cols = 4, \n                    shared_yaxes=True, \n                    vertical_spacing = 0.05)\n \n위에처럼 행 열을 지정해줘야하는데\n내가 그린 그래프는 1행 4열 그래프이다\n\nadd_trace를 이용해 그래프를 그려주면 된다\n\nsubplot을 사용하지 않고 그냥 add_trace만 이용해도 되는데,\n그럴경우에는 아래 사진처럼 그래프 x축이 분리되지 않고 이어진다.\n\n```python\nfig = make_subplots(rows = 1, cols = 4, \n                    shared_yaxes=True, \n                    vertical_spacing = 0.05)\n\nfig.add_trace(go.Bar(x = dfCh_Edu21['Dgree'], \n                     y = dfCh_Edu21['%'], \n                     text = dfCh_Edu21['%'].astype(str) + \"%\", \n                     textposition='outside',\n                     name='China',\n                     marker_color='#88BFBA'), \n                     row = 1, col = 1)\n\nfig.add_trace(go.Bar(x = dfJp_Edu21['Dgree'], \n                     y = dfJp_Edu21['%'], \n                     text = dfJp_Edu21['%'].astype(str) + \"%\", \n                     textposition='outside',\n                     name='Japan',\n                     marker_color='#CDD9A3'), \n                      row = 1, col = 2)\n\nfig.add_trace(go.Bar(x = dfKo_Edu21['Dgree'], \n                     y = dfKo_Edu21['%'], \n                     text = dfKo_Edu21['%'].astype(str) + \"%\", \n                     textposition='outside',\n                     name='South Korea',\n                     marker_color='#F28705'), \n                      row = 1, col = 3)\n\nfig.add_trace(go.Bar(x = dfTw_Edu21['Dgree'], \n                     y = dfTw_Edu21['%'], \n                     text = dfTw_Edu21['%'].astype(str) + \"%\", \n                     textposition='outside',\n                     name='Taiwan',\n                     marker_color='#D9946C'), \n                     row = 1, col = 4)\n\nfig.update_layout(showlegend=True,title='<b>Degree in East Asia</b>',title_font_size=22,\n                  margin = dict(t=200, l=100, r=50, b=200),\n                  height=700, width=700)\nfig.update_traces(hovertemplate='<b>Percent</b>: %{y}%<br>'+\n                                '<b>Degree</b>: %{x}<br>')\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\nfig.update_layout(legend=dict(\n    orientation=\"h\",\n    yanchor=\"bottom\",\n    y=1.1,\n    xanchor=\"right\",\n    x=1))\nfig.add_annotation(dict(font=dict(size=14),\n                                    x=0.8,\n                                    y=-0.5,\n                                    showarrow=False,\n                                    text=\"@green_yhjw\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\nfig.show()\n```\n<br>\n\n### **Bar Graph5**\n---\n\n![](/images/plotlybar/newplot4.png)\n\n\n    fig.update_layout(barmode='stack')\n위의 한 줄을 추가해주면 그래프가 Stack으로 쌓여서 그려진다.\n\n![](/images/plotlybar/newplot5.png)\n위의 한 줄을 뺏을때는 이렇게 따로따로 분리되어서 그려진다.\n\n```python\nfig = go.Figure()\nfig.add_trace(go.Bar(x = df21_Ea_DS_salary.index, \n                     y = df21_Ea_DS_salary['Data Scientist'], \n                     name = \"Data Scientist\", \n                     text = df21_Ea_DS_salary['Data Scientist'].astype(str) + \"%\", \n                     textposition='auto', marker_color='#F2798F'))\n\nfig.add_trace(go.Bar(x = df21_Ea_DS_salary.index, \n                     y = df21_Ea_DS_salary['Machine Learning Engineer'], \n                     name = \"Machine Learning Engineer\", \n                     text = df21_Ea_DS_salary['Machine Learning Engineer'].astype(str) + \"%\", \n                     textposition='auto', marker_color='#CDD9A3'))\n\nfig.add_trace(go.Bar(x = df21_Ea_DS_salary.index, \n                     y = df21_Ea_DS_salary['Research Scientist'], \n                     name = \"Research Scientist\", \n                     text = df21_Ea_DS_salary['Research Scientist'].astype(str) + \"%\", \n                     textposition='auto', marker_color='#88BFBA'))\n\nfig.update_layout(barmode='stack',\n                 showlegend=True,\n                 height=600, width=700,\n                 title_text=\"<b>Data Scientist's Salary in East Asia</b>\",\n                 title_x=0.5,\n                 title_font_size=20, \n                  margin=dict(l=100, r=100, t=100, b=100))\nfig.update_traces(hovertemplate='<b>Percent</b>: %{y}%<br>'+\n                                '<b>Salary</b>: %{x}$<br>')\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\nfig.update_layout(legend=dict(\n    orientation=\"v\",\n    yanchor=\"bottom\",\n    y=0.8,\n    xanchor=\"right\",\n    x=1.2))\n\nfig.show()\n```\n<br>\n\n### **느낀점**\n---\n처음 그래프를 그리면서 bar그래프에도 다양한 종류가 있는데 \n내가 원하는대로 그리기가 쉽지 않았다\n하지만 사실 복잡한게 아니기에 조금만 공부하면 쉽게 그릴수 있다\n모를때는 사실 plotly 원문 사이트를 들어가서 그려보는게 도움이 됬다\n위의 그래프를 참고해서 그리면 된다\n누군가에게 도움이 되었기를...\n\n<br>\n<br>\n<br>\n<br>","source":"_posts/plotly_bar.md","raw":"---\ntitle: Plotly를 이용해 다양한 bar 그래프 그리기\ncategories:\n- 파이썬\n- Python Plotly\ndate: 2021-11-28\ntags: plotly, bar graph, bar\nthumbnail: /images/plotlybar/newplot.png\n---\n  \n### **Bar Graph 1**\n---\n\n![](/images/plotlybar/newplot.png)\n\n\n위의 그래프 경우는 bar 그래프만 있는게 아니고 scatter 그래프도 같이 있다.\n따라서 그래프 2개를 하나의 페이지에 그린다고 볼 수 있다.\n\n두개의 그래프를 동시에 그릴때 add_trace를 이용해서 하나씩 그린다고 보면 된다.\nfig.add_trace(go.Bar)      --> 그래프-1\nfig.add_trace(go.Scatter)  --> 그래프-2\n\n<br>\n\nx축은 공통사항이므로 같은 값을 넣어주었다.\ny는 값이 다르므로 각각의 값을 넣어주었다\n\n아래는 왼쪽 오른쪽 각각의 축을 나타냈고, 각각의 그래프에 지정해주었다.\nyaxis = \"y1\"   \nyaxis = \"y2\"\n\n나머지 fig.update_trace, fig.update_layout, fig.add_annotation는 그래프를 꾸며주는 역할을 한다.\n<br>\n\n\n\n```python\nfig = go.Figure()\n\nfig.add_trace(go.Bar(x=years, y=[len(df17_Ea),len(df18_Ea), len(df19_Ea),len(df20_Ea),len(df21_Ea)],\n                marker_color='#F2D64B',\n                yaxis = \"y1\",\n                name='East Asia',\n                text= percent,\n                texttemplate='%{text}  %', \n                textposition='outside',\n                hovertemplate='<b>KaggleUser</b>: %{x}<br>'+ '<b>Count</b>: %{y}'))\n\nfig.add_trace(go.Scatter(name = \"World\",\n           x=years, \n           y=[len(df17), len(df18), len(df19), len(df20), len(df21)],\n           marker_color='#979DA6',\n           mode = 'lines+markers', # please check option here\n           yaxis = \"y2\"))\n\nfig.update_traces(hovertemplate='<b>Count</b>: %{y}<br><extra></extra>'+\n                                '<b>Year</b>: %{x}<br>')\n\nfig.update_layout(yaxis  = dict(title = \"Kaggle User in East Asia\",showgrid = False, range=[0, len(df21_Ea)*1.2]),\n                  yaxis2 = dict(title = \"Kaggle User in World\", overlaying = \"y1\", side = \"right\", \n                  showgrid = False, \n                  zeroline = False, range=[0, len(df21)*1.2]))\n\nfig.update_layout(title='<b>Kaggle Users</b>',title_font_size=20,\n                  margin = dict(t=200, l=100, r=50, b=200),\n                  height=700, width=700)\n\nfig.update_layout(legend=dict(\n    orientation=\"h\",\n    yanchor=\"bottom\",\n    y=1.1,\n    xanchor=\"right\",\n    x=1))\nfig.add_annotation(dict(font=dict(size=14),\n                                    x=0.9,\n                                    y=-0.25,\n                                    showarrow=False,\n                                    text=\"@green_yhjw\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\nfig.show()\n\n```\n<br>\n\n\n### **Bar Graph2**\n---\n\n![](/images/plotlybar/newplot1.png)\n\n하나의 그래프에 여러개의 데이터를 표현할때\ndata=[]는 왜 쓸까? 안쓰면 에러남 의문\n\n똑같이 go.bar로 x축 y축에 각각의 값을 넣어준다.\n이때 내가 그리고자 하는 그래프가 총 5개이니까 하나씩 설정해서 그린다고 생각하면 된다.\n\n다른 방법으로는 add_trace 이용해서 그려도 된다\n```python\nfig = go.Figure(data=[\n    go.Bar(name='2017', x=df5years['Country'], y=df5years['17'], marker_color='#F2798F',text=df5years['17'].tolist(), textposition='outside'),\n    go.Bar(name='2018', x=df5years['Country'], y=df5years['18'], marker_color='#88BFBA',text=df5years['18'].fillna(0).astype(int).tolist(), textposition='outside',),\n    go.Bar(name='2019', x=df5years['Country'], y=df5years['19'], marker_color='#CDD9A3',text=df5years['19'].tolist(), textposition='outside'),\n    go.Bar(name='2020', x=df5years['Country'], y=df5years['20'], marker_color='#F28705',text=df5years['20'].tolist(), textposition='outside',),\n    go.Bar(name='2021', x=df5years['Country'], y=df5years['21'], marker_color='#D9946C',text=df5years['21'].tolist(), textposition='outside')])\n\nfig.update_layout(title='<b>Kaggle User in East Asia</b>',title_font_size=23,\n                  margin = dict(t=200, l=100, r=10, b=200),\n                  height=600, width=700)\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\nfig.update_traces(hovertemplate='<b>Count</b>: %{y}')\nfig.update_layout(legend=dict(\n    orientation=\"v\",\n    yanchor=\"bottom\",\n    y=1.15,\n    xanchor=\"right\",\n    x=1))\nfig.add_annotation(dict(font=dict(size=14),\n                                    x=0.8,\n                                    y=-0.5,\n                                    showarrow=False,\n                                    text=\"@green_yhjw\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\nfig.show()\n```\n<br>\n\n### **Bar Graph3**\n---\n\n![](/images/plotlybar/newplot2.png)\n\n위의 그래프는 수평으로 그린 그래프이다.\norientation='h' -> 수평으로 그래프를 그린다\norientation='v' -> 수직으로 그래프를 그린다\n\nbase = 0는 값의 기준점이 0 이라는 의미\n\ny값은 같지만, x값은 0을 기준으로 -와 +로 나누어지기 때문에\n한쪽값에 -을 붙여야 한다\n나는 x=World, x=-East_Asia 각각 이렇게 설정해주었다\n\n```python\nfig = go.Figure(data=[\n    go.Bar(y=y, x=World, orientation='h', name=\"World\", base=0, hovertemplate='<b>World</b>: %{x}%<br>', marker_color='#979DA6', text=World, textposition='outside'),\n    go.Bar(y=y, x=-East_Asia, orientation='h', name=\"East Asia\", base=0, hovertemplate='<b>East Asia</b>: %{x}%<br>', marker_color='#F2D64B', text=East_Asia, textposition='outside')])\n\nfig.update_layout(barmode='stack')\nfig.update_layout(title='<b>World vs EastAsia</b>',title_font_size=22,\n                  margin = dict(t=200, l=100, r=50, b=200),\n                  height=700, width=750,\n                  xaxis_title=None,\n                  yaxis_title=None)\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\nfig.update_layout(legend=dict(\n    orientation=\"h\",\n    yanchor=\"bottom\",\n    y=1.1,\n    xanchor=\"right\",\n    x=1))\nfig.add_annotation(dict(font=dict(size=14),\n                                    x=0.8,\n                                    y=-0.5,\n                                    showarrow=False,\n                                    text=\"@green_yhjw\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\nfig.show()\n```\n<br>\n\n\n### **Bar Graph4**\n---\n\n![](/images/plotlybar/newplot3.png)\n\nsubplot을 이용해 그려준것이다\nsubplot이란 하나의 페이지에 여러개의 그래프를 합쳐놓은 것이다\n \n    fig = make_subplots(rows = 1, cols = 4, \n                    shared_yaxes=True, \n                    vertical_spacing = 0.05)\n \n위에처럼 행 열을 지정해줘야하는데\n내가 그린 그래프는 1행 4열 그래프이다\n\nadd_trace를 이용해 그래프를 그려주면 된다\n\nsubplot을 사용하지 않고 그냥 add_trace만 이용해도 되는데,\n그럴경우에는 아래 사진처럼 그래프 x축이 분리되지 않고 이어진다.\n\n```python\nfig = make_subplots(rows = 1, cols = 4, \n                    shared_yaxes=True, \n                    vertical_spacing = 0.05)\n\nfig.add_trace(go.Bar(x = dfCh_Edu21['Dgree'], \n                     y = dfCh_Edu21['%'], \n                     text = dfCh_Edu21['%'].astype(str) + \"%\", \n                     textposition='outside',\n                     name='China',\n                     marker_color='#88BFBA'), \n                     row = 1, col = 1)\n\nfig.add_trace(go.Bar(x = dfJp_Edu21['Dgree'], \n                     y = dfJp_Edu21['%'], \n                     text = dfJp_Edu21['%'].astype(str) + \"%\", \n                     textposition='outside',\n                     name='Japan',\n                     marker_color='#CDD9A3'), \n                      row = 1, col = 2)\n\nfig.add_trace(go.Bar(x = dfKo_Edu21['Dgree'], \n                     y = dfKo_Edu21['%'], \n                     text = dfKo_Edu21['%'].astype(str) + \"%\", \n                     textposition='outside',\n                     name='South Korea',\n                     marker_color='#F28705'), \n                      row = 1, col = 3)\n\nfig.add_trace(go.Bar(x = dfTw_Edu21['Dgree'], \n                     y = dfTw_Edu21['%'], \n                     text = dfTw_Edu21['%'].astype(str) + \"%\", \n                     textposition='outside',\n                     name='Taiwan',\n                     marker_color='#D9946C'), \n                     row = 1, col = 4)\n\nfig.update_layout(showlegend=True,title='<b>Degree in East Asia</b>',title_font_size=22,\n                  margin = dict(t=200, l=100, r=50, b=200),\n                  height=700, width=700)\nfig.update_traces(hovertemplate='<b>Percent</b>: %{y}%<br>'+\n                                '<b>Degree</b>: %{x}<br>')\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\nfig.update_layout(legend=dict(\n    orientation=\"h\",\n    yanchor=\"bottom\",\n    y=1.1,\n    xanchor=\"right\",\n    x=1))\nfig.add_annotation(dict(font=dict(size=14),\n                                    x=0.8,\n                                    y=-0.5,\n                                    showarrow=False,\n                                    text=\"@green_yhjw\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\nfig.show()\n```\n<br>\n\n### **Bar Graph5**\n---\n\n![](/images/plotlybar/newplot4.png)\n\n\n    fig.update_layout(barmode='stack')\n위의 한 줄을 추가해주면 그래프가 Stack으로 쌓여서 그려진다.\n\n![](/images/plotlybar/newplot5.png)\n위의 한 줄을 뺏을때는 이렇게 따로따로 분리되어서 그려진다.\n\n```python\nfig = go.Figure()\nfig.add_trace(go.Bar(x = df21_Ea_DS_salary.index, \n                     y = df21_Ea_DS_salary['Data Scientist'], \n                     name = \"Data Scientist\", \n                     text = df21_Ea_DS_salary['Data Scientist'].astype(str) + \"%\", \n                     textposition='auto', marker_color='#F2798F'))\n\nfig.add_trace(go.Bar(x = df21_Ea_DS_salary.index, \n                     y = df21_Ea_DS_salary['Machine Learning Engineer'], \n                     name = \"Machine Learning Engineer\", \n                     text = df21_Ea_DS_salary['Machine Learning Engineer'].astype(str) + \"%\", \n                     textposition='auto', marker_color='#CDD9A3'))\n\nfig.add_trace(go.Bar(x = df21_Ea_DS_salary.index, \n                     y = df21_Ea_DS_salary['Research Scientist'], \n                     name = \"Research Scientist\", \n                     text = df21_Ea_DS_salary['Research Scientist'].astype(str) + \"%\", \n                     textposition='auto', marker_color='#88BFBA'))\n\nfig.update_layout(barmode='stack',\n                 showlegend=True,\n                 height=600, width=700,\n                 title_text=\"<b>Data Scientist's Salary in East Asia</b>\",\n                 title_x=0.5,\n                 title_font_size=20, \n                  margin=dict(l=100, r=100, t=100, b=100))\nfig.update_traces(hovertemplate='<b>Percent</b>: %{y}%<br>'+\n                                '<b>Salary</b>: %{x}$<br>')\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\nfig.update_layout(legend=dict(\n    orientation=\"v\",\n    yanchor=\"bottom\",\n    y=0.8,\n    xanchor=\"right\",\n    x=1.2))\n\nfig.show()\n```\n<br>\n\n### **느낀점**\n---\n처음 그래프를 그리면서 bar그래프에도 다양한 종류가 있는데 \n내가 원하는대로 그리기가 쉽지 않았다\n하지만 사실 복잡한게 아니기에 조금만 공부하면 쉽게 그릴수 있다\n모를때는 사실 plotly 원문 사이트를 들어가서 그려보는게 도움이 됬다\n위의 그래프를 참고해서 그리면 된다\n누군가에게 도움이 되었기를...\n\n<br>\n<br>\n<br>\n<br>","slug":"plotly-bar","published":1,"updated":"2022-01-03T12:20:08.049Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cky2hohev001z5nrjh7ap4ivd","content":"<h3 id=\"Bar-Graph-1\"><a href=\"#Bar-Graph-1\" class=\"headerlink\" title=\"Bar Graph 1\"></a><strong>Bar Graph 1</strong></h3><hr>\n<p><img src=\"/images/plotlybar/newplot.png\"></p>\n<p>위의 그래프 경우는 bar 그래프만 있는게 아니고 scatter 그래프도 같이 있다.<br>따라서 그래프 2개를 하나의 페이지에 그린다고 볼 수 있다.</p>\n<p>두개의 그래프를 동시에 그릴때 add_trace를 이용해서 하나씩 그린다고 보면 된다.<br>fig.add_trace(go.Bar)      –&gt; 그래프-1<br>fig.add_trace(go.Scatter)  –&gt; 그래프-2</p>\n<br>\n\n<p>x축은 공통사항이므로 같은 값을 넣어주었다.<br>y는 값이 다르므로 각각의 값을 넣어주었다</p>\n<p>아래는 왼쪽 오른쪽 각각의 축을 나타냈고, 각각의 그래프에 지정해주었다.<br>yaxis = “y1”<br>yaxis = “y2”</p>\n<p>나머지 fig.update_trace, fig.update_layout, fig.add_annotation는 그래프를 꾸며주는 역할을 한다.<br><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fig = go.Figure()</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_trace(go.Bar(x=years, y=[<span class=\"built_in\">len</span>(df17_Ea),<span class=\"built_in\">len</span>(df18_Ea), <span class=\"built_in\">len</span>(df19_Ea),<span class=\"built_in\">len</span>(df20_Ea),<span class=\"built_in\">len</span>(df21_Ea)],</span><br><span class=\"line\">                marker_color=<span class=\"string\">&#x27;#F2D64B&#x27;</span>,</span><br><span class=\"line\">                yaxis = <span class=\"string\">&quot;y1&quot;</span>,</span><br><span class=\"line\">                name=<span class=\"string\">&#x27;East Asia&#x27;</span>,</span><br><span class=\"line\">                text= percent,</span><br><span class=\"line\">                texttemplate=<span class=\"string\">&#x27;%&#123;text&#125;  %&#x27;</span>, </span><br><span class=\"line\">                textposition=<span class=\"string\">&#x27;outside&#x27;</span>,</span><br><span class=\"line\">                hovertemplate=<span class=\"string\">&#x27;&lt;b&gt;KaggleUser&lt;/b&gt;: %&#123;x&#125;&lt;br&gt;&#x27;</span>+ <span class=\"string\">&#x27;&lt;b&gt;Count&lt;/b&gt;: %&#123;y&#125;&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_trace(go.Scatter(name = <span class=\"string\">&quot;World&quot;</span>,</span><br><span class=\"line\">           x=years, </span><br><span class=\"line\">           y=[<span class=\"built_in\">len</span>(df17), <span class=\"built_in\">len</span>(df18), <span class=\"built_in\">len</span>(df19), <span class=\"built_in\">len</span>(df20), <span class=\"built_in\">len</span>(df21)],</span><br><span class=\"line\">           marker_color=<span class=\"string\">&#x27;#979DA6&#x27;</span>,</span><br><span class=\"line\">           mode = <span class=\"string\">&#x27;lines+markers&#x27;</span>, <span class=\"comment\"># please check option here</span></span><br><span class=\"line\">           yaxis = <span class=\"string\">&quot;y2&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_traces(hovertemplate=<span class=\"string\">&#x27;&lt;b&gt;Count&lt;/b&gt;: %&#123;y&#125;&lt;br&gt;&lt;extra&gt;&lt;/extra&gt;&#x27;</span>+</span><br><span class=\"line\">                                <span class=\"string\">&#x27;&lt;b&gt;Year&lt;/b&gt;: %&#123;x&#125;&lt;br&gt;&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(yaxis  = <span class=\"built_in\">dict</span>(title = <span class=\"string\">&quot;Kaggle User in East Asia&quot;</span>,showgrid = <span class=\"literal\">False</span>, <span class=\"built_in\">range</span>=[<span class=\"number\">0</span>, <span class=\"built_in\">len</span>(df21_Ea)*<span class=\"number\">1.2</span>]),</span><br><span class=\"line\">                  yaxis2 = <span class=\"built_in\">dict</span>(title = <span class=\"string\">&quot;Kaggle User in World&quot;</span>, overlaying = <span class=\"string\">&quot;y1&quot;</span>, side = <span class=\"string\">&quot;right&quot;</span>, </span><br><span class=\"line\">                  showgrid = <span class=\"literal\">False</span>, </span><br><span class=\"line\">                  zeroline = <span class=\"literal\">False</span>, <span class=\"built_in\">range</span>=[<span class=\"number\">0</span>, <span class=\"built_in\">len</span>(df21)*<span class=\"number\">1.2</span>]))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(title=<span class=\"string\">&#x27;&lt;b&gt;Kaggle Users&lt;/b&gt;&#x27;</span>,title_font_size=<span class=\"number\">20</span>,</span><br><span class=\"line\">                  margin = <span class=\"built_in\">dict</span>(t=<span class=\"number\">200</span>, l=<span class=\"number\">100</span>, r=<span class=\"number\">50</span>, b=<span class=\"number\">200</span>),</span><br><span class=\"line\">                  height=<span class=\"number\">700</span>, width=<span class=\"number\">700</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(legend=<span class=\"built_in\">dict</span>(</span><br><span class=\"line\">    orientation=<span class=\"string\">&quot;h&quot;</span>,</span><br><span class=\"line\">    yanchor=<span class=\"string\">&quot;bottom&quot;</span>,</span><br><span class=\"line\">    y=<span class=\"number\">1.1</span>,</span><br><span class=\"line\">    xanchor=<span class=\"string\">&quot;right&quot;</span>,</span><br><span class=\"line\">    x=<span class=\"number\">1</span>))</span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">14</span>),</span><br><span class=\"line\">                                    x=<span class=\"number\">0.9</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.25</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;@green_yhjw&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\">fig.show()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<br>\n\n\n<h3 id=\"Bar-Graph2\"><a href=\"#Bar-Graph2\" class=\"headerlink\" title=\"Bar Graph2\"></a><strong>Bar Graph2</strong></h3><hr>\n<p><img src=\"/images/plotlybar/newplot1.png\"></p>\n<p>하나의 그래프에 여러개의 데이터를 표현할때<br>data=[]는 왜 쓸까? 안쓰면 에러남 의문</p>\n<p>똑같이 go.bar로 x축 y축에 각각의 값을 넣어준다.<br>이때 내가 그리고자 하는 그래프가 총 5개이니까 하나씩 설정해서 그린다고 생각하면 된다.</p>\n<p>다른 방법으로는 add_trace 이용해서 그려도 된다</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fig = go.Figure(data=[</span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;2017&#x27;</span>, x=df5years[<span class=\"string\">&#x27;Country&#x27;</span>], y=df5years[<span class=\"string\">&#x27;17&#x27;</span>], marker_color=<span class=\"string\">&#x27;#F2798F&#x27;</span>,text=df5years[<span class=\"string\">&#x27;17&#x27;</span>].tolist(), textposition=<span class=\"string\">&#x27;outside&#x27;</span>),</span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;2018&#x27;</span>, x=df5years[<span class=\"string\">&#x27;Country&#x27;</span>], y=df5years[<span class=\"string\">&#x27;18&#x27;</span>], marker_color=<span class=\"string\">&#x27;#88BFBA&#x27;</span>,text=df5years[<span class=\"string\">&#x27;18&#x27;</span>].fillna(<span class=\"number\">0</span>).astype(<span class=\"built_in\">int</span>).tolist(), textposition=<span class=\"string\">&#x27;outside&#x27;</span>,),</span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;2019&#x27;</span>, x=df5years[<span class=\"string\">&#x27;Country&#x27;</span>], y=df5years[<span class=\"string\">&#x27;19&#x27;</span>], marker_color=<span class=\"string\">&#x27;#CDD9A3&#x27;</span>,text=df5years[<span class=\"string\">&#x27;19&#x27;</span>].tolist(), textposition=<span class=\"string\">&#x27;outside&#x27;</span>),</span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;2020&#x27;</span>, x=df5years[<span class=\"string\">&#x27;Country&#x27;</span>], y=df5years[<span class=\"string\">&#x27;20&#x27;</span>], marker_color=<span class=\"string\">&#x27;#F28705&#x27;</span>,text=df5years[<span class=\"string\">&#x27;20&#x27;</span>].tolist(), textposition=<span class=\"string\">&#x27;outside&#x27;</span>,),</span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;2021&#x27;</span>, x=df5years[<span class=\"string\">&#x27;Country&#x27;</span>], y=df5years[<span class=\"string\">&#x27;21&#x27;</span>], marker_color=<span class=\"string\">&#x27;#D9946C&#x27;</span>,text=df5years[<span class=\"string\">&#x27;21&#x27;</span>].tolist(), textposition=<span class=\"string\">&#x27;outside&#x27;</span>)])</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(title=<span class=\"string\">&#x27;&lt;b&gt;Kaggle User in East Asia&lt;/b&gt;&#x27;</span>,title_font_size=<span class=\"number\">23</span>,</span><br><span class=\"line\">                  margin = <span class=\"built_in\">dict</span>(t=<span class=\"number\">200</span>, l=<span class=\"number\">100</span>, r=<span class=\"number\">10</span>, b=<span class=\"number\">200</span>),</span><br><span class=\"line\">                  height=<span class=\"number\">600</span>, width=<span class=\"number\">700</span>)</span><br><span class=\"line\">fig.update_xaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\">fig.update_yaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\">fig.update_traces(hovertemplate=<span class=\"string\">&#x27;&lt;b&gt;Count&lt;/b&gt;: %&#123;y&#125;&#x27;</span>)</span><br><span class=\"line\">fig.update_layout(legend=<span class=\"built_in\">dict</span>(</span><br><span class=\"line\">    orientation=<span class=\"string\">&quot;v&quot;</span>,</span><br><span class=\"line\">    yanchor=<span class=\"string\">&quot;bottom&quot;</span>,</span><br><span class=\"line\">    y=<span class=\"number\">1.15</span>,</span><br><span class=\"line\">    xanchor=<span class=\"string\">&quot;right&quot;</span>,</span><br><span class=\"line\">    x=<span class=\"number\">1</span>))</span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">14</span>),</span><br><span class=\"line\">                                    x=<span class=\"number\">0.8</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.5</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;@green_yhjw&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n<br>\n\n<h3 id=\"Bar-Graph3\"><a href=\"#Bar-Graph3\" class=\"headerlink\" title=\"Bar Graph3\"></a><strong>Bar Graph3</strong></h3><hr>\n<p><img src=\"/images/plotlybar/newplot2.png\"></p>\n<p>위의 그래프는 수평으로 그린 그래프이다.<br>orientation=’h’ -&gt; 수평으로 그래프를 그린다<br>orientation=’v’ -&gt; 수직으로 그래프를 그린다</p>\n<p>base = 0는 값의 기준점이 0 이라는 의미</p>\n<p>y값은 같지만, x값은 0을 기준으로 -와 +로 나누어지기 때문에<br>한쪽값에 -을 붙여야 한다<br>나는 x=World, x=-East_Asia 각각 이렇게 설정해주었다</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fig = go.Figure(data=[</span><br><span class=\"line\">    go.Bar(y=y, x=World, orientation=<span class=\"string\">&#x27;h&#x27;</span>, name=<span class=\"string\">&quot;World&quot;</span>, base=<span class=\"number\">0</span>, hovertemplate=<span class=\"string\">&#x27;&lt;b&gt;World&lt;/b&gt;: %&#123;x&#125;%&lt;br&gt;&#x27;</span>, marker_color=<span class=\"string\">&#x27;#979DA6&#x27;</span>, text=World, textposition=<span class=\"string\">&#x27;outside&#x27;</span>),</span><br><span class=\"line\">    go.Bar(y=y, x=-East_Asia, orientation=<span class=\"string\">&#x27;h&#x27;</span>, name=<span class=\"string\">&quot;East Asia&quot;</span>, base=<span class=\"number\">0</span>, hovertemplate=<span class=\"string\">&#x27;&lt;b&gt;East Asia&lt;/b&gt;: %&#123;x&#125;%&lt;br&gt;&#x27;</span>, marker_color=<span class=\"string\">&#x27;#F2D64B&#x27;</span>, text=East_Asia, textposition=<span class=\"string\">&#x27;outside&#x27;</span>)])</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(barmode=<span class=\"string\">&#x27;stack&#x27;</span>)</span><br><span class=\"line\">fig.update_layout(title=<span class=\"string\">&#x27;&lt;b&gt;World vs EastAsia&lt;/b&gt;&#x27;</span>,title_font_size=<span class=\"number\">22</span>,</span><br><span class=\"line\">                  margin = <span class=\"built_in\">dict</span>(t=<span class=\"number\">200</span>, l=<span class=\"number\">100</span>, r=<span class=\"number\">50</span>, b=<span class=\"number\">200</span>),</span><br><span class=\"line\">                  height=<span class=\"number\">700</span>, width=<span class=\"number\">750</span>,</span><br><span class=\"line\">                  xaxis_title=<span class=\"literal\">None</span>,</span><br><span class=\"line\">                  yaxis_title=<span class=\"literal\">None</span>)</span><br><span class=\"line\">fig.update_xaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\">fig.update_yaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\">fig.update_layout(legend=<span class=\"built_in\">dict</span>(</span><br><span class=\"line\">    orientation=<span class=\"string\">&quot;h&quot;</span>,</span><br><span class=\"line\">    yanchor=<span class=\"string\">&quot;bottom&quot;</span>,</span><br><span class=\"line\">    y=<span class=\"number\">1.1</span>,</span><br><span class=\"line\">    xanchor=<span class=\"string\">&quot;right&quot;</span>,</span><br><span class=\"line\">    x=<span class=\"number\">1</span>))</span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">14</span>),</span><br><span class=\"line\">                                    x=<span class=\"number\">0.8</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.5</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;@green_yhjw&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n<br>\n\n\n<h3 id=\"Bar-Graph4\"><a href=\"#Bar-Graph4\" class=\"headerlink\" title=\"Bar Graph4\"></a><strong>Bar Graph4</strong></h3><hr>\n<p><img src=\"/images/plotlybar/newplot3.png\"></p>\n<p>subplot을 이용해 그려준것이다<br>subplot이란 하나의 페이지에 여러개의 그래프를 합쳐놓은 것이다</p>\n<pre><code>fig = make_subplots(rows = 1, cols = 4, \n                shared_yaxes=True, \n                vertical_spacing = 0.05)\n</code></pre>\n<p>위에처럼 행 열을 지정해줘야하는데<br>내가 그린 그래프는 1행 4열 그래프이다</p>\n<p>add_trace를 이용해 그래프를 그려주면 된다</p>\n<p>subplot을 사용하지 않고 그냥 add_trace만 이용해도 되는데,<br>그럴경우에는 아래 사진처럼 그래프 x축이 분리되지 않고 이어진다.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fig = make_subplots(rows = <span class=\"number\">1</span>, cols = <span class=\"number\">4</span>, </span><br><span class=\"line\">                    shared_yaxes=<span class=\"literal\">True</span>, </span><br><span class=\"line\">                    vertical_spacing = <span class=\"number\">0.05</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_trace(go.Bar(x = dfCh_Edu21[<span class=\"string\">&#x27;Dgree&#x27;</span>], </span><br><span class=\"line\">                     y = dfCh_Edu21[<span class=\"string\">&#x27;%&#x27;</span>], </span><br><span class=\"line\">                     text = dfCh_Edu21[<span class=\"string\">&#x27;%&#x27;</span>].astype(<span class=\"built_in\">str</span>) + <span class=\"string\">&quot;%&quot;</span>, </span><br><span class=\"line\">                     textposition=<span class=\"string\">&#x27;outside&#x27;</span>,</span><br><span class=\"line\">                     name=<span class=\"string\">&#x27;China&#x27;</span>,</span><br><span class=\"line\">                     marker_color=<span class=\"string\">&#x27;#88BFBA&#x27;</span>), </span><br><span class=\"line\">                     row = <span class=\"number\">1</span>, col = <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_trace(go.Bar(x = dfJp_Edu21[<span class=\"string\">&#x27;Dgree&#x27;</span>], </span><br><span class=\"line\">                     y = dfJp_Edu21[<span class=\"string\">&#x27;%&#x27;</span>], </span><br><span class=\"line\">                     text = dfJp_Edu21[<span class=\"string\">&#x27;%&#x27;</span>].astype(<span class=\"built_in\">str</span>) + <span class=\"string\">&quot;%&quot;</span>, </span><br><span class=\"line\">                     textposition=<span class=\"string\">&#x27;outside&#x27;</span>,</span><br><span class=\"line\">                     name=<span class=\"string\">&#x27;Japan&#x27;</span>,</span><br><span class=\"line\">                     marker_color=<span class=\"string\">&#x27;#CDD9A3&#x27;</span>), </span><br><span class=\"line\">                      row = <span class=\"number\">1</span>, col = <span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_trace(go.Bar(x = dfKo_Edu21[<span class=\"string\">&#x27;Dgree&#x27;</span>], </span><br><span class=\"line\">                     y = dfKo_Edu21[<span class=\"string\">&#x27;%&#x27;</span>], </span><br><span class=\"line\">                     text = dfKo_Edu21[<span class=\"string\">&#x27;%&#x27;</span>].astype(<span class=\"built_in\">str</span>) + <span class=\"string\">&quot;%&quot;</span>, </span><br><span class=\"line\">                     textposition=<span class=\"string\">&#x27;outside&#x27;</span>,</span><br><span class=\"line\">                     name=<span class=\"string\">&#x27;South Korea&#x27;</span>,</span><br><span class=\"line\">                     marker_color=<span class=\"string\">&#x27;#F28705&#x27;</span>), </span><br><span class=\"line\">                      row = <span class=\"number\">1</span>, col = <span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_trace(go.Bar(x = dfTw_Edu21[<span class=\"string\">&#x27;Dgree&#x27;</span>], </span><br><span class=\"line\">                     y = dfTw_Edu21[<span class=\"string\">&#x27;%&#x27;</span>], </span><br><span class=\"line\">                     text = dfTw_Edu21[<span class=\"string\">&#x27;%&#x27;</span>].astype(<span class=\"built_in\">str</span>) + <span class=\"string\">&quot;%&quot;</span>, </span><br><span class=\"line\">                     textposition=<span class=\"string\">&#x27;outside&#x27;</span>,</span><br><span class=\"line\">                     name=<span class=\"string\">&#x27;Taiwan&#x27;</span>,</span><br><span class=\"line\">                     marker_color=<span class=\"string\">&#x27;#D9946C&#x27;</span>), </span><br><span class=\"line\">                     row = <span class=\"number\">1</span>, col = <span class=\"number\">4</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(showlegend=<span class=\"literal\">True</span>,title=<span class=\"string\">&#x27;&lt;b&gt;Degree in East Asia&lt;/b&gt;&#x27;</span>,title_font_size=<span class=\"number\">22</span>,</span><br><span class=\"line\">                  margin = <span class=\"built_in\">dict</span>(t=<span class=\"number\">200</span>, l=<span class=\"number\">100</span>, r=<span class=\"number\">50</span>, b=<span class=\"number\">200</span>),</span><br><span class=\"line\">                  height=<span class=\"number\">700</span>, width=<span class=\"number\">700</span>)</span><br><span class=\"line\">fig.update_traces(hovertemplate=<span class=\"string\">&#x27;&lt;b&gt;Percent&lt;/b&gt;: %&#123;y&#125;%&lt;br&gt;&#x27;</span>+</span><br><span class=\"line\">                                <span class=\"string\">&#x27;&lt;b&gt;Degree&lt;/b&gt;: %&#123;x&#125;&lt;br&gt;&#x27;</span>)</span><br><span class=\"line\">fig.update_xaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\">fig.update_yaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\">fig.update_layout(legend=<span class=\"built_in\">dict</span>(</span><br><span class=\"line\">    orientation=<span class=\"string\">&quot;h&quot;</span>,</span><br><span class=\"line\">    yanchor=<span class=\"string\">&quot;bottom&quot;</span>,</span><br><span class=\"line\">    y=<span class=\"number\">1.1</span>,</span><br><span class=\"line\">    xanchor=<span class=\"string\">&quot;right&quot;</span>,</span><br><span class=\"line\">    x=<span class=\"number\">1</span>))</span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">14</span>),</span><br><span class=\"line\">                                    x=<span class=\"number\">0.8</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.5</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;@green_yhjw&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n<br>\n\n<h3 id=\"Bar-Graph5\"><a href=\"#Bar-Graph5\" class=\"headerlink\" title=\"Bar Graph5\"></a><strong>Bar Graph5</strong></h3><hr>\n<p><img src=\"/images/plotlybar/newplot4.png\"></p>\n<pre><code>fig.update_layout(barmode=&#39;stack&#39;)\n</code></pre>\n<p>위의 한 줄을 추가해주면 그래프가 Stack으로 쌓여서 그려진다.</p>\n<p><img src=\"/images/plotlybar/newplot5.png\"><br>위의 한 줄을 뺏을때는 이렇게 따로따로 분리되어서 그려진다.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fig = go.Figure()</span><br><span class=\"line\">fig.add_trace(go.Bar(x = df21_Ea_DS_salary.index, </span><br><span class=\"line\">                     y = df21_Ea_DS_salary[<span class=\"string\">&#x27;Data Scientist&#x27;</span>], </span><br><span class=\"line\">                     name = <span class=\"string\">&quot;Data Scientist&quot;</span>, </span><br><span class=\"line\">                     text = df21_Ea_DS_salary[<span class=\"string\">&#x27;Data Scientist&#x27;</span>].astype(<span class=\"built_in\">str</span>) + <span class=\"string\">&quot;%&quot;</span>, </span><br><span class=\"line\">                     textposition=<span class=\"string\">&#x27;auto&#x27;</span>, marker_color=<span class=\"string\">&#x27;#F2798F&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_trace(go.Bar(x = df21_Ea_DS_salary.index, </span><br><span class=\"line\">                     y = df21_Ea_DS_salary[<span class=\"string\">&#x27;Machine Learning Engineer&#x27;</span>], </span><br><span class=\"line\">                     name = <span class=\"string\">&quot;Machine Learning Engineer&quot;</span>, </span><br><span class=\"line\">                     text = df21_Ea_DS_salary[<span class=\"string\">&#x27;Machine Learning Engineer&#x27;</span>].astype(<span class=\"built_in\">str</span>) + <span class=\"string\">&quot;%&quot;</span>, </span><br><span class=\"line\">                     textposition=<span class=\"string\">&#x27;auto&#x27;</span>, marker_color=<span class=\"string\">&#x27;#CDD9A3&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_trace(go.Bar(x = df21_Ea_DS_salary.index, </span><br><span class=\"line\">                     y = df21_Ea_DS_salary[<span class=\"string\">&#x27;Research Scientist&#x27;</span>], </span><br><span class=\"line\">                     name = <span class=\"string\">&quot;Research Scientist&quot;</span>, </span><br><span class=\"line\">                     text = df21_Ea_DS_salary[<span class=\"string\">&#x27;Research Scientist&#x27;</span>].astype(<span class=\"built_in\">str</span>) + <span class=\"string\">&quot;%&quot;</span>, </span><br><span class=\"line\">                     textposition=<span class=\"string\">&#x27;auto&#x27;</span>, marker_color=<span class=\"string\">&#x27;#88BFBA&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(barmode=<span class=\"string\">&#x27;stack&#x27;</span>,</span><br><span class=\"line\">                 showlegend=<span class=\"literal\">True</span>,</span><br><span class=\"line\">                 height=<span class=\"number\">600</span>, width=<span class=\"number\">700</span>,</span><br><span class=\"line\">                 title_text=<span class=\"string\">&quot;&lt;b&gt;Data Scientist&#x27;s Salary in East Asia&lt;/b&gt;&quot;</span>,</span><br><span class=\"line\">                 title_x=<span class=\"number\">0.5</span>,</span><br><span class=\"line\">                 title_font_size=<span class=\"number\">20</span>, </span><br><span class=\"line\">                  margin=<span class=\"built_in\">dict</span>(l=<span class=\"number\">100</span>, r=<span class=\"number\">100</span>, t=<span class=\"number\">100</span>, b=<span class=\"number\">100</span>))</span><br><span class=\"line\">fig.update_traces(hovertemplate=<span class=\"string\">&#x27;&lt;b&gt;Percent&lt;/b&gt;: %&#123;y&#125;%&lt;br&gt;&#x27;</span>+</span><br><span class=\"line\">                                <span class=\"string\">&#x27;&lt;b&gt;Salary&lt;/b&gt;: %&#123;x&#125;$&lt;br&gt;&#x27;</span>)</span><br><span class=\"line\">fig.update_xaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\">fig.update_yaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\">fig.update_layout(legend=<span class=\"built_in\">dict</span>(</span><br><span class=\"line\">    orientation=<span class=\"string\">&quot;v&quot;</span>,</span><br><span class=\"line\">    yanchor=<span class=\"string\">&quot;bottom&quot;</span>,</span><br><span class=\"line\">    y=<span class=\"number\">0.8</span>,</span><br><span class=\"line\">    xanchor=<span class=\"string\">&quot;right&quot;</span>,</span><br><span class=\"line\">    x=<span class=\"number\">1.2</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n<br>\n\n<h3 id=\"느낀점\"><a href=\"#느낀점\" class=\"headerlink\" title=\"느낀점\"></a><strong>느낀점</strong></h3><hr>\n<p>처음 그래프를 그리면서 bar그래프에도 다양한 종류가 있는데<br>내가 원하는대로 그리기가 쉽지 않았다<br>하지만 사실 복잡한게 아니기에 조금만 공부하면 쉽게 그릴수 있다<br>모를때는 사실 plotly 원문 사이트를 들어가서 그려보는게 도움이 됬다<br>위의 그래프를 참고해서 그리면 된다<br>누군가에게 도움이 되었기를…</p>\n<br>\n<br>\n<br>\n<br>","site":{"data":{}},"excerpt":"Bar Graph 1\n\n\n\n\n\n위의 그래프 경우는 bar 그래프만 있는게 아니고 scatter 그래프도 같이 있다.\n따라서 그래프 2개를 하나의 페이지에 그린다고 볼 수 있다.\n\n두개의 그래프를 동시에 그릴때 add_trace를 이용해서 하나씩 그린다고 보면 된다.\nfig.add_trace(go.Bar) –> 그래프-1\nfig.add_trace(go.Scatter) –> 그래프-2\n\n\nx축은 공통사항이므로 같은 값을 넣어주었다.\ny는 값이 다르므로 각각의 값을 넣어주었다\n\n아래는 왼쪽 오른쪽 각각의 축을 나타냈고, 각각의 그래프에 ","more":"<h3 id=\"Bar-Graph-1\"><a href=\"#Bar-Graph-1\" class=\"headerlink\" title=\"Bar Graph 1\"></a><strong>Bar Graph 1</strong></h3><hr>\n<p><img src=\"/images/plotlybar/newplot.png\"></p>\n<p>위의 그래프 경우는 bar 그래프만 있는게 아니고 scatter 그래프도 같이 있다.<br>따라서 그래프 2개를 하나의 페이지에 그린다고 볼 수 있다.</p>\n<p>두개의 그래프를 동시에 그릴때 add_trace를 이용해서 하나씩 그린다고 보면 된다.<br>fig.add_trace(go.Bar)      –&gt; 그래프-1<br>fig.add_trace(go.Scatter)  –&gt; 그래프-2</p>\n<br>\n\n<p>x축은 공통사항이므로 같은 값을 넣어주었다.<br>y는 값이 다르므로 각각의 값을 넣어주었다</p>\n<p>아래는 왼쪽 오른쪽 각각의 축을 나타냈고, 각각의 그래프에 지정해주었다.<br>yaxis = “y1”<br>yaxis = “y2”</p>\n<p>나머지 fig.update_trace, fig.update_layout, fig.add_annotation는 그래프를 꾸며주는 역할을 한다.<br><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fig = go.Figure()</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_trace(go.Bar(x=years, y=[<span class=\"built_in\">len</span>(df17_Ea),<span class=\"built_in\">len</span>(df18_Ea), <span class=\"built_in\">len</span>(df19_Ea),<span class=\"built_in\">len</span>(df20_Ea),<span class=\"built_in\">len</span>(df21_Ea)],</span><br><span class=\"line\">                marker_color=<span class=\"string\">&#x27;#F2D64B&#x27;</span>,</span><br><span class=\"line\">                yaxis = <span class=\"string\">&quot;y1&quot;</span>,</span><br><span class=\"line\">                name=<span class=\"string\">&#x27;East Asia&#x27;</span>,</span><br><span class=\"line\">                text= percent,</span><br><span class=\"line\">                texttemplate=<span class=\"string\">&#x27;%&#123;text&#125;  %&#x27;</span>, </span><br><span class=\"line\">                textposition=<span class=\"string\">&#x27;outside&#x27;</span>,</span><br><span class=\"line\">                hovertemplate=<span class=\"string\">&#x27;&lt;b&gt;KaggleUser&lt;/b&gt;: %&#123;x&#125;&lt;br&gt;&#x27;</span>+ <span class=\"string\">&#x27;&lt;b&gt;Count&lt;/b&gt;: %&#123;y&#125;&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_trace(go.Scatter(name = <span class=\"string\">&quot;World&quot;</span>,</span><br><span class=\"line\">           x=years, </span><br><span class=\"line\">           y=[<span class=\"built_in\">len</span>(df17), <span class=\"built_in\">len</span>(df18), <span class=\"built_in\">len</span>(df19), <span class=\"built_in\">len</span>(df20), <span class=\"built_in\">len</span>(df21)],</span><br><span class=\"line\">           marker_color=<span class=\"string\">&#x27;#979DA6&#x27;</span>,</span><br><span class=\"line\">           mode = <span class=\"string\">&#x27;lines+markers&#x27;</span>, <span class=\"comment\"># please check option here</span></span><br><span class=\"line\">           yaxis = <span class=\"string\">&quot;y2&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_traces(hovertemplate=<span class=\"string\">&#x27;&lt;b&gt;Count&lt;/b&gt;: %&#123;y&#125;&lt;br&gt;&lt;extra&gt;&lt;/extra&gt;&#x27;</span>+</span><br><span class=\"line\">                                <span class=\"string\">&#x27;&lt;b&gt;Year&lt;/b&gt;: %&#123;x&#125;&lt;br&gt;&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(yaxis  = <span class=\"built_in\">dict</span>(title = <span class=\"string\">&quot;Kaggle User in East Asia&quot;</span>,showgrid = <span class=\"literal\">False</span>, <span class=\"built_in\">range</span>=[<span class=\"number\">0</span>, <span class=\"built_in\">len</span>(df21_Ea)*<span class=\"number\">1.2</span>]),</span><br><span class=\"line\">                  yaxis2 = <span class=\"built_in\">dict</span>(title = <span class=\"string\">&quot;Kaggle User in World&quot;</span>, overlaying = <span class=\"string\">&quot;y1&quot;</span>, side = <span class=\"string\">&quot;right&quot;</span>, </span><br><span class=\"line\">                  showgrid = <span class=\"literal\">False</span>, </span><br><span class=\"line\">                  zeroline = <span class=\"literal\">False</span>, <span class=\"built_in\">range</span>=[<span class=\"number\">0</span>, <span class=\"built_in\">len</span>(df21)*<span class=\"number\">1.2</span>]))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(title=<span class=\"string\">&#x27;&lt;b&gt;Kaggle Users&lt;/b&gt;&#x27;</span>,title_font_size=<span class=\"number\">20</span>,</span><br><span class=\"line\">                  margin = <span class=\"built_in\">dict</span>(t=<span class=\"number\">200</span>, l=<span class=\"number\">100</span>, r=<span class=\"number\">50</span>, b=<span class=\"number\">200</span>),</span><br><span class=\"line\">                  height=<span class=\"number\">700</span>, width=<span class=\"number\">700</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(legend=<span class=\"built_in\">dict</span>(</span><br><span class=\"line\">    orientation=<span class=\"string\">&quot;h&quot;</span>,</span><br><span class=\"line\">    yanchor=<span class=\"string\">&quot;bottom&quot;</span>,</span><br><span class=\"line\">    y=<span class=\"number\">1.1</span>,</span><br><span class=\"line\">    xanchor=<span class=\"string\">&quot;right&quot;</span>,</span><br><span class=\"line\">    x=<span class=\"number\">1</span>))</span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">14</span>),</span><br><span class=\"line\">                                    x=<span class=\"number\">0.9</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.25</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;@green_yhjw&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\">fig.show()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<br>\n\n\n<h3 id=\"Bar-Graph2\"><a href=\"#Bar-Graph2\" class=\"headerlink\" title=\"Bar Graph2\"></a><strong>Bar Graph2</strong></h3><hr>\n<p><img src=\"/images/plotlybar/newplot1.png\"></p>\n<p>하나의 그래프에 여러개의 데이터를 표현할때<br>data=[]는 왜 쓸까? 안쓰면 에러남 의문</p>\n<p>똑같이 go.bar로 x축 y축에 각각의 값을 넣어준다.<br>이때 내가 그리고자 하는 그래프가 총 5개이니까 하나씩 설정해서 그린다고 생각하면 된다.</p>\n<p>다른 방법으로는 add_trace 이용해서 그려도 된다</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fig = go.Figure(data=[</span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;2017&#x27;</span>, x=df5years[<span class=\"string\">&#x27;Country&#x27;</span>], y=df5years[<span class=\"string\">&#x27;17&#x27;</span>], marker_color=<span class=\"string\">&#x27;#F2798F&#x27;</span>,text=df5years[<span class=\"string\">&#x27;17&#x27;</span>].tolist(), textposition=<span class=\"string\">&#x27;outside&#x27;</span>),</span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;2018&#x27;</span>, x=df5years[<span class=\"string\">&#x27;Country&#x27;</span>], y=df5years[<span class=\"string\">&#x27;18&#x27;</span>], marker_color=<span class=\"string\">&#x27;#88BFBA&#x27;</span>,text=df5years[<span class=\"string\">&#x27;18&#x27;</span>].fillna(<span class=\"number\">0</span>).astype(<span class=\"built_in\">int</span>).tolist(), textposition=<span class=\"string\">&#x27;outside&#x27;</span>,),</span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;2019&#x27;</span>, x=df5years[<span class=\"string\">&#x27;Country&#x27;</span>], y=df5years[<span class=\"string\">&#x27;19&#x27;</span>], marker_color=<span class=\"string\">&#x27;#CDD9A3&#x27;</span>,text=df5years[<span class=\"string\">&#x27;19&#x27;</span>].tolist(), textposition=<span class=\"string\">&#x27;outside&#x27;</span>),</span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;2020&#x27;</span>, x=df5years[<span class=\"string\">&#x27;Country&#x27;</span>], y=df5years[<span class=\"string\">&#x27;20&#x27;</span>], marker_color=<span class=\"string\">&#x27;#F28705&#x27;</span>,text=df5years[<span class=\"string\">&#x27;20&#x27;</span>].tolist(), textposition=<span class=\"string\">&#x27;outside&#x27;</span>,),</span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;2021&#x27;</span>, x=df5years[<span class=\"string\">&#x27;Country&#x27;</span>], y=df5years[<span class=\"string\">&#x27;21&#x27;</span>], marker_color=<span class=\"string\">&#x27;#D9946C&#x27;</span>,text=df5years[<span class=\"string\">&#x27;21&#x27;</span>].tolist(), textposition=<span class=\"string\">&#x27;outside&#x27;</span>)])</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(title=<span class=\"string\">&#x27;&lt;b&gt;Kaggle User in East Asia&lt;/b&gt;&#x27;</span>,title_font_size=<span class=\"number\">23</span>,</span><br><span class=\"line\">                  margin = <span class=\"built_in\">dict</span>(t=<span class=\"number\">200</span>, l=<span class=\"number\">100</span>, r=<span class=\"number\">10</span>, b=<span class=\"number\">200</span>),</span><br><span class=\"line\">                  height=<span class=\"number\">600</span>, width=<span class=\"number\">700</span>)</span><br><span class=\"line\">fig.update_xaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\">fig.update_yaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\">fig.update_traces(hovertemplate=<span class=\"string\">&#x27;&lt;b&gt;Count&lt;/b&gt;: %&#123;y&#125;&#x27;</span>)</span><br><span class=\"line\">fig.update_layout(legend=<span class=\"built_in\">dict</span>(</span><br><span class=\"line\">    orientation=<span class=\"string\">&quot;v&quot;</span>,</span><br><span class=\"line\">    yanchor=<span class=\"string\">&quot;bottom&quot;</span>,</span><br><span class=\"line\">    y=<span class=\"number\">1.15</span>,</span><br><span class=\"line\">    xanchor=<span class=\"string\">&quot;right&quot;</span>,</span><br><span class=\"line\">    x=<span class=\"number\">1</span>))</span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">14</span>),</span><br><span class=\"line\">                                    x=<span class=\"number\">0.8</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.5</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;@green_yhjw&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n<br>\n\n<h3 id=\"Bar-Graph3\"><a href=\"#Bar-Graph3\" class=\"headerlink\" title=\"Bar Graph3\"></a><strong>Bar Graph3</strong></h3><hr>\n<p><img src=\"/images/plotlybar/newplot2.png\"></p>\n<p>위의 그래프는 수평으로 그린 그래프이다.<br>orientation=’h’ -&gt; 수평으로 그래프를 그린다<br>orientation=’v’ -&gt; 수직으로 그래프를 그린다</p>\n<p>base = 0는 값의 기준점이 0 이라는 의미</p>\n<p>y값은 같지만, x값은 0을 기준으로 -와 +로 나누어지기 때문에<br>한쪽값에 -을 붙여야 한다<br>나는 x=World, x=-East_Asia 각각 이렇게 설정해주었다</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fig = go.Figure(data=[</span><br><span class=\"line\">    go.Bar(y=y, x=World, orientation=<span class=\"string\">&#x27;h&#x27;</span>, name=<span class=\"string\">&quot;World&quot;</span>, base=<span class=\"number\">0</span>, hovertemplate=<span class=\"string\">&#x27;&lt;b&gt;World&lt;/b&gt;: %&#123;x&#125;%&lt;br&gt;&#x27;</span>, marker_color=<span class=\"string\">&#x27;#979DA6&#x27;</span>, text=World, textposition=<span class=\"string\">&#x27;outside&#x27;</span>),</span><br><span class=\"line\">    go.Bar(y=y, x=-East_Asia, orientation=<span class=\"string\">&#x27;h&#x27;</span>, name=<span class=\"string\">&quot;East Asia&quot;</span>, base=<span class=\"number\">0</span>, hovertemplate=<span class=\"string\">&#x27;&lt;b&gt;East Asia&lt;/b&gt;: %&#123;x&#125;%&lt;br&gt;&#x27;</span>, marker_color=<span class=\"string\">&#x27;#F2D64B&#x27;</span>, text=East_Asia, textposition=<span class=\"string\">&#x27;outside&#x27;</span>)])</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(barmode=<span class=\"string\">&#x27;stack&#x27;</span>)</span><br><span class=\"line\">fig.update_layout(title=<span class=\"string\">&#x27;&lt;b&gt;World vs EastAsia&lt;/b&gt;&#x27;</span>,title_font_size=<span class=\"number\">22</span>,</span><br><span class=\"line\">                  margin = <span class=\"built_in\">dict</span>(t=<span class=\"number\">200</span>, l=<span class=\"number\">100</span>, r=<span class=\"number\">50</span>, b=<span class=\"number\">200</span>),</span><br><span class=\"line\">                  height=<span class=\"number\">700</span>, width=<span class=\"number\">750</span>,</span><br><span class=\"line\">                  xaxis_title=<span class=\"literal\">None</span>,</span><br><span class=\"line\">                  yaxis_title=<span class=\"literal\">None</span>)</span><br><span class=\"line\">fig.update_xaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\">fig.update_yaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\">fig.update_layout(legend=<span class=\"built_in\">dict</span>(</span><br><span class=\"line\">    orientation=<span class=\"string\">&quot;h&quot;</span>,</span><br><span class=\"line\">    yanchor=<span class=\"string\">&quot;bottom&quot;</span>,</span><br><span class=\"line\">    y=<span class=\"number\">1.1</span>,</span><br><span class=\"line\">    xanchor=<span class=\"string\">&quot;right&quot;</span>,</span><br><span class=\"line\">    x=<span class=\"number\">1</span>))</span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">14</span>),</span><br><span class=\"line\">                                    x=<span class=\"number\">0.8</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.5</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;@green_yhjw&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n<br>\n\n\n<h3 id=\"Bar-Graph4\"><a href=\"#Bar-Graph4\" class=\"headerlink\" title=\"Bar Graph4\"></a><strong>Bar Graph4</strong></h3><hr>\n<p><img src=\"/images/plotlybar/newplot3.png\"></p>\n<p>subplot을 이용해 그려준것이다<br>subplot이란 하나의 페이지에 여러개의 그래프를 합쳐놓은 것이다</p>\n<pre><code>fig = make_subplots(rows = 1, cols = 4, \n                shared_yaxes=True, \n                vertical_spacing = 0.05)\n</code></pre>\n<p>위에처럼 행 열을 지정해줘야하는데<br>내가 그린 그래프는 1행 4열 그래프이다</p>\n<p>add_trace를 이용해 그래프를 그려주면 된다</p>\n<p>subplot을 사용하지 않고 그냥 add_trace만 이용해도 되는데,<br>그럴경우에는 아래 사진처럼 그래프 x축이 분리되지 않고 이어진다.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fig = make_subplots(rows = <span class=\"number\">1</span>, cols = <span class=\"number\">4</span>, </span><br><span class=\"line\">                    shared_yaxes=<span class=\"literal\">True</span>, </span><br><span class=\"line\">                    vertical_spacing = <span class=\"number\">0.05</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_trace(go.Bar(x = dfCh_Edu21[<span class=\"string\">&#x27;Dgree&#x27;</span>], </span><br><span class=\"line\">                     y = dfCh_Edu21[<span class=\"string\">&#x27;%&#x27;</span>], </span><br><span class=\"line\">                     text = dfCh_Edu21[<span class=\"string\">&#x27;%&#x27;</span>].astype(<span class=\"built_in\">str</span>) + <span class=\"string\">&quot;%&quot;</span>, </span><br><span class=\"line\">                     textposition=<span class=\"string\">&#x27;outside&#x27;</span>,</span><br><span class=\"line\">                     name=<span class=\"string\">&#x27;China&#x27;</span>,</span><br><span class=\"line\">                     marker_color=<span class=\"string\">&#x27;#88BFBA&#x27;</span>), </span><br><span class=\"line\">                     row = <span class=\"number\">1</span>, col = <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_trace(go.Bar(x = dfJp_Edu21[<span class=\"string\">&#x27;Dgree&#x27;</span>], </span><br><span class=\"line\">                     y = dfJp_Edu21[<span class=\"string\">&#x27;%&#x27;</span>], </span><br><span class=\"line\">                     text = dfJp_Edu21[<span class=\"string\">&#x27;%&#x27;</span>].astype(<span class=\"built_in\">str</span>) + <span class=\"string\">&quot;%&quot;</span>, </span><br><span class=\"line\">                     textposition=<span class=\"string\">&#x27;outside&#x27;</span>,</span><br><span class=\"line\">                     name=<span class=\"string\">&#x27;Japan&#x27;</span>,</span><br><span class=\"line\">                     marker_color=<span class=\"string\">&#x27;#CDD9A3&#x27;</span>), </span><br><span class=\"line\">                      row = <span class=\"number\">1</span>, col = <span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_trace(go.Bar(x = dfKo_Edu21[<span class=\"string\">&#x27;Dgree&#x27;</span>], </span><br><span class=\"line\">                     y = dfKo_Edu21[<span class=\"string\">&#x27;%&#x27;</span>], </span><br><span class=\"line\">                     text = dfKo_Edu21[<span class=\"string\">&#x27;%&#x27;</span>].astype(<span class=\"built_in\">str</span>) + <span class=\"string\">&quot;%&quot;</span>, </span><br><span class=\"line\">                     textposition=<span class=\"string\">&#x27;outside&#x27;</span>,</span><br><span class=\"line\">                     name=<span class=\"string\">&#x27;South Korea&#x27;</span>,</span><br><span class=\"line\">                     marker_color=<span class=\"string\">&#x27;#F28705&#x27;</span>), </span><br><span class=\"line\">                      row = <span class=\"number\">1</span>, col = <span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_trace(go.Bar(x = dfTw_Edu21[<span class=\"string\">&#x27;Dgree&#x27;</span>], </span><br><span class=\"line\">                     y = dfTw_Edu21[<span class=\"string\">&#x27;%&#x27;</span>], </span><br><span class=\"line\">                     text = dfTw_Edu21[<span class=\"string\">&#x27;%&#x27;</span>].astype(<span class=\"built_in\">str</span>) + <span class=\"string\">&quot;%&quot;</span>, </span><br><span class=\"line\">                     textposition=<span class=\"string\">&#x27;outside&#x27;</span>,</span><br><span class=\"line\">                     name=<span class=\"string\">&#x27;Taiwan&#x27;</span>,</span><br><span class=\"line\">                     marker_color=<span class=\"string\">&#x27;#D9946C&#x27;</span>), </span><br><span class=\"line\">                     row = <span class=\"number\">1</span>, col = <span class=\"number\">4</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(showlegend=<span class=\"literal\">True</span>,title=<span class=\"string\">&#x27;&lt;b&gt;Degree in East Asia&lt;/b&gt;&#x27;</span>,title_font_size=<span class=\"number\">22</span>,</span><br><span class=\"line\">                  margin = <span class=\"built_in\">dict</span>(t=<span class=\"number\">200</span>, l=<span class=\"number\">100</span>, r=<span class=\"number\">50</span>, b=<span class=\"number\">200</span>),</span><br><span class=\"line\">                  height=<span class=\"number\">700</span>, width=<span class=\"number\">700</span>)</span><br><span class=\"line\">fig.update_traces(hovertemplate=<span class=\"string\">&#x27;&lt;b&gt;Percent&lt;/b&gt;: %&#123;y&#125;%&lt;br&gt;&#x27;</span>+</span><br><span class=\"line\">                                <span class=\"string\">&#x27;&lt;b&gt;Degree&lt;/b&gt;: %&#123;x&#125;&lt;br&gt;&#x27;</span>)</span><br><span class=\"line\">fig.update_xaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\">fig.update_yaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\">fig.update_layout(legend=<span class=\"built_in\">dict</span>(</span><br><span class=\"line\">    orientation=<span class=\"string\">&quot;h&quot;</span>,</span><br><span class=\"line\">    yanchor=<span class=\"string\">&quot;bottom&quot;</span>,</span><br><span class=\"line\">    y=<span class=\"number\">1.1</span>,</span><br><span class=\"line\">    xanchor=<span class=\"string\">&quot;right&quot;</span>,</span><br><span class=\"line\">    x=<span class=\"number\">1</span>))</span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">14</span>),</span><br><span class=\"line\">                                    x=<span class=\"number\">0.8</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.5</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;@green_yhjw&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n<br>\n\n<h3 id=\"Bar-Graph5\"><a href=\"#Bar-Graph5\" class=\"headerlink\" title=\"Bar Graph5\"></a><strong>Bar Graph5</strong></h3><hr>\n<p><img src=\"/images/plotlybar/newplot4.png\"></p>\n<pre><code>fig.update_layout(barmode=&#39;stack&#39;)\n</code></pre>\n<p>위의 한 줄을 추가해주면 그래프가 Stack으로 쌓여서 그려진다.</p>\n<p><img src=\"/images/plotlybar/newplot5.png\"><br>위의 한 줄을 뺏을때는 이렇게 따로따로 분리되어서 그려진다.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fig = go.Figure()</span><br><span class=\"line\">fig.add_trace(go.Bar(x = df21_Ea_DS_salary.index, </span><br><span class=\"line\">                     y = df21_Ea_DS_salary[<span class=\"string\">&#x27;Data Scientist&#x27;</span>], </span><br><span class=\"line\">                     name = <span class=\"string\">&quot;Data Scientist&quot;</span>, </span><br><span class=\"line\">                     text = df21_Ea_DS_salary[<span class=\"string\">&#x27;Data Scientist&#x27;</span>].astype(<span class=\"built_in\">str</span>) + <span class=\"string\">&quot;%&quot;</span>, </span><br><span class=\"line\">                     textposition=<span class=\"string\">&#x27;auto&#x27;</span>, marker_color=<span class=\"string\">&#x27;#F2798F&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_trace(go.Bar(x = df21_Ea_DS_salary.index, </span><br><span class=\"line\">                     y = df21_Ea_DS_salary[<span class=\"string\">&#x27;Machine Learning Engineer&#x27;</span>], </span><br><span class=\"line\">                     name = <span class=\"string\">&quot;Machine Learning Engineer&quot;</span>, </span><br><span class=\"line\">                     text = df21_Ea_DS_salary[<span class=\"string\">&#x27;Machine Learning Engineer&#x27;</span>].astype(<span class=\"built_in\">str</span>) + <span class=\"string\">&quot;%&quot;</span>, </span><br><span class=\"line\">                     textposition=<span class=\"string\">&#x27;auto&#x27;</span>, marker_color=<span class=\"string\">&#x27;#CDD9A3&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.add_trace(go.Bar(x = df21_Ea_DS_salary.index, </span><br><span class=\"line\">                     y = df21_Ea_DS_salary[<span class=\"string\">&#x27;Research Scientist&#x27;</span>], </span><br><span class=\"line\">                     name = <span class=\"string\">&quot;Research Scientist&quot;</span>, </span><br><span class=\"line\">                     text = df21_Ea_DS_salary[<span class=\"string\">&#x27;Research Scientist&#x27;</span>].astype(<span class=\"built_in\">str</span>) + <span class=\"string\">&quot;%&quot;</span>, </span><br><span class=\"line\">                     textposition=<span class=\"string\">&#x27;auto&#x27;</span>, marker_color=<span class=\"string\">&#x27;#88BFBA&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(barmode=<span class=\"string\">&#x27;stack&#x27;</span>,</span><br><span class=\"line\">                 showlegend=<span class=\"literal\">True</span>,</span><br><span class=\"line\">                 height=<span class=\"number\">600</span>, width=<span class=\"number\">700</span>,</span><br><span class=\"line\">                 title_text=<span class=\"string\">&quot;&lt;b&gt;Data Scientist&#x27;s Salary in East Asia&lt;/b&gt;&quot;</span>,</span><br><span class=\"line\">                 title_x=<span class=\"number\">0.5</span>,</span><br><span class=\"line\">                 title_font_size=<span class=\"number\">20</span>, </span><br><span class=\"line\">                  margin=<span class=\"built_in\">dict</span>(l=<span class=\"number\">100</span>, r=<span class=\"number\">100</span>, t=<span class=\"number\">100</span>, b=<span class=\"number\">100</span>))</span><br><span class=\"line\">fig.update_traces(hovertemplate=<span class=\"string\">&#x27;&lt;b&gt;Percent&lt;/b&gt;: %&#123;y&#125;%&lt;br&gt;&#x27;</span>+</span><br><span class=\"line\">                                <span class=\"string\">&#x27;&lt;b&gt;Salary&lt;/b&gt;: %&#123;x&#125;$&lt;br&gt;&#x27;</span>)</span><br><span class=\"line\">fig.update_xaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\">fig.update_yaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\">fig.update_layout(legend=<span class=\"built_in\">dict</span>(</span><br><span class=\"line\">    orientation=<span class=\"string\">&quot;v&quot;</span>,</span><br><span class=\"line\">    yanchor=<span class=\"string\">&quot;bottom&quot;</span>,</span><br><span class=\"line\">    y=<span class=\"number\">0.8</span>,</span><br><span class=\"line\">    xanchor=<span class=\"string\">&quot;right&quot;</span>,</span><br><span class=\"line\">    x=<span class=\"number\">1.2</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n<br>\n\n<h3 id=\"느낀점\"><a href=\"#느낀점\" class=\"headerlink\" title=\"느낀점\"></a><strong>느낀점</strong></h3><hr>\n<p>처음 그래프를 그리면서 bar그래프에도 다양한 종류가 있는데<br>내가 원하는대로 그리기가 쉽지 않았다<br>하지만 사실 복잡한게 아니기에 조금만 공부하면 쉽게 그릴수 있다<br>모를때는 사실 plotly 원문 사이트를 들어가서 그려보는게 도움이 됬다<br>위의 그래프를 참고해서 그리면 된다<br>누군가에게 도움이 되었기를…</p>\n<br>\n<br>\n<br>\n<br>"},{"title":"Plotly를 이용해 Heatmap 그래프 그리기","date":"2021-11-27T15:00:00.000Z","thumbnail":"/images/plotlyheatmap/newplot.png","_content":"\n### **heatmap Graph**\n---\n\n![](/images/plotlyheatmap/newplot.png)\n\n\n![](/images/plotlyheatmap/merge.PNG)\n데이터 전처리를 통해서 정리된 데이터 셋이다\n\n<br>\n\nx축 y축의 index 값을 각각 설정해주고\nz에는 데이터 값을 넣어준다\n\n```python\nx1=['South Korea','Taiwan','China','Japan']\ny1=merge.sort_values(by=['index'], ascending=True)['index'].tolist()\nz1=merge.iloc[:,[2,4,6,8]].to_numpy()\n\nfig = go.Figure(data=go.Heatmap(\n                   z=z1,\n                   x=x1,\n                   y=y1,\n                   hoverongaps = True,\n                   opacity=1.0, xgap=2.5, ygap=2.5))\nfig = ff.create_annotated_heatmap(z1, x = x1, y = y1, colorscale='sunset')\nfig.update_layout(height=500, width=600,\n                 title_text=\"<b>East Asia Age (2021)</b>\", title_font_size=20,\n                 title_x=0.5)\nfig.update_traces(hovertemplate='<b>Age</b>: %{y}<br>'+\n                                '<b>Country</b>: %{x}<br>'+\n                                '<b>Percent</b>: %{z}%')\nfig.add_annotation(dict(font=dict(size=14),\n                                    x=0.8,\n                                    y=-0.2,\n                                    showarrow=False,\n                                    text=\"@green_yhjw\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\nfig.show()\n```\n\n<br>\n\n### **Heatmap Graph2**\n---\nHeatmap을 subplot을 이용해서 그렸다\n여태까지 해왔던 pie그래프, bar그래프와는 달리 더 복잡했다\n\n\n    \n    x=['2017-year','2018-year','2019-year','2020-year','2021-year']\n일단 x값을 '2017-year' 이런식으로 이름을 지었는데,\n버그를 발견했다!\n'2017'로만 지으면 숫자로 인식해서 계속 에러가 났던것...\n\n\n![](/images/plotlyheatmap/newplot1.png)\n```python\nz1=((merge_Wo.iloc[:,[1,2,3,4,5]].to_numpy()/merge_Wo.iloc[:,[1,2,3,4,5]].to_numpy().sum())*100).round(1)\nz2=((merge.iloc[:,[1,2,3,4,5]].to_numpy()/merge.iloc[:,[1,2,3,4,5]].to_numpy().sum())*100).round(1)\n\nx=['2017-year','2018-year','2019-year','2020-year','2021-year']\ny1=merge_Wo['JOB'].tolist()\ny2=merge['JOB'].tolist()\n\n\nfig1 = ff.create_annotated_heatmap(z1, x = x, y = y1, colorscale='sunset')\nfig2 = ff.create_annotated_heatmap(z2, x = x, y = y2, colorscale='sunset')\n\nfor annot in fig2['layout']['annotations']:\n    annot['xref'] = 'x2'\n    \nfig = make_subplots(rows=1, cols=2)\nfig.add_trace(fig1.data[0], row=1, col=1)\nfig.add_trace(fig2.data[0], row=1, col=2)\nfig.update_layout(fig1.layout, title='<b>           World vs EastAsia</b>',title_font_size=22,\n                  margin = dict(t=200, l=100, r=10, b=200),\n                  height=700, width=1150, coloraxis=dict(showscale=True, colorscale='sunset'))\nfig.update_traces(hovertemplate='<b>Job</b>: %{y}<br>'+\n                                '<b>Year</b>: %{x}<br>'+\n                                '<b>Percent</b>: %{z}%')\nfig.layout.annotations += fig2.layout.annotations\nfig.add_annotation(dict(font=dict(size=14),\n                                    x=0.9,\n                                    y=-0.25,\n                                    showarrow=False,\n                                    text=\"@green_yhjw\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\n\nfig.show()\n```\n\n### **Ref**\n---\nhttps://plotly.com/python/heatmaps/","source":"_posts/plotly_heatmap.md","raw":"---\ntitle: Plotly를 이용해 Heatmap 그래프 그리기\ncategories:\n- 파이썬\n- Python Plotly\ndate: 2021-11-28\ntags: plotly, heatmap graph, heatmap, subplot\nthumbnail: /images/plotlyheatmap/newplot.png\n---\n\n### **heatmap Graph**\n---\n\n![](/images/plotlyheatmap/newplot.png)\n\n\n![](/images/plotlyheatmap/merge.PNG)\n데이터 전처리를 통해서 정리된 데이터 셋이다\n\n<br>\n\nx축 y축의 index 값을 각각 설정해주고\nz에는 데이터 값을 넣어준다\n\n```python\nx1=['South Korea','Taiwan','China','Japan']\ny1=merge.sort_values(by=['index'], ascending=True)['index'].tolist()\nz1=merge.iloc[:,[2,4,6,8]].to_numpy()\n\nfig = go.Figure(data=go.Heatmap(\n                   z=z1,\n                   x=x1,\n                   y=y1,\n                   hoverongaps = True,\n                   opacity=1.0, xgap=2.5, ygap=2.5))\nfig = ff.create_annotated_heatmap(z1, x = x1, y = y1, colorscale='sunset')\nfig.update_layout(height=500, width=600,\n                 title_text=\"<b>East Asia Age (2021)</b>\", title_font_size=20,\n                 title_x=0.5)\nfig.update_traces(hovertemplate='<b>Age</b>: %{y}<br>'+\n                                '<b>Country</b>: %{x}<br>'+\n                                '<b>Percent</b>: %{z}%')\nfig.add_annotation(dict(font=dict(size=14),\n                                    x=0.8,\n                                    y=-0.2,\n                                    showarrow=False,\n                                    text=\"@green_yhjw\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\nfig.show()\n```\n\n<br>\n\n### **Heatmap Graph2**\n---\nHeatmap을 subplot을 이용해서 그렸다\n여태까지 해왔던 pie그래프, bar그래프와는 달리 더 복잡했다\n\n\n    \n    x=['2017-year','2018-year','2019-year','2020-year','2021-year']\n일단 x값을 '2017-year' 이런식으로 이름을 지었는데,\n버그를 발견했다!\n'2017'로만 지으면 숫자로 인식해서 계속 에러가 났던것...\n\n\n![](/images/plotlyheatmap/newplot1.png)\n```python\nz1=((merge_Wo.iloc[:,[1,2,3,4,5]].to_numpy()/merge_Wo.iloc[:,[1,2,3,4,5]].to_numpy().sum())*100).round(1)\nz2=((merge.iloc[:,[1,2,3,4,5]].to_numpy()/merge.iloc[:,[1,2,3,4,5]].to_numpy().sum())*100).round(1)\n\nx=['2017-year','2018-year','2019-year','2020-year','2021-year']\ny1=merge_Wo['JOB'].tolist()\ny2=merge['JOB'].tolist()\n\n\nfig1 = ff.create_annotated_heatmap(z1, x = x, y = y1, colorscale='sunset')\nfig2 = ff.create_annotated_heatmap(z2, x = x, y = y2, colorscale='sunset')\n\nfor annot in fig2['layout']['annotations']:\n    annot['xref'] = 'x2'\n    \nfig = make_subplots(rows=1, cols=2)\nfig.add_trace(fig1.data[0], row=1, col=1)\nfig.add_trace(fig2.data[0], row=1, col=2)\nfig.update_layout(fig1.layout, title='<b>           World vs EastAsia</b>',title_font_size=22,\n                  margin = dict(t=200, l=100, r=10, b=200),\n                  height=700, width=1150, coloraxis=dict(showscale=True, colorscale='sunset'))\nfig.update_traces(hovertemplate='<b>Job</b>: %{y}<br>'+\n                                '<b>Year</b>: %{x}<br>'+\n                                '<b>Percent</b>: %{z}%')\nfig.layout.annotations += fig2.layout.annotations\nfig.add_annotation(dict(font=dict(size=14),\n                                    x=0.9,\n                                    y=-0.25,\n                                    showarrow=False,\n                                    text=\"@green_yhjw\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\n\nfig.show()\n```\n\n### **Ref**\n---\nhttps://plotly.com/python/heatmaps/","slug":"plotly-heatmap","published":1,"updated":"2022-01-03T12:20:08.050Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cky2hohev00225nrje0dvbdhv","content":"<h3 id=\"heatmap-Graph\"><a href=\"#heatmap-Graph\" class=\"headerlink\" title=\"heatmap Graph\"></a><strong>heatmap Graph</strong></h3><hr>\n<p><img src=\"/images/plotlyheatmap/newplot.png\"></p>\n<p><img src=\"/images/plotlyheatmap/merge.PNG\"><br>데이터 전처리를 통해서 정리된 데이터 셋이다</p>\n<br>\n\n<p>x축 y축의 index 값을 각각 설정해주고<br>z에는 데이터 값을 넣어준다</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x1=[<span class=\"string\">&#x27;South Korea&#x27;</span>,<span class=\"string\">&#x27;Taiwan&#x27;</span>,<span class=\"string\">&#x27;China&#x27;</span>,<span class=\"string\">&#x27;Japan&#x27;</span>]</span><br><span class=\"line\">y1=merge.sort_values(by=[<span class=\"string\">&#x27;index&#x27;</span>], ascending=<span class=\"literal\">True</span>)[<span class=\"string\">&#x27;index&#x27;</span>].tolist()</span><br><span class=\"line\">z1=merge.iloc[:,[<span class=\"number\">2</span>,<span class=\"number\">4</span>,<span class=\"number\">6</span>,<span class=\"number\">8</span>]].to_numpy()</span><br><span class=\"line\"></span><br><span class=\"line\">fig = go.Figure(data=go.Heatmap(</span><br><span class=\"line\">                   z=z1,</span><br><span class=\"line\">                   x=x1,</span><br><span class=\"line\">                   y=y1,</span><br><span class=\"line\">                   hoverongaps = <span class=\"literal\">True</span>,</span><br><span class=\"line\">                   opacity=<span class=\"number\">1.0</span>, xgap=<span class=\"number\">2.5</span>, ygap=<span class=\"number\">2.5</span>))</span><br><span class=\"line\">fig = ff.create_annotated_heatmap(z1, x = x1, y = y1, colorscale=<span class=\"string\">&#x27;sunset&#x27;</span>)</span><br><span class=\"line\">fig.update_layout(height=<span class=\"number\">500</span>, width=<span class=\"number\">600</span>,</span><br><span class=\"line\">                 title_text=<span class=\"string\">&quot;&lt;b&gt;East Asia Age (2021)&lt;/b&gt;&quot;</span>, title_font_size=<span class=\"number\">20</span>,</span><br><span class=\"line\">                 title_x=<span class=\"number\">0.5</span>)</span><br><span class=\"line\">fig.update_traces(hovertemplate=<span class=\"string\">&#x27;&lt;b&gt;Age&lt;/b&gt;: %&#123;y&#125;&lt;br&gt;&#x27;</span>+</span><br><span class=\"line\">                                <span class=\"string\">&#x27;&lt;b&gt;Country&lt;/b&gt;: %&#123;x&#125;&lt;br&gt;&#x27;</span>+</span><br><span class=\"line\">                                <span class=\"string\">&#x27;&lt;b&gt;Percent&lt;/b&gt;: %&#123;z&#125;%&#x27;</span>)</span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">14</span>),</span><br><span class=\"line\">                                    x=<span class=\"number\">0.8</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.2</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;@green_yhjw&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h3 id=\"Heatmap-Graph2\"><a href=\"#Heatmap-Graph2\" class=\"headerlink\" title=\"Heatmap Graph2\"></a><strong>Heatmap Graph2</strong></h3><hr>\n<p>Heatmap을 subplot을 이용해서 그렸다<br>여태까지 해왔던 pie그래프, bar그래프와는 달리 더 복잡했다</p>\n<pre><code>x=[&#39;2017-year&#39;,&#39;2018-year&#39;,&#39;2019-year&#39;,&#39;2020-year&#39;,&#39;2021-year&#39;]\n</code></pre>\n<p>일단 x값을 ‘2017-year’ 이런식으로 이름을 지었는데,<br>버그를 발견했다!<br>‘2017’로만 지으면 숫자로 인식해서 계속 에러가 났던것…</p>\n<p><img src=\"/images/plotlyheatmap/newplot1.png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">z1=((merge_Wo.iloc[:,[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]].to_numpy()/merge_Wo.iloc[:,[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]].to_numpy().<span class=\"built_in\">sum</span>())*<span class=\"number\">100</span>).<span class=\"built_in\">round</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">z2=((merge.iloc[:,[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]].to_numpy()/merge.iloc[:,[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]].to_numpy().<span class=\"built_in\">sum</span>())*<span class=\"number\">100</span>).<span class=\"built_in\">round</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">x=[<span class=\"string\">&#x27;2017-year&#x27;</span>,<span class=\"string\">&#x27;2018-year&#x27;</span>,<span class=\"string\">&#x27;2019-year&#x27;</span>,<span class=\"string\">&#x27;2020-year&#x27;</span>,<span class=\"string\">&#x27;2021-year&#x27;</span>]</span><br><span class=\"line\">y1=merge_Wo[<span class=\"string\">&#x27;JOB&#x27;</span>].tolist()</span><br><span class=\"line\">y2=merge[<span class=\"string\">&#x27;JOB&#x27;</span>].tolist()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">fig1 = ff.create_annotated_heatmap(z1, x = x, y = y1, colorscale=<span class=\"string\">&#x27;sunset&#x27;</span>)</span><br><span class=\"line\">fig2 = ff.create_annotated_heatmap(z2, x = x, y = y2, colorscale=<span class=\"string\">&#x27;sunset&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> annot <span class=\"keyword\">in</span> fig2[<span class=\"string\">&#x27;layout&#x27;</span>][<span class=\"string\">&#x27;annotations&#x27;</span>]:</span><br><span class=\"line\">    annot[<span class=\"string\">&#x27;xref&#x27;</span>] = <span class=\"string\">&#x27;x2&#x27;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">fig = make_subplots(rows=<span class=\"number\">1</span>, cols=<span class=\"number\">2</span>)</span><br><span class=\"line\">fig.add_trace(fig1.data[<span class=\"number\">0</span>], row=<span class=\"number\">1</span>, col=<span class=\"number\">1</span>)</span><br><span class=\"line\">fig.add_trace(fig2.data[<span class=\"number\">0</span>], row=<span class=\"number\">1</span>, col=<span class=\"number\">2</span>)</span><br><span class=\"line\">fig.update_layout(fig1.layout, title=<span class=\"string\">&#x27;&lt;b&gt;           World vs EastAsia&lt;/b&gt;&#x27;</span>,title_font_size=<span class=\"number\">22</span>,</span><br><span class=\"line\">                  margin = <span class=\"built_in\">dict</span>(t=<span class=\"number\">200</span>, l=<span class=\"number\">100</span>, r=<span class=\"number\">10</span>, b=<span class=\"number\">200</span>),</span><br><span class=\"line\">                  height=<span class=\"number\">700</span>, width=<span class=\"number\">1150</span>, coloraxis=<span class=\"built_in\">dict</span>(showscale=<span class=\"literal\">True</span>, colorscale=<span class=\"string\">&#x27;sunset&#x27;</span>))</span><br><span class=\"line\">fig.update_traces(hovertemplate=<span class=\"string\">&#x27;&lt;b&gt;Job&lt;/b&gt;: %&#123;y&#125;&lt;br&gt;&#x27;</span>+</span><br><span class=\"line\">                                <span class=\"string\">&#x27;&lt;b&gt;Year&lt;/b&gt;: %&#123;x&#125;&lt;br&gt;&#x27;</span>+</span><br><span class=\"line\">                                <span class=\"string\">&#x27;&lt;b&gt;Percent&lt;/b&gt;: %&#123;z&#125;%&#x27;</span>)</span><br><span class=\"line\">fig.layout.annotations += fig2.layout.annotations</span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">14</span>),</span><br><span class=\"line\">                                    x=<span class=\"number\">0.9</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.25</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;@green_yhjw&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Ref\"><a href=\"#Ref\" class=\"headerlink\" title=\"Ref\"></a><strong>Ref</strong></h3><hr>\n<p><a href=\"https://plotly.com/python/heatmaps/\">https://plotly.com/python/heatmaps/</a></p>\n","site":{"data":{}},"excerpt":"heatmap Graph\n\n\n\n\n\n\n데이터 전처리를 통해서 정리된 데이터 셋이다\n\n\nx축 y축의 index 값을 각각 설정해주고\nz에는 데이터 값을 넣어준다\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n\n\nx1=['South Korea','Taiwan','China','Japan']\ny1=merge.sort_values(by=['index'], ascending=True)['index'].tolist()\nz1=merge.iloc[:,[2,4,6,8]].","more":"<h3 id=\"heatmap-Graph\"><a href=\"#heatmap-Graph\" class=\"headerlink\" title=\"heatmap Graph\"></a><strong>heatmap Graph</strong></h3><hr>\n<p><img src=\"/images/plotlyheatmap/newplot.png\"></p>\n<p><img src=\"/images/plotlyheatmap/merge.PNG\"><br>데이터 전처리를 통해서 정리된 데이터 셋이다</p>\n<br>\n\n<p>x축 y축의 index 값을 각각 설정해주고<br>z에는 데이터 값을 넣어준다</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x1=[<span class=\"string\">&#x27;South Korea&#x27;</span>,<span class=\"string\">&#x27;Taiwan&#x27;</span>,<span class=\"string\">&#x27;China&#x27;</span>,<span class=\"string\">&#x27;Japan&#x27;</span>]</span><br><span class=\"line\">y1=merge.sort_values(by=[<span class=\"string\">&#x27;index&#x27;</span>], ascending=<span class=\"literal\">True</span>)[<span class=\"string\">&#x27;index&#x27;</span>].tolist()</span><br><span class=\"line\">z1=merge.iloc[:,[<span class=\"number\">2</span>,<span class=\"number\">4</span>,<span class=\"number\">6</span>,<span class=\"number\">8</span>]].to_numpy()</span><br><span class=\"line\"></span><br><span class=\"line\">fig = go.Figure(data=go.Heatmap(</span><br><span class=\"line\">                   z=z1,</span><br><span class=\"line\">                   x=x1,</span><br><span class=\"line\">                   y=y1,</span><br><span class=\"line\">                   hoverongaps = <span class=\"literal\">True</span>,</span><br><span class=\"line\">                   opacity=<span class=\"number\">1.0</span>, xgap=<span class=\"number\">2.5</span>, ygap=<span class=\"number\">2.5</span>))</span><br><span class=\"line\">fig = ff.create_annotated_heatmap(z1, x = x1, y = y1, colorscale=<span class=\"string\">&#x27;sunset&#x27;</span>)</span><br><span class=\"line\">fig.update_layout(height=<span class=\"number\">500</span>, width=<span class=\"number\">600</span>,</span><br><span class=\"line\">                 title_text=<span class=\"string\">&quot;&lt;b&gt;East Asia Age (2021)&lt;/b&gt;&quot;</span>, title_font_size=<span class=\"number\">20</span>,</span><br><span class=\"line\">                 title_x=<span class=\"number\">0.5</span>)</span><br><span class=\"line\">fig.update_traces(hovertemplate=<span class=\"string\">&#x27;&lt;b&gt;Age&lt;/b&gt;: %&#123;y&#125;&lt;br&gt;&#x27;</span>+</span><br><span class=\"line\">                                <span class=\"string\">&#x27;&lt;b&gt;Country&lt;/b&gt;: %&#123;x&#125;&lt;br&gt;&#x27;</span>+</span><br><span class=\"line\">                                <span class=\"string\">&#x27;&lt;b&gt;Percent&lt;/b&gt;: %&#123;z&#125;%&#x27;</span>)</span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">14</span>),</span><br><span class=\"line\">                                    x=<span class=\"number\">0.8</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.2</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;@green_yhjw&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h3 id=\"Heatmap-Graph2\"><a href=\"#Heatmap-Graph2\" class=\"headerlink\" title=\"Heatmap Graph2\"></a><strong>Heatmap Graph2</strong></h3><hr>\n<p>Heatmap을 subplot을 이용해서 그렸다<br>여태까지 해왔던 pie그래프, bar그래프와는 달리 더 복잡했다</p>\n<pre><code>x=[&#39;2017-year&#39;,&#39;2018-year&#39;,&#39;2019-year&#39;,&#39;2020-year&#39;,&#39;2021-year&#39;]\n</code></pre>\n<p>일단 x값을 ‘2017-year’ 이런식으로 이름을 지었는데,<br>버그를 발견했다!<br>‘2017’로만 지으면 숫자로 인식해서 계속 에러가 났던것…</p>\n<p><img src=\"/images/plotlyheatmap/newplot1.png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">z1=((merge_Wo.iloc[:,[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]].to_numpy()/merge_Wo.iloc[:,[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]].to_numpy().<span class=\"built_in\">sum</span>())*<span class=\"number\">100</span>).<span class=\"built_in\">round</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">z2=((merge.iloc[:,[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]].to_numpy()/merge.iloc[:,[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]].to_numpy().<span class=\"built_in\">sum</span>())*<span class=\"number\">100</span>).<span class=\"built_in\">round</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">x=[<span class=\"string\">&#x27;2017-year&#x27;</span>,<span class=\"string\">&#x27;2018-year&#x27;</span>,<span class=\"string\">&#x27;2019-year&#x27;</span>,<span class=\"string\">&#x27;2020-year&#x27;</span>,<span class=\"string\">&#x27;2021-year&#x27;</span>]</span><br><span class=\"line\">y1=merge_Wo[<span class=\"string\">&#x27;JOB&#x27;</span>].tolist()</span><br><span class=\"line\">y2=merge[<span class=\"string\">&#x27;JOB&#x27;</span>].tolist()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">fig1 = ff.create_annotated_heatmap(z1, x = x, y = y1, colorscale=<span class=\"string\">&#x27;sunset&#x27;</span>)</span><br><span class=\"line\">fig2 = ff.create_annotated_heatmap(z2, x = x, y = y2, colorscale=<span class=\"string\">&#x27;sunset&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> annot <span class=\"keyword\">in</span> fig2[<span class=\"string\">&#x27;layout&#x27;</span>][<span class=\"string\">&#x27;annotations&#x27;</span>]:</span><br><span class=\"line\">    annot[<span class=\"string\">&#x27;xref&#x27;</span>] = <span class=\"string\">&#x27;x2&#x27;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">fig = make_subplots(rows=<span class=\"number\">1</span>, cols=<span class=\"number\">2</span>)</span><br><span class=\"line\">fig.add_trace(fig1.data[<span class=\"number\">0</span>], row=<span class=\"number\">1</span>, col=<span class=\"number\">1</span>)</span><br><span class=\"line\">fig.add_trace(fig2.data[<span class=\"number\">0</span>], row=<span class=\"number\">1</span>, col=<span class=\"number\">2</span>)</span><br><span class=\"line\">fig.update_layout(fig1.layout, title=<span class=\"string\">&#x27;&lt;b&gt;           World vs EastAsia&lt;/b&gt;&#x27;</span>,title_font_size=<span class=\"number\">22</span>,</span><br><span class=\"line\">                  margin = <span class=\"built_in\">dict</span>(t=<span class=\"number\">200</span>, l=<span class=\"number\">100</span>, r=<span class=\"number\">10</span>, b=<span class=\"number\">200</span>),</span><br><span class=\"line\">                  height=<span class=\"number\">700</span>, width=<span class=\"number\">1150</span>, coloraxis=<span class=\"built_in\">dict</span>(showscale=<span class=\"literal\">True</span>, colorscale=<span class=\"string\">&#x27;sunset&#x27;</span>))</span><br><span class=\"line\">fig.update_traces(hovertemplate=<span class=\"string\">&#x27;&lt;b&gt;Job&lt;/b&gt;: %&#123;y&#125;&lt;br&gt;&#x27;</span>+</span><br><span class=\"line\">                                <span class=\"string\">&#x27;&lt;b&gt;Year&lt;/b&gt;: %&#123;x&#125;&lt;br&gt;&#x27;</span>+</span><br><span class=\"line\">                                <span class=\"string\">&#x27;&lt;b&gt;Percent&lt;/b&gt;: %&#123;z&#125;%&#x27;</span>)</span><br><span class=\"line\">fig.layout.annotations += fig2.layout.annotations</span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">14</span>),</span><br><span class=\"line\">                                    x=<span class=\"number\">0.9</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.25</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;@green_yhjw&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Ref\"><a href=\"#Ref\" class=\"headerlink\" title=\"Ref\"></a><strong>Ref</strong></h3><hr>\n<p><a href=\"https://plotly.com/python/heatmaps/\">https://plotly.com/python/heatmaps/</a></p>\n"},{"title":"Bar 그래프 v와 h","date":"2021-11-09T15:00:00.000Z","toc":true,"thumbnail":"/images/0401/6.PNG","widgets":null,"_content":"\n### **import문**\n---\n\n\n```python\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pylab as plt\n\nimport plotly.io as pio\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.figure_factory as ff\nfrom plotly.subplots import make_subplots\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\npio.templates.default = \"none\"\n# import plotly.offline as py\n# py.offline.init_notebook_mode()\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n```\n<br>\n\n### **캐글 데이터 불러오기**\n---\n\n\n```python\ndf17= pd.read_csv(\"/kaggle/input/kaggle-survey-2017/multipleChoiceResponses.csv\", encoding=\"ISO-8859-1\")\ndf18= pd.read_csv(\"/kaggle/input/kaggle-survey-2018/multipleChoiceResponses.csv\", )\ndf19= pd.read_csv(\"/kaggle/input/kaggle-survey-2019/multiple_choice_responses.csv\", )\ndf20= pd.read_csv(\"/kaggle/input/kaggle-survey-2020/kaggle_survey_2020_responses.csv\", )\ndf21= pd.read_csv(\"/kaggle/input/kaggle-survey-2021/kaggle_survey_2021_responses.csv\", )\n```\n<br>\n\n## **1-1. 수평그래프(Bar_h)**\n### **데이터 전처리**\n---\n- 리스트 생성\nafrica17, africa18, africa19, africa20, africa21\n- isin\nPandas에서는 어떤 list에 존재하는 요소가 대상 DataFrame이나 Series에 존재 하는지 True(존재), False(존재안함)로 반환준다\n- [df21['Q3'].isin(africa)]\n거주지역이 africa 리스트에 있는 지역에 해당할경우 True로 반환\n- df21[df21['Q3'].isin(africa)]\n(21년도 기준)africa에 사는 사람들의 df21의 데이터 값만 불러옴\n\n\n```python\n# grouping african countries\n# 리스트 만들어줌\nafrica17 = ['Nigeria','Kenya', 'South Africa', 'Egypt']\nafrica18 = ['Nigeria','Kenya', 'South Africa', 'Egypt', 'Tunisia', 'Morocco'] \nafrica19 = ['Nigeria','Kenya', 'South Africa', 'Egypt', 'Tunisia', 'Morocco', 'Algeria']\nafrica20 = ['Nigeria','Kenya', 'South Africa', 'Egypt', 'Tunisia', 'Morocco', 'Ghana']\nafrica21 = ['Nigeria','Kenya', 'South Africa', 'Egypt', 'Tunisia', 'Morocco', 'Algeria', 'Ghana', 'Uganda', 'Ethiopia']\n\n#df21['Q3'] -> In which country do you currently reside? 거주지역은?\nafrica = ['Nigeria', 'Egypt', 'South Africa', 'Algeria', 'Tunisia', 'Morocco', 'Kenya', 'Uganda', 'Ghana', 'Ethiopia']\n\n#21년도 기준\n\n\ndf21_africa = df21[df21['Q3'].isin(africa)]\ndf21_world = df21[~df21['Q3'].isin(africa )]\ndf21['region']=[\"Africa\" if x in africa else \"World\" for x in df21['Q3']]\n\ndf20_africa = df20[df20['Q3'].isin(africa)]\ndf20_world = df20[~df20['Q3'].isin(africa )]\ndf20['region']=[\"Africa\" if x in africa else \"World\" for x in df20['Q3']]\n\ndf19_africa = df19[df19['Q3'].isin(africa)]\ndf19_world = df19[~df19['Q3'].isin(africa)]\ndf19['region']=[\"Africa\" if x in africa else \"World\" for x in df19['Q3']]\n\ndf18_africa = df18[df18['Q3'].isin(africa)]\ndf18_world = df18[~df18['Q3'].isin(africa)]\ndf18['region']=[\"Africa\" if x in africa else \"World\" for x in df18['Q3']]\n\ndf17_africa = df17[df17['Country'].isin(africa)]\ndf17_world = df17[~df17['Country'].isin(africa )]\ndf17['region']=[\"Africa\" if x in africa else \"World\" for x in df17['Country']]       \n```\n\n\n<br>\n\n```python\nprint(africa)\n```\n> ['Nigeria', 'Egypt', 'South Africa', 'Algeria', 'Tunisia', 'Morocco', 'Kenya', 'Uganda', 'Ghana', 'Ethiopia']\n\n\n<br>\n\n```python\nprint(df21['Q3'])\n```\n>   0        In which country do you currently reside?\n    1                                            India\n    2                                        Indonesia\n    3                                         Pakistan\n    4                                           Mexico\n                           ...                    \n    25969                                        Egypt\n    25970                                        China\n    25971                                       Sweden\n    25972                     United States of America\n    25973                                        India\n    Name: Q3, Length: 25974, dtype: object\n\n\n<br>\n\n```python\nprint(df21['Q3'].isin(africa))\n```\n>   0        False\n    1        False\n    2        False\n    3        False\n    4        False\n         ...  \n    25969     True\n    25970    False\n    25971    False\n    25972    False\n    25973    False\n    Name: Q3, Length: 25974, dtype: bool\n\n\n<br>\n\n```python\nprint(df21)\n```\n![](/images/0401/1.PNG)\n<br>\n<br>\n\n```python\nprint(df21[df21['Q3'].isin(africa)])\n```\n![](/images/0401/2.PNG)\n<br>\n<br>\n\n### **데이터 전처리**\n---\n- afro21 = len(df21_africa)\ndf21_africa의 행 갯수 -> 아프리카에 거주하는 캐글러 수\n- len(df21) \n행의 갯수 -> 설문조사에 응답한 전세계 캐글러 수\n- row21 = len(df21) - afro21 \n전세계 캐글러 수 - 아프리카 거주하는 캐글러 수 = 나머지\n\n\n```python\nafro21 = len(df21_africa)\nrow21 = len(df21) - afro21\n\nafro20 = len(df20_africa)\nrow20 = len(df20) - afro20\n\nafro19 = len(df19_africa)\nrow19 = len(df19) - afro19\n\nafro18 = len(df18_africa)\nrow18 = len(df18) - afro18\n\nafro17 = len(df17_africa)\nrow17 = len(df17) - afro17\n```\n\n<br>\n\n```python\nprint(afro21) \nprint(len(df21)) \nprint(row21) \n```\n>   2060\n    25974\n    23914\n\n<br>\n\n```python\n#리스트 생성\nregion = ['Africa', 'Rest of the World']\nvalue = [afro21, row21]\npercent =[afro21/(afro21 +row21)*100, row21/(afro21+row21)*100]\n```\n\n<br>\n\n```python\nprint(region)\nprint(value)\nprint(percent) #아프리카에 사는 캐글러, 전세계의 캐글러 percent 값\n```\n>   ['Africa', 'Rest of the World']\n    [2060, 23914]\n    [7.931007931007931, 92.06899206899207]\n\n<br>\n\n### **1-1. africa에 사는 kaggler 수 VS 전 세계 kaggler 수**\n---\n\n\n### **데이터 시각화하기**\n---\n- go.Bar\n막대그래프 생성\n- np.round(percent,1)\n반올림하기\n- textposition=['outside', 'inside']\n괄호 안은 각각 설정값[afica, rest of the world]\n- textfont=dict()\n막대그래프 데이터 값 폰트 설정\n- orientation='h'\n수평으로 그래프 그리기\n- marker_color=['gold', 'salmon']\n막대그래프 색상 설정 (africa, rest of the world)\n- opacity=0.6\n그래프 투명도 설정 (0.0 ~ 1)\n\n\n```python\nfig = go.Figure(data=[go.Bar(\n            x=value, y=region,\n            text=(np.round(percent,1)),\n            textposition=['outside', 'inside'],\n            texttemplate = [\"<b style='color: #f'>%{text}%</b>\"]*2,\n            textfont=dict(  family=\"sans serif\",\n                            size=16,\n                            color=\"black\"),\n            orientation='h',\n            marker_color=['gold', 'salmon'],\n            opacity=0.6,\n                    )])\nfig.show()\n```\n![](/images/0401/3.PNG)\n<br>\n\n### **update_traces**\n---\n- marker_line_color='black'\n: 막대그래프 테두리 색상\n- marker_line_width=2.5\n: 막대그래프 테두리 두께\n\n<br>\n\n### **update_layout**\n---\n- yaxis_linewidth=2.5\ny축 테두리 두께\n- bargap=0.2\n막대그래프 두께 (0 ~ 1.0 숫자가 작을수록 두꺼움)\n- barmode='group'\n\n\n```python\nfig.update_traces(marker_line_color='black',\n                  marker_line_width=2.5)\nfig.update_layout(title='<b>Number of respondents: Africa vs Rest of the world (2021)<b>', \n                  font_family=\"San Serif\",\n                  yaxis_linewidth=2.5,\n                  bargap=0.2,\n                  barmode='group',\n                  titlefont={'size': 24},\n                  paper_bgcolor='#F5F5F5',\n                  plot_bgcolor='#F5F5F5',                  \n              \n                  )\n\n```\n![](/images/0401/4.PNG)\n<br>\n\n### **update_layout**\n---\n- fig.update_layout(xaxis = dict(\nx축 레이아웃 설정\n- autosize=False\n사이즈 고정\ntrue로 설정시 대시보드 자체가 화면에 맞는 크기로 엄청 커짐 (좌우로)\n- showgrid=False\n배경 격자무늬 생성 안함\n- margin\n배경화면에서의 그래프 크기 비율 조정\n\n\n```python\nfig.update_layout(\n        xaxis = dict(\n        zeroline = False,\n        showline = False,\n        showticklabels = False,\n        gridwidth = 1\n    ),\n    autosize=False,\n    margin=dict(\n        l=150,\n        r=50,\n        b=50,\n        t=100,\n    ),\n    )\n\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\nfig.show()\n```\n![](/images/0401/5.PNG)\n<br>\n<br>\n\n## **1-2. 수직 그래프(Bar_v)**\n### **연도별 african kagglers의 수 비교**\n### **데이터 전처리**\n---\n\n\n```python\n## historical data, all gender\nyear = ['2017', '2018', '2019', '2020', '2021']\nvalue = [afro17, afro18, afro19, afro20, afro21]\n\npercent =[\n    afro17/(afro17 +row17)*100,\n    afro18/(afro18 +row18)*100,\n    afro19/(afro19 +row19)*100,\n    afro20/(afro20 +row20)*100,\n    afro21/(afro21 +row21)*100]  \n   \n\ncolor = 5* ['salmon'] \ncolor[4] = 'gold'\n\nfig = go.Figure(data=[go.Bar(\n            y=value, x=year,\n            text=np.round(percent, 1), \n            textposition='outside',\n            texttemplate = [\"<b style='color: #f'>%{text}%</b>\"]*5,\n            textfont=dict(  family=\"sans serif\",\n                            size=16,\n                            color=\"black\"),\n            orientation='v',\n            marker_color= color, \n            opacity=0.6\n                    )])\n\nfig.update_traces(marker_line_color='black',\n                  marker_line_width=2.5)\n\nfig.update_layout(title='<b>The rise of African kagglers<b>', \n                  font_family=\"San Serif\",\n                  xaxis_linewidth=2.5,\n                  bargap=0.2,\n                  barmode='group',\n                  titlefont={'size': 28},\n                  template='simple_white',\n                  paper_bgcolor='#F5F5F5',\n                  plot_bgcolor='#F5F5F5',                  \n                  )\nfig.update_layout(yaxis_title='Number of Respondents',xaxis_title='Year',\n    autosize=False,\n    margin=dict(\n        l=100,\n        r=50,\n        b=50,\n        t=70,\n        pad=0,\n    ),\n    )\n\nfig.show()\n```\n![](/images/0401/6.PNG)\n<br>\n<br>\n<br>\n","source":"_posts/kaggle8_bar_h_v.md","raw":"---\ntitle: Bar 그래프 v와 h\ndate: 2021-11-10\ntags: kaggle, plotly\ntoc: true\nthumbnail: /images/0401/6.PNG\ncategories: \n- kaggle 필사\nwidgets: null\n---\n\n### **import문**\n---\n\n\n```python\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pylab as plt\n\nimport plotly.io as pio\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.figure_factory as ff\nfrom plotly.subplots import make_subplots\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\npio.templates.default = \"none\"\n# import plotly.offline as py\n# py.offline.init_notebook_mode()\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n```\n<br>\n\n### **캐글 데이터 불러오기**\n---\n\n\n```python\ndf17= pd.read_csv(\"/kaggle/input/kaggle-survey-2017/multipleChoiceResponses.csv\", encoding=\"ISO-8859-1\")\ndf18= pd.read_csv(\"/kaggle/input/kaggle-survey-2018/multipleChoiceResponses.csv\", )\ndf19= pd.read_csv(\"/kaggle/input/kaggle-survey-2019/multiple_choice_responses.csv\", )\ndf20= pd.read_csv(\"/kaggle/input/kaggle-survey-2020/kaggle_survey_2020_responses.csv\", )\ndf21= pd.read_csv(\"/kaggle/input/kaggle-survey-2021/kaggle_survey_2021_responses.csv\", )\n```\n<br>\n\n## **1-1. 수평그래프(Bar_h)**\n### **데이터 전처리**\n---\n- 리스트 생성\nafrica17, africa18, africa19, africa20, africa21\n- isin\nPandas에서는 어떤 list에 존재하는 요소가 대상 DataFrame이나 Series에 존재 하는지 True(존재), False(존재안함)로 반환준다\n- [df21['Q3'].isin(africa)]\n거주지역이 africa 리스트에 있는 지역에 해당할경우 True로 반환\n- df21[df21['Q3'].isin(africa)]\n(21년도 기준)africa에 사는 사람들의 df21의 데이터 값만 불러옴\n\n\n```python\n# grouping african countries\n# 리스트 만들어줌\nafrica17 = ['Nigeria','Kenya', 'South Africa', 'Egypt']\nafrica18 = ['Nigeria','Kenya', 'South Africa', 'Egypt', 'Tunisia', 'Morocco'] \nafrica19 = ['Nigeria','Kenya', 'South Africa', 'Egypt', 'Tunisia', 'Morocco', 'Algeria']\nafrica20 = ['Nigeria','Kenya', 'South Africa', 'Egypt', 'Tunisia', 'Morocco', 'Ghana']\nafrica21 = ['Nigeria','Kenya', 'South Africa', 'Egypt', 'Tunisia', 'Morocco', 'Algeria', 'Ghana', 'Uganda', 'Ethiopia']\n\n#df21['Q3'] -> In which country do you currently reside? 거주지역은?\nafrica = ['Nigeria', 'Egypt', 'South Africa', 'Algeria', 'Tunisia', 'Morocco', 'Kenya', 'Uganda', 'Ghana', 'Ethiopia']\n\n#21년도 기준\n\n\ndf21_africa = df21[df21['Q3'].isin(africa)]\ndf21_world = df21[~df21['Q3'].isin(africa )]\ndf21['region']=[\"Africa\" if x in africa else \"World\" for x in df21['Q3']]\n\ndf20_africa = df20[df20['Q3'].isin(africa)]\ndf20_world = df20[~df20['Q3'].isin(africa )]\ndf20['region']=[\"Africa\" if x in africa else \"World\" for x in df20['Q3']]\n\ndf19_africa = df19[df19['Q3'].isin(africa)]\ndf19_world = df19[~df19['Q3'].isin(africa)]\ndf19['region']=[\"Africa\" if x in africa else \"World\" for x in df19['Q3']]\n\ndf18_africa = df18[df18['Q3'].isin(africa)]\ndf18_world = df18[~df18['Q3'].isin(africa)]\ndf18['region']=[\"Africa\" if x in africa else \"World\" for x in df18['Q3']]\n\ndf17_africa = df17[df17['Country'].isin(africa)]\ndf17_world = df17[~df17['Country'].isin(africa )]\ndf17['region']=[\"Africa\" if x in africa else \"World\" for x in df17['Country']]       \n```\n\n\n<br>\n\n```python\nprint(africa)\n```\n> ['Nigeria', 'Egypt', 'South Africa', 'Algeria', 'Tunisia', 'Morocco', 'Kenya', 'Uganda', 'Ghana', 'Ethiopia']\n\n\n<br>\n\n```python\nprint(df21['Q3'])\n```\n>   0        In which country do you currently reside?\n    1                                            India\n    2                                        Indonesia\n    3                                         Pakistan\n    4                                           Mexico\n                           ...                    \n    25969                                        Egypt\n    25970                                        China\n    25971                                       Sweden\n    25972                     United States of America\n    25973                                        India\n    Name: Q3, Length: 25974, dtype: object\n\n\n<br>\n\n```python\nprint(df21['Q3'].isin(africa))\n```\n>   0        False\n    1        False\n    2        False\n    3        False\n    4        False\n         ...  \n    25969     True\n    25970    False\n    25971    False\n    25972    False\n    25973    False\n    Name: Q3, Length: 25974, dtype: bool\n\n\n<br>\n\n```python\nprint(df21)\n```\n![](/images/0401/1.PNG)\n<br>\n<br>\n\n```python\nprint(df21[df21['Q3'].isin(africa)])\n```\n![](/images/0401/2.PNG)\n<br>\n<br>\n\n### **데이터 전처리**\n---\n- afro21 = len(df21_africa)\ndf21_africa의 행 갯수 -> 아프리카에 거주하는 캐글러 수\n- len(df21) \n행의 갯수 -> 설문조사에 응답한 전세계 캐글러 수\n- row21 = len(df21) - afro21 \n전세계 캐글러 수 - 아프리카 거주하는 캐글러 수 = 나머지\n\n\n```python\nafro21 = len(df21_africa)\nrow21 = len(df21) - afro21\n\nafro20 = len(df20_africa)\nrow20 = len(df20) - afro20\n\nafro19 = len(df19_africa)\nrow19 = len(df19) - afro19\n\nafro18 = len(df18_africa)\nrow18 = len(df18) - afro18\n\nafro17 = len(df17_africa)\nrow17 = len(df17) - afro17\n```\n\n<br>\n\n```python\nprint(afro21) \nprint(len(df21)) \nprint(row21) \n```\n>   2060\n    25974\n    23914\n\n<br>\n\n```python\n#리스트 생성\nregion = ['Africa', 'Rest of the World']\nvalue = [afro21, row21]\npercent =[afro21/(afro21 +row21)*100, row21/(afro21+row21)*100]\n```\n\n<br>\n\n```python\nprint(region)\nprint(value)\nprint(percent) #아프리카에 사는 캐글러, 전세계의 캐글러 percent 값\n```\n>   ['Africa', 'Rest of the World']\n    [2060, 23914]\n    [7.931007931007931, 92.06899206899207]\n\n<br>\n\n### **1-1. africa에 사는 kaggler 수 VS 전 세계 kaggler 수**\n---\n\n\n### **데이터 시각화하기**\n---\n- go.Bar\n막대그래프 생성\n- np.round(percent,1)\n반올림하기\n- textposition=['outside', 'inside']\n괄호 안은 각각 설정값[afica, rest of the world]\n- textfont=dict()\n막대그래프 데이터 값 폰트 설정\n- orientation='h'\n수평으로 그래프 그리기\n- marker_color=['gold', 'salmon']\n막대그래프 색상 설정 (africa, rest of the world)\n- opacity=0.6\n그래프 투명도 설정 (0.0 ~ 1)\n\n\n```python\nfig = go.Figure(data=[go.Bar(\n            x=value, y=region,\n            text=(np.round(percent,1)),\n            textposition=['outside', 'inside'],\n            texttemplate = [\"<b style='color: #f'>%{text}%</b>\"]*2,\n            textfont=dict(  family=\"sans serif\",\n                            size=16,\n                            color=\"black\"),\n            orientation='h',\n            marker_color=['gold', 'salmon'],\n            opacity=0.6,\n                    )])\nfig.show()\n```\n![](/images/0401/3.PNG)\n<br>\n\n### **update_traces**\n---\n- marker_line_color='black'\n: 막대그래프 테두리 색상\n- marker_line_width=2.5\n: 막대그래프 테두리 두께\n\n<br>\n\n### **update_layout**\n---\n- yaxis_linewidth=2.5\ny축 테두리 두께\n- bargap=0.2\n막대그래프 두께 (0 ~ 1.0 숫자가 작을수록 두꺼움)\n- barmode='group'\n\n\n```python\nfig.update_traces(marker_line_color='black',\n                  marker_line_width=2.5)\nfig.update_layout(title='<b>Number of respondents: Africa vs Rest of the world (2021)<b>', \n                  font_family=\"San Serif\",\n                  yaxis_linewidth=2.5,\n                  bargap=0.2,\n                  barmode='group',\n                  titlefont={'size': 24},\n                  paper_bgcolor='#F5F5F5',\n                  plot_bgcolor='#F5F5F5',                  \n              \n                  )\n\n```\n![](/images/0401/4.PNG)\n<br>\n\n### **update_layout**\n---\n- fig.update_layout(xaxis = dict(\nx축 레이아웃 설정\n- autosize=False\n사이즈 고정\ntrue로 설정시 대시보드 자체가 화면에 맞는 크기로 엄청 커짐 (좌우로)\n- showgrid=False\n배경 격자무늬 생성 안함\n- margin\n배경화면에서의 그래프 크기 비율 조정\n\n\n```python\nfig.update_layout(\n        xaxis = dict(\n        zeroline = False,\n        showline = False,\n        showticklabels = False,\n        gridwidth = 1\n    ),\n    autosize=False,\n    margin=dict(\n        l=150,\n        r=50,\n        b=50,\n        t=100,\n    ),\n    )\n\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\nfig.show()\n```\n![](/images/0401/5.PNG)\n<br>\n<br>\n\n## **1-2. 수직 그래프(Bar_v)**\n### **연도별 african kagglers의 수 비교**\n### **데이터 전처리**\n---\n\n\n```python\n## historical data, all gender\nyear = ['2017', '2018', '2019', '2020', '2021']\nvalue = [afro17, afro18, afro19, afro20, afro21]\n\npercent =[\n    afro17/(afro17 +row17)*100,\n    afro18/(afro18 +row18)*100,\n    afro19/(afro19 +row19)*100,\n    afro20/(afro20 +row20)*100,\n    afro21/(afro21 +row21)*100]  \n   \n\ncolor = 5* ['salmon'] \ncolor[4] = 'gold'\n\nfig = go.Figure(data=[go.Bar(\n            y=value, x=year,\n            text=np.round(percent, 1), \n            textposition='outside',\n            texttemplate = [\"<b style='color: #f'>%{text}%</b>\"]*5,\n            textfont=dict(  family=\"sans serif\",\n                            size=16,\n                            color=\"black\"),\n            orientation='v',\n            marker_color= color, \n            opacity=0.6\n                    )])\n\nfig.update_traces(marker_line_color='black',\n                  marker_line_width=2.5)\n\nfig.update_layout(title='<b>The rise of African kagglers<b>', \n                  font_family=\"San Serif\",\n                  xaxis_linewidth=2.5,\n                  bargap=0.2,\n                  barmode='group',\n                  titlefont={'size': 28},\n                  template='simple_white',\n                  paper_bgcolor='#F5F5F5',\n                  plot_bgcolor='#F5F5F5',                  \n                  )\nfig.update_layout(yaxis_title='Number of Respondents',xaxis_title='Year',\n    autosize=False,\n    margin=dict(\n        l=100,\n        r=50,\n        b=50,\n        t=70,\n        pad=0,\n    ),\n    )\n\nfig.show()\n```\n![](/images/0401/6.PNG)\n<br>\n<br>\n<br>\n","slug":"kaggle8-bar-h-v","published":1,"updated":"2022-01-03T12:20:08.048Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cky2hohev00255nrj6g7y0bef","content":"<h3 id=\"import문\"><a href=\"#import문\" class=\"headerlink\" title=\"import문\"></a><strong>import문</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">import</span> seaborn <span class=\"keyword\">as</span> sns</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pylab <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> plotly.io <span class=\"keyword\">as</span> pio</span><br><span class=\"line\"><span class=\"keyword\">import</span> plotly.express <span class=\"keyword\">as</span> px</span><br><span class=\"line\"><span class=\"keyword\">import</span> plotly.graph_objects <span class=\"keyword\">as</span> go</span><br><span class=\"line\"><span class=\"keyword\">import</span> plotly.figure_factory <span class=\"keyword\">as</span> ff</span><br><span class=\"line\"><span class=\"keyword\">from</span> plotly.subplots <span class=\"keyword\">import</span> make_subplots</span><br><span class=\"line\"><span class=\"keyword\">from</span> plotly.offline <span class=\"keyword\">import</span> init_notebook_mode, iplot</span><br><span class=\"line\">init_notebook_mode(connected=<span class=\"literal\">True</span>)</span><br><span class=\"line\">pio.templates.default = <span class=\"string\">&quot;none&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># import plotly.offline as py</span></span><br><span class=\"line\"><span class=\"comment\"># py.offline.init_notebook_mode()</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">for</span> dirname, _, filenames <span class=\"keyword\">in</span> os.walk(<span class=\"string\">&#x27;/kaggle/input&#x27;</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> filename <span class=\"keyword\">in</span> filenames:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(os.path.join(dirname, filename))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> warnings</span><br><span class=\"line\">warnings.filterwarnings(<span class=\"string\">&quot;ignore&quot;</span>)</span><br></pre></td></tr></table></figure>\n<br>\n\n<h3 id=\"캐글-데이터-불러오기\"><a href=\"#캐글-데이터-불러오기\" class=\"headerlink\" title=\"캐글 데이터 불러오기\"></a><strong>캐글 데이터 불러오기</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df17= pd.read_csv(<span class=\"string\">&quot;/kaggle/input/kaggle-survey-2017/multipleChoiceResponses.csv&quot;</span>, encoding=<span class=\"string\">&quot;ISO-8859-1&quot;</span>)</span><br><span class=\"line\">df18= pd.read_csv(<span class=\"string\">&quot;/kaggle/input/kaggle-survey-2018/multipleChoiceResponses.csv&quot;</span>, )</span><br><span class=\"line\">df19= pd.read_csv(<span class=\"string\">&quot;/kaggle/input/kaggle-survey-2019/multiple_choice_responses.csv&quot;</span>, )</span><br><span class=\"line\">df20= pd.read_csv(<span class=\"string\">&quot;/kaggle/input/kaggle-survey-2020/kaggle_survey_2020_responses.csv&quot;</span>, )</span><br><span class=\"line\">df21= pd.read_csv(<span class=\"string\">&quot;/kaggle/input/kaggle-survey-2021/kaggle_survey_2021_responses.csv&quot;</span>, )</span><br></pre></td></tr></table></figure>\n<br>\n\n<h2 id=\"1-1-수평그래프-Bar-h\"><a href=\"#1-1-수평그래프-Bar-h\" class=\"headerlink\" title=\"1-1. 수평그래프(Bar_h)\"></a><strong>1-1. 수평그래프(Bar_h)</strong></h2><h3 id=\"데이터-전처리\"><a href=\"#데이터-전처리\" class=\"headerlink\" title=\"데이터 전처리\"></a><strong>데이터 전처리</strong></h3><hr>\n<ul>\n<li>리스트 생성<br>africa17, africa18, africa19, africa20, africa21</li>\n<li>isin<br>Pandas에서는 어떤 list에 존재하는 요소가 대상 DataFrame이나 Series에 존재 하는지 True(존재), False(존재안함)로 반환준다</li>\n<li>[df21[‘Q3’].isin(africa)]<br>거주지역이 africa 리스트에 있는 지역에 해당할경우 True로 반환</li>\n<li>df21[df21[‘Q3’].isin(africa)]<br>(21년도 기준)africa에 사는 사람들의 df21의 데이터 값만 불러옴</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># grouping african countries</span></span><br><span class=\"line\"><span class=\"comment\"># 리스트 만들어줌</span></span><br><span class=\"line\">africa17 = [<span class=\"string\">&#x27;Nigeria&#x27;</span>,<span class=\"string\">&#x27;Kenya&#x27;</span>, <span class=\"string\">&#x27;South Africa&#x27;</span>, <span class=\"string\">&#x27;Egypt&#x27;</span>]</span><br><span class=\"line\">africa18 = [<span class=\"string\">&#x27;Nigeria&#x27;</span>,<span class=\"string\">&#x27;Kenya&#x27;</span>, <span class=\"string\">&#x27;South Africa&#x27;</span>, <span class=\"string\">&#x27;Egypt&#x27;</span>, <span class=\"string\">&#x27;Tunisia&#x27;</span>, <span class=\"string\">&#x27;Morocco&#x27;</span>] </span><br><span class=\"line\">africa19 = [<span class=\"string\">&#x27;Nigeria&#x27;</span>,<span class=\"string\">&#x27;Kenya&#x27;</span>, <span class=\"string\">&#x27;South Africa&#x27;</span>, <span class=\"string\">&#x27;Egypt&#x27;</span>, <span class=\"string\">&#x27;Tunisia&#x27;</span>, <span class=\"string\">&#x27;Morocco&#x27;</span>, <span class=\"string\">&#x27;Algeria&#x27;</span>]</span><br><span class=\"line\">africa20 = [<span class=\"string\">&#x27;Nigeria&#x27;</span>,<span class=\"string\">&#x27;Kenya&#x27;</span>, <span class=\"string\">&#x27;South Africa&#x27;</span>, <span class=\"string\">&#x27;Egypt&#x27;</span>, <span class=\"string\">&#x27;Tunisia&#x27;</span>, <span class=\"string\">&#x27;Morocco&#x27;</span>, <span class=\"string\">&#x27;Ghana&#x27;</span>]</span><br><span class=\"line\">africa21 = [<span class=\"string\">&#x27;Nigeria&#x27;</span>,<span class=\"string\">&#x27;Kenya&#x27;</span>, <span class=\"string\">&#x27;South Africa&#x27;</span>, <span class=\"string\">&#x27;Egypt&#x27;</span>, <span class=\"string\">&#x27;Tunisia&#x27;</span>, <span class=\"string\">&#x27;Morocco&#x27;</span>, <span class=\"string\">&#x27;Algeria&#x27;</span>, <span class=\"string\">&#x27;Ghana&#x27;</span>, <span class=\"string\">&#x27;Uganda&#x27;</span>, <span class=\"string\">&#x27;Ethiopia&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#df21[&#x27;Q3&#x27;] -&gt; In which country do you currently reside? 거주지역은?</span></span><br><span class=\"line\">africa = [<span class=\"string\">&#x27;Nigeria&#x27;</span>, <span class=\"string\">&#x27;Egypt&#x27;</span>, <span class=\"string\">&#x27;South Africa&#x27;</span>, <span class=\"string\">&#x27;Algeria&#x27;</span>, <span class=\"string\">&#x27;Tunisia&#x27;</span>, <span class=\"string\">&#x27;Morocco&#x27;</span>, <span class=\"string\">&#x27;Kenya&#x27;</span>, <span class=\"string\">&#x27;Uganda&#x27;</span>, <span class=\"string\">&#x27;Ghana&#x27;</span>, <span class=\"string\">&#x27;Ethiopia&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#21년도 기준</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">df21_africa = df21[df21[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(africa)]</span><br><span class=\"line\">df21_world = df21[~df21[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(africa )]</span><br><span class=\"line\">df21[<span class=\"string\">&#x27;region&#x27;</span>]=[<span class=\"string\">&quot;Africa&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> africa <span class=\"keyword\">else</span> <span class=\"string\">&quot;World&quot;</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> df21[<span class=\"string\">&#x27;Q3&#x27;</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\">df20_africa = df20[df20[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(africa)]</span><br><span class=\"line\">df20_world = df20[~df20[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(africa )]</span><br><span class=\"line\">df20[<span class=\"string\">&#x27;region&#x27;</span>]=[<span class=\"string\">&quot;Africa&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> africa <span class=\"keyword\">else</span> <span class=\"string\">&quot;World&quot;</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> df20[<span class=\"string\">&#x27;Q3&#x27;</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\">df19_africa = df19[df19[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(africa)]</span><br><span class=\"line\">df19_world = df19[~df19[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(africa)]</span><br><span class=\"line\">df19[<span class=\"string\">&#x27;region&#x27;</span>]=[<span class=\"string\">&quot;Africa&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> africa <span class=\"keyword\">else</span> <span class=\"string\">&quot;World&quot;</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> df19[<span class=\"string\">&#x27;Q3&#x27;</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\">df18_africa = df18[df18[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(africa)]</span><br><span class=\"line\">df18_world = df18[~df18[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(africa)]</span><br><span class=\"line\">df18[<span class=\"string\">&#x27;region&#x27;</span>]=[<span class=\"string\">&quot;Africa&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> africa <span class=\"keyword\">else</span> <span class=\"string\">&quot;World&quot;</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> df18[<span class=\"string\">&#x27;Q3&#x27;</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\">df17_africa = df17[df17[<span class=\"string\">&#x27;Country&#x27;</span>].isin(africa)]</span><br><span class=\"line\">df17_world = df17[~df17[<span class=\"string\">&#x27;Country&#x27;</span>].isin(africa )]</span><br><span class=\"line\">df17[<span class=\"string\">&#x27;region&#x27;</span>]=[<span class=\"string\">&quot;Africa&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> africa <span class=\"keyword\">else</span> <span class=\"string\">&quot;World&quot;</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> df17[<span class=\"string\">&#x27;Country&#x27;</span>]]       </span><br></pre></td></tr></table></figure>\n\n\n<br>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(africa)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>[‘Nigeria’, ‘Egypt’, ‘South Africa’, ‘Algeria’, ‘Tunisia’, ‘Morocco’, ‘Kenya’, ‘Uganda’, ‘Ghana’, ‘Ethiopia’]</p>\n</blockquote>\n<br>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(df21[<span class=\"string\">&#x27;Q3&#x27;</span>])</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>  0        In which country do you currently reside?<br>    1                                            India<br>    2                                        Indonesia<br>    3                                         Pakistan<br>    4                                           Mexico<br>                           …<br>    25969                                        Egypt<br>    25970                                        China<br>    25971                                       Sweden<br>    25972                     United States of America<br>    25973                                        India<br>    Name: Q3, Length: 25974, dtype: object</p>\n</blockquote>\n<br>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(df21[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(africa))</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>  0        False<br>    1        False<br>    2        False<br>    3        False<br>    4        False<br>         …<br>    25969     True<br>    25970    False<br>    25971    False<br>    25972    False<br>    25973    False<br>    Name: Q3, Length: 25974, dtype: bool</p>\n</blockquote>\n<br>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(df21)</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/0401/1.PNG\"><br><br><br><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(df21[df21[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(africa)])</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/0401/2.PNG\"><br><br><br><br></p>\n<h3 id=\"데이터-전처리-1\"><a href=\"#데이터-전처리-1\" class=\"headerlink\" title=\"데이터 전처리\"></a><strong>데이터 전처리</strong></h3><hr>\n<ul>\n<li>afro21 = len(df21_africa)<br>df21_africa의 행 갯수 -&gt; 아프리카에 거주하는 캐글러 수</li>\n<li>len(df21)<br>행의 갯수 -&gt; 설문조사에 응답한 전세계 캐글러 수</li>\n<li>row21 = len(df21) - afro21<br>전세계 캐글러 수 - 아프리카 거주하는 캐글러 수 = 나머지</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">afro21 = <span class=\"built_in\">len</span>(df21_africa)</span><br><span class=\"line\">row21 = <span class=\"built_in\">len</span>(df21) - afro21</span><br><span class=\"line\"></span><br><span class=\"line\">afro20 = <span class=\"built_in\">len</span>(df20_africa)</span><br><span class=\"line\">row20 = <span class=\"built_in\">len</span>(df20) - afro20</span><br><span class=\"line\"></span><br><span class=\"line\">afro19 = <span class=\"built_in\">len</span>(df19_africa)</span><br><span class=\"line\">row19 = <span class=\"built_in\">len</span>(df19) - afro19</span><br><span class=\"line\"></span><br><span class=\"line\">afro18 = <span class=\"built_in\">len</span>(df18_africa)</span><br><span class=\"line\">row18 = <span class=\"built_in\">len</span>(df18) - afro18</span><br><span class=\"line\"></span><br><span class=\"line\">afro17 = <span class=\"built_in\">len</span>(df17_africa)</span><br><span class=\"line\">row17 = <span class=\"built_in\">len</span>(df17) - afro17</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(afro21) </span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">len</span>(df21)) </span><br><span class=\"line\"><span class=\"built_in\">print</span>(row21) </span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>  2060<br>    25974<br>    23914</p>\n</blockquote>\n<br>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#리스트 생성</span></span><br><span class=\"line\">region = [<span class=\"string\">&#x27;Africa&#x27;</span>, <span class=\"string\">&#x27;Rest of the World&#x27;</span>]</span><br><span class=\"line\">value = [afro21, row21]</span><br><span class=\"line\">percent =[afro21/(afro21 +row21)*<span class=\"number\">100</span>, row21/(afro21+row21)*<span class=\"number\">100</span>]</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(region)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(value)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(percent) <span class=\"comment\">#아프리카에 사는 캐글러, 전세계의 캐글러 percent 값</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>  [‘Africa’, ‘Rest of the World’]<br>    [2060, 23914]<br>    [7.931007931007931, 92.06899206899207]</p>\n</blockquote>\n<br>\n\n<h3 id=\"1-1-africa에-사는-kaggler-수-VS-전-세계-kaggler-수\"><a href=\"#1-1-africa에-사는-kaggler-수-VS-전-세계-kaggler-수\" class=\"headerlink\" title=\"1-1. africa에 사는 kaggler 수 VS 전 세계 kaggler 수\"></a><strong>1-1. africa에 사는 kaggler 수 VS 전 세계 kaggler 수</strong></h3><hr>\n<h3 id=\"데이터-시각화하기\"><a href=\"#데이터-시각화하기\" class=\"headerlink\" title=\"데이터 시각화하기\"></a><strong>데이터 시각화하기</strong></h3><hr>\n<ul>\n<li>go.Bar<br>막대그래프 생성</li>\n<li>np.round(percent,1)<br>반올림하기</li>\n<li>textposition=[‘outside’, ‘inside’]<br>괄호 안은 각각 설정값[afica, rest of the world]</li>\n<li>textfont=dict()<br>막대그래프 데이터 값 폰트 설정</li>\n<li>orientation=’h’<br>수평으로 그래프 그리기</li>\n<li>marker_color=[‘gold’, ‘salmon’]<br>막대그래프 색상 설정 (africa, rest of the world)</li>\n<li>opacity=0.6<br>그래프 투명도 설정 (0.0 ~ 1)</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fig = go.Figure(data=[go.Bar(</span><br><span class=\"line\">            x=value, y=region,</span><br><span class=\"line\">            text=(np.<span class=\"built_in\">round</span>(percent,<span class=\"number\">1</span>)),</span><br><span class=\"line\">            textposition=[<span class=\"string\">&#x27;outside&#x27;</span>, <span class=\"string\">&#x27;inside&#x27;</span>],</span><br><span class=\"line\">            texttemplate = [<span class=\"string\">&quot;&lt;b style=&#x27;color: #f&#x27;&gt;%&#123;text&#125;%&lt;/b&gt;&quot;</span>]*<span class=\"number\">2</span>,</span><br><span class=\"line\">            textfont=<span class=\"built_in\">dict</span>(  family=<span class=\"string\">&quot;sans serif&quot;</span>,</span><br><span class=\"line\">                            size=<span class=\"number\">16</span>,</span><br><span class=\"line\">                            color=<span class=\"string\">&quot;black&quot;</span>),</span><br><span class=\"line\">            orientation=<span class=\"string\">&#x27;h&#x27;</span>,</span><br><span class=\"line\">            marker_color=[<span class=\"string\">&#x27;gold&#x27;</span>, <span class=\"string\">&#x27;salmon&#x27;</span>],</span><br><span class=\"line\">            opacity=<span class=\"number\">0.6</span>,</span><br><span class=\"line\">                    )])</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/0401/3.PNG\"><br><br></p>\n<h3 id=\"update-traces\"><a href=\"#update-traces\" class=\"headerlink\" title=\"update_traces\"></a><strong>update_traces</strong></h3><hr>\n<ul>\n<li>marker_line_color=’black’<br>: 막대그래프 테두리 색상</li>\n<li>marker_line_width=2.5<br>: 막대그래프 테두리 두께</li>\n</ul>\n<br>\n\n<h3 id=\"update-layout\"><a href=\"#update-layout\" class=\"headerlink\" title=\"update_layout\"></a><strong>update_layout</strong></h3><hr>\n<ul>\n<li>yaxis_linewidth=2.5<br>y축 테두리 두께</li>\n<li>bargap=0.2<br>막대그래프 두께 (0 ~ 1.0 숫자가 작을수록 두꺼움)</li>\n<li>barmode=’group’</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fig.update_traces(marker_line_color=<span class=\"string\">&#x27;black&#x27;</span>,</span><br><span class=\"line\">                  marker_line_width=<span class=\"number\">2.5</span>)</span><br><span class=\"line\">fig.update_layout(title=<span class=\"string\">&#x27;&lt;b&gt;Number of respondents: Africa vs Rest of the world (2021)&lt;b&gt;&#x27;</span>, </span><br><span class=\"line\">                  font_family=<span class=\"string\">&quot;San Serif&quot;</span>,</span><br><span class=\"line\">                  yaxis_linewidth=<span class=\"number\">2.5</span>,</span><br><span class=\"line\">                  bargap=<span class=\"number\">0.2</span>,</span><br><span class=\"line\">                  barmode=<span class=\"string\">&#x27;group&#x27;</span>,</span><br><span class=\"line\">                  titlefont=&#123;<span class=\"string\">&#x27;size&#x27;</span>: <span class=\"number\">24</span>&#125;,</span><br><span class=\"line\">                  paper_bgcolor=<span class=\"string\">&#x27;#F5F5F5&#x27;</span>,</span><br><span class=\"line\">                  plot_bgcolor=<span class=\"string\">&#x27;#F5F5F5&#x27;</span>,                  </span><br><span class=\"line\">              </span><br><span class=\"line\">                  )</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/0401/4.PNG\"><br><br></p>\n<h3 id=\"update-layout-1\"><a href=\"#update-layout-1\" class=\"headerlink\" title=\"update_layout\"></a><strong>update_layout</strong></h3><hr>\n<ul>\n<li>fig.update_layout(xaxis = dict(<br>x축 레이아웃 설정</li>\n<li>autosize=False<br>사이즈 고정<br>true로 설정시 대시보드 자체가 화면에 맞는 크기로 엄청 커짐 (좌우로)</li>\n<li>showgrid=False<br>배경 격자무늬 생성 안함</li>\n<li>margin<br>배경화면에서의 그래프 크기 비율 조정</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fig.update_layout(</span><br><span class=\"line\">        xaxis = <span class=\"built_in\">dict</span>(</span><br><span class=\"line\">        zeroline = <span class=\"literal\">False</span>,</span><br><span class=\"line\">        showline = <span class=\"literal\">False</span>,</span><br><span class=\"line\">        showticklabels = <span class=\"literal\">False</span>,</span><br><span class=\"line\">        gridwidth = <span class=\"number\">1</span></span><br><span class=\"line\">    ),</span><br><span class=\"line\">    autosize=<span class=\"literal\">False</span>,</span><br><span class=\"line\">    margin=<span class=\"built_in\">dict</span>(</span><br><span class=\"line\">        l=<span class=\"number\">150</span>,</span><br><span class=\"line\">        r=<span class=\"number\">50</span>,</span><br><span class=\"line\">        b=<span class=\"number\">50</span>,</span><br><span class=\"line\">        t=<span class=\"number\">100</span>,</span><br><span class=\"line\">    ),</span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_xaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\">fig.update_yaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/0401/5.PNG\"><br><br><br><br></p>\n<h2 id=\"1-2-수직-그래프-Bar-v\"><a href=\"#1-2-수직-그래프-Bar-v\" class=\"headerlink\" title=\"1-2. 수직 그래프(Bar_v)\"></a><strong>1-2. 수직 그래프(Bar_v)</strong></h2><h3 id=\"연도별-african-kagglers의-수-비교\"><a href=\"#연도별-african-kagglers의-수-비교\" class=\"headerlink\" title=\"연도별 african kagglers의 수 비교\"></a><strong>연도별 african kagglers의 수 비교</strong></h3><h3 id=\"데이터-전처리-2\"><a href=\"#데이터-전처리-2\" class=\"headerlink\" title=\"데이터 전처리\"></a><strong>데이터 전처리</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## historical data, all gender</span></span><br><span class=\"line\">year = [<span class=\"string\">&#x27;2017&#x27;</span>, <span class=\"string\">&#x27;2018&#x27;</span>, <span class=\"string\">&#x27;2019&#x27;</span>, <span class=\"string\">&#x27;2020&#x27;</span>, <span class=\"string\">&#x27;2021&#x27;</span>]</span><br><span class=\"line\">value = [afro17, afro18, afro19, afro20, afro21]</span><br><span class=\"line\"></span><br><span class=\"line\">percent =[</span><br><span class=\"line\">    afro17/(afro17 +row17)*<span class=\"number\">100</span>,</span><br><span class=\"line\">    afro18/(afro18 +row18)*<span class=\"number\">100</span>,</span><br><span class=\"line\">    afro19/(afro19 +row19)*<span class=\"number\">100</span>,</span><br><span class=\"line\">    afro20/(afro20 +row20)*<span class=\"number\">100</span>,</span><br><span class=\"line\">    afro21/(afro21 +row21)*<span class=\"number\">100</span>]  </span><br><span class=\"line\">   </span><br><span class=\"line\"></span><br><span class=\"line\">color = <span class=\"number\">5</span>* [<span class=\"string\">&#x27;salmon&#x27;</span>] </span><br><span class=\"line\">color[<span class=\"number\">4</span>] = <span class=\"string\">&#x27;gold&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">fig = go.Figure(data=[go.Bar(</span><br><span class=\"line\">            y=value, x=year,</span><br><span class=\"line\">            text=np.<span class=\"built_in\">round</span>(percent, <span class=\"number\">1</span>), </span><br><span class=\"line\">            textposition=<span class=\"string\">&#x27;outside&#x27;</span>,</span><br><span class=\"line\">            texttemplate = [<span class=\"string\">&quot;&lt;b style=&#x27;color: #f&#x27;&gt;%&#123;text&#125;%&lt;/b&gt;&quot;</span>]*<span class=\"number\">5</span>,</span><br><span class=\"line\">            textfont=<span class=\"built_in\">dict</span>(  family=<span class=\"string\">&quot;sans serif&quot;</span>,</span><br><span class=\"line\">                            size=<span class=\"number\">16</span>,</span><br><span class=\"line\">                            color=<span class=\"string\">&quot;black&quot;</span>),</span><br><span class=\"line\">            orientation=<span class=\"string\">&#x27;v&#x27;</span>,</span><br><span class=\"line\">            marker_color= color, </span><br><span class=\"line\">            opacity=<span class=\"number\">0.6</span></span><br><span class=\"line\">                    )])</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_traces(marker_line_color=<span class=\"string\">&#x27;black&#x27;</span>,</span><br><span class=\"line\">                  marker_line_width=<span class=\"number\">2.5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(title=<span class=\"string\">&#x27;&lt;b&gt;The rise of African kagglers&lt;b&gt;&#x27;</span>, </span><br><span class=\"line\">                  font_family=<span class=\"string\">&quot;San Serif&quot;</span>,</span><br><span class=\"line\">                  xaxis_linewidth=<span class=\"number\">2.5</span>,</span><br><span class=\"line\">                  bargap=<span class=\"number\">0.2</span>,</span><br><span class=\"line\">                  barmode=<span class=\"string\">&#x27;group&#x27;</span>,</span><br><span class=\"line\">                  titlefont=&#123;<span class=\"string\">&#x27;size&#x27;</span>: <span class=\"number\">28</span>&#125;,</span><br><span class=\"line\">                  template=<span class=\"string\">&#x27;simple_white&#x27;</span>,</span><br><span class=\"line\">                  paper_bgcolor=<span class=\"string\">&#x27;#F5F5F5&#x27;</span>,</span><br><span class=\"line\">                  plot_bgcolor=<span class=\"string\">&#x27;#F5F5F5&#x27;</span>,                  </span><br><span class=\"line\">                  )</span><br><span class=\"line\">fig.update_layout(yaxis_title=<span class=\"string\">&#x27;Number of Respondents&#x27;</span>,xaxis_title=<span class=\"string\">&#x27;Year&#x27;</span>,</span><br><span class=\"line\">    autosize=<span class=\"literal\">False</span>,</span><br><span class=\"line\">    margin=<span class=\"built_in\">dict</span>(</span><br><span class=\"line\">        l=<span class=\"number\">100</span>,</span><br><span class=\"line\">        r=<span class=\"number\">50</span>,</span><br><span class=\"line\">        b=<span class=\"number\">50</span>,</span><br><span class=\"line\">        t=<span class=\"number\">70</span>,</span><br><span class=\"line\">        pad=<span class=\"number\">0</span>,</span><br><span class=\"line\">    ),</span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/0401/6.PNG\"><br><br><br><br><br><br></p>\n","site":{"data":{}},"excerpt":"import문\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pylab as plt\n\nimport plotly.io as pio\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.figure_factory as ff\nfrom plotly.s","more":"<h3 id=\"import문\"><a href=\"#import문\" class=\"headerlink\" title=\"import문\"></a><strong>import문</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">import</span> seaborn <span class=\"keyword\">as</span> sns</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pylab <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> plotly.io <span class=\"keyword\">as</span> pio</span><br><span class=\"line\"><span class=\"keyword\">import</span> plotly.express <span class=\"keyword\">as</span> px</span><br><span class=\"line\"><span class=\"keyword\">import</span> plotly.graph_objects <span class=\"keyword\">as</span> go</span><br><span class=\"line\"><span class=\"keyword\">import</span> plotly.figure_factory <span class=\"keyword\">as</span> ff</span><br><span class=\"line\"><span class=\"keyword\">from</span> plotly.subplots <span class=\"keyword\">import</span> make_subplots</span><br><span class=\"line\"><span class=\"keyword\">from</span> plotly.offline <span class=\"keyword\">import</span> init_notebook_mode, iplot</span><br><span class=\"line\">init_notebook_mode(connected=<span class=\"literal\">True</span>)</span><br><span class=\"line\">pio.templates.default = <span class=\"string\">&quot;none&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># import plotly.offline as py</span></span><br><span class=\"line\"><span class=\"comment\"># py.offline.init_notebook_mode()</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">for</span> dirname, _, filenames <span class=\"keyword\">in</span> os.walk(<span class=\"string\">&#x27;/kaggle/input&#x27;</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> filename <span class=\"keyword\">in</span> filenames:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(os.path.join(dirname, filename))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> warnings</span><br><span class=\"line\">warnings.filterwarnings(<span class=\"string\">&quot;ignore&quot;</span>)</span><br></pre></td></tr></table></figure>\n<br>\n\n<h3 id=\"캐글-데이터-불러오기\"><a href=\"#캐글-데이터-불러오기\" class=\"headerlink\" title=\"캐글 데이터 불러오기\"></a><strong>캐글 데이터 불러오기</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df17= pd.read_csv(<span class=\"string\">&quot;/kaggle/input/kaggle-survey-2017/multipleChoiceResponses.csv&quot;</span>, encoding=<span class=\"string\">&quot;ISO-8859-1&quot;</span>)</span><br><span class=\"line\">df18= pd.read_csv(<span class=\"string\">&quot;/kaggle/input/kaggle-survey-2018/multipleChoiceResponses.csv&quot;</span>, )</span><br><span class=\"line\">df19= pd.read_csv(<span class=\"string\">&quot;/kaggle/input/kaggle-survey-2019/multiple_choice_responses.csv&quot;</span>, )</span><br><span class=\"line\">df20= pd.read_csv(<span class=\"string\">&quot;/kaggle/input/kaggle-survey-2020/kaggle_survey_2020_responses.csv&quot;</span>, )</span><br><span class=\"line\">df21= pd.read_csv(<span class=\"string\">&quot;/kaggle/input/kaggle-survey-2021/kaggle_survey_2021_responses.csv&quot;</span>, )</span><br></pre></td></tr></table></figure>\n<br>\n\n<h2 id=\"1-1-수평그래프-Bar-h\"><a href=\"#1-1-수평그래프-Bar-h\" class=\"headerlink\" title=\"1-1. 수평그래프(Bar_h)\"></a><strong>1-1. 수평그래프(Bar_h)</strong></h2><h3 id=\"데이터-전처리\"><a href=\"#데이터-전처리\" class=\"headerlink\" title=\"데이터 전처리\"></a><strong>데이터 전처리</strong></h3><hr>\n<ul>\n<li>리스트 생성<br>africa17, africa18, africa19, africa20, africa21</li>\n<li>isin<br>Pandas에서는 어떤 list에 존재하는 요소가 대상 DataFrame이나 Series에 존재 하는지 True(존재), False(존재안함)로 반환준다</li>\n<li>[df21[‘Q3’].isin(africa)]<br>거주지역이 africa 리스트에 있는 지역에 해당할경우 True로 반환</li>\n<li>df21[df21[‘Q3’].isin(africa)]<br>(21년도 기준)africa에 사는 사람들의 df21의 데이터 값만 불러옴</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># grouping african countries</span></span><br><span class=\"line\"><span class=\"comment\"># 리스트 만들어줌</span></span><br><span class=\"line\">africa17 = [<span class=\"string\">&#x27;Nigeria&#x27;</span>,<span class=\"string\">&#x27;Kenya&#x27;</span>, <span class=\"string\">&#x27;South Africa&#x27;</span>, <span class=\"string\">&#x27;Egypt&#x27;</span>]</span><br><span class=\"line\">africa18 = [<span class=\"string\">&#x27;Nigeria&#x27;</span>,<span class=\"string\">&#x27;Kenya&#x27;</span>, <span class=\"string\">&#x27;South Africa&#x27;</span>, <span class=\"string\">&#x27;Egypt&#x27;</span>, <span class=\"string\">&#x27;Tunisia&#x27;</span>, <span class=\"string\">&#x27;Morocco&#x27;</span>] </span><br><span class=\"line\">africa19 = [<span class=\"string\">&#x27;Nigeria&#x27;</span>,<span class=\"string\">&#x27;Kenya&#x27;</span>, <span class=\"string\">&#x27;South Africa&#x27;</span>, <span class=\"string\">&#x27;Egypt&#x27;</span>, <span class=\"string\">&#x27;Tunisia&#x27;</span>, <span class=\"string\">&#x27;Morocco&#x27;</span>, <span class=\"string\">&#x27;Algeria&#x27;</span>]</span><br><span class=\"line\">africa20 = [<span class=\"string\">&#x27;Nigeria&#x27;</span>,<span class=\"string\">&#x27;Kenya&#x27;</span>, <span class=\"string\">&#x27;South Africa&#x27;</span>, <span class=\"string\">&#x27;Egypt&#x27;</span>, <span class=\"string\">&#x27;Tunisia&#x27;</span>, <span class=\"string\">&#x27;Morocco&#x27;</span>, <span class=\"string\">&#x27;Ghana&#x27;</span>]</span><br><span class=\"line\">africa21 = [<span class=\"string\">&#x27;Nigeria&#x27;</span>,<span class=\"string\">&#x27;Kenya&#x27;</span>, <span class=\"string\">&#x27;South Africa&#x27;</span>, <span class=\"string\">&#x27;Egypt&#x27;</span>, <span class=\"string\">&#x27;Tunisia&#x27;</span>, <span class=\"string\">&#x27;Morocco&#x27;</span>, <span class=\"string\">&#x27;Algeria&#x27;</span>, <span class=\"string\">&#x27;Ghana&#x27;</span>, <span class=\"string\">&#x27;Uganda&#x27;</span>, <span class=\"string\">&#x27;Ethiopia&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#df21[&#x27;Q3&#x27;] -&gt; In which country do you currently reside? 거주지역은?</span></span><br><span class=\"line\">africa = [<span class=\"string\">&#x27;Nigeria&#x27;</span>, <span class=\"string\">&#x27;Egypt&#x27;</span>, <span class=\"string\">&#x27;South Africa&#x27;</span>, <span class=\"string\">&#x27;Algeria&#x27;</span>, <span class=\"string\">&#x27;Tunisia&#x27;</span>, <span class=\"string\">&#x27;Morocco&#x27;</span>, <span class=\"string\">&#x27;Kenya&#x27;</span>, <span class=\"string\">&#x27;Uganda&#x27;</span>, <span class=\"string\">&#x27;Ghana&#x27;</span>, <span class=\"string\">&#x27;Ethiopia&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#21년도 기준</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">df21_africa = df21[df21[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(africa)]</span><br><span class=\"line\">df21_world = df21[~df21[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(africa )]</span><br><span class=\"line\">df21[<span class=\"string\">&#x27;region&#x27;</span>]=[<span class=\"string\">&quot;Africa&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> africa <span class=\"keyword\">else</span> <span class=\"string\">&quot;World&quot;</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> df21[<span class=\"string\">&#x27;Q3&#x27;</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\">df20_africa = df20[df20[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(africa)]</span><br><span class=\"line\">df20_world = df20[~df20[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(africa )]</span><br><span class=\"line\">df20[<span class=\"string\">&#x27;region&#x27;</span>]=[<span class=\"string\">&quot;Africa&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> africa <span class=\"keyword\">else</span> <span class=\"string\">&quot;World&quot;</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> df20[<span class=\"string\">&#x27;Q3&#x27;</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\">df19_africa = df19[df19[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(africa)]</span><br><span class=\"line\">df19_world = df19[~df19[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(africa)]</span><br><span class=\"line\">df19[<span class=\"string\">&#x27;region&#x27;</span>]=[<span class=\"string\">&quot;Africa&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> africa <span class=\"keyword\">else</span> <span class=\"string\">&quot;World&quot;</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> df19[<span class=\"string\">&#x27;Q3&#x27;</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\">df18_africa = df18[df18[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(africa)]</span><br><span class=\"line\">df18_world = df18[~df18[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(africa)]</span><br><span class=\"line\">df18[<span class=\"string\">&#x27;region&#x27;</span>]=[<span class=\"string\">&quot;Africa&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> africa <span class=\"keyword\">else</span> <span class=\"string\">&quot;World&quot;</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> df18[<span class=\"string\">&#x27;Q3&#x27;</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\">df17_africa = df17[df17[<span class=\"string\">&#x27;Country&#x27;</span>].isin(africa)]</span><br><span class=\"line\">df17_world = df17[~df17[<span class=\"string\">&#x27;Country&#x27;</span>].isin(africa )]</span><br><span class=\"line\">df17[<span class=\"string\">&#x27;region&#x27;</span>]=[<span class=\"string\">&quot;Africa&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> africa <span class=\"keyword\">else</span> <span class=\"string\">&quot;World&quot;</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> df17[<span class=\"string\">&#x27;Country&#x27;</span>]]       </span><br></pre></td></tr></table></figure>\n\n\n<br>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(africa)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>[‘Nigeria’, ‘Egypt’, ‘South Africa’, ‘Algeria’, ‘Tunisia’, ‘Morocco’, ‘Kenya’, ‘Uganda’, ‘Ghana’, ‘Ethiopia’]</p>\n</blockquote>\n<br>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(df21[<span class=\"string\">&#x27;Q3&#x27;</span>])</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>  0        In which country do you currently reside?<br>    1                                            India<br>    2                                        Indonesia<br>    3                                         Pakistan<br>    4                                           Mexico<br>                           …<br>    25969                                        Egypt<br>    25970                                        China<br>    25971                                       Sweden<br>    25972                     United States of America<br>    25973                                        India<br>    Name: Q3, Length: 25974, dtype: object</p>\n</blockquote>\n<br>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(df21[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(africa))</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>  0        False<br>    1        False<br>    2        False<br>    3        False<br>    4        False<br>         …<br>    25969     True<br>    25970    False<br>    25971    False<br>    25972    False<br>    25973    False<br>    Name: Q3, Length: 25974, dtype: bool</p>\n</blockquote>\n<br>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(df21)</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/0401/1.PNG\"><br><br><br><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(df21[df21[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(africa)])</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/0401/2.PNG\"><br><br><br><br></p>\n<h3 id=\"데이터-전처리-1\"><a href=\"#데이터-전처리-1\" class=\"headerlink\" title=\"데이터 전처리\"></a><strong>데이터 전처리</strong></h3><hr>\n<ul>\n<li>afro21 = len(df21_africa)<br>df21_africa의 행 갯수 -&gt; 아프리카에 거주하는 캐글러 수</li>\n<li>len(df21)<br>행의 갯수 -&gt; 설문조사에 응답한 전세계 캐글러 수</li>\n<li>row21 = len(df21) - afro21<br>전세계 캐글러 수 - 아프리카 거주하는 캐글러 수 = 나머지</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">afro21 = <span class=\"built_in\">len</span>(df21_africa)</span><br><span class=\"line\">row21 = <span class=\"built_in\">len</span>(df21) - afro21</span><br><span class=\"line\"></span><br><span class=\"line\">afro20 = <span class=\"built_in\">len</span>(df20_africa)</span><br><span class=\"line\">row20 = <span class=\"built_in\">len</span>(df20) - afro20</span><br><span class=\"line\"></span><br><span class=\"line\">afro19 = <span class=\"built_in\">len</span>(df19_africa)</span><br><span class=\"line\">row19 = <span class=\"built_in\">len</span>(df19) - afro19</span><br><span class=\"line\"></span><br><span class=\"line\">afro18 = <span class=\"built_in\">len</span>(df18_africa)</span><br><span class=\"line\">row18 = <span class=\"built_in\">len</span>(df18) - afro18</span><br><span class=\"line\"></span><br><span class=\"line\">afro17 = <span class=\"built_in\">len</span>(df17_africa)</span><br><span class=\"line\">row17 = <span class=\"built_in\">len</span>(df17) - afro17</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(afro21) </span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">len</span>(df21)) </span><br><span class=\"line\"><span class=\"built_in\">print</span>(row21) </span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>  2060<br>    25974<br>    23914</p>\n</blockquote>\n<br>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#리스트 생성</span></span><br><span class=\"line\">region = [<span class=\"string\">&#x27;Africa&#x27;</span>, <span class=\"string\">&#x27;Rest of the World&#x27;</span>]</span><br><span class=\"line\">value = [afro21, row21]</span><br><span class=\"line\">percent =[afro21/(afro21 +row21)*<span class=\"number\">100</span>, row21/(afro21+row21)*<span class=\"number\">100</span>]</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(region)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(value)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(percent) <span class=\"comment\">#아프리카에 사는 캐글러, 전세계의 캐글러 percent 값</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>  [‘Africa’, ‘Rest of the World’]<br>    [2060, 23914]<br>    [7.931007931007931, 92.06899206899207]</p>\n</blockquote>\n<br>\n\n<h3 id=\"1-1-africa에-사는-kaggler-수-VS-전-세계-kaggler-수\"><a href=\"#1-1-africa에-사는-kaggler-수-VS-전-세계-kaggler-수\" class=\"headerlink\" title=\"1-1. africa에 사는 kaggler 수 VS 전 세계 kaggler 수\"></a><strong>1-1. africa에 사는 kaggler 수 VS 전 세계 kaggler 수</strong></h3><hr>\n<h3 id=\"데이터-시각화하기\"><a href=\"#데이터-시각화하기\" class=\"headerlink\" title=\"데이터 시각화하기\"></a><strong>데이터 시각화하기</strong></h3><hr>\n<ul>\n<li>go.Bar<br>막대그래프 생성</li>\n<li>np.round(percent,1)<br>반올림하기</li>\n<li>textposition=[‘outside’, ‘inside’]<br>괄호 안은 각각 설정값[afica, rest of the world]</li>\n<li>textfont=dict()<br>막대그래프 데이터 값 폰트 설정</li>\n<li>orientation=’h’<br>수평으로 그래프 그리기</li>\n<li>marker_color=[‘gold’, ‘salmon’]<br>막대그래프 색상 설정 (africa, rest of the world)</li>\n<li>opacity=0.6<br>그래프 투명도 설정 (0.0 ~ 1)</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fig = go.Figure(data=[go.Bar(</span><br><span class=\"line\">            x=value, y=region,</span><br><span class=\"line\">            text=(np.<span class=\"built_in\">round</span>(percent,<span class=\"number\">1</span>)),</span><br><span class=\"line\">            textposition=[<span class=\"string\">&#x27;outside&#x27;</span>, <span class=\"string\">&#x27;inside&#x27;</span>],</span><br><span class=\"line\">            texttemplate = [<span class=\"string\">&quot;&lt;b style=&#x27;color: #f&#x27;&gt;%&#123;text&#125;%&lt;/b&gt;&quot;</span>]*<span class=\"number\">2</span>,</span><br><span class=\"line\">            textfont=<span class=\"built_in\">dict</span>(  family=<span class=\"string\">&quot;sans serif&quot;</span>,</span><br><span class=\"line\">                            size=<span class=\"number\">16</span>,</span><br><span class=\"line\">                            color=<span class=\"string\">&quot;black&quot;</span>),</span><br><span class=\"line\">            orientation=<span class=\"string\">&#x27;h&#x27;</span>,</span><br><span class=\"line\">            marker_color=[<span class=\"string\">&#x27;gold&#x27;</span>, <span class=\"string\">&#x27;salmon&#x27;</span>],</span><br><span class=\"line\">            opacity=<span class=\"number\">0.6</span>,</span><br><span class=\"line\">                    )])</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/0401/3.PNG\"><br><br></p>\n<h3 id=\"update-traces\"><a href=\"#update-traces\" class=\"headerlink\" title=\"update_traces\"></a><strong>update_traces</strong></h3><hr>\n<ul>\n<li>marker_line_color=’black’<br>: 막대그래프 테두리 색상</li>\n<li>marker_line_width=2.5<br>: 막대그래프 테두리 두께</li>\n</ul>\n<br>\n\n<h3 id=\"update-layout\"><a href=\"#update-layout\" class=\"headerlink\" title=\"update_layout\"></a><strong>update_layout</strong></h3><hr>\n<ul>\n<li>yaxis_linewidth=2.5<br>y축 테두리 두께</li>\n<li>bargap=0.2<br>막대그래프 두께 (0 ~ 1.0 숫자가 작을수록 두꺼움)</li>\n<li>barmode=’group’</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fig.update_traces(marker_line_color=<span class=\"string\">&#x27;black&#x27;</span>,</span><br><span class=\"line\">                  marker_line_width=<span class=\"number\">2.5</span>)</span><br><span class=\"line\">fig.update_layout(title=<span class=\"string\">&#x27;&lt;b&gt;Number of respondents: Africa vs Rest of the world (2021)&lt;b&gt;&#x27;</span>, </span><br><span class=\"line\">                  font_family=<span class=\"string\">&quot;San Serif&quot;</span>,</span><br><span class=\"line\">                  yaxis_linewidth=<span class=\"number\">2.5</span>,</span><br><span class=\"line\">                  bargap=<span class=\"number\">0.2</span>,</span><br><span class=\"line\">                  barmode=<span class=\"string\">&#x27;group&#x27;</span>,</span><br><span class=\"line\">                  titlefont=&#123;<span class=\"string\">&#x27;size&#x27;</span>: <span class=\"number\">24</span>&#125;,</span><br><span class=\"line\">                  paper_bgcolor=<span class=\"string\">&#x27;#F5F5F5&#x27;</span>,</span><br><span class=\"line\">                  plot_bgcolor=<span class=\"string\">&#x27;#F5F5F5&#x27;</span>,                  </span><br><span class=\"line\">              </span><br><span class=\"line\">                  )</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/0401/4.PNG\"><br><br></p>\n<h3 id=\"update-layout-1\"><a href=\"#update-layout-1\" class=\"headerlink\" title=\"update_layout\"></a><strong>update_layout</strong></h3><hr>\n<ul>\n<li>fig.update_layout(xaxis = dict(<br>x축 레이아웃 설정</li>\n<li>autosize=False<br>사이즈 고정<br>true로 설정시 대시보드 자체가 화면에 맞는 크기로 엄청 커짐 (좌우로)</li>\n<li>showgrid=False<br>배경 격자무늬 생성 안함</li>\n<li>margin<br>배경화면에서의 그래프 크기 비율 조정</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fig.update_layout(</span><br><span class=\"line\">        xaxis = <span class=\"built_in\">dict</span>(</span><br><span class=\"line\">        zeroline = <span class=\"literal\">False</span>,</span><br><span class=\"line\">        showline = <span class=\"literal\">False</span>,</span><br><span class=\"line\">        showticklabels = <span class=\"literal\">False</span>,</span><br><span class=\"line\">        gridwidth = <span class=\"number\">1</span></span><br><span class=\"line\">    ),</span><br><span class=\"line\">    autosize=<span class=\"literal\">False</span>,</span><br><span class=\"line\">    margin=<span class=\"built_in\">dict</span>(</span><br><span class=\"line\">        l=<span class=\"number\">150</span>,</span><br><span class=\"line\">        r=<span class=\"number\">50</span>,</span><br><span class=\"line\">        b=<span class=\"number\">50</span>,</span><br><span class=\"line\">        t=<span class=\"number\">100</span>,</span><br><span class=\"line\">    ),</span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_xaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\">fig.update_yaxes(showgrid=<span class=\"literal\">False</span>)</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/0401/5.PNG\"><br><br><br><br></p>\n<h2 id=\"1-2-수직-그래프-Bar-v\"><a href=\"#1-2-수직-그래프-Bar-v\" class=\"headerlink\" title=\"1-2. 수직 그래프(Bar_v)\"></a><strong>1-2. 수직 그래프(Bar_v)</strong></h2><h3 id=\"연도별-african-kagglers의-수-비교\"><a href=\"#연도별-african-kagglers의-수-비교\" class=\"headerlink\" title=\"연도별 african kagglers의 수 비교\"></a><strong>연도별 african kagglers의 수 비교</strong></h3><h3 id=\"데이터-전처리-2\"><a href=\"#데이터-전처리-2\" class=\"headerlink\" title=\"데이터 전처리\"></a><strong>데이터 전처리</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## historical data, all gender</span></span><br><span class=\"line\">year = [<span class=\"string\">&#x27;2017&#x27;</span>, <span class=\"string\">&#x27;2018&#x27;</span>, <span class=\"string\">&#x27;2019&#x27;</span>, <span class=\"string\">&#x27;2020&#x27;</span>, <span class=\"string\">&#x27;2021&#x27;</span>]</span><br><span class=\"line\">value = [afro17, afro18, afro19, afro20, afro21]</span><br><span class=\"line\"></span><br><span class=\"line\">percent =[</span><br><span class=\"line\">    afro17/(afro17 +row17)*<span class=\"number\">100</span>,</span><br><span class=\"line\">    afro18/(afro18 +row18)*<span class=\"number\">100</span>,</span><br><span class=\"line\">    afro19/(afro19 +row19)*<span class=\"number\">100</span>,</span><br><span class=\"line\">    afro20/(afro20 +row20)*<span class=\"number\">100</span>,</span><br><span class=\"line\">    afro21/(afro21 +row21)*<span class=\"number\">100</span>]  </span><br><span class=\"line\">   </span><br><span class=\"line\"></span><br><span class=\"line\">color = <span class=\"number\">5</span>* [<span class=\"string\">&#x27;salmon&#x27;</span>] </span><br><span class=\"line\">color[<span class=\"number\">4</span>] = <span class=\"string\">&#x27;gold&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">fig = go.Figure(data=[go.Bar(</span><br><span class=\"line\">            y=value, x=year,</span><br><span class=\"line\">            text=np.<span class=\"built_in\">round</span>(percent, <span class=\"number\">1</span>), </span><br><span class=\"line\">            textposition=<span class=\"string\">&#x27;outside&#x27;</span>,</span><br><span class=\"line\">            texttemplate = [<span class=\"string\">&quot;&lt;b style=&#x27;color: #f&#x27;&gt;%&#123;text&#125;%&lt;/b&gt;&quot;</span>]*<span class=\"number\">5</span>,</span><br><span class=\"line\">            textfont=<span class=\"built_in\">dict</span>(  family=<span class=\"string\">&quot;sans serif&quot;</span>,</span><br><span class=\"line\">                            size=<span class=\"number\">16</span>,</span><br><span class=\"line\">                            color=<span class=\"string\">&quot;black&quot;</span>),</span><br><span class=\"line\">            orientation=<span class=\"string\">&#x27;v&#x27;</span>,</span><br><span class=\"line\">            marker_color= color, </span><br><span class=\"line\">            opacity=<span class=\"number\">0.6</span></span><br><span class=\"line\">                    )])</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_traces(marker_line_color=<span class=\"string\">&#x27;black&#x27;</span>,</span><br><span class=\"line\">                  marker_line_width=<span class=\"number\">2.5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(title=<span class=\"string\">&#x27;&lt;b&gt;The rise of African kagglers&lt;b&gt;&#x27;</span>, </span><br><span class=\"line\">                  font_family=<span class=\"string\">&quot;San Serif&quot;</span>,</span><br><span class=\"line\">                  xaxis_linewidth=<span class=\"number\">2.5</span>,</span><br><span class=\"line\">                  bargap=<span class=\"number\">0.2</span>,</span><br><span class=\"line\">                  barmode=<span class=\"string\">&#x27;group&#x27;</span>,</span><br><span class=\"line\">                  titlefont=&#123;<span class=\"string\">&#x27;size&#x27;</span>: <span class=\"number\">28</span>&#125;,</span><br><span class=\"line\">                  template=<span class=\"string\">&#x27;simple_white&#x27;</span>,</span><br><span class=\"line\">                  paper_bgcolor=<span class=\"string\">&#x27;#F5F5F5&#x27;</span>,</span><br><span class=\"line\">                  plot_bgcolor=<span class=\"string\">&#x27;#F5F5F5&#x27;</span>,                  </span><br><span class=\"line\">                  )</span><br><span class=\"line\">fig.update_layout(yaxis_title=<span class=\"string\">&#x27;Number of Respondents&#x27;</span>,xaxis_title=<span class=\"string\">&#x27;Year&#x27;</span>,</span><br><span class=\"line\">    autosize=<span class=\"literal\">False</span>,</span><br><span class=\"line\">    margin=<span class=\"built_in\">dict</span>(</span><br><span class=\"line\">        l=<span class=\"number\">100</span>,</span><br><span class=\"line\">        r=<span class=\"number\">50</span>,</span><br><span class=\"line\">        b=<span class=\"number\">50</span>,</span><br><span class=\"line\">        t=<span class=\"number\">70</span>,</span><br><span class=\"line\">        pad=<span class=\"number\">0</span>,</span><br><span class=\"line\">    ),</span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/0401/6.PNG\"><br><br><br><br><br><br></p>\n"},{"title":"Plotly를 이용해 Sunburst 그래프 그리기","date":"2021-11-27T15:00:00.000Z","thumbnail":"/images/plotlysunburst/newplot.png","_content":"  \n### **Ref**\n---\nhttps://plotly.com/python/sunburst-charts/\n\n<br>\n\n### **Sunburst Graph2**\n---\n![](/images/plotlysunburst/newplot.png)\n처음 이 그래프를 보고는 신기해서 꼭 그려봐야지 다짐했다\n근데 사실 정말 단순하다..\n정말 그리기 쉬움 (사실 그리기 어려운 그래프는 없다 ..ㅋㅋ)\n\n![](/images/plotlysunburst/datapre.PNG)\n\ndf21_Ea_degree_yearly의 데이터 셋인데\nsunburst를 그리기 위해서 데이터 전처리를 통해서 다듬은 것!\n\nplotly는 그래프를 그릴수 있는 방법으로 px(express)와 go(graph_objects) 로 두가지가 있는데 \npx는 빠르고 쉽게 그래프를 그리는 방법\ngo는 하나하나 세부 설정으로 그래프를 그릴수 있다.\n\n위의 그래프는 px로 그렸다.\ngo로 그릴수도 있지만 데이터를 하나하나 정리해서 직접 넣어줘야하는 번거로움 때문에\n내가 그린그래프처럼 데이터 값이 많고 복잡해지면 px로 그려야한다.\n\n- path\npath=['year','degree']\n내가 나눠줄 구간설정 할 수 있다\n\n- values\n데이터 값을 넣어줬다 \n순서는 그다지 중요한것 같지 않다 \n값이 맞게 잘 그려졌음!\n\n<br>\n\n```python\n\nfig = px.sunburst(df21_Ea_degree_yearly, path=['year','degree'], values=df21_Ea_degree_yearly['value'].tolist())\nfig.update_layout( margin = dict(t=10, l=10, r=10, b=10),colorway=(\"#F2798F\",\"#88BFBA\",\"#CDD9A3\",'#F28705','#D9946C'))\n\nfig.update_layout(title='<b>         Degree</b>',title_font_size=25,\n                  margin = dict(t=100, l=100, r=50, b=100),\n                  height=700, width=700)\nfig.update_traces(hovertemplate='<b>Name</b>: %{id}<br>'+\n                                '<b>Count</b>: %{value}<br>'+\n                                '<b>Parent</b>: %{parent}') \nfig.add_annotation(dict(font=dict(size=14),\n                                    x=0.8,\n                                    y=-0.2,\n                                    showarrow=False,\n                                    text=\"@green_yhjw\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\nfig.show()\n```\n\n<br>\n<br>\n<br>\n","source":"_posts/plotly_sunburst.md","raw":"---\ntitle: Plotly를 이용해 Sunburst 그래프 그리기\ncategories:\n- 파이썬\n- Python Plotly\ndate: 2021-11-28\ntags: plotly, pie graph, pie, sunburst\nthumbnail: /images/plotlysunburst/newplot.png\n---\n  \n### **Ref**\n---\nhttps://plotly.com/python/sunburst-charts/\n\n<br>\n\n### **Sunburst Graph2**\n---\n![](/images/plotlysunburst/newplot.png)\n처음 이 그래프를 보고는 신기해서 꼭 그려봐야지 다짐했다\n근데 사실 정말 단순하다..\n정말 그리기 쉬움 (사실 그리기 어려운 그래프는 없다 ..ㅋㅋ)\n\n![](/images/plotlysunburst/datapre.PNG)\n\ndf21_Ea_degree_yearly의 데이터 셋인데\nsunburst를 그리기 위해서 데이터 전처리를 통해서 다듬은 것!\n\nplotly는 그래프를 그릴수 있는 방법으로 px(express)와 go(graph_objects) 로 두가지가 있는데 \npx는 빠르고 쉽게 그래프를 그리는 방법\ngo는 하나하나 세부 설정으로 그래프를 그릴수 있다.\n\n위의 그래프는 px로 그렸다.\ngo로 그릴수도 있지만 데이터를 하나하나 정리해서 직접 넣어줘야하는 번거로움 때문에\n내가 그린그래프처럼 데이터 값이 많고 복잡해지면 px로 그려야한다.\n\n- path\npath=['year','degree']\n내가 나눠줄 구간설정 할 수 있다\n\n- values\n데이터 값을 넣어줬다 \n순서는 그다지 중요한것 같지 않다 \n값이 맞게 잘 그려졌음!\n\n<br>\n\n```python\n\nfig = px.sunburst(df21_Ea_degree_yearly, path=['year','degree'], values=df21_Ea_degree_yearly['value'].tolist())\nfig.update_layout( margin = dict(t=10, l=10, r=10, b=10),colorway=(\"#F2798F\",\"#88BFBA\",\"#CDD9A3\",'#F28705','#D9946C'))\n\nfig.update_layout(title='<b>         Degree</b>',title_font_size=25,\n                  margin = dict(t=100, l=100, r=50, b=100),\n                  height=700, width=700)\nfig.update_traces(hovertemplate='<b>Name</b>: %{id}<br>'+\n                                '<b>Count</b>: %{value}<br>'+\n                                '<b>Parent</b>: %{parent}') \nfig.add_annotation(dict(font=dict(size=14),\n                                    x=0.8,\n                                    y=-0.2,\n                                    showarrow=False,\n                                    text=\"@green_yhjw\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\nfig.show()\n```\n\n<br>\n<br>\n<br>\n","slug":"plotly-sunburst","published":1,"updated":"2022-01-03T12:20:08.050Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cky2hohew00295nrjc4wy02v3","content":"<h3 id=\"Ref\"><a href=\"#Ref\" class=\"headerlink\" title=\"Ref\"></a><strong>Ref</strong></h3><hr>\n<p><a href=\"https://plotly.com/python/sunburst-charts/\">https://plotly.com/python/sunburst-charts/</a></p>\n<br>\n\n<h3 id=\"Sunburst-Graph2\"><a href=\"#Sunburst-Graph2\" class=\"headerlink\" title=\"Sunburst Graph2\"></a><strong>Sunburst Graph2</strong></h3><hr>\n<p><img src=\"/images/plotlysunburst/newplot.png\"><br>처음 이 그래프를 보고는 신기해서 꼭 그려봐야지 다짐했다<br>근데 사실 정말 단순하다..<br>정말 그리기 쉬움 (사실 그리기 어려운 그래프는 없다 ..ㅋㅋ)</p>\n<p><img src=\"/images/plotlysunburst/datapre.PNG\"></p>\n<p>df21_Ea_degree_yearly의 데이터 셋인데<br>sunburst를 그리기 위해서 데이터 전처리를 통해서 다듬은 것!</p>\n<p>plotly는 그래프를 그릴수 있는 방법으로 px(express)와 go(graph_objects) 로 두가지가 있는데<br>px는 빠르고 쉽게 그래프를 그리는 방법<br>go는 하나하나 세부 설정으로 그래프를 그릴수 있다.</p>\n<p>위의 그래프는 px로 그렸다.<br>go로 그릴수도 있지만 데이터를 하나하나 정리해서 직접 넣어줘야하는 번거로움 때문에<br>내가 그린그래프처럼 데이터 값이 많고 복잡해지면 px로 그려야한다.</p>\n<ul>\n<li><p>path<br>path=[‘year’,’degree’]<br>내가 나눠줄 구간설정 할 수 있다</p>\n</li>\n<li><p>values<br>데이터 값을 넣어줬다<br>순서는 그다지 중요한것 같지 않다<br>값이 맞게 잘 그려졌음!</p>\n</li>\n</ul>\n<br>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">fig = px.sunburst(df21_Ea_degree_yearly, path=[<span class=\"string\">&#x27;year&#x27;</span>,<span class=\"string\">&#x27;degree&#x27;</span>], values=df21_Ea_degree_yearly[<span class=\"string\">&#x27;value&#x27;</span>].tolist())</span><br><span class=\"line\">fig.update_layout( margin = <span class=\"built_in\">dict</span>(t=<span class=\"number\">10</span>, l=<span class=\"number\">10</span>, r=<span class=\"number\">10</span>, b=<span class=\"number\">10</span>),colorway=(<span class=\"string\">&quot;#F2798F&quot;</span>,<span class=\"string\">&quot;#88BFBA&quot;</span>,<span class=\"string\">&quot;#CDD9A3&quot;</span>,<span class=\"string\">&#x27;#F28705&#x27;</span>,<span class=\"string\">&#x27;#D9946C&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(title=<span class=\"string\">&#x27;&lt;b&gt;         Degree&lt;/b&gt;&#x27;</span>,title_font_size=<span class=\"number\">25</span>,</span><br><span class=\"line\">                  margin = <span class=\"built_in\">dict</span>(t=<span class=\"number\">100</span>, l=<span class=\"number\">100</span>, r=<span class=\"number\">50</span>, b=<span class=\"number\">100</span>),</span><br><span class=\"line\">                  height=<span class=\"number\">700</span>, width=<span class=\"number\">700</span>)</span><br><span class=\"line\">fig.update_traces(hovertemplate=<span class=\"string\">&#x27;&lt;b&gt;Name&lt;/b&gt;: %&#123;id&#125;&lt;br&gt;&#x27;</span>+</span><br><span class=\"line\">                                <span class=\"string\">&#x27;&lt;b&gt;Count&lt;/b&gt;: %&#123;value&#125;&lt;br&gt;&#x27;</span>+</span><br><span class=\"line\">                                <span class=\"string\">&#x27;&lt;b&gt;Parent&lt;/b&gt;: %&#123;parent&#125;&#x27;</span>) </span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">14</span>),</span><br><span class=\"line\">                                    x=<span class=\"number\">0.8</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.2</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;@green_yhjw&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n\n<br>\n<br>\n<br>\n","site":{"data":{}},"excerpt":"Ref\n\n\n\nhttps://plotly.com/python/sunburst-charts/\n\n\nSunburst Graph2\n\n\n\n\n처음 이 그래프를 보고는 신기해서 꼭 그려봐야지 다짐했다\n근데 사실 정말 단순하다..\n정말 그리기 쉬움 (사실 그리기 어려운 그래프는 없다 ..ㅋㅋ)\n\n\n\ndf21_Ea_degree_yearly의 데이터 셋인데\nsunburst를 그리기 위해서 데이터 전처리를 통해서 다듬은 것!\n\nplotly는 그래프를 그릴수 있는 방법으로 px(express)와 go(graph_objects) 로 두가지가 있는데\npx는 ","more":"<h3 id=\"Ref\"><a href=\"#Ref\" class=\"headerlink\" title=\"Ref\"></a><strong>Ref</strong></h3><hr>\n<p><a href=\"https://plotly.com/python/sunburst-charts/\">https://plotly.com/python/sunburst-charts/</a></p>\n<br>\n\n<h3 id=\"Sunburst-Graph2\"><a href=\"#Sunburst-Graph2\" class=\"headerlink\" title=\"Sunburst Graph2\"></a><strong>Sunburst Graph2</strong></h3><hr>\n<p><img src=\"/images/plotlysunburst/newplot.png\"><br>처음 이 그래프를 보고는 신기해서 꼭 그려봐야지 다짐했다<br>근데 사실 정말 단순하다..<br>정말 그리기 쉬움 (사실 그리기 어려운 그래프는 없다 ..ㅋㅋ)</p>\n<p><img src=\"/images/plotlysunburst/datapre.PNG\"></p>\n<p>df21_Ea_degree_yearly의 데이터 셋인데<br>sunburst를 그리기 위해서 데이터 전처리를 통해서 다듬은 것!</p>\n<p>plotly는 그래프를 그릴수 있는 방법으로 px(express)와 go(graph_objects) 로 두가지가 있는데<br>px는 빠르고 쉽게 그래프를 그리는 방법<br>go는 하나하나 세부 설정으로 그래프를 그릴수 있다.</p>\n<p>위의 그래프는 px로 그렸다.<br>go로 그릴수도 있지만 데이터를 하나하나 정리해서 직접 넣어줘야하는 번거로움 때문에<br>내가 그린그래프처럼 데이터 값이 많고 복잡해지면 px로 그려야한다.</p>\n<ul>\n<li><p>path<br>path=[‘year’,’degree’]<br>내가 나눠줄 구간설정 할 수 있다</p>\n</li>\n<li><p>values<br>데이터 값을 넣어줬다<br>순서는 그다지 중요한것 같지 않다<br>값이 맞게 잘 그려졌음!</p>\n</li>\n</ul>\n<br>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">fig = px.sunburst(df21_Ea_degree_yearly, path=[<span class=\"string\">&#x27;year&#x27;</span>,<span class=\"string\">&#x27;degree&#x27;</span>], values=df21_Ea_degree_yearly[<span class=\"string\">&#x27;value&#x27;</span>].tolist())</span><br><span class=\"line\">fig.update_layout( margin = <span class=\"built_in\">dict</span>(t=<span class=\"number\">10</span>, l=<span class=\"number\">10</span>, r=<span class=\"number\">10</span>, b=<span class=\"number\">10</span>),colorway=(<span class=\"string\">&quot;#F2798F&quot;</span>,<span class=\"string\">&quot;#88BFBA&quot;</span>,<span class=\"string\">&quot;#CDD9A3&quot;</span>,<span class=\"string\">&#x27;#F28705&#x27;</span>,<span class=\"string\">&#x27;#D9946C&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(title=<span class=\"string\">&#x27;&lt;b&gt;         Degree&lt;/b&gt;&#x27;</span>,title_font_size=<span class=\"number\">25</span>,</span><br><span class=\"line\">                  margin = <span class=\"built_in\">dict</span>(t=<span class=\"number\">100</span>, l=<span class=\"number\">100</span>, r=<span class=\"number\">50</span>, b=<span class=\"number\">100</span>),</span><br><span class=\"line\">                  height=<span class=\"number\">700</span>, width=<span class=\"number\">700</span>)</span><br><span class=\"line\">fig.update_traces(hovertemplate=<span class=\"string\">&#x27;&lt;b&gt;Name&lt;/b&gt;: %&#123;id&#125;&lt;br&gt;&#x27;</span>+</span><br><span class=\"line\">                                <span class=\"string\">&#x27;&lt;b&gt;Count&lt;/b&gt;: %&#123;value&#125;&lt;br&gt;&#x27;</span>+</span><br><span class=\"line\">                                <span class=\"string\">&#x27;&lt;b&gt;Parent&lt;/b&gt;: %&#123;parent&#125;&#x27;</span>) </span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">14</span>),</span><br><span class=\"line\">                                    x=<span class=\"number\">0.8</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.2</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;@green_yhjw&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n\n<br>\n<br>\n<br>\n"},{"title":"Plotly를 이용해 Pie 그래프 그리기","date":"2021-11-27T15:00:00.000Z","thumbnail":"/images/plotlypie/newplot.png","_content":"  \n### **Ref**\n---\nhttps://plotly.com/python/subplots/  \nhttps://plotly.com/python/pie-charts/\n\n<br>\n\n### **Pie Graph1**\n---\n\nPie 그래프는 원 그래프로, 데이터 값이 %가 아니여도 자동으로 percent 수치로 그려지게 된다.\n\n![](/images/plotlypie/newplot.png)\n\n5개의 원을 하나의 페이지에 그리기 위해서 subplot을 이용했다\n\n    fig = make_subplots(rows=1, cols=5, specs=[[{'type':'domain'}, {'type':'domain'}, {'type':'domain'}, {'type':'domain'}, {'type':'domain'}]],)\nspecs는 그래프의 종류를 정의해주는것인데, (Bar와 Scatter 그래프는 따로 정의 안해줘도 된다)\n위의 코드는 pie 그래프가 1행 5열로 배치 되어있는것을 의미한다\nPie그래프가 아닌경우에는 'domain' 부분을 바꿔줘야함\n'pie' 라고 정의해도 됨\n<br>\n\nex)\n\n    specs=[[{\"type\": \"domain\"}, {\"type\": \"domain\"}],\n           [{\"type\": \"domain\"}, {\"type\": \"domain\"}]]\n위의 코드는 pie그래프 4개가 2행 2열로 그려질때\n\n<br>\n\n- 이전에 bar 그래프를 그렸던거와 마찬가지로, add_trace() 를 이용해서 그렸다\n- scalegroup='one'는 그래프 크기를 하나로 지정했다\n 각 그래프 별로 위의 코드를 추가해주면 pie의 크기가 달라진다\n 값이 클수록 그래프가 크고, 작을수록 작다.\n\n```python\ncolors = ['#D9946C','#88BFBA', '#CDD9A3']\n\nfig = make_subplots(rows=1, cols=5, specs=[[{'type':'domain'}, {'type':'domain'}, {'type':'domain'}, {'type':'domain'}, {'type':'domain'}]],)\nfig.add_trace(go.Pie(marker=dict(colors=colors), labels=Gender_21['type'], values=Gender_21['Gender'], name=\"2021\", scalegroup='one', text=np.array(Gender_21['Gender'].sum()), title=\"2021\", titleposition='bottom center'),\n              1, 5)\nfig.add_trace(go.Pie(marker=dict(colors=colors), labels=Gender_20['type'], values=Gender_20['Gender'], name=\"2020\", scalegroup='one', text=np.array(Gender_20['Gender'].sum()), title=\"2020\", titleposition='bottom center'),\n              1, 4)\nfig.add_trace(go.Pie(marker=dict(colors=colors), labels=Gender_19['type'], values=Gender_19['Gender'], name=\"2019\", scalegroup='one', text=np.array(Gender_19['Gender'].sum()), title=\"2019\", titleposition='bottom center'),\n              1, 3)\nfig.add_trace(go.Pie(marker=dict(colors=colors), labels=Gender_18['type'], values=Gender_18['Gender'], name=\"2018\", scalegroup='one', text=np.array(Gender_18['Gender'].sum()), title=\"2018\", titleposition='bottom center'),\n              1, 2)\nfig.add_trace(go.Pie(marker=dict(colors=colors), labels=Gender_17['type'], values=Gender_17['Gender'], name=\"2017\", scalegroup='one', text=np.array(Gender_17['Gender'].sum()), title=\"2017\", titleposition='bottom center'),\n              1, 1)\n\nfig.update_traces(hole=.0, hoverinfo=\"label+percent+name\", \n                  textinfo='label+percent+value')\n\nfig.update_layout(title='<b>World Gender</b>',title_font_size=23,\n                  margin = dict(t=300, l=100, r=0, b=200),\n                  height=700, width=1000)\n\nfig.update_layout(legend=dict(\n    orientation=\"v\",\n    yanchor=\"bottom\",\n    y=1.3,\n    xanchor=\"right\",\n    x=1))\nfig.add_annotation(dict(font=dict(size=14),\n                                    x=0.85,\n                                    y=-0.5,\n                                    showarrow=False,\n                                    text=\"@green_yhjw\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\nfig.show()\n\n```\n\n<br>\n\n### **Pie Graph2**\n---\n\n![](/images/plotlypie/newplot1.png)\n\ndict의 의미는 dictionary이다.\n\n```python\n#graph\ncolors = ['#F2798F','#88BFBA', '#CDD9A3', '#F28705', '#D9946C']\nfig = make_subplots(rows=1, cols=2, specs=[[{'type':'pie'}, {'type':'pie'}]], subplot_titles=(\"World\", \"East Asia\"))\nfig.add_trace(go.Pie(marker=dict(colors=colors), labels=degree_wo.index, values=degree_wo['Q4'].to_numpy(), name=\"World\"),\n              1, 1)\nfig.add_trace(go.Pie(marker=dict(colors=colors), labels=degree_ea.index, values=degree_ea['Q4'].to_numpy(), name=\"East Asia\"),\n              1, 2)\n\nfig.update_traces(hole=.0, hoverinfo=\"label+percent+name\")\n\nfig.update_layout(title='<b>World vs East Asia</b>',title_font_size=22,\n                  margin = dict(t=200, l=30, r=0, b=200),\n                  height=700, width=700)\nfig.update_layout(legend=dict(\n    orientation=\"h\",\n    yanchor=\"bottom\",\n    y=1.1,\n    xanchor=\"right\",\n    x=1.0))\nfig.add_annotation(dict(font=dict(size=14),\n                                    x=0.8,\n                                    y=-0.5,\n                                    showarrow=False,\n                                    text=\"@green_yhjw\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\nfig.show()\n```","source":"_posts/plotly_pie.md","raw":"---\ntitle: Plotly를 이용해 Pie 그래프 그리기\ncategories:\n- 파이썬\n- Python Plotly\ndate: 2021-11-28\ntags: plotly, pie graph, pie, subplot\nthumbnail: /images/plotlypie/newplot.png\n---\n  \n### **Ref**\n---\nhttps://plotly.com/python/subplots/  \nhttps://plotly.com/python/pie-charts/\n\n<br>\n\n### **Pie Graph1**\n---\n\nPie 그래프는 원 그래프로, 데이터 값이 %가 아니여도 자동으로 percent 수치로 그려지게 된다.\n\n![](/images/plotlypie/newplot.png)\n\n5개의 원을 하나의 페이지에 그리기 위해서 subplot을 이용했다\n\n    fig = make_subplots(rows=1, cols=5, specs=[[{'type':'domain'}, {'type':'domain'}, {'type':'domain'}, {'type':'domain'}, {'type':'domain'}]],)\nspecs는 그래프의 종류를 정의해주는것인데, (Bar와 Scatter 그래프는 따로 정의 안해줘도 된다)\n위의 코드는 pie 그래프가 1행 5열로 배치 되어있는것을 의미한다\nPie그래프가 아닌경우에는 'domain' 부분을 바꿔줘야함\n'pie' 라고 정의해도 됨\n<br>\n\nex)\n\n    specs=[[{\"type\": \"domain\"}, {\"type\": \"domain\"}],\n           [{\"type\": \"domain\"}, {\"type\": \"domain\"}]]\n위의 코드는 pie그래프 4개가 2행 2열로 그려질때\n\n<br>\n\n- 이전에 bar 그래프를 그렸던거와 마찬가지로, add_trace() 를 이용해서 그렸다\n- scalegroup='one'는 그래프 크기를 하나로 지정했다\n 각 그래프 별로 위의 코드를 추가해주면 pie의 크기가 달라진다\n 값이 클수록 그래프가 크고, 작을수록 작다.\n\n```python\ncolors = ['#D9946C','#88BFBA', '#CDD9A3']\n\nfig = make_subplots(rows=1, cols=5, specs=[[{'type':'domain'}, {'type':'domain'}, {'type':'domain'}, {'type':'domain'}, {'type':'domain'}]],)\nfig.add_trace(go.Pie(marker=dict(colors=colors), labels=Gender_21['type'], values=Gender_21['Gender'], name=\"2021\", scalegroup='one', text=np.array(Gender_21['Gender'].sum()), title=\"2021\", titleposition='bottom center'),\n              1, 5)\nfig.add_trace(go.Pie(marker=dict(colors=colors), labels=Gender_20['type'], values=Gender_20['Gender'], name=\"2020\", scalegroup='one', text=np.array(Gender_20['Gender'].sum()), title=\"2020\", titleposition='bottom center'),\n              1, 4)\nfig.add_trace(go.Pie(marker=dict(colors=colors), labels=Gender_19['type'], values=Gender_19['Gender'], name=\"2019\", scalegroup='one', text=np.array(Gender_19['Gender'].sum()), title=\"2019\", titleposition='bottom center'),\n              1, 3)\nfig.add_trace(go.Pie(marker=dict(colors=colors), labels=Gender_18['type'], values=Gender_18['Gender'], name=\"2018\", scalegroup='one', text=np.array(Gender_18['Gender'].sum()), title=\"2018\", titleposition='bottom center'),\n              1, 2)\nfig.add_trace(go.Pie(marker=dict(colors=colors), labels=Gender_17['type'], values=Gender_17['Gender'], name=\"2017\", scalegroup='one', text=np.array(Gender_17['Gender'].sum()), title=\"2017\", titleposition='bottom center'),\n              1, 1)\n\nfig.update_traces(hole=.0, hoverinfo=\"label+percent+name\", \n                  textinfo='label+percent+value')\n\nfig.update_layout(title='<b>World Gender</b>',title_font_size=23,\n                  margin = dict(t=300, l=100, r=0, b=200),\n                  height=700, width=1000)\n\nfig.update_layout(legend=dict(\n    orientation=\"v\",\n    yanchor=\"bottom\",\n    y=1.3,\n    xanchor=\"right\",\n    x=1))\nfig.add_annotation(dict(font=dict(size=14),\n                                    x=0.85,\n                                    y=-0.5,\n                                    showarrow=False,\n                                    text=\"@green_yhjw\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\nfig.show()\n\n```\n\n<br>\n\n### **Pie Graph2**\n---\n\n![](/images/plotlypie/newplot1.png)\n\ndict의 의미는 dictionary이다.\n\n```python\n#graph\ncolors = ['#F2798F','#88BFBA', '#CDD9A3', '#F28705', '#D9946C']\nfig = make_subplots(rows=1, cols=2, specs=[[{'type':'pie'}, {'type':'pie'}]], subplot_titles=(\"World\", \"East Asia\"))\nfig.add_trace(go.Pie(marker=dict(colors=colors), labels=degree_wo.index, values=degree_wo['Q4'].to_numpy(), name=\"World\"),\n              1, 1)\nfig.add_trace(go.Pie(marker=dict(colors=colors), labels=degree_ea.index, values=degree_ea['Q4'].to_numpy(), name=\"East Asia\"),\n              1, 2)\n\nfig.update_traces(hole=.0, hoverinfo=\"label+percent+name\")\n\nfig.update_layout(title='<b>World vs East Asia</b>',title_font_size=22,\n                  margin = dict(t=200, l=30, r=0, b=200),\n                  height=700, width=700)\nfig.update_layout(legend=dict(\n    orientation=\"h\",\n    yanchor=\"bottom\",\n    y=1.1,\n    xanchor=\"right\",\n    x=1.0))\nfig.add_annotation(dict(font=dict(size=14),\n                                    x=0.8,\n                                    y=-0.5,\n                                    showarrow=False,\n                                    text=\"@green_yhjw\",\n                                    xanchor='left',\n                                    xref=\"paper\",\n                                    yref=\"paper\"))\nfig.show()\n```","slug":"plotly-pie","published":1,"updated":"2022-01-03T12:20:08.050Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cky2hohew002c5nrjfakdb40d","content":"<h3 id=\"Ref\"><a href=\"#Ref\" class=\"headerlink\" title=\"Ref\"></a><strong>Ref</strong></h3><hr>\n<p><a href=\"https://plotly.com/python/subplots/\">https://plotly.com/python/subplots/</a><br><a href=\"https://plotly.com/python/pie-charts/\">https://plotly.com/python/pie-charts/</a></p>\n<br>\n\n<h3 id=\"Pie-Graph1\"><a href=\"#Pie-Graph1\" class=\"headerlink\" title=\"Pie Graph1\"></a><strong>Pie Graph1</strong></h3><hr>\n<p>Pie 그래프는 원 그래프로, 데이터 값이 %가 아니여도 자동으로 percent 수치로 그려지게 된다.</p>\n<p><img src=\"/images/plotlypie/newplot.png\"></p>\n<p>5개의 원을 하나의 페이지에 그리기 위해서 subplot을 이용했다</p>\n<pre><code>fig = make_subplots(rows=1, cols=5, specs=[[&#123;&#39;type&#39;:&#39;domain&#39;&#125;, &#123;&#39;type&#39;:&#39;domain&#39;&#125;, &#123;&#39;type&#39;:&#39;domain&#39;&#125;, &#123;&#39;type&#39;:&#39;domain&#39;&#125;, &#123;&#39;type&#39;:&#39;domain&#39;&#125;]],)\n</code></pre>\n<p>specs는 그래프의 종류를 정의해주는것인데, (Bar와 Scatter 그래프는 따로 정의 안해줘도 된다)<br>위의 코드는 pie 그래프가 1행 5열로 배치 되어있는것을 의미한다<br>Pie그래프가 아닌경우에는 ‘domain’ 부분을 바꿔줘야함<br>‘pie’ 라고 정의해도 됨<br><br></p>\n<p>ex)</p>\n<pre><code>specs=[[&#123;&quot;type&quot;: &quot;domain&quot;&#125;, &#123;&quot;type&quot;: &quot;domain&quot;&#125;],\n       [&#123;&quot;type&quot;: &quot;domain&quot;&#125;, &#123;&quot;type&quot;: &quot;domain&quot;&#125;]]\n</code></pre>\n<p>위의 코드는 pie그래프 4개가 2행 2열로 그려질때</p>\n<br>\n\n<ul>\n<li>이전에 bar 그래프를 그렸던거와 마찬가지로, add_trace() 를 이용해서 그렸다</li>\n<li>scalegroup=’one’는 그래프 크기를 하나로 지정했다<br>각 그래프 별로 위의 코드를 추가해주면 pie의 크기가 달라진다<br>값이 클수록 그래프가 크고, 작을수록 작다.</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">colors = [<span class=\"string\">&#x27;#D9946C&#x27;</span>,<span class=\"string\">&#x27;#88BFBA&#x27;</span>, <span class=\"string\">&#x27;#CDD9A3&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">fig = make_subplots(rows=<span class=\"number\">1</span>, cols=<span class=\"number\">5</span>, specs=[[&#123;<span class=\"string\">&#x27;type&#x27;</span>:<span class=\"string\">&#x27;domain&#x27;</span>&#125;, &#123;<span class=\"string\">&#x27;type&#x27;</span>:<span class=\"string\">&#x27;domain&#x27;</span>&#125;, &#123;<span class=\"string\">&#x27;type&#x27;</span>:<span class=\"string\">&#x27;domain&#x27;</span>&#125;, &#123;<span class=\"string\">&#x27;type&#x27;</span>:<span class=\"string\">&#x27;domain&#x27;</span>&#125;, &#123;<span class=\"string\">&#x27;type&#x27;</span>:<span class=\"string\">&#x27;domain&#x27;</span>&#125;]],)</span><br><span class=\"line\">fig.add_trace(go.Pie(marker=<span class=\"built_in\">dict</span>(colors=colors), labels=Gender_21[<span class=\"string\">&#x27;type&#x27;</span>], values=Gender_21[<span class=\"string\">&#x27;Gender&#x27;</span>], name=<span class=\"string\">&quot;2021&quot;</span>, scalegroup=<span class=\"string\">&#x27;one&#x27;</span>, text=np.array(Gender_21[<span class=\"string\">&#x27;Gender&#x27;</span>].<span class=\"built_in\">sum</span>()), title=<span class=\"string\">&quot;2021&quot;</span>, titleposition=<span class=\"string\">&#x27;bottom center&#x27;</span>),</span><br><span class=\"line\">              <span class=\"number\">1</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">fig.add_trace(go.Pie(marker=<span class=\"built_in\">dict</span>(colors=colors), labels=Gender_20[<span class=\"string\">&#x27;type&#x27;</span>], values=Gender_20[<span class=\"string\">&#x27;Gender&#x27;</span>], name=<span class=\"string\">&quot;2020&quot;</span>, scalegroup=<span class=\"string\">&#x27;one&#x27;</span>, text=np.array(Gender_20[<span class=\"string\">&#x27;Gender&#x27;</span>].<span class=\"built_in\">sum</span>()), title=<span class=\"string\">&quot;2020&quot;</span>, titleposition=<span class=\"string\">&#x27;bottom center&#x27;</span>),</span><br><span class=\"line\">              <span class=\"number\">1</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\">fig.add_trace(go.Pie(marker=<span class=\"built_in\">dict</span>(colors=colors), labels=Gender_19[<span class=\"string\">&#x27;type&#x27;</span>], values=Gender_19[<span class=\"string\">&#x27;Gender&#x27;</span>], name=<span class=\"string\">&quot;2019&quot;</span>, scalegroup=<span class=\"string\">&#x27;one&#x27;</span>, text=np.array(Gender_19[<span class=\"string\">&#x27;Gender&#x27;</span>].<span class=\"built_in\">sum</span>()), title=<span class=\"string\">&quot;2019&quot;</span>, titleposition=<span class=\"string\">&#x27;bottom center&#x27;</span>),</span><br><span class=\"line\">              <span class=\"number\">1</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">fig.add_trace(go.Pie(marker=<span class=\"built_in\">dict</span>(colors=colors), labels=Gender_18[<span class=\"string\">&#x27;type&#x27;</span>], values=Gender_18[<span class=\"string\">&#x27;Gender&#x27;</span>], name=<span class=\"string\">&quot;2018&quot;</span>, scalegroup=<span class=\"string\">&#x27;one&#x27;</span>, text=np.array(Gender_18[<span class=\"string\">&#x27;Gender&#x27;</span>].<span class=\"built_in\">sum</span>()), title=<span class=\"string\">&quot;2018&quot;</span>, titleposition=<span class=\"string\">&#x27;bottom center&#x27;</span>),</span><br><span class=\"line\">              <span class=\"number\">1</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\">fig.add_trace(go.Pie(marker=<span class=\"built_in\">dict</span>(colors=colors), labels=Gender_17[<span class=\"string\">&#x27;type&#x27;</span>], values=Gender_17[<span class=\"string\">&#x27;Gender&#x27;</span>], name=<span class=\"string\">&quot;2017&quot;</span>, scalegroup=<span class=\"string\">&#x27;one&#x27;</span>, text=np.array(Gender_17[<span class=\"string\">&#x27;Gender&#x27;</span>].<span class=\"built_in\">sum</span>()), title=<span class=\"string\">&quot;2017&quot;</span>, titleposition=<span class=\"string\">&#x27;bottom center&#x27;</span>),</span><br><span class=\"line\">              <span class=\"number\">1</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_traces(hole=<span class=\"number\">.0</span>, hoverinfo=<span class=\"string\">&quot;label+percent+name&quot;</span>, </span><br><span class=\"line\">                  textinfo=<span class=\"string\">&#x27;label+percent+value&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(title=<span class=\"string\">&#x27;&lt;b&gt;World Gender&lt;/b&gt;&#x27;</span>,title_font_size=<span class=\"number\">23</span>,</span><br><span class=\"line\">                  margin = <span class=\"built_in\">dict</span>(t=<span class=\"number\">300</span>, l=<span class=\"number\">100</span>, r=<span class=\"number\">0</span>, b=<span class=\"number\">200</span>),</span><br><span class=\"line\">                  height=<span class=\"number\">700</span>, width=<span class=\"number\">1000</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(legend=<span class=\"built_in\">dict</span>(</span><br><span class=\"line\">    orientation=<span class=\"string\">&quot;v&quot;</span>,</span><br><span class=\"line\">    yanchor=<span class=\"string\">&quot;bottom&quot;</span>,</span><br><span class=\"line\">    y=<span class=\"number\">1.3</span>,</span><br><span class=\"line\">    xanchor=<span class=\"string\">&quot;right&quot;</span>,</span><br><span class=\"line\">    x=<span class=\"number\">1</span>))</span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">14</span>),</span><br><span class=\"line\">                                    x=<span class=\"number\">0.85</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.5</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;@green_yhjw&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\">fig.show()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h3 id=\"Pie-Graph2\"><a href=\"#Pie-Graph2\" class=\"headerlink\" title=\"Pie Graph2\"></a><strong>Pie Graph2</strong></h3><hr>\n<p><img src=\"/images/plotlypie/newplot1.png\"></p>\n<p>dict의 의미는 dictionary이다.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#graph</span></span><br><span class=\"line\">colors = [<span class=\"string\">&#x27;#F2798F&#x27;</span>,<span class=\"string\">&#x27;#88BFBA&#x27;</span>, <span class=\"string\">&#x27;#CDD9A3&#x27;</span>, <span class=\"string\">&#x27;#F28705&#x27;</span>, <span class=\"string\">&#x27;#D9946C&#x27;</span>]</span><br><span class=\"line\">fig = make_subplots(rows=<span class=\"number\">1</span>, cols=<span class=\"number\">2</span>, specs=[[&#123;<span class=\"string\">&#x27;type&#x27;</span>:<span class=\"string\">&#x27;pie&#x27;</span>&#125;, &#123;<span class=\"string\">&#x27;type&#x27;</span>:<span class=\"string\">&#x27;pie&#x27;</span>&#125;]], subplot_titles=(<span class=\"string\">&quot;World&quot;</span>, <span class=\"string\">&quot;East Asia&quot;</span>))</span><br><span class=\"line\">fig.add_trace(go.Pie(marker=<span class=\"built_in\">dict</span>(colors=colors), labels=degree_wo.index, values=degree_wo[<span class=\"string\">&#x27;Q4&#x27;</span>].to_numpy(), name=<span class=\"string\">&quot;World&quot;</span>),</span><br><span class=\"line\">              <span class=\"number\">1</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">fig.add_trace(go.Pie(marker=<span class=\"built_in\">dict</span>(colors=colors), labels=degree_ea.index, values=degree_ea[<span class=\"string\">&#x27;Q4&#x27;</span>].to_numpy(), name=<span class=\"string\">&quot;East Asia&quot;</span>),</span><br><span class=\"line\">              <span class=\"number\">1</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_traces(hole=<span class=\"number\">.0</span>, hoverinfo=<span class=\"string\">&quot;label+percent+name&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(title=<span class=\"string\">&#x27;&lt;b&gt;World vs East Asia&lt;/b&gt;&#x27;</span>,title_font_size=<span class=\"number\">22</span>,</span><br><span class=\"line\">                  margin = <span class=\"built_in\">dict</span>(t=<span class=\"number\">200</span>, l=<span class=\"number\">30</span>, r=<span class=\"number\">0</span>, b=<span class=\"number\">200</span>),</span><br><span class=\"line\">                  height=<span class=\"number\">700</span>, width=<span class=\"number\">700</span>)</span><br><span class=\"line\">fig.update_layout(legend=<span class=\"built_in\">dict</span>(</span><br><span class=\"line\">    orientation=<span class=\"string\">&quot;h&quot;</span>,</span><br><span class=\"line\">    yanchor=<span class=\"string\">&quot;bottom&quot;</span>,</span><br><span class=\"line\">    y=<span class=\"number\">1.1</span>,</span><br><span class=\"line\">    xanchor=<span class=\"string\">&quot;right&quot;</span>,</span><br><span class=\"line\">    x=<span class=\"number\">1.0</span>))</span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">14</span>),</span><br><span class=\"line\">                                    x=<span class=\"number\">0.8</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.5</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;@green_yhjw&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"Ref\n\n\n\nhttps://plotly.com/python/subplots/\nhttps://plotly.com/python/pie-charts/\n\n\nPie Graph1\n\n\n\nPie 그래프는 원 그래프로, 데이터 값이 %가 아니여도 자동으로 percent 수치로 그려지게 된다.\n\n\n\n5개의 원을 하나의 페이지에 그리기 위해서 subplot을 이용했다\n\nfig = make_subplots(rows=1, cols=5, specs=[[{'type':'domain'}, {'type':'domain'}, {'type':'domain'}, {'","more":"<h3 id=\"Ref\"><a href=\"#Ref\" class=\"headerlink\" title=\"Ref\"></a><strong>Ref</strong></h3><hr>\n<p><a href=\"https://plotly.com/python/subplots/\">https://plotly.com/python/subplots/</a><br><a href=\"https://plotly.com/python/pie-charts/\">https://plotly.com/python/pie-charts/</a></p>\n<br>\n\n<h3 id=\"Pie-Graph1\"><a href=\"#Pie-Graph1\" class=\"headerlink\" title=\"Pie Graph1\"></a><strong>Pie Graph1</strong></h3><hr>\n<p>Pie 그래프는 원 그래프로, 데이터 값이 %가 아니여도 자동으로 percent 수치로 그려지게 된다.</p>\n<p><img src=\"/images/plotlypie/newplot.png\"></p>\n<p>5개의 원을 하나의 페이지에 그리기 위해서 subplot을 이용했다</p>\n<pre><code>fig = make_subplots(rows=1, cols=5, specs=[[&#123;&#39;type&#39;:&#39;domain&#39;&#125;, &#123;&#39;type&#39;:&#39;domain&#39;&#125;, &#123;&#39;type&#39;:&#39;domain&#39;&#125;, &#123;&#39;type&#39;:&#39;domain&#39;&#125;, &#123;&#39;type&#39;:&#39;domain&#39;&#125;]],)\n</code></pre>\n<p>specs는 그래프의 종류를 정의해주는것인데, (Bar와 Scatter 그래프는 따로 정의 안해줘도 된다)<br>위의 코드는 pie 그래프가 1행 5열로 배치 되어있는것을 의미한다<br>Pie그래프가 아닌경우에는 ‘domain’ 부분을 바꿔줘야함<br>‘pie’ 라고 정의해도 됨<br><br></p>\n<p>ex)</p>\n<pre><code>specs=[[&#123;&quot;type&quot;: &quot;domain&quot;&#125;, &#123;&quot;type&quot;: &quot;domain&quot;&#125;],\n       [&#123;&quot;type&quot;: &quot;domain&quot;&#125;, &#123;&quot;type&quot;: &quot;domain&quot;&#125;]]\n</code></pre>\n<p>위의 코드는 pie그래프 4개가 2행 2열로 그려질때</p>\n<br>\n\n<ul>\n<li>이전에 bar 그래프를 그렸던거와 마찬가지로, add_trace() 를 이용해서 그렸다</li>\n<li>scalegroup=’one’는 그래프 크기를 하나로 지정했다<br>각 그래프 별로 위의 코드를 추가해주면 pie의 크기가 달라진다<br>값이 클수록 그래프가 크고, 작을수록 작다.</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">colors = [<span class=\"string\">&#x27;#D9946C&#x27;</span>,<span class=\"string\">&#x27;#88BFBA&#x27;</span>, <span class=\"string\">&#x27;#CDD9A3&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">fig = make_subplots(rows=<span class=\"number\">1</span>, cols=<span class=\"number\">5</span>, specs=[[&#123;<span class=\"string\">&#x27;type&#x27;</span>:<span class=\"string\">&#x27;domain&#x27;</span>&#125;, &#123;<span class=\"string\">&#x27;type&#x27;</span>:<span class=\"string\">&#x27;domain&#x27;</span>&#125;, &#123;<span class=\"string\">&#x27;type&#x27;</span>:<span class=\"string\">&#x27;domain&#x27;</span>&#125;, &#123;<span class=\"string\">&#x27;type&#x27;</span>:<span class=\"string\">&#x27;domain&#x27;</span>&#125;, &#123;<span class=\"string\">&#x27;type&#x27;</span>:<span class=\"string\">&#x27;domain&#x27;</span>&#125;]],)</span><br><span class=\"line\">fig.add_trace(go.Pie(marker=<span class=\"built_in\">dict</span>(colors=colors), labels=Gender_21[<span class=\"string\">&#x27;type&#x27;</span>], values=Gender_21[<span class=\"string\">&#x27;Gender&#x27;</span>], name=<span class=\"string\">&quot;2021&quot;</span>, scalegroup=<span class=\"string\">&#x27;one&#x27;</span>, text=np.array(Gender_21[<span class=\"string\">&#x27;Gender&#x27;</span>].<span class=\"built_in\">sum</span>()), title=<span class=\"string\">&quot;2021&quot;</span>, titleposition=<span class=\"string\">&#x27;bottom center&#x27;</span>),</span><br><span class=\"line\">              <span class=\"number\">1</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">fig.add_trace(go.Pie(marker=<span class=\"built_in\">dict</span>(colors=colors), labels=Gender_20[<span class=\"string\">&#x27;type&#x27;</span>], values=Gender_20[<span class=\"string\">&#x27;Gender&#x27;</span>], name=<span class=\"string\">&quot;2020&quot;</span>, scalegroup=<span class=\"string\">&#x27;one&#x27;</span>, text=np.array(Gender_20[<span class=\"string\">&#x27;Gender&#x27;</span>].<span class=\"built_in\">sum</span>()), title=<span class=\"string\">&quot;2020&quot;</span>, titleposition=<span class=\"string\">&#x27;bottom center&#x27;</span>),</span><br><span class=\"line\">              <span class=\"number\">1</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\">fig.add_trace(go.Pie(marker=<span class=\"built_in\">dict</span>(colors=colors), labels=Gender_19[<span class=\"string\">&#x27;type&#x27;</span>], values=Gender_19[<span class=\"string\">&#x27;Gender&#x27;</span>], name=<span class=\"string\">&quot;2019&quot;</span>, scalegroup=<span class=\"string\">&#x27;one&#x27;</span>, text=np.array(Gender_19[<span class=\"string\">&#x27;Gender&#x27;</span>].<span class=\"built_in\">sum</span>()), title=<span class=\"string\">&quot;2019&quot;</span>, titleposition=<span class=\"string\">&#x27;bottom center&#x27;</span>),</span><br><span class=\"line\">              <span class=\"number\">1</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">fig.add_trace(go.Pie(marker=<span class=\"built_in\">dict</span>(colors=colors), labels=Gender_18[<span class=\"string\">&#x27;type&#x27;</span>], values=Gender_18[<span class=\"string\">&#x27;Gender&#x27;</span>], name=<span class=\"string\">&quot;2018&quot;</span>, scalegroup=<span class=\"string\">&#x27;one&#x27;</span>, text=np.array(Gender_18[<span class=\"string\">&#x27;Gender&#x27;</span>].<span class=\"built_in\">sum</span>()), title=<span class=\"string\">&quot;2018&quot;</span>, titleposition=<span class=\"string\">&#x27;bottom center&#x27;</span>),</span><br><span class=\"line\">              <span class=\"number\">1</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\">fig.add_trace(go.Pie(marker=<span class=\"built_in\">dict</span>(colors=colors), labels=Gender_17[<span class=\"string\">&#x27;type&#x27;</span>], values=Gender_17[<span class=\"string\">&#x27;Gender&#x27;</span>], name=<span class=\"string\">&quot;2017&quot;</span>, scalegroup=<span class=\"string\">&#x27;one&#x27;</span>, text=np.array(Gender_17[<span class=\"string\">&#x27;Gender&#x27;</span>].<span class=\"built_in\">sum</span>()), title=<span class=\"string\">&quot;2017&quot;</span>, titleposition=<span class=\"string\">&#x27;bottom center&#x27;</span>),</span><br><span class=\"line\">              <span class=\"number\">1</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_traces(hole=<span class=\"number\">.0</span>, hoverinfo=<span class=\"string\">&quot;label+percent+name&quot;</span>, </span><br><span class=\"line\">                  textinfo=<span class=\"string\">&#x27;label+percent+value&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(title=<span class=\"string\">&#x27;&lt;b&gt;World Gender&lt;/b&gt;&#x27;</span>,title_font_size=<span class=\"number\">23</span>,</span><br><span class=\"line\">                  margin = <span class=\"built_in\">dict</span>(t=<span class=\"number\">300</span>, l=<span class=\"number\">100</span>, r=<span class=\"number\">0</span>, b=<span class=\"number\">200</span>),</span><br><span class=\"line\">                  height=<span class=\"number\">700</span>, width=<span class=\"number\">1000</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(legend=<span class=\"built_in\">dict</span>(</span><br><span class=\"line\">    orientation=<span class=\"string\">&quot;v&quot;</span>,</span><br><span class=\"line\">    yanchor=<span class=\"string\">&quot;bottom&quot;</span>,</span><br><span class=\"line\">    y=<span class=\"number\">1.3</span>,</span><br><span class=\"line\">    xanchor=<span class=\"string\">&quot;right&quot;</span>,</span><br><span class=\"line\">    x=<span class=\"number\">1</span>))</span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">14</span>),</span><br><span class=\"line\">                                    x=<span class=\"number\">0.85</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.5</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;@green_yhjw&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\">fig.show()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h3 id=\"Pie-Graph2\"><a href=\"#Pie-Graph2\" class=\"headerlink\" title=\"Pie Graph2\"></a><strong>Pie Graph2</strong></h3><hr>\n<p><img src=\"/images/plotlypie/newplot1.png\"></p>\n<p>dict의 의미는 dictionary이다.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#graph</span></span><br><span class=\"line\">colors = [<span class=\"string\">&#x27;#F2798F&#x27;</span>,<span class=\"string\">&#x27;#88BFBA&#x27;</span>, <span class=\"string\">&#x27;#CDD9A3&#x27;</span>, <span class=\"string\">&#x27;#F28705&#x27;</span>, <span class=\"string\">&#x27;#D9946C&#x27;</span>]</span><br><span class=\"line\">fig = make_subplots(rows=<span class=\"number\">1</span>, cols=<span class=\"number\">2</span>, specs=[[&#123;<span class=\"string\">&#x27;type&#x27;</span>:<span class=\"string\">&#x27;pie&#x27;</span>&#125;, &#123;<span class=\"string\">&#x27;type&#x27;</span>:<span class=\"string\">&#x27;pie&#x27;</span>&#125;]], subplot_titles=(<span class=\"string\">&quot;World&quot;</span>, <span class=\"string\">&quot;East Asia&quot;</span>))</span><br><span class=\"line\">fig.add_trace(go.Pie(marker=<span class=\"built_in\">dict</span>(colors=colors), labels=degree_wo.index, values=degree_wo[<span class=\"string\">&#x27;Q4&#x27;</span>].to_numpy(), name=<span class=\"string\">&quot;World&quot;</span>),</span><br><span class=\"line\">              <span class=\"number\">1</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">fig.add_trace(go.Pie(marker=<span class=\"built_in\">dict</span>(colors=colors), labels=degree_ea.index, values=degree_ea[<span class=\"string\">&#x27;Q4&#x27;</span>].to_numpy(), name=<span class=\"string\">&quot;East Asia&quot;</span>),</span><br><span class=\"line\">              <span class=\"number\">1</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_traces(hole=<span class=\"number\">.0</span>, hoverinfo=<span class=\"string\">&quot;label+percent+name&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(title=<span class=\"string\">&#x27;&lt;b&gt;World vs East Asia&lt;/b&gt;&#x27;</span>,title_font_size=<span class=\"number\">22</span>,</span><br><span class=\"line\">                  margin = <span class=\"built_in\">dict</span>(t=<span class=\"number\">200</span>, l=<span class=\"number\">30</span>, r=<span class=\"number\">0</span>, b=<span class=\"number\">200</span>),</span><br><span class=\"line\">                  height=<span class=\"number\">700</span>, width=<span class=\"number\">700</span>)</span><br><span class=\"line\">fig.update_layout(legend=<span class=\"built_in\">dict</span>(</span><br><span class=\"line\">    orientation=<span class=\"string\">&quot;h&quot;</span>,</span><br><span class=\"line\">    yanchor=<span class=\"string\">&quot;bottom&quot;</span>,</span><br><span class=\"line\">    y=<span class=\"number\">1.1</span>,</span><br><span class=\"line\">    xanchor=<span class=\"string\">&quot;right&quot;</span>,</span><br><span class=\"line\">    x=<span class=\"number\">1.0</span>))</span><br><span class=\"line\">fig.add_annotation(<span class=\"built_in\">dict</span>(font=<span class=\"built_in\">dict</span>(size=<span class=\"number\">14</span>),</span><br><span class=\"line\">                                    x=<span class=\"number\">0.8</span>,</span><br><span class=\"line\">                                    y=-<span class=\"number\">0.5</span>,</span><br><span class=\"line\">                                    showarrow=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                    text=<span class=\"string\">&quot;@green_yhjw&quot;</span>,</span><br><span class=\"line\">                                    xanchor=<span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">                                    xref=<span class=\"string\">&quot;paper&quot;</span>,</span><br><span class=\"line\">                                    yref=<span class=\"string\">&quot;paper&quot;</span>))</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>"},{"date":"2021-12-05T15:00:00.000Z","title":"Pycharm 가상환경 설정 & 라이브러리 설치","toc":true,"widgets":null,"_content":"\n### **Pycharm 가상환경 설정 방법**\nFile -> Setting -> 왼쪽 메뉴에서 폴더 이름 클릭 -> Python Interpreter\n-> Virtualenv Environment -> 우측상단 톱니바퀴 -> ADD\n\n![](/images/python_basic_1/venv.PNG)\n\n<br>\n\n위에 Location 에서 경로 확인해주기!\nApply 클릭하면 venv 폴더가 생성된 것을 확인할 수 있다.\n\n![](/images/python_basic_1/venv1.PNG)\n\n\n<br>\n\n### **가상환경 사용이유**\n가상환경은 여러개의 파이썬 프로젝트가 하나의 컴퓨터에서 충동을 일으키지 않고 존재할 수 있도록 해준다.\n-> 독립적인 작업 환경에서 패키지 및 버전관리를 하기위해 가상환경을 사용한다.\n\n<br>\n\n### **라이브러리 설치 방법**\nFile -> Settings -> + 클릭 -> 원하는 라이브러리 입력해서 설치\n\n<br>\n\n### **설치된 패키지 목록 확인**\n\tpip freeze > requirements.txt\n\n현재 python에 pip로 설치된 패키지 목록에 대한 정보를 만들기 위해 freeze라는 명령어 사용\n(pip란 파이썬으로 작성된 패키지 소프트웨어를 서리 관리하는 패키지 관리 시스템)\n\n\n\n<br>\n\n### **requirements.txt 속 패키지 설치**\n\nrequirements.txt라는 파일이 주어졌을때,\n그 안의 패키지들을 모두 설치 하기 위한 명령어\n\n\tpip install -r requirements.txt\n\n\n\n<br>\n\n\n### **Ref**\n---\n[requirement.txt파일](https://computer-science-student.tistory.com/221)\n\n<br>\n<br>\n<br>\n<br>\n\n","source":"_posts/python00_.md","raw":"---\ndate: 2021-12-06\ntitle: Pycharm 가상환경 설정 & 라이브러리 설치 \ntags: python, requirements.txt\ntoc: true\ncategories:\n - 파이썬\n - Python Setting\nwidgets: null\n---\n\n### **Pycharm 가상환경 설정 방법**\nFile -> Setting -> 왼쪽 메뉴에서 폴더 이름 클릭 -> Python Interpreter\n-> Virtualenv Environment -> 우측상단 톱니바퀴 -> ADD\n\n![](/images/python_basic_1/venv.PNG)\n\n<br>\n\n위에 Location 에서 경로 확인해주기!\nApply 클릭하면 venv 폴더가 생성된 것을 확인할 수 있다.\n\n![](/images/python_basic_1/venv1.PNG)\n\n\n<br>\n\n### **가상환경 사용이유**\n가상환경은 여러개의 파이썬 프로젝트가 하나의 컴퓨터에서 충동을 일으키지 않고 존재할 수 있도록 해준다.\n-> 독립적인 작업 환경에서 패키지 및 버전관리를 하기위해 가상환경을 사용한다.\n\n<br>\n\n### **라이브러리 설치 방법**\nFile -> Settings -> + 클릭 -> 원하는 라이브러리 입력해서 설치\n\n<br>\n\n### **설치된 패키지 목록 확인**\n\tpip freeze > requirements.txt\n\n현재 python에 pip로 설치된 패키지 목록에 대한 정보를 만들기 위해 freeze라는 명령어 사용\n(pip란 파이썬으로 작성된 패키지 소프트웨어를 서리 관리하는 패키지 관리 시스템)\n\n\n\n<br>\n\n### **requirements.txt 속 패키지 설치**\n\nrequirements.txt라는 파일이 주어졌을때,\n그 안의 패키지들을 모두 설치 하기 위한 명령어\n\n\tpip install -r requirements.txt\n\n\n\n<br>\n\n\n### **Ref**\n---\n[requirement.txt파일](https://computer-science-student.tistory.com/221)\n\n<br>\n<br>\n<br>\n<br>\n\n","slug":"python00","published":1,"updated":"2022-01-03T12:20:08.050Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cky2hohew002f5nrj2toc75fp","content":"<h3 id=\"Pycharm-가상환경-설정-방법\"><a href=\"#Pycharm-가상환경-설정-방법\" class=\"headerlink\" title=\"Pycharm 가상환경 설정 방법\"></a><strong>Pycharm 가상환경 설정 방법</strong></h3><p>File -&gt; Setting -&gt; 왼쪽 메뉴에서 폴더 이름 클릭 -&gt; Python Interpreter<br>-&gt; Virtualenv Environment -&gt; 우측상단 톱니바퀴 -&gt; ADD</p>\n<p><img src=\"/images/python_basic_1/venv.PNG\"></p>\n<br>\n\n<p>위에 Location 에서 경로 확인해주기!<br>Apply 클릭하면 venv 폴더가 생성된 것을 확인할 수 있다.</p>\n<p><img src=\"/images/python_basic_1/venv1.PNG\"></p>\n<br>\n\n<h3 id=\"가상환경-사용이유\"><a href=\"#가상환경-사용이유\" class=\"headerlink\" title=\"가상환경 사용이유\"></a><strong>가상환경 사용이유</strong></h3><p>가상환경은 여러개의 파이썬 프로젝트가 하나의 컴퓨터에서 충동을 일으키지 않고 존재할 수 있도록 해준다.<br>-&gt; 독립적인 작업 환경에서 패키지 및 버전관리를 하기위해 가상환경을 사용한다.</p>\n<br>\n\n<h3 id=\"라이브러리-설치-방법\"><a href=\"#라이브러리-설치-방법\" class=\"headerlink\" title=\"라이브러리 설치 방법\"></a><strong>라이브러리 설치 방법</strong></h3><p>File -&gt; Settings -&gt; + 클릭 -&gt; 원하는 라이브러리 입력해서 설치</p>\n<br>\n\n<h3 id=\"설치된-패키지-목록-확인\"><a href=\"#설치된-패키지-목록-확인\" class=\"headerlink\" title=\"설치된 패키지 목록 확인\"></a><strong>설치된 패키지 목록 확인</strong></h3><pre><code>pip freeze &gt; requirements.txt\n</code></pre>\n<p>현재 python에 pip로 설치된 패키지 목록에 대한 정보를 만들기 위해 freeze라는 명령어 사용<br>(pip란 파이썬으로 작성된 패키지 소프트웨어를 서리 관리하는 패키지 관리 시스템)</p>\n<br>\n\n<h3 id=\"requirements-txt-속-패키지-설치\"><a href=\"#requirements-txt-속-패키지-설치\" class=\"headerlink\" title=\"requirements.txt 속 패키지 설치\"></a><strong>requirements.txt 속 패키지 설치</strong></h3><p>requirements.txt라는 파일이 주어졌을때,<br>그 안의 패키지들을 모두 설치 하기 위한 명령어</p>\n<pre><code>pip install -r requirements.txt\n</code></pre>\n<br>\n\n\n<h3 id=\"Ref\"><a href=\"#Ref\" class=\"headerlink\" title=\"Ref\"></a><strong>Ref</strong></h3><hr>\n<p><a href=\"https://computer-science-student.tistory.com/221\">requirement.txt파일</a></p>\n<br>\n<br>\n<br>\n<br>\n\n","site":{"data":{}},"excerpt":"Pycharm 가상환경 설정 방법\nFile -> Setting -> 왼쪽 메뉴에서 폴더 이름 클릭 -> Python Interpreter\n-> Virtualenv Environment -> 우측상단 톱니바퀴 -> ADD\n\n\n\n\n위에 Location 에서 경로 확인해주기!\nApply 클릭하면 venv 폴더가 생성된 것을 확인할 수 있다.\n\n\n\n\n가상환경 사용이유\n가상환경은 여러개의 파이썬 프로젝트가 하나의 컴퓨터에서 충동을 일으키지 않고 존재할 수 있도록 해준다.\n-> 독립적인 작업 환경에서 패키지 및 버전관리를 하기위해 가상환경을 ","more":"<h3 id=\"Pycharm-가상환경-설정-방법\"><a href=\"#Pycharm-가상환경-설정-방법\" class=\"headerlink\" title=\"Pycharm 가상환경 설정 방법\"></a><strong>Pycharm 가상환경 설정 방법</strong></h3><p>File -&gt; Setting -&gt; 왼쪽 메뉴에서 폴더 이름 클릭 -&gt; Python Interpreter<br>-&gt; Virtualenv Environment -&gt; 우측상단 톱니바퀴 -&gt; ADD</p>\n<p><img src=\"/images/python_basic_1/venv.PNG\"></p>\n<br>\n\n<p>위에 Location 에서 경로 확인해주기!<br>Apply 클릭하면 venv 폴더가 생성된 것을 확인할 수 있다.</p>\n<p><img src=\"/images/python_basic_1/venv1.PNG\"></p>\n<br>\n\n<h3 id=\"가상환경-사용이유\"><a href=\"#가상환경-사용이유\" class=\"headerlink\" title=\"가상환경 사용이유\"></a><strong>가상환경 사용이유</strong></h3><p>가상환경은 여러개의 파이썬 프로젝트가 하나의 컴퓨터에서 충동을 일으키지 않고 존재할 수 있도록 해준다.<br>-&gt; 독립적인 작업 환경에서 패키지 및 버전관리를 하기위해 가상환경을 사용한다.</p>\n<br>\n\n<h3 id=\"라이브러리-설치-방법\"><a href=\"#라이브러리-설치-방법\" class=\"headerlink\" title=\"라이브러리 설치 방법\"></a><strong>라이브러리 설치 방법</strong></h3><p>File -&gt; Settings -&gt; + 클릭 -&gt; 원하는 라이브러리 입력해서 설치</p>\n<br>\n\n<h3 id=\"설치된-패키지-목록-확인\"><a href=\"#설치된-패키지-목록-확인\" class=\"headerlink\" title=\"설치된 패키지 목록 확인\"></a><strong>설치된 패키지 목록 확인</strong></h3><pre><code>pip freeze &gt; requirements.txt\n</code></pre>\n<p>현재 python에 pip로 설치된 패키지 목록에 대한 정보를 만들기 위해 freeze라는 명령어 사용<br>(pip란 파이썬으로 작성된 패키지 소프트웨어를 서리 관리하는 패키지 관리 시스템)</p>\n<br>\n\n<h3 id=\"requirements-txt-속-패키지-설치\"><a href=\"#requirements-txt-속-패키지-설치\" class=\"headerlink\" title=\"requirements.txt 속 패키지 설치\"></a><strong>requirements.txt 속 패키지 설치</strong></h3><p>requirements.txt라는 파일이 주어졌을때,<br>그 안의 패키지들을 모두 설치 하기 위한 명령어</p>\n<pre><code>pip install -r requirements.txt\n</code></pre>\n<br>\n\n\n<h3 id=\"Ref\"><a href=\"#Ref\" class=\"headerlink\" title=\"Ref\"></a><strong>Ref</strong></h3><hr>\n<p><a href=\"https://computer-science-student.tistory.com/221\">requirement.txt파일</a></p>\n<br>\n<br>\n<br>\n<br>\n\n"},{"date":"2021-12-05T15:00:00.000Z","title":"파이썬 List","toc":true,"widgets":null,"_content":"### **리스트**\n---\n\n리스트는 대괄호[] 안에 문자나 숫자를 저장할수 있는 자료형이다.\n\n아래처럼 리스트는 다양한 형태 이다\n\n```python\na = []\nb = [1, 2, 3]\nc = ['Life', 'is', 'too', 'short']\nd = [1, 2, 'Life', 'is']\ne = [1, 2, ['Life', 'is']]\n```\n\n### **리스트 인덱싱**\n리스트는 자바의 배열처럼 인덱스를 가지고 있다.\n위에 만들어놓은 e를 아래에서 활용해 보았다.\n```python\ne[0] \n>> 1\ne[1]\n>> 2\ne[0]+e[1]\n>> 3\n```\n\ne[-1]에서 -1은 마지막 요소값을 나타낸다.\n```python\ne[-1]\n>> ['Life', 'is']\n```\n\n위에 만들어놓은 e리스트 안에는 리스트 ['Life', 'is']리스트가 있다\n이때 Life 값과 is 값을 아래와 같이 가져올 수 있다\n\n```python\ne[2][0]\n>> 'Life'\ne[-1][1]\n>> 'is'\n```\n\n### **리스트의 슬라이싱**\n```python\ne[0:2]\n>> [1, 2, ['Life', 'is']]\ne[:2]\n>> [1, 2, ['Life', 'is']]\ne[1:]\n>> [2, ['Life', 'is']]\ne[2][:1]\n>> ['Life', 'is']\n```\n\n### **리스트의 연산**\n문자열과 숫자를 더하는것은 불가능하다.\n```python\nb + c\n>> [1, 2, 3, 'Life', 'is', 'too', 'short']\nb * 3\n>> [1, 2, 3, 1, 2, 3, 1, 2, 3]\n```\n\n### **리스트의 길이**\n```python\nlen(b)\n>> 3\n```\n\n### **리스트 값 수정**\n```python\nb[1] = 5\nb\n>> [1, 5, 3]\n\ndel b[1:]\nb\n>> [1]\n```\n\n### **리스트 관련 메서드**\n- append 요소 추가\n```python\nb.append(5)\n>> [1,2,3,5]\n```\n- sort 정렬\n```python\nb.sort()\n>> [1,2,3]\n```\n\n- reverse 뒤집기\n```python\nb.reverse()\nb\n>> [3, 2, 1]\n```\n- index\nb 리스트 안에 2가 있으면 2의 인덱스 값을 반환\n```python\nb.index(2)\nb\n>> 1\n```\n- insert\n(인덱스, 삽입할 값)\n```python\nb.insert(0,6)\nb\n>> [6, 1, 2, 3]\n```\n- remove 삭제\n```python\nb.remove(1)\nb\n>> [1, 3]\n```\n- pop 맨 마지막 값 반환하고 삭제\n\n```python\nb.pop \n>> 3\nb \n>> [1, 2]\n```\n- count 리스트의 요소 개수\n리스트 b안에 1의 갯수\n```python\nb.count(1)\n>> 1\n```\n- extend \n```python\na = [1,2,3]\na.extend([4,5])\na\n>> [1, 2, 3, 4, 5]\nb = [6, 7]\na.extend(b)\na\n>> [1, 2, 3, 4, 5, 6, 7]\n```\n\n\n\n\n\n### Ref\nhttps://wikidocs.net/14","source":"_posts/python01_list.md","raw":"---\ndate: 2021-12-06\ntitle: 파이썬 List\ntags: python, list\ncategories:\n - 파이썬\n - Python 기초\ntoc: true\nwidgets: null\n---\n### **리스트**\n---\n\n리스트는 대괄호[] 안에 문자나 숫자를 저장할수 있는 자료형이다.\n\n아래처럼 리스트는 다양한 형태 이다\n\n```python\na = []\nb = [1, 2, 3]\nc = ['Life', 'is', 'too', 'short']\nd = [1, 2, 'Life', 'is']\ne = [1, 2, ['Life', 'is']]\n```\n\n### **리스트 인덱싱**\n리스트는 자바의 배열처럼 인덱스를 가지고 있다.\n위에 만들어놓은 e를 아래에서 활용해 보았다.\n```python\ne[0] \n>> 1\ne[1]\n>> 2\ne[0]+e[1]\n>> 3\n```\n\ne[-1]에서 -1은 마지막 요소값을 나타낸다.\n```python\ne[-1]\n>> ['Life', 'is']\n```\n\n위에 만들어놓은 e리스트 안에는 리스트 ['Life', 'is']리스트가 있다\n이때 Life 값과 is 값을 아래와 같이 가져올 수 있다\n\n```python\ne[2][0]\n>> 'Life'\ne[-1][1]\n>> 'is'\n```\n\n### **리스트의 슬라이싱**\n```python\ne[0:2]\n>> [1, 2, ['Life', 'is']]\ne[:2]\n>> [1, 2, ['Life', 'is']]\ne[1:]\n>> [2, ['Life', 'is']]\ne[2][:1]\n>> ['Life', 'is']\n```\n\n### **리스트의 연산**\n문자열과 숫자를 더하는것은 불가능하다.\n```python\nb + c\n>> [1, 2, 3, 'Life', 'is', 'too', 'short']\nb * 3\n>> [1, 2, 3, 1, 2, 3, 1, 2, 3]\n```\n\n### **리스트의 길이**\n```python\nlen(b)\n>> 3\n```\n\n### **리스트 값 수정**\n```python\nb[1] = 5\nb\n>> [1, 5, 3]\n\ndel b[1:]\nb\n>> [1]\n```\n\n### **리스트 관련 메서드**\n- append 요소 추가\n```python\nb.append(5)\n>> [1,2,3,5]\n```\n- sort 정렬\n```python\nb.sort()\n>> [1,2,3]\n```\n\n- reverse 뒤집기\n```python\nb.reverse()\nb\n>> [3, 2, 1]\n```\n- index\nb 리스트 안에 2가 있으면 2의 인덱스 값을 반환\n```python\nb.index(2)\nb\n>> 1\n```\n- insert\n(인덱스, 삽입할 값)\n```python\nb.insert(0,6)\nb\n>> [6, 1, 2, 3]\n```\n- remove 삭제\n```python\nb.remove(1)\nb\n>> [1, 3]\n```\n- pop 맨 마지막 값 반환하고 삭제\n\n```python\nb.pop \n>> 3\nb \n>> [1, 2]\n```\n- count 리스트의 요소 개수\n리스트 b안에 1의 갯수\n```python\nb.count(1)\n>> 1\n```\n- extend \n```python\na = [1,2,3]\na.extend([4,5])\na\n>> [1, 2, 3, 4, 5]\nb = [6, 7]\na.extend(b)\na\n>> [1, 2, 3, 4, 5, 6, 7]\n```\n\n\n\n\n\n### Ref\nhttps://wikidocs.net/14","slug":"python01-list","published":1,"updated":"2022-01-03T12:20:08.050Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cky2hohex002i5nrja0ub24ho","content":"<h3 id=\"리스트\"><a href=\"#리스트\" class=\"headerlink\" title=\"리스트\"></a><strong>리스트</strong></h3><hr>\n<p>리스트는 대괄호[] 안에 문자나 숫자를 저장할수 있는 자료형이다.</p>\n<p>아래처럼 리스트는 다양한 형태 이다</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = []</span><br><span class=\"line\">b = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">c = [<span class=\"string\">&#x27;Life&#x27;</span>, <span class=\"string\">&#x27;is&#x27;</span>, <span class=\"string\">&#x27;too&#x27;</span>, <span class=\"string\">&#x27;short&#x27;</span>]</span><br><span class=\"line\">d = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"string\">&#x27;Life&#x27;</span>, <span class=\"string\">&#x27;is&#x27;</span>]</span><br><span class=\"line\">e = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, [<span class=\"string\">&#x27;Life&#x27;</span>, <span class=\"string\">&#x27;is&#x27;</span>]]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"리스트-인덱싱\"><a href=\"#리스트-인덱싱\" class=\"headerlink\" title=\"리스트 인덱싱\"></a><strong>리스트 인덱싱</strong></h3><p>리스트는 자바의 배열처럼 인덱스를 가지고 있다.<br>위에 만들어놓은 e를 아래에서 활용해 보았다.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">e[<span class=\"number\">0</span>] </span><br><span class=\"line\">&gt;&gt; <span class=\"number\">1</span></span><br><span class=\"line\">e[<span class=\"number\">1</span>]</span><br><span class=\"line\">&gt;&gt; <span class=\"number\">2</span></span><br><span class=\"line\">e[<span class=\"number\">0</span>]+e[<span class=\"number\">1</span>]</span><br><span class=\"line\">&gt;&gt; <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n\n<p>e[-1]에서 -1은 마지막 요소값을 나타낸다.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">e[-<span class=\"number\">1</span>]</span><br><span class=\"line\">&gt;&gt; [<span class=\"string\">&#x27;Life&#x27;</span>, <span class=\"string\">&#x27;is&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<p>위에 만들어놓은 e리스트 안에는 리스트 [‘Life’, ‘is’]리스트가 있다<br>이때 Life 값과 is 값을 아래와 같이 가져올 수 있다</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">e[<span class=\"number\">2</span>][<span class=\"number\">0</span>]</span><br><span class=\"line\">&gt;&gt; <span class=\"string\">&#x27;Life&#x27;</span></span><br><span class=\"line\">e[-<span class=\"number\">1</span>][<span class=\"number\">1</span>]</span><br><span class=\"line\">&gt;&gt; <span class=\"string\">&#x27;is&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"리스트의-슬라이싱\"><a href=\"#리스트의-슬라이싱\" class=\"headerlink\" title=\"리스트의 슬라이싱\"></a><strong>리스트의 슬라이싱</strong></h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">e[<span class=\"number\">0</span>:<span class=\"number\">2</span>]</span><br><span class=\"line\">&gt;&gt; [<span class=\"number\">1</span>, <span class=\"number\">2</span>, [<span class=\"string\">&#x27;Life&#x27;</span>, <span class=\"string\">&#x27;is&#x27;</span>]]</span><br><span class=\"line\">e[:<span class=\"number\">2</span>]</span><br><span class=\"line\">&gt;&gt; [<span class=\"number\">1</span>, <span class=\"number\">2</span>, [<span class=\"string\">&#x27;Life&#x27;</span>, <span class=\"string\">&#x27;is&#x27;</span>]]</span><br><span class=\"line\">e[<span class=\"number\">1</span>:]</span><br><span class=\"line\">&gt;&gt; [<span class=\"number\">2</span>, [<span class=\"string\">&#x27;Life&#x27;</span>, <span class=\"string\">&#x27;is&#x27;</span>]]</span><br><span class=\"line\">e[<span class=\"number\">2</span>][:<span class=\"number\">1</span>]</span><br><span class=\"line\">&gt;&gt; [<span class=\"string\">&#x27;Life&#x27;</span>, <span class=\"string\">&#x27;is&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"리스트의-연산\"><a href=\"#리스트의-연산\" class=\"headerlink\" title=\"리스트의 연산\"></a><strong>리스트의 연산</strong></h3><p>문자열과 숫자를 더하는것은 불가능하다.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b + c</span><br><span class=\"line\">&gt;&gt; [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"string\">&#x27;Life&#x27;</span>, <span class=\"string\">&#x27;is&#x27;</span>, <span class=\"string\">&#x27;too&#x27;</span>, <span class=\"string\">&#x27;short&#x27;</span>]</span><br><span class=\"line\">b * <span class=\"number\">3</span></span><br><span class=\"line\">&gt;&gt; [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"리스트의-길이\"><a href=\"#리스트의-길이\" class=\"headerlink\" title=\"리스트의 길이\"></a><strong>리스트의 길이</strong></h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">len</span>(b)</span><br><span class=\"line\">&gt;&gt; <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"리스트-값-수정\"><a href=\"#리스트-값-수정\" class=\"headerlink\" title=\"리스트 값 수정\"></a><strong>리스트 값 수정</strong></h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b[<span class=\"number\">1</span>] = <span class=\"number\">5</span></span><br><span class=\"line\">b</span><br><span class=\"line\">&gt;&gt; [<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">del</span> b[<span class=\"number\">1</span>:]</span><br><span class=\"line\">b</span><br><span class=\"line\">&gt;&gt; [<span class=\"number\">1</span>]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"리스트-관련-메서드\"><a href=\"#리스트-관련-메서드\" class=\"headerlink\" title=\"리스트 관련 메서드\"></a><strong>리스트 관련 메서드</strong></h3><ul>\n<li><p>append 요소 추가</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b.append(<span class=\"number\">5</span>)</span><br><span class=\"line\">&gt;&gt; [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>]</span><br></pre></td></tr></table></figure></li>\n<li><p>sort 정렬</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b.sort()</span><br><span class=\"line\">&gt;&gt; [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br></pre></td></tr></table></figure></li>\n<li><p>reverse 뒤집기</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b.reverse()</span><br><span class=\"line\">b</span><br><span class=\"line\">&gt;&gt; [<span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>]</span><br></pre></td></tr></table></figure></li>\n<li><p>index<br>b 리스트 안에 2가 있으면 2의 인덱스 값을 반환</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b.index(<span class=\"number\">2</span>)</span><br><span class=\"line\">b</span><br><span class=\"line\">&gt;&gt; <span class=\"number\">1</span></span><br></pre></td></tr></table></figure></li>\n<li><p>insert<br>(인덱스, 삽입할 값)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b.insert(<span class=\"number\">0</span>,<span class=\"number\">6</span>)</span><br><span class=\"line\">b</span><br><span class=\"line\">&gt;&gt; [<span class=\"number\">6</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br></pre></td></tr></table></figure></li>\n<li><p>remove 삭제</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b.remove(<span class=\"number\">1</span>)</span><br><span class=\"line\">b</span><br><span class=\"line\">&gt;&gt; [<span class=\"number\">1</span>, <span class=\"number\">3</span>]</span><br></pre></td></tr></table></figure></li>\n<li><p>pop 맨 마지막 값 반환하고 삭제</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b.pop </span><br><span class=\"line\">&gt;&gt; <span class=\"number\">3</span></span><br><span class=\"line\">b </span><br><span class=\"line\">&gt;&gt; [<span class=\"number\">1</span>, <span class=\"number\">2</span>]</span><br></pre></td></tr></table></figure>\n<ul>\n<li>count 리스트의 요소 개수<br>리스트 b안에 1의 갯수<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b.count(<span class=\"number\">1</span>)</span><br><span class=\"line\">&gt;&gt; <span class=\"number\">1</span></span><br></pre></td></tr></table></figure></li>\n<li>extend <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">a.extend([<span class=\"number\">4</span>,<span class=\"number\">5</span>])</span><br><span class=\"line\">a</span><br><span class=\"line\">&gt;&gt; [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\">b = [<span class=\"number\">6</span>, <span class=\"number\">7</span>]</span><br><span class=\"line\">a.extend(b)</span><br><span class=\"line\">a</span><br><span class=\"line\">&gt;&gt; [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>]</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"Ref\"><a href=\"#Ref\" class=\"headerlink\" title=\"Ref\"></a>Ref</h3><p><a href=\"https://wikidocs.net/14\">https://wikidocs.net/14</a></p>\n","site":{"data":{}},"excerpt":"리스트\n\n\n\n리스트는 대괄호[] 안에 문자나 숫자를 저장할수 있는 자료형이다.\n\n아래처럼 리스트는 다양한 형태 이다\n\n1\n2\n3\n4\n5\n\n\na = []\nb = [1, 2, 3]\nc = ['Life', 'is', 'too', 'short']\nd = [1, 2, 'Life', 'is']\ne = [1, 2, ['Life', 'is']]\n\n\n리스트 인덱싱\n리스트는 자바의 배열처럼 인덱스를 가지고 있다.\n위에 만들어놓은 e를 아래에서 활용해 보았다.\n\n1\n2\n3\n4\n5\n6\n\n\ne[0] \n>> 1\ne[1]\n>> 2\ne[0]+e[1]\n>> 3\n","more":"<h3 id=\"리스트\"><a href=\"#리스트\" class=\"headerlink\" title=\"리스트\"></a><strong>리스트</strong></h3><hr>\n<p>리스트는 대괄호[] 안에 문자나 숫자를 저장할수 있는 자료형이다.</p>\n<p>아래처럼 리스트는 다양한 형태 이다</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = []</span><br><span class=\"line\">b = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">c = [<span class=\"string\">&#x27;Life&#x27;</span>, <span class=\"string\">&#x27;is&#x27;</span>, <span class=\"string\">&#x27;too&#x27;</span>, <span class=\"string\">&#x27;short&#x27;</span>]</span><br><span class=\"line\">d = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"string\">&#x27;Life&#x27;</span>, <span class=\"string\">&#x27;is&#x27;</span>]</span><br><span class=\"line\">e = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, [<span class=\"string\">&#x27;Life&#x27;</span>, <span class=\"string\">&#x27;is&#x27;</span>]]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"리스트-인덱싱\"><a href=\"#리스트-인덱싱\" class=\"headerlink\" title=\"리스트 인덱싱\"></a><strong>리스트 인덱싱</strong></h3><p>리스트는 자바의 배열처럼 인덱스를 가지고 있다.<br>위에 만들어놓은 e를 아래에서 활용해 보았다.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">e[<span class=\"number\">0</span>] </span><br><span class=\"line\">&gt;&gt; <span class=\"number\">1</span></span><br><span class=\"line\">e[<span class=\"number\">1</span>]</span><br><span class=\"line\">&gt;&gt; <span class=\"number\">2</span></span><br><span class=\"line\">e[<span class=\"number\">0</span>]+e[<span class=\"number\">1</span>]</span><br><span class=\"line\">&gt;&gt; <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n\n<p>e[-1]에서 -1은 마지막 요소값을 나타낸다.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">e[-<span class=\"number\">1</span>]</span><br><span class=\"line\">&gt;&gt; [<span class=\"string\">&#x27;Life&#x27;</span>, <span class=\"string\">&#x27;is&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<p>위에 만들어놓은 e리스트 안에는 리스트 [‘Life’, ‘is’]리스트가 있다<br>이때 Life 값과 is 값을 아래와 같이 가져올 수 있다</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">e[<span class=\"number\">2</span>][<span class=\"number\">0</span>]</span><br><span class=\"line\">&gt;&gt; <span class=\"string\">&#x27;Life&#x27;</span></span><br><span class=\"line\">e[-<span class=\"number\">1</span>][<span class=\"number\">1</span>]</span><br><span class=\"line\">&gt;&gt; <span class=\"string\">&#x27;is&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"리스트의-슬라이싱\"><a href=\"#리스트의-슬라이싱\" class=\"headerlink\" title=\"리스트의 슬라이싱\"></a><strong>리스트의 슬라이싱</strong></h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">e[<span class=\"number\">0</span>:<span class=\"number\">2</span>]</span><br><span class=\"line\">&gt;&gt; [<span class=\"number\">1</span>, <span class=\"number\">2</span>, [<span class=\"string\">&#x27;Life&#x27;</span>, <span class=\"string\">&#x27;is&#x27;</span>]]</span><br><span class=\"line\">e[:<span class=\"number\">2</span>]</span><br><span class=\"line\">&gt;&gt; [<span class=\"number\">1</span>, <span class=\"number\">2</span>, [<span class=\"string\">&#x27;Life&#x27;</span>, <span class=\"string\">&#x27;is&#x27;</span>]]</span><br><span class=\"line\">e[<span class=\"number\">1</span>:]</span><br><span class=\"line\">&gt;&gt; [<span class=\"number\">2</span>, [<span class=\"string\">&#x27;Life&#x27;</span>, <span class=\"string\">&#x27;is&#x27;</span>]]</span><br><span class=\"line\">e[<span class=\"number\">2</span>][:<span class=\"number\">1</span>]</span><br><span class=\"line\">&gt;&gt; [<span class=\"string\">&#x27;Life&#x27;</span>, <span class=\"string\">&#x27;is&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"리스트의-연산\"><a href=\"#리스트의-연산\" class=\"headerlink\" title=\"리스트의 연산\"></a><strong>리스트의 연산</strong></h3><p>문자열과 숫자를 더하는것은 불가능하다.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b + c</span><br><span class=\"line\">&gt;&gt; [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"string\">&#x27;Life&#x27;</span>, <span class=\"string\">&#x27;is&#x27;</span>, <span class=\"string\">&#x27;too&#x27;</span>, <span class=\"string\">&#x27;short&#x27;</span>]</span><br><span class=\"line\">b * <span class=\"number\">3</span></span><br><span class=\"line\">&gt;&gt; [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"리스트의-길이\"><a href=\"#리스트의-길이\" class=\"headerlink\" title=\"리스트의 길이\"></a><strong>리스트의 길이</strong></h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">len</span>(b)</span><br><span class=\"line\">&gt;&gt; <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"리스트-값-수정\"><a href=\"#리스트-값-수정\" class=\"headerlink\" title=\"리스트 값 수정\"></a><strong>리스트 값 수정</strong></h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b[<span class=\"number\">1</span>] = <span class=\"number\">5</span></span><br><span class=\"line\">b</span><br><span class=\"line\">&gt;&gt; [<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">del</span> b[<span class=\"number\">1</span>:]</span><br><span class=\"line\">b</span><br><span class=\"line\">&gt;&gt; [<span class=\"number\">1</span>]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"리스트-관련-메서드\"><a href=\"#리스트-관련-메서드\" class=\"headerlink\" title=\"리스트 관련 메서드\"></a><strong>리스트 관련 메서드</strong></h3><ul>\n<li><p>append 요소 추가</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b.append(<span class=\"number\">5</span>)</span><br><span class=\"line\">&gt;&gt; [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>]</span><br></pre></td></tr></table></figure></li>\n<li><p>sort 정렬</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b.sort()</span><br><span class=\"line\">&gt;&gt; [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br></pre></td></tr></table></figure></li>\n<li><p>reverse 뒤집기</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b.reverse()</span><br><span class=\"line\">b</span><br><span class=\"line\">&gt;&gt; [<span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>]</span><br></pre></td></tr></table></figure></li>\n<li><p>index<br>b 리스트 안에 2가 있으면 2의 인덱스 값을 반환</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b.index(<span class=\"number\">2</span>)</span><br><span class=\"line\">b</span><br><span class=\"line\">&gt;&gt; <span class=\"number\">1</span></span><br></pre></td></tr></table></figure></li>\n<li><p>insert<br>(인덱스, 삽입할 값)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b.insert(<span class=\"number\">0</span>,<span class=\"number\">6</span>)</span><br><span class=\"line\">b</span><br><span class=\"line\">&gt;&gt; [<span class=\"number\">6</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br></pre></td></tr></table></figure></li>\n<li><p>remove 삭제</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b.remove(<span class=\"number\">1</span>)</span><br><span class=\"line\">b</span><br><span class=\"line\">&gt;&gt; [<span class=\"number\">1</span>, <span class=\"number\">3</span>]</span><br></pre></td></tr></table></figure></li>\n<li><p>pop 맨 마지막 값 반환하고 삭제</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b.pop </span><br><span class=\"line\">&gt;&gt; <span class=\"number\">3</span></span><br><span class=\"line\">b </span><br><span class=\"line\">&gt;&gt; [<span class=\"number\">1</span>, <span class=\"number\">2</span>]</span><br></pre></td></tr></table></figure>\n<ul>\n<li>count 리스트의 요소 개수<br>리스트 b안에 1의 갯수<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b.count(<span class=\"number\">1</span>)</span><br><span class=\"line\">&gt;&gt; <span class=\"number\">1</span></span><br></pre></td></tr></table></figure></li>\n<li>extend <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">a.extend([<span class=\"number\">4</span>,<span class=\"number\">5</span>])</span><br><span class=\"line\">a</span><br><span class=\"line\">&gt;&gt; [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\">b = [<span class=\"number\">6</span>, <span class=\"number\">7</span>]</span><br><span class=\"line\">a.extend(b)</span><br><span class=\"line\">a</span><br><span class=\"line\">&gt;&gt; [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>]</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"Ref\"><a href=\"#Ref\" class=\"headerlink\" title=\"Ref\"></a>Ref</h3><p><a href=\"https://wikidocs.net/14\">https://wikidocs.net/14</a></p>\n"},{"date":"2021-12-05T15:00:00.000Z","title":"파이썬 Tuple","toc":true,"widgets":null,"_content":"### **Tuple**\n---\n- 리스트와 다른점\n리스트는 []로 둘러싸지만 튜플은 ()로 둘러싼다.\n리스트는 값의 생성, 삭제, 수정이 가능하지만 튜플은 값을 바꿀 수 없다.\n리스트보다 속도가 빠르다.\n인덱싱, 슬라이싱, 더하기, 곱하기 ... 등등 리스트와 다 동일하다.\n\n```python\nt1 = ()\nt2 = (1,)\nt3 = (1, 2, 3)\nt4 = 1, 2, 3\nt5 = ('a', 'b', ('ab', 'cd'))\n```\n\n\n```python\nmenu = (\"김치볶음밥, 엽기떡볶이\")\nname = \"김지원\"\nage = 20\nhobby = \"코딩\"\n```\n<br>\n\n\n### **Ref**\nhttps://wikidocs.net/15\n\n<br>\n<br>\n<br>\n","source":"_posts/python02_tuple.md","raw":"---\ndate: 2021-12-06\ntitle: 파이썬 Tuple\ntags: python, tuple\ncategories:\n  - 파이썬\n  - Python 기초\ntoc: true\nwidgets: null\n---\n### **Tuple**\n---\n- 리스트와 다른점\n리스트는 []로 둘러싸지만 튜플은 ()로 둘러싼다.\n리스트는 값의 생성, 삭제, 수정이 가능하지만 튜플은 값을 바꿀 수 없다.\n리스트보다 속도가 빠르다.\n인덱싱, 슬라이싱, 더하기, 곱하기 ... 등등 리스트와 다 동일하다.\n\n```python\nt1 = ()\nt2 = (1,)\nt3 = (1, 2, 3)\nt4 = 1, 2, 3\nt5 = ('a', 'b', ('ab', 'cd'))\n```\n\n\n```python\nmenu = (\"김치볶음밥, 엽기떡볶이\")\nname = \"김지원\"\nage = 20\nhobby = \"코딩\"\n```\n<br>\n\n\n### **Ref**\nhttps://wikidocs.net/15\n\n<br>\n<br>\n<br>\n","slug":"python02-tuple","published":1,"updated":"2022-01-03T12:20:08.050Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cky2hohex002m5nrjex96h500","content":"<h3 id=\"Tuple\"><a href=\"#Tuple\" class=\"headerlink\" title=\"Tuple\"></a><strong>Tuple</strong></h3><hr>\n<ul>\n<li>리스트와 다른점<br>리스트는 []로 둘러싸지만 튜플은 ()로 둘러싼다.<br>리스트는 값의 생성, 삭제, 수정이 가능하지만 튜플은 값을 바꿀 수 없다.<br>리스트보다 속도가 빠르다.<br>인덱싱, 슬라이싱, 더하기, 곱하기 … 등등 리스트와 다 동일하다.</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">t1 = ()</span><br><span class=\"line\">t2 = (<span class=\"number\">1</span>,)</span><br><span class=\"line\">t3 = (<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">t4 = <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span></span><br><span class=\"line\">t5 = (<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, (<span class=\"string\">&#x27;ab&#x27;</span>, <span class=\"string\">&#x27;cd&#x27;</span>))</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">menu = (<span class=\"string\">&quot;김치볶음밥, 엽기떡볶이&quot;</span>)</span><br><span class=\"line\">name = <span class=\"string\">&quot;김지원&quot;</span></span><br><span class=\"line\">age = <span class=\"number\">20</span></span><br><span class=\"line\">hobby = <span class=\"string\">&quot;코딩&quot;</span></span><br></pre></td></tr></table></figure>\n<br>\n\n\n<h3 id=\"Ref\"><a href=\"#Ref\" class=\"headerlink\" title=\"Ref\"></a><strong>Ref</strong></h3><p><a href=\"https://wikidocs.net/15\">https://wikidocs.net/15</a></p>\n<br>\n<br>\n<br>\n","site":{"data":{}},"excerpt":"Tuple\n\n\n\n * 리스트와 다른점\n   리스트는 []로 둘러싸지만 튜플은 ()로 둘러싼다.\n   리스트는 값의 생성, 삭제, 수정이 가능하지만 튜플은 값을 바꿀 수 없다.\n   리스트보다 속도가 빠르다.\n   인덱싱, 슬라이싱, 더하기, 곱하기 … 등등 리스트와 다 동일하다.\n\n1\n2\n3\n4\n5\n\n\nt1 = ()\nt2 = (1,)\nt3 = (1, 2, 3)\nt4 = 1, 2, 3\nt5 = ('a', 'b', ('ab', 'cd'))\n\n\n1\n2\n3\n4\n\n\nmenu = (\"김치볶음밥, 엽기떡볶이\")\nname = \"김지원\"\nage =","more":"<h3 id=\"Tuple\"><a href=\"#Tuple\" class=\"headerlink\" title=\"Tuple\"></a><strong>Tuple</strong></h3><hr>\n<ul>\n<li>리스트와 다른점<br>리스트는 []로 둘러싸지만 튜플은 ()로 둘러싼다.<br>리스트는 값의 생성, 삭제, 수정이 가능하지만 튜플은 값을 바꿀 수 없다.<br>리스트보다 속도가 빠르다.<br>인덱싱, 슬라이싱, 더하기, 곱하기 … 등등 리스트와 다 동일하다.</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">t1 = ()</span><br><span class=\"line\">t2 = (<span class=\"number\">1</span>,)</span><br><span class=\"line\">t3 = (<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">t4 = <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span></span><br><span class=\"line\">t5 = (<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, (<span class=\"string\">&#x27;ab&#x27;</span>, <span class=\"string\">&#x27;cd&#x27;</span>))</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">menu = (<span class=\"string\">&quot;김치볶음밥, 엽기떡볶이&quot;</span>)</span><br><span class=\"line\">name = <span class=\"string\">&quot;김지원&quot;</span></span><br><span class=\"line\">age = <span class=\"number\">20</span></span><br><span class=\"line\">hobby = <span class=\"string\">&quot;코딩&quot;</span></span><br></pre></td></tr></table></figure>\n<br>\n\n\n<h3 id=\"Ref\"><a href=\"#Ref\" class=\"headerlink\" title=\"Ref\"></a><strong>Ref</strong></h3><p><a href=\"https://wikidocs.net/15\">https://wikidocs.net/15</a></p>\n<br>\n<br>\n<br>\n"},{"title":"Kaggle Competition(4)","date":"2021-11-16T15:00:00.000Z","toc":true,"_content":"### 그래프 목록\n- 학력\n- 직업\n- 경력\n- 연봉\n- 언어\n\n<br>\n<br>\n<br>\n\n### **라이브러리 불러오기 & 캐글 데이터 불러오기**\n---\n\n\n```python\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pylab as plt\n\nimport plotly.io as pio\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.figure_factory as ff\nfrom plotly.subplots import make_subplots\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\npio.templates.default = \"none\"\n# import plotly.offline as py\n# py.offline.init_notebook_mode()\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n```\n\n\n```python\ndf17= pd.read_csv(\"/kaggle/input/kaggle-survey-2017/multipleChoiceResponses.csv\", encoding=\"ISO-8859-1\")\ndf18= pd.read_csv(\"/kaggle/input/kaggle-survey-2018/multipleChoiceResponses.csv\", )\ndf19= pd.read_csv(\"/kaggle/input/kaggle-survey-2019/multiple_choice_responses.csv\", )\ndf20= pd.read_csv(\"/kaggle/input/kaggle-survey-2020/kaggle_survey_2020_responses.csv\", )\ndf21= pd.read_csv(\"/kaggle/input/kaggle-survey-2021/kaggle_survey_2021_responses.csv\", )\n```\n\n### **EastAsia 데이터 Grouping**\n---\n\n\n```python\n## East Asia에는 대한민국, 일본, 중국, 타이완, 몽골, 북조선 총 6개의 국가가 속해 있다. \n\nEastAsia17 = ['China',\"People 's Republic of China\", 'Taiwan', 'South Korea', 'Japan']\nEastAsia18 = ['China', 'South Korea', 'Japan', 'Republic of Korea'] \nEastAsia19 = ['China','Taiwan', 'South Korea', 'Japan', 'Republic of Korea']\nEastAsia20 = ['China','Taiwan', 'South Korea', 'Japan', 'Republic of Korea']\nEastAsia21 = ['China','Taiwan', 'South Korea', 'Japan']\nEastAsia = ['Republic of Korea','China','Taiwan', 'South Korea', 'Japan', \"People 's Republic of China\" ]\n\n#21년\ndf21_Ea = df21[df21['Q3'].isin(EastAsia)]\ndf21_Wo = df21[~df21['Q3'].isin(EastAsia )]\n\n##  동아시아 국가를 제외한 국가들을 region 열의 데이터 값을 World 로 바꿔줌\n# region 열 생성\ndf21['region']=[\"EastAsia\" if x in EastAsia \n                            else \"World\" for x in df21['Q3']]\n\n#20년\ndf20_Ea = df20[df20['Q3'].isin(EastAsia)]\ndf20_Wo = df20[~df20['Q3'].isin(EastAsia )]\ndf20['region']=[\"EastAsia\" if x in EastAsia \n                            else \"World\" for x in df20['Q3']]\n\n#19년\ndf19_Ea = df19[df19['Q3'].isin(EastAsia)]\ndf19_Wo = df19[~df19['Q3'].isin(EastAsia )]\ndf19['region']=[\"EastAsia\" if x in EastAsia\n                            else \"World\" for x in df19['Q3']]\n\n#18년\ndf18_Ea = df18[df18['Q3'].isin(EastAsia)]\ndf18_Wo = df18[~df18['Q3'].isin(EastAsia )]\ndf18['region']=[\"EastAsia\" if x in EastAsia \n                            else \"World\" for x in df18['Q3']]\n\n#17년\ndf17_Ea = df17[df17['Country'].isin(EastAsia)]\ndf17_Wo = df17[~df17['Country'].isin(EastAsia )]\ndf17['region']=[\"EastAsia\" if x in EastAsia \n                            else \"World\" for x in df17['Country']]\n```\n\n\n\n### **학력**\n---\n- Q4\n\n\n```python\ndf21_degree= df21['Q4'].value_counts().to_frame().reset_index()\ndf21_degree\n```\n![](/images/mykaggle4/1.PNG)\n<br>\n\n```python\n#마지막 행 삭제\ndf21_degree.drop(df21_degree.index[7])\n```\n![](/images/mykaggle4/2.PNG)\n<br>\n\n```python\ndf21_degree['Q4'].to_numpy()\n```\n![](/images/mykaggle4/3.PNG)\n<br>\n\n```python\ndf21_degree['index'].tolist()\n```\n\n![](/images/mykaggle4/4.PNG)\n<br>\n\n\n```python\ndegree = df21_degree['index'].tolist()\n\nfig = go.Figure(data=[\n    go.Bar(name='21년 World kaggler들의 학력', x=degree, y=df21_degree['Q4'].to_numpy() ,orientation='v')])\n\nfig.update_layout(title_text=\"<b>21년 World kaggler들의 학력</b>\",title_font_size=35)\n\nfig.show()\n```\n\n![](/images/mykaggle4/5.png)\n<br>\n\n\n\n```python\n#전체 코드\ndf21_degree= df21['Q4'].value_counts().to_frame().reset_index()\ndf21_degree\n\n#마지막 행 삭제\ndf21_degree.drop(df21_degree.index[7])\n\ndegree = df21_degree['index'].tolist()\n\nfig = go.Figure(data=[\n    go.Bar(name='21년 World kaggler들의 학력', x=degree, y=df21_degree['Q4'].to_numpy() ,orientation='v')])\n\nfig.update_layout(title_text=\"<b>21년 World kaggler들의 학력</b>\",title_font_size=35)\n\nfig.show()\n```\n![](/images/mykaggle4/5.png)\n<br>\n\n\n```python\ndf21_Ea['Q4'].value_counts().index\n```\n![](/images/mykaggle4/6.PNG)\n<br>\n\n\n```python\ndf21_ea_degree = df21_Ea['Q4'].value_counts().to_frame().reset_index()\ndf21_ea_degree['Q4'].to_numpy()\n```\n![](/images/mykaggle4/7.PNG)\n<br>\n\n\n```python\ndegree = df21_Ea['Q4'].value_counts().index\n\nfig = go.Figure(data=[\n    go.Bar(name='China', x = degree, \n                           y=df21_Ea['Q4'][df21_Ea['Q3'] =='China'].value_counts()),\n    go.Bar(name='Japan', x = degree, \n                             y=df21_Ea['Q4'][df21_Ea['Q3'] =='Japan'].value_counts()),\n    go.Bar(name='South Korea', x= degree, \n                            y=df21_Ea['Q4'][df21_Ea['Q3'] =='South Korea'].value_counts()),\n    go.Bar(name='Taiwan', x= degree, \n                            y=df21_Ea['Q4'][df21_Ea['Q3'] =='Taiwan'].value_counts())\n    ])\n\nfig.update_layout(title_text=\"<b>21년 EastAisa kaggler들의 학력</b>\",title_font_size=35)\nfig.show()\n```\n![](/images/mykaggle4/8.png)\n<br>\n\n\n```python\n#전체 코드\n\ndf21_ea_degree = df21_Ea['Q4'].value_counts().to_frame().reset_index()\n\ndegree = df21_Ea['Q4'].value_counts().index\n\nfig = go.Figure(data=[\n    go.Bar(name='China', x = degree, \n                           y=df21_Ea['Q4'][df21_Ea['Q3'] =='China'].value_counts()),\n    go.Bar(name='Japan', x = degree, \n                             y=df21_Ea['Q4'][df21_Ea['Q3'] =='Japan'].value_counts()),\n    go.Bar(name='South Korea', x= degree, \n                            y=df21_Ea['Q4'][df21_Ea['Q3'] =='South Korea'].value_counts()),\n    go.Bar(name='Taiwan', x= degree, \n                            y=df21_Ea['Q4'][df21_Ea['Q3'] =='Taiwan'].value_counts())\n    ])\n\nfig.update_layout(title_text=\"<b>21년 EastAisa kaggler들의 학력</b>\",title_font_size=35)\nfig.show()\n```\n\n### **직업**\n---\n- Q5\n\n\n```python\nData_Analyst =['Data Analyst','Data Miner,Information technology','Data Miner',\n               'Predictive Modeler','Information technology, networking, or system administration' ]\nData_Engineer =['A business discipline (accounting, economics, finance, etc.)', 'Business Analyst',\n                'Statistician', 'Mathematics or statistics', 'Data Scientist', 'Environmental science or geology', \n                'Humanities', 'Machine Learning Engineer', 'Medical or life sciences (biology, chemistry, medicine, etc.)', \n                'Physics or astronomy', 'Research Scientist', 'Researcher', 'Scientist/Researcher', 'Data Engineer',\n                'Social sciences (anthropology, psychology, sociology, etc.)','Software Developer/Software Engineer','Humanities (history, literature, philosophy, etc.)']\nDeveloper=['Developer Relations/Advocacy','Engineer','Engineering (non-computer focused)',\n           'Programmer','Software Engineer', 'Computer Scientist','Computer science (software engineering, etc.)', \n           'Fine arts or performing arts','Product Manager', \n           'Product/Project Manager','Program/Project Manager','DBA/Database Engineer']\nNot_Employeed =['Currently not employed', 'Not employed', 'Student']\nOthers = ['I never declared a major', 'Other']\n```\n\n\n```python\ndf21['Q5'].value_counts()\n```\n![](/images/mykaggle4/9.PNG)\n<br>\n\n\n```python\ndf21_Ea_DA=df21_Ea['Q3'][df21_Ea['Q5'].isin(Data_Analyst)].value_counts().to_frame().rename(columns = {'Q3':'Data_Analyst'})\ndf21_Ea_DE=df21_Ea['Q3'][df21_Ea['Q5'].isin(Data_Engineer)].value_counts().to_frame().rename(columns = {'Q3':'Data_Engineer'})\ndf21_Ea_D=df21_Ea['Q3'][df21_Ea['Q5'].isin(Developer)].value_counts().to_frame().rename(columns = {'Q3':'Developer'})\ndf21_Ea_NE=df21_Ea['Q3'][df21_Ea['Q5'].isin(Not_Employeed)].value_counts().to_frame().rename(columns = {'Q3':'Not_Employeed'})\ndf21_Ea_O=df21_Ea['Q3'][df21_Ea['Q5'].isin(Others)].value_counts().to_frame().rename(columns = {'Q3':'Others'})\n```\n\n\n```python\njob=(df21_Ea_DA.join(df21_Ea_DE).join(df21_Ea_D).join(df21_Ea_NE).join(df21_Ea_O))\njob\n```\n![](/images/mykaggle4/10.PNG)\n<br>\n\n\n```python\njob.iloc[1,0:5].to_numpy()\n```\n    array([ 46, 292, 254, 211, 118])\n<br>\n\n```python\njob_ =job.columns\nfig = go.Figure(data=[\n    go.Bar(name='China', x = job_, \n                           y=job.iloc[0,0:5].to_numpy()),\n    go.Bar(name='Japan', x = job_, \n                             y=job.iloc[1,0:5].to_numpy()),\n    go.Bar(name='South Korea', x= job_, \n                            y=job.iloc[2,0:5].to_numpy()),\n    go.Bar(name='Taiwan', x= job_, \n                            y=job.iloc[3,0:5].to_numpy())\n    ])\n\nfig.update_layout(title_text=\"<b>21년 EastAisa kaggler들의 직업</b>\",title_font_size=35)\nfig.show()\n```\n![](/images/mykaggle4/11.png)\n<br>\n\n\n```python\n#전체 코드\n\nData_Analyst =['Data Analyst','Data Miner,Information technology','Data Miner',\n               'Predictive Modeler','Information technology, networking, or system administration' ]\nData_Engineer =['A business discipline (accounting, economics, finance, etc.)', 'Business Analyst',\n                'Statistician', 'Mathematics or statistics', 'Data Scientist', 'Environmental science or geology', \n                'Humanities', 'Machine Learning Engineer', 'Medical or life sciences (biology, chemistry, medicine, etc.)', \n                'Physics or astronomy', 'Research Scientist', 'Researcher', 'Scientist/Researcher', 'Data Engineer',\n                'Social sciences (anthropology, psychology, sociology, etc.)','Software Developer/Software Engineer','Humanities (history, literature, philosophy, etc.)']\nDeveloper=['Developer Relations/Advocacy','Engineer','Engineering (non-computer focused)',\n           'Programmer','Software Engineer', 'Computer Scientist','Computer science (software engineering, etc.)', \n           'Fine arts or performing arts','Product Manager', \n           'Product/Project Manager','Program/Project Manager','DBA/Database Engineer']\nNot_Employeed =['Currently not employed', 'Not employed', 'Student']\nOthers = ['I never declared a major', 'Other']\n\ndf21_Ea_DA=df21_Ea['Q3'][df21_Ea['Q5'].isin(Data_Analyst)].value_counts().to_frame().rename(columns = {'Q3':'Data_Analyst'})\ndf21_Ea_DE=df21_Ea['Q3'][df21_Ea['Q5'].isin(Data_Engineer)].value_counts().to_frame().rename(columns = {'Q3':'Data_Engineer'})\ndf21_Ea_D=df21_Ea['Q3'][df21_Ea['Q5'].isin(Developer)].value_counts().to_frame().rename(columns = {'Q3':'Developer'})\ndf21_Ea_NE=df21_Ea['Q3'][df21_Ea['Q5'].isin(Not_Employeed)].value_counts().to_frame().rename(columns = {'Q3':'Not_Employeed'})\ndf21_Ea_O=df21_Ea['Q3'][df21_Ea['Q5'].isin(Others)].value_counts().to_frame().rename(columns = {'Q3':'Others'})\n\njob=(df21_Ea_DA.join(df21_Ea_DE).join(df21_Ea_D).join(df21_Ea_NE).join(df21_Ea_O))\n\njob_ =job.columns\nfig = go.Figure(data=[\n    go.Bar(name='China', x = job_, \n                           y=job.iloc[0,0:5].to_numpy()),\n    go.Bar(name='Japan', x = job_, \n                             y=job.iloc[1,0:5].to_numpy()),\n    go.Bar(name='South Korea', x= job_, \n                            y=job.iloc[2,0:5].to_numpy()),\n    go.Bar(name='Taiwan', x= job_, \n                            y=job.iloc[3,0:5].to_numpy())\n    ])\n\nfig.update_layout(title_text=\"<b>21년 EastAisa kaggler들의 직업</b>\",title_font_size=35)\nfig.show()\n```\n\n### **경력**\n---\n- Q6\n\n\n```python\ndf21['Q6'].value_counts()\n```\n![](/images/mykaggle4/12.PNG)\n<br>\n\n\n\n```python\n_3year = ['I have never written code', '< 1 years', '1-3 years']\n_5year = ['3-5 years ','5-10 years']\n_10year = ['10-20 years','20+ years']\n\ndf21_3year = df21['Q6'][df21['Q6'].isin(_3year)]\ndf21_5year = df21['Q6'][df21['Q6'].isin(_5year)]\ndf21_10year = df21['Q6'][df21['Q6'].isin(_10year)]\n\ndf21_3year.count()\ndf21_5year.count()\ndf21_10year.count()\n```\n\n\n```python\ndf21_3year\n```\n![](/images/mykaggle4/13.PNG)\n<br>\n\n\n```python\nyears =['_3year','_5year', '_10year']\nvalues =[df21_3year.count(),\n         df21_5year.count(),\n        df21_10year.count()]\n\nfig = go.Figure(data=[\n    go.Bar(name='21년 World kaggler들의 경력', x=years, y=values ,orientation='v'),])\n\nfig.update_layout(title_text=\"<b>21년 World kaggler들의 경력</b>\",title_font_size=35)\n\nfig.show()\n```\n![](/images/mykaggle4/14.png)\n<br>\n\n\n```python\n#전체 코드\n_3year = ['I have never written code', '< 1 years', '1-3 years']\n_5year = ['3-5 years ','5-10 years']\n_10year = ['10-20 years','20+ years']\n\ndf21_3year = df21['Q6'][df21['Q6'].isin(_3year)]\ndf21_5year = df21['Q6'][df21['Q6'].isin(_5year)]\ndf21_10year = df21['Q6'][df21['Q6'].isin(_10year)]\n\ndf21_3year.count()\ndf21_5year.count()\ndf21_10year.count()\n\nyears =['_3year','_5year', '_10year']\nvalues =[df21_3year.count(),\n         df21_5year.count(),\n        df21_10year.count()]\n\nfig = go.Figure(data=[\n    go.Bar(name='21년 World kaggler들의 경력', x=years, y=values ,orientation='v'),])\n\nfig.update_layout(title_text=\"<b>21년 World kaggler들의 경력</b>\",title_font_size=35)\n\nfig.show()\n```\n\n\n```python\ndf21_Ea['Q3']\n```\n![](/images/mykaggle4/15.PNG)\n<br>\n\n\n```python\n_3year = ['I have never written code', '< 1 years', '1-3 years']\n_5year = ['3-5 years ','5-10 years']\n_10year = ['10-20 years','20+ years']\n\ndf21_Ea_3year = df21_Ea['Q3'][df21_Ea['Q6'].isin(_3year)].value_counts().to_frame().rename(columns = {'Q3':'3year'})\ndf21_Ea_5year = df21_Ea['Q3'][df21_Ea['Q6'].isin(_5year)].value_counts().to_frame().rename(columns = {'Q3':'5year'})\ndf21_Ea_10year = df21_Ea['Q3'][df21_Ea['Q6'].isin(_10year)].value_counts().to_frame().rename(columns = {'Q3':'10year'})\n\n\n```\n\n\n```python\ndf21_Ea_3year\n```\n![](/images/mykaggle4/16.PNG)\n<br>\n\n\n```python\ndf21_Ea_5year\n```\n![](/images/mykaggle4/17.PNG)\n<br>\n\n\n\n```python\ndf21_Ea_10year\n```\n![](/images/mykaggle4/18.PNG)\n<br>\n\n\n\n```python\ncareer=(df21_Ea_3year.join(df21_Ea_5year).join(df21_Ea_10year))\ncareer\n```\n![](/images/mykaggle4/19.PNG)\n<br>\n\n\n```python\ncareer.iloc[0,0:3] #China\ncareer.iloc[1,0:3] #Japan\ncareer.iloc[2,0:3] #South Korea\ncareer.iloc[3,0:3] #Taiwan\n```\n![](/images/mykaggle4/20.PNG)\n<br>\n\n\n```python\nfig = go.Figure(data=[\n    go.Bar(name='China', x = years, \n                           y=career.iloc[0,0:3]),\n    go.Bar(name='Japan', x = years, \n                             y=career.iloc[1,0:3]),\n    go.Bar(name='South Korea', x= years, \n                            y=career.iloc[2,0:3]),\n    go.Bar(name='Taiwan', x= years, \n                            y=career.iloc[3,0:3])\n    ])\n\nfig.update_layout(title_text=\"<b>21년 EastAisa kaggler들의 경력</b>\",title_font_size=35)\nfig.show()\n```\n![](/images/mykaggle4/21.png)\n<br>\n\n\n```python\n#최종 합친 코드\n_3year = ['I have never written code', '< 1 years', '1-3 years']\n_5year = ['3-5 years ','5-10 years']\n_10year = ['10-20 years','20+ years']\n\ndf21_Ea_3year = df21_Ea['Q3'][df21_Ea['Q6'].isin(_3year)].value_counts().to_frame().rename(columns = {'Q3':'3year'})\ndf21_Ea_5year = df21_Ea['Q3'][df21_Ea['Q6'].isin(_5year)].value_counts().to_frame().rename(columns = {'Q3':'5year'})\ndf21_Ea_10year = df21_Ea['Q3'][df21_Ea['Q6'].isin(_10year)].value_counts().to_frame().rename(columns = {'Q3':'10year'})\n\ncareer=(df21_Ea_3year.join(df21_Ea_5year).join(df21_Ea_10year))\ncareer\n\ncareer.iloc[0,0:3] #China\ncareer.iloc[1,0:3] #Japan\ncareer.iloc[2,0:3] #South Korea\ncareer.iloc[3,0:3] #Taiwan\n\nfig = go.Figure(data=[\n    go.Bar(name='China', x = years, \n                           y=career.iloc[0,0:3]),\n    go.Bar(name='Japan', x = years, \n                             y=career.iloc[1,0:3]),\n    go.Bar(name='South Korea', x= years, \n                            y=career.iloc[2,0:3]),\n    go.Bar(name='Taiwan', x= years, \n                            y=career.iloc[3,0:3])\n    ])\n\nfig.update_layout(title_text=\"<b>21년 EastAisa kaggler들의 경력</b>\",title_font_size=35)\nfig.show()\n```\n\n### **연봉**\n---\n- Q25\n\n\n```python\n#마지막 행 삭제해줌\ndf21_=(df21['Q25'].value_counts().to_frame())\ndf21_=df21_.drop(df21_.index[26])\ndf21_\n```\n![](/images/mykaggle4/22.PNG)\n<br>\n\n\n```python\ndf21_['Q25'].index\n```\n![](/images/mykaggle4/23.PNG)\n<br>\n\n\n\n```python\ndf21_['Q25'].to_numpy()\n```\n![](/images/mykaggle4/24.PNG)\n<br>\n\n\n\n```python\ncompensation = df21_['Q25'].index\nfig = go.Figure(data=[\n    go.Bar(name='21년 World kaggler들의 연봉', x=compensation, y=df21_['Q25'].to_numpy() ,orientation='v')])\n\nfig.update_layout(title_text=\"<b>21년 World kaggler들의 연봉</b>\",title_font_size=35)\n\nfig.show()\n```\n\n![](/images/mykaggle4/25.png)\n<br>\n\n\n```python\n#전체 코드\n\n#마지막 행 삭제해줌\ndf21_=(df21['Q25'].value_counts().to_frame())\ndf21_=df21_.drop(df21_.index[26])\ndf21_\n\ncompensation = df21_['Q25'].index\nfig = go.Figure(data=[\n    go.Bar(name='21년 World kaggler들의 연봉', x=compensation, y=df21_['Q25'].to_numpy() ,orientation='v')])\n\nfig.update_layout(title_text=\"<b>21년 World kaggler들의 연봉</b>\",title_font_size=35)\n\nfig.show()\n```\n\n\n```python\n#일본 연봉\ndf21_Ea['Q25'][df21_Ea['Q3'] =='Japan'].value_counts()\n```\n![](/images/mykaggle4/26.PNG)\n<br>\n\n\n```python\ndf21_Ea['Q3'].value_counts()\n```\n![](/images/mykaggle4/27.PNG)\n<br>\n\n\n```python\ndf21_Ea['Q25'][df21_Ea['Q3'] =='Taiwan'].value_counts()\n```\n![](/images/mykaggle4/28.PNG)\n<br>\n\n\n```python\ncompensation = df21_['Q25'].index\n\nfig = go.Figure(data=[\n    go.Bar(name='China', x = compensation, \n                           y = df21_Ea['Q25'][df21_Ea['Q3'] =='Japan'].value_counts()),\n    \n    go.Bar(name='Japan', x = compensation, \n                             y=df21_Ea['Q25'][df21_Ea['Q3'] =='Taiwan'].value_counts()),\n    \n    go.Bar(name='South Korea', x = compensation, \n                            y=df21_Ea['Q25'][df21_Ea['Q3'] =='South Korea'].value_counts()),\n    \n    go.Bar(name='Taiwan', x = compensation, \n                            y=df21_Ea['Q25'][df21_Ea['Q3'] =='China'].value_counts())\n    ])\n\nfig.update_layout(title_text=\"<b>21년 EastAisa kaggler들의 연봉</b>\",title_font_size=35)\nfig.show()\n```\n![](/images/mykaggle4/29.png)\n<br>\n\n\n\n```python\n#전체 코드\n\ncompensation = df21_['Q25'].index\n\nfig = go.Figure(data=[\n    go.Bar(name='China', x = compensation, \n                           y = df21_Ea['Q25'][df21_Ea['Q3'] =='Japan'].value_counts()),\n    \n    go.Bar(name='Japan', x = compensation, \n                             y=df21_Ea['Q25'][df21_Ea['Q3'] =='Taiwan'].value_counts()),\n    \n    go.Bar(name='South Korea', x = compensation, \n                            y=df21_Ea['Q25'][df21_Ea['Q3'] =='South Korea'].value_counts()),\n    \n    go.Bar(name='Taiwan', x = compensation, \n                            y=df21_Ea['Q25'][df21_Ea['Q3'] =='China'].value_counts())\n    ])\n\nfig.update_layout(title_text=\"<b>21년 EastAisa kaggler들의 연봉</b>\",title_font_size=35)\nfig.show()\n```\n\n### **언어**\n---\n- Q7\n\n\n```python\ndf21_p = df21['Q7_Part_1'].value_counts().to_frame() #python\ndf21_r = df21['Q7_Part_2'].value_counts().to_frame() #r\ndf21_s = df21['Q7_Part_3'].value_counts().to_frame() #sql\ndf21_c = df21['Q7_Part_4'].value_counts().to_frame() #c\ndf21_cc = df21['Q7_Part_5'].value_counts().to_frame() #c++\ndf21_j = df21['Q7_Part_6'].value_counts().to_frame() #java\ndf21_js = df21['Q7_Part_7'].value_counts().to_frame() #javascript\ndf21_ju = df21['Q7_Part_8'].value_counts().to_frame() #julia\ndf21_sw = df21['Q7_Part_9'].value_counts().to_frame() #swift\ndf21_b = df21['Q7_Part_10'].value_counts().to_frame() #bash\ndf21_ma = df21['Q7_Part_11'].value_counts().to_frame() #matlab\ndf21_n = df21['Q7_Part_12'].value_counts().to_frame() #none\n```\n\n\n```python\ndf21_p.iloc[0,0]\n```\n\n\n```python\nlanguages = ['Python','R','SQL','C','C++','Java','Javascript','Julia','Swift','Bash','MATLAB','None']\n\nfig = go.Figure(data=[\n    go.Bar(name='21년 World kaggler들이 사용하는 언어', x = languages, \n                                                     y = [df21_p.iloc[0,0],\n                                                          df21_r.iloc[0,0],\n                                                          df21_s.iloc[0,0],\n                                                          df21_c.iloc[0,0],\n                                                          df21_cc.iloc[0,0],\n                                                          df21_j.iloc[0,0],\n                                                          df21_js.iloc[0,0],\n                                                          df21_ju.iloc[0,0],\n                                                          df21_sw.iloc[0,0],\n                                                          df21_b.iloc[0,0],\n                                                          df21_ma.iloc[0,0],\n                                                          df21_n.iloc[0,0]],orientation='v')\n                    \n                    ])\n\nfig.update_layout(title_text=\"<b>21년 World kaggler들이 사용하는 언어</b>\",title_font_size=35)\n\nfig.show()\n```\n![](/images/mykaggle4/30.png)\n<br>\n\n\n```python\n#코드 전체\n\ndf21_p = df21['Q7_Part_1'].value_counts().to_frame() #python\ndf21_r = df21['Q7_Part_2'].value_counts().to_frame() #r\ndf21_s = df21['Q7_Part_3'].value_counts().to_frame() #sql\ndf21_c = df21['Q7_Part_4'].value_counts().to_frame() #c\ndf21_cc = df21['Q7_Part_5'].value_counts().to_frame() #c++\ndf21_j = df21['Q7_Part_6'].value_counts().to_frame() #java\ndf21_js = df21['Q7_Part_7'].value_counts().to_frame() #javascript\ndf21_ju = df21['Q7_Part_8'].value_counts().to_frame() #julia\ndf21_sw = df21['Q7_Part_9'].value_counts().to_frame() #swift\ndf21_b = df21['Q7_Part_10'].value_counts().to_frame() #bash\ndf21_ma = df21['Q7_Part_11'].value_counts().to_frame() #matlab\ndf21_n = df21['Q7_Part_12'].value_counts().to_frame() #none\n\nlanguages = ['Python','R','SQL','C','C++','Java','Javascript','Julia','Swift','Bash','MATLAB','None']\n\nfig = go.Figure(data=[\n    go.Bar(name='21년 World kaggler들이 사용하는 언어', x = languages, \n                                                     y = [df21_p.iloc[0,0],\n                                                          df21_r.iloc[0,0],\n                                                          df21_s.iloc[0,0],\n                                                          df21_c.iloc[0,0],\n                                                          df21_cc.iloc[0,0],\n                                                          df21_j.iloc[0,0],\n                                                          df21_js.iloc[0,0],\n                                                          df21_ju.iloc[0,0],\n                                                          df21_sw.iloc[0,0],\n                                                          df21_b.iloc[0,0],\n                                                          df21_ma.iloc[0,0],\n                                                          df21_n.iloc[0,0]],orientation='v')\n                    \n                    ])\n\nfig.update_layout(title_text=\"<b>21년 World kaggler들이 사용하는 언어</b>\",title_font_size=35)\n\nfig.show()\n```\n\n\n```python\ndf21_lan_ch_p=df21_Ea['Q7_Part_1'][df21_Ea['Q3']=='China'].value_counts().to_frame().rename(columns = {'Q7_Part_1':'cnt'})\ndf21_lan_ch_r=df21_Ea['Q7_Part_2'][df21_Ea['Q3']=='China'].value_counts().to_frame().rename(columns = {'Q7_Part_2':'cnt'})\ndf21_lan_ch_s=df21_Ea['Q7_Part_3'][df21_Ea['Q3']=='China'].value_counts().to_frame().rename(columns = {'Q7_Part_3':'cnt'})\ndf21_lan_ch_c=df21_Ea['Q7_Part_4'][df21_Ea['Q3']=='China'].value_counts().to_frame().rename(columns = {'Q7_Part_4':'cnt'})\ndf21_lan_ch_cc=df21_Ea['Q7_Part_5'][df21_Ea['Q3']=='China'].value_counts().to_frame().rename(columns = {'Q7_Part_5':'cnt'})\ndf21_lan_ch_j=df21_Ea['Q7_Part_6'][df21_Ea['Q3']=='China'].value_counts().to_frame().rename(columns = {'Q7_Part_6':'cnt'})\ndf21_lan_ch_js=df21_Ea['Q7_Part_7'][df21_Ea['Q3']=='China'].value_counts().to_frame().rename(columns = {'Q7_Part_7':'cnt'})\ndf21_lan_ch_ju=df21_Ea['Q7_Part_8'][df21_Ea['Q3']=='China'].value_counts().to_frame().rename(columns = {'Q7_Part_8':'cnt'})\ndf21_lan_ch_sw=df21_Ea['Q7_Part_9'][df21_Ea['Q3']=='China'].value_counts().to_frame().rename(columns = {'Q7_Part_9':'cnt'})\ndf21_lan_ch_b=df21_Ea['Q7_Part_10'][df21_Ea['Q3']=='China'].value_counts().to_frame().rename(columns = {'Q7_Part_10':'cnt'})\ndf21_lan_ch_ma=df21_Ea['Q7_Part_11'][df21_Ea['Q3']=='China'].value_counts().to_frame().rename(columns = {'Q7_Part_11':'cnt'})\ndf21_lan_ch_n=df21_Ea['Q7_Part_12'][df21_Ea['Q3']=='China'].value_counts().to_frame().rename(columns = {'Q7_Part_12':'cnt'})\nch_lan = pd.concat([df21_lan_ch_p,df21_lan_ch_r,df21_lan_ch_s,df21_lan_ch_c,df21_lan_ch_cc,df21_lan_ch_j,df21_lan_ch_js,df21_lan_ch_ju,df21_lan_ch_sw,df21_lan_ch_b,df21_lan_ch_ma,df21_lan_ch_n])\n\n\ndf21_lan_jp_p=df21_Ea['Q7_Part_1'][df21_Ea['Q3']=='Japan'].value_counts().to_frame().rename(columns = {'Q7_Part_1':'cnt'})\ndf21_lan_jp_r=df21_Ea['Q7_Part_2'][df21_Ea['Q3']=='Japan'].value_counts().to_frame().rename(columns = {'Q7_Part_2':'cnt'})\ndf21_lan_jp_s=df21_Ea['Q7_Part_3'][df21_Ea['Q3']=='Japan'].value_counts().to_frame().rename(columns = {'Q7_Part_3':'cnt'})\ndf21_lan_jp_c=df21_Ea['Q7_Part_4'][df21_Ea['Q3']=='Japan'].value_counts().to_frame().rename(columns = {'Q7_Part_4':'cnt'})\ndf21_lan_jp_cc=df21_Ea['Q7_Part_5'][df21_Ea['Q3']=='Japan'].value_counts().to_frame().rename(columns = {'Q7_Part_5':'cnt'})\ndf21_lan_jp_j=df21_Ea['Q7_Part_6'][df21_Ea['Q3']=='Japan'].value_counts().to_frame().rename(columns = {'Q7_Part_6':'cnt'})\ndf21_lan_jp_js=df21_Ea['Q7_Part_7'][df21_Ea['Q3']=='Japan'].value_counts().to_frame().rename(columns = {'Q7_Part_7':'cnt'})\ndf21_lan_jp_ju=df21_Ea['Q7_Part_8'][df21_Ea['Q3']=='Japan'].value_counts().to_frame().rename(columns = {'Q7_Part_8':'cnt'})\ndf21_lan_jp_sw=df21_Ea['Q7_Part_9'][df21_Ea['Q3']=='Japan'].value_counts().to_frame().rename(columns = {'Q7_Part_9':'cnt'})\ndf21_lan_jp_b=df21_Ea['Q7_Part_10'][df21_Ea['Q3']=='Japan'].value_counts().to_frame().rename(columns = {'Q7_Part_10':'cnt'})\ndf21_lan_jp_ma=df21_Ea['Q7_Part_11'][df21_Ea['Q3']=='Japan'].value_counts().to_frame().rename(columns = {'Q7_Part_11':'cnt'})\ndf21_lan_jp_n=df21_Ea['Q7_Part_12'][df21_Ea['Q3']=='Japan'].value_counts().to_frame().rename(columns = {'Q7_Part_12':'cnt'})\njp_lan = pd.concat([df21_lan_jp_p,df21_lan_jp_r,df21_lan_jp_s,df21_lan_jp_c,df21_lan_jp_cc,df21_lan_jp_j,df21_lan_jp_js,df21_lan_jp_ju,df21_lan_jp_sw,df21_lan_jp_b,df21_lan_jp_ma,df21_lan_jp_n])\n\n\ndf21_lan_tw_p=df21_Ea['Q7_Part_1'][df21_Ea['Q3']=='Taiwan'].value_counts().to_frame().rename(columns = {'Q7_Part_1':'cnt'})\ndf21_lan_tw_r=df21_Ea['Q7_Part_2'][df21_Ea['Q3']=='Taiwan'].value_counts().to_frame().rename(columns = {'Q7_Part_2':'cnt'})\ndf21_lan_tw_s=df21_Ea['Q7_Part_3'][df21_Ea['Q3']=='Taiwan'].value_counts().to_frame().rename(columns = {'Q7_Part_3':'cnt'})\ndf21_lan_tw_c=df21_Ea['Q7_Part_4'][df21_Ea['Q3']=='Taiwan'].value_counts().to_frame().rename(columns = {'Q7_Part_4':'cnt'})\ndf21_lan_tw_cc=df21_Ea['Q7_Part_5'][df21_Ea['Q3']=='Taiwan'].value_counts().to_frame().rename(columns = {'Q7_Part_5':'cnt'})\ndf21_lan_tw_j=df21_Ea['Q7_Part_6'][df21_Ea['Q3']=='Taiwan'].value_counts().to_frame().rename(columns = {'Q7_Part_6':'cnt'})\ndf21_lan_tw_js=df21_Ea['Q7_Part_7'][df21_Ea['Q3']=='Taiwan'].value_counts().to_frame().rename(columns = {'Q7_Part_7':'cnt'})\ndf21_lan_tw_ju=df21_Ea['Q7_Part_8'][df21_Ea['Q3']=='Taiwan'].value_counts().to_frame().rename(columns = {'Q7_Part_8':'cnt'})\ndf21_lan_tw_sw=df21_Ea['Q7_Part_9'][df21_Ea['Q3']=='Taiwan'].value_counts().to_frame().rename(columns = {'Q7_Part_9':'cnt'})\ndf21_lan_tw_b=df21_Ea['Q7_Part_10'][df21_Ea['Q3']=='Taiwan'].value_counts().to_frame().rename(columns = {'Q7_Part_10':'cnt'})\ndf21_lan_tw_ma=df21_Ea['Q7_Part_11'][df21_Ea['Q3']=='Taiwan'].value_counts().to_frame().rename(columns = {'Q7_Part_11':'cnt'})\ndf21_lan_tw_n=df21_Ea['Q7_Part_12'][df21_Ea['Q3']=='Taiwan'].value_counts().to_frame().rename(columns = {'Q7_Part_12':'cnt'})\ntw_lan = pd.concat([df21_lan_tw_p,df21_lan_tw_r,df21_lan_tw_s,df21_lan_tw_c,df21_lan_tw_cc,df21_lan_tw_j,df21_lan_tw_js,df21_lan_tw_ju,df21_lan_tw_sw,df21_lan_tw_b,df21_lan_tw_ma,df21_lan_tw_n])\n\n\ndf21_lan_ko_p=df21_Ea['Q7_Part_1'][df21_Ea['Q3']=='South Korea'].value_counts().to_frame().rename(columns = {'Q7_Part_1':'cnt'})\ndf21_lan_ko_r=df21_Ea['Q7_Part_2'][df21_Ea['Q3']=='South Korea'].value_counts().to_frame().rename(columns = {'Q7_Part_2':'cnt'})\ndf21_lan_ko_s=df21_Ea['Q7_Part_3'][df21_Ea['Q3']=='South Korea'].value_counts().to_frame().rename(columns = {'Q7_Part_3':'cnt'})\ndf21_lan_ko_c=df21_Ea['Q7_Part_4'][df21_Ea['Q3']=='South Korea'].value_counts().to_frame().rename(columns = {'Q7_Part_4':'cnt'})\ndf21_lan_ko_cc=df21_Ea['Q7_Part_5'][df21_Ea['Q3']=='South Korea'].value_counts().to_frame().rename(columns = {'Q7_Part_5':'cnt'})\ndf21_lan_ko_j=df21_Ea['Q7_Part_6'][df21_Ea['Q3']=='South Korea'].value_counts().to_frame().rename(columns = {'Q7_Part_6':'cnt'})\ndf21_lan_ko_js=df21_Ea['Q7_Part_7'][df21_Ea['Q3']=='South Korea'].value_counts().to_frame().rename(columns = {'Q7_Part_7':'cnt'})\ndf21_lan_ko_ju=df21_Ea['Q7_Part_8'][df21_Ea['Q3']=='South Korea'].value_counts().to_frame().rename(columns = {'Q7_Part_8':'cnt'})\ndf21_lan_ko_sw=df21_Ea['Q7_Part_9'][df21_Ea['Q3']=='South Korea'].value_counts().to_frame().rename(columns = {'Q7_Part_9':'cnt'})\ndf21_lan_ko_b=df21_Ea['Q7_Part_10'][df21_Ea['Q3']=='South Korea'].value_counts().to_frame().rename(columns = {'Q7_Part_10':'cnt'})\ndf21_lan_ko_ma=df21_Ea['Q7_Part_11'][df21_Ea['Q3']=='South Korea'].value_counts().to_frame().rename(columns = {'Q7_Part_11':'cnt'})\ndf21_lan_ko_n=df21_Ea['Q7_Part_12'][df21_Ea['Q3']=='South Korea'].value_counts().to_frame().rename(columns = {'Q7_Part_12':'cnt'})\nko_lan = pd.concat([df21_lan_ko_p,df21_lan_ko_r,df21_lan_ko_s,df21_lan_ko_c,df21_lan_ko_cc,df21_lan_ko_j,df21_lan_ko_js,df21_lan_ko_ju,df21_lan_ko_sw,df21_lan_ko_b,df21_lan_ko_ma,df21_lan_ko_n])\n```\n\n\n```python\nch_lan['cnt'].to_list()\n```\n\n\n```python\nlanguages = ['Python','R','SQL','C','C++','Java','Javascript','Julia','Swift','Bash','MATLAB','None']\n\nfig = go.Figure(data=[\n    go.Bar(name='China', x = languages, \n                         y = ch_lan['cnt'].tolist()),\n    \n    go.Bar(name='Japan', x = languages, \n                             y=jp_lan['cnt'].tolist()),\n    \n    go.Bar(name='South Korea', x = languages, \n                            y=ko_lan['cnt'].tolist()),\n    \n    go.Bar(name='Taiwan', x = languages, \n                            y=tw_lan['cnt'].tolist())\n          ])\n\nfig.update_layout(title_text=\"<b>21년 EastAisa kaggler들이 사용하는 언어</b>\",title_font_size=35)\nfig.show()\n```\n![](/images/mykaggle4/31.png)\n<br>\n<br>\n<br>\n<br>\n","source":"_posts/mykaggle4.md","raw":"---\ntitle: Kaggle Competition(4)\ndate: 2021-11-17\ntags: kaggle, plotly\n\ncategories: \n- kaggle 필사\ntoc: true\n---\n### 그래프 목록\n- 학력\n- 직업\n- 경력\n- 연봉\n- 언어\n\n<br>\n<br>\n<br>\n\n### **라이브러리 불러오기 & 캐글 데이터 불러오기**\n---\n\n\n```python\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pylab as plt\n\nimport plotly.io as pio\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.figure_factory as ff\nfrom plotly.subplots import make_subplots\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\npio.templates.default = \"none\"\n# import plotly.offline as py\n# py.offline.init_notebook_mode()\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n```\n\n\n```python\ndf17= pd.read_csv(\"/kaggle/input/kaggle-survey-2017/multipleChoiceResponses.csv\", encoding=\"ISO-8859-1\")\ndf18= pd.read_csv(\"/kaggle/input/kaggle-survey-2018/multipleChoiceResponses.csv\", )\ndf19= pd.read_csv(\"/kaggle/input/kaggle-survey-2019/multiple_choice_responses.csv\", )\ndf20= pd.read_csv(\"/kaggle/input/kaggle-survey-2020/kaggle_survey_2020_responses.csv\", )\ndf21= pd.read_csv(\"/kaggle/input/kaggle-survey-2021/kaggle_survey_2021_responses.csv\", )\n```\n\n### **EastAsia 데이터 Grouping**\n---\n\n\n```python\n## East Asia에는 대한민국, 일본, 중국, 타이완, 몽골, 북조선 총 6개의 국가가 속해 있다. \n\nEastAsia17 = ['China',\"People 's Republic of China\", 'Taiwan', 'South Korea', 'Japan']\nEastAsia18 = ['China', 'South Korea', 'Japan', 'Republic of Korea'] \nEastAsia19 = ['China','Taiwan', 'South Korea', 'Japan', 'Republic of Korea']\nEastAsia20 = ['China','Taiwan', 'South Korea', 'Japan', 'Republic of Korea']\nEastAsia21 = ['China','Taiwan', 'South Korea', 'Japan']\nEastAsia = ['Republic of Korea','China','Taiwan', 'South Korea', 'Japan', \"People 's Republic of China\" ]\n\n#21년\ndf21_Ea = df21[df21['Q3'].isin(EastAsia)]\ndf21_Wo = df21[~df21['Q3'].isin(EastAsia )]\n\n##  동아시아 국가를 제외한 국가들을 region 열의 데이터 값을 World 로 바꿔줌\n# region 열 생성\ndf21['region']=[\"EastAsia\" if x in EastAsia \n                            else \"World\" for x in df21['Q3']]\n\n#20년\ndf20_Ea = df20[df20['Q3'].isin(EastAsia)]\ndf20_Wo = df20[~df20['Q3'].isin(EastAsia )]\ndf20['region']=[\"EastAsia\" if x in EastAsia \n                            else \"World\" for x in df20['Q3']]\n\n#19년\ndf19_Ea = df19[df19['Q3'].isin(EastAsia)]\ndf19_Wo = df19[~df19['Q3'].isin(EastAsia )]\ndf19['region']=[\"EastAsia\" if x in EastAsia\n                            else \"World\" for x in df19['Q3']]\n\n#18년\ndf18_Ea = df18[df18['Q3'].isin(EastAsia)]\ndf18_Wo = df18[~df18['Q3'].isin(EastAsia )]\ndf18['region']=[\"EastAsia\" if x in EastAsia \n                            else \"World\" for x in df18['Q3']]\n\n#17년\ndf17_Ea = df17[df17['Country'].isin(EastAsia)]\ndf17_Wo = df17[~df17['Country'].isin(EastAsia )]\ndf17['region']=[\"EastAsia\" if x in EastAsia \n                            else \"World\" for x in df17['Country']]\n```\n\n\n\n### **학력**\n---\n- Q4\n\n\n```python\ndf21_degree= df21['Q4'].value_counts().to_frame().reset_index()\ndf21_degree\n```\n![](/images/mykaggle4/1.PNG)\n<br>\n\n```python\n#마지막 행 삭제\ndf21_degree.drop(df21_degree.index[7])\n```\n![](/images/mykaggle4/2.PNG)\n<br>\n\n```python\ndf21_degree['Q4'].to_numpy()\n```\n![](/images/mykaggle4/3.PNG)\n<br>\n\n```python\ndf21_degree['index'].tolist()\n```\n\n![](/images/mykaggle4/4.PNG)\n<br>\n\n\n```python\ndegree = df21_degree['index'].tolist()\n\nfig = go.Figure(data=[\n    go.Bar(name='21년 World kaggler들의 학력', x=degree, y=df21_degree['Q4'].to_numpy() ,orientation='v')])\n\nfig.update_layout(title_text=\"<b>21년 World kaggler들의 학력</b>\",title_font_size=35)\n\nfig.show()\n```\n\n![](/images/mykaggle4/5.png)\n<br>\n\n\n\n```python\n#전체 코드\ndf21_degree= df21['Q4'].value_counts().to_frame().reset_index()\ndf21_degree\n\n#마지막 행 삭제\ndf21_degree.drop(df21_degree.index[7])\n\ndegree = df21_degree['index'].tolist()\n\nfig = go.Figure(data=[\n    go.Bar(name='21년 World kaggler들의 학력', x=degree, y=df21_degree['Q4'].to_numpy() ,orientation='v')])\n\nfig.update_layout(title_text=\"<b>21년 World kaggler들의 학력</b>\",title_font_size=35)\n\nfig.show()\n```\n![](/images/mykaggle4/5.png)\n<br>\n\n\n```python\ndf21_Ea['Q4'].value_counts().index\n```\n![](/images/mykaggle4/6.PNG)\n<br>\n\n\n```python\ndf21_ea_degree = df21_Ea['Q4'].value_counts().to_frame().reset_index()\ndf21_ea_degree['Q4'].to_numpy()\n```\n![](/images/mykaggle4/7.PNG)\n<br>\n\n\n```python\ndegree = df21_Ea['Q4'].value_counts().index\n\nfig = go.Figure(data=[\n    go.Bar(name='China', x = degree, \n                           y=df21_Ea['Q4'][df21_Ea['Q3'] =='China'].value_counts()),\n    go.Bar(name='Japan', x = degree, \n                             y=df21_Ea['Q4'][df21_Ea['Q3'] =='Japan'].value_counts()),\n    go.Bar(name='South Korea', x= degree, \n                            y=df21_Ea['Q4'][df21_Ea['Q3'] =='South Korea'].value_counts()),\n    go.Bar(name='Taiwan', x= degree, \n                            y=df21_Ea['Q4'][df21_Ea['Q3'] =='Taiwan'].value_counts())\n    ])\n\nfig.update_layout(title_text=\"<b>21년 EastAisa kaggler들의 학력</b>\",title_font_size=35)\nfig.show()\n```\n![](/images/mykaggle4/8.png)\n<br>\n\n\n```python\n#전체 코드\n\ndf21_ea_degree = df21_Ea['Q4'].value_counts().to_frame().reset_index()\n\ndegree = df21_Ea['Q4'].value_counts().index\n\nfig = go.Figure(data=[\n    go.Bar(name='China', x = degree, \n                           y=df21_Ea['Q4'][df21_Ea['Q3'] =='China'].value_counts()),\n    go.Bar(name='Japan', x = degree, \n                             y=df21_Ea['Q4'][df21_Ea['Q3'] =='Japan'].value_counts()),\n    go.Bar(name='South Korea', x= degree, \n                            y=df21_Ea['Q4'][df21_Ea['Q3'] =='South Korea'].value_counts()),\n    go.Bar(name='Taiwan', x= degree, \n                            y=df21_Ea['Q4'][df21_Ea['Q3'] =='Taiwan'].value_counts())\n    ])\n\nfig.update_layout(title_text=\"<b>21년 EastAisa kaggler들의 학력</b>\",title_font_size=35)\nfig.show()\n```\n\n### **직업**\n---\n- Q5\n\n\n```python\nData_Analyst =['Data Analyst','Data Miner,Information technology','Data Miner',\n               'Predictive Modeler','Information technology, networking, or system administration' ]\nData_Engineer =['A business discipline (accounting, economics, finance, etc.)', 'Business Analyst',\n                'Statistician', 'Mathematics or statistics', 'Data Scientist', 'Environmental science or geology', \n                'Humanities', 'Machine Learning Engineer', 'Medical or life sciences (biology, chemistry, medicine, etc.)', \n                'Physics or astronomy', 'Research Scientist', 'Researcher', 'Scientist/Researcher', 'Data Engineer',\n                'Social sciences (anthropology, psychology, sociology, etc.)','Software Developer/Software Engineer','Humanities (history, literature, philosophy, etc.)']\nDeveloper=['Developer Relations/Advocacy','Engineer','Engineering (non-computer focused)',\n           'Programmer','Software Engineer', 'Computer Scientist','Computer science (software engineering, etc.)', \n           'Fine arts or performing arts','Product Manager', \n           'Product/Project Manager','Program/Project Manager','DBA/Database Engineer']\nNot_Employeed =['Currently not employed', 'Not employed', 'Student']\nOthers = ['I never declared a major', 'Other']\n```\n\n\n```python\ndf21['Q5'].value_counts()\n```\n![](/images/mykaggle4/9.PNG)\n<br>\n\n\n```python\ndf21_Ea_DA=df21_Ea['Q3'][df21_Ea['Q5'].isin(Data_Analyst)].value_counts().to_frame().rename(columns = {'Q3':'Data_Analyst'})\ndf21_Ea_DE=df21_Ea['Q3'][df21_Ea['Q5'].isin(Data_Engineer)].value_counts().to_frame().rename(columns = {'Q3':'Data_Engineer'})\ndf21_Ea_D=df21_Ea['Q3'][df21_Ea['Q5'].isin(Developer)].value_counts().to_frame().rename(columns = {'Q3':'Developer'})\ndf21_Ea_NE=df21_Ea['Q3'][df21_Ea['Q5'].isin(Not_Employeed)].value_counts().to_frame().rename(columns = {'Q3':'Not_Employeed'})\ndf21_Ea_O=df21_Ea['Q3'][df21_Ea['Q5'].isin(Others)].value_counts().to_frame().rename(columns = {'Q3':'Others'})\n```\n\n\n```python\njob=(df21_Ea_DA.join(df21_Ea_DE).join(df21_Ea_D).join(df21_Ea_NE).join(df21_Ea_O))\njob\n```\n![](/images/mykaggle4/10.PNG)\n<br>\n\n\n```python\njob.iloc[1,0:5].to_numpy()\n```\n    array([ 46, 292, 254, 211, 118])\n<br>\n\n```python\njob_ =job.columns\nfig = go.Figure(data=[\n    go.Bar(name='China', x = job_, \n                           y=job.iloc[0,0:5].to_numpy()),\n    go.Bar(name='Japan', x = job_, \n                             y=job.iloc[1,0:5].to_numpy()),\n    go.Bar(name='South Korea', x= job_, \n                            y=job.iloc[2,0:5].to_numpy()),\n    go.Bar(name='Taiwan', x= job_, \n                            y=job.iloc[3,0:5].to_numpy())\n    ])\n\nfig.update_layout(title_text=\"<b>21년 EastAisa kaggler들의 직업</b>\",title_font_size=35)\nfig.show()\n```\n![](/images/mykaggle4/11.png)\n<br>\n\n\n```python\n#전체 코드\n\nData_Analyst =['Data Analyst','Data Miner,Information technology','Data Miner',\n               'Predictive Modeler','Information technology, networking, or system administration' ]\nData_Engineer =['A business discipline (accounting, economics, finance, etc.)', 'Business Analyst',\n                'Statistician', 'Mathematics or statistics', 'Data Scientist', 'Environmental science or geology', \n                'Humanities', 'Machine Learning Engineer', 'Medical or life sciences (biology, chemistry, medicine, etc.)', \n                'Physics or astronomy', 'Research Scientist', 'Researcher', 'Scientist/Researcher', 'Data Engineer',\n                'Social sciences (anthropology, psychology, sociology, etc.)','Software Developer/Software Engineer','Humanities (history, literature, philosophy, etc.)']\nDeveloper=['Developer Relations/Advocacy','Engineer','Engineering (non-computer focused)',\n           'Programmer','Software Engineer', 'Computer Scientist','Computer science (software engineering, etc.)', \n           'Fine arts or performing arts','Product Manager', \n           'Product/Project Manager','Program/Project Manager','DBA/Database Engineer']\nNot_Employeed =['Currently not employed', 'Not employed', 'Student']\nOthers = ['I never declared a major', 'Other']\n\ndf21_Ea_DA=df21_Ea['Q3'][df21_Ea['Q5'].isin(Data_Analyst)].value_counts().to_frame().rename(columns = {'Q3':'Data_Analyst'})\ndf21_Ea_DE=df21_Ea['Q3'][df21_Ea['Q5'].isin(Data_Engineer)].value_counts().to_frame().rename(columns = {'Q3':'Data_Engineer'})\ndf21_Ea_D=df21_Ea['Q3'][df21_Ea['Q5'].isin(Developer)].value_counts().to_frame().rename(columns = {'Q3':'Developer'})\ndf21_Ea_NE=df21_Ea['Q3'][df21_Ea['Q5'].isin(Not_Employeed)].value_counts().to_frame().rename(columns = {'Q3':'Not_Employeed'})\ndf21_Ea_O=df21_Ea['Q3'][df21_Ea['Q5'].isin(Others)].value_counts().to_frame().rename(columns = {'Q3':'Others'})\n\njob=(df21_Ea_DA.join(df21_Ea_DE).join(df21_Ea_D).join(df21_Ea_NE).join(df21_Ea_O))\n\njob_ =job.columns\nfig = go.Figure(data=[\n    go.Bar(name='China', x = job_, \n                           y=job.iloc[0,0:5].to_numpy()),\n    go.Bar(name='Japan', x = job_, \n                             y=job.iloc[1,0:5].to_numpy()),\n    go.Bar(name='South Korea', x= job_, \n                            y=job.iloc[2,0:5].to_numpy()),\n    go.Bar(name='Taiwan', x= job_, \n                            y=job.iloc[3,0:5].to_numpy())\n    ])\n\nfig.update_layout(title_text=\"<b>21년 EastAisa kaggler들의 직업</b>\",title_font_size=35)\nfig.show()\n```\n\n### **경력**\n---\n- Q6\n\n\n```python\ndf21['Q6'].value_counts()\n```\n![](/images/mykaggle4/12.PNG)\n<br>\n\n\n\n```python\n_3year = ['I have never written code', '< 1 years', '1-3 years']\n_5year = ['3-5 years ','5-10 years']\n_10year = ['10-20 years','20+ years']\n\ndf21_3year = df21['Q6'][df21['Q6'].isin(_3year)]\ndf21_5year = df21['Q6'][df21['Q6'].isin(_5year)]\ndf21_10year = df21['Q6'][df21['Q6'].isin(_10year)]\n\ndf21_3year.count()\ndf21_5year.count()\ndf21_10year.count()\n```\n\n\n```python\ndf21_3year\n```\n![](/images/mykaggle4/13.PNG)\n<br>\n\n\n```python\nyears =['_3year','_5year', '_10year']\nvalues =[df21_3year.count(),\n         df21_5year.count(),\n        df21_10year.count()]\n\nfig = go.Figure(data=[\n    go.Bar(name='21년 World kaggler들의 경력', x=years, y=values ,orientation='v'),])\n\nfig.update_layout(title_text=\"<b>21년 World kaggler들의 경력</b>\",title_font_size=35)\n\nfig.show()\n```\n![](/images/mykaggle4/14.png)\n<br>\n\n\n```python\n#전체 코드\n_3year = ['I have never written code', '< 1 years', '1-3 years']\n_5year = ['3-5 years ','5-10 years']\n_10year = ['10-20 years','20+ years']\n\ndf21_3year = df21['Q6'][df21['Q6'].isin(_3year)]\ndf21_5year = df21['Q6'][df21['Q6'].isin(_5year)]\ndf21_10year = df21['Q6'][df21['Q6'].isin(_10year)]\n\ndf21_3year.count()\ndf21_5year.count()\ndf21_10year.count()\n\nyears =['_3year','_5year', '_10year']\nvalues =[df21_3year.count(),\n         df21_5year.count(),\n        df21_10year.count()]\n\nfig = go.Figure(data=[\n    go.Bar(name='21년 World kaggler들의 경력', x=years, y=values ,orientation='v'),])\n\nfig.update_layout(title_text=\"<b>21년 World kaggler들의 경력</b>\",title_font_size=35)\n\nfig.show()\n```\n\n\n```python\ndf21_Ea['Q3']\n```\n![](/images/mykaggle4/15.PNG)\n<br>\n\n\n```python\n_3year = ['I have never written code', '< 1 years', '1-3 years']\n_5year = ['3-5 years ','5-10 years']\n_10year = ['10-20 years','20+ years']\n\ndf21_Ea_3year = df21_Ea['Q3'][df21_Ea['Q6'].isin(_3year)].value_counts().to_frame().rename(columns = {'Q3':'3year'})\ndf21_Ea_5year = df21_Ea['Q3'][df21_Ea['Q6'].isin(_5year)].value_counts().to_frame().rename(columns = {'Q3':'5year'})\ndf21_Ea_10year = df21_Ea['Q3'][df21_Ea['Q6'].isin(_10year)].value_counts().to_frame().rename(columns = {'Q3':'10year'})\n\n\n```\n\n\n```python\ndf21_Ea_3year\n```\n![](/images/mykaggle4/16.PNG)\n<br>\n\n\n```python\ndf21_Ea_5year\n```\n![](/images/mykaggle4/17.PNG)\n<br>\n\n\n\n```python\ndf21_Ea_10year\n```\n![](/images/mykaggle4/18.PNG)\n<br>\n\n\n\n```python\ncareer=(df21_Ea_3year.join(df21_Ea_5year).join(df21_Ea_10year))\ncareer\n```\n![](/images/mykaggle4/19.PNG)\n<br>\n\n\n```python\ncareer.iloc[0,0:3] #China\ncareer.iloc[1,0:3] #Japan\ncareer.iloc[2,0:3] #South Korea\ncareer.iloc[3,0:3] #Taiwan\n```\n![](/images/mykaggle4/20.PNG)\n<br>\n\n\n```python\nfig = go.Figure(data=[\n    go.Bar(name='China', x = years, \n                           y=career.iloc[0,0:3]),\n    go.Bar(name='Japan', x = years, \n                             y=career.iloc[1,0:3]),\n    go.Bar(name='South Korea', x= years, \n                            y=career.iloc[2,0:3]),\n    go.Bar(name='Taiwan', x= years, \n                            y=career.iloc[3,0:3])\n    ])\n\nfig.update_layout(title_text=\"<b>21년 EastAisa kaggler들의 경력</b>\",title_font_size=35)\nfig.show()\n```\n![](/images/mykaggle4/21.png)\n<br>\n\n\n```python\n#최종 합친 코드\n_3year = ['I have never written code', '< 1 years', '1-3 years']\n_5year = ['3-5 years ','5-10 years']\n_10year = ['10-20 years','20+ years']\n\ndf21_Ea_3year = df21_Ea['Q3'][df21_Ea['Q6'].isin(_3year)].value_counts().to_frame().rename(columns = {'Q3':'3year'})\ndf21_Ea_5year = df21_Ea['Q3'][df21_Ea['Q6'].isin(_5year)].value_counts().to_frame().rename(columns = {'Q3':'5year'})\ndf21_Ea_10year = df21_Ea['Q3'][df21_Ea['Q6'].isin(_10year)].value_counts().to_frame().rename(columns = {'Q3':'10year'})\n\ncareer=(df21_Ea_3year.join(df21_Ea_5year).join(df21_Ea_10year))\ncareer\n\ncareer.iloc[0,0:3] #China\ncareer.iloc[1,0:3] #Japan\ncareer.iloc[2,0:3] #South Korea\ncareer.iloc[3,0:3] #Taiwan\n\nfig = go.Figure(data=[\n    go.Bar(name='China', x = years, \n                           y=career.iloc[0,0:3]),\n    go.Bar(name='Japan', x = years, \n                             y=career.iloc[1,0:3]),\n    go.Bar(name='South Korea', x= years, \n                            y=career.iloc[2,0:3]),\n    go.Bar(name='Taiwan', x= years, \n                            y=career.iloc[3,0:3])\n    ])\n\nfig.update_layout(title_text=\"<b>21년 EastAisa kaggler들의 경력</b>\",title_font_size=35)\nfig.show()\n```\n\n### **연봉**\n---\n- Q25\n\n\n```python\n#마지막 행 삭제해줌\ndf21_=(df21['Q25'].value_counts().to_frame())\ndf21_=df21_.drop(df21_.index[26])\ndf21_\n```\n![](/images/mykaggle4/22.PNG)\n<br>\n\n\n```python\ndf21_['Q25'].index\n```\n![](/images/mykaggle4/23.PNG)\n<br>\n\n\n\n```python\ndf21_['Q25'].to_numpy()\n```\n![](/images/mykaggle4/24.PNG)\n<br>\n\n\n\n```python\ncompensation = df21_['Q25'].index\nfig = go.Figure(data=[\n    go.Bar(name='21년 World kaggler들의 연봉', x=compensation, y=df21_['Q25'].to_numpy() ,orientation='v')])\n\nfig.update_layout(title_text=\"<b>21년 World kaggler들의 연봉</b>\",title_font_size=35)\n\nfig.show()\n```\n\n![](/images/mykaggle4/25.png)\n<br>\n\n\n```python\n#전체 코드\n\n#마지막 행 삭제해줌\ndf21_=(df21['Q25'].value_counts().to_frame())\ndf21_=df21_.drop(df21_.index[26])\ndf21_\n\ncompensation = df21_['Q25'].index\nfig = go.Figure(data=[\n    go.Bar(name='21년 World kaggler들의 연봉', x=compensation, y=df21_['Q25'].to_numpy() ,orientation='v')])\n\nfig.update_layout(title_text=\"<b>21년 World kaggler들의 연봉</b>\",title_font_size=35)\n\nfig.show()\n```\n\n\n```python\n#일본 연봉\ndf21_Ea['Q25'][df21_Ea['Q3'] =='Japan'].value_counts()\n```\n![](/images/mykaggle4/26.PNG)\n<br>\n\n\n```python\ndf21_Ea['Q3'].value_counts()\n```\n![](/images/mykaggle4/27.PNG)\n<br>\n\n\n```python\ndf21_Ea['Q25'][df21_Ea['Q3'] =='Taiwan'].value_counts()\n```\n![](/images/mykaggle4/28.PNG)\n<br>\n\n\n```python\ncompensation = df21_['Q25'].index\n\nfig = go.Figure(data=[\n    go.Bar(name='China', x = compensation, \n                           y = df21_Ea['Q25'][df21_Ea['Q3'] =='Japan'].value_counts()),\n    \n    go.Bar(name='Japan', x = compensation, \n                             y=df21_Ea['Q25'][df21_Ea['Q3'] =='Taiwan'].value_counts()),\n    \n    go.Bar(name='South Korea', x = compensation, \n                            y=df21_Ea['Q25'][df21_Ea['Q3'] =='South Korea'].value_counts()),\n    \n    go.Bar(name='Taiwan', x = compensation, \n                            y=df21_Ea['Q25'][df21_Ea['Q3'] =='China'].value_counts())\n    ])\n\nfig.update_layout(title_text=\"<b>21년 EastAisa kaggler들의 연봉</b>\",title_font_size=35)\nfig.show()\n```\n![](/images/mykaggle4/29.png)\n<br>\n\n\n\n```python\n#전체 코드\n\ncompensation = df21_['Q25'].index\n\nfig = go.Figure(data=[\n    go.Bar(name='China', x = compensation, \n                           y = df21_Ea['Q25'][df21_Ea['Q3'] =='Japan'].value_counts()),\n    \n    go.Bar(name='Japan', x = compensation, \n                             y=df21_Ea['Q25'][df21_Ea['Q3'] =='Taiwan'].value_counts()),\n    \n    go.Bar(name='South Korea', x = compensation, \n                            y=df21_Ea['Q25'][df21_Ea['Q3'] =='South Korea'].value_counts()),\n    \n    go.Bar(name='Taiwan', x = compensation, \n                            y=df21_Ea['Q25'][df21_Ea['Q3'] =='China'].value_counts())\n    ])\n\nfig.update_layout(title_text=\"<b>21년 EastAisa kaggler들의 연봉</b>\",title_font_size=35)\nfig.show()\n```\n\n### **언어**\n---\n- Q7\n\n\n```python\ndf21_p = df21['Q7_Part_1'].value_counts().to_frame() #python\ndf21_r = df21['Q7_Part_2'].value_counts().to_frame() #r\ndf21_s = df21['Q7_Part_3'].value_counts().to_frame() #sql\ndf21_c = df21['Q7_Part_4'].value_counts().to_frame() #c\ndf21_cc = df21['Q7_Part_5'].value_counts().to_frame() #c++\ndf21_j = df21['Q7_Part_6'].value_counts().to_frame() #java\ndf21_js = df21['Q7_Part_7'].value_counts().to_frame() #javascript\ndf21_ju = df21['Q7_Part_8'].value_counts().to_frame() #julia\ndf21_sw = df21['Q7_Part_9'].value_counts().to_frame() #swift\ndf21_b = df21['Q7_Part_10'].value_counts().to_frame() #bash\ndf21_ma = df21['Q7_Part_11'].value_counts().to_frame() #matlab\ndf21_n = df21['Q7_Part_12'].value_counts().to_frame() #none\n```\n\n\n```python\ndf21_p.iloc[0,0]\n```\n\n\n```python\nlanguages = ['Python','R','SQL','C','C++','Java','Javascript','Julia','Swift','Bash','MATLAB','None']\n\nfig = go.Figure(data=[\n    go.Bar(name='21년 World kaggler들이 사용하는 언어', x = languages, \n                                                     y = [df21_p.iloc[0,0],\n                                                          df21_r.iloc[0,0],\n                                                          df21_s.iloc[0,0],\n                                                          df21_c.iloc[0,0],\n                                                          df21_cc.iloc[0,0],\n                                                          df21_j.iloc[0,0],\n                                                          df21_js.iloc[0,0],\n                                                          df21_ju.iloc[0,0],\n                                                          df21_sw.iloc[0,0],\n                                                          df21_b.iloc[0,0],\n                                                          df21_ma.iloc[0,0],\n                                                          df21_n.iloc[0,0]],orientation='v')\n                    \n                    ])\n\nfig.update_layout(title_text=\"<b>21년 World kaggler들이 사용하는 언어</b>\",title_font_size=35)\n\nfig.show()\n```\n![](/images/mykaggle4/30.png)\n<br>\n\n\n```python\n#코드 전체\n\ndf21_p = df21['Q7_Part_1'].value_counts().to_frame() #python\ndf21_r = df21['Q7_Part_2'].value_counts().to_frame() #r\ndf21_s = df21['Q7_Part_3'].value_counts().to_frame() #sql\ndf21_c = df21['Q7_Part_4'].value_counts().to_frame() #c\ndf21_cc = df21['Q7_Part_5'].value_counts().to_frame() #c++\ndf21_j = df21['Q7_Part_6'].value_counts().to_frame() #java\ndf21_js = df21['Q7_Part_7'].value_counts().to_frame() #javascript\ndf21_ju = df21['Q7_Part_8'].value_counts().to_frame() #julia\ndf21_sw = df21['Q7_Part_9'].value_counts().to_frame() #swift\ndf21_b = df21['Q7_Part_10'].value_counts().to_frame() #bash\ndf21_ma = df21['Q7_Part_11'].value_counts().to_frame() #matlab\ndf21_n = df21['Q7_Part_12'].value_counts().to_frame() #none\n\nlanguages = ['Python','R','SQL','C','C++','Java','Javascript','Julia','Swift','Bash','MATLAB','None']\n\nfig = go.Figure(data=[\n    go.Bar(name='21년 World kaggler들이 사용하는 언어', x = languages, \n                                                     y = [df21_p.iloc[0,0],\n                                                          df21_r.iloc[0,0],\n                                                          df21_s.iloc[0,0],\n                                                          df21_c.iloc[0,0],\n                                                          df21_cc.iloc[0,0],\n                                                          df21_j.iloc[0,0],\n                                                          df21_js.iloc[0,0],\n                                                          df21_ju.iloc[0,0],\n                                                          df21_sw.iloc[0,0],\n                                                          df21_b.iloc[0,0],\n                                                          df21_ma.iloc[0,0],\n                                                          df21_n.iloc[0,0]],orientation='v')\n                    \n                    ])\n\nfig.update_layout(title_text=\"<b>21년 World kaggler들이 사용하는 언어</b>\",title_font_size=35)\n\nfig.show()\n```\n\n\n```python\ndf21_lan_ch_p=df21_Ea['Q7_Part_1'][df21_Ea['Q3']=='China'].value_counts().to_frame().rename(columns = {'Q7_Part_1':'cnt'})\ndf21_lan_ch_r=df21_Ea['Q7_Part_2'][df21_Ea['Q3']=='China'].value_counts().to_frame().rename(columns = {'Q7_Part_2':'cnt'})\ndf21_lan_ch_s=df21_Ea['Q7_Part_3'][df21_Ea['Q3']=='China'].value_counts().to_frame().rename(columns = {'Q7_Part_3':'cnt'})\ndf21_lan_ch_c=df21_Ea['Q7_Part_4'][df21_Ea['Q3']=='China'].value_counts().to_frame().rename(columns = {'Q7_Part_4':'cnt'})\ndf21_lan_ch_cc=df21_Ea['Q7_Part_5'][df21_Ea['Q3']=='China'].value_counts().to_frame().rename(columns = {'Q7_Part_5':'cnt'})\ndf21_lan_ch_j=df21_Ea['Q7_Part_6'][df21_Ea['Q3']=='China'].value_counts().to_frame().rename(columns = {'Q7_Part_6':'cnt'})\ndf21_lan_ch_js=df21_Ea['Q7_Part_7'][df21_Ea['Q3']=='China'].value_counts().to_frame().rename(columns = {'Q7_Part_7':'cnt'})\ndf21_lan_ch_ju=df21_Ea['Q7_Part_8'][df21_Ea['Q3']=='China'].value_counts().to_frame().rename(columns = {'Q7_Part_8':'cnt'})\ndf21_lan_ch_sw=df21_Ea['Q7_Part_9'][df21_Ea['Q3']=='China'].value_counts().to_frame().rename(columns = {'Q7_Part_9':'cnt'})\ndf21_lan_ch_b=df21_Ea['Q7_Part_10'][df21_Ea['Q3']=='China'].value_counts().to_frame().rename(columns = {'Q7_Part_10':'cnt'})\ndf21_lan_ch_ma=df21_Ea['Q7_Part_11'][df21_Ea['Q3']=='China'].value_counts().to_frame().rename(columns = {'Q7_Part_11':'cnt'})\ndf21_lan_ch_n=df21_Ea['Q7_Part_12'][df21_Ea['Q3']=='China'].value_counts().to_frame().rename(columns = {'Q7_Part_12':'cnt'})\nch_lan = pd.concat([df21_lan_ch_p,df21_lan_ch_r,df21_lan_ch_s,df21_lan_ch_c,df21_lan_ch_cc,df21_lan_ch_j,df21_lan_ch_js,df21_lan_ch_ju,df21_lan_ch_sw,df21_lan_ch_b,df21_lan_ch_ma,df21_lan_ch_n])\n\n\ndf21_lan_jp_p=df21_Ea['Q7_Part_1'][df21_Ea['Q3']=='Japan'].value_counts().to_frame().rename(columns = {'Q7_Part_1':'cnt'})\ndf21_lan_jp_r=df21_Ea['Q7_Part_2'][df21_Ea['Q3']=='Japan'].value_counts().to_frame().rename(columns = {'Q7_Part_2':'cnt'})\ndf21_lan_jp_s=df21_Ea['Q7_Part_3'][df21_Ea['Q3']=='Japan'].value_counts().to_frame().rename(columns = {'Q7_Part_3':'cnt'})\ndf21_lan_jp_c=df21_Ea['Q7_Part_4'][df21_Ea['Q3']=='Japan'].value_counts().to_frame().rename(columns = {'Q7_Part_4':'cnt'})\ndf21_lan_jp_cc=df21_Ea['Q7_Part_5'][df21_Ea['Q3']=='Japan'].value_counts().to_frame().rename(columns = {'Q7_Part_5':'cnt'})\ndf21_lan_jp_j=df21_Ea['Q7_Part_6'][df21_Ea['Q3']=='Japan'].value_counts().to_frame().rename(columns = {'Q7_Part_6':'cnt'})\ndf21_lan_jp_js=df21_Ea['Q7_Part_7'][df21_Ea['Q3']=='Japan'].value_counts().to_frame().rename(columns = {'Q7_Part_7':'cnt'})\ndf21_lan_jp_ju=df21_Ea['Q7_Part_8'][df21_Ea['Q3']=='Japan'].value_counts().to_frame().rename(columns = {'Q7_Part_8':'cnt'})\ndf21_lan_jp_sw=df21_Ea['Q7_Part_9'][df21_Ea['Q3']=='Japan'].value_counts().to_frame().rename(columns = {'Q7_Part_9':'cnt'})\ndf21_lan_jp_b=df21_Ea['Q7_Part_10'][df21_Ea['Q3']=='Japan'].value_counts().to_frame().rename(columns = {'Q7_Part_10':'cnt'})\ndf21_lan_jp_ma=df21_Ea['Q7_Part_11'][df21_Ea['Q3']=='Japan'].value_counts().to_frame().rename(columns = {'Q7_Part_11':'cnt'})\ndf21_lan_jp_n=df21_Ea['Q7_Part_12'][df21_Ea['Q3']=='Japan'].value_counts().to_frame().rename(columns = {'Q7_Part_12':'cnt'})\njp_lan = pd.concat([df21_lan_jp_p,df21_lan_jp_r,df21_lan_jp_s,df21_lan_jp_c,df21_lan_jp_cc,df21_lan_jp_j,df21_lan_jp_js,df21_lan_jp_ju,df21_lan_jp_sw,df21_lan_jp_b,df21_lan_jp_ma,df21_lan_jp_n])\n\n\ndf21_lan_tw_p=df21_Ea['Q7_Part_1'][df21_Ea['Q3']=='Taiwan'].value_counts().to_frame().rename(columns = {'Q7_Part_1':'cnt'})\ndf21_lan_tw_r=df21_Ea['Q7_Part_2'][df21_Ea['Q3']=='Taiwan'].value_counts().to_frame().rename(columns = {'Q7_Part_2':'cnt'})\ndf21_lan_tw_s=df21_Ea['Q7_Part_3'][df21_Ea['Q3']=='Taiwan'].value_counts().to_frame().rename(columns = {'Q7_Part_3':'cnt'})\ndf21_lan_tw_c=df21_Ea['Q7_Part_4'][df21_Ea['Q3']=='Taiwan'].value_counts().to_frame().rename(columns = {'Q7_Part_4':'cnt'})\ndf21_lan_tw_cc=df21_Ea['Q7_Part_5'][df21_Ea['Q3']=='Taiwan'].value_counts().to_frame().rename(columns = {'Q7_Part_5':'cnt'})\ndf21_lan_tw_j=df21_Ea['Q7_Part_6'][df21_Ea['Q3']=='Taiwan'].value_counts().to_frame().rename(columns = {'Q7_Part_6':'cnt'})\ndf21_lan_tw_js=df21_Ea['Q7_Part_7'][df21_Ea['Q3']=='Taiwan'].value_counts().to_frame().rename(columns = {'Q7_Part_7':'cnt'})\ndf21_lan_tw_ju=df21_Ea['Q7_Part_8'][df21_Ea['Q3']=='Taiwan'].value_counts().to_frame().rename(columns = {'Q7_Part_8':'cnt'})\ndf21_lan_tw_sw=df21_Ea['Q7_Part_9'][df21_Ea['Q3']=='Taiwan'].value_counts().to_frame().rename(columns = {'Q7_Part_9':'cnt'})\ndf21_lan_tw_b=df21_Ea['Q7_Part_10'][df21_Ea['Q3']=='Taiwan'].value_counts().to_frame().rename(columns = {'Q7_Part_10':'cnt'})\ndf21_lan_tw_ma=df21_Ea['Q7_Part_11'][df21_Ea['Q3']=='Taiwan'].value_counts().to_frame().rename(columns = {'Q7_Part_11':'cnt'})\ndf21_lan_tw_n=df21_Ea['Q7_Part_12'][df21_Ea['Q3']=='Taiwan'].value_counts().to_frame().rename(columns = {'Q7_Part_12':'cnt'})\ntw_lan = pd.concat([df21_lan_tw_p,df21_lan_tw_r,df21_lan_tw_s,df21_lan_tw_c,df21_lan_tw_cc,df21_lan_tw_j,df21_lan_tw_js,df21_lan_tw_ju,df21_lan_tw_sw,df21_lan_tw_b,df21_lan_tw_ma,df21_lan_tw_n])\n\n\ndf21_lan_ko_p=df21_Ea['Q7_Part_1'][df21_Ea['Q3']=='South Korea'].value_counts().to_frame().rename(columns = {'Q7_Part_1':'cnt'})\ndf21_lan_ko_r=df21_Ea['Q7_Part_2'][df21_Ea['Q3']=='South Korea'].value_counts().to_frame().rename(columns = {'Q7_Part_2':'cnt'})\ndf21_lan_ko_s=df21_Ea['Q7_Part_3'][df21_Ea['Q3']=='South Korea'].value_counts().to_frame().rename(columns = {'Q7_Part_3':'cnt'})\ndf21_lan_ko_c=df21_Ea['Q7_Part_4'][df21_Ea['Q3']=='South Korea'].value_counts().to_frame().rename(columns = {'Q7_Part_4':'cnt'})\ndf21_lan_ko_cc=df21_Ea['Q7_Part_5'][df21_Ea['Q3']=='South Korea'].value_counts().to_frame().rename(columns = {'Q7_Part_5':'cnt'})\ndf21_lan_ko_j=df21_Ea['Q7_Part_6'][df21_Ea['Q3']=='South Korea'].value_counts().to_frame().rename(columns = {'Q7_Part_6':'cnt'})\ndf21_lan_ko_js=df21_Ea['Q7_Part_7'][df21_Ea['Q3']=='South Korea'].value_counts().to_frame().rename(columns = {'Q7_Part_7':'cnt'})\ndf21_lan_ko_ju=df21_Ea['Q7_Part_8'][df21_Ea['Q3']=='South Korea'].value_counts().to_frame().rename(columns = {'Q7_Part_8':'cnt'})\ndf21_lan_ko_sw=df21_Ea['Q7_Part_9'][df21_Ea['Q3']=='South Korea'].value_counts().to_frame().rename(columns = {'Q7_Part_9':'cnt'})\ndf21_lan_ko_b=df21_Ea['Q7_Part_10'][df21_Ea['Q3']=='South Korea'].value_counts().to_frame().rename(columns = {'Q7_Part_10':'cnt'})\ndf21_lan_ko_ma=df21_Ea['Q7_Part_11'][df21_Ea['Q3']=='South Korea'].value_counts().to_frame().rename(columns = {'Q7_Part_11':'cnt'})\ndf21_lan_ko_n=df21_Ea['Q7_Part_12'][df21_Ea['Q3']=='South Korea'].value_counts().to_frame().rename(columns = {'Q7_Part_12':'cnt'})\nko_lan = pd.concat([df21_lan_ko_p,df21_lan_ko_r,df21_lan_ko_s,df21_lan_ko_c,df21_lan_ko_cc,df21_lan_ko_j,df21_lan_ko_js,df21_lan_ko_ju,df21_lan_ko_sw,df21_lan_ko_b,df21_lan_ko_ma,df21_lan_ko_n])\n```\n\n\n```python\nch_lan['cnt'].to_list()\n```\n\n\n```python\nlanguages = ['Python','R','SQL','C','C++','Java','Javascript','Julia','Swift','Bash','MATLAB','None']\n\nfig = go.Figure(data=[\n    go.Bar(name='China', x = languages, \n                         y = ch_lan['cnt'].tolist()),\n    \n    go.Bar(name='Japan', x = languages, \n                             y=jp_lan['cnt'].tolist()),\n    \n    go.Bar(name='South Korea', x = languages, \n                            y=ko_lan['cnt'].tolist()),\n    \n    go.Bar(name='Taiwan', x = languages, \n                            y=tw_lan['cnt'].tolist())\n          ])\n\nfig.update_layout(title_text=\"<b>21년 EastAisa kaggler들이 사용하는 언어</b>\",title_font_size=35)\nfig.show()\n```\n![](/images/mykaggle4/31.png)\n<br>\n<br>\n<br>\n<br>\n","slug":"mykaggle4","published":1,"updated":"2022-01-03T12:20:08.049Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cky2hohf4004x5nrj1709bqcu","content":"<h3 id=\"그래프-목록\"><a href=\"#그래프-목록\" class=\"headerlink\" title=\"그래프 목록\"></a>그래프 목록</h3><ul>\n<li>학력</li>\n<li>직업</li>\n<li>경력</li>\n<li>연봉</li>\n<li>언어</li>\n</ul>\n<br>\n<br>\n<br>\n\n<h3 id=\"라이브러리-불러오기-amp-캐글-데이터-불러오기\"><a href=\"#라이브러리-불러오기-amp-캐글-데이터-불러오기\" class=\"headerlink\" title=\"라이브러리 불러오기 &amp; 캐글 데이터 불러오기\"></a><strong>라이브러리 불러오기 &amp; 캐글 데이터 불러오기</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">import</span> seaborn <span class=\"keyword\">as</span> sns</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pylab <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> plotly.io <span class=\"keyword\">as</span> pio</span><br><span class=\"line\"><span class=\"keyword\">import</span> plotly.express <span class=\"keyword\">as</span> px</span><br><span class=\"line\"><span class=\"keyword\">import</span> plotly.graph_objects <span class=\"keyword\">as</span> go</span><br><span class=\"line\"><span class=\"keyword\">import</span> plotly.figure_factory <span class=\"keyword\">as</span> ff</span><br><span class=\"line\"><span class=\"keyword\">from</span> plotly.subplots <span class=\"keyword\">import</span> make_subplots</span><br><span class=\"line\"><span class=\"keyword\">from</span> plotly.offline <span class=\"keyword\">import</span> init_notebook_mode, iplot</span><br><span class=\"line\">init_notebook_mode(connected=<span class=\"literal\">True</span>)</span><br><span class=\"line\">pio.templates.default = <span class=\"string\">&quot;none&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># import plotly.offline as py</span></span><br><span class=\"line\"><span class=\"comment\"># py.offline.init_notebook_mode()</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">for</span> dirname, _, filenames <span class=\"keyword\">in</span> os.walk(<span class=\"string\">&#x27;/kaggle/input&#x27;</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> filename <span class=\"keyword\">in</span> filenames:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(os.path.join(dirname, filename))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> warnings</span><br><span class=\"line\">warnings.filterwarnings(<span class=\"string\">&quot;ignore&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df17= pd.read_csv(<span class=\"string\">&quot;/kaggle/input/kaggle-survey-2017/multipleChoiceResponses.csv&quot;</span>, encoding=<span class=\"string\">&quot;ISO-8859-1&quot;</span>)</span><br><span class=\"line\">df18= pd.read_csv(<span class=\"string\">&quot;/kaggle/input/kaggle-survey-2018/multipleChoiceResponses.csv&quot;</span>, )</span><br><span class=\"line\">df19= pd.read_csv(<span class=\"string\">&quot;/kaggle/input/kaggle-survey-2019/multiple_choice_responses.csv&quot;</span>, )</span><br><span class=\"line\">df20= pd.read_csv(<span class=\"string\">&quot;/kaggle/input/kaggle-survey-2020/kaggle_survey_2020_responses.csv&quot;</span>, )</span><br><span class=\"line\">df21= pd.read_csv(<span class=\"string\">&quot;/kaggle/input/kaggle-survey-2021/kaggle_survey_2021_responses.csv&quot;</span>, )</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"EastAsia-데이터-Grouping\"><a href=\"#EastAsia-데이터-Grouping\" class=\"headerlink\" title=\"EastAsia 데이터 Grouping\"></a><strong>EastAsia 데이터 Grouping</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## East Asia에는 대한민국, 일본, 중국, 타이완, 몽골, 북조선 총 6개의 국가가 속해 있다. </span></span><br><span class=\"line\"></span><br><span class=\"line\">EastAsia17 = [<span class=\"string\">&#x27;China&#x27;</span>,<span class=\"string\">&quot;People &#x27;s Republic of China&quot;</span>, <span class=\"string\">&#x27;Taiwan&#x27;</span>, <span class=\"string\">&#x27;South Korea&#x27;</span>, <span class=\"string\">&#x27;Japan&#x27;</span>]</span><br><span class=\"line\">EastAsia18 = [<span class=\"string\">&#x27;China&#x27;</span>, <span class=\"string\">&#x27;South Korea&#x27;</span>, <span class=\"string\">&#x27;Japan&#x27;</span>, <span class=\"string\">&#x27;Republic of Korea&#x27;</span>] </span><br><span class=\"line\">EastAsia19 = [<span class=\"string\">&#x27;China&#x27;</span>,<span class=\"string\">&#x27;Taiwan&#x27;</span>, <span class=\"string\">&#x27;South Korea&#x27;</span>, <span class=\"string\">&#x27;Japan&#x27;</span>, <span class=\"string\">&#x27;Republic of Korea&#x27;</span>]</span><br><span class=\"line\">EastAsia20 = [<span class=\"string\">&#x27;China&#x27;</span>,<span class=\"string\">&#x27;Taiwan&#x27;</span>, <span class=\"string\">&#x27;South Korea&#x27;</span>, <span class=\"string\">&#x27;Japan&#x27;</span>, <span class=\"string\">&#x27;Republic of Korea&#x27;</span>]</span><br><span class=\"line\">EastAsia21 = [<span class=\"string\">&#x27;China&#x27;</span>,<span class=\"string\">&#x27;Taiwan&#x27;</span>, <span class=\"string\">&#x27;South Korea&#x27;</span>, <span class=\"string\">&#x27;Japan&#x27;</span>]</span><br><span class=\"line\">EastAsia = [<span class=\"string\">&#x27;Republic of Korea&#x27;</span>,<span class=\"string\">&#x27;China&#x27;</span>,<span class=\"string\">&#x27;Taiwan&#x27;</span>, <span class=\"string\">&#x27;South Korea&#x27;</span>, <span class=\"string\">&#x27;Japan&#x27;</span>, <span class=\"string\">&quot;People &#x27;s Republic of China&quot;</span> ]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#21년</span></span><br><span class=\"line\">df21_Ea = df21[df21[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(EastAsia)]</span><br><span class=\"line\">df21_Wo = df21[~df21[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(EastAsia )]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##  동아시아 국가를 제외한 국가들을 region 열의 데이터 값을 World 로 바꿔줌</span></span><br><span class=\"line\"><span class=\"comment\"># region 열 생성</span></span><br><span class=\"line\">df21[<span class=\"string\">&#x27;region&#x27;</span>]=[<span class=\"string\">&quot;EastAsia&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> EastAsia </span><br><span class=\"line\">                            <span class=\"keyword\">else</span> <span class=\"string\">&quot;World&quot;</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> df21[<span class=\"string\">&#x27;Q3&#x27;</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#20년</span></span><br><span class=\"line\">df20_Ea = df20[df20[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(EastAsia)]</span><br><span class=\"line\">df20_Wo = df20[~df20[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(EastAsia )]</span><br><span class=\"line\">df20[<span class=\"string\">&#x27;region&#x27;</span>]=[<span class=\"string\">&quot;EastAsia&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> EastAsia </span><br><span class=\"line\">                            <span class=\"keyword\">else</span> <span class=\"string\">&quot;World&quot;</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> df20[<span class=\"string\">&#x27;Q3&#x27;</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#19년</span></span><br><span class=\"line\">df19_Ea = df19[df19[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(EastAsia)]</span><br><span class=\"line\">df19_Wo = df19[~df19[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(EastAsia )]</span><br><span class=\"line\">df19[<span class=\"string\">&#x27;region&#x27;</span>]=[<span class=\"string\">&quot;EastAsia&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> EastAsia</span><br><span class=\"line\">                            <span class=\"keyword\">else</span> <span class=\"string\">&quot;World&quot;</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> df19[<span class=\"string\">&#x27;Q3&#x27;</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#18년</span></span><br><span class=\"line\">df18_Ea = df18[df18[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(EastAsia)]</span><br><span class=\"line\">df18_Wo = df18[~df18[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(EastAsia )]</span><br><span class=\"line\">df18[<span class=\"string\">&#x27;region&#x27;</span>]=[<span class=\"string\">&quot;EastAsia&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> EastAsia </span><br><span class=\"line\">                            <span class=\"keyword\">else</span> <span class=\"string\">&quot;World&quot;</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> df18[<span class=\"string\">&#x27;Q3&#x27;</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#17년</span></span><br><span class=\"line\">df17_Ea = df17[df17[<span class=\"string\">&#x27;Country&#x27;</span>].isin(EastAsia)]</span><br><span class=\"line\">df17_Wo = df17[~df17[<span class=\"string\">&#x27;Country&#x27;</span>].isin(EastAsia )]</span><br><span class=\"line\">df17[<span class=\"string\">&#x27;region&#x27;</span>]=[<span class=\"string\">&quot;EastAsia&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> EastAsia </span><br><span class=\"line\">                            <span class=\"keyword\">else</span> <span class=\"string\">&quot;World&quot;</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> df17[<span class=\"string\">&#x27;Country&#x27;</span>]]</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"학력\"><a href=\"#학력\" class=\"headerlink\" title=\"학력\"></a><strong>학력</strong></h3><hr>\n<ul>\n<li>Q4</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df21_degree= df21[<span class=\"string\">&#x27;Q4&#x27;</span>].value_counts().to_frame().reset_index()</span><br><span class=\"line\">df21_degree</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mykaggle4/1.PNG\"><br><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#마지막 행 삭제</span></span><br><span class=\"line\">df21_degree.drop(df21_degree.index[<span class=\"number\">7</span>])</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mykaggle4/2.PNG\"><br><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df21_degree[<span class=\"string\">&#x27;Q4&#x27;</span>].to_numpy()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mykaggle4/3.PNG\"><br><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df21_degree[<span class=\"string\">&#x27;index&#x27;</span>].tolist()</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/mykaggle4/4.PNG\"><br><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">degree = df21_degree[<span class=\"string\">&#x27;index&#x27;</span>].tolist()</span><br><span class=\"line\"></span><br><span class=\"line\">fig = go.Figure(data=[</span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;21년 World kaggler들의 학력&#x27;</span>, x=degree, y=df21_degree[<span class=\"string\">&#x27;Q4&#x27;</span>].to_numpy() ,orientation=<span class=\"string\">&#x27;v&#x27;</span>)])</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(title_text=<span class=\"string\">&quot;&lt;b&gt;21년 World kaggler들의 학력&lt;/b&gt;&quot;</span>,title_font_size=<span class=\"number\">35</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/mykaggle4/5.png\"><br><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#전체 코드</span></span><br><span class=\"line\">df21_degree= df21[<span class=\"string\">&#x27;Q4&#x27;</span>].value_counts().to_frame().reset_index()</span><br><span class=\"line\">df21_degree</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#마지막 행 삭제</span></span><br><span class=\"line\">df21_degree.drop(df21_degree.index[<span class=\"number\">7</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">degree = df21_degree[<span class=\"string\">&#x27;index&#x27;</span>].tolist()</span><br><span class=\"line\"></span><br><span class=\"line\">fig = go.Figure(data=[</span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;21년 World kaggler들의 학력&#x27;</span>, x=degree, y=df21_degree[<span class=\"string\">&#x27;Q4&#x27;</span>].to_numpy() ,orientation=<span class=\"string\">&#x27;v&#x27;</span>)])</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(title_text=<span class=\"string\">&quot;&lt;b&gt;21년 World kaggler들의 학력&lt;/b&gt;&quot;</span>,title_font_size=<span class=\"number\">35</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mykaggle4/5.png\"><br><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df21_Ea[<span class=\"string\">&#x27;Q4&#x27;</span>].value_counts().index</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mykaggle4/6.PNG\"><br><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df21_ea_degree = df21_Ea[<span class=\"string\">&#x27;Q4&#x27;</span>].value_counts().to_frame().reset_index()</span><br><span class=\"line\">df21_ea_degree[<span class=\"string\">&#x27;Q4&#x27;</span>].to_numpy()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mykaggle4/7.PNG\"><br><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">degree = df21_Ea[<span class=\"string\">&#x27;Q4&#x27;</span>].value_counts().index</span><br><span class=\"line\"></span><br><span class=\"line\">fig = go.Figure(data=[</span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;China&#x27;</span>, x = degree, </span><br><span class=\"line\">                           y=df21_Ea[<span class=\"string\">&#x27;Q4&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>] ==<span class=\"string\">&#x27;China&#x27;</span>].value_counts()),</span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;Japan&#x27;</span>, x = degree, </span><br><span class=\"line\">                             y=df21_Ea[<span class=\"string\">&#x27;Q4&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>] ==<span class=\"string\">&#x27;Japan&#x27;</span>].value_counts()),</span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;South Korea&#x27;</span>, x= degree, </span><br><span class=\"line\">                            y=df21_Ea[<span class=\"string\">&#x27;Q4&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>] ==<span class=\"string\">&#x27;South Korea&#x27;</span>].value_counts()),</span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;Taiwan&#x27;</span>, x= degree, </span><br><span class=\"line\">                            y=df21_Ea[<span class=\"string\">&#x27;Q4&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>] ==<span class=\"string\">&#x27;Taiwan&#x27;</span>].value_counts())</span><br><span class=\"line\">    ])</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(title_text=<span class=\"string\">&quot;&lt;b&gt;21년 EastAisa kaggler들의 학력&lt;/b&gt;&quot;</span>,title_font_size=<span class=\"number\">35</span>)</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mykaggle4/8.png\"><br><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#전체 코드</span></span><br><span class=\"line\"></span><br><span class=\"line\">df21_ea_degree = df21_Ea[<span class=\"string\">&#x27;Q4&#x27;</span>].value_counts().to_frame().reset_index()</span><br><span class=\"line\"></span><br><span class=\"line\">degree = df21_Ea[<span class=\"string\">&#x27;Q4&#x27;</span>].value_counts().index</span><br><span class=\"line\"></span><br><span class=\"line\">fig = go.Figure(data=[</span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;China&#x27;</span>, x = degree, </span><br><span class=\"line\">                           y=df21_Ea[<span class=\"string\">&#x27;Q4&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>] ==<span class=\"string\">&#x27;China&#x27;</span>].value_counts()),</span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;Japan&#x27;</span>, x = degree, </span><br><span class=\"line\">                             y=df21_Ea[<span class=\"string\">&#x27;Q4&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>] ==<span class=\"string\">&#x27;Japan&#x27;</span>].value_counts()),</span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;South Korea&#x27;</span>, x= degree, </span><br><span class=\"line\">                            y=df21_Ea[<span class=\"string\">&#x27;Q4&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>] ==<span class=\"string\">&#x27;South Korea&#x27;</span>].value_counts()),</span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;Taiwan&#x27;</span>, x= degree, </span><br><span class=\"line\">                            y=df21_Ea[<span class=\"string\">&#x27;Q4&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>] ==<span class=\"string\">&#x27;Taiwan&#x27;</span>].value_counts())</span><br><span class=\"line\">    ])</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(title_text=<span class=\"string\">&quot;&lt;b&gt;21년 EastAisa kaggler들의 학력&lt;/b&gt;&quot;</span>,title_font_size=<span class=\"number\">35</span>)</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"직업\"><a href=\"#직업\" class=\"headerlink\" title=\"직업\"></a><strong>직업</strong></h3><hr>\n<ul>\n<li>Q5</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Data_Analyst =[<span class=\"string\">&#x27;Data Analyst&#x27;</span>,<span class=\"string\">&#x27;Data Miner,Information technology&#x27;</span>,<span class=\"string\">&#x27;Data Miner&#x27;</span>,</span><br><span class=\"line\">               <span class=\"string\">&#x27;Predictive Modeler&#x27;</span>,<span class=\"string\">&#x27;Information technology, networking, or system administration&#x27;</span> ]</span><br><span class=\"line\">Data_Engineer =[<span class=\"string\">&#x27;A business discipline (accounting, economics, finance, etc.)&#x27;</span>, <span class=\"string\">&#x27;Business Analyst&#x27;</span>,</span><br><span class=\"line\">                <span class=\"string\">&#x27;Statistician&#x27;</span>, <span class=\"string\">&#x27;Mathematics or statistics&#x27;</span>, <span class=\"string\">&#x27;Data Scientist&#x27;</span>, <span class=\"string\">&#x27;Environmental science or geology&#x27;</span>, </span><br><span class=\"line\">                <span class=\"string\">&#x27;Humanities&#x27;</span>, <span class=\"string\">&#x27;Machine Learning Engineer&#x27;</span>, <span class=\"string\">&#x27;Medical or life sciences (biology, chemistry, medicine, etc.)&#x27;</span>, </span><br><span class=\"line\">                <span class=\"string\">&#x27;Physics or astronomy&#x27;</span>, <span class=\"string\">&#x27;Research Scientist&#x27;</span>, <span class=\"string\">&#x27;Researcher&#x27;</span>, <span class=\"string\">&#x27;Scientist/Researcher&#x27;</span>, <span class=\"string\">&#x27;Data Engineer&#x27;</span>,</span><br><span class=\"line\">                <span class=\"string\">&#x27;Social sciences (anthropology, psychology, sociology, etc.)&#x27;</span>,<span class=\"string\">&#x27;Software Developer/Software Engineer&#x27;</span>,<span class=\"string\">&#x27;Humanities (history, literature, philosophy, etc.)&#x27;</span>]</span><br><span class=\"line\">Developer=[<span class=\"string\">&#x27;Developer Relations/Advocacy&#x27;</span>,<span class=\"string\">&#x27;Engineer&#x27;</span>,<span class=\"string\">&#x27;Engineering (non-computer focused)&#x27;</span>,</span><br><span class=\"line\">           <span class=\"string\">&#x27;Programmer&#x27;</span>,<span class=\"string\">&#x27;Software Engineer&#x27;</span>, <span class=\"string\">&#x27;Computer Scientist&#x27;</span>,<span class=\"string\">&#x27;Computer science (software engineering, etc.)&#x27;</span>, </span><br><span class=\"line\">           <span class=\"string\">&#x27;Fine arts or performing arts&#x27;</span>,<span class=\"string\">&#x27;Product Manager&#x27;</span>, </span><br><span class=\"line\">           <span class=\"string\">&#x27;Product/Project Manager&#x27;</span>,<span class=\"string\">&#x27;Program/Project Manager&#x27;</span>,<span class=\"string\">&#x27;DBA/Database Engineer&#x27;</span>]</span><br><span class=\"line\">Not_Employeed =[<span class=\"string\">&#x27;Currently not employed&#x27;</span>, <span class=\"string\">&#x27;Not employed&#x27;</span>, <span class=\"string\">&#x27;Student&#x27;</span>]</span><br><span class=\"line\">Others = [<span class=\"string\">&#x27;I never declared a major&#x27;</span>, <span class=\"string\">&#x27;Other&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df21[<span class=\"string\">&#x27;Q5&#x27;</span>].value_counts()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mykaggle4/9.PNG\"><br><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df21_Ea_DA=df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q5&#x27;</span>].isin(Data_Analyst)].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;Data_Analyst&#x27;</span>&#125;)</span><br><span class=\"line\">df21_Ea_DE=df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q5&#x27;</span>].isin(Data_Engineer)].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;Data_Engineer&#x27;</span>&#125;)</span><br><span class=\"line\">df21_Ea_D=df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q5&#x27;</span>].isin(Developer)].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;Developer&#x27;</span>&#125;)</span><br><span class=\"line\">df21_Ea_NE=df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q5&#x27;</span>].isin(Not_Employeed)].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;Not_Employeed&#x27;</span>&#125;)</span><br><span class=\"line\">df21_Ea_O=df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q5&#x27;</span>].isin(Others)].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;Others&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">job=(df21_Ea_DA.join(df21_Ea_DE).join(df21_Ea_D).join(df21_Ea_NE).join(df21_Ea_O))</span><br><span class=\"line\">job</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mykaggle4/10.PNG\"><br><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">job.iloc[<span class=\"number\">1</span>,<span class=\"number\">0</span>:<span class=\"number\">5</span>].to_numpy()</span><br></pre></td></tr></table></figure>\n<pre><code>array([ 46, 292, 254, 211, 118])\n</code></pre>\n<br>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">job_ =job.columns</span><br><span class=\"line\">fig = go.Figure(data=[</span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;China&#x27;</span>, x = job_, </span><br><span class=\"line\">                           y=job.iloc[<span class=\"number\">0</span>,<span class=\"number\">0</span>:<span class=\"number\">5</span>].to_numpy()),</span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;Japan&#x27;</span>, x = job_, </span><br><span class=\"line\">                             y=job.iloc[<span class=\"number\">1</span>,<span class=\"number\">0</span>:<span class=\"number\">5</span>].to_numpy()),</span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;South Korea&#x27;</span>, x= job_, </span><br><span class=\"line\">                            y=job.iloc[<span class=\"number\">2</span>,<span class=\"number\">0</span>:<span class=\"number\">5</span>].to_numpy()),</span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;Taiwan&#x27;</span>, x= job_, </span><br><span class=\"line\">                            y=job.iloc[<span class=\"number\">3</span>,<span class=\"number\">0</span>:<span class=\"number\">5</span>].to_numpy())</span><br><span class=\"line\">    ])</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(title_text=<span class=\"string\">&quot;&lt;b&gt;21년 EastAisa kaggler들의 직업&lt;/b&gt;&quot;</span>,title_font_size=<span class=\"number\">35</span>)</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mykaggle4/11.png\"><br><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#전체 코드</span></span><br><span class=\"line\"></span><br><span class=\"line\">Data_Analyst =[<span class=\"string\">&#x27;Data Analyst&#x27;</span>,<span class=\"string\">&#x27;Data Miner,Information technology&#x27;</span>,<span class=\"string\">&#x27;Data Miner&#x27;</span>,</span><br><span class=\"line\">               <span class=\"string\">&#x27;Predictive Modeler&#x27;</span>,<span class=\"string\">&#x27;Information technology, networking, or system administration&#x27;</span> ]</span><br><span class=\"line\">Data_Engineer =[<span class=\"string\">&#x27;A business discipline (accounting, economics, finance, etc.)&#x27;</span>, <span class=\"string\">&#x27;Business Analyst&#x27;</span>,</span><br><span class=\"line\">                <span class=\"string\">&#x27;Statistician&#x27;</span>, <span class=\"string\">&#x27;Mathematics or statistics&#x27;</span>, <span class=\"string\">&#x27;Data Scientist&#x27;</span>, <span class=\"string\">&#x27;Environmental science or geology&#x27;</span>, </span><br><span class=\"line\">                <span class=\"string\">&#x27;Humanities&#x27;</span>, <span class=\"string\">&#x27;Machine Learning Engineer&#x27;</span>, <span class=\"string\">&#x27;Medical or life sciences (biology, chemistry, medicine, etc.)&#x27;</span>, </span><br><span class=\"line\">                <span class=\"string\">&#x27;Physics or astronomy&#x27;</span>, <span class=\"string\">&#x27;Research Scientist&#x27;</span>, <span class=\"string\">&#x27;Researcher&#x27;</span>, <span class=\"string\">&#x27;Scientist/Researcher&#x27;</span>, <span class=\"string\">&#x27;Data Engineer&#x27;</span>,</span><br><span class=\"line\">                <span class=\"string\">&#x27;Social sciences (anthropology, psychology, sociology, etc.)&#x27;</span>,<span class=\"string\">&#x27;Software Developer/Software Engineer&#x27;</span>,<span class=\"string\">&#x27;Humanities (history, literature, philosophy, etc.)&#x27;</span>]</span><br><span class=\"line\">Developer=[<span class=\"string\">&#x27;Developer Relations/Advocacy&#x27;</span>,<span class=\"string\">&#x27;Engineer&#x27;</span>,<span class=\"string\">&#x27;Engineering (non-computer focused)&#x27;</span>,</span><br><span class=\"line\">           <span class=\"string\">&#x27;Programmer&#x27;</span>,<span class=\"string\">&#x27;Software Engineer&#x27;</span>, <span class=\"string\">&#x27;Computer Scientist&#x27;</span>,<span class=\"string\">&#x27;Computer science (software engineering, etc.)&#x27;</span>, </span><br><span class=\"line\">           <span class=\"string\">&#x27;Fine arts or performing arts&#x27;</span>,<span class=\"string\">&#x27;Product Manager&#x27;</span>, </span><br><span class=\"line\">           <span class=\"string\">&#x27;Product/Project Manager&#x27;</span>,<span class=\"string\">&#x27;Program/Project Manager&#x27;</span>,<span class=\"string\">&#x27;DBA/Database Engineer&#x27;</span>]</span><br><span class=\"line\">Not_Employeed =[<span class=\"string\">&#x27;Currently not employed&#x27;</span>, <span class=\"string\">&#x27;Not employed&#x27;</span>, <span class=\"string\">&#x27;Student&#x27;</span>]</span><br><span class=\"line\">Others = [<span class=\"string\">&#x27;I never declared a major&#x27;</span>, <span class=\"string\">&#x27;Other&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">df21_Ea_DA=df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q5&#x27;</span>].isin(Data_Analyst)].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;Data_Analyst&#x27;</span>&#125;)</span><br><span class=\"line\">df21_Ea_DE=df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q5&#x27;</span>].isin(Data_Engineer)].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;Data_Engineer&#x27;</span>&#125;)</span><br><span class=\"line\">df21_Ea_D=df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q5&#x27;</span>].isin(Developer)].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;Developer&#x27;</span>&#125;)</span><br><span class=\"line\">df21_Ea_NE=df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q5&#x27;</span>].isin(Not_Employeed)].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;Not_Employeed&#x27;</span>&#125;)</span><br><span class=\"line\">df21_Ea_O=df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q5&#x27;</span>].isin(Others)].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;Others&#x27;</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">job=(df21_Ea_DA.join(df21_Ea_DE).join(df21_Ea_D).join(df21_Ea_NE).join(df21_Ea_O))</span><br><span class=\"line\"></span><br><span class=\"line\">job_ =job.columns</span><br><span class=\"line\">fig = go.Figure(data=[</span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;China&#x27;</span>, x = job_, </span><br><span class=\"line\">                           y=job.iloc[<span class=\"number\">0</span>,<span class=\"number\">0</span>:<span class=\"number\">5</span>].to_numpy()),</span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;Japan&#x27;</span>, x = job_, </span><br><span class=\"line\">                             y=job.iloc[<span class=\"number\">1</span>,<span class=\"number\">0</span>:<span class=\"number\">5</span>].to_numpy()),</span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;South Korea&#x27;</span>, x= job_, </span><br><span class=\"line\">                            y=job.iloc[<span class=\"number\">2</span>,<span class=\"number\">0</span>:<span class=\"number\">5</span>].to_numpy()),</span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;Taiwan&#x27;</span>, x= job_, </span><br><span class=\"line\">                            y=job.iloc[<span class=\"number\">3</span>,<span class=\"number\">0</span>:<span class=\"number\">5</span>].to_numpy())</span><br><span class=\"line\">    ])</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(title_text=<span class=\"string\">&quot;&lt;b&gt;21년 EastAisa kaggler들의 직업&lt;/b&gt;&quot;</span>,title_font_size=<span class=\"number\">35</span>)</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"경력\"><a href=\"#경력\" class=\"headerlink\" title=\"경력\"></a><strong>경력</strong></h3><hr>\n<ul>\n<li>Q6</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df21[<span class=\"string\">&#x27;Q6&#x27;</span>].value_counts()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mykaggle4/12.PNG\"><br><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_3year = [<span class=\"string\">&#x27;I have never written code&#x27;</span>, <span class=\"string\">&#x27;&lt; 1 years&#x27;</span>, <span class=\"string\">&#x27;1-3 years&#x27;</span>]</span><br><span class=\"line\">_5year = [<span class=\"string\">&#x27;3-5 years &#x27;</span>,<span class=\"string\">&#x27;5-10 years&#x27;</span>]</span><br><span class=\"line\">_10year = [<span class=\"string\">&#x27;10-20 years&#x27;</span>,<span class=\"string\">&#x27;20+ years&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">df21_3year = df21[<span class=\"string\">&#x27;Q6&#x27;</span>][df21[<span class=\"string\">&#x27;Q6&#x27;</span>].isin(_3year)]</span><br><span class=\"line\">df21_5year = df21[<span class=\"string\">&#x27;Q6&#x27;</span>][df21[<span class=\"string\">&#x27;Q6&#x27;</span>].isin(_5year)]</span><br><span class=\"line\">df21_10year = df21[<span class=\"string\">&#x27;Q6&#x27;</span>][df21[<span class=\"string\">&#x27;Q6&#x27;</span>].isin(_10year)]</span><br><span class=\"line\"></span><br><span class=\"line\">df21_3year.count()</span><br><span class=\"line\">df21_5year.count()</span><br><span class=\"line\">df21_10year.count()</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df21_3year</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mykaggle4/13.PNG\"><br><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">years =[<span class=\"string\">&#x27;_3year&#x27;</span>,<span class=\"string\">&#x27;_5year&#x27;</span>, <span class=\"string\">&#x27;_10year&#x27;</span>]</span><br><span class=\"line\">values =[df21_3year.count(),</span><br><span class=\"line\">         df21_5year.count(),</span><br><span class=\"line\">        df21_10year.count()]</span><br><span class=\"line\"></span><br><span class=\"line\">fig = go.Figure(data=[</span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;21년 World kaggler들의 경력&#x27;</span>, x=years, y=values ,orientation=<span class=\"string\">&#x27;v&#x27;</span>),])</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(title_text=<span class=\"string\">&quot;&lt;b&gt;21년 World kaggler들의 경력&lt;/b&gt;&quot;</span>,title_font_size=<span class=\"number\">35</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mykaggle4/14.png\"><br><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#전체 코드</span></span><br><span class=\"line\">_3year = [<span class=\"string\">&#x27;I have never written code&#x27;</span>, <span class=\"string\">&#x27;&lt; 1 years&#x27;</span>, <span class=\"string\">&#x27;1-3 years&#x27;</span>]</span><br><span class=\"line\">_5year = [<span class=\"string\">&#x27;3-5 years &#x27;</span>,<span class=\"string\">&#x27;5-10 years&#x27;</span>]</span><br><span class=\"line\">_10year = [<span class=\"string\">&#x27;10-20 years&#x27;</span>,<span class=\"string\">&#x27;20+ years&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">df21_3year = df21[<span class=\"string\">&#x27;Q6&#x27;</span>][df21[<span class=\"string\">&#x27;Q6&#x27;</span>].isin(_3year)]</span><br><span class=\"line\">df21_5year = df21[<span class=\"string\">&#x27;Q6&#x27;</span>][df21[<span class=\"string\">&#x27;Q6&#x27;</span>].isin(_5year)]</span><br><span class=\"line\">df21_10year = df21[<span class=\"string\">&#x27;Q6&#x27;</span>][df21[<span class=\"string\">&#x27;Q6&#x27;</span>].isin(_10year)]</span><br><span class=\"line\"></span><br><span class=\"line\">df21_3year.count()</span><br><span class=\"line\">df21_5year.count()</span><br><span class=\"line\">df21_10year.count()</span><br><span class=\"line\"></span><br><span class=\"line\">years =[<span class=\"string\">&#x27;_3year&#x27;</span>,<span class=\"string\">&#x27;_5year&#x27;</span>, <span class=\"string\">&#x27;_10year&#x27;</span>]</span><br><span class=\"line\">values =[df21_3year.count(),</span><br><span class=\"line\">         df21_5year.count(),</span><br><span class=\"line\">        df21_10year.count()]</span><br><span class=\"line\"></span><br><span class=\"line\">fig = go.Figure(data=[</span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;21년 World kaggler들의 경력&#x27;</span>, x=years, y=values ,orientation=<span class=\"string\">&#x27;v&#x27;</span>),])</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(title_text=<span class=\"string\">&quot;&lt;b&gt;21년 World kaggler들의 경력&lt;/b&gt;&quot;</span>,title_font_size=<span class=\"number\">35</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>]</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mykaggle4/15.PNG\"><br><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_3year = [<span class=\"string\">&#x27;I have never written code&#x27;</span>, <span class=\"string\">&#x27;&lt; 1 years&#x27;</span>, <span class=\"string\">&#x27;1-3 years&#x27;</span>]</span><br><span class=\"line\">_5year = [<span class=\"string\">&#x27;3-5 years &#x27;</span>,<span class=\"string\">&#x27;5-10 years&#x27;</span>]</span><br><span class=\"line\">_10year = [<span class=\"string\">&#x27;10-20 years&#x27;</span>,<span class=\"string\">&#x27;20+ years&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">df21_Ea_3year = df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q6&#x27;</span>].isin(_3year)].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;3year&#x27;</span>&#125;)</span><br><span class=\"line\">df21_Ea_5year = df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q6&#x27;</span>].isin(_5year)].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;5year&#x27;</span>&#125;)</span><br><span class=\"line\">df21_Ea_10year = df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q6&#x27;</span>].isin(_10year)].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;10year&#x27;</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df21_Ea_3year</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mykaggle4/16.PNG\"><br><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df21_Ea_5year</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mykaggle4/17.PNG\"><br><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df21_Ea_10year</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mykaggle4/18.PNG\"><br><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">career=(df21_Ea_3year.join(df21_Ea_5year).join(df21_Ea_10year))</span><br><span class=\"line\">career</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mykaggle4/19.PNG\"><br><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">career.iloc[<span class=\"number\">0</span>,<span class=\"number\">0</span>:<span class=\"number\">3</span>] <span class=\"comment\">#China</span></span><br><span class=\"line\">career.iloc[<span class=\"number\">1</span>,<span class=\"number\">0</span>:<span class=\"number\">3</span>] <span class=\"comment\">#Japan</span></span><br><span class=\"line\">career.iloc[<span class=\"number\">2</span>,<span class=\"number\">0</span>:<span class=\"number\">3</span>] <span class=\"comment\">#South Korea</span></span><br><span class=\"line\">career.iloc[<span class=\"number\">3</span>,<span class=\"number\">0</span>:<span class=\"number\">3</span>] <span class=\"comment\">#Taiwan</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mykaggle4/20.PNG\"><br><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fig = go.Figure(data=[</span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;China&#x27;</span>, x = years, </span><br><span class=\"line\">                           y=career.iloc[<span class=\"number\">0</span>,<span class=\"number\">0</span>:<span class=\"number\">3</span>]),</span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;Japan&#x27;</span>, x = years, </span><br><span class=\"line\">                             y=career.iloc[<span class=\"number\">1</span>,<span class=\"number\">0</span>:<span class=\"number\">3</span>]),</span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;South Korea&#x27;</span>, x= years, </span><br><span class=\"line\">                            y=career.iloc[<span class=\"number\">2</span>,<span class=\"number\">0</span>:<span class=\"number\">3</span>]),</span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;Taiwan&#x27;</span>, x= years, </span><br><span class=\"line\">                            y=career.iloc[<span class=\"number\">3</span>,<span class=\"number\">0</span>:<span class=\"number\">3</span>])</span><br><span class=\"line\">    ])</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(title_text=<span class=\"string\">&quot;&lt;b&gt;21년 EastAisa kaggler들의 경력&lt;/b&gt;&quot;</span>,title_font_size=<span class=\"number\">35</span>)</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mykaggle4/21.png\"><br><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#최종 합친 코드</span></span><br><span class=\"line\">_3year = [<span class=\"string\">&#x27;I have never written code&#x27;</span>, <span class=\"string\">&#x27;&lt; 1 years&#x27;</span>, <span class=\"string\">&#x27;1-3 years&#x27;</span>]</span><br><span class=\"line\">_5year = [<span class=\"string\">&#x27;3-5 years &#x27;</span>,<span class=\"string\">&#x27;5-10 years&#x27;</span>]</span><br><span class=\"line\">_10year = [<span class=\"string\">&#x27;10-20 years&#x27;</span>,<span class=\"string\">&#x27;20+ years&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">df21_Ea_3year = df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q6&#x27;</span>].isin(_3year)].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;3year&#x27;</span>&#125;)</span><br><span class=\"line\">df21_Ea_5year = df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q6&#x27;</span>].isin(_5year)].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;5year&#x27;</span>&#125;)</span><br><span class=\"line\">df21_Ea_10year = df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q6&#x27;</span>].isin(_10year)].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;10year&#x27;</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">career=(df21_Ea_3year.join(df21_Ea_5year).join(df21_Ea_10year))</span><br><span class=\"line\">career</span><br><span class=\"line\"></span><br><span class=\"line\">career.iloc[<span class=\"number\">0</span>,<span class=\"number\">0</span>:<span class=\"number\">3</span>] <span class=\"comment\">#China</span></span><br><span class=\"line\">career.iloc[<span class=\"number\">1</span>,<span class=\"number\">0</span>:<span class=\"number\">3</span>] <span class=\"comment\">#Japan</span></span><br><span class=\"line\">career.iloc[<span class=\"number\">2</span>,<span class=\"number\">0</span>:<span class=\"number\">3</span>] <span class=\"comment\">#South Korea</span></span><br><span class=\"line\">career.iloc[<span class=\"number\">3</span>,<span class=\"number\">0</span>:<span class=\"number\">3</span>] <span class=\"comment\">#Taiwan</span></span><br><span class=\"line\"></span><br><span class=\"line\">fig = go.Figure(data=[</span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;China&#x27;</span>, x = years, </span><br><span class=\"line\">                           y=career.iloc[<span class=\"number\">0</span>,<span class=\"number\">0</span>:<span class=\"number\">3</span>]),</span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;Japan&#x27;</span>, x = years, </span><br><span class=\"line\">                             y=career.iloc[<span class=\"number\">1</span>,<span class=\"number\">0</span>:<span class=\"number\">3</span>]),</span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;South Korea&#x27;</span>, x= years, </span><br><span class=\"line\">                            y=career.iloc[<span class=\"number\">2</span>,<span class=\"number\">0</span>:<span class=\"number\">3</span>]),</span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;Taiwan&#x27;</span>, x= years, </span><br><span class=\"line\">                            y=career.iloc[<span class=\"number\">3</span>,<span class=\"number\">0</span>:<span class=\"number\">3</span>])</span><br><span class=\"line\">    ])</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(title_text=<span class=\"string\">&quot;&lt;b&gt;21년 EastAisa kaggler들의 경력&lt;/b&gt;&quot;</span>,title_font_size=<span class=\"number\">35</span>)</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"연봉\"><a href=\"#연봉\" class=\"headerlink\" title=\"연봉\"></a><strong>연봉</strong></h3><hr>\n<ul>\n<li>Q25</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#마지막 행 삭제해줌</span></span><br><span class=\"line\">df21_=(df21[<span class=\"string\">&#x27;Q25&#x27;</span>].value_counts().to_frame())</span><br><span class=\"line\">df21_=df21_.drop(df21_.index[<span class=\"number\">26</span>])</span><br><span class=\"line\">df21_</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mykaggle4/22.PNG\"><br><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df21_[<span class=\"string\">&#x27;Q25&#x27;</span>].index</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mykaggle4/23.PNG\"><br><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df21_[<span class=\"string\">&#x27;Q25&#x27;</span>].to_numpy()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mykaggle4/24.PNG\"><br><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">compensation = df21_[<span class=\"string\">&#x27;Q25&#x27;</span>].index</span><br><span class=\"line\">fig = go.Figure(data=[</span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;21년 World kaggler들의 연봉&#x27;</span>, x=compensation, y=df21_[<span class=\"string\">&#x27;Q25&#x27;</span>].to_numpy() ,orientation=<span class=\"string\">&#x27;v&#x27;</span>)])</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(title_text=<span class=\"string\">&quot;&lt;b&gt;21년 World kaggler들의 연봉&lt;/b&gt;&quot;</span>,title_font_size=<span class=\"number\">35</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/mykaggle4/25.png\"><br><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#전체 코드</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#마지막 행 삭제해줌</span></span><br><span class=\"line\">df21_=(df21[<span class=\"string\">&#x27;Q25&#x27;</span>].value_counts().to_frame())</span><br><span class=\"line\">df21_=df21_.drop(df21_.index[<span class=\"number\">26</span>])</span><br><span class=\"line\">df21_</span><br><span class=\"line\"></span><br><span class=\"line\">compensation = df21_[<span class=\"string\">&#x27;Q25&#x27;</span>].index</span><br><span class=\"line\">fig = go.Figure(data=[</span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;21년 World kaggler들의 연봉&#x27;</span>, x=compensation, y=df21_[<span class=\"string\">&#x27;Q25&#x27;</span>].to_numpy() ,orientation=<span class=\"string\">&#x27;v&#x27;</span>)])</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(title_text=<span class=\"string\">&quot;&lt;b&gt;21년 World kaggler들의 연봉&lt;/b&gt;&quot;</span>,title_font_size=<span class=\"number\">35</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#일본 연봉</span></span><br><span class=\"line\">df21_Ea[<span class=\"string\">&#x27;Q25&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>] ==<span class=\"string\">&#x27;Japan&#x27;</span>].value_counts()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mykaggle4/26.PNG\"><br><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>].value_counts()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mykaggle4/27.PNG\"><br><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df21_Ea[<span class=\"string\">&#x27;Q25&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>] ==<span class=\"string\">&#x27;Taiwan&#x27;</span>].value_counts()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mykaggle4/28.PNG\"><br><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">compensation = df21_[<span class=\"string\">&#x27;Q25&#x27;</span>].index</span><br><span class=\"line\"></span><br><span class=\"line\">fig = go.Figure(data=[</span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;China&#x27;</span>, x = compensation, </span><br><span class=\"line\">                           y = df21_Ea[<span class=\"string\">&#x27;Q25&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>] ==<span class=\"string\">&#x27;Japan&#x27;</span>].value_counts()),</span><br><span class=\"line\">    </span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;Japan&#x27;</span>, x = compensation, </span><br><span class=\"line\">                             y=df21_Ea[<span class=\"string\">&#x27;Q25&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>] ==<span class=\"string\">&#x27;Taiwan&#x27;</span>].value_counts()),</span><br><span class=\"line\">    </span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;South Korea&#x27;</span>, x = compensation, </span><br><span class=\"line\">                            y=df21_Ea[<span class=\"string\">&#x27;Q25&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>] ==<span class=\"string\">&#x27;South Korea&#x27;</span>].value_counts()),</span><br><span class=\"line\">    </span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;Taiwan&#x27;</span>, x = compensation, </span><br><span class=\"line\">                            y=df21_Ea[<span class=\"string\">&#x27;Q25&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>] ==<span class=\"string\">&#x27;China&#x27;</span>].value_counts())</span><br><span class=\"line\">    ])</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(title_text=<span class=\"string\">&quot;&lt;b&gt;21년 EastAisa kaggler들의 연봉&lt;/b&gt;&quot;</span>,title_font_size=<span class=\"number\">35</span>)</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mykaggle4/29.png\"><br><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#전체 코드</span></span><br><span class=\"line\"></span><br><span class=\"line\">compensation = df21_[<span class=\"string\">&#x27;Q25&#x27;</span>].index</span><br><span class=\"line\"></span><br><span class=\"line\">fig = go.Figure(data=[</span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;China&#x27;</span>, x = compensation, </span><br><span class=\"line\">                           y = df21_Ea[<span class=\"string\">&#x27;Q25&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>] ==<span class=\"string\">&#x27;Japan&#x27;</span>].value_counts()),</span><br><span class=\"line\">    </span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;Japan&#x27;</span>, x = compensation, </span><br><span class=\"line\">                             y=df21_Ea[<span class=\"string\">&#x27;Q25&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>] ==<span class=\"string\">&#x27;Taiwan&#x27;</span>].value_counts()),</span><br><span class=\"line\">    </span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;South Korea&#x27;</span>, x = compensation, </span><br><span class=\"line\">                            y=df21_Ea[<span class=\"string\">&#x27;Q25&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>] ==<span class=\"string\">&#x27;South Korea&#x27;</span>].value_counts()),</span><br><span class=\"line\">    </span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;Taiwan&#x27;</span>, x = compensation, </span><br><span class=\"line\">                            y=df21_Ea[<span class=\"string\">&#x27;Q25&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>] ==<span class=\"string\">&#x27;China&#x27;</span>].value_counts())</span><br><span class=\"line\">    ])</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(title_text=<span class=\"string\">&quot;&lt;b&gt;21년 EastAisa kaggler들의 연봉&lt;/b&gt;&quot;</span>,title_font_size=<span class=\"number\">35</span>)</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"언어\"><a href=\"#언어\" class=\"headerlink\" title=\"언어\"></a><strong>언어</strong></h3><hr>\n<ul>\n<li>Q7</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df21_p = df21[<span class=\"string\">&#x27;Q7_Part_1&#x27;</span>].value_counts().to_frame() <span class=\"comment\">#python</span></span><br><span class=\"line\">df21_r = df21[<span class=\"string\">&#x27;Q7_Part_2&#x27;</span>].value_counts().to_frame() <span class=\"comment\">#r</span></span><br><span class=\"line\">df21_s = df21[<span class=\"string\">&#x27;Q7_Part_3&#x27;</span>].value_counts().to_frame() <span class=\"comment\">#sql</span></span><br><span class=\"line\">df21_c = df21[<span class=\"string\">&#x27;Q7_Part_4&#x27;</span>].value_counts().to_frame() <span class=\"comment\">#c</span></span><br><span class=\"line\">df21_cc = df21[<span class=\"string\">&#x27;Q7_Part_5&#x27;</span>].value_counts().to_frame() <span class=\"comment\">#c++</span></span><br><span class=\"line\">df21_j = df21[<span class=\"string\">&#x27;Q7_Part_6&#x27;</span>].value_counts().to_frame() <span class=\"comment\">#java</span></span><br><span class=\"line\">df21_js = df21[<span class=\"string\">&#x27;Q7_Part_7&#x27;</span>].value_counts().to_frame() <span class=\"comment\">#javascript</span></span><br><span class=\"line\">df21_ju = df21[<span class=\"string\">&#x27;Q7_Part_8&#x27;</span>].value_counts().to_frame() <span class=\"comment\">#julia</span></span><br><span class=\"line\">df21_sw = df21[<span class=\"string\">&#x27;Q7_Part_9&#x27;</span>].value_counts().to_frame() <span class=\"comment\">#swift</span></span><br><span class=\"line\">df21_b = df21[<span class=\"string\">&#x27;Q7_Part_10&#x27;</span>].value_counts().to_frame() <span class=\"comment\">#bash</span></span><br><span class=\"line\">df21_ma = df21[<span class=\"string\">&#x27;Q7_Part_11&#x27;</span>].value_counts().to_frame() <span class=\"comment\">#matlab</span></span><br><span class=\"line\">df21_n = df21[<span class=\"string\">&#x27;Q7_Part_12&#x27;</span>].value_counts().to_frame() <span class=\"comment\">#none</span></span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df21_p.iloc[<span class=\"number\">0</span>,<span class=\"number\">0</span>]</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">languages = [<span class=\"string\">&#x27;Python&#x27;</span>,<span class=\"string\">&#x27;R&#x27;</span>,<span class=\"string\">&#x27;SQL&#x27;</span>,<span class=\"string\">&#x27;C&#x27;</span>,<span class=\"string\">&#x27;C++&#x27;</span>,<span class=\"string\">&#x27;Java&#x27;</span>,<span class=\"string\">&#x27;Javascript&#x27;</span>,<span class=\"string\">&#x27;Julia&#x27;</span>,<span class=\"string\">&#x27;Swift&#x27;</span>,<span class=\"string\">&#x27;Bash&#x27;</span>,<span class=\"string\">&#x27;MATLAB&#x27;</span>,<span class=\"string\">&#x27;None&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">fig = go.Figure(data=[</span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;21년 World kaggler들이 사용하는 언어&#x27;</span>, x = languages, </span><br><span class=\"line\">                                                     y = [df21_p.iloc[<span class=\"number\">0</span>,<span class=\"number\">0</span>],</span><br><span class=\"line\">                                                          df21_r.iloc[<span class=\"number\">0</span>,<span class=\"number\">0</span>],</span><br><span class=\"line\">                                                          df21_s.iloc[<span class=\"number\">0</span>,<span class=\"number\">0</span>],</span><br><span class=\"line\">                                                          df21_c.iloc[<span class=\"number\">0</span>,<span class=\"number\">0</span>],</span><br><span class=\"line\">                                                          df21_cc.iloc[<span class=\"number\">0</span>,<span class=\"number\">0</span>],</span><br><span class=\"line\">                                                          df21_j.iloc[<span class=\"number\">0</span>,<span class=\"number\">0</span>],</span><br><span class=\"line\">                                                          df21_js.iloc[<span class=\"number\">0</span>,<span class=\"number\">0</span>],</span><br><span class=\"line\">                                                          df21_ju.iloc[<span class=\"number\">0</span>,<span class=\"number\">0</span>],</span><br><span class=\"line\">                                                          df21_sw.iloc[<span class=\"number\">0</span>,<span class=\"number\">0</span>],</span><br><span class=\"line\">                                                          df21_b.iloc[<span class=\"number\">0</span>,<span class=\"number\">0</span>],</span><br><span class=\"line\">                                                          df21_ma.iloc[<span class=\"number\">0</span>,<span class=\"number\">0</span>],</span><br><span class=\"line\">                                                          df21_n.iloc[<span class=\"number\">0</span>,<span class=\"number\">0</span>]],orientation=<span class=\"string\">&#x27;v&#x27;</span>)</span><br><span class=\"line\">                    </span><br><span class=\"line\">                    ])</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(title_text=<span class=\"string\">&quot;&lt;b&gt;21년 World kaggler들이 사용하는 언어&lt;/b&gt;&quot;</span>,title_font_size=<span class=\"number\">35</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mykaggle4/30.png\"><br><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#코드 전체</span></span><br><span class=\"line\"></span><br><span class=\"line\">df21_p = df21[<span class=\"string\">&#x27;Q7_Part_1&#x27;</span>].value_counts().to_frame() <span class=\"comment\">#python</span></span><br><span class=\"line\">df21_r = df21[<span class=\"string\">&#x27;Q7_Part_2&#x27;</span>].value_counts().to_frame() <span class=\"comment\">#r</span></span><br><span class=\"line\">df21_s = df21[<span class=\"string\">&#x27;Q7_Part_3&#x27;</span>].value_counts().to_frame() <span class=\"comment\">#sql</span></span><br><span class=\"line\">df21_c = df21[<span class=\"string\">&#x27;Q7_Part_4&#x27;</span>].value_counts().to_frame() <span class=\"comment\">#c</span></span><br><span class=\"line\">df21_cc = df21[<span class=\"string\">&#x27;Q7_Part_5&#x27;</span>].value_counts().to_frame() <span class=\"comment\">#c++</span></span><br><span class=\"line\">df21_j = df21[<span class=\"string\">&#x27;Q7_Part_6&#x27;</span>].value_counts().to_frame() <span class=\"comment\">#java</span></span><br><span class=\"line\">df21_js = df21[<span class=\"string\">&#x27;Q7_Part_7&#x27;</span>].value_counts().to_frame() <span class=\"comment\">#javascript</span></span><br><span class=\"line\">df21_ju = df21[<span class=\"string\">&#x27;Q7_Part_8&#x27;</span>].value_counts().to_frame() <span class=\"comment\">#julia</span></span><br><span class=\"line\">df21_sw = df21[<span class=\"string\">&#x27;Q7_Part_9&#x27;</span>].value_counts().to_frame() <span class=\"comment\">#swift</span></span><br><span class=\"line\">df21_b = df21[<span class=\"string\">&#x27;Q7_Part_10&#x27;</span>].value_counts().to_frame() <span class=\"comment\">#bash</span></span><br><span class=\"line\">df21_ma = df21[<span class=\"string\">&#x27;Q7_Part_11&#x27;</span>].value_counts().to_frame() <span class=\"comment\">#matlab</span></span><br><span class=\"line\">df21_n = df21[<span class=\"string\">&#x27;Q7_Part_12&#x27;</span>].value_counts().to_frame() <span class=\"comment\">#none</span></span><br><span class=\"line\"></span><br><span class=\"line\">languages = [<span class=\"string\">&#x27;Python&#x27;</span>,<span class=\"string\">&#x27;R&#x27;</span>,<span class=\"string\">&#x27;SQL&#x27;</span>,<span class=\"string\">&#x27;C&#x27;</span>,<span class=\"string\">&#x27;C++&#x27;</span>,<span class=\"string\">&#x27;Java&#x27;</span>,<span class=\"string\">&#x27;Javascript&#x27;</span>,<span class=\"string\">&#x27;Julia&#x27;</span>,<span class=\"string\">&#x27;Swift&#x27;</span>,<span class=\"string\">&#x27;Bash&#x27;</span>,<span class=\"string\">&#x27;MATLAB&#x27;</span>,<span class=\"string\">&#x27;None&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">fig = go.Figure(data=[</span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;21년 World kaggler들이 사용하는 언어&#x27;</span>, x = languages, </span><br><span class=\"line\">                                                     y = [df21_p.iloc[<span class=\"number\">0</span>,<span class=\"number\">0</span>],</span><br><span class=\"line\">                                                          df21_r.iloc[<span class=\"number\">0</span>,<span class=\"number\">0</span>],</span><br><span class=\"line\">                                                          df21_s.iloc[<span class=\"number\">0</span>,<span class=\"number\">0</span>],</span><br><span class=\"line\">                                                          df21_c.iloc[<span class=\"number\">0</span>,<span class=\"number\">0</span>],</span><br><span class=\"line\">                                                          df21_cc.iloc[<span class=\"number\">0</span>,<span class=\"number\">0</span>],</span><br><span class=\"line\">                                                          df21_j.iloc[<span class=\"number\">0</span>,<span class=\"number\">0</span>],</span><br><span class=\"line\">                                                          df21_js.iloc[<span class=\"number\">0</span>,<span class=\"number\">0</span>],</span><br><span class=\"line\">                                                          df21_ju.iloc[<span class=\"number\">0</span>,<span class=\"number\">0</span>],</span><br><span class=\"line\">                                                          df21_sw.iloc[<span class=\"number\">0</span>,<span class=\"number\">0</span>],</span><br><span class=\"line\">                                                          df21_b.iloc[<span class=\"number\">0</span>,<span class=\"number\">0</span>],</span><br><span class=\"line\">                                                          df21_ma.iloc[<span class=\"number\">0</span>,<span class=\"number\">0</span>],</span><br><span class=\"line\">                                                          df21_n.iloc[<span class=\"number\">0</span>,<span class=\"number\">0</span>]],orientation=<span class=\"string\">&#x27;v&#x27;</span>)</span><br><span class=\"line\">                    </span><br><span class=\"line\">                    ])</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(title_text=<span class=\"string\">&quot;&lt;b&gt;21년 World kaggler들이 사용하는 언어&lt;/b&gt;&quot;</span>,title_font_size=<span class=\"number\">35</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df21_lan_ch_p=df21_Ea[<span class=\"string\">&#x27;Q7_Part_1&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>]==<span class=\"string\">&#x27;China&#x27;</span>].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q7_Part_1&#x27;</span>:<span class=\"string\">&#x27;cnt&#x27;</span>&#125;)</span><br><span class=\"line\">df21_lan_ch_r=df21_Ea[<span class=\"string\">&#x27;Q7_Part_2&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>]==<span class=\"string\">&#x27;China&#x27;</span>].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q7_Part_2&#x27;</span>:<span class=\"string\">&#x27;cnt&#x27;</span>&#125;)</span><br><span class=\"line\">df21_lan_ch_s=df21_Ea[<span class=\"string\">&#x27;Q7_Part_3&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>]==<span class=\"string\">&#x27;China&#x27;</span>].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q7_Part_3&#x27;</span>:<span class=\"string\">&#x27;cnt&#x27;</span>&#125;)</span><br><span class=\"line\">df21_lan_ch_c=df21_Ea[<span class=\"string\">&#x27;Q7_Part_4&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>]==<span class=\"string\">&#x27;China&#x27;</span>].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q7_Part_4&#x27;</span>:<span class=\"string\">&#x27;cnt&#x27;</span>&#125;)</span><br><span class=\"line\">df21_lan_ch_cc=df21_Ea[<span class=\"string\">&#x27;Q7_Part_5&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>]==<span class=\"string\">&#x27;China&#x27;</span>].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q7_Part_5&#x27;</span>:<span class=\"string\">&#x27;cnt&#x27;</span>&#125;)</span><br><span class=\"line\">df21_lan_ch_j=df21_Ea[<span class=\"string\">&#x27;Q7_Part_6&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>]==<span class=\"string\">&#x27;China&#x27;</span>].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q7_Part_6&#x27;</span>:<span class=\"string\">&#x27;cnt&#x27;</span>&#125;)</span><br><span class=\"line\">df21_lan_ch_js=df21_Ea[<span class=\"string\">&#x27;Q7_Part_7&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>]==<span class=\"string\">&#x27;China&#x27;</span>].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q7_Part_7&#x27;</span>:<span class=\"string\">&#x27;cnt&#x27;</span>&#125;)</span><br><span class=\"line\">df21_lan_ch_ju=df21_Ea[<span class=\"string\">&#x27;Q7_Part_8&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>]==<span class=\"string\">&#x27;China&#x27;</span>].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q7_Part_8&#x27;</span>:<span class=\"string\">&#x27;cnt&#x27;</span>&#125;)</span><br><span class=\"line\">df21_lan_ch_sw=df21_Ea[<span class=\"string\">&#x27;Q7_Part_9&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>]==<span class=\"string\">&#x27;China&#x27;</span>].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q7_Part_9&#x27;</span>:<span class=\"string\">&#x27;cnt&#x27;</span>&#125;)</span><br><span class=\"line\">df21_lan_ch_b=df21_Ea[<span class=\"string\">&#x27;Q7_Part_10&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>]==<span class=\"string\">&#x27;China&#x27;</span>].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q7_Part_10&#x27;</span>:<span class=\"string\">&#x27;cnt&#x27;</span>&#125;)</span><br><span class=\"line\">df21_lan_ch_ma=df21_Ea[<span class=\"string\">&#x27;Q7_Part_11&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>]==<span class=\"string\">&#x27;China&#x27;</span>].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q7_Part_11&#x27;</span>:<span class=\"string\">&#x27;cnt&#x27;</span>&#125;)</span><br><span class=\"line\">df21_lan_ch_n=df21_Ea[<span class=\"string\">&#x27;Q7_Part_12&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>]==<span class=\"string\">&#x27;China&#x27;</span>].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q7_Part_12&#x27;</span>:<span class=\"string\">&#x27;cnt&#x27;</span>&#125;)</span><br><span class=\"line\">ch_lan = pd.concat([df21_lan_ch_p,df21_lan_ch_r,df21_lan_ch_s,df21_lan_ch_c,df21_lan_ch_cc,df21_lan_ch_j,df21_lan_ch_js,df21_lan_ch_ju,df21_lan_ch_sw,df21_lan_ch_b,df21_lan_ch_ma,df21_lan_ch_n])</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">df21_lan_jp_p=df21_Ea[<span class=\"string\">&#x27;Q7_Part_1&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>]==<span class=\"string\">&#x27;Japan&#x27;</span>].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q7_Part_1&#x27;</span>:<span class=\"string\">&#x27;cnt&#x27;</span>&#125;)</span><br><span class=\"line\">df21_lan_jp_r=df21_Ea[<span class=\"string\">&#x27;Q7_Part_2&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>]==<span class=\"string\">&#x27;Japan&#x27;</span>].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q7_Part_2&#x27;</span>:<span class=\"string\">&#x27;cnt&#x27;</span>&#125;)</span><br><span class=\"line\">df21_lan_jp_s=df21_Ea[<span class=\"string\">&#x27;Q7_Part_3&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>]==<span class=\"string\">&#x27;Japan&#x27;</span>].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q7_Part_3&#x27;</span>:<span class=\"string\">&#x27;cnt&#x27;</span>&#125;)</span><br><span class=\"line\">df21_lan_jp_c=df21_Ea[<span class=\"string\">&#x27;Q7_Part_4&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>]==<span class=\"string\">&#x27;Japan&#x27;</span>].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q7_Part_4&#x27;</span>:<span class=\"string\">&#x27;cnt&#x27;</span>&#125;)</span><br><span class=\"line\">df21_lan_jp_cc=df21_Ea[<span class=\"string\">&#x27;Q7_Part_5&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>]==<span class=\"string\">&#x27;Japan&#x27;</span>].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q7_Part_5&#x27;</span>:<span class=\"string\">&#x27;cnt&#x27;</span>&#125;)</span><br><span class=\"line\">df21_lan_jp_j=df21_Ea[<span class=\"string\">&#x27;Q7_Part_6&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>]==<span class=\"string\">&#x27;Japan&#x27;</span>].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q7_Part_6&#x27;</span>:<span class=\"string\">&#x27;cnt&#x27;</span>&#125;)</span><br><span class=\"line\">df21_lan_jp_js=df21_Ea[<span class=\"string\">&#x27;Q7_Part_7&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>]==<span class=\"string\">&#x27;Japan&#x27;</span>].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q7_Part_7&#x27;</span>:<span class=\"string\">&#x27;cnt&#x27;</span>&#125;)</span><br><span class=\"line\">df21_lan_jp_ju=df21_Ea[<span class=\"string\">&#x27;Q7_Part_8&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>]==<span class=\"string\">&#x27;Japan&#x27;</span>].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q7_Part_8&#x27;</span>:<span class=\"string\">&#x27;cnt&#x27;</span>&#125;)</span><br><span class=\"line\">df21_lan_jp_sw=df21_Ea[<span class=\"string\">&#x27;Q7_Part_9&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>]==<span class=\"string\">&#x27;Japan&#x27;</span>].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q7_Part_9&#x27;</span>:<span class=\"string\">&#x27;cnt&#x27;</span>&#125;)</span><br><span class=\"line\">df21_lan_jp_b=df21_Ea[<span class=\"string\">&#x27;Q7_Part_10&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>]==<span class=\"string\">&#x27;Japan&#x27;</span>].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q7_Part_10&#x27;</span>:<span class=\"string\">&#x27;cnt&#x27;</span>&#125;)</span><br><span class=\"line\">df21_lan_jp_ma=df21_Ea[<span class=\"string\">&#x27;Q7_Part_11&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>]==<span class=\"string\">&#x27;Japan&#x27;</span>].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q7_Part_11&#x27;</span>:<span class=\"string\">&#x27;cnt&#x27;</span>&#125;)</span><br><span class=\"line\">df21_lan_jp_n=df21_Ea[<span class=\"string\">&#x27;Q7_Part_12&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>]==<span class=\"string\">&#x27;Japan&#x27;</span>].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q7_Part_12&#x27;</span>:<span class=\"string\">&#x27;cnt&#x27;</span>&#125;)</span><br><span class=\"line\">jp_lan = pd.concat([df21_lan_jp_p,df21_lan_jp_r,df21_lan_jp_s,df21_lan_jp_c,df21_lan_jp_cc,df21_lan_jp_j,df21_lan_jp_js,df21_lan_jp_ju,df21_lan_jp_sw,df21_lan_jp_b,df21_lan_jp_ma,df21_lan_jp_n])</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">df21_lan_tw_p=df21_Ea[<span class=\"string\">&#x27;Q7_Part_1&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>]==<span class=\"string\">&#x27;Taiwan&#x27;</span>].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q7_Part_1&#x27;</span>:<span class=\"string\">&#x27;cnt&#x27;</span>&#125;)</span><br><span class=\"line\">df21_lan_tw_r=df21_Ea[<span class=\"string\">&#x27;Q7_Part_2&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>]==<span class=\"string\">&#x27;Taiwan&#x27;</span>].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q7_Part_2&#x27;</span>:<span class=\"string\">&#x27;cnt&#x27;</span>&#125;)</span><br><span class=\"line\">df21_lan_tw_s=df21_Ea[<span class=\"string\">&#x27;Q7_Part_3&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>]==<span class=\"string\">&#x27;Taiwan&#x27;</span>].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q7_Part_3&#x27;</span>:<span class=\"string\">&#x27;cnt&#x27;</span>&#125;)</span><br><span class=\"line\">df21_lan_tw_c=df21_Ea[<span class=\"string\">&#x27;Q7_Part_4&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>]==<span class=\"string\">&#x27;Taiwan&#x27;</span>].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q7_Part_4&#x27;</span>:<span class=\"string\">&#x27;cnt&#x27;</span>&#125;)</span><br><span class=\"line\">df21_lan_tw_cc=df21_Ea[<span class=\"string\">&#x27;Q7_Part_5&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>]==<span class=\"string\">&#x27;Taiwan&#x27;</span>].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q7_Part_5&#x27;</span>:<span class=\"string\">&#x27;cnt&#x27;</span>&#125;)</span><br><span class=\"line\">df21_lan_tw_j=df21_Ea[<span class=\"string\">&#x27;Q7_Part_6&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>]==<span class=\"string\">&#x27;Taiwan&#x27;</span>].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q7_Part_6&#x27;</span>:<span class=\"string\">&#x27;cnt&#x27;</span>&#125;)</span><br><span class=\"line\">df21_lan_tw_js=df21_Ea[<span class=\"string\">&#x27;Q7_Part_7&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>]==<span class=\"string\">&#x27;Taiwan&#x27;</span>].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q7_Part_7&#x27;</span>:<span class=\"string\">&#x27;cnt&#x27;</span>&#125;)</span><br><span class=\"line\">df21_lan_tw_ju=df21_Ea[<span class=\"string\">&#x27;Q7_Part_8&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>]==<span class=\"string\">&#x27;Taiwan&#x27;</span>].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q7_Part_8&#x27;</span>:<span class=\"string\">&#x27;cnt&#x27;</span>&#125;)</span><br><span class=\"line\">df21_lan_tw_sw=df21_Ea[<span class=\"string\">&#x27;Q7_Part_9&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>]==<span class=\"string\">&#x27;Taiwan&#x27;</span>].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q7_Part_9&#x27;</span>:<span class=\"string\">&#x27;cnt&#x27;</span>&#125;)</span><br><span class=\"line\">df21_lan_tw_b=df21_Ea[<span class=\"string\">&#x27;Q7_Part_10&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>]==<span class=\"string\">&#x27;Taiwan&#x27;</span>].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q7_Part_10&#x27;</span>:<span class=\"string\">&#x27;cnt&#x27;</span>&#125;)</span><br><span class=\"line\">df21_lan_tw_ma=df21_Ea[<span class=\"string\">&#x27;Q7_Part_11&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>]==<span class=\"string\">&#x27;Taiwan&#x27;</span>].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q7_Part_11&#x27;</span>:<span class=\"string\">&#x27;cnt&#x27;</span>&#125;)</span><br><span class=\"line\">df21_lan_tw_n=df21_Ea[<span class=\"string\">&#x27;Q7_Part_12&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>]==<span class=\"string\">&#x27;Taiwan&#x27;</span>].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q7_Part_12&#x27;</span>:<span class=\"string\">&#x27;cnt&#x27;</span>&#125;)</span><br><span class=\"line\">tw_lan = pd.concat([df21_lan_tw_p,df21_lan_tw_r,df21_lan_tw_s,df21_lan_tw_c,df21_lan_tw_cc,df21_lan_tw_j,df21_lan_tw_js,df21_lan_tw_ju,df21_lan_tw_sw,df21_lan_tw_b,df21_lan_tw_ma,df21_lan_tw_n])</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">df21_lan_ko_p=df21_Ea[<span class=\"string\">&#x27;Q7_Part_1&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>]==<span class=\"string\">&#x27;South Korea&#x27;</span>].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q7_Part_1&#x27;</span>:<span class=\"string\">&#x27;cnt&#x27;</span>&#125;)</span><br><span class=\"line\">df21_lan_ko_r=df21_Ea[<span class=\"string\">&#x27;Q7_Part_2&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>]==<span class=\"string\">&#x27;South Korea&#x27;</span>].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q7_Part_2&#x27;</span>:<span class=\"string\">&#x27;cnt&#x27;</span>&#125;)</span><br><span class=\"line\">df21_lan_ko_s=df21_Ea[<span class=\"string\">&#x27;Q7_Part_3&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>]==<span class=\"string\">&#x27;South Korea&#x27;</span>].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q7_Part_3&#x27;</span>:<span class=\"string\">&#x27;cnt&#x27;</span>&#125;)</span><br><span class=\"line\">df21_lan_ko_c=df21_Ea[<span class=\"string\">&#x27;Q7_Part_4&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>]==<span class=\"string\">&#x27;South Korea&#x27;</span>].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q7_Part_4&#x27;</span>:<span class=\"string\">&#x27;cnt&#x27;</span>&#125;)</span><br><span class=\"line\">df21_lan_ko_cc=df21_Ea[<span class=\"string\">&#x27;Q7_Part_5&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>]==<span class=\"string\">&#x27;South Korea&#x27;</span>].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q7_Part_5&#x27;</span>:<span class=\"string\">&#x27;cnt&#x27;</span>&#125;)</span><br><span class=\"line\">df21_lan_ko_j=df21_Ea[<span class=\"string\">&#x27;Q7_Part_6&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>]==<span class=\"string\">&#x27;South Korea&#x27;</span>].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q7_Part_6&#x27;</span>:<span class=\"string\">&#x27;cnt&#x27;</span>&#125;)</span><br><span class=\"line\">df21_lan_ko_js=df21_Ea[<span class=\"string\">&#x27;Q7_Part_7&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>]==<span class=\"string\">&#x27;South Korea&#x27;</span>].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q7_Part_7&#x27;</span>:<span class=\"string\">&#x27;cnt&#x27;</span>&#125;)</span><br><span class=\"line\">df21_lan_ko_ju=df21_Ea[<span class=\"string\">&#x27;Q7_Part_8&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>]==<span class=\"string\">&#x27;South Korea&#x27;</span>].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q7_Part_8&#x27;</span>:<span class=\"string\">&#x27;cnt&#x27;</span>&#125;)</span><br><span class=\"line\">df21_lan_ko_sw=df21_Ea[<span class=\"string\">&#x27;Q7_Part_9&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>]==<span class=\"string\">&#x27;South Korea&#x27;</span>].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q7_Part_9&#x27;</span>:<span class=\"string\">&#x27;cnt&#x27;</span>&#125;)</span><br><span class=\"line\">df21_lan_ko_b=df21_Ea[<span class=\"string\">&#x27;Q7_Part_10&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>]==<span class=\"string\">&#x27;South Korea&#x27;</span>].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q7_Part_10&#x27;</span>:<span class=\"string\">&#x27;cnt&#x27;</span>&#125;)</span><br><span class=\"line\">df21_lan_ko_ma=df21_Ea[<span class=\"string\">&#x27;Q7_Part_11&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>]==<span class=\"string\">&#x27;South Korea&#x27;</span>].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q7_Part_11&#x27;</span>:<span class=\"string\">&#x27;cnt&#x27;</span>&#125;)</span><br><span class=\"line\">df21_lan_ko_n=df21_Ea[<span class=\"string\">&#x27;Q7_Part_12&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>]==<span class=\"string\">&#x27;South Korea&#x27;</span>].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q7_Part_12&#x27;</span>:<span class=\"string\">&#x27;cnt&#x27;</span>&#125;)</span><br><span class=\"line\">ko_lan = pd.concat([df21_lan_ko_p,df21_lan_ko_r,df21_lan_ko_s,df21_lan_ko_c,df21_lan_ko_cc,df21_lan_ko_j,df21_lan_ko_js,df21_lan_ko_ju,df21_lan_ko_sw,df21_lan_ko_b,df21_lan_ko_ma,df21_lan_ko_n])</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ch_lan[<span class=\"string\">&#x27;cnt&#x27;</span>].to_list()</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">languages = [<span class=\"string\">&#x27;Python&#x27;</span>,<span class=\"string\">&#x27;R&#x27;</span>,<span class=\"string\">&#x27;SQL&#x27;</span>,<span class=\"string\">&#x27;C&#x27;</span>,<span class=\"string\">&#x27;C++&#x27;</span>,<span class=\"string\">&#x27;Java&#x27;</span>,<span class=\"string\">&#x27;Javascript&#x27;</span>,<span class=\"string\">&#x27;Julia&#x27;</span>,<span class=\"string\">&#x27;Swift&#x27;</span>,<span class=\"string\">&#x27;Bash&#x27;</span>,<span class=\"string\">&#x27;MATLAB&#x27;</span>,<span class=\"string\">&#x27;None&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">fig = go.Figure(data=[</span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;China&#x27;</span>, x = languages, </span><br><span class=\"line\">                         y = ch_lan[<span class=\"string\">&#x27;cnt&#x27;</span>].tolist()),</span><br><span class=\"line\">    </span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;Japan&#x27;</span>, x = languages, </span><br><span class=\"line\">                             y=jp_lan[<span class=\"string\">&#x27;cnt&#x27;</span>].tolist()),</span><br><span class=\"line\">    </span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;South Korea&#x27;</span>, x = languages, </span><br><span class=\"line\">                            y=ko_lan[<span class=\"string\">&#x27;cnt&#x27;</span>].tolist()),</span><br><span class=\"line\">    </span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;Taiwan&#x27;</span>, x = languages, </span><br><span class=\"line\">                            y=tw_lan[<span class=\"string\">&#x27;cnt&#x27;</span>].tolist())</span><br><span class=\"line\">          ])</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(title_text=<span class=\"string\">&quot;&lt;b&gt;21년 EastAisa kaggler들이 사용하는 언어&lt;/b&gt;&quot;</span>,title_font_size=<span class=\"number\">35</span>)</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mykaggle4/31.png\"><br><br><br><br><br><br><br><br></p>\n","site":{"data":{}},"excerpt":"그래프 목록\n * 학력\n * 직업\n * 경력\n * 연봉\n * 언어\n\n\n\n\n라이브러리 불러오기 & 캐글 데이터 불러오기\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pylab as plt\n\nimport plotly.io as pio\nimport plotly.express as px\nimport plotly.graph_obje","more":"<h3 id=\"그래프-목록\"><a href=\"#그래프-목록\" class=\"headerlink\" title=\"그래프 목록\"></a>그래프 목록</h3><ul>\n<li>학력</li>\n<li>직업</li>\n<li>경력</li>\n<li>연봉</li>\n<li>언어</li>\n</ul>\n<br>\n<br>\n<br>\n\n<h3 id=\"라이브러리-불러오기-amp-캐글-데이터-불러오기\"><a href=\"#라이브러리-불러오기-amp-캐글-데이터-불러오기\" class=\"headerlink\" title=\"라이브러리 불러오기 &amp; 캐글 데이터 불러오기\"></a><strong>라이브러리 불러오기 &amp; 캐글 데이터 불러오기</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">import</span> seaborn <span class=\"keyword\">as</span> sns</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pylab <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> plotly.io <span class=\"keyword\">as</span> pio</span><br><span class=\"line\"><span class=\"keyword\">import</span> plotly.express <span class=\"keyword\">as</span> px</span><br><span class=\"line\"><span class=\"keyword\">import</span> plotly.graph_objects <span class=\"keyword\">as</span> go</span><br><span class=\"line\"><span class=\"keyword\">import</span> plotly.figure_factory <span class=\"keyword\">as</span> ff</span><br><span class=\"line\"><span class=\"keyword\">from</span> plotly.subplots <span class=\"keyword\">import</span> make_subplots</span><br><span class=\"line\"><span class=\"keyword\">from</span> plotly.offline <span class=\"keyword\">import</span> init_notebook_mode, iplot</span><br><span class=\"line\">init_notebook_mode(connected=<span class=\"literal\">True</span>)</span><br><span class=\"line\">pio.templates.default = <span class=\"string\">&quot;none&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># import plotly.offline as py</span></span><br><span class=\"line\"><span class=\"comment\"># py.offline.init_notebook_mode()</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">for</span> dirname, _, filenames <span class=\"keyword\">in</span> os.walk(<span class=\"string\">&#x27;/kaggle/input&#x27;</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> filename <span class=\"keyword\">in</span> filenames:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(os.path.join(dirname, filename))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> warnings</span><br><span class=\"line\">warnings.filterwarnings(<span class=\"string\">&quot;ignore&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df17= pd.read_csv(<span class=\"string\">&quot;/kaggle/input/kaggle-survey-2017/multipleChoiceResponses.csv&quot;</span>, encoding=<span class=\"string\">&quot;ISO-8859-1&quot;</span>)</span><br><span class=\"line\">df18= pd.read_csv(<span class=\"string\">&quot;/kaggle/input/kaggle-survey-2018/multipleChoiceResponses.csv&quot;</span>, )</span><br><span class=\"line\">df19= pd.read_csv(<span class=\"string\">&quot;/kaggle/input/kaggle-survey-2019/multiple_choice_responses.csv&quot;</span>, )</span><br><span class=\"line\">df20= pd.read_csv(<span class=\"string\">&quot;/kaggle/input/kaggle-survey-2020/kaggle_survey_2020_responses.csv&quot;</span>, )</span><br><span class=\"line\">df21= pd.read_csv(<span class=\"string\">&quot;/kaggle/input/kaggle-survey-2021/kaggle_survey_2021_responses.csv&quot;</span>, )</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"EastAsia-데이터-Grouping\"><a href=\"#EastAsia-데이터-Grouping\" class=\"headerlink\" title=\"EastAsia 데이터 Grouping\"></a><strong>EastAsia 데이터 Grouping</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## East Asia에는 대한민국, 일본, 중국, 타이완, 몽골, 북조선 총 6개의 국가가 속해 있다. </span></span><br><span class=\"line\"></span><br><span class=\"line\">EastAsia17 = [<span class=\"string\">&#x27;China&#x27;</span>,<span class=\"string\">&quot;People &#x27;s Republic of China&quot;</span>, <span class=\"string\">&#x27;Taiwan&#x27;</span>, <span class=\"string\">&#x27;South Korea&#x27;</span>, <span class=\"string\">&#x27;Japan&#x27;</span>]</span><br><span class=\"line\">EastAsia18 = [<span class=\"string\">&#x27;China&#x27;</span>, <span class=\"string\">&#x27;South Korea&#x27;</span>, <span class=\"string\">&#x27;Japan&#x27;</span>, <span class=\"string\">&#x27;Republic of Korea&#x27;</span>] </span><br><span class=\"line\">EastAsia19 = [<span class=\"string\">&#x27;China&#x27;</span>,<span class=\"string\">&#x27;Taiwan&#x27;</span>, <span class=\"string\">&#x27;South Korea&#x27;</span>, <span class=\"string\">&#x27;Japan&#x27;</span>, <span class=\"string\">&#x27;Republic of Korea&#x27;</span>]</span><br><span class=\"line\">EastAsia20 = [<span class=\"string\">&#x27;China&#x27;</span>,<span class=\"string\">&#x27;Taiwan&#x27;</span>, <span class=\"string\">&#x27;South Korea&#x27;</span>, <span class=\"string\">&#x27;Japan&#x27;</span>, <span class=\"string\">&#x27;Republic of Korea&#x27;</span>]</span><br><span class=\"line\">EastAsia21 = [<span class=\"string\">&#x27;China&#x27;</span>,<span class=\"string\">&#x27;Taiwan&#x27;</span>, <span class=\"string\">&#x27;South Korea&#x27;</span>, <span class=\"string\">&#x27;Japan&#x27;</span>]</span><br><span class=\"line\">EastAsia = [<span class=\"string\">&#x27;Republic of Korea&#x27;</span>,<span class=\"string\">&#x27;China&#x27;</span>,<span class=\"string\">&#x27;Taiwan&#x27;</span>, <span class=\"string\">&#x27;South Korea&#x27;</span>, <span class=\"string\">&#x27;Japan&#x27;</span>, <span class=\"string\">&quot;People &#x27;s Republic of China&quot;</span> ]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#21년</span></span><br><span class=\"line\">df21_Ea = df21[df21[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(EastAsia)]</span><br><span class=\"line\">df21_Wo = df21[~df21[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(EastAsia )]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##  동아시아 국가를 제외한 국가들을 region 열의 데이터 값을 World 로 바꿔줌</span></span><br><span class=\"line\"><span class=\"comment\"># region 열 생성</span></span><br><span class=\"line\">df21[<span class=\"string\">&#x27;region&#x27;</span>]=[<span class=\"string\">&quot;EastAsia&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> EastAsia </span><br><span class=\"line\">                            <span class=\"keyword\">else</span> <span class=\"string\">&quot;World&quot;</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> df21[<span class=\"string\">&#x27;Q3&#x27;</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#20년</span></span><br><span class=\"line\">df20_Ea = df20[df20[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(EastAsia)]</span><br><span class=\"line\">df20_Wo = df20[~df20[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(EastAsia )]</span><br><span class=\"line\">df20[<span class=\"string\">&#x27;region&#x27;</span>]=[<span class=\"string\">&quot;EastAsia&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> EastAsia </span><br><span class=\"line\">                            <span class=\"keyword\">else</span> <span class=\"string\">&quot;World&quot;</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> df20[<span class=\"string\">&#x27;Q3&#x27;</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#19년</span></span><br><span class=\"line\">df19_Ea = df19[df19[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(EastAsia)]</span><br><span class=\"line\">df19_Wo = df19[~df19[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(EastAsia )]</span><br><span class=\"line\">df19[<span class=\"string\">&#x27;region&#x27;</span>]=[<span class=\"string\">&quot;EastAsia&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> EastAsia</span><br><span class=\"line\">                            <span class=\"keyword\">else</span> <span class=\"string\">&quot;World&quot;</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> df19[<span class=\"string\">&#x27;Q3&#x27;</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#18년</span></span><br><span class=\"line\">df18_Ea = df18[df18[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(EastAsia)]</span><br><span class=\"line\">df18_Wo = df18[~df18[<span class=\"string\">&#x27;Q3&#x27;</span>].isin(EastAsia )]</span><br><span class=\"line\">df18[<span class=\"string\">&#x27;region&#x27;</span>]=[<span class=\"string\">&quot;EastAsia&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> EastAsia </span><br><span class=\"line\">                            <span class=\"keyword\">else</span> <span class=\"string\">&quot;World&quot;</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> df18[<span class=\"string\">&#x27;Q3&#x27;</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#17년</span></span><br><span class=\"line\">df17_Ea = df17[df17[<span class=\"string\">&#x27;Country&#x27;</span>].isin(EastAsia)]</span><br><span class=\"line\">df17_Wo = df17[~df17[<span class=\"string\">&#x27;Country&#x27;</span>].isin(EastAsia )]</span><br><span class=\"line\">df17[<span class=\"string\">&#x27;region&#x27;</span>]=[<span class=\"string\">&quot;EastAsia&quot;</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> EastAsia </span><br><span class=\"line\">                            <span class=\"keyword\">else</span> <span class=\"string\">&quot;World&quot;</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> df17[<span class=\"string\">&#x27;Country&#x27;</span>]]</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"학력\"><a href=\"#학력\" class=\"headerlink\" title=\"학력\"></a><strong>학력</strong></h3><hr>\n<ul>\n<li>Q4</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df21_degree= df21[<span class=\"string\">&#x27;Q4&#x27;</span>].value_counts().to_frame().reset_index()</span><br><span class=\"line\">df21_degree</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mykaggle4/1.PNG\"><br><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#마지막 행 삭제</span></span><br><span class=\"line\">df21_degree.drop(df21_degree.index[<span class=\"number\">7</span>])</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mykaggle4/2.PNG\"><br><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df21_degree[<span class=\"string\">&#x27;Q4&#x27;</span>].to_numpy()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mykaggle4/3.PNG\"><br><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df21_degree[<span class=\"string\">&#x27;index&#x27;</span>].tolist()</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/mykaggle4/4.PNG\"><br><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">degree = df21_degree[<span class=\"string\">&#x27;index&#x27;</span>].tolist()</span><br><span class=\"line\"></span><br><span class=\"line\">fig = go.Figure(data=[</span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;21년 World kaggler들의 학력&#x27;</span>, x=degree, y=df21_degree[<span class=\"string\">&#x27;Q4&#x27;</span>].to_numpy() ,orientation=<span class=\"string\">&#x27;v&#x27;</span>)])</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(title_text=<span class=\"string\">&quot;&lt;b&gt;21년 World kaggler들의 학력&lt;/b&gt;&quot;</span>,title_font_size=<span class=\"number\">35</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/mykaggle4/5.png\"><br><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#전체 코드</span></span><br><span class=\"line\">df21_degree= df21[<span class=\"string\">&#x27;Q4&#x27;</span>].value_counts().to_frame().reset_index()</span><br><span class=\"line\">df21_degree</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#마지막 행 삭제</span></span><br><span class=\"line\">df21_degree.drop(df21_degree.index[<span class=\"number\">7</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">degree = df21_degree[<span class=\"string\">&#x27;index&#x27;</span>].tolist()</span><br><span class=\"line\"></span><br><span class=\"line\">fig = go.Figure(data=[</span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;21년 World kaggler들의 학력&#x27;</span>, x=degree, y=df21_degree[<span class=\"string\">&#x27;Q4&#x27;</span>].to_numpy() ,orientation=<span class=\"string\">&#x27;v&#x27;</span>)])</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(title_text=<span class=\"string\">&quot;&lt;b&gt;21년 World kaggler들의 학력&lt;/b&gt;&quot;</span>,title_font_size=<span class=\"number\">35</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mykaggle4/5.png\"><br><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df21_Ea[<span class=\"string\">&#x27;Q4&#x27;</span>].value_counts().index</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mykaggle4/6.PNG\"><br><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df21_ea_degree = df21_Ea[<span class=\"string\">&#x27;Q4&#x27;</span>].value_counts().to_frame().reset_index()</span><br><span class=\"line\">df21_ea_degree[<span class=\"string\">&#x27;Q4&#x27;</span>].to_numpy()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mykaggle4/7.PNG\"><br><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">degree = df21_Ea[<span class=\"string\">&#x27;Q4&#x27;</span>].value_counts().index</span><br><span class=\"line\"></span><br><span class=\"line\">fig = go.Figure(data=[</span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;China&#x27;</span>, x = degree, </span><br><span class=\"line\">                           y=df21_Ea[<span class=\"string\">&#x27;Q4&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>] ==<span class=\"string\">&#x27;China&#x27;</span>].value_counts()),</span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;Japan&#x27;</span>, x = degree, </span><br><span class=\"line\">                             y=df21_Ea[<span class=\"string\">&#x27;Q4&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>] ==<span class=\"string\">&#x27;Japan&#x27;</span>].value_counts()),</span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;South Korea&#x27;</span>, x= degree, </span><br><span class=\"line\">                            y=df21_Ea[<span class=\"string\">&#x27;Q4&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>] ==<span class=\"string\">&#x27;South Korea&#x27;</span>].value_counts()),</span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;Taiwan&#x27;</span>, x= degree, </span><br><span class=\"line\">                            y=df21_Ea[<span class=\"string\">&#x27;Q4&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>] ==<span class=\"string\">&#x27;Taiwan&#x27;</span>].value_counts())</span><br><span class=\"line\">    ])</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(title_text=<span class=\"string\">&quot;&lt;b&gt;21년 EastAisa kaggler들의 학력&lt;/b&gt;&quot;</span>,title_font_size=<span class=\"number\">35</span>)</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mykaggle4/8.png\"><br><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#전체 코드</span></span><br><span class=\"line\"></span><br><span class=\"line\">df21_ea_degree = df21_Ea[<span class=\"string\">&#x27;Q4&#x27;</span>].value_counts().to_frame().reset_index()</span><br><span class=\"line\"></span><br><span class=\"line\">degree = df21_Ea[<span class=\"string\">&#x27;Q4&#x27;</span>].value_counts().index</span><br><span class=\"line\"></span><br><span class=\"line\">fig = go.Figure(data=[</span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;China&#x27;</span>, x = degree, </span><br><span class=\"line\">                           y=df21_Ea[<span class=\"string\">&#x27;Q4&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>] ==<span class=\"string\">&#x27;China&#x27;</span>].value_counts()),</span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;Japan&#x27;</span>, x = degree, </span><br><span class=\"line\">                             y=df21_Ea[<span class=\"string\">&#x27;Q4&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>] ==<span class=\"string\">&#x27;Japan&#x27;</span>].value_counts()),</span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;South Korea&#x27;</span>, x= degree, </span><br><span class=\"line\">                            y=df21_Ea[<span class=\"string\">&#x27;Q4&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>] ==<span class=\"string\">&#x27;South Korea&#x27;</span>].value_counts()),</span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;Taiwan&#x27;</span>, x= degree, </span><br><span class=\"line\">                            y=df21_Ea[<span class=\"string\">&#x27;Q4&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>] ==<span class=\"string\">&#x27;Taiwan&#x27;</span>].value_counts())</span><br><span class=\"line\">    ])</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(title_text=<span class=\"string\">&quot;&lt;b&gt;21년 EastAisa kaggler들의 학력&lt;/b&gt;&quot;</span>,title_font_size=<span class=\"number\">35</span>)</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"직업\"><a href=\"#직업\" class=\"headerlink\" title=\"직업\"></a><strong>직업</strong></h3><hr>\n<ul>\n<li>Q5</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Data_Analyst =[<span class=\"string\">&#x27;Data Analyst&#x27;</span>,<span class=\"string\">&#x27;Data Miner,Information technology&#x27;</span>,<span class=\"string\">&#x27;Data Miner&#x27;</span>,</span><br><span class=\"line\">               <span class=\"string\">&#x27;Predictive Modeler&#x27;</span>,<span class=\"string\">&#x27;Information technology, networking, or system administration&#x27;</span> ]</span><br><span class=\"line\">Data_Engineer =[<span class=\"string\">&#x27;A business discipline (accounting, economics, finance, etc.)&#x27;</span>, <span class=\"string\">&#x27;Business Analyst&#x27;</span>,</span><br><span class=\"line\">                <span class=\"string\">&#x27;Statistician&#x27;</span>, <span class=\"string\">&#x27;Mathematics or statistics&#x27;</span>, <span class=\"string\">&#x27;Data Scientist&#x27;</span>, <span class=\"string\">&#x27;Environmental science or geology&#x27;</span>, </span><br><span class=\"line\">                <span class=\"string\">&#x27;Humanities&#x27;</span>, <span class=\"string\">&#x27;Machine Learning Engineer&#x27;</span>, <span class=\"string\">&#x27;Medical or life sciences (biology, chemistry, medicine, etc.)&#x27;</span>, </span><br><span class=\"line\">                <span class=\"string\">&#x27;Physics or astronomy&#x27;</span>, <span class=\"string\">&#x27;Research Scientist&#x27;</span>, <span class=\"string\">&#x27;Researcher&#x27;</span>, <span class=\"string\">&#x27;Scientist/Researcher&#x27;</span>, <span class=\"string\">&#x27;Data Engineer&#x27;</span>,</span><br><span class=\"line\">                <span class=\"string\">&#x27;Social sciences (anthropology, psychology, sociology, etc.)&#x27;</span>,<span class=\"string\">&#x27;Software Developer/Software Engineer&#x27;</span>,<span class=\"string\">&#x27;Humanities (history, literature, philosophy, etc.)&#x27;</span>]</span><br><span class=\"line\">Developer=[<span class=\"string\">&#x27;Developer Relations/Advocacy&#x27;</span>,<span class=\"string\">&#x27;Engineer&#x27;</span>,<span class=\"string\">&#x27;Engineering (non-computer focused)&#x27;</span>,</span><br><span class=\"line\">           <span class=\"string\">&#x27;Programmer&#x27;</span>,<span class=\"string\">&#x27;Software Engineer&#x27;</span>, <span class=\"string\">&#x27;Computer Scientist&#x27;</span>,<span class=\"string\">&#x27;Computer science (software engineering, etc.)&#x27;</span>, </span><br><span class=\"line\">           <span class=\"string\">&#x27;Fine arts or performing arts&#x27;</span>,<span class=\"string\">&#x27;Product Manager&#x27;</span>, </span><br><span class=\"line\">           <span class=\"string\">&#x27;Product/Project Manager&#x27;</span>,<span class=\"string\">&#x27;Program/Project Manager&#x27;</span>,<span class=\"string\">&#x27;DBA/Database Engineer&#x27;</span>]</span><br><span class=\"line\">Not_Employeed =[<span class=\"string\">&#x27;Currently not employed&#x27;</span>, <span class=\"string\">&#x27;Not employed&#x27;</span>, <span class=\"string\">&#x27;Student&#x27;</span>]</span><br><span class=\"line\">Others = [<span class=\"string\">&#x27;I never declared a major&#x27;</span>, <span class=\"string\">&#x27;Other&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df21[<span class=\"string\">&#x27;Q5&#x27;</span>].value_counts()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mykaggle4/9.PNG\"><br><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df21_Ea_DA=df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q5&#x27;</span>].isin(Data_Analyst)].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;Data_Analyst&#x27;</span>&#125;)</span><br><span class=\"line\">df21_Ea_DE=df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q5&#x27;</span>].isin(Data_Engineer)].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;Data_Engineer&#x27;</span>&#125;)</span><br><span class=\"line\">df21_Ea_D=df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q5&#x27;</span>].isin(Developer)].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;Developer&#x27;</span>&#125;)</span><br><span class=\"line\">df21_Ea_NE=df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q5&#x27;</span>].isin(Not_Employeed)].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;Not_Employeed&#x27;</span>&#125;)</span><br><span class=\"line\">df21_Ea_O=df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q5&#x27;</span>].isin(Others)].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;Others&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">job=(df21_Ea_DA.join(df21_Ea_DE).join(df21_Ea_D).join(df21_Ea_NE).join(df21_Ea_O))</span><br><span class=\"line\">job</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mykaggle4/10.PNG\"><br><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">job.iloc[<span class=\"number\">1</span>,<span class=\"number\">0</span>:<span class=\"number\">5</span>].to_numpy()</span><br></pre></td></tr></table></figure>\n<pre><code>array([ 46, 292, 254, 211, 118])\n</code></pre>\n<br>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">job_ =job.columns</span><br><span class=\"line\">fig = go.Figure(data=[</span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;China&#x27;</span>, x = job_, </span><br><span class=\"line\">                           y=job.iloc[<span class=\"number\">0</span>,<span class=\"number\">0</span>:<span class=\"number\">5</span>].to_numpy()),</span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;Japan&#x27;</span>, x = job_, </span><br><span class=\"line\">                             y=job.iloc[<span class=\"number\">1</span>,<span class=\"number\">0</span>:<span class=\"number\">5</span>].to_numpy()),</span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;South Korea&#x27;</span>, x= job_, </span><br><span class=\"line\">                            y=job.iloc[<span class=\"number\">2</span>,<span class=\"number\">0</span>:<span class=\"number\">5</span>].to_numpy()),</span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;Taiwan&#x27;</span>, x= job_, </span><br><span class=\"line\">                            y=job.iloc[<span class=\"number\">3</span>,<span class=\"number\">0</span>:<span class=\"number\">5</span>].to_numpy())</span><br><span class=\"line\">    ])</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(title_text=<span class=\"string\">&quot;&lt;b&gt;21년 EastAisa kaggler들의 직업&lt;/b&gt;&quot;</span>,title_font_size=<span class=\"number\">35</span>)</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mykaggle4/11.png\"><br><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#전체 코드</span></span><br><span class=\"line\"></span><br><span class=\"line\">Data_Analyst =[<span class=\"string\">&#x27;Data Analyst&#x27;</span>,<span class=\"string\">&#x27;Data Miner,Information technology&#x27;</span>,<span class=\"string\">&#x27;Data Miner&#x27;</span>,</span><br><span class=\"line\">               <span class=\"string\">&#x27;Predictive Modeler&#x27;</span>,<span class=\"string\">&#x27;Information technology, networking, or system administration&#x27;</span> ]</span><br><span class=\"line\">Data_Engineer =[<span class=\"string\">&#x27;A business discipline (accounting, economics, finance, etc.)&#x27;</span>, <span class=\"string\">&#x27;Business Analyst&#x27;</span>,</span><br><span class=\"line\">                <span class=\"string\">&#x27;Statistician&#x27;</span>, <span class=\"string\">&#x27;Mathematics or statistics&#x27;</span>, <span class=\"string\">&#x27;Data Scientist&#x27;</span>, <span class=\"string\">&#x27;Environmental science or geology&#x27;</span>, </span><br><span class=\"line\">                <span class=\"string\">&#x27;Humanities&#x27;</span>, <span class=\"string\">&#x27;Machine Learning Engineer&#x27;</span>, <span class=\"string\">&#x27;Medical or life sciences (biology, chemistry, medicine, etc.)&#x27;</span>, </span><br><span class=\"line\">                <span class=\"string\">&#x27;Physics or astronomy&#x27;</span>, <span class=\"string\">&#x27;Research Scientist&#x27;</span>, <span class=\"string\">&#x27;Researcher&#x27;</span>, <span class=\"string\">&#x27;Scientist/Researcher&#x27;</span>, <span class=\"string\">&#x27;Data Engineer&#x27;</span>,</span><br><span class=\"line\">                <span class=\"string\">&#x27;Social sciences (anthropology, psychology, sociology, etc.)&#x27;</span>,<span class=\"string\">&#x27;Software Developer/Software Engineer&#x27;</span>,<span class=\"string\">&#x27;Humanities (history, literature, philosophy, etc.)&#x27;</span>]</span><br><span class=\"line\">Developer=[<span class=\"string\">&#x27;Developer Relations/Advocacy&#x27;</span>,<span class=\"string\">&#x27;Engineer&#x27;</span>,<span class=\"string\">&#x27;Engineering (non-computer focused)&#x27;</span>,</span><br><span class=\"line\">           <span class=\"string\">&#x27;Programmer&#x27;</span>,<span class=\"string\">&#x27;Software Engineer&#x27;</span>, <span class=\"string\">&#x27;Computer Scientist&#x27;</span>,<span class=\"string\">&#x27;Computer science (software engineering, etc.)&#x27;</span>, </span><br><span class=\"line\">           <span class=\"string\">&#x27;Fine arts or performing arts&#x27;</span>,<span class=\"string\">&#x27;Product Manager&#x27;</span>, </span><br><span class=\"line\">           <span class=\"string\">&#x27;Product/Project Manager&#x27;</span>,<span class=\"string\">&#x27;Program/Project Manager&#x27;</span>,<span class=\"string\">&#x27;DBA/Database Engineer&#x27;</span>]</span><br><span class=\"line\">Not_Employeed =[<span class=\"string\">&#x27;Currently not employed&#x27;</span>, <span class=\"string\">&#x27;Not employed&#x27;</span>, <span class=\"string\">&#x27;Student&#x27;</span>]</span><br><span class=\"line\">Others = [<span class=\"string\">&#x27;I never declared a major&#x27;</span>, <span class=\"string\">&#x27;Other&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">df21_Ea_DA=df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q5&#x27;</span>].isin(Data_Analyst)].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;Data_Analyst&#x27;</span>&#125;)</span><br><span class=\"line\">df21_Ea_DE=df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q5&#x27;</span>].isin(Data_Engineer)].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;Data_Engineer&#x27;</span>&#125;)</span><br><span class=\"line\">df21_Ea_D=df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q5&#x27;</span>].isin(Developer)].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;Developer&#x27;</span>&#125;)</span><br><span class=\"line\">df21_Ea_NE=df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q5&#x27;</span>].isin(Not_Employeed)].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;Not_Employeed&#x27;</span>&#125;)</span><br><span class=\"line\">df21_Ea_O=df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q5&#x27;</span>].isin(Others)].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;Others&#x27;</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">job=(df21_Ea_DA.join(df21_Ea_DE).join(df21_Ea_D).join(df21_Ea_NE).join(df21_Ea_O))</span><br><span class=\"line\"></span><br><span class=\"line\">job_ =job.columns</span><br><span class=\"line\">fig = go.Figure(data=[</span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;China&#x27;</span>, x = job_, </span><br><span class=\"line\">                           y=job.iloc[<span class=\"number\">0</span>,<span class=\"number\">0</span>:<span class=\"number\">5</span>].to_numpy()),</span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;Japan&#x27;</span>, x = job_, </span><br><span class=\"line\">                             y=job.iloc[<span class=\"number\">1</span>,<span class=\"number\">0</span>:<span class=\"number\">5</span>].to_numpy()),</span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;South Korea&#x27;</span>, x= job_, </span><br><span class=\"line\">                            y=job.iloc[<span class=\"number\">2</span>,<span class=\"number\">0</span>:<span class=\"number\">5</span>].to_numpy()),</span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;Taiwan&#x27;</span>, x= job_, </span><br><span class=\"line\">                            y=job.iloc[<span class=\"number\">3</span>,<span class=\"number\">0</span>:<span class=\"number\">5</span>].to_numpy())</span><br><span class=\"line\">    ])</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(title_text=<span class=\"string\">&quot;&lt;b&gt;21년 EastAisa kaggler들의 직업&lt;/b&gt;&quot;</span>,title_font_size=<span class=\"number\">35</span>)</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"경력\"><a href=\"#경력\" class=\"headerlink\" title=\"경력\"></a><strong>경력</strong></h3><hr>\n<ul>\n<li>Q6</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df21[<span class=\"string\">&#x27;Q6&#x27;</span>].value_counts()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mykaggle4/12.PNG\"><br><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_3year = [<span class=\"string\">&#x27;I have never written code&#x27;</span>, <span class=\"string\">&#x27;&lt; 1 years&#x27;</span>, <span class=\"string\">&#x27;1-3 years&#x27;</span>]</span><br><span class=\"line\">_5year = [<span class=\"string\">&#x27;3-5 years &#x27;</span>,<span class=\"string\">&#x27;5-10 years&#x27;</span>]</span><br><span class=\"line\">_10year = [<span class=\"string\">&#x27;10-20 years&#x27;</span>,<span class=\"string\">&#x27;20+ years&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">df21_3year = df21[<span class=\"string\">&#x27;Q6&#x27;</span>][df21[<span class=\"string\">&#x27;Q6&#x27;</span>].isin(_3year)]</span><br><span class=\"line\">df21_5year = df21[<span class=\"string\">&#x27;Q6&#x27;</span>][df21[<span class=\"string\">&#x27;Q6&#x27;</span>].isin(_5year)]</span><br><span class=\"line\">df21_10year = df21[<span class=\"string\">&#x27;Q6&#x27;</span>][df21[<span class=\"string\">&#x27;Q6&#x27;</span>].isin(_10year)]</span><br><span class=\"line\"></span><br><span class=\"line\">df21_3year.count()</span><br><span class=\"line\">df21_5year.count()</span><br><span class=\"line\">df21_10year.count()</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df21_3year</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mykaggle4/13.PNG\"><br><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">years =[<span class=\"string\">&#x27;_3year&#x27;</span>,<span class=\"string\">&#x27;_5year&#x27;</span>, <span class=\"string\">&#x27;_10year&#x27;</span>]</span><br><span class=\"line\">values =[df21_3year.count(),</span><br><span class=\"line\">         df21_5year.count(),</span><br><span class=\"line\">        df21_10year.count()]</span><br><span class=\"line\"></span><br><span class=\"line\">fig = go.Figure(data=[</span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;21년 World kaggler들의 경력&#x27;</span>, x=years, y=values ,orientation=<span class=\"string\">&#x27;v&#x27;</span>),])</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(title_text=<span class=\"string\">&quot;&lt;b&gt;21년 World kaggler들의 경력&lt;/b&gt;&quot;</span>,title_font_size=<span class=\"number\">35</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mykaggle4/14.png\"><br><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#전체 코드</span></span><br><span class=\"line\">_3year = [<span class=\"string\">&#x27;I have never written code&#x27;</span>, <span class=\"string\">&#x27;&lt; 1 years&#x27;</span>, <span class=\"string\">&#x27;1-3 years&#x27;</span>]</span><br><span class=\"line\">_5year = [<span class=\"string\">&#x27;3-5 years &#x27;</span>,<span class=\"string\">&#x27;5-10 years&#x27;</span>]</span><br><span class=\"line\">_10year = [<span class=\"string\">&#x27;10-20 years&#x27;</span>,<span class=\"string\">&#x27;20+ years&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">df21_3year = df21[<span class=\"string\">&#x27;Q6&#x27;</span>][df21[<span class=\"string\">&#x27;Q6&#x27;</span>].isin(_3year)]</span><br><span class=\"line\">df21_5year = df21[<span class=\"string\">&#x27;Q6&#x27;</span>][df21[<span class=\"string\">&#x27;Q6&#x27;</span>].isin(_5year)]</span><br><span class=\"line\">df21_10year = df21[<span class=\"string\">&#x27;Q6&#x27;</span>][df21[<span class=\"string\">&#x27;Q6&#x27;</span>].isin(_10year)]</span><br><span class=\"line\"></span><br><span class=\"line\">df21_3year.count()</span><br><span class=\"line\">df21_5year.count()</span><br><span class=\"line\">df21_10year.count()</span><br><span class=\"line\"></span><br><span class=\"line\">years =[<span class=\"string\">&#x27;_3year&#x27;</span>,<span class=\"string\">&#x27;_5year&#x27;</span>, <span class=\"string\">&#x27;_10year&#x27;</span>]</span><br><span class=\"line\">values =[df21_3year.count(),</span><br><span class=\"line\">         df21_5year.count(),</span><br><span class=\"line\">        df21_10year.count()]</span><br><span class=\"line\"></span><br><span class=\"line\">fig = go.Figure(data=[</span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;21년 World kaggler들의 경력&#x27;</span>, x=years, y=values ,orientation=<span class=\"string\">&#x27;v&#x27;</span>),])</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(title_text=<span class=\"string\">&quot;&lt;b&gt;21년 World kaggler들의 경력&lt;/b&gt;&quot;</span>,title_font_size=<span class=\"number\">35</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>]</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mykaggle4/15.PNG\"><br><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_3year = [<span class=\"string\">&#x27;I have never written code&#x27;</span>, <span class=\"string\">&#x27;&lt; 1 years&#x27;</span>, <span class=\"string\">&#x27;1-3 years&#x27;</span>]</span><br><span class=\"line\">_5year = [<span class=\"string\">&#x27;3-5 years &#x27;</span>,<span class=\"string\">&#x27;5-10 years&#x27;</span>]</span><br><span class=\"line\">_10year = [<span class=\"string\">&#x27;10-20 years&#x27;</span>,<span class=\"string\">&#x27;20+ years&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">df21_Ea_3year = df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q6&#x27;</span>].isin(_3year)].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;3year&#x27;</span>&#125;)</span><br><span class=\"line\">df21_Ea_5year = df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q6&#x27;</span>].isin(_5year)].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;5year&#x27;</span>&#125;)</span><br><span class=\"line\">df21_Ea_10year = df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q6&#x27;</span>].isin(_10year)].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;10year&#x27;</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df21_Ea_3year</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mykaggle4/16.PNG\"><br><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df21_Ea_5year</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mykaggle4/17.PNG\"><br><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df21_Ea_10year</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mykaggle4/18.PNG\"><br><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">career=(df21_Ea_3year.join(df21_Ea_5year).join(df21_Ea_10year))</span><br><span class=\"line\">career</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mykaggle4/19.PNG\"><br><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">career.iloc[<span class=\"number\">0</span>,<span class=\"number\">0</span>:<span class=\"number\">3</span>] <span class=\"comment\">#China</span></span><br><span class=\"line\">career.iloc[<span class=\"number\">1</span>,<span class=\"number\">0</span>:<span class=\"number\">3</span>] <span class=\"comment\">#Japan</span></span><br><span class=\"line\">career.iloc[<span class=\"number\">2</span>,<span class=\"number\">0</span>:<span class=\"number\">3</span>] <span class=\"comment\">#South Korea</span></span><br><span class=\"line\">career.iloc[<span class=\"number\">3</span>,<span class=\"number\">0</span>:<span class=\"number\">3</span>] <span class=\"comment\">#Taiwan</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mykaggle4/20.PNG\"><br><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fig = go.Figure(data=[</span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;China&#x27;</span>, x = years, </span><br><span class=\"line\">                           y=career.iloc[<span class=\"number\">0</span>,<span class=\"number\">0</span>:<span class=\"number\">3</span>]),</span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;Japan&#x27;</span>, x = years, </span><br><span class=\"line\">                             y=career.iloc[<span class=\"number\">1</span>,<span class=\"number\">0</span>:<span class=\"number\">3</span>]),</span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;South Korea&#x27;</span>, x= years, </span><br><span class=\"line\">                            y=career.iloc[<span class=\"number\">2</span>,<span class=\"number\">0</span>:<span class=\"number\">3</span>]),</span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;Taiwan&#x27;</span>, x= years, </span><br><span class=\"line\">                            y=career.iloc[<span class=\"number\">3</span>,<span class=\"number\">0</span>:<span class=\"number\">3</span>])</span><br><span class=\"line\">    ])</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(title_text=<span class=\"string\">&quot;&lt;b&gt;21년 EastAisa kaggler들의 경력&lt;/b&gt;&quot;</span>,title_font_size=<span class=\"number\">35</span>)</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mykaggle4/21.png\"><br><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#최종 합친 코드</span></span><br><span class=\"line\">_3year = [<span class=\"string\">&#x27;I have never written code&#x27;</span>, <span class=\"string\">&#x27;&lt; 1 years&#x27;</span>, <span class=\"string\">&#x27;1-3 years&#x27;</span>]</span><br><span class=\"line\">_5year = [<span class=\"string\">&#x27;3-5 years &#x27;</span>,<span class=\"string\">&#x27;5-10 years&#x27;</span>]</span><br><span class=\"line\">_10year = [<span class=\"string\">&#x27;10-20 years&#x27;</span>,<span class=\"string\">&#x27;20+ years&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">df21_Ea_3year = df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q6&#x27;</span>].isin(_3year)].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;3year&#x27;</span>&#125;)</span><br><span class=\"line\">df21_Ea_5year = df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q6&#x27;</span>].isin(_5year)].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;5year&#x27;</span>&#125;)</span><br><span class=\"line\">df21_Ea_10year = df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q6&#x27;</span>].isin(_10year)].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q3&#x27;</span>:<span class=\"string\">&#x27;10year&#x27;</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">career=(df21_Ea_3year.join(df21_Ea_5year).join(df21_Ea_10year))</span><br><span class=\"line\">career</span><br><span class=\"line\"></span><br><span class=\"line\">career.iloc[<span class=\"number\">0</span>,<span class=\"number\">0</span>:<span class=\"number\">3</span>] <span class=\"comment\">#China</span></span><br><span class=\"line\">career.iloc[<span class=\"number\">1</span>,<span class=\"number\">0</span>:<span class=\"number\">3</span>] <span class=\"comment\">#Japan</span></span><br><span class=\"line\">career.iloc[<span class=\"number\">2</span>,<span class=\"number\">0</span>:<span class=\"number\">3</span>] <span class=\"comment\">#South Korea</span></span><br><span class=\"line\">career.iloc[<span class=\"number\">3</span>,<span class=\"number\">0</span>:<span class=\"number\">3</span>] <span class=\"comment\">#Taiwan</span></span><br><span class=\"line\"></span><br><span class=\"line\">fig = go.Figure(data=[</span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;China&#x27;</span>, x = years, </span><br><span class=\"line\">                           y=career.iloc[<span class=\"number\">0</span>,<span class=\"number\">0</span>:<span class=\"number\">3</span>]),</span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;Japan&#x27;</span>, x = years, </span><br><span class=\"line\">                             y=career.iloc[<span class=\"number\">1</span>,<span class=\"number\">0</span>:<span class=\"number\">3</span>]),</span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;South Korea&#x27;</span>, x= years, </span><br><span class=\"line\">                            y=career.iloc[<span class=\"number\">2</span>,<span class=\"number\">0</span>:<span class=\"number\">3</span>]),</span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;Taiwan&#x27;</span>, x= years, </span><br><span class=\"line\">                            y=career.iloc[<span class=\"number\">3</span>,<span class=\"number\">0</span>:<span class=\"number\">3</span>])</span><br><span class=\"line\">    ])</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(title_text=<span class=\"string\">&quot;&lt;b&gt;21년 EastAisa kaggler들의 경력&lt;/b&gt;&quot;</span>,title_font_size=<span class=\"number\">35</span>)</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"연봉\"><a href=\"#연봉\" class=\"headerlink\" title=\"연봉\"></a><strong>연봉</strong></h3><hr>\n<ul>\n<li>Q25</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#마지막 행 삭제해줌</span></span><br><span class=\"line\">df21_=(df21[<span class=\"string\">&#x27;Q25&#x27;</span>].value_counts().to_frame())</span><br><span class=\"line\">df21_=df21_.drop(df21_.index[<span class=\"number\">26</span>])</span><br><span class=\"line\">df21_</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mykaggle4/22.PNG\"><br><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df21_[<span class=\"string\">&#x27;Q25&#x27;</span>].index</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mykaggle4/23.PNG\"><br><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df21_[<span class=\"string\">&#x27;Q25&#x27;</span>].to_numpy()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mykaggle4/24.PNG\"><br><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">compensation = df21_[<span class=\"string\">&#x27;Q25&#x27;</span>].index</span><br><span class=\"line\">fig = go.Figure(data=[</span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;21년 World kaggler들의 연봉&#x27;</span>, x=compensation, y=df21_[<span class=\"string\">&#x27;Q25&#x27;</span>].to_numpy() ,orientation=<span class=\"string\">&#x27;v&#x27;</span>)])</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(title_text=<span class=\"string\">&quot;&lt;b&gt;21년 World kaggler들의 연봉&lt;/b&gt;&quot;</span>,title_font_size=<span class=\"number\">35</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/mykaggle4/25.png\"><br><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#전체 코드</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#마지막 행 삭제해줌</span></span><br><span class=\"line\">df21_=(df21[<span class=\"string\">&#x27;Q25&#x27;</span>].value_counts().to_frame())</span><br><span class=\"line\">df21_=df21_.drop(df21_.index[<span class=\"number\">26</span>])</span><br><span class=\"line\">df21_</span><br><span class=\"line\"></span><br><span class=\"line\">compensation = df21_[<span class=\"string\">&#x27;Q25&#x27;</span>].index</span><br><span class=\"line\">fig = go.Figure(data=[</span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;21년 World kaggler들의 연봉&#x27;</span>, x=compensation, y=df21_[<span class=\"string\">&#x27;Q25&#x27;</span>].to_numpy() ,orientation=<span class=\"string\">&#x27;v&#x27;</span>)])</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(title_text=<span class=\"string\">&quot;&lt;b&gt;21년 World kaggler들의 연봉&lt;/b&gt;&quot;</span>,title_font_size=<span class=\"number\">35</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#일본 연봉</span></span><br><span class=\"line\">df21_Ea[<span class=\"string\">&#x27;Q25&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>] ==<span class=\"string\">&#x27;Japan&#x27;</span>].value_counts()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mykaggle4/26.PNG\"><br><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>].value_counts()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mykaggle4/27.PNG\"><br><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df21_Ea[<span class=\"string\">&#x27;Q25&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>] ==<span class=\"string\">&#x27;Taiwan&#x27;</span>].value_counts()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mykaggle4/28.PNG\"><br><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">compensation = df21_[<span class=\"string\">&#x27;Q25&#x27;</span>].index</span><br><span class=\"line\"></span><br><span class=\"line\">fig = go.Figure(data=[</span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;China&#x27;</span>, x = compensation, </span><br><span class=\"line\">                           y = df21_Ea[<span class=\"string\">&#x27;Q25&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>] ==<span class=\"string\">&#x27;Japan&#x27;</span>].value_counts()),</span><br><span class=\"line\">    </span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;Japan&#x27;</span>, x = compensation, </span><br><span class=\"line\">                             y=df21_Ea[<span class=\"string\">&#x27;Q25&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>] ==<span class=\"string\">&#x27;Taiwan&#x27;</span>].value_counts()),</span><br><span class=\"line\">    </span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;South Korea&#x27;</span>, x = compensation, </span><br><span class=\"line\">                            y=df21_Ea[<span class=\"string\">&#x27;Q25&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>] ==<span class=\"string\">&#x27;South Korea&#x27;</span>].value_counts()),</span><br><span class=\"line\">    </span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;Taiwan&#x27;</span>, x = compensation, </span><br><span class=\"line\">                            y=df21_Ea[<span class=\"string\">&#x27;Q25&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>] ==<span class=\"string\">&#x27;China&#x27;</span>].value_counts())</span><br><span class=\"line\">    ])</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(title_text=<span class=\"string\">&quot;&lt;b&gt;21년 EastAisa kaggler들의 연봉&lt;/b&gt;&quot;</span>,title_font_size=<span class=\"number\">35</span>)</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mykaggle4/29.png\"><br><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#전체 코드</span></span><br><span class=\"line\"></span><br><span class=\"line\">compensation = df21_[<span class=\"string\">&#x27;Q25&#x27;</span>].index</span><br><span class=\"line\"></span><br><span class=\"line\">fig = go.Figure(data=[</span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;China&#x27;</span>, x = compensation, </span><br><span class=\"line\">                           y = df21_Ea[<span class=\"string\">&#x27;Q25&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>] ==<span class=\"string\">&#x27;Japan&#x27;</span>].value_counts()),</span><br><span class=\"line\">    </span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;Japan&#x27;</span>, x = compensation, </span><br><span class=\"line\">                             y=df21_Ea[<span class=\"string\">&#x27;Q25&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>] ==<span class=\"string\">&#x27;Taiwan&#x27;</span>].value_counts()),</span><br><span class=\"line\">    </span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;South Korea&#x27;</span>, x = compensation, </span><br><span class=\"line\">                            y=df21_Ea[<span class=\"string\">&#x27;Q25&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>] ==<span class=\"string\">&#x27;South Korea&#x27;</span>].value_counts()),</span><br><span class=\"line\">    </span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;Taiwan&#x27;</span>, x = compensation, </span><br><span class=\"line\">                            y=df21_Ea[<span class=\"string\">&#x27;Q25&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>] ==<span class=\"string\">&#x27;China&#x27;</span>].value_counts())</span><br><span class=\"line\">    ])</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(title_text=<span class=\"string\">&quot;&lt;b&gt;21년 EastAisa kaggler들의 연봉&lt;/b&gt;&quot;</span>,title_font_size=<span class=\"number\">35</span>)</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"언어\"><a href=\"#언어\" class=\"headerlink\" title=\"언어\"></a><strong>언어</strong></h3><hr>\n<ul>\n<li>Q7</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df21_p = df21[<span class=\"string\">&#x27;Q7_Part_1&#x27;</span>].value_counts().to_frame() <span class=\"comment\">#python</span></span><br><span class=\"line\">df21_r = df21[<span class=\"string\">&#x27;Q7_Part_2&#x27;</span>].value_counts().to_frame() <span class=\"comment\">#r</span></span><br><span class=\"line\">df21_s = df21[<span class=\"string\">&#x27;Q7_Part_3&#x27;</span>].value_counts().to_frame() <span class=\"comment\">#sql</span></span><br><span class=\"line\">df21_c = df21[<span class=\"string\">&#x27;Q7_Part_4&#x27;</span>].value_counts().to_frame() <span class=\"comment\">#c</span></span><br><span class=\"line\">df21_cc = df21[<span class=\"string\">&#x27;Q7_Part_5&#x27;</span>].value_counts().to_frame() <span class=\"comment\">#c++</span></span><br><span class=\"line\">df21_j = df21[<span class=\"string\">&#x27;Q7_Part_6&#x27;</span>].value_counts().to_frame() <span class=\"comment\">#java</span></span><br><span class=\"line\">df21_js = df21[<span class=\"string\">&#x27;Q7_Part_7&#x27;</span>].value_counts().to_frame() <span class=\"comment\">#javascript</span></span><br><span class=\"line\">df21_ju = df21[<span class=\"string\">&#x27;Q7_Part_8&#x27;</span>].value_counts().to_frame() <span class=\"comment\">#julia</span></span><br><span class=\"line\">df21_sw = df21[<span class=\"string\">&#x27;Q7_Part_9&#x27;</span>].value_counts().to_frame() <span class=\"comment\">#swift</span></span><br><span class=\"line\">df21_b = df21[<span class=\"string\">&#x27;Q7_Part_10&#x27;</span>].value_counts().to_frame() <span class=\"comment\">#bash</span></span><br><span class=\"line\">df21_ma = df21[<span class=\"string\">&#x27;Q7_Part_11&#x27;</span>].value_counts().to_frame() <span class=\"comment\">#matlab</span></span><br><span class=\"line\">df21_n = df21[<span class=\"string\">&#x27;Q7_Part_12&#x27;</span>].value_counts().to_frame() <span class=\"comment\">#none</span></span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df21_p.iloc[<span class=\"number\">0</span>,<span class=\"number\">0</span>]</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">languages = [<span class=\"string\">&#x27;Python&#x27;</span>,<span class=\"string\">&#x27;R&#x27;</span>,<span class=\"string\">&#x27;SQL&#x27;</span>,<span class=\"string\">&#x27;C&#x27;</span>,<span class=\"string\">&#x27;C++&#x27;</span>,<span class=\"string\">&#x27;Java&#x27;</span>,<span class=\"string\">&#x27;Javascript&#x27;</span>,<span class=\"string\">&#x27;Julia&#x27;</span>,<span class=\"string\">&#x27;Swift&#x27;</span>,<span class=\"string\">&#x27;Bash&#x27;</span>,<span class=\"string\">&#x27;MATLAB&#x27;</span>,<span class=\"string\">&#x27;None&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">fig = go.Figure(data=[</span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;21년 World kaggler들이 사용하는 언어&#x27;</span>, x = languages, </span><br><span class=\"line\">                                                     y = [df21_p.iloc[<span class=\"number\">0</span>,<span class=\"number\">0</span>],</span><br><span class=\"line\">                                                          df21_r.iloc[<span class=\"number\">0</span>,<span class=\"number\">0</span>],</span><br><span class=\"line\">                                                          df21_s.iloc[<span class=\"number\">0</span>,<span class=\"number\">0</span>],</span><br><span class=\"line\">                                                          df21_c.iloc[<span class=\"number\">0</span>,<span class=\"number\">0</span>],</span><br><span class=\"line\">                                                          df21_cc.iloc[<span class=\"number\">0</span>,<span class=\"number\">0</span>],</span><br><span class=\"line\">                                                          df21_j.iloc[<span class=\"number\">0</span>,<span class=\"number\">0</span>],</span><br><span class=\"line\">                                                          df21_js.iloc[<span class=\"number\">0</span>,<span class=\"number\">0</span>],</span><br><span class=\"line\">                                                          df21_ju.iloc[<span class=\"number\">0</span>,<span class=\"number\">0</span>],</span><br><span class=\"line\">                                                          df21_sw.iloc[<span class=\"number\">0</span>,<span class=\"number\">0</span>],</span><br><span class=\"line\">                                                          df21_b.iloc[<span class=\"number\">0</span>,<span class=\"number\">0</span>],</span><br><span class=\"line\">                                                          df21_ma.iloc[<span class=\"number\">0</span>,<span class=\"number\">0</span>],</span><br><span class=\"line\">                                                          df21_n.iloc[<span class=\"number\">0</span>,<span class=\"number\">0</span>]],orientation=<span class=\"string\">&#x27;v&#x27;</span>)</span><br><span class=\"line\">                    </span><br><span class=\"line\">                    ])</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(title_text=<span class=\"string\">&quot;&lt;b&gt;21년 World kaggler들이 사용하는 언어&lt;/b&gt;&quot;</span>,title_font_size=<span class=\"number\">35</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mykaggle4/30.png\"><br><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#코드 전체</span></span><br><span class=\"line\"></span><br><span class=\"line\">df21_p = df21[<span class=\"string\">&#x27;Q7_Part_1&#x27;</span>].value_counts().to_frame() <span class=\"comment\">#python</span></span><br><span class=\"line\">df21_r = df21[<span class=\"string\">&#x27;Q7_Part_2&#x27;</span>].value_counts().to_frame() <span class=\"comment\">#r</span></span><br><span class=\"line\">df21_s = df21[<span class=\"string\">&#x27;Q7_Part_3&#x27;</span>].value_counts().to_frame() <span class=\"comment\">#sql</span></span><br><span class=\"line\">df21_c = df21[<span class=\"string\">&#x27;Q7_Part_4&#x27;</span>].value_counts().to_frame() <span class=\"comment\">#c</span></span><br><span class=\"line\">df21_cc = df21[<span class=\"string\">&#x27;Q7_Part_5&#x27;</span>].value_counts().to_frame() <span class=\"comment\">#c++</span></span><br><span class=\"line\">df21_j = df21[<span class=\"string\">&#x27;Q7_Part_6&#x27;</span>].value_counts().to_frame() <span class=\"comment\">#java</span></span><br><span class=\"line\">df21_js = df21[<span class=\"string\">&#x27;Q7_Part_7&#x27;</span>].value_counts().to_frame() <span class=\"comment\">#javascript</span></span><br><span class=\"line\">df21_ju = df21[<span class=\"string\">&#x27;Q7_Part_8&#x27;</span>].value_counts().to_frame() <span class=\"comment\">#julia</span></span><br><span class=\"line\">df21_sw = df21[<span class=\"string\">&#x27;Q7_Part_9&#x27;</span>].value_counts().to_frame() <span class=\"comment\">#swift</span></span><br><span class=\"line\">df21_b = df21[<span class=\"string\">&#x27;Q7_Part_10&#x27;</span>].value_counts().to_frame() <span class=\"comment\">#bash</span></span><br><span class=\"line\">df21_ma = df21[<span class=\"string\">&#x27;Q7_Part_11&#x27;</span>].value_counts().to_frame() <span class=\"comment\">#matlab</span></span><br><span class=\"line\">df21_n = df21[<span class=\"string\">&#x27;Q7_Part_12&#x27;</span>].value_counts().to_frame() <span class=\"comment\">#none</span></span><br><span class=\"line\"></span><br><span class=\"line\">languages = [<span class=\"string\">&#x27;Python&#x27;</span>,<span class=\"string\">&#x27;R&#x27;</span>,<span class=\"string\">&#x27;SQL&#x27;</span>,<span class=\"string\">&#x27;C&#x27;</span>,<span class=\"string\">&#x27;C++&#x27;</span>,<span class=\"string\">&#x27;Java&#x27;</span>,<span class=\"string\">&#x27;Javascript&#x27;</span>,<span class=\"string\">&#x27;Julia&#x27;</span>,<span class=\"string\">&#x27;Swift&#x27;</span>,<span class=\"string\">&#x27;Bash&#x27;</span>,<span class=\"string\">&#x27;MATLAB&#x27;</span>,<span class=\"string\">&#x27;None&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">fig = go.Figure(data=[</span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;21년 World kaggler들이 사용하는 언어&#x27;</span>, x = languages, </span><br><span class=\"line\">                                                     y = [df21_p.iloc[<span class=\"number\">0</span>,<span class=\"number\">0</span>],</span><br><span class=\"line\">                                                          df21_r.iloc[<span class=\"number\">0</span>,<span class=\"number\">0</span>],</span><br><span class=\"line\">                                                          df21_s.iloc[<span class=\"number\">0</span>,<span class=\"number\">0</span>],</span><br><span class=\"line\">                                                          df21_c.iloc[<span class=\"number\">0</span>,<span class=\"number\">0</span>],</span><br><span class=\"line\">                                                          df21_cc.iloc[<span class=\"number\">0</span>,<span class=\"number\">0</span>],</span><br><span class=\"line\">                                                          df21_j.iloc[<span class=\"number\">0</span>,<span class=\"number\">0</span>],</span><br><span class=\"line\">                                                          df21_js.iloc[<span class=\"number\">0</span>,<span class=\"number\">0</span>],</span><br><span class=\"line\">                                                          df21_ju.iloc[<span class=\"number\">0</span>,<span class=\"number\">0</span>],</span><br><span class=\"line\">                                                          df21_sw.iloc[<span class=\"number\">0</span>,<span class=\"number\">0</span>],</span><br><span class=\"line\">                                                          df21_b.iloc[<span class=\"number\">0</span>,<span class=\"number\">0</span>],</span><br><span class=\"line\">                                                          df21_ma.iloc[<span class=\"number\">0</span>,<span class=\"number\">0</span>],</span><br><span class=\"line\">                                                          df21_n.iloc[<span class=\"number\">0</span>,<span class=\"number\">0</span>]],orientation=<span class=\"string\">&#x27;v&#x27;</span>)</span><br><span class=\"line\">                    </span><br><span class=\"line\">                    ])</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(title_text=<span class=\"string\">&quot;&lt;b&gt;21년 World kaggler들이 사용하는 언어&lt;/b&gt;&quot;</span>,title_font_size=<span class=\"number\">35</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df21_lan_ch_p=df21_Ea[<span class=\"string\">&#x27;Q7_Part_1&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>]==<span class=\"string\">&#x27;China&#x27;</span>].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q7_Part_1&#x27;</span>:<span class=\"string\">&#x27;cnt&#x27;</span>&#125;)</span><br><span class=\"line\">df21_lan_ch_r=df21_Ea[<span class=\"string\">&#x27;Q7_Part_2&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>]==<span class=\"string\">&#x27;China&#x27;</span>].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q7_Part_2&#x27;</span>:<span class=\"string\">&#x27;cnt&#x27;</span>&#125;)</span><br><span class=\"line\">df21_lan_ch_s=df21_Ea[<span class=\"string\">&#x27;Q7_Part_3&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>]==<span class=\"string\">&#x27;China&#x27;</span>].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q7_Part_3&#x27;</span>:<span class=\"string\">&#x27;cnt&#x27;</span>&#125;)</span><br><span class=\"line\">df21_lan_ch_c=df21_Ea[<span class=\"string\">&#x27;Q7_Part_4&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>]==<span class=\"string\">&#x27;China&#x27;</span>].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q7_Part_4&#x27;</span>:<span class=\"string\">&#x27;cnt&#x27;</span>&#125;)</span><br><span class=\"line\">df21_lan_ch_cc=df21_Ea[<span class=\"string\">&#x27;Q7_Part_5&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>]==<span class=\"string\">&#x27;China&#x27;</span>].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q7_Part_5&#x27;</span>:<span class=\"string\">&#x27;cnt&#x27;</span>&#125;)</span><br><span class=\"line\">df21_lan_ch_j=df21_Ea[<span class=\"string\">&#x27;Q7_Part_6&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>]==<span class=\"string\">&#x27;China&#x27;</span>].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q7_Part_6&#x27;</span>:<span class=\"string\">&#x27;cnt&#x27;</span>&#125;)</span><br><span class=\"line\">df21_lan_ch_js=df21_Ea[<span class=\"string\">&#x27;Q7_Part_7&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>]==<span class=\"string\">&#x27;China&#x27;</span>].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q7_Part_7&#x27;</span>:<span class=\"string\">&#x27;cnt&#x27;</span>&#125;)</span><br><span class=\"line\">df21_lan_ch_ju=df21_Ea[<span class=\"string\">&#x27;Q7_Part_8&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>]==<span class=\"string\">&#x27;China&#x27;</span>].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q7_Part_8&#x27;</span>:<span class=\"string\">&#x27;cnt&#x27;</span>&#125;)</span><br><span class=\"line\">df21_lan_ch_sw=df21_Ea[<span class=\"string\">&#x27;Q7_Part_9&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>]==<span class=\"string\">&#x27;China&#x27;</span>].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q7_Part_9&#x27;</span>:<span class=\"string\">&#x27;cnt&#x27;</span>&#125;)</span><br><span class=\"line\">df21_lan_ch_b=df21_Ea[<span class=\"string\">&#x27;Q7_Part_10&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>]==<span class=\"string\">&#x27;China&#x27;</span>].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q7_Part_10&#x27;</span>:<span class=\"string\">&#x27;cnt&#x27;</span>&#125;)</span><br><span class=\"line\">df21_lan_ch_ma=df21_Ea[<span class=\"string\">&#x27;Q7_Part_11&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>]==<span class=\"string\">&#x27;China&#x27;</span>].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q7_Part_11&#x27;</span>:<span class=\"string\">&#x27;cnt&#x27;</span>&#125;)</span><br><span class=\"line\">df21_lan_ch_n=df21_Ea[<span class=\"string\">&#x27;Q7_Part_12&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>]==<span class=\"string\">&#x27;China&#x27;</span>].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q7_Part_12&#x27;</span>:<span class=\"string\">&#x27;cnt&#x27;</span>&#125;)</span><br><span class=\"line\">ch_lan = pd.concat([df21_lan_ch_p,df21_lan_ch_r,df21_lan_ch_s,df21_lan_ch_c,df21_lan_ch_cc,df21_lan_ch_j,df21_lan_ch_js,df21_lan_ch_ju,df21_lan_ch_sw,df21_lan_ch_b,df21_lan_ch_ma,df21_lan_ch_n])</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">df21_lan_jp_p=df21_Ea[<span class=\"string\">&#x27;Q7_Part_1&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>]==<span class=\"string\">&#x27;Japan&#x27;</span>].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q7_Part_1&#x27;</span>:<span class=\"string\">&#x27;cnt&#x27;</span>&#125;)</span><br><span class=\"line\">df21_lan_jp_r=df21_Ea[<span class=\"string\">&#x27;Q7_Part_2&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>]==<span class=\"string\">&#x27;Japan&#x27;</span>].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q7_Part_2&#x27;</span>:<span class=\"string\">&#x27;cnt&#x27;</span>&#125;)</span><br><span class=\"line\">df21_lan_jp_s=df21_Ea[<span class=\"string\">&#x27;Q7_Part_3&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>]==<span class=\"string\">&#x27;Japan&#x27;</span>].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q7_Part_3&#x27;</span>:<span class=\"string\">&#x27;cnt&#x27;</span>&#125;)</span><br><span class=\"line\">df21_lan_jp_c=df21_Ea[<span class=\"string\">&#x27;Q7_Part_4&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>]==<span class=\"string\">&#x27;Japan&#x27;</span>].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q7_Part_4&#x27;</span>:<span class=\"string\">&#x27;cnt&#x27;</span>&#125;)</span><br><span class=\"line\">df21_lan_jp_cc=df21_Ea[<span class=\"string\">&#x27;Q7_Part_5&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>]==<span class=\"string\">&#x27;Japan&#x27;</span>].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q7_Part_5&#x27;</span>:<span class=\"string\">&#x27;cnt&#x27;</span>&#125;)</span><br><span class=\"line\">df21_lan_jp_j=df21_Ea[<span class=\"string\">&#x27;Q7_Part_6&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>]==<span class=\"string\">&#x27;Japan&#x27;</span>].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q7_Part_6&#x27;</span>:<span class=\"string\">&#x27;cnt&#x27;</span>&#125;)</span><br><span class=\"line\">df21_lan_jp_js=df21_Ea[<span class=\"string\">&#x27;Q7_Part_7&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>]==<span class=\"string\">&#x27;Japan&#x27;</span>].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q7_Part_7&#x27;</span>:<span class=\"string\">&#x27;cnt&#x27;</span>&#125;)</span><br><span class=\"line\">df21_lan_jp_ju=df21_Ea[<span class=\"string\">&#x27;Q7_Part_8&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>]==<span class=\"string\">&#x27;Japan&#x27;</span>].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q7_Part_8&#x27;</span>:<span class=\"string\">&#x27;cnt&#x27;</span>&#125;)</span><br><span class=\"line\">df21_lan_jp_sw=df21_Ea[<span class=\"string\">&#x27;Q7_Part_9&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>]==<span class=\"string\">&#x27;Japan&#x27;</span>].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q7_Part_9&#x27;</span>:<span class=\"string\">&#x27;cnt&#x27;</span>&#125;)</span><br><span class=\"line\">df21_lan_jp_b=df21_Ea[<span class=\"string\">&#x27;Q7_Part_10&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>]==<span class=\"string\">&#x27;Japan&#x27;</span>].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q7_Part_10&#x27;</span>:<span class=\"string\">&#x27;cnt&#x27;</span>&#125;)</span><br><span class=\"line\">df21_lan_jp_ma=df21_Ea[<span class=\"string\">&#x27;Q7_Part_11&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>]==<span class=\"string\">&#x27;Japan&#x27;</span>].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q7_Part_11&#x27;</span>:<span class=\"string\">&#x27;cnt&#x27;</span>&#125;)</span><br><span class=\"line\">df21_lan_jp_n=df21_Ea[<span class=\"string\">&#x27;Q7_Part_12&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>]==<span class=\"string\">&#x27;Japan&#x27;</span>].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q7_Part_12&#x27;</span>:<span class=\"string\">&#x27;cnt&#x27;</span>&#125;)</span><br><span class=\"line\">jp_lan = pd.concat([df21_lan_jp_p,df21_lan_jp_r,df21_lan_jp_s,df21_lan_jp_c,df21_lan_jp_cc,df21_lan_jp_j,df21_lan_jp_js,df21_lan_jp_ju,df21_lan_jp_sw,df21_lan_jp_b,df21_lan_jp_ma,df21_lan_jp_n])</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">df21_lan_tw_p=df21_Ea[<span class=\"string\">&#x27;Q7_Part_1&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>]==<span class=\"string\">&#x27;Taiwan&#x27;</span>].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q7_Part_1&#x27;</span>:<span class=\"string\">&#x27;cnt&#x27;</span>&#125;)</span><br><span class=\"line\">df21_lan_tw_r=df21_Ea[<span class=\"string\">&#x27;Q7_Part_2&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>]==<span class=\"string\">&#x27;Taiwan&#x27;</span>].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q7_Part_2&#x27;</span>:<span class=\"string\">&#x27;cnt&#x27;</span>&#125;)</span><br><span class=\"line\">df21_lan_tw_s=df21_Ea[<span class=\"string\">&#x27;Q7_Part_3&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>]==<span class=\"string\">&#x27;Taiwan&#x27;</span>].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q7_Part_3&#x27;</span>:<span class=\"string\">&#x27;cnt&#x27;</span>&#125;)</span><br><span class=\"line\">df21_lan_tw_c=df21_Ea[<span class=\"string\">&#x27;Q7_Part_4&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>]==<span class=\"string\">&#x27;Taiwan&#x27;</span>].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q7_Part_4&#x27;</span>:<span class=\"string\">&#x27;cnt&#x27;</span>&#125;)</span><br><span class=\"line\">df21_lan_tw_cc=df21_Ea[<span class=\"string\">&#x27;Q7_Part_5&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>]==<span class=\"string\">&#x27;Taiwan&#x27;</span>].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q7_Part_5&#x27;</span>:<span class=\"string\">&#x27;cnt&#x27;</span>&#125;)</span><br><span class=\"line\">df21_lan_tw_j=df21_Ea[<span class=\"string\">&#x27;Q7_Part_6&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>]==<span class=\"string\">&#x27;Taiwan&#x27;</span>].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q7_Part_6&#x27;</span>:<span class=\"string\">&#x27;cnt&#x27;</span>&#125;)</span><br><span class=\"line\">df21_lan_tw_js=df21_Ea[<span class=\"string\">&#x27;Q7_Part_7&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>]==<span class=\"string\">&#x27;Taiwan&#x27;</span>].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q7_Part_7&#x27;</span>:<span class=\"string\">&#x27;cnt&#x27;</span>&#125;)</span><br><span class=\"line\">df21_lan_tw_ju=df21_Ea[<span class=\"string\">&#x27;Q7_Part_8&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>]==<span class=\"string\">&#x27;Taiwan&#x27;</span>].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q7_Part_8&#x27;</span>:<span class=\"string\">&#x27;cnt&#x27;</span>&#125;)</span><br><span class=\"line\">df21_lan_tw_sw=df21_Ea[<span class=\"string\">&#x27;Q7_Part_9&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>]==<span class=\"string\">&#x27;Taiwan&#x27;</span>].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q7_Part_9&#x27;</span>:<span class=\"string\">&#x27;cnt&#x27;</span>&#125;)</span><br><span class=\"line\">df21_lan_tw_b=df21_Ea[<span class=\"string\">&#x27;Q7_Part_10&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>]==<span class=\"string\">&#x27;Taiwan&#x27;</span>].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q7_Part_10&#x27;</span>:<span class=\"string\">&#x27;cnt&#x27;</span>&#125;)</span><br><span class=\"line\">df21_lan_tw_ma=df21_Ea[<span class=\"string\">&#x27;Q7_Part_11&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>]==<span class=\"string\">&#x27;Taiwan&#x27;</span>].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q7_Part_11&#x27;</span>:<span class=\"string\">&#x27;cnt&#x27;</span>&#125;)</span><br><span class=\"line\">df21_lan_tw_n=df21_Ea[<span class=\"string\">&#x27;Q7_Part_12&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>]==<span class=\"string\">&#x27;Taiwan&#x27;</span>].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q7_Part_12&#x27;</span>:<span class=\"string\">&#x27;cnt&#x27;</span>&#125;)</span><br><span class=\"line\">tw_lan = pd.concat([df21_lan_tw_p,df21_lan_tw_r,df21_lan_tw_s,df21_lan_tw_c,df21_lan_tw_cc,df21_lan_tw_j,df21_lan_tw_js,df21_lan_tw_ju,df21_lan_tw_sw,df21_lan_tw_b,df21_lan_tw_ma,df21_lan_tw_n])</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">df21_lan_ko_p=df21_Ea[<span class=\"string\">&#x27;Q7_Part_1&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>]==<span class=\"string\">&#x27;South Korea&#x27;</span>].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q7_Part_1&#x27;</span>:<span class=\"string\">&#x27;cnt&#x27;</span>&#125;)</span><br><span class=\"line\">df21_lan_ko_r=df21_Ea[<span class=\"string\">&#x27;Q7_Part_2&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>]==<span class=\"string\">&#x27;South Korea&#x27;</span>].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q7_Part_2&#x27;</span>:<span class=\"string\">&#x27;cnt&#x27;</span>&#125;)</span><br><span class=\"line\">df21_lan_ko_s=df21_Ea[<span class=\"string\">&#x27;Q7_Part_3&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>]==<span class=\"string\">&#x27;South Korea&#x27;</span>].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q7_Part_3&#x27;</span>:<span class=\"string\">&#x27;cnt&#x27;</span>&#125;)</span><br><span class=\"line\">df21_lan_ko_c=df21_Ea[<span class=\"string\">&#x27;Q7_Part_4&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>]==<span class=\"string\">&#x27;South Korea&#x27;</span>].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q7_Part_4&#x27;</span>:<span class=\"string\">&#x27;cnt&#x27;</span>&#125;)</span><br><span class=\"line\">df21_lan_ko_cc=df21_Ea[<span class=\"string\">&#x27;Q7_Part_5&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>]==<span class=\"string\">&#x27;South Korea&#x27;</span>].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q7_Part_5&#x27;</span>:<span class=\"string\">&#x27;cnt&#x27;</span>&#125;)</span><br><span class=\"line\">df21_lan_ko_j=df21_Ea[<span class=\"string\">&#x27;Q7_Part_6&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>]==<span class=\"string\">&#x27;South Korea&#x27;</span>].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q7_Part_6&#x27;</span>:<span class=\"string\">&#x27;cnt&#x27;</span>&#125;)</span><br><span class=\"line\">df21_lan_ko_js=df21_Ea[<span class=\"string\">&#x27;Q7_Part_7&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>]==<span class=\"string\">&#x27;South Korea&#x27;</span>].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q7_Part_7&#x27;</span>:<span class=\"string\">&#x27;cnt&#x27;</span>&#125;)</span><br><span class=\"line\">df21_lan_ko_ju=df21_Ea[<span class=\"string\">&#x27;Q7_Part_8&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>]==<span class=\"string\">&#x27;South Korea&#x27;</span>].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q7_Part_8&#x27;</span>:<span class=\"string\">&#x27;cnt&#x27;</span>&#125;)</span><br><span class=\"line\">df21_lan_ko_sw=df21_Ea[<span class=\"string\">&#x27;Q7_Part_9&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>]==<span class=\"string\">&#x27;South Korea&#x27;</span>].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q7_Part_9&#x27;</span>:<span class=\"string\">&#x27;cnt&#x27;</span>&#125;)</span><br><span class=\"line\">df21_lan_ko_b=df21_Ea[<span class=\"string\">&#x27;Q7_Part_10&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>]==<span class=\"string\">&#x27;South Korea&#x27;</span>].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q7_Part_10&#x27;</span>:<span class=\"string\">&#x27;cnt&#x27;</span>&#125;)</span><br><span class=\"line\">df21_lan_ko_ma=df21_Ea[<span class=\"string\">&#x27;Q7_Part_11&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>]==<span class=\"string\">&#x27;South Korea&#x27;</span>].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q7_Part_11&#x27;</span>:<span class=\"string\">&#x27;cnt&#x27;</span>&#125;)</span><br><span class=\"line\">df21_lan_ko_n=df21_Ea[<span class=\"string\">&#x27;Q7_Part_12&#x27;</span>][df21_Ea[<span class=\"string\">&#x27;Q3&#x27;</span>]==<span class=\"string\">&#x27;South Korea&#x27;</span>].value_counts().to_frame().rename(columns = &#123;<span class=\"string\">&#x27;Q7_Part_12&#x27;</span>:<span class=\"string\">&#x27;cnt&#x27;</span>&#125;)</span><br><span class=\"line\">ko_lan = pd.concat([df21_lan_ko_p,df21_lan_ko_r,df21_lan_ko_s,df21_lan_ko_c,df21_lan_ko_cc,df21_lan_ko_j,df21_lan_ko_js,df21_lan_ko_ju,df21_lan_ko_sw,df21_lan_ko_b,df21_lan_ko_ma,df21_lan_ko_n])</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ch_lan[<span class=\"string\">&#x27;cnt&#x27;</span>].to_list()</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">languages = [<span class=\"string\">&#x27;Python&#x27;</span>,<span class=\"string\">&#x27;R&#x27;</span>,<span class=\"string\">&#x27;SQL&#x27;</span>,<span class=\"string\">&#x27;C&#x27;</span>,<span class=\"string\">&#x27;C++&#x27;</span>,<span class=\"string\">&#x27;Java&#x27;</span>,<span class=\"string\">&#x27;Javascript&#x27;</span>,<span class=\"string\">&#x27;Julia&#x27;</span>,<span class=\"string\">&#x27;Swift&#x27;</span>,<span class=\"string\">&#x27;Bash&#x27;</span>,<span class=\"string\">&#x27;MATLAB&#x27;</span>,<span class=\"string\">&#x27;None&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">fig = go.Figure(data=[</span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;China&#x27;</span>, x = languages, </span><br><span class=\"line\">                         y = ch_lan[<span class=\"string\">&#x27;cnt&#x27;</span>].tolist()),</span><br><span class=\"line\">    </span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;Japan&#x27;</span>, x = languages, </span><br><span class=\"line\">                             y=jp_lan[<span class=\"string\">&#x27;cnt&#x27;</span>].tolist()),</span><br><span class=\"line\">    </span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;South Korea&#x27;</span>, x = languages, </span><br><span class=\"line\">                            y=ko_lan[<span class=\"string\">&#x27;cnt&#x27;</span>].tolist()),</span><br><span class=\"line\">    </span><br><span class=\"line\">    go.Bar(name=<span class=\"string\">&#x27;Taiwan&#x27;</span>, x = languages, </span><br><span class=\"line\">                            y=tw_lan[<span class=\"string\">&#x27;cnt&#x27;</span>].tolist())</span><br><span class=\"line\">          ])</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(title_text=<span class=\"string\">&quot;&lt;b&gt;21년 EastAisa kaggler들이 사용하는 언어&lt;/b&gt;&quot;</span>,title_font_size=<span class=\"number\">35</span>)</span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mykaggle4/31.png\"><br><br><br><br><br><br><br><br></p>\n"},{"date":"2021-12-05T15:00:00.000Z","title":"파이썬 딕셔너리","toc":true,"widgets":null,"_content":"### **Dictionary란**\n---\n사전이다 \n우리가 평상시에 사용하는 사전에서 단어를 찾으면, 단어가 나오고 그에대한 정의가 나온다.\n이처럼 파이썬의 딕셔너리도 key와 value 형태이다.\n \nex) 100번 사물함 -> 100번 key가 사용 <br>\n                   200번 key 사용 불가능 <br>\n=> 키에대한 중복이 허용되지 않는다\n\n<br>\n\n### **딕셔너리의 형태**\nkey와 value가 {}로 구성되어있다.\n\n```python\n{{Key1:Value1, Key2:Value2, Key3:Value3, ...}}\n```\n \n\n- value에 리스트도 넣을수 있다.\n- key값으로 정수값이나, 문자열도 가능하다.\n\n아래는 예시이다\n\n```python\ncabinet = {9:\"김땡땡\", 7:\"박모모\"}\na = {'a': [1, 2, 3]}\n```\n\n<br>\n\n### **딕셔너리 사용해보기**\n대괄호[]나, get을 통해 value를 불러올 수 있다.\n\n```python\nprint(cabinet[9])\n>> 김땡땡\nprint(cabinet.get(7))\n>> 박모모\n```\n\n키의 value 값이 존재하는지 확인할 수 있다.\n이때 반환값은 True와 False로 구분되어진다.\n\n```python\nprint(9 in cabinet)\n>> True\nprint(7 in cabinet)\n>> False\n```\n\n<br>\n\n### **딕셔너리 추가, 변경, 삭제**\n\n    \n아래는 딕셔너리 추가 예시이다.\n```python\nprint(cabinet)\n>> {9:\"김땡땡\", 7:\"박모모\"}\ncabinet[15] = \"이땡땡\" #새로운 값 추가\nprint(cabinet)\n>> {9:\"김땡땡\", 7:\"박모모\", 15:\"이땡땡\"}\n```\n<br>\n\n아래는 딕셔너리 변경 예시이다. 추가와 같은 형태이다.\n위의 예제에서 key 15의 value로 이땡땡으로 새로 추가해주었지만,\n나땡땡으로 value 값을 바꾼것을 확인할 수 있다.\n\n```python\ncabinet[15]=\"나땡땡\"\nprint(cabinet)\n>> {9:\"김땡땡\", 7:\"박모모\", 15:\"나땡땡\"}\n```\n\n<br>\n\n아래는 딕셔너리 삭제 예시이다.\n딕셔너리 앞에 del을 붙여 삭제할 수 있다.\n```python\ndel cabinet[15] \n>> {9:\"김땡땡\", 7:\"박모모\"}\n```\n\n<br>\n\nclear() 함수를 이용해서 딕셔너리 전체 삭제를 할 수 있다.\n```python\ncabinet.clear()\n>> \n```\n\n<br>\n\n### **key 리스트 만들기**\nkey()를 사용해 key만 모아서 dict_keys 객체를 돌려준다\n```python\na = {'name': 'jw', 'phone': '010-1234-5678', 'birth': '1014'}\na.keys()\n>> dict_keys(['name', 'phone', 'birth'])\n```\nkey값을 리스트로 반환할수도 있다\n```python\nlist(a.keys())\n>> ['name', 'phone', 'birth']\n```\n<br>\n\n### **value 리스트 만들기**\nvalues()를 이용해서 value 값만 모아서 리스트로 반환할 수 있다\n```python\na.values()\n>> dict_values(['jw', '010-1234-567', '1014'])\n```\n\n<br>\n\n\n### **Ref**\n[나도코딩](https://www.youtube.com/watch?v=kWiCuklohdY)\n[점프투파이썬](https://wikidocs.net/16)\n\n<br>\n<br>\n<br>","source":"_posts/python03_dic.md","raw":"---\ndate: 2021-12-06\ntitle: 파이썬 딕셔너리\ntags: python, dictionary\ncategories:\n  - 파이썬\n  - Python 기초\ntoc: true\nwidgets: null\n---\n### **Dictionary란**\n---\n사전이다 \n우리가 평상시에 사용하는 사전에서 단어를 찾으면, 단어가 나오고 그에대한 정의가 나온다.\n이처럼 파이썬의 딕셔너리도 key와 value 형태이다.\n \nex) 100번 사물함 -> 100번 key가 사용 <br>\n                   200번 key 사용 불가능 <br>\n=> 키에대한 중복이 허용되지 않는다\n\n<br>\n\n### **딕셔너리의 형태**\nkey와 value가 {}로 구성되어있다.\n\n```python\n{{Key1:Value1, Key2:Value2, Key3:Value3, ...}}\n```\n \n\n- value에 리스트도 넣을수 있다.\n- key값으로 정수값이나, 문자열도 가능하다.\n\n아래는 예시이다\n\n```python\ncabinet = {9:\"김땡땡\", 7:\"박모모\"}\na = {'a': [1, 2, 3]}\n```\n\n<br>\n\n### **딕셔너리 사용해보기**\n대괄호[]나, get을 통해 value를 불러올 수 있다.\n\n```python\nprint(cabinet[9])\n>> 김땡땡\nprint(cabinet.get(7))\n>> 박모모\n```\n\n키의 value 값이 존재하는지 확인할 수 있다.\n이때 반환값은 True와 False로 구분되어진다.\n\n```python\nprint(9 in cabinet)\n>> True\nprint(7 in cabinet)\n>> False\n```\n\n<br>\n\n### **딕셔너리 추가, 변경, 삭제**\n\n    \n아래는 딕셔너리 추가 예시이다.\n```python\nprint(cabinet)\n>> {9:\"김땡땡\", 7:\"박모모\"}\ncabinet[15] = \"이땡땡\" #새로운 값 추가\nprint(cabinet)\n>> {9:\"김땡땡\", 7:\"박모모\", 15:\"이땡땡\"}\n```\n<br>\n\n아래는 딕셔너리 변경 예시이다. 추가와 같은 형태이다.\n위의 예제에서 key 15의 value로 이땡땡으로 새로 추가해주었지만,\n나땡땡으로 value 값을 바꾼것을 확인할 수 있다.\n\n```python\ncabinet[15]=\"나땡땡\"\nprint(cabinet)\n>> {9:\"김땡땡\", 7:\"박모모\", 15:\"나땡땡\"}\n```\n\n<br>\n\n아래는 딕셔너리 삭제 예시이다.\n딕셔너리 앞에 del을 붙여 삭제할 수 있다.\n```python\ndel cabinet[15] \n>> {9:\"김땡땡\", 7:\"박모모\"}\n```\n\n<br>\n\nclear() 함수를 이용해서 딕셔너리 전체 삭제를 할 수 있다.\n```python\ncabinet.clear()\n>> \n```\n\n<br>\n\n### **key 리스트 만들기**\nkey()를 사용해 key만 모아서 dict_keys 객체를 돌려준다\n```python\na = {'name': 'jw', 'phone': '010-1234-5678', 'birth': '1014'}\na.keys()\n>> dict_keys(['name', 'phone', 'birth'])\n```\nkey값을 리스트로 반환할수도 있다\n```python\nlist(a.keys())\n>> ['name', 'phone', 'birth']\n```\n<br>\n\n### **value 리스트 만들기**\nvalues()를 이용해서 value 값만 모아서 리스트로 반환할 수 있다\n```python\na.values()\n>> dict_values(['jw', '010-1234-567', '1014'])\n```\n\n<br>\n\n\n### **Ref**\n[나도코딩](https://www.youtube.com/watch?v=kWiCuklohdY)\n[점프투파이썬](https://wikidocs.net/16)\n\n<br>\n<br>\n<br>","slug":"python03-dic","published":1,"updated":"2022-01-03T12:20:08.050Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cky2hohf4004y5nrjb2qq5zza","content":"<h3 id=\"Dictionary란\"><a href=\"#Dictionary란\" class=\"headerlink\" title=\"Dictionary란\"></a><strong>Dictionary란</strong></h3><hr>\n<p>사전이다<br>우리가 평상시에 사용하는 사전에서 단어를 찾으면, 단어가 나오고 그에대한 정의가 나온다.<br>이처럼 파이썬의 딕셔너리도 key와 value 형태이다.</p>\n<p>ex) 100번 사물함 -&gt; 100번 key가 사용 <br><br>                   200번 key 사용 불가능 <br><br>=&gt; 키에대한 중복이 허용되지 않는다</p>\n<br>\n\n<h3 id=\"딕셔너리의-형태\"><a href=\"#딕셔너리의-형태\" class=\"headerlink\" title=\"딕셔너리의 형태\"></a><strong>딕셔너리의 형태</strong></h3><p>key와 value가 {}로 구성되어있다.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&#123;Key1:Value1, Key2:Value2, Key3:Value3, ...&#125;&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>value에 리스트도 넣을수 있다.</li>\n<li>key값으로 정수값이나, 문자열도 가능하다.</li>\n</ul>\n<p>아래는 예시이다</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cabinet = &#123;<span class=\"number\">9</span>:<span class=\"string\">&quot;김땡땡&quot;</span>, <span class=\"number\">7</span>:<span class=\"string\">&quot;박모모&quot;</span>&#125;</span><br><span class=\"line\">a = &#123;<span class=\"string\">&#x27;a&#x27;</span>: [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]&#125;</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h3 id=\"딕셔너리-사용해보기\"><a href=\"#딕셔너리-사용해보기\" class=\"headerlink\" title=\"딕셔너리 사용해보기\"></a><strong>딕셔너리 사용해보기</strong></h3><p>대괄호[]나, get을 통해 value를 불러올 수 있다.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(cabinet[<span class=\"number\">9</span>])</span><br><span class=\"line\">&gt;&gt; 김땡땡</span><br><span class=\"line\"><span class=\"built_in\">print</span>(cabinet.get(<span class=\"number\">7</span>))</span><br><span class=\"line\">&gt;&gt; 박모모</span><br></pre></td></tr></table></figure>\n\n<p>키의 value 값이 존재하는지 확인할 수 있다.<br>이때 반환값은 True와 False로 구분되어진다.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">9</span> <span class=\"keyword\">in</span> cabinet)</span><br><span class=\"line\">&gt;&gt; <span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">7</span> <span class=\"keyword\">in</span> cabinet)</span><br><span class=\"line\">&gt;&gt; <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h3 id=\"딕셔너리-추가-변경-삭제\"><a href=\"#딕셔너리-추가-변경-삭제\" class=\"headerlink\" title=\"딕셔너리 추가, 변경, 삭제\"></a><strong>딕셔너리 추가, 변경, 삭제</strong></h3><p>아래는 딕셔너리 추가 예시이다.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(cabinet)</span><br><span class=\"line\">&gt;&gt; &#123;<span class=\"number\">9</span>:<span class=\"string\">&quot;김땡땡&quot;</span>, <span class=\"number\">7</span>:<span class=\"string\">&quot;박모모&quot;</span>&#125;</span><br><span class=\"line\">cabinet[<span class=\"number\">15</span>] = <span class=\"string\">&quot;이땡땡&quot;</span> <span class=\"comment\">#새로운 값 추가</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(cabinet)</span><br><span class=\"line\">&gt;&gt; &#123;<span class=\"number\">9</span>:<span class=\"string\">&quot;김땡땡&quot;</span>, <span class=\"number\">7</span>:<span class=\"string\">&quot;박모모&quot;</span>, <span class=\"number\">15</span>:<span class=\"string\">&quot;이땡땡&quot;</span>&#125;</span><br></pre></td></tr></table></figure>\n<br>\n\n<p>아래는 딕셔너리 변경 예시이다. 추가와 같은 형태이다.<br>위의 예제에서 key 15의 value로 이땡땡으로 새로 추가해주었지만,<br>나땡땡으로 value 값을 바꾼것을 확인할 수 있다.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cabinet[<span class=\"number\">15</span>]=<span class=\"string\">&quot;나땡땡&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(cabinet)</span><br><span class=\"line\">&gt;&gt; &#123;<span class=\"number\">9</span>:<span class=\"string\">&quot;김땡땡&quot;</span>, <span class=\"number\">7</span>:<span class=\"string\">&quot;박모모&quot;</span>, <span class=\"number\">15</span>:<span class=\"string\">&quot;나땡땡&quot;</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<p>아래는 딕셔너리 삭제 예시이다.<br>딕셔너리 앞에 del을 붙여 삭제할 수 있다.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">del</span> cabinet[<span class=\"number\">15</span>] </span><br><span class=\"line\">&gt;&gt; &#123;<span class=\"number\">9</span>:<span class=\"string\">&quot;김땡땡&quot;</span>, <span class=\"number\">7</span>:<span class=\"string\">&quot;박모모&quot;</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<p>clear() 함수를 이용해서 딕셔너리 전체 삭제를 할 수 있다.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cabinet.clear()</span><br><span class=\"line\">&gt;&gt; </span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h3 id=\"key-리스트-만들기\"><a href=\"#key-리스트-만들기\" class=\"headerlink\" title=\"key 리스트 만들기\"></a><strong>key 리스트 만들기</strong></h3><p>key()를 사용해 key만 모아서 dict_keys 객체를 돌려준다</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = &#123;<span class=\"string\">&#x27;name&#x27;</span>: <span class=\"string\">&#x27;jw&#x27;</span>, <span class=\"string\">&#x27;phone&#x27;</span>: <span class=\"string\">&#x27;010-1234-5678&#x27;</span>, <span class=\"string\">&#x27;birth&#x27;</span>: <span class=\"string\">&#x27;1014&#x27;</span>&#125;</span><br><span class=\"line\">a.keys()</span><br><span class=\"line\">&gt;&gt; dict_keys([<span class=\"string\">&#x27;name&#x27;</span>, <span class=\"string\">&#x27;phone&#x27;</span>, <span class=\"string\">&#x27;birth&#x27;</span>])</span><br></pre></td></tr></table></figure>\n<p>key값을 리스트로 반환할수도 있다</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">list</span>(a.keys())</span><br><span class=\"line\">&gt;&gt; [<span class=\"string\">&#x27;name&#x27;</span>, <span class=\"string\">&#x27;phone&#x27;</span>, <span class=\"string\">&#x27;birth&#x27;</span>]</span><br></pre></td></tr></table></figure>\n<br>\n\n<h3 id=\"value-리스트-만들기\"><a href=\"#value-리스트-만들기\" class=\"headerlink\" title=\"value 리스트 만들기\"></a><strong>value 리스트 만들기</strong></h3><p>values()를 이용해서 value 값만 모아서 리스트로 반환할 수 있다</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a.values()</span><br><span class=\"line\">&gt;&gt; dict_values([<span class=\"string\">&#x27;jw&#x27;</span>, <span class=\"string\">&#x27;010-1234-567&#x27;</span>, <span class=\"string\">&#x27;1014&#x27;</span>])</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n<h3 id=\"Ref\"><a href=\"#Ref\" class=\"headerlink\" title=\"Ref\"></a><strong>Ref</strong></h3><p><a href=\"https://www.youtube.com/watch?v=kWiCuklohdY\">나도코딩</a><br><a href=\"https://wikidocs.net/16\">점프투파이썬</a></p>\n<br>\n<br>\n<br>","site":{"data":{}},"excerpt":"Dictionary란\n\n\n\n사전이다\n우리가 평상시에 사용하는 사전에서 단어를 찾으면, 단어가 나오고 그에대한 정의가 나온다.\n이처럼 파이썬의 딕셔너리도 key와 value 형태이다.\n\nex) 100번 사물함 -> 100번 key가 사용 \n\n200번 key 사용 불가능 \n\n=> 키에대한 중복이 허용되지 않는다\n\n\n딕셔너리의 형태\nkey와 value가 {}로 구성되어있다.\n\n1\n\n\n{{Key1:Value1, Key2:Value2, Key3:Value3, ...}}\n\n\n * value에 리스트도 넣을수 있다.\n * key값으로 정수값이나","more":"<h3 id=\"Dictionary란\"><a href=\"#Dictionary란\" class=\"headerlink\" title=\"Dictionary란\"></a><strong>Dictionary란</strong></h3><hr>\n<p>사전이다<br>우리가 평상시에 사용하는 사전에서 단어를 찾으면, 단어가 나오고 그에대한 정의가 나온다.<br>이처럼 파이썬의 딕셔너리도 key와 value 형태이다.</p>\n<p>ex) 100번 사물함 -&gt; 100번 key가 사용 <br><br>                   200번 key 사용 불가능 <br><br>=&gt; 키에대한 중복이 허용되지 않는다</p>\n<br>\n\n<h3 id=\"딕셔너리의-형태\"><a href=\"#딕셔너리의-형태\" class=\"headerlink\" title=\"딕셔너리의 형태\"></a><strong>딕셔너리의 형태</strong></h3><p>key와 value가 {}로 구성되어있다.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&#123;Key1:Value1, Key2:Value2, Key3:Value3, ...&#125;&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>value에 리스트도 넣을수 있다.</li>\n<li>key값으로 정수값이나, 문자열도 가능하다.</li>\n</ul>\n<p>아래는 예시이다</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cabinet = &#123;<span class=\"number\">9</span>:<span class=\"string\">&quot;김땡땡&quot;</span>, <span class=\"number\">7</span>:<span class=\"string\">&quot;박모모&quot;</span>&#125;</span><br><span class=\"line\">a = &#123;<span class=\"string\">&#x27;a&#x27;</span>: [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]&#125;</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h3 id=\"딕셔너리-사용해보기\"><a href=\"#딕셔너리-사용해보기\" class=\"headerlink\" title=\"딕셔너리 사용해보기\"></a><strong>딕셔너리 사용해보기</strong></h3><p>대괄호[]나, get을 통해 value를 불러올 수 있다.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(cabinet[<span class=\"number\">9</span>])</span><br><span class=\"line\">&gt;&gt; 김땡땡</span><br><span class=\"line\"><span class=\"built_in\">print</span>(cabinet.get(<span class=\"number\">7</span>))</span><br><span class=\"line\">&gt;&gt; 박모모</span><br></pre></td></tr></table></figure>\n\n<p>키의 value 값이 존재하는지 확인할 수 있다.<br>이때 반환값은 True와 False로 구분되어진다.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">9</span> <span class=\"keyword\">in</span> cabinet)</span><br><span class=\"line\">&gt;&gt; <span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">7</span> <span class=\"keyword\">in</span> cabinet)</span><br><span class=\"line\">&gt;&gt; <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h3 id=\"딕셔너리-추가-변경-삭제\"><a href=\"#딕셔너리-추가-변경-삭제\" class=\"headerlink\" title=\"딕셔너리 추가, 변경, 삭제\"></a><strong>딕셔너리 추가, 변경, 삭제</strong></h3><p>아래는 딕셔너리 추가 예시이다.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(cabinet)</span><br><span class=\"line\">&gt;&gt; &#123;<span class=\"number\">9</span>:<span class=\"string\">&quot;김땡땡&quot;</span>, <span class=\"number\">7</span>:<span class=\"string\">&quot;박모모&quot;</span>&#125;</span><br><span class=\"line\">cabinet[<span class=\"number\">15</span>] = <span class=\"string\">&quot;이땡땡&quot;</span> <span class=\"comment\">#새로운 값 추가</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(cabinet)</span><br><span class=\"line\">&gt;&gt; &#123;<span class=\"number\">9</span>:<span class=\"string\">&quot;김땡땡&quot;</span>, <span class=\"number\">7</span>:<span class=\"string\">&quot;박모모&quot;</span>, <span class=\"number\">15</span>:<span class=\"string\">&quot;이땡땡&quot;</span>&#125;</span><br></pre></td></tr></table></figure>\n<br>\n\n<p>아래는 딕셔너리 변경 예시이다. 추가와 같은 형태이다.<br>위의 예제에서 key 15의 value로 이땡땡으로 새로 추가해주었지만,<br>나땡땡으로 value 값을 바꾼것을 확인할 수 있다.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cabinet[<span class=\"number\">15</span>]=<span class=\"string\">&quot;나땡땡&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(cabinet)</span><br><span class=\"line\">&gt;&gt; &#123;<span class=\"number\">9</span>:<span class=\"string\">&quot;김땡땡&quot;</span>, <span class=\"number\">7</span>:<span class=\"string\">&quot;박모모&quot;</span>, <span class=\"number\">15</span>:<span class=\"string\">&quot;나땡땡&quot;</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<p>아래는 딕셔너리 삭제 예시이다.<br>딕셔너리 앞에 del을 붙여 삭제할 수 있다.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">del</span> cabinet[<span class=\"number\">15</span>] </span><br><span class=\"line\">&gt;&gt; &#123;<span class=\"number\">9</span>:<span class=\"string\">&quot;김땡땡&quot;</span>, <span class=\"number\">7</span>:<span class=\"string\">&quot;박모모&quot;</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<p>clear() 함수를 이용해서 딕셔너리 전체 삭제를 할 수 있다.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cabinet.clear()</span><br><span class=\"line\">&gt;&gt; </span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h3 id=\"key-리스트-만들기\"><a href=\"#key-리스트-만들기\" class=\"headerlink\" title=\"key 리스트 만들기\"></a><strong>key 리스트 만들기</strong></h3><p>key()를 사용해 key만 모아서 dict_keys 객체를 돌려준다</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = &#123;<span class=\"string\">&#x27;name&#x27;</span>: <span class=\"string\">&#x27;jw&#x27;</span>, <span class=\"string\">&#x27;phone&#x27;</span>: <span class=\"string\">&#x27;010-1234-5678&#x27;</span>, <span class=\"string\">&#x27;birth&#x27;</span>: <span class=\"string\">&#x27;1014&#x27;</span>&#125;</span><br><span class=\"line\">a.keys()</span><br><span class=\"line\">&gt;&gt; dict_keys([<span class=\"string\">&#x27;name&#x27;</span>, <span class=\"string\">&#x27;phone&#x27;</span>, <span class=\"string\">&#x27;birth&#x27;</span>])</span><br></pre></td></tr></table></figure>\n<p>key값을 리스트로 반환할수도 있다</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">list</span>(a.keys())</span><br><span class=\"line\">&gt;&gt; [<span class=\"string\">&#x27;name&#x27;</span>, <span class=\"string\">&#x27;phone&#x27;</span>, <span class=\"string\">&#x27;birth&#x27;</span>]</span><br></pre></td></tr></table></figure>\n<br>\n\n<h3 id=\"value-리스트-만들기\"><a href=\"#value-리스트-만들기\" class=\"headerlink\" title=\"value 리스트 만들기\"></a><strong>value 리스트 만들기</strong></h3><p>values()를 이용해서 value 값만 모아서 리스트로 반환할 수 있다</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a.values()</span><br><span class=\"line\">&gt;&gt; dict_values([<span class=\"string\">&#x27;jw&#x27;</span>, <span class=\"string\">&#x27;010-1234-567&#x27;</span>, <span class=\"string\">&#x27;1014&#x27;</span>])</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n<h3 id=\"Ref\"><a href=\"#Ref\" class=\"headerlink\" title=\"Ref\"></a><strong>Ref</strong></h3><p><a href=\"https://www.youtube.com/watch?v=kWiCuklohdY\">나도코딩</a><br><a href=\"https://wikidocs.net/16\">점프투파이썬</a></p>\n<br>\n<br>\n<br>"},{"date":"2021-12-06T15:00:00.000Z","title":"파이썬 조건문과 반복문 (if, while, for)","toc":true,"_content":"  \n\n### **들여쓰기**\n파이썬은 자바나 다른 프로그래밍 언어와는 다른게 들여쓰기를 꼭 해주어야 한다\n들여쓰기를 무시할 경우 에러가 남\n\n<br>\n\n### **콜론(:)**\n파이썬은 세미콜론(;)을 사용하는 자바와는 다르게\n문장 끝에 항상 콜론(:)을 사용한다\n\n<br>\n\n### **if문**\n- if - else 문\n여태까지 배웠던 if문과 크게 다를게 없다\n\nelse if아닌 elif를 사용한다\n```python\nweather = input(\"오늘 날씨는 어때요?\")                   \nif weather == \"비\"or\"눈\":          \n    print(\"우산을 챙기세요\")       \nelif weather == \"미세먼지\":     \n    print(\"마스크를 챙기세요\")      \nelse:                       \n    print(\"준비물 필요 없어요\")     \n```\n                            \n- input\n자바에서 Scanner라고 생각하면 된다\n값을 입력할 수 있다.\n![](/images/python05/input.PNG)\n\n<br>\n\n### **in을 사용한 조건문**\n영어로 in이 ~안에라는 뜻을 가지고 있는데, 파이썬에서도 같은 의미로 사용되어진다\n아래 코드에서 1이 [1, 2, 3, 4]안에 있으면 True 없으면, False로 반환한다 \nnot in 은 in의 반대이다\n\n```python\n1 in [1, 2, 3, 4]\n>> True\n```\n- pass\n조건문에서 아무 일도 하지 않게 설정 할 수 있다\n\n```python\nweather = input(\"오늘의 날씨는?\")\nif '비' in weather:\n  print(\"우산을 준비하세요\")\nelif '눈' in weather:\n  print(\"우산을 준비하세요\")\nelif '해' in weather:\n  print(\"준비물이 없습니다\")\nelse:\n  pass\n```\n\n<br>\n\n### **while**\n\njava에서 while문을 사용하는 방법과 크게 다르지 않다  \n\n```python\na = 0\nwhile a < 10:\n  a = a + 1```\n  print(a)\n  if a == 10:<br>\n    pass\n```\n    \n<br>\n\n아래는 커피 주문 자판기를 구현한것이다\n```python\ncoffee = 100\n\nwhile True:\n  order = input(\"주문할 커피 개수를 입력하세요. \")\n  coffee = coffee - int(order)\n  if coffee > 0:\n    print(\"남은 커피는 %d잔입니다. \" %coffee)\n  elif coffee == 0:\n    print(\"남은 커피는 %d잔입니다. \" %coffee)\n    break\n  else:\n    coffee = coffee + int(order)\n    print(\"재고가 부족합니다. 다시 입력하세요.\")  \n```\n      \n<br>\n\n ```python\ncustomer = \"손님\"\ni = 5\nwhile i >= 1:\n    print(\"{0}, 커피가 준비되었습니다. {1}번 남았어요.\".format(customer, i))\n    i -= 1\n    if i == 0:\n        print(\"커피는 폐기처분 되었습니다\")\n``` \n    손님, 커피가 준비되었습니다. 5번 남았어요.\n    손님, 커피가 준비되었습니다. 4번 남았어요.\n    손님, 커피가 준비되었습니다. 3번 남았어요.\n    손님, 커피가 준비되었습니다. 2번 남았어요.\n    손님, 커피가 준비되었습니다. 1번 남았어요.\n    커피는 폐기처분 되었습니다\n\n<br>\n\n### **for문의 기본구조**\n> for 변수 in 리스트(또는 튜플, 문자열):\n>  수행할 문장1\n>  수행할 문장2\n\n```python\ntest = ['a', 'b', 'c']\nfor i in test:\n  print(i)\n```\n    a\n    b\n    c\n\n<br>\n\n```python\nscore = [100, 90, 60, 50, 40, 30]\nnumber = 0\nfor i in score:\n  number += 1\n  if i < 60:\n    print(\"{0}번 학생은 불합격입니다.\".format(number))\n  else:\n    print(\"{0}번 학생은 합격입니다.\".format(number))\n```\n        1번 학생은 합격입니다.\n        2번 학생은 합격입니다.\n        3번 학생은 합격입니다.\n        4번 학생은 불합격입니다.\n        5번 학생은 불합격입니다.\n        6번 학생은 불합격입니다.\n<br>\n\n```python\na = [(1,2), (3,4), (5,6)]\nfor (first, last) in a:\n    print(first + last)\n```\n    3\n    7\n    11\n\n<br>\n\n### **for문에서 range 함수**\n- range\n숫자 리스트를 자동으로 만들어주는 함수\n\n아래는 0부터 10미만의 숫자를 포함하는 range 객체를 만들어준다\n```python\na = range(10)\na\n>> range(0, 10)\n```\n<br>\n\n이를 for문에서 사용해보자\n\n```python\n    for i in range(1, 6):  #1,2,3,4,5\n    print(i)\n\n```\n    1\n    2\n    3\n    4\n    5\n\n<br>       \nlen(marks)는 5, number 변수에는 0에서 4까지 숫자가 대입될 것이다.\nmarks[number]는 차례로 90, 25, 67, 45, 80 값을 가지게 된다\n\n```python\nmarks = [90, 25, 67, 45, 80]\nfor number in range(len(marks)):\n    if marks[number] < 60: \n        continue\n    print(\"%d번 학생 축하합니다. 합격입니다.\" % (number+1))\n```\n\n### ****   \n<br>       \n       \n### **Ref**  \n[나도코딩](https://www.youtube.com/watch?v=kWiCuklohdY)\n[점프투파이썬](https://wikidocs.net/1015)\n\n<br>\n<br>\n<br>\n","source":"_posts/python05_반복문조건문.md","raw":"---\ndate: 2021-12-07\ntitle: 파이썬 조건문과 반복문 (if, while, for)\ntags: python\ncategories:\n  - 파이썬\n  - Python 기초\ntoc: true\n---\n  \n\n### **들여쓰기**\n파이썬은 자바나 다른 프로그래밍 언어와는 다른게 들여쓰기를 꼭 해주어야 한다\n들여쓰기를 무시할 경우 에러가 남\n\n<br>\n\n### **콜론(:)**\n파이썬은 세미콜론(;)을 사용하는 자바와는 다르게\n문장 끝에 항상 콜론(:)을 사용한다\n\n<br>\n\n### **if문**\n- if - else 문\n여태까지 배웠던 if문과 크게 다를게 없다\n\nelse if아닌 elif를 사용한다\n```python\nweather = input(\"오늘 날씨는 어때요?\")                   \nif weather == \"비\"or\"눈\":          \n    print(\"우산을 챙기세요\")       \nelif weather == \"미세먼지\":     \n    print(\"마스크를 챙기세요\")      \nelse:                       \n    print(\"준비물 필요 없어요\")     \n```\n                            \n- input\n자바에서 Scanner라고 생각하면 된다\n값을 입력할 수 있다.\n![](/images/python05/input.PNG)\n\n<br>\n\n### **in을 사용한 조건문**\n영어로 in이 ~안에라는 뜻을 가지고 있는데, 파이썬에서도 같은 의미로 사용되어진다\n아래 코드에서 1이 [1, 2, 3, 4]안에 있으면 True 없으면, False로 반환한다 \nnot in 은 in의 반대이다\n\n```python\n1 in [1, 2, 3, 4]\n>> True\n```\n- pass\n조건문에서 아무 일도 하지 않게 설정 할 수 있다\n\n```python\nweather = input(\"오늘의 날씨는?\")\nif '비' in weather:\n  print(\"우산을 준비하세요\")\nelif '눈' in weather:\n  print(\"우산을 준비하세요\")\nelif '해' in weather:\n  print(\"준비물이 없습니다\")\nelse:\n  pass\n```\n\n<br>\n\n### **while**\n\njava에서 while문을 사용하는 방법과 크게 다르지 않다  \n\n```python\na = 0\nwhile a < 10:\n  a = a + 1```\n  print(a)\n  if a == 10:<br>\n    pass\n```\n    \n<br>\n\n아래는 커피 주문 자판기를 구현한것이다\n```python\ncoffee = 100\n\nwhile True:\n  order = input(\"주문할 커피 개수를 입력하세요. \")\n  coffee = coffee - int(order)\n  if coffee > 0:\n    print(\"남은 커피는 %d잔입니다. \" %coffee)\n  elif coffee == 0:\n    print(\"남은 커피는 %d잔입니다. \" %coffee)\n    break\n  else:\n    coffee = coffee + int(order)\n    print(\"재고가 부족합니다. 다시 입력하세요.\")  \n```\n      \n<br>\n\n ```python\ncustomer = \"손님\"\ni = 5\nwhile i >= 1:\n    print(\"{0}, 커피가 준비되었습니다. {1}번 남았어요.\".format(customer, i))\n    i -= 1\n    if i == 0:\n        print(\"커피는 폐기처분 되었습니다\")\n``` \n    손님, 커피가 준비되었습니다. 5번 남았어요.\n    손님, 커피가 준비되었습니다. 4번 남았어요.\n    손님, 커피가 준비되었습니다. 3번 남았어요.\n    손님, 커피가 준비되었습니다. 2번 남았어요.\n    손님, 커피가 준비되었습니다. 1번 남았어요.\n    커피는 폐기처분 되었습니다\n\n<br>\n\n### **for문의 기본구조**\n> for 변수 in 리스트(또는 튜플, 문자열):\n>  수행할 문장1\n>  수행할 문장2\n\n```python\ntest = ['a', 'b', 'c']\nfor i in test:\n  print(i)\n```\n    a\n    b\n    c\n\n<br>\n\n```python\nscore = [100, 90, 60, 50, 40, 30]\nnumber = 0\nfor i in score:\n  number += 1\n  if i < 60:\n    print(\"{0}번 학생은 불합격입니다.\".format(number))\n  else:\n    print(\"{0}번 학생은 합격입니다.\".format(number))\n```\n        1번 학생은 합격입니다.\n        2번 학생은 합격입니다.\n        3번 학생은 합격입니다.\n        4번 학생은 불합격입니다.\n        5번 학생은 불합격입니다.\n        6번 학생은 불합격입니다.\n<br>\n\n```python\na = [(1,2), (3,4), (5,6)]\nfor (first, last) in a:\n    print(first + last)\n```\n    3\n    7\n    11\n\n<br>\n\n### **for문에서 range 함수**\n- range\n숫자 리스트를 자동으로 만들어주는 함수\n\n아래는 0부터 10미만의 숫자를 포함하는 range 객체를 만들어준다\n```python\na = range(10)\na\n>> range(0, 10)\n```\n<br>\n\n이를 for문에서 사용해보자\n\n```python\n    for i in range(1, 6):  #1,2,3,4,5\n    print(i)\n\n```\n    1\n    2\n    3\n    4\n    5\n\n<br>       \nlen(marks)는 5, number 변수에는 0에서 4까지 숫자가 대입될 것이다.\nmarks[number]는 차례로 90, 25, 67, 45, 80 값을 가지게 된다\n\n```python\nmarks = [90, 25, 67, 45, 80]\nfor number in range(len(marks)):\n    if marks[number] < 60: \n        continue\n    print(\"%d번 학생 축하합니다. 합격입니다.\" % (number+1))\n```\n\n### ****   \n<br>       \n       \n### **Ref**  \n[나도코딩](https://www.youtube.com/watch?v=kWiCuklohdY)\n[점프투파이썬](https://wikidocs.net/1015)\n\n<br>\n<br>\n<br>\n","slug":"python05-반복문조건문","published":1,"updated":"2022-01-03T12:20:08.050Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cky2hohf500505nrj2f3vaco9","content":"<h3 id=\"들여쓰기\"><a href=\"#들여쓰기\" class=\"headerlink\" title=\"들여쓰기\"></a><strong>들여쓰기</strong></h3><p>파이썬은 자바나 다른 프로그래밍 언어와는 다른게 들여쓰기를 꼭 해주어야 한다<br>들여쓰기를 무시할 경우 에러가 남</p>\n<br>\n\n<h3 id=\"콜론\"><a href=\"#콜론\" class=\"headerlink\" title=\"콜론(:)\"></a><strong>콜론(:)</strong></h3><p>파이썬은 세미콜론(;)을 사용하는 자바와는 다르게<br>문장 끝에 항상 콜론(:)을 사용한다</p>\n<br>\n\n<h3 id=\"if문\"><a href=\"#if문\" class=\"headerlink\" title=\"if문\"></a><strong>if문</strong></h3><ul>\n<li>if - else 문<br>여태까지 배웠던 if문과 크게 다를게 없다</li>\n</ul>\n<p>else if아닌 elif를 사용한다</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">weather = <span class=\"built_in\">input</span>(<span class=\"string\">&quot;오늘 날씨는 어때요?&quot;</span>)                   </span><br><span class=\"line\"><span class=\"keyword\">if</span> weather == <span class=\"string\">&quot;비&quot;</span>o<span class=\"string\">r&quot;눈&quot;</span>:          </span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;우산을 챙기세요&quot;</span>)       </span><br><span class=\"line\"><span class=\"keyword\">elif</span> weather == <span class=\"string\">&quot;미세먼지&quot;</span>:     </span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;마스크를 챙기세요&quot;</span>)      </span><br><span class=\"line\"><span class=\"keyword\">else</span>:                       </span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;준비물 필요 없어요&quot;</span>)     </span><br></pre></td></tr></table></figure>\n<ul>\n<li>input<br>자바에서 Scanner라고 생각하면 된다<br>값을 입력할 수 있다.<br><img src=\"/images/python05/input.PNG\"></li>\n</ul>\n<br>\n\n<h3 id=\"in을-사용한-조건문\"><a href=\"#in을-사용한-조건문\" class=\"headerlink\" title=\"in을 사용한 조건문\"></a><strong>in을 사용한 조건문</strong></h3><p>영어로 in이 ~안에라는 뜻을 가지고 있는데, 파이썬에서도 같은 의미로 사용되어진다<br>아래 코드에서 1이 [1, 2, 3, 4]안에 있으면 True 없으면, False로 반환한다<br>not in 은 in의 반대이다</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span> <span class=\"keyword\">in</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\">&gt;&gt; <span class=\"literal\">True</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>pass<br>조건문에서 아무 일도 하지 않게 설정 할 수 있다</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">weather = <span class=\"built_in\">input</span>(<span class=\"string\">&quot;오늘의 날씨는?&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"string\">&#x27;비&#x27;</span> <span class=\"keyword\">in</span> weather:</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">&quot;우산을 준비하세요&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">elif</span> <span class=\"string\">&#x27;눈&#x27;</span> <span class=\"keyword\">in</span> weather:</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">&quot;우산을 준비하세요&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">elif</span> <span class=\"string\">&#x27;해&#x27;</span> <span class=\"keyword\">in</span> weather:</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">&quot;준비물이 없습니다&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">  <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h3 id=\"while\"><a href=\"#while\" class=\"headerlink\" title=\"while\"></a><strong>while</strong></h3><p>java에서 while문을 사용하는 방법과 크게 다르지 않다  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> a &lt; <span class=\"number\">10</span>:</span><br><span class=\"line\">  a = a + <span class=\"number\">1</span>```</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(a)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> a == <span class=\"number\">10</span>:&lt;br&gt;</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n<br>\n\n<p>아래는 커피 주문 자판기를 구현한것이다</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">coffee = <span class=\"number\">100</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">  order = <span class=\"built_in\">input</span>(<span class=\"string\">&quot;주문할 커피 개수를 입력하세요. &quot;</span>)</span><br><span class=\"line\">  coffee = coffee - <span class=\"built_in\">int</span>(order)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> coffee &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;남은 커피는 %d잔입니다. &quot;</span> %coffee)</span><br><span class=\"line\">  <span class=\"keyword\">elif</span> coffee == <span class=\"number\">0</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;남은 커피는 %d잔입니다. &quot;</span> %coffee)</span><br><span class=\"line\">    <span class=\"keyword\">break</span></span><br><span class=\"line\">  <span class=\"keyword\">else</span>:</span><br><span class=\"line\">    coffee = coffee + <span class=\"built_in\">int</span>(order)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;재고가 부족합니다. 다시 입력하세요.&quot;</span>)  </span><br></pre></td></tr></table></figure>\n<br>\n\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">customer = <span class=\"string\">&quot;손님&quot;</span></span><br><span class=\"line\">i = <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> i &gt;= <span class=\"number\">1</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;0&#125;, 커피가 준비되었습니다. &#123;1&#125;번 남았어요.&quot;</span>.<span class=\"built_in\">format</span>(customer, i))</span><br><span class=\"line\">    i -= <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> i == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;커피는 폐기처분 되었습니다&quot;</span>)</span><br></pre></td></tr></table></figure>\n<pre><code>손님, 커피가 준비되었습니다. 5번 남았어요.\n손님, 커피가 준비되었습니다. 4번 남았어요.\n손님, 커피가 준비되었습니다. 3번 남았어요.\n손님, 커피가 준비되었습니다. 2번 남았어요.\n손님, 커피가 준비되었습니다. 1번 남았어요.\n커피는 폐기처분 되었습니다\n</code></pre>\n<br>\n\n<h3 id=\"for문의-기본구조\"><a href=\"#for문의-기본구조\" class=\"headerlink\" title=\"for문의 기본구조\"></a><strong>for문의 기본구조</strong></h3><blockquote>\n<p>for 변수 in 리스트(또는 튜플, 문자열):<br> 수행할 문장1<br> 수행할 문장2</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test = [<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> test:</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(i)</span><br></pre></td></tr></table></figure>\n<pre><code>a\nb\nc\n</code></pre>\n<br>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">score = [<span class=\"number\">100</span>, <span class=\"number\">90</span>, <span class=\"number\">60</span>, <span class=\"number\">50</span>, <span class=\"number\">40</span>, <span class=\"number\">30</span>]</span><br><span class=\"line\">number = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> score:</span><br><span class=\"line\">  number += <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> i &lt; <span class=\"number\">60</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;0&#125;번 학생은 불합격입니다.&quot;</span>.<span class=\"built_in\">format</span>(number))</span><br><span class=\"line\">  <span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;0&#125;번 학생은 합격입니다.&quot;</span>.<span class=\"built_in\">format</span>(number))</span><br></pre></td></tr></table></figure>\n<pre><code>    1번 학생은 합격입니다.\n    2번 학생은 합격입니다.\n    3번 학생은 합격입니다.\n    4번 학생은 불합격입니다.\n    5번 학생은 불합격입니다.\n    6번 학생은 불합격입니다.\n</code></pre>\n<br>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [(<span class=\"number\">1</span>,<span class=\"number\">2</span>), (<span class=\"number\">3</span>,<span class=\"number\">4</span>), (<span class=\"number\">5</span>,<span class=\"number\">6</span>)]</span><br><span class=\"line\"><span class=\"keyword\">for</span> (first, last) <span class=\"keyword\">in</span> a:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(first + last)</span><br></pre></td></tr></table></figure>\n<pre><code>3\n7\n11\n</code></pre>\n<br>\n\n<h3 id=\"for문에서-range-함수\"><a href=\"#for문에서-range-함수\" class=\"headerlink\" title=\"for문에서 range 함수\"></a><strong>for문에서 range 함수</strong></h3><ul>\n<li>range<br>숫자 리스트를 자동으로 만들어주는 함수</li>\n</ul>\n<p>아래는 0부터 10미만의 숫자를 포함하는 range 객체를 만들어준다</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"built_in\">range</span>(<span class=\"number\">10</span>)</span><br><span class=\"line\">a</span><br><span class=\"line\">&gt;&gt; <span class=\"built_in\">range</span>(<span class=\"number\">0</span>, <span class=\"number\">10</span>)</span><br></pre></td></tr></table></figure>\n<br>\n\n<p>이를 for문에서 사용해보자</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">6</span>):  <span class=\"comment\">#1,2,3,4,5</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(i)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<pre><code>1\n2\n3\n4\n5\n</code></pre>\n<br>       \nlen(marks)는 5, number 변수에는 0에서 4까지 숫자가 대입될 것이다.\nmarks[number]는 차례로 90, 25, 67, 45, 80 값을 가지게 된다\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">marks = [<span class=\"number\">90</span>, <span class=\"number\">25</span>, <span class=\"number\">67</span>, <span class=\"number\">45</span>, <span class=\"number\">80</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> number <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(marks)):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> marks[number] &lt; <span class=\"number\">60</span>: </span><br><span class=\"line\">        <span class=\"keyword\">continue</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;%d번 학생 축하합니다. 합격입니다.&quot;</span> % (number+<span class=\"number\">1</span>))</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"****\"></a>****</h3><br>       \n       \n<h3 id=\"Ref\"><a href=\"#Ref\" class=\"headerlink\" title=\"Ref\"></a><strong>Ref</strong></h3><p><a href=\"https://www.youtube.com/watch?v=kWiCuklohdY\">나도코딩</a><br><a href=\"https://wikidocs.net/1015\">점프투파이썬</a></p>\n<br>\n<br>\n<br>\n","site":{"data":{}},"excerpt":"들여쓰기\n파이썬은 자바나 다른 프로그래밍 언어와는 다른게 들여쓰기를 꼭 해주어야 한다\n들여쓰기를 무시할 경우 에러가 남\n\n\n콜론(:)\n파이썬은 세미콜론(;)을 사용하는 자바와는 다르게\n문장 끝에 항상 콜론(:)을 사용한다\n\n\nif문\n * if - else 문\n   여태까지 배웠던 if문과 크게 다를게 없다\n\nelse if아닌 elif를 사용한다\n\n1\n2\n3\n4\n5\n6\n7\n\n\nweather = input(\"오늘 날씨는 어때요?\")                   \nif weather == \"비\"or\"눈\":          \n    p","more":"<h3 id=\"들여쓰기\"><a href=\"#들여쓰기\" class=\"headerlink\" title=\"들여쓰기\"></a><strong>들여쓰기</strong></h3><p>파이썬은 자바나 다른 프로그래밍 언어와는 다른게 들여쓰기를 꼭 해주어야 한다<br>들여쓰기를 무시할 경우 에러가 남</p>\n<br>\n\n<h3 id=\"콜론\"><a href=\"#콜론\" class=\"headerlink\" title=\"콜론(:)\"></a><strong>콜론(:)</strong></h3><p>파이썬은 세미콜론(;)을 사용하는 자바와는 다르게<br>문장 끝에 항상 콜론(:)을 사용한다</p>\n<br>\n\n<h3 id=\"if문\"><a href=\"#if문\" class=\"headerlink\" title=\"if문\"></a><strong>if문</strong></h3><ul>\n<li>if - else 문<br>여태까지 배웠던 if문과 크게 다를게 없다</li>\n</ul>\n<p>else if아닌 elif를 사용한다</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">weather = <span class=\"built_in\">input</span>(<span class=\"string\">&quot;오늘 날씨는 어때요?&quot;</span>)                   </span><br><span class=\"line\"><span class=\"keyword\">if</span> weather == <span class=\"string\">&quot;비&quot;</span>o<span class=\"string\">r&quot;눈&quot;</span>:          </span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;우산을 챙기세요&quot;</span>)       </span><br><span class=\"line\"><span class=\"keyword\">elif</span> weather == <span class=\"string\">&quot;미세먼지&quot;</span>:     </span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;마스크를 챙기세요&quot;</span>)      </span><br><span class=\"line\"><span class=\"keyword\">else</span>:                       </span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;준비물 필요 없어요&quot;</span>)     </span><br></pre></td></tr></table></figure>\n<ul>\n<li>input<br>자바에서 Scanner라고 생각하면 된다<br>값을 입력할 수 있다.<br><img src=\"/images/python05/input.PNG\"></li>\n</ul>\n<br>\n\n<h3 id=\"in을-사용한-조건문\"><a href=\"#in을-사용한-조건문\" class=\"headerlink\" title=\"in을 사용한 조건문\"></a><strong>in을 사용한 조건문</strong></h3><p>영어로 in이 ~안에라는 뜻을 가지고 있는데, 파이썬에서도 같은 의미로 사용되어진다<br>아래 코드에서 1이 [1, 2, 3, 4]안에 있으면 True 없으면, False로 반환한다<br>not in 은 in의 반대이다</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span> <span class=\"keyword\">in</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\">&gt;&gt; <span class=\"literal\">True</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>pass<br>조건문에서 아무 일도 하지 않게 설정 할 수 있다</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">weather = <span class=\"built_in\">input</span>(<span class=\"string\">&quot;오늘의 날씨는?&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"string\">&#x27;비&#x27;</span> <span class=\"keyword\">in</span> weather:</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">&quot;우산을 준비하세요&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">elif</span> <span class=\"string\">&#x27;눈&#x27;</span> <span class=\"keyword\">in</span> weather:</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">&quot;우산을 준비하세요&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">elif</span> <span class=\"string\">&#x27;해&#x27;</span> <span class=\"keyword\">in</span> weather:</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">&quot;준비물이 없습니다&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">  <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h3 id=\"while\"><a href=\"#while\" class=\"headerlink\" title=\"while\"></a><strong>while</strong></h3><p>java에서 while문을 사용하는 방법과 크게 다르지 않다  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> a &lt; <span class=\"number\">10</span>:</span><br><span class=\"line\">  a = a + <span class=\"number\">1</span>```</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(a)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> a == <span class=\"number\">10</span>:&lt;br&gt;</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n<br>\n\n<p>아래는 커피 주문 자판기를 구현한것이다</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">coffee = <span class=\"number\">100</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">  order = <span class=\"built_in\">input</span>(<span class=\"string\">&quot;주문할 커피 개수를 입력하세요. &quot;</span>)</span><br><span class=\"line\">  coffee = coffee - <span class=\"built_in\">int</span>(order)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> coffee &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;남은 커피는 %d잔입니다. &quot;</span> %coffee)</span><br><span class=\"line\">  <span class=\"keyword\">elif</span> coffee == <span class=\"number\">0</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;남은 커피는 %d잔입니다. &quot;</span> %coffee)</span><br><span class=\"line\">    <span class=\"keyword\">break</span></span><br><span class=\"line\">  <span class=\"keyword\">else</span>:</span><br><span class=\"line\">    coffee = coffee + <span class=\"built_in\">int</span>(order)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;재고가 부족합니다. 다시 입력하세요.&quot;</span>)  </span><br></pre></td></tr></table></figure>\n<br>\n\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">customer = <span class=\"string\">&quot;손님&quot;</span></span><br><span class=\"line\">i = <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> i &gt;= <span class=\"number\">1</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;0&#125;, 커피가 준비되었습니다. &#123;1&#125;번 남았어요.&quot;</span>.<span class=\"built_in\">format</span>(customer, i))</span><br><span class=\"line\">    i -= <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> i == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;커피는 폐기처분 되었습니다&quot;</span>)</span><br></pre></td></tr></table></figure>\n<pre><code>손님, 커피가 준비되었습니다. 5번 남았어요.\n손님, 커피가 준비되었습니다. 4번 남았어요.\n손님, 커피가 준비되었습니다. 3번 남았어요.\n손님, 커피가 준비되었습니다. 2번 남았어요.\n손님, 커피가 준비되었습니다. 1번 남았어요.\n커피는 폐기처분 되었습니다\n</code></pre>\n<br>\n\n<h3 id=\"for문의-기본구조\"><a href=\"#for문의-기본구조\" class=\"headerlink\" title=\"for문의 기본구조\"></a><strong>for문의 기본구조</strong></h3><blockquote>\n<p>for 변수 in 리스트(또는 튜플, 문자열):<br> 수행할 문장1<br> 수행할 문장2</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test = [<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> test:</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(i)</span><br></pre></td></tr></table></figure>\n<pre><code>a\nb\nc\n</code></pre>\n<br>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">score = [<span class=\"number\">100</span>, <span class=\"number\">90</span>, <span class=\"number\">60</span>, <span class=\"number\">50</span>, <span class=\"number\">40</span>, <span class=\"number\">30</span>]</span><br><span class=\"line\">number = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> score:</span><br><span class=\"line\">  number += <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> i &lt; <span class=\"number\">60</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;0&#125;번 학생은 불합격입니다.&quot;</span>.<span class=\"built_in\">format</span>(number))</span><br><span class=\"line\">  <span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;0&#125;번 학생은 합격입니다.&quot;</span>.<span class=\"built_in\">format</span>(number))</span><br></pre></td></tr></table></figure>\n<pre><code>    1번 학생은 합격입니다.\n    2번 학생은 합격입니다.\n    3번 학생은 합격입니다.\n    4번 학생은 불합격입니다.\n    5번 학생은 불합격입니다.\n    6번 학생은 불합격입니다.\n</code></pre>\n<br>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [(<span class=\"number\">1</span>,<span class=\"number\">2</span>), (<span class=\"number\">3</span>,<span class=\"number\">4</span>), (<span class=\"number\">5</span>,<span class=\"number\">6</span>)]</span><br><span class=\"line\"><span class=\"keyword\">for</span> (first, last) <span class=\"keyword\">in</span> a:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(first + last)</span><br></pre></td></tr></table></figure>\n<pre><code>3\n7\n11\n</code></pre>\n<br>\n\n<h3 id=\"for문에서-range-함수\"><a href=\"#for문에서-range-함수\" class=\"headerlink\" title=\"for문에서 range 함수\"></a><strong>for문에서 range 함수</strong></h3><ul>\n<li>range<br>숫자 리스트를 자동으로 만들어주는 함수</li>\n</ul>\n<p>아래는 0부터 10미만의 숫자를 포함하는 range 객체를 만들어준다</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"built_in\">range</span>(<span class=\"number\">10</span>)</span><br><span class=\"line\">a</span><br><span class=\"line\">&gt;&gt; <span class=\"built_in\">range</span>(<span class=\"number\">0</span>, <span class=\"number\">10</span>)</span><br></pre></td></tr></table></figure>\n<br>\n\n<p>이를 for문에서 사용해보자</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">6</span>):  <span class=\"comment\">#1,2,3,4,5</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(i)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<pre><code>1\n2\n3\n4\n5\n</code></pre>\n<br>       \nlen(marks)는 5, number 변수에는 0에서 4까지 숫자가 대입될 것이다.\nmarks[number]는 차례로 90, 25, 67, 45, 80 값을 가지게 된다\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">marks = [<span class=\"number\">90</span>, <span class=\"number\">25</span>, <span class=\"number\">67</span>, <span class=\"number\">45</span>, <span class=\"number\">80</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> number <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(marks)):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> marks[number] &lt; <span class=\"number\">60</span>: </span><br><span class=\"line\">        <span class=\"keyword\">continue</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;%d번 학생 축하합니다. 합격입니다.&quot;</span> % (number+<span class=\"number\">1</span>))</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"****\"></a>****</h3><br>       \n       \n<h3 id=\"Ref\"><a href=\"#Ref\" class=\"headerlink\" title=\"Ref\"></a><strong>Ref</strong></h3><p><a href=\"https://www.youtube.com/watch?v=kWiCuklohdY\">나도코딩</a><br><a href=\"https://wikidocs.net/1015\">점프투파이썬</a></p>\n<br>\n<br>\n<br>\n"},{"date":"2021-12-07T15:00:00.000Z","title":"파이썬 List comprehension","toc":true,"_content":"### **List comprehension**\n---\n리스트를 쉽게 생성하기 위한 방법으로 아래와 같은 형식을 갖는다\n\n    [출력표현식 for 요소 in 입력Sequence [if 조건식]]\n\n\n```python\noldlist = [1,2,'A',False,3]\nnewlist = [i*i for i in oldlist if type(i)==int]\nprint(newlist)\n>> [1, 4, 9]\n```\n\n위의 예시를 해석해보자.\noldlist의 리스트 값이 조건문을 만족한다면, 만족한 리스트 값만 i에 순차 적으로 대입한다.\n대입된 i 값으로, 연산식인 \"i*i\"를 실행하여 계산하고, 그에 대한 결과를 newlist인 리스트로 얻게 된다\n\n<br>\n\n```python\na = [1,2,3,4]\nresult = [num * 3 for num in a]\nprint(result)\n>> [3, 6, 9, 12]\n\n```\n\n<br>\n\n\n### **Ref**\n---\n[블로그](http://pythonstudy.xyz/python/article/22-Python-Comprehension)\n[점프투파이썬](https://wikidocs.net/22)\n\n<br>\n<br>\n<br>","source":"_posts/python06_listcomprehension.md","raw":"---\ndate: 2021-12-08\ntitle: 파이썬 List comprehension\ntags: python\ncategories:\n  - 파이썬\n  - Python 기초\ntoc: true\n---\n### **List comprehension**\n---\n리스트를 쉽게 생성하기 위한 방법으로 아래와 같은 형식을 갖는다\n\n    [출력표현식 for 요소 in 입력Sequence [if 조건식]]\n\n\n```python\noldlist = [1,2,'A',False,3]\nnewlist = [i*i for i in oldlist if type(i)==int]\nprint(newlist)\n>> [1, 4, 9]\n```\n\n위의 예시를 해석해보자.\noldlist의 리스트 값이 조건문을 만족한다면, 만족한 리스트 값만 i에 순차 적으로 대입한다.\n대입된 i 값으로, 연산식인 \"i*i\"를 실행하여 계산하고, 그에 대한 결과를 newlist인 리스트로 얻게 된다\n\n<br>\n\n```python\na = [1,2,3,4]\nresult = [num * 3 for num in a]\nprint(result)\n>> [3, 6, 9, 12]\n\n```\n\n<br>\n\n\n### **Ref**\n---\n[블로그](http://pythonstudy.xyz/python/article/22-Python-Comprehension)\n[점프투파이썬](https://wikidocs.net/22)\n\n<br>\n<br>\n<br>","slug":"python06-listcomprehension","published":1,"updated":"2022-01-03T12:20:08.050Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cky2hohf500525nrj574q04ei","content":"<h3 id=\"List-comprehension\"><a href=\"#List-comprehension\" class=\"headerlink\" title=\"List comprehension\"></a><strong>List comprehension</strong></h3><hr>\n<p>리스트를 쉽게 생성하기 위한 방법으로 아래와 같은 형식을 갖는다</p>\n<pre><code>[출력표현식 for 요소 in 입력Sequence [if 조건식]]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">oldlist = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"string\">&#x27;A&#x27;</span>,<span class=\"literal\">False</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">newlist = [i*i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> oldlist <span class=\"keyword\">if</span> <span class=\"built_in\">type</span>(i)==<span class=\"built_in\">int</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(newlist)</span><br><span class=\"line\">&gt;&gt; [<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">9</span>]</span><br></pre></td></tr></table></figure>\n\n<p>위의 예시를 해석해보자.<br>oldlist의 리스트 값이 조건문을 만족한다면, 만족한 리스트 값만 i에 순차 적으로 대입한다.<br>대입된 i 값으로, 연산식인 “i*i”를 실행하여 계산하고, 그에 대한 결과를 newlist인 리스트로 얻게 된다</p>\n<br>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\">result = [num * <span class=\"number\">3</span> <span class=\"keyword\">for</span> num <span class=\"keyword\">in</span> a]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(result)</span><br><span class=\"line\">&gt;&gt; [<span class=\"number\">3</span>, <span class=\"number\">6</span>, <span class=\"number\">9</span>, <span class=\"number\">12</span>]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n<h3 id=\"Ref\"><a href=\"#Ref\" class=\"headerlink\" title=\"Ref\"></a><strong>Ref</strong></h3><hr>\n<p><a href=\"http://pythonstudy.xyz/python/article/22-Python-Comprehension\">블로그</a><br><a href=\"https://wikidocs.net/22\">점프투파이썬</a></p>\n<br>\n<br>\n<br>","site":{"data":{}},"excerpt":"List comprehension\n\n\n\n리스트를 쉽게 생성하기 위한 방법으로 아래와 같은 형식을 갖는다\n\n[출력표현식 for 요소 in 입력Sequence [if 조건식]]\n\n\n1\n2\n3\n4\n\n\noldlist = [1,2,'A',False,3]\nnewlist = [i*i for i in oldlist if type(i)==int]\nprint(newlist)\n>> [1, 4, 9]\n\n\n위의 예시를 해석해보자.\noldlist의 리스트 값이 조건문을 만족한다면, 만족한 리스트 값만 i에 순차 적으로 대입한다.\n대입된 i 값으로, 연산식인","more":"<h3 id=\"List-comprehension\"><a href=\"#List-comprehension\" class=\"headerlink\" title=\"List comprehension\"></a><strong>List comprehension</strong></h3><hr>\n<p>리스트를 쉽게 생성하기 위한 방법으로 아래와 같은 형식을 갖는다</p>\n<pre><code>[출력표현식 for 요소 in 입력Sequence [if 조건식]]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">oldlist = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"string\">&#x27;A&#x27;</span>,<span class=\"literal\">False</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">newlist = [i*i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> oldlist <span class=\"keyword\">if</span> <span class=\"built_in\">type</span>(i)==<span class=\"built_in\">int</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(newlist)</span><br><span class=\"line\">&gt;&gt; [<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">9</span>]</span><br></pre></td></tr></table></figure>\n\n<p>위의 예시를 해석해보자.<br>oldlist의 리스트 값이 조건문을 만족한다면, 만족한 리스트 값만 i에 순차 적으로 대입한다.<br>대입된 i 값으로, 연산식인 “i*i”를 실행하여 계산하고, 그에 대한 결과를 newlist인 리스트로 얻게 된다</p>\n<br>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\">result = [num * <span class=\"number\">3</span> <span class=\"keyword\">for</span> num <span class=\"keyword\">in</span> a]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(result)</span><br><span class=\"line\">&gt;&gt; [<span class=\"number\">3</span>, <span class=\"number\">6</span>, <span class=\"number\">9</span>, <span class=\"number\">12</span>]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n<h3 id=\"Ref\"><a href=\"#Ref\" class=\"headerlink\" title=\"Ref\"></a><strong>Ref</strong></h3><hr>\n<p><a href=\"http://pythonstudy.xyz/python/article/22-Python-Comprehension\">블로그</a><br><a href=\"https://wikidocs.net/22\">점프투파이썬</a></p>\n<br>\n<br>\n<br>"},{"date":"2021-12-08T15:00:00.000Z","title":"파이썬 Class","toc":true,"_content":"  \n\n### **클래스와 객체**\n---\n클래스는 붕어빵 틀에 비유를 할 수 있다. \n붕어빵 틀로 수백개의 붕어빵을 만들어 낼 수 있듯이 클래스로 많은 객체를 만들 수 있다.\n스타크래프트 게임의 예로 들면 클래스를 이용해서 수백개의 유닛을 만들 수 있는것이다.\n\n또 한가지 예를 들면 클래스는 설계 도면이고, 객체는 클래스(설계 도면)을 이용해 만든 어떠한 피조물이다. 따라서 클래스를 실체화 한것이다\n\n클래스를 사용하는 이유\n- 글로벌 변수를 없애고, 모든 변수를 어떠한 스코프에 소속시킨다\n- 몇번이고 재사용 가능하다\n- 코드의 수정을 최소화한다\n- 함수 실행중에, 함수 자신을 다시 호출하는 처리 등이 가능하게 한다\n<br>\n\n### **스타크래프트 예시**\n---\n```python\nclass Unit:\n    def __init__(self, name, hp, damage):\n        self.name = name\n        self.hp = hp\n        self.damage = damage\n        print(\"{0}유닛이 생성 되었습니다.\".format(self.name))\n        print(\"체력 {0}, 공격력 {1}\".format(self.hp, self.damage))\n\nmarine1 = Unit(\"마린\", 40, 5)\nmarine2 = Unit(\"마린\", 40, 5)\ntank = Unit(\"탱크\", 150, 3)\n```\n위의 예시에서는 marine1, marine2, tank라는 객체를 생성한 것이다.\n각각의 객체는 각자의 특징을 가졌다.\n-> 매개 변수 값이 다름\nmarine1, marine2, tank 는 Unit 클래스의 인스턴스이다.\n인스턴스와 객체의 차이는 인스턴스는 클래스와 객체의 관계를 위주로 설명할때 사용된다.\n'Unit 클래스의 객체' 라는 표현보다는 'Unit 클래스의 인스턴스' 라는 표현을 쓴다.\n\n\n<br>\n\n### **__init__**\n---\n\n__init__란 자바에서 생성자 역할을 하는 메서드이다. \n- 객체가 만들어질때 자동으로 호출되어진다. <br>\n(생성자란 객체가 생성될때 자동으로 호출되는 메서드를 의미한다)\n- 인스턴스를 초기화 해준다고 생각\n\nself\n- self는 자기 자신을 의미하고, 즉 인스턴스를 가리킨다\n- self는 자바에서 this와 같다.\n\n<br>\n\n### **메소드**\n---\n아래는 attak, damaged 라는 메소드를 만들었고\n객체에서 메소드를 불러와 사용해보았다\n\n```python\nclass AttackUnit:\n    def __init__(self, name, hp, damage):\n        self.name = name\n        self.hp = hp\n        self.damage = damage\n\n    def attack(self, location):\n        print(\"{0} : {1} 방향으로 적군을 공겨갑니다. [공격력 {2}]\"\\\n              .format(self.name, location, self.damage))\n\n    def damaged(self, damage):\n        print(\"{0} : {1} 데미지를 입었습니다.\".format(self.name, damage))\n        self.hp -= damage\n        print(\"{0} : 현재 체력은 {1} 입니다. \".format(self.name, self.hp))\n        if self.hp <= 0:\n            print(\"{0} : 파괴되었습니다. \".format(self.name))\n\nfirebat1 = AttackUnit(\"파이어뱃\", 50, 16)\nfirebat1.attack(\"5시\")\n\nfirebat1.damaged(25)\nfirebat1.damaged(25)\n```\n    파이어뱃 : 5시 방향으로 적군을 공겨갑니다. [공격력 16]\n    파이어뱃 : 25 데미지를 입었습니다.\n    파이어뱃 : 현재 체력은 25 입니다. \n    파이어뱃 : 25 데미지를 입었습니다.\n    파이어뱃 : 현재 체력은 0 입니다. \n    파이어뱃 : 파괴되었습니다. \n\n<br>\n\n\n### **상속**\n---\n클래스 AttackUnit은 Unit을 상속 받았다.\n\n```python\nclass Unit:\n    def __init__(self, name, hp):\n        self.name = name\n        self.hp = hp\n        \nclass AttackUnit(Unit):   #상속 \n    def __init__(self, name, hp, damage):\n        #self.name = name\n        #self.hp = hp\n        Unit.__init__(self, name, hp)\n        self.damage = damage\n\n```\n\n<br>\n\n\n### **다중상속**\n---\n\n부모가 둘이여서 자식이 여러곳에서 상속을 받는다고 생각하면 된다.\n아래 예시에서 FlyableAttackUnit은 AttackUnit과 Flyable을 상속받는다.\n```python\nclass Unit:\n    def __init__(self, name, hp):\n        self.name = name\n        self.hp = hp\n        \nclass AttackUnit(Unit):   #상속 \n    def __init__(self, name, hp, damage):\n        #self.name = name\n        #self.hp = hp\n        Unit.__init__(self, name, hp)\n        self.damage = damage\n        \n    def attack(self, location):\n        print(\"{0} : {1} 방향으로 적군을 공격합니다. [공격력 {2}]\"\\\n              .format(self.name, location, self.damage))\n\n    def damaged(self, damage):\n        print(\"{0} : {1} 데미지를 입었습니다.\".format(self.name, damage))\n        self.hp -= damage\n        print(\"{0} : 현재 체력은 {1} 입니다. \".format(self.name, self.hp))\n        if self.hp <= 0:\n            print(\"{0} : 파괴되었습니다. \".format(self.name))\n\nclass Flyable:\n    def __init__(self, flying_speed):\n        self.flying_speed = flying_speed\n        \n    def fly(self, name, location):\n        print(\"{0} : {1} 방향으로 날아갑니다. [속도 {2}]\" \\\n              .format(name, location, self.flying_speed))\n\nclass FlyableAttackUnit(AttackUnit, Flyable):\n    def __init__(self, name, hp, damage, flying_speed):\n        AttackUnit.__init__(self, name, hp, damage)\n        Flyable.__init__(self, flying_speed)\n        \n            \nvalkyrie = FlyableAttackUnit(\"발키리\",200, 6, 5)\nvalkyrie.fly(valkyrie.name, \"3시\")\n```\n<br>\n\n### **Super**\n---\n원래는 상속 받을때 아래와 같이 적었지만,\n    \n    Unit.__init__(self, name, hp)\n\nsuper를 이용해서 더 간단하게 사용할 수 있다\n이때 self를 제거하고 사용할 수 있다\n    \n    super().__init__(name, hp, 0)\n\n```python\nclass Unit:\n    def __init__(self, name, hp):\n        self.name = name\n        self.hp = hp\n        \nclass AttackUnit(Unit):   #상속 \n    def __init__(self, name, hp, damage):\n        #Unit.__init__(self, name, hp)\n        super().__init__(name, hp, 0)\n        self.damage = damage\n```\n<br>\n\n하지만 다중 상속에서는 문제가 발생한다.\n                          \n아래 예제에서는 FlyableUnit이 Unit과 Flyable을 다중 상속받는다\n이때 아래와 같이 super()를 통해 상속을 해주게 되면\n\"class FlyableUnit(**Flyable**, Unit):\"   Flyable을 먼저 선언해줬기 때문에   \nFlyable 생성자라고 실행 결과가 나오게 된다 (Unit 생성자가 호출이 안됨)\n\n따라서   Unit.__init__(self), Flyable.__init__(self) 로 상속을 해줄 수 있다.\n\n\n```python\nclass Unit:\n    def __init__(self):\n        print(\"Unit 생성자\")\n    \nclass Flyable:\n    def __init__(self):\n        print(\"Flyable 생성자\")\n        \nclass FlyableUnit(Flyable, Unit):\n    def __init__(self):\n        #super().__init__()\n        Unit.__init__(self)\n        Flyable.__init__(self)\n        \ndropship = FlyableUnit()\n```\n\n\n### **Ref**  \n[나도코딩](https://www.youtube.com/watch?v=kWiCuklohdY)\n[점프투파이썬](https://wikidocs.net/1015)\n(https://engineer-mole.tistory.com/190)\n<br>\n<br>\n<br>\n","source":"_posts/python08_class.md","raw":"---\ndate: 2021-12-09\ntitle: 파이썬 Class\ntags: python\ncategories:\n  - 파이썬\n  - Python 기초\ntoc: true\n---\n  \n\n### **클래스와 객체**\n---\n클래스는 붕어빵 틀에 비유를 할 수 있다. \n붕어빵 틀로 수백개의 붕어빵을 만들어 낼 수 있듯이 클래스로 많은 객체를 만들 수 있다.\n스타크래프트 게임의 예로 들면 클래스를 이용해서 수백개의 유닛을 만들 수 있는것이다.\n\n또 한가지 예를 들면 클래스는 설계 도면이고, 객체는 클래스(설계 도면)을 이용해 만든 어떠한 피조물이다. 따라서 클래스를 실체화 한것이다\n\n클래스를 사용하는 이유\n- 글로벌 변수를 없애고, 모든 변수를 어떠한 스코프에 소속시킨다\n- 몇번이고 재사용 가능하다\n- 코드의 수정을 최소화한다\n- 함수 실행중에, 함수 자신을 다시 호출하는 처리 등이 가능하게 한다\n<br>\n\n### **스타크래프트 예시**\n---\n```python\nclass Unit:\n    def __init__(self, name, hp, damage):\n        self.name = name\n        self.hp = hp\n        self.damage = damage\n        print(\"{0}유닛이 생성 되었습니다.\".format(self.name))\n        print(\"체력 {0}, 공격력 {1}\".format(self.hp, self.damage))\n\nmarine1 = Unit(\"마린\", 40, 5)\nmarine2 = Unit(\"마린\", 40, 5)\ntank = Unit(\"탱크\", 150, 3)\n```\n위의 예시에서는 marine1, marine2, tank라는 객체를 생성한 것이다.\n각각의 객체는 각자의 특징을 가졌다.\n-> 매개 변수 값이 다름\nmarine1, marine2, tank 는 Unit 클래스의 인스턴스이다.\n인스턴스와 객체의 차이는 인스턴스는 클래스와 객체의 관계를 위주로 설명할때 사용된다.\n'Unit 클래스의 객체' 라는 표현보다는 'Unit 클래스의 인스턴스' 라는 표현을 쓴다.\n\n\n<br>\n\n### **__init__**\n---\n\n__init__란 자바에서 생성자 역할을 하는 메서드이다. \n- 객체가 만들어질때 자동으로 호출되어진다. <br>\n(생성자란 객체가 생성될때 자동으로 호출되는 메서드를 의미한다)\n- 인스턴스를 초기화 해준다고 생각\n\nself\n- self는 자기 자신을 의미하고, 즉 인스턴스를 가리킨다\n- self는 자바에서 this와 같다.\n\n<br>\n\n### **메소드**\n---\n아래는 attak, damaged 라는 메소드를 만들었고\n객체에서 메소드를 불러와 사용해보았다\n\n```python\nclass AttackUnit:\n    def __init__(self, name, hp, damage):\n        self.name = name\n        self.hp = hp\n        self.damage = damage\n\n    def attack(self, location):\n        print(\"{0} : {1} 방향으로 적군을 공겨갑니다. [공격력 {2}]\"\\\n              .format(self.name, location, self.damage))\n\n    def damaged(self, damage):\n        print(\"{0} : {1} 데미지를 입었습니다.\".format(self.name, damage))\n        self.hp -= damage\n        print(\"{0} : 현재 체력은 {1} 입니다. \".format(self.name, self.hp))\n        if self.hp <= 0:\n            print(\"{0} : 파괴되었습니다. \".format(self.name))\n\nfirebat1 = AttackUnit(\"파이어뱃\", 50, 16)\nfirebat1.attack(\"5시\")\n\nfirebat1.damaged(25)\nfirebat1.damaged(25)\n```\n    파이어뱃 : 5시 방향으로 적군을 공겨갑니다. [공격력 16]\n    파이어뱃 : 25 데미지를 입었습니다.\n    파이어뱃 : 현재 체력은 25 입니다. \n    파이어뱃 : 25 데미지를 입었습니다.\n    파이어뱃 : 현재 체력은 0 입니다. \n    파이어뱃 : 파괴되었습니다. \n\n<br>\n\n\n### **상속**\n---\n클래스 AttackUnit은 Unit을 상속 받았다.\n\n```python\nclass Unit:\n    def __init__(self, name, hp):\n        self.name = name\n        self.hp = hp\n        \nclass AttackUnit(Unit):   #상속 \n    def __init__(self, name, hp, damage):\n        #self.name = name\n        #self.hp = hp\n        Unit.__init__(self, name, hp)\n        self.damage = damage\n\n```\n\n<br>\n\n\n### **다중상속**\n---\n\n부모가 둘이여서 자식이 여러곳에서 상속을 받는다고 생각하면 된다.\n아래 예시에서 FlyableAttackUnit은 AttackUnit과 Flyable을 상속받는다.\n```python\nclass Unit:\n    def __init__(self, name, hp):\n        self.name = name\n        self.hp = hp\n        \nclass AttackUnit(Unit):   #상속 \n    def __init__(self, name, hp, damage):\n        #self.name = name\n        #self.hp = hp\n        Unit.__init__(self, name, hp)\n        self.damage = damage\n        \n    def attack(self, location):\n        print(\"{0} : {1} 방향으로 적군을 공격합니다. [공격력 {2}]\"\\\n              .format(self.name, location, self.damage))\n\n    def damaged(self, damage):\n        print(\"{0} : {1} 데미지를 입었습니다.\".format(self.name, damage))\n        self.hp -= damage\n        print(\"{0} : 현재 체력은 {1} 입니다. \".format(self.name, self.hp))\n        if self.hp <= 0:\n            print(\"{0} : 파괴되었습니다. \".format(self.name))\n\nclass Flyable:\n    def __init__(self, flying_speed):\n        self.flying_speed = flying_speed\n        \n    def fly(self, name, location):\n        print(\"{0} : {1} 방향으로 날아갑니다. [속도 {2}]\" \\\n              .format(name, location, self.flying_speed))\n\nclass FlyableAttackUnit(AttackUnit, Flyable):\n    def __init__(self, name, hp, damage, flying_speed):\n        AttackUnit.__init__(self, name, hp, damage)\n        Flyable.__init__(self, flying_speed)\n        \n            \nvalkyrie = FlyableAttackUnit(\"발키리\",200, 6, 5)\nvalkyrie.fly(valkyrie.name, \"3시\")\n```\n<br>\n\n### **Super**\n---\n원래는 상속 받을때 아래와 같이 적었지만,\n    \n    Unit.__init__(self, name, hp)\n\nsuper를 이용해서 더 간단하게 사용할 수 있다\n이때 self를 제거하고 사용할 수 있다\n    \n    super().__init__(name, hp, 0)\n\n```python\nclass Unit:\n    def __init__(self, name, hp):\n        self.name = name\n        self.hp = hp\n        \nclass AttackUnit(Unit):   #상속 \n    def __init__(self, name, hp, damage):\n        #Unit.__init__(self, name, hp)\n        super().__init__(name, hp, 0)\n        self.damage = damage\n```\n<br>\n\n하지만 다중 상속에서는 문제가 발생한다.\n                          \n아래 예제에서는 FlyableUnit이 Unit과 Flyable을 다중 상속받는다\n이때 아래와 같이 super()를 통해 상속을 해주게 되면\n\"class FlyableUnit(**Flyable**, Unit):\"   Flyable을 먼저 선언해줬기 때문에   \nFlyable 생성자라고 실행 결과가 나오게 된다 (Unit 생성자가 호출이 안됨)\n\n따라서   Unit.__init__(self), Flyable.__init__(self) 로 상속을 해줄 수 있다.\n\n\n```python\nclass Unit:\n    def __init__(self):\n        print(\"Unit 생성자\")\n    \nclass Flyable:\n    def __init__(self):\n        print(\"Flyable 생성자\")\n        \nclass FlyableUnit(Flyable, Unit):\n    def __init__(self):\n        #super().__init__()\n        Unit.__init__(self)\n        Flyable.__init__(self)\n        \ndropship = FlyableUnit()\n```\n\n\n### **Ref**  \n[나도코딩](https://www.youtube.com/watch?v=kWiCuklohdY)\n[점프투파이썬](https://wikidocs.net/1015)\n(https://engineer-mole.tistory.com/190)\n<br>\n<br>\n<br>\n","slug":"python08-class","published":1,"updated":"2022-01-03T15:07:40.495Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cky2hohf500545nrj2kuf32ct","content":"<h3 id=\"클래스와-객체\"><a href=\"#클래스와-객체\" class=\"headerlink\" title=\"클래스와 객체\"></a><strong>클래스와 객체</strong></h3><hr>\n<p>클래스는 붕어빵 틀에 비유를 할 수 있다.<br>붕어빵 틀로 수백개의 붕어빵을 만들어 낼 수 있듯이 클래스로 많은 객체를 만들 수 있다.<br>스타크래프트 게임의 예로 들면 클래스를 이용해서 수백개의 유닛을 만들 수 있는것이다.</p>\n<p>또 한가지 예를 들면 클래스는 설계 도면이고, 객체는 클래스(설계 도면)을 이용해 만든 어떠한 피조물이다. 따라서 클래스를 실체화 한것이다</p>\n<p>클래스를 사용하는 이유</p>\n<ul>\n<li>글로벌 변수를 없애고, 모든 변수를 어떠한 스코프에 소속시킨다</li>\n<li>몇번이고 재사용 가능하다</li>\n<li>코드의 수정을 최소화한다</li>\n<li>함수 실행중에, 함수 자신을 다시 호출하는 처리 등이 가능하게 한다<br></li>\n</ul>\n<h3 id=\"스타크래프트-예시\"><a href=\"#스타크래프트-예시\" class=\"headerlink\" title=\"스타크래프트 예시\"></a><strong>스타크래프트 예시</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Unit</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, name, hp, damage</span>):</span></span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\">        self.hp = hp</span><br><span class=\"line\">        self.damage = damage</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;0&#125;유닛이 생성 되었습니다.&quot;</span>.<span class=\"built_in\">format</span>(self.name))</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;체력 &#123;0&#125;, 공격력 &#123;1&#125;&quot;</span>.<span class=\"built_in\">format</span>(self.hp, self.damage))</span><br><span class=\"line\"></span><br><span class=\"line\">marine1 = Unit(<span class=\"string\">&quot;마린&quot;</span>, <span class=\"number\">40</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">marine2 = Unit(<span class=\"string\">&quot;마린&quot;</span>, <span class=\"number\">40</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">tank = Unit(<span class=\"string\">&quot;탱크&quot;</span>, <span class=\"number\">150</span>, <span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure>\n<p>위의 예시에서는 marine1, marine2, tank라는 객체를 생성한 것이다.<br>각각의 객체는 각자의 특징을 가졌다.<br>-&gt; 매개 변수 값이 다름<br>marine1, marine2, tank 는 Unit 클래스의 인스턴스이다.<br>인스턴스와 객체의 차이는 인스턴스는 클래스와 객체의 관계를 위주로 설명할때 사용된다.<br>‘Unit 클래스의 객체’ 라는 표현보다는 ‘Unit 클래스의 인스턴스’ 라는 표현을 쓴다.</p>\n<br>\n\n<h3 id=\"init\"><a href=\"#init\" class=\"headerlink\" title=\"init\"></a><strong><strong>init</strong></strong></h3><hr>\n<p>__init__란 자바에서 생성자 역할을 하는 메서드이다. </p>\n<ul>\n<li>객체가 만들어질때 자동으로 호출되어진다. <br><br>(생성자란 객체가 생성될때 자동으로 호출되는 메서드를 의미한다)</li>\n<li>인스턴스를 초기화 해준다고 생각</li>\n</ul>\n<p>self</p>\n<ul>\n<li>self는 자기 자신을 의미하고, 즉 인스턴스를 가리킨다</li>\n<li>self는 자바에서 this와 같다.</li>\n</ul>\n<br>\n\n<h3 id=\"메소드\"><a href=\"#메소드\" class=\"headerlink\" title=\"메소드\"></a><strong>메소드</strong></h3><hr>\n<p>아래는 attak, damaged 라는 메소드를 만들었고<br>객체에서 메소드를 불러와 사용해보았다</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AttackUnit</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, name, hp, damage</span>):</span></span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\">        self.hp = hp</span><br><span class=\"line\">        self.damage = damage</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">attack</span>(<span class=\"params\">self, location</span>):</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;0&#125; : &#123;1&#125; 방향으로 적군을 공겨갑니다. [공격력 &#123;2&#125;]&quot;</span>\\</span><br><span class=\"line\">              .<span class=\"built_in\">format</span>(self.name, location, self.damage))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">damaged</span>(<span class=\"params\">self, damage</span>):</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;0&#125; : &#123;1&#125; 데미지를 입었습니다.&quot;</span>.<span class=\"built_in\">format</span>(self.name, damage))</span><br><span class=\"line\">        self.hp -= damage</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;0&#125; : 현재 체력은 &#123;1&#125; 입니다. &quot;</span>.<span class=\"built_in\">format</span>(self.name, self.hp))</span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.hp &lt;= <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;0&#125; : 파괴되었습니다. &quot;</span>.<span class=\"built_in\">format</span>(self.name))</span><br><span class=\"line\"></span><br><span class=\"line\">firebat1 = AttackUnit(<span class=\"string\">&quot;파이어뱃&quot;</span>, <span class=\"number\">50</span>, <span class=\"number\">16</span>)</span><br><span class=\"line\">firebat1.attack(<span class=\"string\">&quot;5시&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">firebat1.damaged(<span class=\"number\">25</span>)</span><br><span class=\"line\">firebat1.damaged(<span class=\"number\">25</span>)</span><br></pre></td></tr></table></figure>\n<pre><code>파이어뱃 : 5시 방향으로 적군을 공겨갑니다. [공격력 16]\n파이어뱃 : 25 데미지를 입었습니다.\n파이어뱃 : 현재 체력은 25 입니다. \n파이어뱃 : 25 데미지를 입었습니다.\n파이어뱃 : 현재 체력은 0 입니다. \n파이어뱃 : 파괴되었습니다. \n</code></pre>\n<br>\n\n\n<h3 id=\"상속\"><a href=\"#상속\" class=\"headerlink\" title=\"상속\"></a><strong>상속</strong></h3><hr>\n<p>클래스 AttackUnit은 Unit을 상속 받았다.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Unit</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, name, hp</span>):</span></span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\">        self.hp = hp</span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AttackUnit</span>(<span class=\"params\">Unit</span>):</span>   <span class=\"comment\">#상속 </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, name, hp, damage</span>):</span></span><br><span class=\"line\">        <span class=\"comment\">#self.name = name</span></span><br><span class=\"line\">        <span class=\"comment\">#self.hp = hp</span></span><br><span class=\"line\">        Unit.__init__(self, name, hp)</span><br><span class=\"line\">        self.damage = damage</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n<h3 id=\"다중상속\"><a href=\"#다중상속\" class=\"headerlink\" title=\"다중상속\"></a><strong>다중상속</strong></h3><hr>\n<p>부모가 둘이여서 자식이 여러곳에서 상속을 받는다고 생각하면 된다.<br>아래 예시에서 FlyableAttackUnit은 AttackUnit과 Flyable을 상속받는다.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Unit</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, name, hp</span>):</span></span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\">        self.hp = hp</span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AttackUnit</span>(<span class=\"params\">Unit</span>):</span>   <span class=\"comment\">#상속 </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, name, hp, damage</span>):</span></span><br><span class=\"line\">        <span class=\"comment\">#self.name = name</span></span><br><span class=\"line\">        <span class=\"comment\">#self.hp = hp</span></span><br><span class=\"line\">        Unit.__init__(self, name, hp)</span><br><span class=\"line\">        self.damage = damage</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">attack</span>(<span class=\"params\">self, location</span>):</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;0&#125; : &#123;1&#125; 방향으로 적군을 공격합니다. [공격력 &#123;2&#125;]&quot;</span>\\</span><br><span class=\"line\">              .<span class=\"built_in\">format</span>(self.name, location, self.damage))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">damaged</span>(<span class=\"params\">self, damage</span>):</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;0&#125; : &#123;1&#125; 데미지를 입었습니다.&quot;</span>.<span class=\"built_in\">format</span>(self.name, damage))</span><br><span class=\"line\">        self.hp -= damage</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;0&#125; : 현재 체력은 &#123;1&#125; 입니다. &quot;</span>.<span class=\"built_in\">format</span>(self.name, self.hp))</span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.hp &lt;= <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;0&#125; : 파괴되었습니다. &quot;</span>.<span class=\"built_in\">format</span>(self.name))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Flyable</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, flying_speed</span>):</span></span><br><span class=\"line\">        self.flying_speed = flying_speed</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fly</span>(<span class=\"params\">self, name, location</span>):</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;0&#125; : &#123;1&#125; 방향으로 날아갑니다. [속도 &#123;2&#125;]&quot;</span> \\</span><br><span class=\"line\">              .<span class=\"built_in\">format</span>(name, location, self.flying_speed))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FlyableAttackUnit</span>(<span class=\"params\">AttackUnit, Flyable</span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, name, hp, damage, flying_speed</span>):</span></span><br><span class=\"line\">        AttackUnit.__init__(self, name, hp, damage)</span><br><span class=\"line\">        Flyable.__init__(self, flying_speed)</span><br><span class=\"line\">        </span><br><span class=\"line\">            </span><br><span class=\"line\">valkyrie = FlyableAttackUnit(<span class=\"string\">&quot;발키리&quot;</span>,<span class=\"number\">200</span>, <span class=\"number\">6</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">valkyrie.fly(valkyrie.name, <span class=\"string\">&quot;3시&quot;</span>)</span><br></pre></td></tr></table></figure>\n<br>\n\n<h3 id=\"Super\"><a href=\"#Super\" class=\"headerlink\" title=\"Super\"></a><strong>Super</strong></h3><hr>\n<p>원래는 상속 받을때 아래와 같이 적었지만,</p>\n<pre><code>Unit.__init__(self, name, hp)\n</code></pre>\n<p>super를 이용해서 더 간단하게 사용할 수 있다<br>이때 self를 제거하고 사용할 수 있다</p>\n<pre><code>super().__init__(name, hp, 0)\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Unit</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, name, hp</span>):</span></span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\">        self.hp = hp</span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AttackUnit</span>(<span class=\"params\">Unit</span>):</span>   <span class=\"comment\">#상속 </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, name, hp, damage</span>):</span></span><br><span class=\"line\">        <span class=\"comment\">#Unit.__init__(self, name, hp)</span></span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__(name, hp, <span class=\"number\">0</span>)</span><br><span class=\"line\">        self.damage = damage</span><br></pre></td></tr></table></figure>\n<br>\n\n<p>하지만 다중 상속에서는 문제가 발생한다.</p>\n<p>아래 예제에서는 FlyableUnit이 Unit과 Flyable을 다중 상속받는다<br>이때 아래와 같이 super()를 통해 상속을 해주게 되면<br>“class FlyableUnit(<strong>Flyable</strong>, Unit):”   Flyable을 먼저 선언해줬기 때문에<br>Flyable 생성자라고 실행 결과가 나오게 된다 (Unit 생성자가 호출이 안됨)</p>\n<p>따라서   Unit.<strong>init</strong>(self), Flyable.<strong>init</strong>(self) 로 상속을 해줄 수 있다.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Unit</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Unit 생성자&quot;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Flyable</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Flyable 생성자&quot;</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FlyableUnit</span>(<span class=\"params\">Flyable, Unit</span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"comment\">#super().__init__()</span></span><br><span class=\"line\">        Unit.__init__(self)</span><br><span class=\"line\">        Flyable.__init__(self)</span><br><span class=\"line\">        </span><br><span class=\"line\">dropship = FlyableUnit()</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"Ref\"><a href=\"#Ref\" class=\"headerlink\" title=\"Ref\"></a><strong>Ref</strong></h3><p><a href=\"https://www.youtube.com/watch?v=kWiCuklohdY\">나도코딩</a><br><a href=\"https://wikidocs.net/1015\">점프투파이썬</a><br>(<a href=\"https://engineer-mole.tistory.com/190\">https://engineer-mole.tistory.com/190</a>)<br><br><br><br><br><br></p>\n","site":{"data":{}},"excerpt":"클래스와 객체\n\n\n\n클래스는 붕어빵 틀에 비유를 할 수 있다.\n붕어빵 틀로 수백개의 붕어빵을 만들어 낼 수 있듯이 클래스로 많은 객체를 만들 수 있다.\n스타크래프트 게임의 예로 들면 클래스를 이용해서 수백개의 유닛을 만들 수 있는것이다.\n\n또 한가지 예를 들면 클래스는 설계 도면이고, 객체는 클래스(설계 도면)을 이용해 만든 어떠한 피조물이다. 따라서 클래스를 실체화 한것이다\n\n클래스를 사용하는 이유\n\n * 글로벌 변수를 없애고, 모든 변수를 어떠한 스코프에 소속시킨다\n * 몇번이고 재사용 가능하다\n * 코드의 수정을 최소화한다\n ","more":"<h3 id=\"클래스와-객체\"><a href=\"#클래스와-객체\" class=\"headerlink\" title=\"클래스와 객체\"></a><strong>클래스와 객체</strong></h3><hr>\n<p>클래스는 붕어빵 틀에 비유를 할 수 있다.<br>붕어빵 틀로 수백개의 붕어빵을 만들어 낼 수 있듯이 클래스로 많은 객체를 만들 수 있다.<br>스타크래프트 게임의 예로 들면 클래스를 이용해서 수백개의 유닛을 만들 수 있는것이다.</p>\n<p>또 한가지 예를 들면 클래스는 설계 도면이고, 객체는 클래스(설계 도면)을 이용해 만든 어떠한 피조물이다. 따라서 클래스를 실체화 한것이다</p>\n<p>클래스를 사용하는 이유</p>\n<ul>\n<li>글로벌 변수를 없애고, 모든 변수를 어떠한 스코프에 소속시킨다</li>\n<li>몇번이고 재사용 가능하다</li>\n<li>코드의 수정을 최소화한다</li>\n<li>함수 실행중에, 함수 자신을 다시 호출하는 처리 등이 가능하게 한다<br></li>\n</ul>\n<h3 id=\"스타크래프트-예시\"><a href=\"#스타크래프트-예시\" class=\"headerlink\" title=\"스타크래프트 예시\"></a><strong>스타크래프트 예시</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Unit</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, name, hp, damage</span>):</span></span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\">        self.hp = hp</span><br><span class=\"line\">        self.damage = damage</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;0&#125;유닛이 생성 되었습니다.&quot;</span>.<span class=\"built_in\">format</span>(self.name))</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;체력 &#123;0&#125;, 공격력 &#123;1&#125;&quot;</span>.<span class=\"built_in\">format</span>(self.hp, self.damage))</span><br><span class=\"line\"></span><br><span class=\"line\">marine1 = Unit(<span class=\"string\">&quot;마린&quot;</span>, <span class=\"number\">40</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">marine2 = Unit(<span class=\"string\">&quot;마린&quot;</span>, <span class=\"number\">40</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">tank = Unit(<span class=\"string\">&quot;탱크&quot;</span>, <span class=\"number\">150</span>, <span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure>\n<p>위의 예시에서는 marine1, marine2, tank라는 객체를 생성한 것이다.<br>각각의 객체는 각자의 특징을 가졌다.<br>-&gt; 매개 변수 값이 다름<br>marine1, marine2, tank 는 Unit 클래스의 인스턴스이다.<br>인스턴스와 객체의 차이는 인스턴스는 클래스와 객체의 관계를 위주로 설명할때 사용된다.<br>‘Unit 클래스의 객체’ 라는 표현보다는 ‘Unit 클래스의 인스턴스’ 라는 표현을 쓴다.</p>\n<br>\n\n<h3 id=\"init\"><a href=\"#init\" class=\"headerlink\" title=\"init\"></a><strong><strong>init</strong></strong></h3><hr>\n<p>__init__란 자바에서 생성자 역할을 하는 메서드이다. </p>\n<ul>\n<li>객체가 만들어질때 자동으로 호출되어진다. <br><br>(생성자란 객체가 생성될때 자동으로 호출되는 메서드를 의미한다)</li>\n<li>인스턴스를 초기화 해준다고 생각</li>\n</ul>\n<p>self</p>\n<ul>\n<li>self는 자기 자신을 의미하고, 즉 인스턴스를 가리킨다</li>\n<li>self는 자바에서 this와 같다.</li>\n</ul>\n<br>\n\n<h3 id=\"메소드\"><a href=\"#메소드\" class=\"headerlink\" title=\"메소드\"></a><strong>메소드</strong></h3><hr>\n<p>아래는 attak, damaged 라는 메소드를 만들었고<br>객체에서 메소드를 불러와 사용해보았다</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AttackUnit</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, name, hp, damage</span>):</span></span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\">        self.hp = hp</span><br><span class=\"line\">        self.damage = damage</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">attack</span>(<span class=\"params\">self, location</span>):</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;0&#125; : &#123;1&#125; 방향으로 적군을 공겨갑니다. [공격력 &#123;2&#125;]&quot;</span>\\</span><br><span class=\"line\">              .<span class=\"built_in\">format</span>(self.name, location, self.damage))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">damaged</span>(<span class=\"params\">self, damage</span>):</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;0&#125; : &#123;1&#125; 데미지를 입었습니다.&quot;</span>.<span class=\"built_in\">format</span>(self.name, damage))</span><br><span class=\"line\">        self.hp -= damage</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;0&#125; : 현재 체력은 &#123;1&#125; 입니다. &quot;</span>.<span class=\"built_in\">format</span>(self.name, self.hp))</span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.hp &lt;= <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;0&#125; : 파괴되었습니다. &quot;</span>.<span class=\"built_in\">format</span>(self.name))</span><br><span class=\"line\"></span><br><span class=\"line\">firebat1 = AttackUnit(<span class=\"string\">&quot;파이어뱃&quot;</span>, <span class=\"number\">50</span>, <span class=\"number\">16</span>)</span><br><span class=\"line\">firebat1.attack(<span class=\"string\">&quot;5시&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">firebat1.damaged(<span class=\"number\">25</span>)</span><br><span class=\"line\">firebat1.damaged(<span class=\"number\">25</span>)</span><br></pre></td></tr></table></figure>\n<pre><code>파이어뱃 : 5시 방향으로 적군을 공겨갑니다. [공격력 16]\n파이어뱃 : 25 데미지를 입었습니다.\n파이어뱃 : 현재 체력은 25 입니다. \n파이어뱃 : 25 데미지를 입었습니다.\n파이어뱃 : 현재 체력은 0 입니다. \n파이어뱃 : 파괴되었습니다. \n</code></pre>\n<br>\n\n\n<h3 id=\"상속\"><a href=\"#상속\" class=\"headerlink\" title=\"상속\"></a><strong>상속</strong></h3><hr>\n<p>클래스 AttackUnit은 Unit을 상속 받았다.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Unit</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, name, hp</span>):</span></span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\">        self.hp = hp</span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AttackUnit</span>(<span class=\"params\">Unit</span>):</span>   <span class=\"comment\">#상속 </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, name, hp, damage</span>):</span></span><br><span class=\"line\">        <span class=\"comment\">#self.name = name</span></span><br><span class=\"line\">        <span class=\"comment\">#self.hp = hp</span></span><br><span class=\"line\">        Unit.__init__(self, name, hp)</span><br><span class=\"line\">        self.damage = damage</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n<h3 id=\"다중상속\"><a href=\"#다중상속\" class=\"headerlink\" title=\"다중상속\"></a><strong>다중상속</strong></h3><hr>\n<p>부모가 둘이여서 자식이 여러곳에서 상속을 받는다고 생각하면 된다.<br>아래 예시에서 FlyableAttackUnit은 AttackUnit과 Flyable을 상속받는다.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Unit</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, name, hp</span>):</span></span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\">        self.hp = hp</span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AttackUnit</span>(<span class=\"params\">Unit</span>):</span>   <span class=\"comment\">#상속 </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, name, hp, damage</span>):</span></span><br><span class=\"line\">        <span class=\"comment\">#self.name = name</span></span><br><span class=\"line\">        <span class=\"comment\">#self.hp = hp</span></span><br><span class=\"line\">        Unit.__init__(self, name, hp)</span><br><span class=\"line\">        self.damage = damage</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">attack</span>(<span class=\"params\">self, location</span>):</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;0&#125; : &#123;1&#125; 방향으로 적군을 공격합니다. [공격력 &#123;2&#125;]&quot;</span>\\</span><br><span class=\"line\">              .<span class=\"built_in\">format</span>(self.name, location, self.damage))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">damaged</span>(<span class=\"params\">self, damage</span>):</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;0&#125; : &#123;1&#125; 데미지를 입었습니다.&quot;</span>.<span class=\"built_in\">format</span>(self.name, damage))</span><br><span class=\"line\">        self.hp -= damage</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;0&#125; : 현재 체력은 &#123;1&#125; 입니다. &quot;</span>.<span class=\"built_in\">format</span>(self.name, self.hp))</span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.hp &lt;= <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;0&#125; : 파괴되었습니다. &quot;</span>.<span class=\"built_in\">format</span>(self.name))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Flyable</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, flying_speed</span>):</span></span><br><span class=\"line\">        self.flying_speed = flying_speed</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fly</span>(<span class=\"params\">self, name, location</span>):</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;0&#125; : &#123;1&#125; 방향으로 날아갑니다. [속도 &#123;2&#125;]&quot;</span> \\</span><br><span class=\"line\">              .<span class=\"built_in\">format</span>(name, location, self.flying_speed))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FlyableAttackUnit</span>(<span class=\"params\">AttackUnit, Flyable</span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, name, hp, damage, flying_speed</span>):</span></span><br><span class=\"line\">        AttackUnit.__init__(self, name, hp, damage)</span><br><span class=\"line\">        Flyable.__init__(self, flying_speed)</span><br><span class=\"line\">        </span><br><span class=\"line\">            </span><br><span class=\"line\">valkyrie = FlyableAttackUnit(<span class=\"string\">&quot;발키리&quot;</span>,<span class=\"number\">200</span>, <span class=\"number\">6</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">valkyrie.fly(valkyrie.name, <span class=\"string\">&quot;3시&quot;</span>)</span><br></pre></td></tr></table></figure>\n<br>\n\n<h3 id=\"Super\"><a href=\"#Super\" class=\"headerlink\" title=\"Super\"></a><strong>Super</strong></h3><hr>\n<p>원래는 상속 받을때 아래와 같이 적었지만,</p>\n<pre><code>Unit.__init__(self, name, hp)\n</code></pre>\n<p>super를 이용해서 더 간단하게 사용할 수 있다<br>이때 self를 제거하고 사용할 수 있다</p>\n<pre><code>super().__init__(name, hp, 0)\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Unit</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, name, hp</span>):</span></span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\">        self.hp = hp</span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AttackUnit</span>(<span class=\"params\">Unit</span>):</span>   <span class=\"comment\">#상속 </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, name, hp, damage</span>):</span></span><br><span class=\"line\">        <span class=\"comment\">#Unit.__init__(self, name, hp)</span></span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__(name, hp, <span class=\"number\">0</span>)</span><br><span class=\"line\">        self.damage = damage</span><br></pre></td></tr></table></figure>\n<br>\n\n<p>하지만 다중 상속에서는 문제가 발생한다.</p>\n<p>아래 예제에서는 FlyableUnit이 Unit과 Flyable을 다중 상속받는다<br>이때 아래와 같이 super()를 통해 상속을 해주게 되면<br>“class FlyableUnit(<strong>Flyable</strong>, Unit):”   Flyable을 먼저 선언해줬기 때문에<br>Flyable 생성자라고 실행 결과가 나오게 된다 (Unit 생성자가 호출이 안됨)</p>\n<p>따라서   Unit.<strong>init</strong>(self), Flyable.<strong>init</strong>(self) 로 상속을 해줄 수 있다.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Unit</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Unit 생성자&quot;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Flyable</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Flyable 생성자&quot;</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FlyableUnit</span>(<span class=\"params\">Flyable, Unit</span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"comment\">#super().__init__()</span></span><br><span class=\"line\">        Unit.__init__(self)</span><br><span class=\"line\">        Flyable.__init__(self)</span><br><span class=\"line\">        </span><br><span class=\"line\">dropship = FlyableUnit()</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"Ref\"><a href=\"#Ref\" class=\"headerlink\" title=\"Ref\"></a><strong>Ref</strong></h3><p><a href=\"https://www.youtube.com/watch?v=kWiCuklohdY\">나도코딩</a><br><a href=\"https://wikidocs.net/1015\">점프투파이썬</a><br>(<a href=\"https://engineer-mole.tistory.com/190\">https://engineer-mole.tistory.com/190</a>)<br><br><br><br><br><br></p>\n"},{"date":"2021-12-05T15:00:00.000Z","title":"파이썬 집합","toc":true,"_content":"\n### **집합(Set)이란**\n---\n집합은 파이썬 2.3부터 지원하기 시작한 자료형으로, 집합에 관련된 것을 쉽게 처리하기 위해 만든 자료형이다.\n- 특징\n    - 집합은 중복을 허용하지 않는다\n    - 순서가 없다 (인덱싱을 지원하지 않는다)\n  \n<br>\n\n### **집합 형태**\n- set이라는 키워드를 사용해 만들 수 있다\n\n```python\nmy_set1 = set{[1,2,3]}\nmy_set1\n>> {1,2,3}\nmy_set2 = {1,2,3,4,5}\nmy_set2\n>> {1,2,3,4,5}\nmy_set3 = {1,2,3,4,4,4}  \nmy_set3\n>> {1,2,3,4}    #중복을 허용하지 않아서 짤림\n```\n\n- 문자열을 입력하여 집합을 만들 수도 있다\n\n```python\ns1 = set(\"jeewon\")\ns1\n>> {'e', 'j', 'n', 'o', 'w'}    #순서가 없다\n``` \n\n<br>\n\n### **집합을 인덱싱 하려면?**\n집합은 순서가 없기 때문에 인덱싱으로 값을 얻는게 불가능하다\n하지만 이때 튜플이나 리스트로 값을 변환하면 인덱싱이 가능하다\n아래는 집합을 리스트와 튜플로 변환한것이다\n```python\ns_li = list(my_set)\ns_li\n>> [1, 2, 3]\ns_tu = tuple(my_set)\ns_tu\n>> (1, 2, 3)\n```\n<br>\n\n### **교집합, 합집합, 차집합**\n아래는 자바와 파이썬을 사용할줄 아는 개발자를 집합으로 정의한것이다\n```python\njava = {\"김땡땡\", \"박땡땡\", \"이땡떙\"}\npython = {\"김땡땡\", \"강땡땡\"}\n```\n\n<br>\n\n- 교집합\njava와 python을 모두 할 줄 아는 개발자\n```python\nprint(java & python)\nprint(java.intersection(python))\n>> {'김땡땡'}\n>> {'김땡땡'}\n```\n\n\n<br>\n\n- 합집합\njava를 할수있거나 python을 할 수 있는 개발자\n```python\nprint(java | python)\n>> {'박땡땡', '김땡땡', '강땡땡', '이땡떙'}\nprint(java.union(python))\n>> {'박땡땡', '김땡땡', '강땡땡', '이땡떙'}\n```\n\n<br>\n\n- 차집합\njava는 할 줄 알지만 python은 할 줄 모르는 개발자\n```python\nprint(java - python)\n>> {'이땡떙', '박땡땡'}\nprint(java.difference(python))\n>> {'이땡떙', '박땡땡'}\n```\n\n<br>\n\n### **집합 추가와 삭제**\nadd를 이용해서 추가할 수 있다\npython을 할 줄 아는 사람이 늘어남\n\n```python\npython.add(\"윤땡땡\")\nprint(python)\n>> {'윤땡땡', '김땡땡', '강땡땡'}\n```\n<br>\n\nupdate를 이용해서 여러개를 한번에 추가할 수도 있다\n이때 대괄호[]로 묶어주지 않으면 {'박', '땡'}이 추가된다\n```python\nc = {\"김땡땡\"}\nc.update([\"박땡땡\"])\nc\n>> {'김땡땡', '박땡땡'}\n```\n\n<br>\n\nremove를 이용해서 삭제할 수 있다\n자바를 까먹은 김땡땡.... 은 바로 나\n```python\njava.remove(\"김땡땡\")\njava\n>> {'박땡땡', '이땡떙'}\n```\n\n<br>\n\n\n\n### **Ref**\n[나도코딩](https://www.youtube.com/watch?v=kWiCuklohdY)\n[점프투파이썬](https://wikidocs.net/1015)\n\n<br>\n<br>\n<br>\n","source":"_posts/python04_set.md","raw":"---\ndate: 2021-12-06\ntitle: 파이썬 집합\ntags: python, set\ncategories:\n  - 파이썬\n  - Python 기초\ntoc: true\n---\n\n### **집합(Set)이란**\n---\n집합은 파이썬 2.3부터 지원하기 시작한 자료형으로, 집합에 관련된 것을 쉽게 처리하기 위해 만든 자료형이다.\n- 특징\n    - 집합은 중복을 허용하지 않는다\n    - 순서가 없다 (인덱싱을 지원하지 않는다)\n  \n<br>\n\n### **집합 형태**\n- set이라는 키워드를 사용해 만들 수 있다\n\n```python\nmy_set1 = set{[1,2,3]}\nmy_set1\n>> {1,2,3}\nmy_set2 = {1,2,3,4,5}\nmy_set2\n>> {1,2,3,4,5}\nmy_set3 = {1,2,3,4,4,4}  \nmy_set3\n>> {1,2,3,4}    #중복을 허용하지 않아서 짤림\n```\n\n- 문자열을 입력하여 집합을 만들 수도 있다\n\n```python\ns1 = set(\"jeewon\")\ns1\n>> {'e', 'j', 'n', 'o', 'w'}    #순서가 없다\n``` \n\n<br>\n\n### **집합을 인덱싱 하려면?**\n집합은 순서가 없기 때문에 인덱싱으로 값을 얻는게 불가능하다\n하지만 이때 튜플이나 리스트로 값을 변환하면 인덱싱이 가능하다\n아래는 집합을 리스트와 튜플로 변환한것이다\n```python\ns_li = list(my_set)\ns_li\n>> [1, 2, 3]\ns_tu = tuple(my_set)\ns_tu\n>> (1, 2, 3)\n```\n<br>\n\n### **교집합, 합집합, 차집합**\n아래는 자바와 파이썬을 사용할줄 아는 개발자를 집합으로 정의한것이다\n```python\njava = {\"김땡땡\", \"박땡땡\", \"이땡떙\"}\npython = {\"김땡땡\", \"강땡땡\"}\n```\n\n<br>\n\n- 교집합\njava와 python을 모두 할 줄 아는 개발자\n```python\nprint(java & python)\nprint(java.intersection(python))\n>> {'김땡땡'}\n>> {'김땡땡'}\n```\n\n\n<br>\n\n- 합집합\njava를 할수있거나 python을 할 수 있는 개발자\n```python\nprint(java | python)\n>> {'박땡땡', '김땡땡', '강땡땡', '이땡떙'}\nprint(java.union(python))\n>> {'박땡땡', '김땡땡', '강땡땡', '이땡떙'}\n```\n\n<br>\n\n- 차집합\njava는 할 줄 알지만 python은 할 줄 모르는 개발자\n```python\nprint(java - python)\n>> {'이땡떙', '박땡땡'}\nprint(java.difference(python))\n>> {'이땡떙', '박땡땡'}\n```\n\n<br>\n\n### **집합 추가와 삭제**\nadd를 이용해서 추가할 수 있다\npython을 할 줄 아는 사람이 늘어남\n\n```python\npython.add(\"윤땡땡\")\nprint(python)\n>> {'윤땡땡', '김땡땡', '강땡땡'}\n```\n<br>\n\nupdate를 이용해서 여러개를 한번에 추가할 수도 있다\n이때 대괄호[]로 묶어주지 않으면 {'박', '땡'}이 추가된다\n```python\nc = {\"김땡땡\"}\nc.update([\"박땡땡\"])\nc\n>> {'김땡땡', '박땡땡'}\n```\n\n<br>\n\nremove를 이용해서 삭제할 수 있다\n자바를 까먹은 김땡땡.... 은 바로 나\n```python\njava.remove(\"김땡땡\")\njava\n>> {'박땡땡', '이땡떙'}\n```\n\n<br>\n\n\n\n### **Ref**\n[나도코딩](https://www.youtube.com/watch?v=kWiCuklohdY)\n[점프투파이썬](https://wikidocs.net/1015)\n\n<br>\n<br>\n<br>\n","slug":"python04-set","published":1,"updated":"2022-01-03T12:20:08.050Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cky2hohf500565nrjgku6e3tg","content":"<h3 id=\"집합-Set-이란\"><a href=\"#집합-Set-이란\" class=\"headerlink\" title=\"집합(Set)이란\"></a><strong>집합(Set)이란</strong></h3><hr>\n<p>집합은 파이썬 2.3부터 지원하기 시작한 자료형으로, 집합에 관련된 것을 쉽게 처리하기 위해 만든 자료형이다.</p>\n<ul>\n<li>특징<ul>\n<li>집합은 중복을 허용하지 않는다</li>\n<li>순서가 없다 (인덱싱을 지원하지 않는다)</li>\n</ul>\n</li>\n</ul>\n<br>\n\n<h3 id=\"집합-형태\"><a href=\"#집합-형태\" class=\"headerlink\" title=\"집합 형태\"></a><strong>집합 형태</strong></h3><ul>\n<li>set이라는 키워드를 사용해 만들 수 있다</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my_set1 = <span class=\"built_in\">set</span>&#123;[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]&#125;</span><br><span class=\"line\">my_set1</span><br><span class=\"line\">&gt;&gt; &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;</span><br><span class=\"line\">my_set2 = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;</span><br><span class=\"line\">my_set2</span><br><span class=\"line\">&gt;&gt; &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;</span><br><span class=\"line\">my_set3 = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">4</span>,<span class=\"number\">4</span>&#125;  </span><br><span class=\"line\">my_set3</span><br><span class=\"line\">&gt;&gt; &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>&#125;    <span class=\"comment\">#중복을 허용하지 않아서 짤림</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>문자열을 입력하여 집합을 만들 수도 있다</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s1 = <span class=\"built_in\">set</span>(<span class=\"string\">&quot;jeewon&quot;</span>)</span><br><span class=\"line\">s1</span><br><span class=\"line\">&gt;&gt; &#123;<span class=\"string\">&#x27;e&#x27;</span>, <span class=\"string\">&#x27;j&#x27;</span>, <span class=\"string\">&#x27;n&#x27;</span>, <span class=\"string\">&#x27;o&#x27;</span>, <span class=\"string\">&#x27;w&#x27;</span>&#125;    <span class=\"comment\">#순서가 없다</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h3 id=\"집합을-인덱싱-하려면\"><a href=\"#집합을-인덱싱-하려면\" class=\"headerlink\" title=\"집합을 인덱싱 하려면?\"></a><strong>집합을 인덱싱 하려면?</strong></h3><p>집합은 순서가 없기 때문에 인덱싱으로 값을 얻는게 불가능하다<br>하지만 이때 튜플이나 리스트로 값을 변환하면 인덱싱이 가능하다<br>아래는 집합을 리스트와 튜플로 변환한것이다</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s_li = <span class=\"built_in\">list</span>(my_set)</span><br><span class=\"line\">s_li</span><br><span class=\"line\">&gt;&gt; [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">s_tu = <span class=\"built_in\">tuple</span>(my_set)</span><br><span class=\"line\">s_tu</span><br><span class=\"line\">&gt;&gt; (<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure>\n<br>\n\n<h3 id=\"교집합-합집합-차집합\"><a href=\"#교집합-합집합-차집합\" class=\"headerlink\" title=\"교집합, 합집합, 차집합\"></a><strong>교집합, 합집합, 차집합</strong></h3><p>아래는 자바와 파이썬을 사용할줄 아는 개발자를 집합으로 정의한것이다</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java = &#123;<span class=\"string\">&quot;김땡땡&quot;</span>, <span class=\"string\">&quot;박땡땡&quot;</span>, <span class=\"string\">&quot;이땡떙&quot;</span>&#125;</span><br><span class=\"line\">python = &#123;<span class=\"string\">&quot;김땡땡&quot;</span>, <span class=\"string\">&quot;강땡땡&quot;</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<ul>\n<li>교집합<br>java와 python을 모두 할 줄 아는 개발자<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(java &amp; python)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(java.intersection(python))</span><br><span class=\"line\">&gt;&gt; &#123;<span class=\"string\">&#x27;김땡땡&#x27;</span>&#125;</span><br><span class=\"line\">&gt;&gt; &#123;<span class=\"string\">&#x27;김땡땡&#x27;</span>&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<br>\n\n<ul>\n<li>합집합<br>java를 할수있거나 python을 할 수 있는 개발자<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(java | python)</span><br><span class=\"line\">&gt;&gt; &#123;<span class=\"string\">&#x27;박땡땡&#x27;</span>, <span class=\"string\">&#x27;김땡땡&#x27;</span>, <span class=\"string\">&#x27;강땡땡&#x27;</span>, <span class=\"string\">&#x27;이땡떙&#x27;</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(java.union(python))</span><br><span class=\"line\">&gt;&gt; &#123;<span class=\"string\">&#x27;박땡땡&#x27;</span>, <span class=\"string\">&#x27;김땡땡&#x27;</span>, <span class=\"string\">&#x27;강땡땡&#x27;</span>, <span class=\"string\">&#x27;이땡떙&#x27;</span>&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<br>\n\n<ul>\n<li>차집합<br>java는 할 줄 알지만 python은 할 줄 모르는 개발자<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(java - python)</span><br><span class=\"line\">&gt;&gt; &#123;<span class=\"string\">&#x27;이땡떙&#x27;</span>, <span class=\"string\">&#x27;박땡땡&#x27;</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(java.difference(python))</span><br><span class=\"line\">&gt;&gt; &#123;<span class=\"string\">&#x27;이땡떙&#x27;</span>, <span class=\"string\">&#x27;박땡땡&#x27;</span>&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<br>\n\n<h3 id=\"집합-추가와-삭제\"><a href=\"#집합-추가와-삭제\" class=\"headerlink\" title=\"집합 추가와 삭제\"></a><strong>집합 추가와 삭제</strong></h3><p>add를 이용해서 추가할 수 있다<br>python을 할 줄 아는 사람이 늘어남</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python.add(<span class=\"string\">&quot;윤땡땡&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(python)</span><br><span class=\"line\">&gt;&gt; &#123;<span class=\"string\">&#x27;윤땡땡&#x27;</span>, <span class=\"string\">&#x27;김땡땡&#x27;</span>, <span class=\"string\">&#x27;강땡땡&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>\n<br>\n\n<p>update를 이용해서 여러개를 한번에 추가할 수도 있다<br>이때 대괄호[]로 묶어주지 않으면 {‘박’, ‘땡’}이 추가된다</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c = &#123;<span class=\"string\">&quot;김땡땡&quot;</span>&#125;</span><br><span class=\"line\">c.update([<span class=\"string\">&quot;박땡땡&quot;</span>])</span><br><span class=\"line\">c</span><br><span class=\"line\">&gt;&gt; &#123;<span class=\"string\">&#x27;김땡땡&#x27;</span>, <span class=\"string\">&#x27;박땡땡&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<p>remove를 이용해서 삭제할 수 있다<br>자바를 까먹은 김땡땡…. 은 바로 나</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java.remove(<span class=\"string\">&quot;김땡땡&quot;</span>)</span><br><span class=\"line\">java</span><br><span class=\"line\">&gt;&gt; &#123;<span class=\"string\">&#x27;박땡땡&#x27;</span>, <span class=\"string\">&#x27;이땡떙&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h3 id=\"Ref\"><a href=\"#Ref\" class=\"headerlink\" title=\"Ref\"></a><strong>Ref</strong></h3><p><a href=\"https://www.youtube.com/watch?v=kWiCuklohdY\">나도코딩</a><br><a href=\"https://wikidocs.net/1015\">점프투파이썬</a></p>\n<br>\n<br>\n<br>\n","site":{"data":{}},"excerpt":"집합(Set)이란\n\n\n\n집합은 파이썬 2.3부터 지원하기 시작한 자료형으로, 집합에 관련된 것을 쉽게 처리하기 위해 만든 자료형이다.\n\n * 특징 * 집합은 중복을 허용하지 않는다\n    * 순서가 없다 (인덱싱을 지원하지 않는다)\n   \n   \n\n\n집합 형태\n * set이라는 키워드를 사용해 만들 수 있다\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\nmy_set1 = set{[1,2,3]}\nmy_set1\n>> {1,2,3}\nmy_set2 = {1,2,3,4,5}\nmy_set2\n>> {1,2,3,4,5}\nmy_set3 = {1,2,3,4,","more":"<h3 id=\"집합-Set-이란\"><a href=\"#집합-Set-이란\" class=\"headerlink\" title=\"집합(Set)이란\"></a><strong>집합(Set)이란</strong></h3><hr>\n<p>집합은 파이썬 2.3부터 지원하기 시작한 자료형으로, 집합에 관련된 것을 쉽게 처리하기 위해 만든 자료형이다.</p>\n<ul>\n<li>특징<ul>\n<li>집합은 중복을 허용하지 않는다</li>\n<li>순서가 없다 (인덱싱을 지원하지 않는다)</li>\n</ul>\n</li>\n</ul>\n<br>\n\n<h3 id=\"집합-형태\"><a href=\"#집합-형태\" class=\"headerlink\" title=\"집합 형태\"></a><strong>집합 형태</strong></h3><ul>\n<li>set이라는 키워드를 사용해 만들 수 있다</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my_set1 = <span class=\"built_in\">set</span>&#123;[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]&#125;</span><br><span class=\"line\">my_set1</span><br><span class=\"line\">&gt;&gt; &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;</span><br><span class=\"line\">my_set2 = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;</span><br><span class=\"line\">my_set2</span><br><span class=\"line\">&gt;&gt; &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;</span><br><span class=\"line\">my_set3 = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">4</span>,<span class=\"number\">4</span>&#125;  </span><br><span class=\"line\">my_set3</span><br><span class=\"line\">&gt;&gt; &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>&#125;    <span class=\"comment\">#중복을 허용하지 않아서 짤림</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>문자열을 입력하여 집합을 만들 수도 있다</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s1 = <span class=\"built_in\">set</span>(<span class=\"string\">&quot;jeewon&quot;</span>)</span><br><span class=\"line\">s1</span><br><span class=\"line\">&gt;&gt; &#123;<span class=\"string\">&#x27;e&#x27;</span>, <span class=\"string\">&#x27;j&#x27;</span>, <span class=\"string\">&#x27;n&#x27;</span>, <span class=\"string\">&#x27;o&#x27;</span>, <span class=\"string\">&#x27;w&#x27;</span>&#125;    <span class=\"comment\">#순서가 없다</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h3 id=\"집합을-인덱싱-하려면\"><a href=\"#집합을-인덱싱-하려면\" class=\"headerlink\" title=\"집합을 인덱싱 하려면?\"></a><strong>집합을 인덱싱 하려면?</strong></h3><p>집합은 순서가 없기 때문에 인덱싱으로 값을 얻는게 불가능하다<br>하지만 이때 튜플이나 리스트로 값을 변환하면 인덱싱이 가능하다<br>아래는 집합을 리스트와 튜플로 변환한것이다</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s_li = <span class=\"built_in\">list</span>(my_set)</span><br><span class=\"line\">s_li</span><br><span class=\"line\">&gt;&gt; [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">s_tu = <span class=\"built_in\">tuple</span>(my_set)</span><br><span class=\"line\">s_tu</span><br><span class=\"line\">&gt;&gt; (<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure>\n<br>\n\n<h3 id=\"교집합-합집합-차집합\"><a href=\"#교집합-합집합-차집합\" class=\"headerlink\" title=\"교집합, 합집합, 차집합\"></a><strong>교집합, 합집합, 차집합</strong></h3><p>아래는 자바와 파이썬을 사용할줄 아는 개발자를 집합으로 정의한것이다</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java = &#123;<span class=\"string\">&quot;김땡땡&quot;</span>, <span class=\"string\">&quot;박땡땡&quot;</span>, <span class=\"string\">&quot;이땡떙&quot;</span>&#125;</span><br><span class=\"line\">python = &#123;<span class=\"string\">&quot;김땡땡&quot;</span>, <span class=\"string\">&quot;강땡땡&quot;</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<ul>\n<li>교집합<br>java와 python을 모두 할 줄 아는 개발자<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(java &amp; python)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(java.intersection(python))</span><br><span class=\"line\">&gt;&gt; &#123;<span class=\"string\">&#x27;김땡땡&#x27;</span>&#125;</span><br><span class=\"line\">&gt;&gt; &#123;<span class=\"string\">&#x27;김땡땡&#x27;</span>&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<br>\n\n<ul>\n<li>합집합<br>java를 할수있거나 python을 할 수 있는 개발자<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(java | python)</span><br><span class=\"line\">&gt;&gt; &#123;<span class=\"string\">&#x27;박땡땡&#x27;</span>, <span class=\"string\">&#x27;김땡땡&#x27;</span>, <span class=\"string\">&#x27;강땡땡&#x27;</span>, <span class=\"string\">&#x27;이땡떙&#x27;</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(java.union(python))</span><br><span class=\"line\">&gt;&gt; &#123;<span class=\"string\">&#x27;박땡땡&#x27;</span>, <span class=\"string\">&#x27;김땡땡&#x27;</span>, <span class=\"string\">&#x27;강땡땡&#x27;</span>, <span class=\"string\">&#x27;이땡떙&#x27;</span>&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<br>\n\n<ul>\n<li>차집합<br>java는 할 줄 알지만 python은 할 줄 모르는 개발자<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(java - python)</span><br><span class=\"line\">&gt;&gt; &#123;<span class=\"string\">&#x27;이땡떙&#x27;</span>, <span class=\"string\">&#x27;박땡땡&#x27;</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(java.difference(python))</span><br><span class=\"line\">&gt;&gt; &#123;<span class=\"string\">&#x27;이땡떙&#x27;</span>, <span class=\"string\">&#x27;박땡땡&#x27;</span>&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<br>\n\n<h3 id=\"집합-추가와-삭제\"><a href=\"#집합-추가와-삭제\" class=\"headerlink\" title=\"집합 추가와 삭제\"></a><strong>집합 추가와 삭제</strong></h3><p>add를 이용해서 추가할 수 있다<br>python을 할 줄 아는 사람이 늘어남</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python.add(<span class=\"string\">&quot;윤땡땡&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(python)</span><br><span class=\"line\">&gt;&gt; &#123;<span class=\"string\">&#x27;윤땡땡&#x27;</span>, <span class=\"string\">&#x27;김땡땡&#x27;</span>, <span class=\"string\">&#x27;강땡땡&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>\n<br>\n\n<p>update를 이용해서 여러개를 한번에 추가할 수도 있다<br>이때 대괄호[]로 묶어주지 않으면 {‘박’, ‘땡’}이 추가된다</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c = &#123;<span class=\"string\">&quot;김땡땡&quot;</span>&#125;</span><br><span class=\"line\">c.update([<span class=\"string\">&quot;박땡땡&quot;</span>])</span><br><span class=\"line\">c</span><br><span class=\"line\">&gt;&gt; &#123;<span class=\"string\">&#x27;김땡땡&#x27;</span>, <span class=\"string\">&#x27;박땡땡&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<p>remove를 이용해서 삭제할 수 있다<br>자바를 까먹은 김땡땡…. 은 바로 나</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java.remove(<span class=\"string\">&quot;김땡땡&quot;</span>)</span><br><span class=\"line\">java</span><br><span class=\"line\">&gt;&gt; &#123;<span class=\"string\">&#x27;박땡땡&#x27;</span>, <span class=\"string\">&#x27;이땡떙&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h3 id=\"Ref\"><a href=\"#Ref\" class=\"headerlink\" title=\"Ref\"></a><strong>Ref</strong></h3><p><a href=\"https://www.youtube.com/watch?v=kWiCuklohdY\">나도코딩</a><br><a href=\"https://wikidocs.net/1015\">점프투파이썬</a></p>\n<br>\n<br>\n<br>\n"},{"date":"2021-12-07T15:00:00.000Z","title":"파이썬 Method","toc":true,"_content":"### **파이썬 함수**\n---\n파이썬에서는 def로 함수를 만들 수 있다.\n그 다음 함수이름을 적고 콜론(:)으로 마무리 해준다.\n함수를 실행하려면 '함수이름()' 방법으로 실행할 수 있다.\n\n\n    def 함수명(매개변수):\n        <수행할 문장1>\n        <수행할 문장2>\n        ...\n\n<br>\n\n```python\ndef multiply(a, b):\n  return a*b\n\na = 3\nb = 4\nc = multiply(a,b)\nprint(c)\n>> 12\n```\n\n<br>\n\n```python\ndef deposit(balance, money):\n  print(\"입금이 완료되었습니다. 잔액은 {0}원 입니다.\".format(balance + money))\n  return balance + money\n\ndef withdraw(balance, money):\n  if balance >= money:\n    print(\"출금이 완료되었습니다. 잔액은 {0}원 입니다. \".format(balance - money))\n    return balance - money\n  else:\n    print(\"출금이 완료되지 않았습니다. 잔액은 {0}원 입니다.\".format(balance))\n    return balance\n\ndef withdraw_night(balance, money):\n  commission = 100 \n  return commission, balance - money - commission  #여러개의 값도 한번에 반환 가능    \n\nbalance = 0\nbalance = deposit(balance, 1000)\nbalance = withdraw(balance, 2000)\ncommission, balance = withdraw_night(balance, 500)\n\nprint(\"수수료 {0}원이며, 잔액은 {1}원 입니다.\".format(commission, balance))\n```\n    입금이 완료되었습니다. 잔액은 1000원 입니다.\n    출금이 완료되지 않았습니다. 잔액은 1000원 입니다.\n    수수료 100원이며, 잔액은 400원 입니다.\n\n### **가변인자**\n---\n```python\ndef profile(name, age, *language):\n    print(\"이름: {0}\\t나이: {1}\\t\".format(name, age),end=\" \")\n    for lang in language:\n        print(lang, end=\" \")\n    print()\n    \nprofile(\"유재석\", 20, \"Python\", \"Java\", \"C\", \"C++\")\nprofile(\"김태호\", 25, \"Kotlin\", \"Swift\")\n```\n\n    이름: 유재석\t나이: 20\t Python Java C C++ \n    이름: 김태호\t나이: 25\t Kotlin Swift \n\n<br>\n\n\n\n### **Ref**  \n[나도코딩](https://www.youtube.com/watch?v=kWiCuklohdY)\n[점프투파이썬](https://wikidocs.net/1015)\n\n<br>\n<br>\n<br>\n","source":"_posts/python07_method.md","raw":"---\ndate: 2021-12-08\ntitle: 파이썬 Method\ntags: python\ncategories:\n  - 파이썬\n  - Python 기초\ntoc: true\n---\n### **파이썬 함수**\n---\n파이썬에서는 def로 함수를 만들 수 있다.\n그 다음 함수이름을 적고 콜론(:)으로 마무리 해준다.\n함수를 실행하려면 '함수이름()' 방법으로 실행할 수 있다.\n\n\n    def 함수명(매개변수):\n        <수행할 문장1>\n        <수행할 문장2>\n        ...\n\n<br>\n\n```python\ndef multiply(a, b):\n  return a*b\n\na = 3\nb = 4\nc = multiply(a,b)\nprint(c)\n>> 12\n```\n\n<br>\n\n```python\ndef deposit(balance, money):\n  print(\"입금이 완료되었습니다. 잔액은 {0}원 입니다.\".format(balance + money))\n  return balance + money\n\ndef withdraw(balance, money):\n  if balance >= money:\n    print(\"출금이 완료되었습니다. 잔액은 {0}원 입니다. \".format(balance - money))\n    return balance - money\n  else:\n    print(\"출금이 완료되지 않았습니다. 잔액은 {0}원 입니다.\".format(balance))\n    return balance\n\ndef withdraw_night(balance, money):\n  commission = 100 \n  return commission, balance - money - commission  #여러개의 값도 한번에 반환 가능    \n\nbalance = 0\nbalance = deposit(balance, 1000)\nbalance = withdraw(balance, 2000)\ncommission, balance = withdraw_night(balance, 500)\n\nprint(\"수수료 {0}원이며, 잔액은 {1}원 입니다.\".format(commission, balance))\n```\n    입금이 완료되었습니다. 잔액은 1000원 입니다.\n    출금이 완료되지 않았습니다. 잔액은 1000원 입니다.\n    수수료 100원이며, 잔액은 400원 입니다.\n\n### **가변인자**\n---\n```python\ndef profile(name, age, *language):\n    print(\"이름: {0}\\t나이: {1}\\t\".format(name, age),end=\" \")\n    for lang in language:\n        print(lang, end=\" \")\n    print()\n    \nprofile(\"유재석\", 20, \"Python\", \"Java\", \"C\", \"C++\")\nprofile(\"김태호\", 25, \"Kotlin\", \"Swift\")\n```\n\n    이름: 유재석\t나이: 20\t Python Java C C++ \n    이름: 김태호\t나이: 25\t Kotlin Swift \n\n<br>\n\n\n\n### **Ref**  \n[나도코딩](https://www.youtube.com/watch?v=kWiCuklohdY)\n[점프투파이썬](https://wikidocs.net/1015)\n\n<br>\n<br>\n<br>\n","slug":"python07-method","published":1,"updated":"2022-01-03T12:20:08.051Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cky2hohf6005a5nrj8hoc3l7b","content":"<h3 id=\"파이썬-함수\"><a href=\"#파이썬-함수\" class=\"headerlink\" title=\"파이썬 함수\"></a><strong>파이썬 함수</strong></h3><hr>\n<p>파이썬에서는 def로 함수를 만들 수 있다.<br>그 다음 함수이름을 적고 콜론(:)으로 마무리 해준다.<br>함수를 실행하려면 ‘함수이름()’ 방법으로 실행할 수 있다.</p>\n<pre><code>def 함수명(매개변수):\n    &lt;수행할 문장1&gt;\n    &lt;수행할 문장2&gt;\n    ...\n</code></pre>\n<br>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">multiply</span>(<span class=\"params\">a, b</span>):</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> a*b</span><br><span class=\"line\"></span><br><span class=\"line\">a = <span class=\"number\">3</span></span><br><span class=\"line\">b = <span class=\"number\">4</span></span><br><span class=\"line\">c = multiply(a,b)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(c)</span><br><span class=\"line\">&gt;&gt; <span class=\"number\">12</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">deposit</span>(<span class=\"params\">balance, money</span>):</span></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">&quot;입금이 완료되었습니다. 잔액은 &#123;0&#125;원 입니다.&quot;</span>.<span class=\"built_in\">format</span>(balance + money))</span><br><span class=\"line\">  <span class=\"keyword\">return</span> balance + money</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">withdraw</span>(<span class=\"params\">balance, money</span>):</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> balance &gt;= money:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;출금이 완료되었습니다. 잔액은 &#123;0&#125;원 입니다. &quot;</span>.<span class=\"built_in\">format</span>(balance - money))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> balance - money</span><br><span class=\"line\">  <span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;출금이 완료되지 않았습니다. 잔액은 &#123;0&#125;원 입니다.&quot;</span>.<span class=\"built_in\">format</span>(balance))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> balance</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">withdraw_night</span>(<span class=\"params\">balance, money</span>):</span></span><br><span class=\"line\">  commission = <span class=\"number\">100</span> </span><br><span class=\"line\">  <span class=\"keyword\">return</span> commission, balance - money - commission  <span class=\"comment\">#여러개의 값도 한번에 반환 가능    </span></span><br><span class=\"line\"></span><br><span class=\"line\">balance = <span class=\"number\">0</span></span><br><span class=\"line\">balance = deposit(balance, <span class=\"number\">1000</span>)</span><br><span class=\"line\">balance = withdraw(balance, <span class=\"number\">2000</span>)</span><br><span class=\"line\">commission, balance = withdraw_night(balance, <span class=\"number\">500</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;수수료 &#123;0&#125;원이며, 잔액은 &#123;1&#125;원 입니다.&quot;</span>.<span class=\"built_in\">format</span>(commission, balance))</span><br></pre></td></tr></table></figure>\n<pre><code>입금이 완료되었습니다. 잔액은 1000원 입니다.\n출금이 완료되지 않았습니다. 잔액은 1000원 입니다.\n수수료 100원이며, 잔액은 400원 입니다.\n</code></pre>\n<h3 id=\"가변인자\"><a href=\"#가변인자\" class=\"headerlink\" title=\"가변인자\"></a><strong>가변인자</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">profile</span>(<span class=\"params\">name, age, *language</span>):</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;이름: &#123;0&#125;\\t나이: &#123;1&#125;\\t&quot;</span>.<span class=\"built_in\">format</span>(name, age),end=<span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> lang <span class=\"keyword\">in</span> language:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(lang, end=<span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>()</span><br><span class=\"line\">    </span><br><span class=\"line\">profile(<span class=\"string\">&quot;유재석&quot;</span>, <span class=\"number\">20</span>, <span class=\"string\">&quot;Python&quot;</span>, <span class=\"string\">&quot;Java&quot;</span>, <span class=\"string\">&quot;C&quot;</span>, <span class=\"string\">&quot;C++&quot;</span>)</span><br><span class=\"line\">profile(<span class=\"string\">&quot;김태호&quot;</span>, <span class=\"number\">25</span>, <span class=\"string\">&quot;Kotlin&quot;</span>, <span class=\"string\">&quot;Swift&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<pre><code>이름: 유재석    나이: 20     Python Java C C++ \n이름: 김태호    나이: 25     Kotlin Swift \n</code></pre>\n<br>\n\n\n\n<h3 id=\"Ref\"><a href=\"#Ref\" class=\"headerlink\" title=\"Ref\"></a><strong>Ref</strong></h3><p><a href=\"https://www.youtube.com/watch?v=kWiCuklohdY\">나도코딩</a><br><a href=\"https://wikidocs.net/1015\">점프투파이썬</a></p>\n<br>\n<br>\n<br>\n","site":{"data":{}},"excerpt":"파이썬 함수\n\n\n\n파이썬에서는 def로 함수를 만들 수 있다.\n그 다음 함수이름을 적고 콜론(:)으로 마무리 해준다.\n함수를 실행하려면 ‘함수이름()’ 방법으로 실행할 수 있다.\n\ndef 함수명(매개변수):\n    <수행할 문장1>\n    <수행할 문장2>\n    ...\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\ndef multiply(a, b):\n  return a*b\n\na = 3\nb = 4\nc = multiply(a,b)\nprint(c)\n>> 12\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n","more":"<h3 id=\"파이썬-함수\"><a href=\"#파이썬-함수\" class=\"headerlink\" title=\"파이썬 함수\"></a><strong>파이썬 함수</strong></h3><hr>\n<p>파이썬에서는 def로 함수를 만들 수 있다.<br>그 다음 함수이름을 적고 콜론(:)으로 마무리 해준다.<br>함수를 실행하려면 ‘함수이름()’ 방법으로 실행할 수 있다.</p>\n<pre><code>def 함수명(매개변수):\n    &lt;수행할 문장1&gt;\n    &lt;수행할 문장2&gt;\n    ...\n</code></pre>\n<br>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">multiply</span>(<span class=\"params\">a, b</span>):</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> a*b</span><br><span class=\"line\"></span><br><span class=\"line\">a = <span class=\"number\">3</span></span><br><span class=\"line\">b = <span class=\"number\">4</span></span><br><span class=\"line\">c = multiply(a,b)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(c)</span><br><span class=\"line\">&gt;&gt; <span class=\"number\">12</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">deposit</span>(<span class=\"params\">balance, money</span>):</span></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">&quot;입금이 완료되었습니다. 잔액은 &#123;0&#125;원 입니다.&quot;</span>.<span class=\"built_in\">format</span>(balance + money))</span><br><span class=\"line\">  <span class=\"keyword\">return</span> balance + money</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">withdraw</span>(<span class=\"params\">balance, money</span>):</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> balance &gt;= money:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;출금이 완료되었습니다. 잔액은 &#123;0&#125;원 입니다. &quot;</span>.<span class=\"built_in\">format</span>(balance - money))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> balance - money</span><br><span class=\"line\">  <span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;출금이 완료되지 않았습니다. 잔액은 &#123;0&#125;원 입니다.&quot;</span>.<span class=\"built_in\">format</span>(balance))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> balance</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">withdraw_night</span>(<span class=\"params\">balance, money</span>):</span></span><br><span class=\"line\">  commission = <span class=\"number\">100</span> </span><br><span class=\"line\">  <span class=\"keyword\">return</span> commission, balance - money - commission  <span class=\"comment\">#여러개의 값도 한번에 반환 가능    </span></span><br><span class=\"line\"></span><br><span class=\"line\">balance = <span class=\"number\">0</span></span><br><span class=\"line\">balance = deposit(balance, <span class=\"number\">1000</span>)</span><br><span class=\"line\">balance = withdraw(balance, <span class=\"number\">2000</span>)</span><br><span class=\"line\">commission, balance = withdraw_night(balance, <span class=\"number\">500</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;수수료 &#123;0&#125;원이며, 잔액은 &#123;1&#125;원 입니다.&quot;</span>.<span class=\"built_in\">format</span>(commission, balance))</span><br></pre></td></tr></table></figure>\n<pre><code>입금이 완료되었습니다. 잔액은 1000원 입니다.\n출금이 완료되지 않았습니다. 잔액은 1000원 입니다.\n수수료 100원이며, 잔액은 400원 입니다.\n</code></pre>\n<h3 id=\"가변인자\"><a href=\"#가변인자\" class=\"headerlink\" title=\"가변인자\"></a><strong>가변인자</strong></h3><hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">profile</span>(<span class=\"params\">name, age, *language</span>):</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;이름: &#123;0&#125;\\t나이: &#123;1&#125;\\t&quot;</span>.<span class=\"built_in\">format</span>(name, age),end=<span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> lang <span class=\"keyword\">in</span> language:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(lang, end=<span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>()</span><br><span class=\"line\">    </span><br><span class=\"line\">profile(<span class=\"string\">&quot;유재석&quot;</span>, <span class=\"number\">20</span>, <span class=\"string\">&quot;Python&quot;</span>, <span class=\"string\">&quot;Java&quot;</span>, <span class=\"string\">&quot;C&quot;</span>, <span class=\"string\">&quot;C++&quot;</span>)</span><br><span class=\"line\">profile(<span class=\"string\">&quot;김태호&quot;</span>, <span class=\"number\">25</span>, <span class=\"string\">&quot;Kotlin&quot;</span>, <span class=\"string\">&quot;Swift&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<pre><code>이름: 유재석    나이: 20     Python Java C C++ \n이름: 김태호    나이: 25     Kotlin Swift \n</code></pre>\n<br>\n\n\n\n<h3 id=\"Ref\"><a href=\"#Ref\" class=\"headerlink\" title=\"Ref\"></a><strong>Ref</strong></h3><p><a href=\"https://www.youtube.com/watch?v=kWiCuklohdY\">나도코딩</a><br><a href=\"https://wikidocs.net/1015\">점프투파이썬</a></p>\n<br>\n<br>\n<br>\n"},{"title":"설치 프로그램 버전 | 부스트코스 백엔드","date":"2022-01-02T15:00:00.000Z","toc":true,"_content":"\n아래는 내가 부스트코스 강의를 들으면서 설치 한 프로그램 버전이다.\n구체적으로 설치 세팅 초기화는 예전에 정리해둔 네이버 블로그를 보면서 하자.\n\n### **tomcat**\n\n\n🔗 https://tomcat.apache.org/\n\nDownload -> Tomcat8 -> zip\n \n톰캣8 설치\n\n<br>\n\n### **Eclipse**\n\n🔗 https://www.eclipse.org/downloads/packages/release/2020-06/r\n이클립스 버전 2020-06\n\n\n위의 설치 파일을 아래 경로에 다운받았다 (관리용🔗)\nC:\\JavaUtils\n\n<br>\n\n### **이클립스 초기 설정**\n\nwindow -> perspective-> open perspective-> java EE\n\n톰캣 초기 설정 해줘야함\n하단에 server 클릭 -> 톰캣 8.5 맞춰서 설정해주기\n\n<br>\n\n### **톰캣 404 에러 해결법**\n서버탭을 더블클릭하면  Overview 창이 나온다\nserver Locations -> Use Tomcat installation (takes control of Tomcat installation)\n\n\n<br>\n\n\n### **ORACLE 다운로드 11G**\n🔗 https://www.oracle.com/database/technologies/xe-prior-release-downloads.html\n👉 [오라클 다운로드 방법](https://cceeun.tistory.com/198)\n\nSQL Developer 설치\n\n<br>","source":"_posts/boostcourse_version.md","raw":"---\ntitle: 설치 프로그램 버전 | 부스트코스 백엔드\ndate: 2022-01-03\ntags: tomcat, eclipse, oracle\ntoc: true\ncategories: \n- boostcourse 백엔드\n---\n\n아래는 내가 부스트코스 강의를 들으면서 설치 한 프로그램 버전이다.\n구체적으로 설치 세팅 초기화는 예전에 정리해둔 네이버 블로그를 보면서 하자.\n\n### **tomcat**\n\n\n🔗 https://tomcat.apache.org/\n\nDownload -> Tomcat8 -> zip\n \n톰캣8 설치\n\n<br>\n\n### **Eclipse**\n\n🔗 https://www.eclipse.org/downloads/packages/release/2020-06/r\n이클립스 버전 2020-06\n\n\n위의 설치 파일을 아래 경로에 다운받았다 (관리용🔗)\nC:\\JavaUtils\n\n<br>\n\n### **이클립스 초기 설정**\n\nwindow -> perspective-> open perspective-> java EE\n\n톰캣 초기 설정 해줘야함\n하단에 server 클릭 -> 톰캣 8.5 맞춰서 설정해주기\n\n<br>\n\n### **톰캣 404 에러 해결법**\n서버탭을 더블클릭하면  Overview 창이 나온다\nserver Locations -> Use Tomcat installation (takes control of Tomcat installation)\n\n\n<br>\n\n\n### **ORACLE 다운로드 11G**\n🔗 https://www.oracle.com/database/technologies/xe-prior-release-downloads.html\n👉 [오라클 다운로드 방법](https://cceeun.tistory.com/198)\n\nSQL Developer 설치\n\n<br>","slug":"boostcourse-version","published":1,"updated":"2022-01-06T15:13:45.316Z","_id":"cky30wsgu0001v8rjdhti7jv0","comments":1,"layout":"post","photos":[],"link":"","content":"<p>아래는 내가 부스트코스 강의를 들으면서 설치 한 프로그램 버전이다.<br>구체적으로 설치 세팅 초기화는 예전에 정리해둔 네이버 블로그를 보면서 하자.</p>\n<h3 id=\"tomcat\"><a href=\"#tomcat\" class=\"headerlink\" title=\"tomcat\"></a><strong>tomcat</strong></h3><p>🔗 <a href=\"https://tomcat.apache.org/\">https://tomcat.apache.org/</a></p>\n<p>Download -&gt; Tomcat8 -&gt; zip</p>\n<p>톰캣8 설치</p>\n<br>\n\n<h3 id=\"Eclipse\"><a href=\"#Eclipse\" class=\"headerlink\" title=\"Eclipse\"></a><strong>Eclipse</strong></h3><p>🔗 <a href=\"https://www.eclipse.org/downloads/packages/release/2020-06/r\">https://www.eclipse.org/downloads/packages/release/2020-06/r</a><br>이클립스 버전 2020-06</p>\n<p>위의 설치 파일을 아래 경로에 다운받았다 (관리용🔗)<br>C:\\JavaUtils</p>\n<br>\n\n<h3 id=\"이클립스-초기-설정\"><a href=\"#이클립스-초기-설정\" class=\"headerlink\" title=\"이클립스 초기 설정\"></a><strong>이클립스 초기 설정</strong></h3><p>window -&gt; perspective-&gt; open perspective-&gt; java EE</p>\n<p>톰캣 초기 설정 해줘야함<br>하단에 server 클릭 -&gt; 톰캣 8.5 맞춰서 설정해주기</p>\n<br>\n\n<h3 id=\"톰캣-404-에러-해결법\"><a href=\"#톰캣-404-에러-해결법\" class=\"headerlink\" title=\"톰캣 404 에러 해결법\"></a><strong>톰캣 404 에러 해결법</strong></h3><p>서버탭을 더블클릭하면  Overview 창이 나온다<br>server Locations -&gt; Use Tomcat installation (takes control of Tomcat installation)</p>\n<br>\n\n\n<h3 id=\"ORACLE-다운로드-11G\"><a href=\"#ORACLE-다운로드-11G\" class=\"headerlink\" title=\"ORACLE 다운로드 11G\"></a><strong>ORACLE 다운로드 11G</strong></h3><p>🔗 <a href=\"https://www.oracle.com/database/technologies/xe-prior-release-downloads.html\">https://www.oracle.com/database/technologies/xe-prior-release-downloads.html</a><br>👉 <a href=\"https://cceeun.tistory.com/198\">오라클 다운로드 방법</a></p>\n<p>SQL Developer 설치</p>\n<br>","site":{"data":{}},"excerpt":"아래는 내가 부스트코스 강의를 들으면서 설치 한 프로그램 버전이다.\n구체적으로 설치 세팅 초기화는 예전에 정리해둔 네이버 블로그를 보면서 하자.\n\ntomcat\n🔗 https://tomcat.apache.org/\n\nDownload -> Tomcat8 -> zip\n\n톰캣8 설치\n\n\nEclipse\n🔗 https://www.eclipse.org/downloads/packages/release/2020-06/r\n이클립스 버전 2020-06\n\n위의 설치 파일을 아래 경로에 다운받았다 (관리용🔗)\nC:\\JavaUtils\n\n\n이클립스 초기 ","more":"<p>아래는 내가 부스트코스 강의를 들으면서 설치 한 프로그램 버전이다.<br>구체적으로 설치 세팅 초기화는 예전에 정리해둔 네이버 블로그를 보면서 하자.</p>\n<h3 id=\"tomcat\"><a href=\"#tomcat\" class=\"headerlink\" title=\"tomcat\"></a><strong>tomcat</strong></h3><p>🔗 <a href=\"https://tomcat.apache.org/\">https://tomcat.apache.org/</a></p>\n<p>Download -&gt; Tomcat8 -&gt; zip</p>\n<p>톰캣8 설치</p>\n<br>\n\n<h3 id=\"Eclipse\"><a href=\"#Eclipse\" class=\"headerlink\" title=\"Eclipse\"></a><strong>Eclipse</strong></h3><p>🔗 <a href=\"https://www.eclipse.org/downloads/packages/release/2020-06/r\">https://www.eclipse.org/downloads/packages/release/2020-06/r</a><br>이클립스 버전 2020-06</p>\n<p>위의 설치 파일을 아래 경로에 다운받았다 (관리용🔗)<br>C:\\JavaUtils</p>\n<br>\n\n<h3 id=\"이클립스-초기-설정\"><a href=\"#이클립스-초기-설정\" class=\"headerlink\" title=\"이클립스 초기 설정\"></a><strong>이클립스 초기 설정</strong></h3><p>window -&gt; perspective-&gt; open perspective-&gt; java EE</p>\n<p>톰캣 초기 설정 해줘야함<br>하단에 server 클릭 -&gt; 톰캣 8.5 맞춰서 설정해주기</p>\n<br>\n\n<h3 id=\"톰캣-404-에러-해결법\"><a href=\"#톰캣-404-에러-해결법\" class=\"headerlink\" title=\"톰캣 404 에러 해결법\"></a><strong>톰캣 404 에러 해결법</strong></h3><p>서버탭을 더블클릭하면  Overview 창이 나온다<br>server Locations -&gt; Use Tomcat installation (takes control of Tomcat installation)</p>\n<br>\n\n\n<h3 id=\"ORACLE-다운로드-11G\"><a href=\"#ORACLE-다운로드-11G\" class=\"headerlink\" title=\"ORACLE 다운로드 11G\"></a><strong>ORACLE 다운로드 11G</strong></h3><p>🔗 <a href=\"https://www.oracle.com/database/technologies/xe-prior-release-downloads.html\">https://www.oracle.com/database/technologies/xe-prior-release-downloads.html</a><br>👉 <a href=\"https://cceeun.tistory.com/198\">오라클 다운로드 방법</a></p>\n<p>SQL Developer 설치</p>\n<br>"},{"title":"데이터베이스 | 부스트코스 백엔드 01","date":"2022-01-02T15:00:00.000Z","toc":true,"_content":"\n\n### 부스트코스 \n웹 백엔드 공부 해보기\nhttps://www.boostcourse.org/web326/joinLectures/28762\n인프런 강의를 듣다가 너무 어려워서 부스트코스에서 무료강의인 백엔드 코스를 먼저 들어보기로 하였다.\n\n<br>\n\n### 데이터 베이스\n데이터들의 집합체\n\n<br>\n\n\n### 데이터베이스의 특성\n실시간 접근성\n계속적인 변환\n동시공유성\n내용참조\n\n<br>\n\n\n### DBMS (Database Management System)\n데이터베이스를 관리하는 소프트웨어\n데이터베이스를 관리, 운영하는 시스템을 의미\n또한 여러 사용자나 플그램이 데이터를 공유하고 동시에 접근이 가능해야함\n\n- 필수 3기능\n**정의기능:** 데이터 베이스의 논리적, 물리적 구조를 정의\n**조작기능:** 데이터를 검색, 삭제, 갱신, 삽입, 삭제하는 기능\n**제어기능:** 데이터 베이스의 내용 정확성과 안전성을 유지하도록 제어하는 기능\nOracle, SQL Server, MySQL, DB2 등의 상용 또는 공개 DBMS가 있다\n\n<br>\n\n\n### DBMS 시스템 장/단점\n- 장점\n데이터 중복이 최소화\n데이터의 일관성 및 무결성 유지\n데이터 보안 보장\n\n- 단점\n운영비가 비싸다\n백업 및 복구에 대한 관리가 복잡\n부분적 데이터베이스 손실이 전체 시스템을 정지\n\n<br>\n\n- DBMS의 특징\n데이터의 무결성 : 데이터베이스 내부의 데이터는 오류가 있어선 안된다.\n데이터의 독립성 : 데이터와 그것을 사용하는 응용프로그램은 독립적으로 작동되어야한다.\n데이터의 중복의 최소성 : 동일한 데이터가 중복되어 저장되는것을 방지한다.\n데이터의 보안성 : 데이터베이스 내부의 데이터는 아무나 접근할 수 없고 데이터를 소유한 사람이나 접근이 허가된 사람만 사용할 수 있어야한다.\n데이터의 안전성 : 백업과 복원 기능을 지원함으로 데이터가 깨지는 문제가 발생시 원 상태로 복구가 가능해야한다.\n\n<br>\n\n\n- DBMS의 유형\n계층형 DBMS\n망형(네트워크형) DBMS\n관계형 DBMS\n객체관계형 DBMS\n\n\n우리가 주로 사용하게 될 DBMS는 관계형 데이터 베이스로 \n테이블이라는 최소단위로 구성됨\n테이블은 릴레이션 엔티티 등으로도 불림\n테이블은 데이터를 효율적으로 저장하기 위한 구조이다\n\n<br>\n\n\n\n### SQL (Structured Query Language)\n\nSQL은 데이터를 보다 쉽게 검색하고 추가, 삭제, 수정같은 조작을 할 수 있도록 고안된 컴퓨터 언어이다.\n\n관계형 데이터베이스에서 사용하는 언어\n데이터를 조작하기 위한 언어로 프로그래밍 언어와는 다르다.\n국제 표준화 기구에서 표준을 제정한다.\n(다만 DBMS를 제작하는 회사마다 특징이 있기 때문에 완벽하게 동일하지 않다)\n대화식 언어이다. 질의를 하고 결과를 얻는 구조\n다양한 종류의 관계형 데이터 베이스\n대표적으로 oracle, mySQL, SQL server, MariaDB\n\n\n<br>\n\n### 데이터베이스 용어\n데이터 베이스는 기본적으로 현실세계의 데이터를 컴퓨터 데이터로 옮겨 놓은 공간을 의미\n\n\nex)\n대상물은 여러가지 정보를 가진다\n회원이라면 이름 주민번호 주소 전화번호\n제품이라면 제품명 가격 제조일자\n이런 정보를 단순하게 저장하는게 아니라 \"테이블\" 이라는 형식에 맞춰서 저장\n\n\n\n- 테이블\n데이터를 저장하기 위한 구조를 표로 표현\n\n\n\n- 스키마 \n테이블, 뷰 등이 저장되는 저장소\n데이터 베이스에 저장되는 데이터 구조와 제약조건을 정의\n보통 오라클에서는 DB 사용자 이름과 동일시 해서 사용\n\n\n\n- 데이터베이스 \n여러 스키마가 저장되는 공간\nXE버전은 한번 한개의 데이터 베이스만 운영 가능\nstandard이상 버전은 여러개의 데이터 베이스 운영 가능\n\n행(로우, 레코드, 튜플) - 실질적인 데이터를 의미\n열(컬럼, 필드, 속성) -  데이터를 구분하기 위한 특징들을 컬럼이라고 부름\n\n\n\n차수(degree): 속성의 개수\n기수(cardinality): 튜플의 개수\n도메인(domain): 속성이 가질 수 있는 값의 범위\n트랜젝션: 데이터베이스의 상태를 변화시키는 논리적 기능을 수행하기 위한 작업의 단위\n\n\n<br>\n\n\n### 데이터 언어 (SQL)\n- 데이터 정의어 (DDL Data Manipulation Language) : 스키마를 정의하거나, 수정 또는 삭제하기 위해서 사용 (ex INSERT, UPDATE, DELETE, SELECT)\n- 데이터 조작어(DML Data Definition Language) : 데이터의 삽입 삭제 수정 검색 등의 처리를 요구하기 위해서 사용 (ex CEATE, DROP, ALTER)\n- 데이터 제어어 (DCL Data Control Language) : 내부적으로 필요한 규칙이나 기법을 정의하기 위해서 사용 (ex GRANT, REVOKE)\n\n<br>\n\n### MySQL 설치\nurl 링크 : https://www.mysql.com/downloads/\n비밀번호는 무조건 1234 (짧게 하는게 최고다)\n간단한게 최고다,, \nMySQL은 설치부분에 있어서 어려운 점은 없었다 흐름대로 설치하면 된다.\n\n환경변수에서 아래의 MySQL 경로를 추가해주었다 (각자의 경로가 다를 수 있음)\nC:\\Program Files\\MySQL\\MySQL Server 8.0\\bin\n\n<br>\n\n### 서버 실행 확인\n서비스라고 검색 -> MySQL 찾기\n![](/images/boostcourse_01/1.PNG)\n\n-> 서비스가 실행중임을 확인할 수 있다\nMySQL이 동작하지 않는다면 해당 서비스에서 실행중 이라고 표시되는지 확인해보자\n\n<br>\n\n### MySQL 서버 종료하기\n서비스에서 MySQL 우클릭 -> 중지\nMySQL 서버 정지 됨\n윈도우가 실행될때 자동으로 실행되길 원하지 않는다면, 시작 유형 \"자동\"을 수동으로 변경한 후 \"확인\"버튼을 클릭\n이 경우 매번 시작을 눌러야 서버가 실행된다.\n\nDBMS에 많은 사람들이 동시에 접속해서 사용하는데\n이때 서버가 종료된다면데이터가 날아가는 불상사가 생기거나, 필요한 데이터를 전달 받지 못하여 여러 사람이 동일한 데이터에\n접근할 수 없는 상황이 발생한다.\n\n<br>\n\n### Database 생성하기\ncmd 창에서 실행해보자\n\nMySQL 관리자 계정인 root로 데이터베이스 관리 시스템에 접속하겠다는 것\n\tmysql -uroot -p\n\t\n![](/images/boostcourse_01/2.PNG)\n\n<br>\n\n- connecdb 데이터 베이스 생성\n\n\n    create database connectdb;\n\n\n- 권한주기\nDatabase를 생성했다면, 해당 데이터베이스를 사용하는 계정을 생성해야한다. \n또한 해당 계정이 데이터베이스를 이용할 수 있는 권한을 줘야한다.\n아래와 같은 명령을 이용해서 사용자 생성과 권한을 줄 수 있다.\ndb이름 뒤의 *는 모든 권한을 의미 \n@'%'는 어떤 클라이언트에서든 접근 가능하다는 의미\n@'localhost'는 해당 컴퓨터에서만 접근 가능하다는 의미\nfush privileges는 DBMS에게 적용을 하라는 의미이므로 반드시 실행해야함\n\n\n- 사용자 계정이름은 connectuser, 암호는 connect123!@#으로 설정\n\t\n\n    grant all privileges on connectdb.* to connectuser@'localhost' identified by 'connect123!@#';\n \n\n\n그런데 여기서 에러가 났다\n  \n    ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'identified by 'connect123!@#'' at line 1\n\n오타가 있는지 수십번을 확인한 후 \n찾아보니 MySQL8부터는 grant로 user 생성이 불가능\n\n아래 방밥으로 해결\n\n\tCREATE USER connectuser@localhost IDENTIFIED BY 'connect123!@#';\n\tGRANT ALL PRIVILEGES ON connectdb.* TO 'connectuser'@'localhost';\n\tFLUSH PRIVILEGES:\n\n<br>\n\n\n### Database에 접속하기\n\tmysql -h호스트명 -uDB계정명 -p 데이터베이스이름\n\tmysql -h127.0.0.1 -uconnectuser -p connectdb\n\n\tmysql -uconnectuser -p connectdb\n\n<br>\n\n\n### SQL 입력\n- 키워드는 대소문자를 구분하지 않는다\n- 여러문장을 한줄에 연속으로 입력 가능\n- 라인으로 구분하지 않고, semicolon(;)으로 구문\n- \\c -> 긴 쿼리를 작성하다 중간에 취소해야하는 경우 붙여준다\n\n\n<br>\n\n\n\n### Database 종료\n\tquit\n\texit\n\n<br>\n\n\n### 현재 날짜와 버전 확인\n\tselect version(), current_date;\n\n<br>\n\n\n\n### DBMS에 존재하는 데이터베이스 확인\n\tshow database\n현재 서버에 존재하는 데이터베이스를 찾아보기 위해서 SHOW statement를 사용\n\n<br>\n\n\n### 사용중인 데이터베이스 전환하기\nDatabase를 선택하기 위해 'use' command 사용:\n\tuse mydb;\n데이터 베이스를 전환하려면, 이미 데이터 베이스가 존재해야하며 현재 접속중인 계정이 \n해당 데이터 베이스를 사용할 수 있는 권한이 있어야한다. \n\n\n<br>\n\n\n### 테이블 (Table)\n데이터를 저장하는 공간 \n\n\t마이크로소프트의 엑셀(Excel)을 실행하면 표가 나옵니다. 이러한 표에 각종 값을 저장할 수 있습니다.\n\t데이터베이스도 엑셀의 표와 유사한 테이블을 가질 수 있습니다.\n\t엑셀과 다른 점은 데이터베이스를 생성해도 테이블은 존재하지 않는다는 것입니다.\n\t테이블을 사용하려면 테이블을 생성하는 SQL을 사용해야 합니다.\n\t그리고, 테이블에 값을 저장하려면 저장하기 위한 SQL을 사용해야 합니다.\n\n\n<br>\n\n\n\n###SQL연습을 위한 테이블 생성과 값의 저장\n바탕화면에 data 폴더를 만들고 examples.sql 파일을 다운받았다\nmysql을 종료하고 (quit)\ndata 디렉터리로 이동 한 후 아래 명령문을 입력\n\n\tmysql   -uconnectuser  -p  connectdb   <  examples.sql\n\n다시 mysql 로그인\n\n\tmysql -uconnectuser -p  connectdb\n\n현재 데이터베이스에 존재하는 테이블 목록 확인하기\n\tshow tables\n\n테이블 구조를 확인하기 위한 DESCRIBE 명령\n\tdesc EMPLOYEE;\n\n![](/images/boostcourse_01/3.PNG)\n\n\n<br>\n\n\n### 데이터 조작어의 종류\nSELECT 검색\nINSERT 삽입\nUPDATE 수정\nDELETE 삭제\n\n\n- SELECT 구문의 기본 문형\n\tSELECT 칼럼명 FROM 테이블명;\n\n- 컬럼에 Alias 부여하기\n컬럼에 대한 ALIAS(별칭)을 부여해서 나타내는 칼럼의 HEADING을 변경할 수 있다.\n\n![](/images/boostcourse_01/4.PNG)\n\n예제 : employee 테이블에서 직원의 사번(empno), 이름(name), 직업(job)을 출력하시오.\n\n\tselect empno as 사번, name as 이름, job as 직업 from employee;\n\n<br>\n\n- 문자열 결합함수 concat\n\n\tSELECT concat( empno, '-', deptno) AS '사번-부서번호' FROM employee;\n\n![](/images/boostcourse_01/5.PNG)\n\n<br>\n\n- 중복행 제거 distinct\n\tselect distinct deptno from employee;\n\n<br>\n\n- 정렬하기 order by\n\tselect empno, name, job from employee order by name;\n\n\n<br>\n\n- 특정 행 검색 where절\nemployee 테이블에서 고용일(hiredate)이 1981년 이전의 사원이름과 고용일을 출력하시오. \n\tselect name, hiredate from employee where hiredate < '1981-01-01';\n\nemployee 테이블에서 부서번호가 30인 사원이름과 부서번호를 출력하시오.\n\tselect name, deptno from employee where deptno = 30;\n\n- IN\nemployee 테이블에서 부서번호가 10또는 30인 사원이름과 부서번호를 출력하시오.\n\tselect name, deptno from employee where deptno in (10, 30);\n\n- LIKE 키워드 \n와일드 카드를 사용하여 특정 문자를 포함한 값에 대한 조건을 처리\n%는 0에서부터 여러개의 문자열을 나타냄\n_는 단 하나의 문자를 나타내는 와일드 카드\n\nemployee 테이블에서 이름에 'A'가 포함된 사원의 이름(name)과 직업(job)을 출력하시오.\n\tselect name, job from employee where name like '%A%';\t\n\n\n- INSERT\nINSERT INTO 테이블명(필드1, 필드2, 필드3, 필드4, … ) VALUES ( 필드1의 값, 필드2의 값, 필드3의 값, 필드4의 값, … )\n\nex) ROLE테이블에 role_id는 200, description에는 'CEO'로 한건의 데이터를 저장하시오.\n\tinsert into ROLE (role_id, description) values ( 200, 'CEO');\n\n- UPDATE\nUPDATE  테이블명\nSET  필드1=필드1의값, 필드2=필드2의값, 필드3=필드3의값, …\nWHERE  조건식\n\nex) ROLE테이블에 role_id가 200일 경우 description을 'CTO'로 수정하시오.\n\tupdate ROLE set description = 'CTO' where role_id = 200;\n\n\n- DELETE\nDELETE\nFROM  테이블명\nWHERE  조건식\n\nex) ROLE테이블에서 role_id는 200인 정보를 삭제하시오.\n\tdelete from ROLE where role_id = 200;\n\n<br>\n\n\n\n### DDL(create, alter, drop)\n\n- 테이블 생성\n       create table 테이블명( \n       \t 필드명1 타입 [NULL | NOT NULL][DEFAULT ][AUTO_INCREMENT], \n         필드명2 타입 [NULL | NOT NULL][DEFAULT ][AUTO_INCREMENT], \n         필드명3 타입 [NULL | NOT NULL][DEFAULT ][AUTO_INCREMENT], \n       \t .......... \n         PRIMARY KEY(필드명) \n         );\n\n- 테이블 수정 (컬럼 추가/ 삭제)\n    alter table 테이블명\n    add  필드명 타입 [NULL | NOT NULL][DEFAULT ][AUTO_INCREMENT];\n    alter table 테이블명\n    drop  필드명;\n\n- 테이블 이름 변경\n\talter table  테이블명 rename 변경이름\n\n- 테이블 삭제\n\tdrop table 테이블이름;\n\n\n\n\n<br>\n<br>","source":"_posts/boostcourse_01_db.md","raw":"---\ntitle: 데이터베이스 | 부스트코스 백엔드 01\ndate: 2022-01-03\ntags: database\ntoc: true\ncategories: \n- boostcourse 백엔드\n---\n\n\n### 부스트코스 \n웹 백엔드 공부 해보기\nhttps://www.boostcourse.org/web326/joinLectures/28762\n인프런 강의를 듣다가 너무 어려워서 부스트코스에서 무료강의인 백엔드 코스를 먼저 들어보기로 하였다.\n\n<br>\n\n### 데이터 베이스\n데이터들의 집합체\n\n<br>\n\n\n### 데이터베이스의 특성\n실시간 접근성\n계속적인 변환\n동시공유성\n내용참조\n\n<br>\n\n\n### DBMS (Database Management System)\n데이터베이스를 관리하는 소프트웨어\n데이터베이스를 관리, 운영하는 시스템을 의미\n또한 여러 사용자나 플그램이 데이터를 공유하고 동시에 접근이 가능해야함\n\n- 필수 3기능\n**정의기능:** 데이터 베이스의 논리적, 물리적 구조를 정의\n**조작기능:** 데이터를 검색, 삭제, 갱신, 삽입, 삭제하는 기능\n**제어기능:** 데이터 베이스의 내용 정확성과 안전성을 유지하도록 제어하는 기능\nOracle, SQL Server, MySQL, DB2 등의 상용 또는 공개 DBMS가 있다\n\n<br>\n\n\n### DBMS 시스템 장/단점\n- 장점\n데이터 중복이 최소화\n데이터의 일관성 및 무결성 유지\n데이터 보안 보장\n\n- 단점\n운영비가 비싸다\n백업 및 복구에 대한 관리가 복잡\n부분적 데이터베이스 손실이 전체 시스템을 정지\n\n<br>\n\n- DBMS의 특징\n데이터의 무결성 : 데이터베이스 내부의 데이터는 오류가 있어선 안된다.\n데이터의 독립성 : 데이터와 그것을 사용하는 응용프로그램은 독립적으로 작동되어야한다.\n데이터의 중복의 최소성 : 동일한 데이터가 중복되어 저장되는것을 방지한다.\n데이터의 보안성 : 데이터베이스 내부의 데이터는 아무나 접근할 수 없고 데이터를 소유한 사람이나 접근이 허가된 사람만 사용할 수 있어야한다.\n데이터의 안전성 : 백업과 복원 기능을 지원함으로 데이터가 깨지는 문제가 발생시 원 상태로 복구가 가능해야한다.\n\n<br>\n\n\n- DBMS의 유형\n계층형 DBMS\n망형(네트워크형) DBMS\n관계형 DBMS\n객체관계형 DBMS\n\n\n우리가 주로 사용하게 될 DBMS는 관계형 데이터 베이스로 \n테이블이라는 최소단위로 구성됨\n테이블은 릴레이션 엔티티 등으로도 불림\n테이블은 데이터를 효율적으로 저장하기 위한 구조이다\n\n<br>\n\n\n\n### SQL (Structured Query Language)\n\nSQL은 데이터를 보다 쉽게 검색하고 추가, 삭제, 수정같은 조작을 할 수 있도록 고안된 컴퓨터 언어이다.\n\n관계형 데이터베이스에서 사용하는 언어\n데이터를 조작하기 위한 언어로 프로그래밍 언어와는 다르다.\n국제 표준화 기구에서 표준을 제정한다.\n(다만 DBMS를 제작하는 회사마다 특징이 있기 때문에 완벽하게 동일하지 않다)\n대화식 언어이다. 질의를 하고 결과를 얻는 구조\n다양한 종류의 관계형 데이터 베이스\n대표적으로 oracle, mySQL, SQL server, MariaDB\n\n\n<br>\n\n### 데이터베이스 용어\n데이터 베이스는 기본적으로 현실세계의 데이터를 컴퓨터 데이터로 옮겨 놓은 공간을 의미\n\n\nex)\n대상물은 여러가지 정보를 가진다\n회원이라면 이름 주민번호 주소 전화번호\n제품이라면 제품명 가격 제조일자\n이런 정보를 단순하게 저장하는게 아니라 \"테이블\" 이라는 형식에 맞춰서 저장\n\n\n\n- 테이블\n데이터를 저장하기 위한 구조를 표로 표현\n\n\n\n- 스키마 \n테이블, 뷰 등이 저장되는 저장소\n데이터 베이스에 저장되는 데이터 구조와 제약조건을 정의\n보통 오라클에서는 DB 사용자 이름과 동일시 해서 사용\n\n\n\n- 데이터베이스 \n여러 스키마가 저장되는 공간\nXE버전은 한번 한개의 데이터 베이스만 운영 가능\nstandard이상 버전은 여러개의 데이터 베이스 운영 가능\n\n행(로우, 레코드, 튜플) - 실질적인 데이터를 의미\n열(컬럼, 필드, 속성) -  데이터를 구분하기 위한 특징들을 컬럼이라고 부름\n\n\n\n차수(degree): 속성의 개수\n기수(cardinality): 튜플의 개수\n도메인(domain): 속성이 가질 수 있는 값의 범위\n트랜젝션: 데이터베이스의 상태를 변화시키는 논리적 기능을 수행하기 위한 작업의 단위\n\n\n<br>\n\n\n### 데이터 언어 (SQL)\n- 데이터 정의어 (DDL Data Manipulation Language) : 스키마를 정의하거나, 수정 또는 삭제하기 위해서 사용 (ex INSERT, UPDATE, DELETE, SELECT)\n- 데이터 조작어(DML Data Definition Language) : 데이터의 삽입 삭제 수정 검색 등의 처리를 요구하기 위해서 사용 (ex CEATE, DROP, ALTER)\n- 데이터 제어어 (DCL Data Control Language) : 내부적으로 필요한 규칙이나 기법을 정의하기 위해서 사용 (ex GRANT, REVOKE)\n\n<br>\n\n### MySQL 설치\nurl 링크 : https://www.mysql.com/downloads/\n비밀번호는 무조건 1234 (짧게 하는게 최고다)\n간단한게 최고다,, \nMySQL은 설치부분에 있어서 어려운 점은 없었다 흐름대로 설치하면 된다.\n\n환경변수에서 아래의 MySQL 경로를 추가해주었다 (각자의 경로가 다를 수 있음)\nC:\\Program Files\\MySQL\\MySQL Server 8.0\\bin\n\n<br>\n\n### 서버 실행 확인\n서비스라고 검색 -> MySQL 찾기\n![](/images/boostcourse_01/1.PNG)\n\n-> 서비스가 실행중임을 확인할 수 있다\nMySQL이 동작하지 않는다면 해당 서비스에서 실행중 이라고 표시되는지 확인해보자\n\n<br>\n\n### MySQL 서버 종료하기\n서비스에서 MySQL 우클릭 -> 중지\nMySQL 서버 정지 됨\n윈도우가 실행될때 자동으로 실행되길 원하지 않는다면, 시작 유형 \"자동\"을 수동으로 변경한 후 \"확인\"버튼을 클릭\n이 경우 매번 시작을 눌러야 서버가 실행된다.\n\nDBMS에 많은 사람들이 동시에 접속해서 사용하는데\n이때 서버가 종료된다면데이터가 날아가는 불상사가 생기거나, 필요한 데이터를 전달 받지 못하여 여러 사람이 동일한 데이터에\n접근할 수 없는 상황이 발생한다.\n\n<br>\n\n### Database 생성하기\ncmd 창에서 실행해보자\n\nMySQL 관리자 계정인 root로 데이터베이스 관리 시스템에 접속하겠다는 것\n\tmysql -uroot -p\n\t\n![](/images/boostcourse_01/2.PNG)\n\n<br>\n\n- connecdb 데이터 베이스 생성\n\n\n    create database connectdb;\n\n\n- 권한주기\nDatabase를 생성했다면, 해당 데이터베이스를 사용하는 계정을 생성해야한다. \n또한 해당 계정이 데이터베이스를 이용할 수 있는 권한을 줘야한다.\n아래와 같은 명령을 이용해서 사용자 생성과 권한을 줄 수 있다.\ndb이름 뒤의 *는 모든 권한을 의미 \n@'%'는 어떤 클라이언트에서든 접근 가능하다는 의미\n@'localhost'는 해당 컴퓨터에서만 접근 가능하다는 의미\nfush privileges는 DBMS에게 적용을 하라는 의미이므로 반드시 실행해야함\n\n\n- 사용자 계정이름은 connectuser, 암호는 connect123!@#으로 설정\n\t\n\n    grant all privileges on connectdb.* to connectuser@'localhost' identified by 'connect123!@#';\n \n\n\n그런데 여기서 에러가 났다\n  \n    ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'identified by 'connect123!@#'' at line 1\n\n오타가 있는지 수십번을 확인한 후 \n찾아보니 MySQL8부터는 grant로 user 생성이 불가능\n\n아래 방밥으로 해결\n\n\tCREATE USER connectuser@localhost IDENTIFIED BY 'connect123!@#';\n\tGRANT ALL PRIVILEGES ON connectdb.* TO 'connectuser'@'localhost';\n\tFLUSH PRIVILEGES:\n\n<br>\n\n\n### Database에 접속하기\n\tmysql -h호스트명 -uDB계정명 -p 데이터베이스이름\n\tmysql -h127.0.0.1 -uconnectuser -p connectdb\n\n\tmysql -uconnectuser -p connectdb\n\n<br>\n\n\n### SQL 입력\n- 키워드는 대소문자를 구분하지 않는다\n- 여러문장을 한줄에 연속으로 입력 가능\n- 라인으로 구분하지 않고, semicolon(;)으로 구문\n- \\c -> 긴 쿼리를 작성하다 중간에 취소해야하는 경우 붙여준다\n\n\n<br>\n\n\n\n### Database 종료\n\tquit\n\texit\n\n<br>\n\n\n### 현재 날짜와 버전 확인\n\tselect version(), current_date;\n\n<br>\n\n\n\n### DBMS에 존재하는 데이터베이스 확인\n\tshow database\n현재 서버에 존재하는 데이터베이스를 찾아보기 위해서 SHOW statement를 사용\n\n<br>\n\n\n### 사용중인 데이터베이스 전환하기\nDatabase를 선택하기 위해 'use' command 사용:\n\tuse mydb;\n데이터 베이스를 전환하려면, 이미 데이터 베이스가 존재해야하며 현재 접속중인 계정이 \n해당 데이터 베이스를 사용할 수 있는 권한이 있어야한다. \n\n\n<br>\n\n\n### 테이블 (Table)\n데이터를 저장하는 공간 \n\n\t마이크로소프트의 엑셀(Excel)을 실행하면 표가 나옵니다. 이러한 표에 각종 값을 저장할 수 있습니다.\n\t데이터베이스도 엑셀의 표와 유사한 테이블을 가질 수 있습니다.\n\t엑셀과 다른 점은 데이터베이스를 생성해도 테이블은 존재하지 않는다는 것입니다.\n\t테이블을 사용하려면 테이블을 생성하는 SQL을 사용해야 합니다.\n\t그리고, 테이블에 값을 저장하려면 저장하기 위한 SQL을 사용해야 합니다.\n\n\n<br>\n\n\n\n###SQL연습을 위한 테이블 생성과 값의 저장\n바탕화면에 data 폴더를 만들고 examples.sql 파일을 다운받았다\nmysql을 종료하고 (quit)\ndata 디렉터리로 이동 한 후 아래 명령문을 입력\n\n\tmysql   -uconnectuser  -p  connectdb   <  examples.sql\n\n다시 mysql 로그인\n\n\tmysql -uconnectuser -p  connectdb\n\n현재 데이터베이스에 존재하는 테이블 목록 확인하기\n\tshow tables\n\n테이블 구조를 확인하기 위한 DESCRIBE 명령\n\tdesc EMPLOYEE;\n\n![](/images/boostcourse_01/3.PNG)\n\n\n<br>\n\n\n### 데이터 조작어의 종류\nSELECT 검색\nINSERT 삽입\nUPDATE 수정\nDELETE 삭제\n\n\n- SELECT 구문의 기본 문형\n\tSELECT 칼럼명 FROM 테이블명;\n\n- 컬럼에 Alias 부여하기\n컬럼에 대한 ALIAS(별칭)을 부여해서 나타내는 칼럼의 HEADING을 변경할 수 있다.\n\n![](/images/boostcourse_01/4.PNG)\n\n예제 : employee 테이블에서 직원의 사번(empno), 이름(name), 직업(job)을 출력하시오.\n\n\tselect empno as 사번, name as 이름, job as 직업 from employee;\n\n<br>\n\n- 문자열 결합함수 concat\n\n\tSELECT concat( empno, '-', deptno) AS '사번-부서번호' FROM employee;\n\n![](/images/boostcourse_01/5.PNG)\n\n<br>\n\n- 중복행 제거 distinct\n\tselect distinct deptno from employee;\n\n<br>\n\n- 정렬하기 order by\n\tselect empno, name, job from employee order by name;\n\n\n<br>\n\n- 특정 행 검색 where절\nemployee 테이블에서 고용일(hiredate)이 1981년 이전의 사원이름과 고용일을 출력하시오. \n\tselect name, hiredate from employee where hiredate < '1981-01-01';\n\nemployee 테이블에서 부서번호가 30인 사원이름과 부서번호를 출력하시오.\n\tselect name, deptno from employee where deptno = 30;\n\n- IN\nemployee 테이블에서 부서번호가 10또는 30인 사원이름과 부서번호를 출력하시오.\n\tselect name, deptno from employee where deptno in (10, 30);\n\n- LIKE 키워드 \n와일드 카드를 사용하여 특정 문자를 포함한 값에 대한 조건을 처리\n%는 0에서부터 여러개의 문자열을 나타냄\n_는 단 하나의 문자를 나타내는 와일드 카드\n\nemployee 테이블에서 이름에 'A'가 포함된 사원의 이름(name)과 직업(job)을 출력하시오.\n\tselect name, job from employee where name like '%A%';\t\n\n\n- INSERT\nINSERT INTO 테이블명(필드1, 필드2, 필드3, 필드4, … ) VALUES ( 필드1의 값, 필드2의 값, 필드3의 값, 필드4의 값, … )\n\nex) ROLE테이블에 role_id는 200, description에는 'CEO'로 한건의 데이터를 저장하시오.\n\tinsert into ROLE (role_id, description) values ( 200, 'CEO');\n\n- UPDATE\nUPDATE  테이블명\nSET  필드1=필드1의값, 필드2=필드2의값, 필드3=필드3의값, …\nWHERE  조건식\n\nex) ROLE테이블에 role_id가 200일 경우 description을 'CTO'로 수정하시오.\n\tupdate ROLE set description = 'CTO' where role_id = 200;\n\n\n- DELETE\nDELETE\nFROM  테이블명\nWHERE  조건식\n\nex) ROLE테이블에서 role_id는 200인 정보를 삭제하시오.\n\tdelete from ROLE where role_id = 200;\n\n<br>\n\n\n\n### DDL(create, alter, drop)\n\n- 테이블 생성\n       create table 테이블명( \n       \t 필드명1 타입 [NULL | NOT NULL][DEFAULT ][AUTO_INCREMENT], \n         필드명2 타입 [NULL | NOT NULL][DEFAULT ][AUTO_INCREMENT], \n         필드명3 타입 [NULL | NOT NULL][DEFAULT ][AUTO_INCREMENT], \n       \t .......... \n         PRIMARY KEY(필드명) \n         );\n\n- 테이블 수정 (컬럼 추가/ 삭제)\n    alter table 테이블명\n    add  필드명 타입 [NULL | NOT NULL][DEFAULT ][AUTO_INCREMENT];\n    alter table 테이블명\n    drop  필드명;\n\n- 테이블 이름 변경\n\talter table  테이블명 rename 변경이름\n\n- 테이블 삭제\n\tdrop table 테이블이름;\n\n\n\n\n<br>\n<br>","slug":"boostcourse-01-db","published":1,"updated":"2022-01-06T14:03:04.369Z","_id":"cky31c9at0000z1rjd3zl5f9p","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"부스트코스\"><a href=\"#부스트코스\" class=\"headerlink\" title=\"부스트코스\"></a>부스트코스</h3><p>웹 백엔드 공부 해보기<br><a href=\"https://www.boostcourse.org/web326/joinLectures/28762\">https://www.boostcourse.org/web326/joinLectures/28762</a><br>인프런 강의를 듣다가 너무 어려워서 부스트코스에서 무료강의인 백엔드 코스를 먼저 들어보기로 하였다.</p>\n<br>\n\n<h3 id=\"데이터-베이스\"><a href=\"#데이터-베이스\" class=\"headerlink\" title=\"데이터 베이스\"></a>데이터 베이스</h3><p>데이터들의 집합체</p>\n<br>\n\n\n<h3 id=\"데이터베이스의-특성\"><a href=\"#데이터베이스의-특성\" class=\"headerlink\" title=\"데이터베이스의 특성\"></a>데이터베이스의 특성</h3><p>실시간 접근성<br>계속적인 변환<br>동시공유성<br>내용참조</p>\n<br>\n\n\n<h3 id=\"DBMS-Database-Management-System\"><a href=\"#DBMS-Database-Management-System\" class=\"headerlink\" title=\"DBMS (Database Management System)\"></a>DBMS (Database Management System)</h3><p>데이터베이스를 관리하는 소프트웨어<br>데이터베이스를 관리, 운영하는 시스템을 의미<br>또한 여러 사용자나 플그램이 데이터를 공유하고 동시에 접근이 가능해야함</p>\n<ul>\n<li>필수 3기능</li>\n</ul>\n<p><strong>정의기능:</strong> 데이터 베이스의 논리적, 물리적 구조를 정의<br><strong>조작기능:</strong> 데이터를 검색, 삭제, 갱신, 삽입, 삭제하는 기능<br><strong>제어기능:</strong> 데이터 베이스의 내용 정확성과 안전성을 유지하도록 제어하는 기능<br>Oracle, SQL Server, MySQL, DB2 등의 상용 또는 공개 DBMS가 있다</p>\n<br>\n\n\n<h3 id=\"DBMS-시스템-장-단점\"><a href=\"#DBMS-시스템-장-단점\" class=\"headerlink\" title=\"DBMS 시스템 장/단점\"></a>DBMS 시스템 장/단점</h3><ul>\n<li><p>장점<br>데이터 중복이 최소화<br>데이터의 일관성 및 무결성 유지<br>데이터 보안 보장</p>\n</li>\n<li><p>단점<br>운영비가 비싸다<br>백업 및 복구에 대한 관리가 복잡<br>부분적 데이터베이스 손실이 전체 시스템을 정지</p>\n</li>\n</ul>\n<br>\n\n<ul>\n<li>DBMS의 특징<br>데이터의 무결성 : 데이터베이스 내부의 데이터는 오류가 있어선 안된다.<br>데이터의 독립성 : 데이터와 그것을 사용하는 응용프로그램은 독립적으로 작동되어야한다.<br>데이터의 중복의 최소성 : 동일한 데이터가 중복되어 저장되는것을 방지한다.<br>데이터의 보안성 : 데이터베이스 내부의 데이터는 아무나 접근할 수 없고 데이터를 소유한 사람이나 접근이 허가된 사람만 사용할 수 있어야한다.<br>데이터의 안전성 : 백업과 복원 기능을 지원함으로 데이터가 깨지는 문제가 발생시 원 상태로 복구가 가능해야한다.</li>\n</ul>\n<br>\n\n\n<ul>\n<li>DBMS의 유형<br>계층형 DBMS<br>망형(네트워크형) DBMS<br>관계형 DBMS<br>객체관계형 DBMS</li>\n</ul>\n<p>우리가 주로 사용하게 될 DBMS는 관계형 데이터 베이스로<br>테이블이라는 최소단위로 구성됨<br>테이블은 릴레이션 엔티티 등으로도 불림<br>테이블은 데이터를 효율적으로 저장하기 위한 구조이다</p>\n<br>\n\n\n\n<h3 id=\"SQL-Structured-Query-Language\"><a href=\"#SQL-Structured-Query-Language\" class=\"headerlink\" title=\"SQL (Structured Query Language)\"></a>SQL (Structured Query Language)</h3><p>SQL은 데이터를 보다 쉽게 검색하고 추가, 삭제, 수정같은 조작을 할 수 있도록 고안된 컴퓨터 언어이다.</p>\n<p>관계형 데이터베이스에서 사용하는 언어<br>데이터를 조작하기 위한 언어로 프로그래밍 언어와는 다르다.<br>국제 표준화 기구에서 표준을 제정한다.<br>(다만 DBMS를 제작하는 회사마다 특징이 있기 때문에 완벽하게 동일하지 않다)<br>대화식 언어이다. 질의를 하고 결과를 얻는 구조<br>다양한 종류의 관계형 데이터 베이스<br>대표적으로 oracle, mySQL, SQL server, MariaDB</p>\n<br>\n\n<h3 id=\"데이터베이스-용어\"><a href=\"#데이터베이스-용어\" class=\"headerlink\" title=\"데이터베이스 용어\"></a>데이터베이스 용어</h3><p>데이터 베이스는 기본적으로 현실세계의 데이터를 컴퓨터 데이터로 옮겨 놓은 공간을 의미</p>\n<p>ex)<br>대상물은 여러가지 정보를 가진다<br>회원이라면 이름 주민번호 주소 전화번호<br>제품이라면 제품명 가격 제조일자<br>이런 정보를 단순하게 저장하는게 아니라 “테이블” 이라는 형식에 맞춰서 저장</p>\n<ul>\n<li>테이블<br>데이터를 저장하기 위한 구조를 표로 표현</li>\n</ul>\n<ul>\n<li>스키마<br>테이블, 뷰 등이 저장되는 저장소<br>데이터 베이스에 저장되는 데이터 구조와 제약조건을 정의<br>보통 오라클에서는 DB 사용자 이름과 동일시 해서 사용</li>\n</ul>\n<ul>\n<li>데이터베이스<br>여러 스키마가 저장되는 공간<br>XE버전은 한번 한개의 데이터 베이스만 운영 가능<br>standard이상 버전은 여러개의 데이터 베이스 운영 가능</li>\n</ul>\n<p>행(로우, 레코드, 튜플) - 실질적인 데이터를 의미<br>열(컬럼, 필드, 속성) -  데이터를 구분하기 위한 특징들을 컬럼이라고 부름</p>\n<p>차수(degree): 속성의 개수<br>기수(cardinality): 튜플의 개수<br>도메인(domain): 속성이 가질 수 있는 값의 범위<br>트랜젝션: 데이터베이스의 상태를 변화시키는 논리적 기능을 수행하기 위한 작업의 단위</p>\n<br>\n\n\n<h3 id=\"데이터-언어-SQL\"><a href=\"#데이터-언어-SQL\" class=\"headerlink\" title=\"데이터 언어 (SQL)\"></a>데이터 언어 (SQL)</h3><ul>\n<li>데이터 정의어 (DDL Data Manipulation Language) : 스키마를 정의하거나, 수정 또는 삭제하기 위해서 사용 (ex INSERT, UPDATE, DELETE, SELECT)</li>\n<li>데이터 조작어(DML Data Definition Language) : 데이터의 삽입 삭제 수정 검색 등의 처리를 요구하기 위해서 사용 (ex CEATE, DROP, ALTER)</li>\n<li>데이터 제어어 (DCL Data Control Language) : 내부적으로 필요한 규칙이나 기법을 정의하기 위해서 사용 (ex GRANT, REVOKE)</li>\n</ul>\n<br>\n\n<h3 id=\"MySQL-설치\"><a href=\"#MySQL-설치\" class=\"headerlink\" title=\"MySQL 설치\"></a>MySQL 설치</h3><p>url 링크 : <a href=\"https://www.mysql.com/downloads/\">https://www.mysql.com/downloads/</a><br>비밀번호는 무조건 1234 (짧게 하는게 최고다)<br>간단한게 최고다,,<br>MySQL은 설치부분에 있어서 어려운 점은 없었다 흐름대로 설치하면 된다.</p>\n<p>환경변수에서 아래의 MySQL 경로를 추가해주었다 (각자의 경로가 다를 수 있음)<br>C:\\Program Files\\MySQL\\MySQL Server 8.0\\bin</p>\n<br>\n\n<h3 id=\"서버-실행-확인\"><a href=\"#서버-실행-확인\" class=\"headerlink\" title=\"서버 실행 확인\"></a>서버 실행 확인</h3><p>서비스라고 검색 -&gt; MySQL 찾기<br><img src=\"/images/boostcourse_01/1.PNG\"></p>\n<p>-&gt; 서비스가 실행중임을 확인할 수 있다<br>MySQL이 동작하지 않는다면 해당 서비스에서 실행중 이라고 표시되는지 확인해보자</p>\n<br>\n\n<h3 id=\"MySQL-서버-종료하기\"><a href=\"#MySQL-서버-종료하기\" class=\"headerlink\" title=\"MySQL 서버 종료하기\"></a>MySQL 서버 종료하기</h3><p>서비스에서 MySQL 우클릭 -&gt; 중지<br>MySQL 서버 정지 됨<br>윈도우가 실행될때 자동으로 실행되길 원하지 않는다면, 시작 유형 “자동”을 수동으로 변경한 후 “확인”버튼을 클릭<br>이 경우 매번 시작을 눌러야 서버가 실행된다.</p>\n<p>DBMS에 많은 사람들이 동시에 접속해서 사용하는데<br>이때 서버가 종료된다면데이터가 날아가는 불상사가 생기거나, 필요한 데이터를 전달 받지 못하여 여러 사람이 동일한 데이터에<br>접근할 수 없는 상황이 발생한다.</p>\n<br>\n\n<h3 id=\"Database-생성하기\"><a href=\"#Database-생성하기\" class=\"headerlink\" title=\"Database 생성하기\"></a>Database 생성하기</h3><p>cmd 창에서 실행해보자</p>\n<p>MySQL 관리자 계정인 root로 데이터베이스 관리 시스템에 접속하겠다는 것<br>    mysql -uroot -p</p>\n<p><img src=\"/images/boostcourse_01/2.PNG\"></p>\n<br>\n\n<ul>\n<li>connecdb 데이터 베이스 생성</li>\n</ul>\n<pre><code>create database connectdb;\n</code></pre>\n<ul>\n<li>권한주기<br>Database를 생성했다면, 해당 데이터베이스를 사용하는 계정을 생성해야한다.<br>또한 해당 계정이 데이터베이스를 이용할 수 있는 권한을 줘야한다.<br>아래와 같은 명령을 이용해서 사용자 생성과 권한을 줄 수 있다.<br>db이름 뒤의 *는 모든 권한을 의미<br>@’%’는 어떤 클라이언트에서든 접근 가능하다는 의미<br>@’localhost’는 해당 컴퓨터에서만 접근 가능하다는 의미<br>fush privileges는 DBMS에게 적용을 하라는 의미이므로 반드시 실행해야함</li>\n</ul>\n<ul>\n<li><p>사용자 계정이름은 connectuser, 암호는 connect123!@#으로 설정</p>\n<p>  grant all privileges on connectdb.* to connectuser@’localhost’ identified by ‘connect123!@#’;</p>\n</li>\n</ul>\n<p>그런데 여기서 에러가 났다</p>\n<pre><code>ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#39;identified by &#39;connect123!@#&#39;&#39; at line 1\n</code></pre>\n<p>오타가 있는지 수십번을 확인한 후<br>찾아보니 MySQL8부터는 grant로 user 생성이 불가능</p>\n<p>아래 방밥으로 해결</p>\n<pre><code>CREATE USER connectuser@localhost IDENTIFIED BY &#39;connect123!@#&#39;;\nGRANT ALL PRIVILEGES ON connectdb.* TO &#39;connectuser&#39;@&#39;localhost&#39;;\nFLUSH PRIVILEGES:\n</code></pre>\n<br>\n\n\n<h3 id=\"Database에-접속하기\"><a href=\"#Database에-접속하기\" class=\"headerlink\" title=\"Database에 접속하기\"></a>Database에 접속하기</h3><pre><code>mysql -h호스트명 -uDB계정명 -p 데이터베이스이름\nmysql -h127.0.0.1 -uconnectuser -p connectdb\n\nmysql -uconnectuser -p connectdb\n</code></pre>\n<br>\n\n\n<h3 id=\"SQL-입력\"><a href=\"#SQL-입력\" class=\"headerlink\" title=\"SQL 입력\"></a>SQL 입력</h3><ul>\n<li>키워드는 대소문자를 구분하지 않는다</li>\n<li>여러문장을 한줄에 연속으로 입력 가능</li>\n<li>라인으로 구분하지 않고, semicolon(;)으로 구문</li>\n<li>\\c -&gt; 긴 쿼리를 작성하다 중간에 취소해야하는 경우 붙여준다</li>\n</ul>\n<br>\n\n\n\n<h3 id=\"Database-종료\"><a href=\"#Database-종료\" class=\"headerlink\" title=\"Database 종료\"></a>Database 종료</h3><pre><code>quit\nexit\n</code></pre>\n<br>\n\n\n<h3 id=\"현재-날짜와-버전-확인\"><a href=\"#현재-날짜와-버전-확인\" class=\"headerlink\" title=\"현재 날짜와 버전 확인\"></a>현재 날짜와 버전 확인</h3><pre><code>select version(), current_date;\n</code></pre>\n<br>\n\n\n\n<h3 id=\"DBMS에-존재하는-데이터베이스-확인\"><a href=\"#DBMS에-존재하는-데이터베이스-확인\" class=\"headerlink\" title=\"DBMS에 존재하는 데이터베이스 확인\"></a>DBMS에 존재하는 데이터베이스 확인</h3><pre><code>show database\n</code></pre>\n<p>현재 서버에 존재하는 데이터베이스를 찾아보기 위해서 SHOW statement를 사용</p>\n<br>\n\n\n<h3 id=\"사용중인-데이터베이스-전환하기\"><a href=\"#사용중인-데이터베이스-전환하기\" class=\"headerlink\" title=\"사용중인 데이터베이스 전환하기\"></a>사용중인 데이터베이스 전환하기</h3><p>Database를 선택하기 위해 ‘use’ command 사용:<br>    use mydb;<br>데이터 베이스를 전환하려면, 이미 데이터 베이스가 존재해야하며 현재 접속중인 계정이<br>해당 데이터 베이스를 사용할 수 있는 권한이 있어야한다. </p>\n<br>\n\n\n<h3 id=\"테이블-Table\"><a href=\"#테이블-Table\" class=\"headerlink\" title=\"테이블 (Table)\"></a>테이블 (Table)</h3><p>데이터를 저장하는 공간 </p>\n<pre><code>마이크로소프트의 엑셀(Excel)을 실행하면 표가 나옵니다. 이러한 표에 각종 값을 저장할 수 있습니다.\n데이터베이스도 엑셀의 표와 유사한 테이블을 가질 수 있습니다.\n엑셀과 다른 점은 데이터베이스를 생성해도 테이블은 존재하지 않는다는 것입니다.\n테이블을 사용하려면 테이블을 생성하는 SQL을 사용해야 합니다.\n그리고, 테이블에 값을 저장하려면 저장하기 위한 SQL을 사용해야 합니다.\n</code></pre>\n<br>\n\n\n\n<p>###SQL연습을 위한 테이블 생성과 값의 저장<br>바탕화면에 data 폴더를 만들고 examples.sql 파일을 다운받았다<br>mysql을 종료하고 (quit)<br>data 디렉터리로 이동 한 후 아래 명령문을 입력</p>\n<pre><code>mysql   -uconnectuser  -p  connectdb   &lt;  examples.sql\n</code></pre>\n<p>다시 mysql 로그인</p>\n<pre><code>mysql -uconnectuser -p  connectdb\n</code></pre>\n<p>현재 데이터베이스에 존재하는 테이블 목록 확인하기<br>    show tables</p>\n<p>테이블 구조를 확인하기 위한 DESCRIBE 명령<br>    desc EMPLOYEE;</p>\n<p><img src=\"/images/boostcourse_01/3.PNG\"></p>\n<br>\n\n\n<h3 id=\"데이터-조작어의-종류\"><a href=\"#데이터-조작어의-종류\" class=\"headerlink\" title=\"데이터 조작어의 종류\"></a>데이터 조작어의 종류</h3><p>SELECT 검색<br>INSERT 삽입<br>UPDATE 수정<br>DELETE 삭제</p>\n<ul>\n<li><p>SELECT 구문의 기본 문형<br>  SELECT 칼럼명 FROM 테이블명;</p>\n</li>\n<li><p>컬럼에 Alias 부여하기<br>컬럼에 대한 ALIAS(별칭)을 부여해서 나타내는 칼럼의 HEADING을 변경할 수 있다.</p>\n</li>\n</ul>\n<p><img src=\"/images/boostcourse_01/4.PNG\"></p>\n<p>예제 : employee 테이블에서 직원의 사번(empno), 이름(name), 직업(job)을 출력하시오.</p>\n<pre><code>select empno as 사번, name as 이름, job as 직업 from employee;\n</code></pre>\n<br>\n\n<ul>\n<li><p>문자열 결합함수 concat</p>\n<p>  SELECT concat( empno, ‘-‘, deptno) AS ‘사번-부서번호’ FROM employee;</p>\n</li>\n</ul>\n<p><img src=\"/images/boostcourse_01/5.PNG\"></p>\n<br>\n\n<ul>\n<li>중복행 제거 distinct<br>  select distinct deptno from employee;</li>\n</ul>\n<br>\n\n<ul>\n<li>정렬하기 order by<br>  select empno, name, job from employee order by name;</li>\n</ul>\n<br>\n\n<ul>\n<li>특정 행 검색 where절<br>employee 테이블에서 고용일(hiredate)이 1981년 이전의 사원이름과 고용일을 출력하시오.<br>  select name, hiredate from employee where hiredate &lt; ‘1981-01-01’;</li>\n</ul>\n<p>employee 테이블에서 부서번호가 30인 사원이름과 부서번호를 출력하시오.<br>    select name, deptno from employee where deptno = 30;</p>\n<ul>\n<li><p>IN<br>employee 테이블에서 부서번호가 10또는 30인 사원이름과 부서번호를 출력하시오.<br>  select name, deptno from employee where deptno in (10, 30);</p>\n</li>\n<li><p>LIKE 키워드<br>와일드 카드를 사용하여 특정 문자를 포함한 값에 대한 조건을 처리<br>%는 0에서부터 여러개의 문자열을 나타냄<br>_는 단 하나의 문자를 나타내는 와일드 카드</p>\n</li>\n</ul>\n<p>employee 테이블에서 이름에 ‘A’가 포함된 사원의 이름(name)과 직업(job)을 출력하시오.<br>    select name, job from employee where name like ‘%A%’;    </p>\n<ul>\n<li>INSERT<br>INSERT INTO 테이블명(필드1, 필드2, 필드3, 필드4, … ) VALUES ( 필드1의 값, 필드2의 값, 필드3의 값, 필드4의 값, … )</li>\n</ul>\n<p>ex) ROLE테이블에 role_id는 200, description에는 ‘CEO’로 한건의 데이터를 저장하시오.<br>    insert into ROLE (role_id, description) values ( 200, ‘CEO’);</p>\n<ul>\n<li>UPDATE<br>UPDATE  테이블명<br>SET  필드1=필드1의값, 필드2=필드2의값, 필드3=필드3의값, …<br>WHERE  조건식</li>\n</ul>\n<p>ex) ROLE테이블에 role_id가 200일 경우 description을 ‘CTO’로 수정하시오.<br>    update ROLE set description = ‘CTO’ where role_id = 200;</p>\n<ul>\n<li>DELETE<br>DELETE<br>FROM  테이블명<br>WHERE  조건식</li>\n</ul>\n<p>ex) ROLE테이블에서 role_id는 200인 정보를 삭제하시오.<br>    delete from ROLE where role_id = 200;</p>\n<br>\n\n\n\n<h3 id=\"DDL-create-alter-drop\"><a href=\"#DDL-create-alter-drop\" class=\"headerlink\" title=\"DDL(create, alter, drop)\"></a>DDL(create, alter, drop)</h3><ul>\n<li><p>테이블 생성</p>\n<pre><code> create table 테이블명( \n      필드명1 타입 [NULL | NOT NULL][DEFAULT ][AUTO_INCREMENT], \n   필드명2 타입 [NULL | NOT NULL][DEFAULT ][AUTO_INCREMENT], \n   필드명3 타입 [NULL | NOT NULL][DEFAULT ][AUTO_INCREMENT], \n      .......... \n   PRIMARY KEY(필드명) \n   );\n</code></pre>\n</li>\n<li><p>테이블 수정 (컬럼 추가/ 삭제)<br>  alter table 테이블명<br>  add  필드명 타입 [NULL | NOT NULL][DEFAULT ][AUTO_INCREMENT];<br>  alter table 테이블명<br>  drop  필드명;</p>\n</li>\n<li><p>테이블 이름 변경<br>  alter table  테이블명 rename 변경이름</p>\n</li>\n<li><p>테이블 삭제<br>  drop table 테이블이름;</p>\n</li>\n</ul>\n<br>\n<br>","site":{"data":{}},"excerpt":"부스트코스\n웹 백엔드 공부 해보기\nhttps://www.boostcourse.org/web326/joinLectures/28762\n인프런 강의를 듣다가 너무 어려워서 부스트코스에서 무료강의인 백엔드 코스를 먼저 들어보기로 하였다.\n\n\n데이터 베이스\n데이터들의 집합체\n\n\n데이터베이스의 특성\n실시간 접근성\n계속적인 변환\n동시공유성\n내용참조\n\n\nDBMS (Database Management System)\n데이터베이스를 관리하는 소프트웨어\n데이터베이스를 관리, 운영하는 시스템을 의미\n또한 여러 사용자나 플그램이 데이터를 공유하고 동시에 접","more":"<h3 id=\"부스트코스\"><a href=\"#부스트코스\" class=\"headerlink\" title=\"부스트코스\"></a>부스트코스</h3><p>웹 백엔드 공부 해보기<br><a href=\"https://www.boostcourse.org/web326/joinLectures/28762\">https://www.boostcourse.org/web326/joinLectures/28762</a><br>인프런 강의를 듣다가 너무 어려워서 부스트코스에서 무료강의인 백엔드 코스를 먼저 들어보기로 하였다.</p>\n<br>\n\n<h3 id=\"데이터-베이스\"><a href=\"#데이터-베이스\" class=\"headerlink\" title=\"데이터 베이스\"></a>데이터 베이스</h3><p>데이터들의 집합체</p>\n<br>\n\n\n<h3 id=\"데이터베이스의-특성\"><a href=\"#데이터베이스의-특성\" class=\"headerlink\" title=\"데이터베이스의 특성\"></a>데이터베이스의 특성</h3><p>실시간 접근성<br>계속적인 변환<br>동시공유성<br>내용참조</p>\n<br>\n\n\n<h3 id=\"DBMS-Database-Management-System\"><a href=\"#DBMS-Database-Management-System\" class=\"headerlink\" title=\"DBMS (Database Management System)\"></a>DBMS (Database Management System)</h3><p>데이터베이스를 관리하는 소프트웨어<br>데이터베이스를 관리, 운영하는 시스템을 의미<br>또한 여러 사용자나 플그램이 데이터를 공유하고 동시에 접근이 가능해야함</p>\n<ul>\n<li>필수 3기능</li>\n</ul>\n<p><strong>정의기능:</strong> 데이터 베이스의 논리적, 물리적 구조를 정의<br><strong>조작기능:</strong> 데이터를 검색, 삭제, 갱신, 삽입, 삭제하는 기능<br><strong>제어기능:</strong> 데이터 베이스의 내용 정확성과 안전성을 유지하도록 제어하는 기능<br>Oracle, SQL Server, MySQL, DB2 등의 상용 또는 공개 DBMS가 있다</p>\n<br>\n\n\n<h3 id=\"DBMS-시스템-장-단점\"><a href=\"#DBMS-시스템-장-단점\" class=\"headerlink\" title=\"DBMS 시스템 장/단점\"></a>DBMS 시스템 장/단점</h3><ul>\n<li><p>장점<br>데이터 중복이 최소화<br>데이터의 일관성 및 무결성 유지<br>데이터 보안 보장</p>\n</li>\n<li><p>단점<br>운영비가 비싸다<br>백업 및 복구에 대한 관리가 복잡<br>부분적 데이터베이스 손실이 전체 시스템을 정지</p>\n</li>\n</ul>\n<br>\n\n<ul>\n<li>DBMS의 특징<br>데이터의 무결성 : 데이터베이스 내부의 데이터는 오류가 있어선 안된다.<br>데이터의 독립성 : 데이터와 그것을 사용하는 응용프로그램은 독립적으로 작동되어야한다.<br>데이터의 중복의 최소성 : 동일한 데이터가 중복되어 저장되는것을 방지한다.<br>데이터의 보안성 : 데이터베이스 내부의 데이터는 아무나 접근할 수 없고 데이터를 소유한 사람이나 접근이 허가된 사람만 사용할 수 있어야한다.<br>데이터의 안전성 : 백업과 복원 기능을 지원함으로 데이터가 깨지는 문제가 발생시 원 상태로 복구가 가능해야한다.</li>\n</ul>\n<br>\n\n\n<ul>\n<li>DBMS의 유형<br>계층형 DBMS<br>망형(네트워크형) DBMS<br>관계형 DBMS<br>객체관계형 DBMS</li>\n</ul>\n<p>우리가 주로 사용하게 될 DBMS는 관계형 데이터 베이스로<br>테이블이라는 최소단위로 구성됨<br>테이블은 릴레이션 엔티티 등으로도 불림<br>테이블은 데이터를 효율적으로 저장하기 위한 구조이다</p>\n<br>\n\n\n\n<h3 id=\"SQL-Structured-Query-Language\"><a href=\"#SQL-Structured-Query-Language\" class=\"headerlink\" title=\"SQL (Structured Query Language)\"></a>SQL (Structured Query Language)</h3><p>SQL은 데이터를 보다 쉽게 검색하고 추가, 삭제, 수정같은 조작을 할 수 있도록 고안된 컴퓨터 언어이다.</p>\n<p>관계형 데이터베이스에서 사용하는 언어<br>데이터를 조작하기 위한 언어로 프로그래밍 언어와는 다르다.<br>국제 표준화 기구에서 표준을 제정한다.<br>(다만 DBMS를 제작하는 회사마다 특징이 있기 때문에 완벽하게 동일하지 않다)<br>대화식 언어이다. 질의를 하고 결과를 얻는 구조<br>다양한 종류의 관계형 데이터 베이스<br>대표적으로 oracle, mySQL, SQL server, MariaDB</p>\n<br>\n\n<h3 id=\"데이터베이스-용어\"><a href=\"#데이터베이스-용어\" class=\"headerlink\" title=\"데이터베이스 용어\"></a>데이터베이스 용어</h3><p>데이터 베이스는 기본적으로 현실세계의 데이터를 컴퓨터 데이터로 옮겨 놓은 공간을 의미</p>\n<p>ex)<br>대상물은 여러가지 정보를 가진다<br>회원이라면 이름 주민번호 주소 전화번호<br>제품이라면 제품명 가격 제조일자<br>이런 정보를 단순하게 저장하는게 아니라 “테이블” 이라는 형식에 맞춰서 저장</p>\n<ul>\n<li>테이블<br>데이터를 저장하기 위한 구조를 표로 표현</li>\n</ul>\n<ul>\n<li>스키마<br>테이블, 뷰 등이 저장되는 저장소<br>데이터 베이스에 저장되는 데이터 구조와 제약조건을 정의<br>보통 오라클에서는 DB 사용자 이름과 동일시 해서 사용</li>\n</ul>\n<ul>\n<li>데이터베이스<br>여러 스키마가 저장되는 공간<br>XE버전은 한번 한개의 데이터 베이스만 운영 가능<br>standard이상 버전은 여러개의 데이터 베이스 운영 가능</li>\n</ul>\n<p>행(로우, 레코드, 튜플) - 실질적인 데이터를 의미<br>열(컬럼, 필드, 속성) -  데이터를 구분하기 위한 특징들을 컬럼이라고 부름</p>\n<p>차수(degree): 속성의 개수<br>기수(cardinality): 튜플의 개수<br>도메인(domain): 속성이 가질 수 있는 값의 범위<br>트랜젝션: 데이터베이스의 상태를 변화시키는 논리적 기능을 수행하기 위한 작업의 단위</p>\n<br>\n\n\n<h3 id=\"데이터-언어-SQL\"><a href=\"#데이터-언어-SQL\" class=\"headerlink\" title=\"데이터 언어 (SQL)\"></a>데이터 언어 (SQL)</h3><ul>\n<li>데이터 정의어 (DDL Data Manipulation Language) : 스키마를 정의하거나, 수정 또는 삭제하기 위해서 사용 (ex INSERT, UPDATE, DELETE, SELECT)</li>\n<li>데이터 조작어(DML Data Definition Language) : 데이터의 삽입 삭제 수정 검색 등의 처리를 요구하기 위해서 사용 (ex CEATE, DROP, ALTER)</li>\n<li>데이터 제어어 (DCL Data Control Language) : 내부적으로 필요한 규칙이나 기법을 정의하기 위해서 사용 (ex GRANT, REVOKE)</li>\n</ul>\n<br>\n\n<h3 id=\"MySQL-설치\"><a href=\"#MySQL-설치\" class=\"headerlink\" title=\"MySQL 설치\"></a>MySQL 설치</h3><p>url 링크 : <a href=\"https://www.mysql.com/downloads/\">https://www.mysql.com/downloads/</a><br>비밀번호는 무조건 1234 (짧게 하는게 최고다)<br>간단한게 최고다,,<br>MySQL은 설치부분에 있어서 어려운 점은 없었다 흐름대로 설치하면 된다.</p>\n<p>환경변수에서 아래의 MySQL 경로를 추가해주었다 (각자의 경로가 다를 수 있음)<br>C:\\Program Files\\MySQL\\MySQL Server 8.0\\bin</p>\n<br>\n\n<h3 id=\"서버-실행-확인\"><a href=\"#서버-실행-확인\" class=\"headerlink\" title=\"서버 실행 확인\"></a>서버 실행 확인</h3><p>서비스라고 검색 -&gt; MySQL 찾기<br><img src=\"/images/boostcourse_01/1.PNG\"></p>\n<p>-&gt; 서비스가 실행중임을 확인할 수 있다<br>MySQL이 동작하지 않는다면 해당 서비스에서 실행중 이라고 표시되는지 확인해보자</p>\n<br>\n\n<h3 id=\"MySQL-서버-종료하기\"><a href=\"#MySQL-서버-종료하기\" class=\"headerlink\" title=\"MySQL 서버 종료하기\"></a>MySQL 서버 종료하기</h3><p>서비스에서 MySQL 우클릭 -&gt; 중지<br>MySQL 서버 정지 됨<br>윈도우가 실행될때 자동으로 실행되길 원하지 않는다면, 시작 유형 “자동”을 수동으로 변경한 후 “확인”버튼을 클릭<br>이 경우 매번 시작을 눌러야 서버가 실행된다.</p>\n<p>DBMS에 많은 사람들이 동시에 접속해서 사용하는데<br>이때 서버가 종료된다면데이터가 날아가는 불상사가 생기거나, 필요한 데이터를 전달 받지 못하여 여러 사람이 동일한 데이터에<br>접근할 수 없는 상황이 발생한다.</p>\n<br>\n\n<h3 id=\"Database-생성하기\"><a href=\"#Database-생성하기\" class=\"headerlink\" title=\"Database 생성하기\"></a>Database 생성하기</h3><p>cmd 창에서 실행해보자</p>\n<p>MySQL 관리자 계정인 root로 데이터베이스 관리 시스템에 접속하겠다는 것<br>    mysql -uroot -p</p>\n<p><img src=\"/images/boostcourse_01/2.PNG\"></p>\n<br>\n\n<ul>\n<li>connecdb 데이터 베이스 생성</li>\n</ul>\n<pre><code>create database connectdb;\n</code></pre>\n<ul>\n<li>권한주기<br>Database를 생성했다면, 해당 데이터베이스를 사용하는 계정을 생성해야한다.<br>또한 해당 계정이 데이터베이스를 이용할 수 있는 권한을 줘야한다.<br>아래와 같은 명령을 이용해서 사용자 생성과 권한을 줄 수 있다.<br>db이름 뒤의 *는 모든 권한을 의미<br>@’%’는 어떤 클라이언트에서든 접근 가능하다는 의미<br>@’localhost’는 해당 컴퓨터에서만 접근 가능하다는 의미<br>fush privileges는 DBMS에게 적용을 하라는 의미이므로 반드시 실행해야함</li>\n</ul>\n<ul>\n<li><p>사용자 계정이름은 connectuser, 암호는 connect123!@#으로 설정</p>\n<p>  grant all privileges on connectdb.* to connectuser@’localhost’ identified by ‘connect123!@#’;</p>\n</li>\n</ul>\n<p>그런데 여기서 에러가 났다</p>\n<pre><code>ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#39;identified by &#39;connect123!@#&#39;&#39; at line 1\n</code></pre>\n<p>오타가 있는지 수십번을 확인한 후<br>찾아보니 MySQL8부터는 grant로 user 생성이 불가능</p>\n<p>아래 방밥으로 해결</p>\n<pre><code>CREATE USER connectuser@localhost IDENTIFIED BY &#39;connect123!@#&#39;;\nGRANT ALL PRIVILEGES ON connectdb.* TO &#39;connectuser&#39;@&#39;localhost&#39;;\nFLUSH PRIVILEGES:\n</code></pre>\n<br>\n\n\n<h3 id=\"Database에-접속하기\"><a href=\"#Database에-접속하기\" class=\"headerlink\" title=\"Database에 접속하기\"></a>Database에 접속하기</h3><pre><code>mysql -h호스트명 -uDB계정명 -p 데이터베이스이름\nmysql -h127.0.0.1 -uconnectuser -p connectdb\n\nmysql -uconnectuser -p connectdb\n</code></pre>\n<br>\n\n\n<h3 id=\"SQL-입력\"><a href=\"#SQL-입력\" class=\"headerlink\" title=\"SQL 입력\"></a>SQL 입력</h3><ul>\n<li>키워드는 대소문자를 구분하지 않는다</li>\n<li>여러문장을 한줄에 연속으로 입력 가능</li>\n<li>라인으로 구분하지 않고, semicolon(;)으로 구문</li>\n<li>\\c -&gt; 긴 쿼리를 작성하다 중간에 취소해야하는 경우 붙여준다</li>\n</ul>\n<br>\n\n\n\n<h3 id=\"Database-종료\"><a href=\"#Database-종료\" class=\"headerlink\" title=\"Database 종료\"></a>Database 종료</h3><pre><code>quit\nexit\n</code></pre>\n<br>\n\n\n<h3 id=\"현재-날짜와-버전-확인\"><a href=\"#현재-날짜와-버전-확인\" class=\"headerlink\" title=\"현재 날짜와 버전 확인\"></a>현재 날짜와 버전 확인</h3><pre><code>select version(), current_date;\n</code></pre>\n<br>\n\n\n\n<h3 id=\"DBMS에-존재하는-데이터베이스-확인\"><a href=\"#DBMS에-존재하는-데이터베이스-확인\" class=\"headerlink\" title=\"DBMS에 존재하는 데이터베이스 확인\"></a>DBMS에 존재하는 데이터베이스 확인</h3><pre><code>show database\n</code></pre>\n<p>현재 서버에 존재하는 데이터베이스를 찾아보기 위해서 SHOW statement를 사용</p>\n<br>\n\n\n<h3 id=\"사용중인-데이터베이스-전환하기\"><a href=\"#사용중인-데이터베이스-전환하기\" class=\"headerlink\" title=\"사용중인 데이터베이스 전환하기\"></a>사용중인 데이터베이스 전환하기</h3><p>Database를 선택하기 위해 ‘use’ command 사용:<br>    use mydb;<br>데이터 베이스를 전환하려면, 이미 데이터 베이스가 존재해야하며 현재 접속중인 계정이<br>해당 데이터 베이스를 사용할 수 있는 권한이 있어야한다. </p>\n<br>\n\n\n<h3 id=\"테이블-Table\"><a href=\"#테이블-Table\" class=\"headerlink\" title=\"테이블 (Table)\"></a>테이블 (Table)</h3><p>데이터를 저장하는 공간 </p>\n<pre><code>마이크로소프트의 엑셀(Excel)을 실행하면 표가 나옵니다. 이러한 표에 각종 값을 저장할 수 있습니다.\n데이터베이스도 엑셀의 표와 유사한 테이블을 가질 수 있습니다.\n엑셀과 다른 점은 데이터베이스를 생성해도 테이블은 존재하지 않는다는 것입니다.\n테이블을 사용하려면 테이블을 생성하는 SQL을 사용해야 합니다.\n그리고, 테이블에 값을 저장하려면 저장하기 위한 SQL을 사용해야 합니다.\n</code></pre>\n<br>\n\n\n\n<p>###SQL연습을 위한 테이블 생성과 값의 저장<br>바탕화면에 data 폴더를 만들고 examples.sql 파일을 다운받았다<br>mysql을 종료하고 (quit)<br>data 디렉터리로 이동 한 후 아래 명령문을 입력</p>\n<pre><code>mysql   -uconnectuser  -p  connectdb   &lt;  examples.sql\n</code></pre>\n<p>다시 mysql 로그인</p>\n<pre><code>mysql -uconnectuser -p  connectdb\n</code></pre>\n<p>현재 데이터베이스에 존재하는 테이블 목록 확인하기<br>    show tables</p>\n<p>테이블 구조를 확인하기 위한 DESCRIBE 명령<br>    desc EMPLOYEE;</p>\n<p><img src=\"/images/boostcourse_01/3.PNG\"></p>\n<br>\n\n\n<h3 id=\"데이터-조작어의-종류\"><a href=\"#데이터-조작어의-종류\" class=\"headerlink\" title=\"데이터 조작어의 종류\"></a>데이터 조작어의 종류</h3><p>SELECT 검색<br>INSERT 삽입<br>UPDATE 수정<br>DELETE 삭제</p>\n<ul>\n<li><p>SELECT 구문의 기본 문형<br>  SELECT 칼럼명 FROM 테이블명;</p>\n</li>\n<li><p>컬럼에 Alias 부여하기<br>컬럼에 대한 ALIAS(별칭)을 부여해서 나타내는 칼럼의 HEADING을 변경할 수 있다.</p>\n</li>\n</ul>\n<p><img src=\"/images/boostcourse_01/4.PNG\"></p>\n<p>예제 : employee 테이블에서 직원의 사번(empno), 이름(name), 직업(job)을 출력하시오.</p>\n<pre><code>select empno as 사번, name as 이름, job as 직업 from employee;\n</code></pre>\n<br>\n\n<ul>\n<li><p>문자열 결합함수 concat</p>\n<p>  SELECT concat( empno, ‘-‘, deptno) AS ‘사번-부서번호’ FROM employee;</p>\n</li>\n</ul>\n<p><img src=\"/images/boostcourse_01/5.PNG\"></p>\n<br>\n\n<ul>\n<li>중복행 제거 distinct<br>  select distinct deptno from employee;</li>\n</ul>\n<br>\n\n<ul>\n<li>정렬하기 order by<br>  select empno, name, job from employee order by name;</li>\n</ul>\n<br>\n\n<ul>\n<li>특정 행 검색 where절<br>employee 테이블에서 고용일(hiredate)이 1981년 이전의 사원이름과 고용일을 출력하시오.<br>  select name, hiredate from employee where hiredate &lt; ‘1981-01-01’;</li>\n</ul>\n<p>employee 테이블에서 부서번호가 30인 사원이름과 부서번호를 출력하시오.<br>    select name, deptno from employee where deptno = 30;</p>\n<ul>\n<li><p>IN<br>employee 테이블에서 부서번호가 10또는 30인 사원이름과 부서번호를 출력하시오.<br>  select name, deptno from employee where deptno in (10, 30);</p>\n</li>\n<li><p>LIKE 키워드<br>와일드 카드를 사용하여 특정 문자를 포함한 값에 대한 조건을 처리<br>%는 0에서부터 여러개의 문자열을 나타냄<br>_는 단 하나의 문자를 나타내는 와일드 카드</p>\n</li>\n</ul>\n<p>employee 테이블에서 이름에 ‘A’가 포함된 사원의 이름(name)과 직업(job)을 출력하시오.<br>    select name, job from employee where name like ‘%A%’;    </p>\n<ul>\n<li>INSERT<br>INSERT INTO 테이블명(필드1, 필드2, 필드3, 필드4, … ) VALUES ( 필드1의 값, 필드2의 값, 필드3의 값, 필드4의 값, … )</li>\n</ul>\n<p>ex) ROLE테이블에 role_id는 200, description에는 ‘CEO’로 한건의 데이터를 저장하시오.<br>    insert into ROLE (role_id, description) values ( 200, ‘CEO’);</p>\n<ul>\n<li>UPDATE<br>UPDATE  테이블명<br>SET  필드1=필드1의값, 필드2=필드2의값, 필드3=필드3의값, …<br>WHERE  조건식</li>\n</ul>\n<p>ex) ROLE테이블에 role_id가 200일 경우 description을 ‘CTO’로 수정하시오.<br>    update ROLE set description = ‘CTO’ where role_id = 200;</p>\n<ul>\n<li>DELETE<br>DELETE<br>FROM  테이블명<br>WHERE  조건식</li>\n</ul>\n<p>ex) ROLE테이블에서 role_id는 200인 정보를 삭제하시오.<br>    delete from ROLE where role_id = 200;</p>\n<br>\n\n\n\n<h3 id=\"DDL-create-alter-drop\"><a href=\"#DDL-create-alter-drop\" class=\"headerlink\" title=\"DDL(create, alter, drop)\"></a>DDL(create, alter, drop)</h3><ul>\n<li><p>테이블 생성</p>\n<pre><code> create table 테이블명( \n      필드명1 타입 [NULL | NOT NULL][DEFAULT ][AUTO_INCREMENT], \n   필드명2 타입 [NULL | NOT NULL][DEFAULT ][AUTO_INCREMENT], \n   필드명3 타입 [NULL | NOT NULL][DEFAULT ][AUTO_INCREMENT], \n      .......... \n   PRIMARY KEY(필드명) \n   );\n</code></pre>\n</li>\n<li><p>테이블 수정 (컬럼 추가/ 삭제)<br>  alter table 테이블명<br>  add  필드명 타입 [NULL | NOT NULL][DEFAULT ][AUTO_INCREMENT];<br>  alter table 테이블명<br>  drop  필드명;</p>\n</li>\n<li><p>테이블 이름 변경<br>  alter table  테이블명 rename 변경이름</p>\n</li>\n<li><p>테이블 삭제<br>  drop table 테이블이름;</p>\n</li>\n</ul>\n<br>\n<br>"},{"title":"Maven | 부스트코스 백엔드 02","date":"2022-01-02T15:00:00.000Z","toc":true,"_content":"\n### Maven\n---\nMaven은 지금까지 애플리케이션을 개발하기 위해 반복적으로 진행해왔던 작업들을 지원하기 위하여 등장한 도구이다.\n\nMaven을 사용하면 빌드(Build), 패키징, 문서화, 테스트와 테스트 리포팅, git, 의존성관리, svn등과 같은 형상관리서버와 연동(SCMs), 배포 등의 작업을 손쉽게 할 수 있습니다.\n\n### COC(Convention over Configuration)\n---\nCoC란 일종의 관습을 말하는데, \n예를 들자면 프로그램의 소스파일은 어떤 위치에 있어야 하고, 소스가 컴파일된 파일들은 어떤 위치에 있어야 하고 등을 미리 정해놨다는 것이다.\n\n이 말은 관습에 이미 익숙한 사용자는 쉽게 Maven을 사용할 수 있는데, \n관습에 익숙하지 않은 사용자는 이러한 제약사항에 대해서 심한 거부감을 느낄 수 있다.\n\nMaven을 사용한다는 것은 어쩌면 이러한 관습 즉 CoC에 대해서 알아나가는 것이라고도 말할 수 있습니다. \n\n\n\n### Maven의 장점\n---\nMaven을 사용할 경우, 굉장히 편리한 점들이 많습니다.\n\n많은 사람이 손꼽는 장점 중에는 편리한 의존성 라이브러리 관리가 있습니다.\n\n앞에서 JSTL을 학습할 때, 몇 가지 파일을 다운로드 하여 /WEB-INF/lib폴더에 복사하여 사용했었습니다.\n\n관련된 라이브러리가 많아질수록 이러한 방식은 상당히 불편해집니다.\n\nMaven을 사용하면 설정 파일에 몇 줄 적어줌으로써 직접 다운로드 받거나 하는 것을 하지 않아도 라이브러리를 사용할 수 있습니다.\n\n프로젝트에 참여하는 개발자가 많아지게 되면, 프로젝트를 빌드하는 방법에 대하여 가이드하는 것도 쉬운 일이 아닙니다.\n\nMaven을 사용하게 되면 Maven에 설정한 대로 모든 개발자가 일관된 방식으로 빌드를 수행할 수 있게 됩니다.\n\nMaven은 또한 다양한 플러그인을 제공해줘서, 굉장히 많은 일들을 자동화시킬 수 있습니다.\n\n\n### Maven 기본\n---\nArchetype을 이용하여 Maven 기반 프로젝트를 생성할 경우 생성된 프로젝트 하위에 pom.xml 파일이 생성됩니다.\npom.xml 파일을 살펴보면 다음과 같습니다. \n\n```java\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <groupId>kr.or.connect</groupId>\n    <artifactId>examples</artifactId>\n    <packaging>jar</packaging>\n    <version>1.0-SNAPSHOT</version>\n    <name>mysample</name>\n    <url>http://maven.apache.org</url>\n    <dependencies>\n        <dependency>\n            <groupId>junit</groupId>\n            <artifactId>junit</artifactId>\n            <version>3.8.1</version>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n</project>\n\n```\n각각의 태그의 의미는 다음과 같습니다.\n\nproject : pom.xml 파일의 최상위 루트 엘리먼트(Root Element)입니다.\nmodelVersion : POM model의 버전입니다. \ngroupId : 프로젝트를 생성하는 조직의 고유 아이디를 결정합니다. 일반적으로 도메인 이름을 거꾸로 적습니다.\nartifactId : 해당 프로젝트에 의하여 생성되는 artifact의 고유 아이디를 결정합니다. Maven을 이용하여  pom.xml을 빌드할 경우 다음과 같은 규칙으로 artifact가 생성됩니다. artifactid-version.packaging. 위 예의 경우 빌드할 경우 examples-1.0-SNAPSHOT.jar 파일이 생성됩니다.\npackaging : 해당 프로젝트를 어떤 형태로 packaging 할 것인지 결정합니다. jar, war, ear 등이 해당됩니다.\nversion : 프로젝트의 현재 버전. 추후 살펴보겠지만 프로젝트가 개발 중일 때는 SNAPSHOT을 접미사로 사용합니다. Maven의 버전 관리 기능은 라이브러리 관리를 편하게 합니다.\nname : 프로젝트의 이름입니다.\nurl : 프로젝트 사이트가 있다면 사이트 URL을 등록하는 것이 가능합니다.\nMaven 을 이용할 경우 얻게 되는 큰 이점 중의 하나는 Dependency Management 기능입니다.\n\n위 pom.xml 파일에서 <dependencies/> 엘리먼트가 Dependency Management 기능의 핵심이라고 할 수 있습니다.\n\n해당 엘리먼트 안에 필요한 라이브러리를 지정하게 됩니다.\n\n\nhttps://maven.apache.org/pom.html#POM_Relationships\n\nRef\n---\n[부스트코스 백엔드](https://www.boostcourse.org/web326/lecture/58937/?isDesc=false)\n\n<br>\n<br>\n","source":"_posts/boostcourse_02_maven.md","raw":"---\ntitle: Maven | 부스트코스 백엔드 02\ndate: 2022-01-03\ntags: database\ntoc: true\ncategories: \n- boostcourse 백엔드\n---\n\n### Maven\n---\nMaven은 지금까지 애플리케이션을 개발하기 위해 반복적으로 진행해왔던 작업들을 지원하기 위하여 등장한 도구이다.\n\nMaven을 사용하면 빌드(Build), 패키징, 문서화, 테스트와 테스트 리포팅, git, 의존성관리, svn등과 같은 형상관리서버와 연동(SCMs), 배포 등의 작업을 손쉽게 할 수 있습니다.\n\n### COC(Convention over Configuration)\n---\nCoC란 일종의 관습을 말하는데, \n예를 들자면 프로그램의 소스파일은 어떤 위치에 있어야 하고, 소스가 컴파일된 파일들은 어떤 위치에 있어야 하고 등을 미리 정해놨다는 것이다.\n\n이 말은 관습에 이미 익숙한 사용자는 쉽게 Maven을 사용할 수 있는데, \n관습에 익숙하지 않은 사용자는 이러한 제약사항에 대해서 심한 거부감을 느낄 수 있다.\n\nMaven을 사용한다는 것은 어쩌면 이러한 관습 즉 CoC에 대해서 알아나가는 것이라고도 말할 수 있습니다. \n\n\n\n### Maven의 장점\n---\nMaven을 사용할 경우, 굉장히 편리한 점들이 많습니다.\n\n많은 사람이 손꼽는 장점 중에는 편리한 의존성 라이브러리 관리가 있습니다.\n\n앞에서 JSTL을 학습할 때, 몇 가지 파일을 다운로드 하여 /WEB-INF/lib폴더에 복사하여 사용했었습니다.\n\n관련된 라이브러리가 많아질수록 이러한 방식은 상당히 불편해집니다.\n\nMaven을 사용하면 설정 파일에 몇 줄 적어줌으로써 직접 다운로드 받거나 하는 것을 하지 않아도 라이브러리를 사용할 수 있습니다.\n\n프로젝트에 참여하는 개발자가 많아지게 되면, 프로젝트를 빌드하는 방법에 대하여 가이드하는 것도 쉬운 일이 아닙니다.\n\nMaven을 사용하게 되면 Maven에 설정한 대로 모든 개발자가 일관된 방식으로 빌드를 수행할 수 있게 됩니다.\n\nMaven은 또한 다양한 플러그인을 제공해줘서, 굉장히 많은 일들을 자동화시킬 수 있습니다.\n\n\n### Maven 기본\n---\nArchetype을 이용하여 Maven 기반 프로젝트를 생성할 경우 생성된 프로젝트 하위에 pom.xml 파일이 생성됩니다.\npom.xml 파일을 살펴보면 다음과 같습니다. \n\n```java\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <groupId>kr.or.connect</groupId>\n    <artifactId>examples</artifactId>\n    <packaging>jar</packaging>\n    <version>1.0-SNAPSHOT</version>\n    <name>mysample</name>\n    <url>http://maven.apache.org</url>\n    <dependencies>\n        <dependency>\n            <groupId>junit</groupId>\n            <artifactId>junit</artifactId>\n            <version>3.8.1</version>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n</project>\n\n```\n각각의 태그의 의미는 다음과 같습니다.\n\nproject : pom.xml 파일의 최상위 루트 엘리먼트(Root Element)입니다.\nmodelVersion : POM model의 버전입니다. \ngroupId : 프로젝트를 생성하는 조직의 고유 아이디를 결정합니다. 일반적으로 도메인 이름을 거꾸로 적습니다.\nartifactId : 해당 프로젝트에 의하여 생성되는 artifact의 고유 아이디를 결정합니다. Maven을 이용하여  pom.xml을 빌드할 경우 다음과 같은 규칙으로 artifact가 생성됩니다. artifactid-version.packaging. 위 예의 경우 빌드할 경우 examples-1.0-SNAPSHOT.jar 파일이 생성됩니다.\npackaging : 해당 프로젝트를 어떤 형태로 packaging 할 것인지 결정합니다. jar, war, ear 등이 해당됩니다.\nversion : 프로젝트의 현재 버전. 추후 살펴보겠지만 프로젝트가 개발 중일 때는 SNAPSHOT을 접미사로 사용합니다. Maven의 버전 관리 기능은 라이브러리 관리를 편하게 합니다.\nname : 프로젝트의 이름입니다.\nurl : 프로젝트 사이트가 있다면 사이트 URL을 등록하는 것이 가능합니다.\nMaven 을 이용할 경우 얻게 되는 큰 이점 중의 하나는 Dependency Management 기능입니다.\n\n위 pom.xml 파일에서 <dependencies/> 엘리먼트가 Dependency Management 기능의 핵심이라고 할 수 있습니다.\n\n해당 엘리먼트 안에 필요한 라이브러리를 지정하게 됩니다.\n\n\nhttps://maven.apache.org/pom.html#POM_Relationships\n\nRef\n---\n[부스트코스 백엔드](https://www.boostcourse.org/web326/lecture/58937/?isDesc=false)\n\n<br>\n<br>\n","slug":"boostcourse-02-maven","published":1,"updated":"2022-01-06T14:20:12.115Z","_id":"cky31o1oe00001trj5o449koa","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"Maven\"><a href=\"#Maven\" class=\"headerlink\" title=\"Maven\"></a>Maven</h3><hr>\n<p>Maven은 지금까지 애플리케이션을 개발하기 위해 반복적으로 진행해왔던 작업들을 지원하기 위하여 등장한 도구이다.</p>\n<p>Maven을 사용하면 빌드(Build), 패키징, 문서화, 테스트와 테스트 리포팅, git, 의존성관리, svn등과 같은 형상관리서버와 연동(SCMs), 배포 등의 작업을 손쉽게 할 수 있습니다.</p>\n<h3 id=\"COC-Convention-over-Configuration\"><a href=\"#COC-Convention-over-Configuration\" class=\"headerlink\" title=\"COC(Convention over Configuration)\"></a>COC(Convention over Configuration)</h3><hr>\n<p>CoC란 일종의 관습을 말하는데,<br>예를 들자면 프로그램의 소스파일은 어떤 위치에 있어야 하고, 소스가 컴파일된 파일들은 어떤 위치에 있어야 하고 등을 미리 정해놨다는 것이다.</p>\n<p>이 말은 관습에 이미 익숙한 사용자는 쉽게 Maven을 사용할 수 있는데,<br>관습에 익숙하지 않은 사용자는 이러한 제약사항에 대해서 심한 거부감을 느낄 수 있다.</p>\n<p>Maven을 사용한다는 것은 어쩌면 이러한 관습 즉 CoC에 대해서 알아나가는 것이라고도 말할 수 있습니다. </p>\n<h3 id=\"Maven의-장점\"><a href=\"#Maven의-장점\" class=\"headerlink\" title=\"Maven의 장점\"></a>Maven의 장점</h3><hr>\n<p>Maven을 사용할 경우, 굉장히 편리한 점들이 많습니다.</p>\n<p>많은 사람이 손꼽는 장점 중에는 편리한 의존성 라이브러리 관리가 있습니다.</p>\n<p>앞에서 JSTL을 학습할 때, 몇 가지 파일을 다운로드 하여 /WEB-INF/lib폴더에 복사하여 사용했었습니다.</p>\n<p>관련된 라이브러리가 많아질수록 이러한 방식은 상당히 불편해집니다.</p>\n<p>Maven을 사용하면 설정 파일에 몇 줄 적어줌으로써 직접 다운로드 받거나 하는 것을 하지 않아도 라이브러리를 사용할 수 있습니다.</p>\n<p>프로젝트에 참여하는 개발자가 많아지게 되면, 프로젝트를 빌드하는 방법에 대하여 가이드하는 것도 쉬운 일이 아닙니다.</p>\n<p>Maven을 사용하게 되면 Maven에 설정한 대로 모든 개발자가 일관된 방식으로 빌드를 수행할 수 있게 됩니다.</p>\n<p>Maven은 또한 다양한 플러그인을 제공해줘서, 굉장히 많은 일들을 자동화시킬 수 있습니다.</p>\n<h3 id=\"Maven-기본\"><a href=\"#Maven-기본\" class=\"headerlink\" title=\"Maven 기본\"></a>Maven 기본</h3><hr>\n<p>Archetype을 이용하여 Maven 기반 프로젝트를 생성할 경우 생성된 프로젝트 하위에 pom.xml 파일이 생성됩니다.<br>pom.xml 파일을 살펴보면 다음과 같습니다. </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;project xmlns=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class=\"line\">    xmlns:xsi=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class=\"line\">    xsi:schemaLocation=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;</span>&gt;</span><br><span class=\"line\">    &lt;modelVersion&gt;<span class=\"number\">4.0</span><span class=\"number\">.0</span>&lt;/modelVersion&gt;</span><br><span class=\"line\">    &lt;groupId&gt;kr.or.connect&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;examples&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;packaging&gt;jar&lt;/packaging&gt;</span><br><span class=\"line\">    &lt;version&gt;<span class=\"number\">1.0</span>-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">    &lt;name&gt;mysample&lt;/name&gt;</span><br><span class=\"line\">    &lt;url&gt;http:<span class=\"comment\">//maven.apache.org&lt;/url&gt;</span></span><br><span class=\"line\">    &lt;dependencies&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;<span class=\"number\">3.8</span><span class=\"number\">.1</span>&lt;/version&gt;</span><br><span class=\"line\">            &lt;scope&gt;test&lt;/scope&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">    &lt;/dependencies&gt;</span><br><span class=\"line\">&lt;/project&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>각각의 태그의 의미는 다음과 같습니다.</p>\n<p>project : pom.xml 파일의 최상위 루트 엘리먼트(Root Element)입니다.<br>modelVersion : POM model의 버전입니다.<br>groupId : 프로젝트를 생성하는 조직의 고유 아이디를 결정합니다. 일반적으로 도메인 이름을 거꾸로 적습니다.<br>artifactId : 해당 프로젝트에 의하여 생성되는 artifact의 고유 아이디를 결정합니다. Maven을 이용하여  pom.xml을 빌드할 경우 다음과 같은 규칙으로 artifact가 생성됩니다. artifactid-version.packaging. 위 예의 경우 빌드할 경우 examples-1.0-SNAPSHOT.jar 파일이 생성됩니다.<br>packaging : 해당 프로젝트를 어떤 형태로 packaging 할 것인지 결정합니다. jar, war, ear 등이 해당됩니다.<br>version : 프로젝트의 현재 버전. 추후 살펴보겠지만 프로젝트가 개발 중일 때는 SNAPSHOT을 접미사로 사용합니다. Maven의 버전 관리 기능은 라이브러리 관리를 편하게 합니다.<br>name : 프로젝트의 이름입니다.<br>url : 프로젝트 사이트가 있다면 사이트 URL을 등록하는 것이 가능합니다.<br>Maven 을 이용할 경우 얻게 되는 큰 이점 중의 하나는 Dependency Management 기능입니다.</p>\n<p>위 pom.xml 파일에서 <dependencies/> 엘리먼트가 Dependency Management 기능의 핵심이라고 할 수 있습니다.</p>\n<p>해당 엘리먼트 안에 필요한 라이브러리를 지정하게 됩니다.</p>\n<p><a href=\"https://maven.apache.org/pom.html#POM_Relationships\">https://maven.apache.org/pom.html#POM_Relationships</a></p>\n<h2 id=\"Ref\"><a href=\"#Ref\" class=\"headerlink\" title=\"Ref\"></a>Ref</h2><p><a href=\"https://www.boostcourse.org/web326/lecture/58937/?isDesc=false\">부스트코스 백엔드</a></p>\n<br>\n<br>\n","site":{"data":{}},"excerpt":"Maven\n\n\n\nMaven은 지금까지 애플리케이션을 개발하기 위해 반복적으로 진행해왔던 작업들을 지원하기 위하여 등장한 도구이다.\n\nMaven을 사용하면 빌드(Build), 패키징, 문서화, 테스트와 테스트 리포팅, git, 의존성관리, svn등과 같은 형상관리서버와 연동(SCMs), 배포 등의 작업을 손쉽게 할 수 있습니다.\n\nCOC(Convention over Configuration)\n\n\n\nCoC란 일종의 관습을 말하는데,\n예를 들자면 프로그램의 소스파일은 어떤 위치에 있어야 하고, 소스가 컴파일된 파일들은 어떤 위치에 있어야","more":"<h3 id=\"Maven\"><a href=\"#Maven\" class=\"headerlink\" title=\"Maven\"></a>Maven</h3><hr>\n<p>Maven은 지금까지 애플리케이션을 개발하기 위해 반복적으로 진행해왔던 작업들을 지원하기 위하여 등장한 도구이다.</p>\n<p>Maven을 사용하면 빌드(Build), 패키징, 문서화, 테스트와 테스트 리포팅, git, 의존성관리, svn등과 같은 형상관리서버와 연동(SCMs), 배포 등의 작업을 손쉽게 할 수 있습니다.</p>\n<h3 id=\"COC-Convention-over-Configuration\"><a href=\"#COC-Convention-over-Configuration\" class=\"headerlink\" title=\"COC(Convention over Configuration)\"></a>COC(Convention over Configuration)</h3><hr>\n<p>CoC란 일종의 관습을 말하는데,<br>예를 들자면 프로그램의 소스파일은 어떤 위치에 있어야 하고, 소스가 컴파일된 파일들은 어떤 위치에 있어야 하고 등을 미리 정해놨다는 것이다.</p>\n<p>이 말은 관습에 이미 익숙한 사용자는 쉽게 Maven을 사용할 수 있는데,<br>관습에 익숙하지 않은 사용자는 이러한 제약사항에 대해서 심한 거부감을 느낄 수 있다.</p>\n<p>Maven을 사용한다는 것은 어쩌면 이러한 관습 즉 CoC에 대해서 알아나가는 것이라고도 말할 수 있습니다. </p>\n<h3 id=\"Maven의-장점\"><a href=\"#Maven의-장점\" class=\"headerlink\" title=\"Maven의 장점\"></a>Maven의 장점</h3><hr>\n<p>Maven을 사용할 경우, 굉장히 편리한 점들이 많습니다.</p>\n<p>많은 사람이 손꼽는 장점 중에는 편리한 의존성 라이브러리 관리가 있습니다.</p>\n<p>앞에서 JSTL을 학습할 때, 몇 가지 파일을 다운로드 하여 /WEB-INF/lib폴더에 복사하여 사용했었습니다.</p>\n<p>관련된 라이브러리가 많아질수록 이러한 방식은 상당히 불편해집니다.</p>\n<p>Maven을 사용하면 설정 파일에 몇 줄 적어줌으로써 직접 다운로드 받거나 하는 것을 하지 않아도 라이브러리를 사용할 수 있습니다.</p>\n<p>프로젝트에 참여하는 개발자가 많아지게 되면, 프로젝트를 빌드하는 방법에 대하여 가이드하는 것도 쉬운 일이 아닙니다.</p>\n<p>Maven을 사용하게 되면 Maven에 설정한 대로 모든 개발자가 일관된 방식으로 빌드를 수행할 수 있게 됩니다.</p>\n<p>Maven은 또한 다양한 플러그인을 제공해줘서, 굉장히 많은 일들을 자동화시킬 수 있습니다.</p>\n<h3 id=\"Maven-기본\"><a href=\"#Maven-기본\" class=\"headerlink\" title=\"Maven 기본\"></a>Maven 기본</h3><hr>\n<p>Archetype을 이용하여 Maven 기반 프로젝트를 생성할 경우 생성된 프로젝트 하위에 pom.xml 파일이 생성됩니다.<br>pom.xml 파일을 살펴보면 다음과 같습니다. </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;project xmlns=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class=\"line\">    xmlns:xsi=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class=\"line\">    xsi:schemaLocation=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;</span>&gt;</span><br><span class=\"line\">    &lt;modelVersion&gt;<span class=\"number\">4.0</span><span class=\"number\">.0</span>&lt;/modelVersion&gt;</span><br><span class=\"line\">    &lt;groupId&gt;kr.or.connect&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;examples&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;packaging&gt;jar&lt;/packaging&gt;</span><br><span class=\"line\">    &lt;version&gt;<span class=\"number\">1.0</span>-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">    &lt;name&gt;mysample&lt;/name&gt;</span><br><span class=\"line\">    &lt;url&gt;http:<span class=\"comment\">//maven.apache.org&lt;/url&gt;</span></span><br><span class=\"line\">    &lt;dependencies&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;<span class=\"number\">3.8</span><span class=\"number\">.1</span>&lt;/version&gt;</span><br><span class=\"line\">            &lt;scope&gt;test&lt;/scope&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">    &lt;/dependencies&gt;</span><br><span class=\"line\">&lt;/project&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>각각의 태그의 의미는 다음과 같습니다.</p>\n<p>project : pom.xml 파일의 최상위 루트 엘리먼트(Root Element)입니다.<br>modelVersion : POM model의 버전입니다.<br>groupId : 프로젝트를 생성하는 조직의 고유 아이디를 결정합니다. 일반적으로 도메인 이름을 거꾸로 적습니다.<br>artifactId : 해당 프로젝트에 의하여 생성되는 artifact의 고유 아이디를 결정합니다. Maven을 이용하여  pom.xml을 빌드할 경우 다음과 같은 규칙으로 artifact가 생성됩니다. artifactid-version.packaging. 위 예의 경우 빌드할 경우 examples-1.0-SNAPSHOT.jar 파일이 생성됩니다.<br>packaging : 해당 프로젝트를 어떤 형태로 packaging 할 것인지 결정합니다. jar, war, ear 등이 해당됩니다.<br>version : 프로젝트의 현재 버전. 추후 살펴보겠지만 프로젝트가 개발 중일 때는 SNAPSHOT을 접미사로 사용합니다. Maven의 버전 관리 기능은 라이브러리 관리를 편하게 합니다.<br>name : 프로젝트의 이름입니다.<br>url : 프로젝트 사이트가 있다면 사이트 URL을 등록하는 것이 가능합니다.<br>Maven 을 이용할 경우 얻게 되는 큰 이점 중의 하나는 Dependency Management 기능입니다.</p>\n<p>위 pom.xml 파일에서 <dependencies/> 엘리먼트가 Dependency Management 기능의 핵심이라고 할 수 있습니다.</p>\n<p>해당 엘리먼트 안에 필요한 라이브러리를 지정하게 됩니다.</p>\n<p><a href=\"https://maven.apache.org/pom.html#POM_Relationships\">https://maven.apache.org/pom.html#POM_Relationships</a></p>\n<h2 id=\"Ref\"><a href=\"#Ref\" class=\"headerlink\" title=\"Ref\"></a>Ref</h2><p><a href=\"https://www.boostcourse.org/web326/lecture/58937/?isDesc=false\">부스트코스 백엔드</a></p>\n<br>\n<br>\n"},{"title":"WEB | 부스트코스 백엔드 04","date":"2022-01-02T15:00:00.000Z","toc":true,"_content":"\n\n### 웹의 동작 원리\n\n인터넷 != WWW(World Wide Web)\n인터넷 기반의 대표 서비스 중 하나\nTCP/ IP 기반의 네크워크가 전세계적으로 확대되어 하나로 연결된 네트워크들의 네트워크\n(네트워크의 결합체)\n\n<br>\n\n### HTTP (Hypertext Transfer Protocol)란\nHTTP는 서버와 클라이언트가 인터넷상에서 데이터를 주고받기 위한 프로토콜(protocol)입니다.\nHTTP는 계속 발전하여 HTTP/2까지 버전이 등장한 상태입니다.\n\n<br>\n\n### HTTP 작동 방식\nHTTP는 서버/클라이언트 모델을 따릅니다.\n클라이언트가 요청을 서버로 보내면 서버가 요청을 받아 클라이언트에게 응답을 보낸다\n\n장점\n- 불특정 다수를 대상으로 하는 서비스에는 적합하다.\n- 클라이언트와 서버가 계속 연결된 형태가 아니기 때문에 클라이언트와 서버 간의 최대 연결 수보다 훨씬 많은 요청과 응답을 처리할 수 있다.\n단점\n- 연결을 끊어버리기 때문에, 클라이언트의 이전 상황을 알 수가 없다.\n- 이러한 특징을 무상태(Stateless)라고 말한다.\n- 이러한 특징 때문에 정보를 유지하기 위해서 Cookie와 같은 기술이 등장하게 되었다.\n\n###URL(Uniform Resource Locator)\n- 인터넷상의 자원의 위치\n- 특정 웹 서버의 특정 파일에 접근하기 위한 경로 혹은 주소\n\n접근프로토콜://IP주소또는도메인이름/문서의경로/문서이름\nhttp://www.oracle.co.kr/docs/index.html\n\nIP -> 우리집 주소, 하나의 집에 하나의 ip 존재\n포트 -> 집안의 방이 여러개임 방을 의미\n서버 -> 하나의 방에 여러개 서버 존재할 수 없다\n\n하나의 물리적 컴퓨터에는 여러개의 소프트웨어 서버 동작\n서버는 포트값이 다르게 동작\n포트값은 0보다 큰 숫자값이다.\n\n![](/images/boostcourse_01/7.PNG)\n\n요청 메서드 : GET, PUT, POST, PUSH, OPTIONS 등의 요청 방식이 온다.\n요청 URI : 요청하는 자원의 위치를 명시한다.\nHTTP 프로토콜 버전 : 웹 브라우저가 사용하는 프로토콜 버전이다.\n첫번째 줄의 요청메소드는 서버에게 요청의 종류를 알려주기 위해서 사용됩니다.\n\n각각의 메소드 이름은 다음과 같은 의미를 가집니다.\n\n참고로 최초의 웹 서버는 GET방식만 지원해줬습니다.\n\nGET : 정보를 요청하기 위해서 사용한다. (SELECT)\nPOST : 정보를 밀어넣기 위해서 사용한다. (INSERT)\nPUT : 정보를 업데이트하기 위해서 사용한다. (UPDATE)\nDELETE : 정보를 삭제하기 위해서 사용한다. (DELETE)\nHEAD : (HTTP)헤더 정보만 요청한다. 해당 자원이 존재하는지 혹은 서버에 문제가 없는지를 확인하기 위해서 사용한다.\nOPTIONS : 웹서버가 지원하는 메서드의 종류를 요청한다.\nTRACE : 클라이언트의 요청을 그대로 반환한다. 예컨데 echo 서비스로 서버 상태를 확인하기 위한 목적으로 주로 사용한다.\n\n\n\n### 브라우저\nex) 사파리, 구글크롬, 파이어폭스 ...etc\n서버에서 전송한 데이터(HTML과 같은)가 클라이언트에 도착하는곳\nBrowser에는 데이터를 해석해주는 파서와 데이터를 화면에 표현해주는 렌더링엔진이 포함되어 있습니다.\n\n- 브라우저의 흐름\nPasing HTML to construct the DOM tree      #pasing 분석 해석\n-> Render tree contruction\n-> Layout of the render tree  #화면 배치\n-> Painting the render tee     \n\n서버에서 전송한 데이터(HTML과 같은)가 클라이언트에 도착해야 할 곳은 'Browser'입니다.\n\nBrowser에는 데이터를 해석해주는 파서와 데이터를 화면에 표현해주는 렌더링엔진이 포함되어 있습니다.\n\n\n\n###웹서버\n웹 서버는 소프트웨어(Software)를 보통 말하지만, 웹 서버 소프트웨어가 동작하는 컴퓨터를 말합니다.\n웹 서버의 가장 중요한 기능은 클라이언트(Client)가 요청하는 HTML 문서나 각종 리소스(Resource)를 전달하는 것입니다.\n웹 브라우저나 웹 크롤러가 요청하는 리소스는 컴퓨터에 저장된 정적(static)인 데이터이거나 동적인 결과가 될 수 있습니다\n\n\n###웹 서버 소프트웨어의 종류\n\n가장 많이 사용하는 웹 서버는 Apache, Nginx, Microsoft IIS\n- Apache웹 서버는 Apache Software Foundation에서 개발한 웹서버로 오픈소스 소프트웨어(Open-source Software)이며, 거의 대부분 운영체제에서 설치 및 사용을 할 수 있습니다.\n- Nginx는 차세대 웹서버로 불리며 더 적은 자원으로 더 빠르게 데이터를 서비스하는 것을 목적으로 만들어진 서버이며 Apache웹 서버와 마찬가지로 오픈소스 소프트웨어입니다.\n\n\n###클라이언트와 서버 구조\n클라이언트는 서비스를 제공하는 서버에게 정보를 요청하여 응답받은 결과를 사용한다.\n웹서버와 웹 브라우저가 서버와 클라이언트의 관계이다.\n\n\n\n###미들웨어 (Middle Ware)\n\nDBMS의 문제점을 해결하기 위해서 생겨났다 (보안취약, 너무 많은 클라이언트 과부화)\n클라이언트 쪽에 비즈니스 로직이 많은 경우, 클라이언트 관리(배포 등)로 인해 비용이 많이 발생하는 문제 발생\n비즈니스 로직을 클라이언트와 DBMS 사이의 미들웨어 서버에서 동작하도록 함으로써 클라이언트는 입력과 출력만 담당하도록 함.\n\n\n\n### WAS (Web Application Server)\n브라우저와 클라이언트 사이에서 동작\nWAS는 일종의 미들웨어로 웹 클라이언트 (보통 웹 브라우저)의 요청 중 보통 웹 애플리케이션이 \n동작하도록 지원하는 목적을 가진다.\n\n기능\n- 프로그램 실행환경과 데이터베이스 접속 기능 제공\n- 여러개의 트랜젝션을 관리한다\n- 업무를 처리하는 비즈니스 로직을 수행한다\nex) Tomcat\n\n최초의 웹이 등장했을때 웹브라우저는 정적인데이터만 보여줬다\n사용자의 요구사항 커짐 -> 동적인 웹을 요구 ->\n\n\n###웹 서버 vs WAS\nWAS도 보통 자체적으로 웹 서버 기능을 내장하고 있습니다.\n현재는 WAS가 가지고 있는 웹 서버도 정적인 콘텐츠를 처리하는 데 있어서 성능상 큰 차이가 없습니다.\n규모가 커질수록 웹 서버와 WAS를 분리합니다.\n자원 이용의 효율성 및 장애 극복, 배포 및 유지보수의 편의성을 위해 웹서버와 WAS를 대체로 분리합니다\n\n\n\n\n\n\nhttps://jsbin.com/?html,output\n\n<br>\n\n### Ref\n[부스트코스](https://www.boostcourse.org/web326/lecture/58942/?isDesc=false)","source":"_posts/boostcourse_04_web.md","raw":"---\ntitle: WEB | 부스트코스 백엔드 04\ndate: 2022-01-03\ntags: database\ntoc: true\ncategories: \n- boostcourse 백엔드\n---\n\n\n### 웹의 동작 원리\n\n인터넷 != WWW(World Wide Web)\n인터넷 기반의 대표 서비스 중 하나\nTCP/ IP 기반의 네크워크가 전세계적으로 확대되어 하나로 연결된 네트워크들의 네트워크\n(네트워크의 결합체)\n\n<br>\n\n### HTTP (Hypertext Transfer Protocol)란\nHTTP는 서버와 클라이언트가 인터넷상에서 데이터를 주고받기 위한 프로토콜(protocol)입니다.\nHTTP는 계속 발전하여 HTTP/2까지 버전이 등장한 상태입니다.\n\n<br>\n\n### HTTP 작동 방식\nHTTP는 서버/클라이언트 모델을 따릅니다.\n클라이언트가 요청을 서버로 보내면 서버가 요청을 받아 클라이언트에게 응답을 보낸다\n\n장점\n- 불특정 다수를 대상으로 하는 서비스에는 적합하다.\n- 클라이언트와 서버가 계속 연결된 형태가 아니기 때문에 클라이언트와 서버 간의 최대 연결 수보다 훨씬 많은 요청과 응답을 처리할 수 있다.\n단점\n- 연결을 끊어버리기 때문에, 클라이언트의 이전 상황을 알 수가 없다.\n- 이러한 특징을 무상태(Stateless)라고 말한다.\n- 이러한 특징 때문에 정보를 유지하기 위해서 Cookie와 같은 기술이 등장하게 되었다.\n\n###URL(Uniform Resource Locator)\n- 인터넷상의 자원의 위치\n- 특정 웹 서버의 특정 파일에 접근하기 위한 경로 혹은 주소\n\n접근프로토콜://IP주소또는도메인이름/문서의경로/문서이름\nhttp://www.oracle.co.kr/docs/index.html\n\nIP -> 우리집 주소, 하나의 집에 하나의 ip 존재\n포트 -> 집안의 방이 여러개임 방을 의미\n서버 -> 하나의 방에 여러개 서버 존재할 수 없다\n\n하나의 물리적 컴퓨터에는 여러개의 소프트웨어 서버 동작\n서버는 포트값이 다르게 동작\n포트값은 0보다 큰 숫자값이다.\n\n![](/images/boostcourse_01/7.PNG)\n\n요청 메서드 : GET, PUT, POST, PUSH, OPTIONS 등의 요청 방식이 온다.\n요청 URI : 요청하는 자원의 위치를 명시한다.\nHTTP 프로토콜 버전 : 웹 브라우저가 사용하는 프로토콜 버전이다.\n첫번째 줄의 요청메소드는 서버에게 요청의 종류를 알려주기 위해서 사용됩니다.\n\n각각의 메소드 이름은 다음과 같은 의미를 가집니다.\n\n참고로 최초의 웹 서버는 GET방식만 지원해줬습니다.\n\nGET : 정보를 요청하기 위해서 사용한다. (SELECT)\nPOST : 정보를 밀어넣기 위해서 사용한다. (INSERT)\nPUT : 정보를 업데이트하기 위해서 사용한다. (UPDATE)\nDELETE : 정보를 삭제하기 위해서 사용한다. (DELETE)\nHEAD : (HTTP)헤더 정보만 요청한다. 해당 자원이 존재하는지 혹은 서버에 문제가 없는지를 확인하기 위해서 사용한다.\nOPTIONS : 웹서버가 지원하는 메서드의 종류를 요청한다.\nTRACE : 클라이언트의 요청을 그대로 반환한다. 예컨데 echo 서비스로 서버 상태를 확인하기 위한 목적으로 주로 사용한다.\n\n\n\n### 브라우저\nex) 사파리, 구글크롬, 파이어폭스 ...etc\n서버에서 전송한 데이터(HTML과 같은)가 클라이언트에 도착하는곳\nBrowser에는 데이터를 해석해주는 파서와 데이터를 화면에 표현해주는 렌더링엔진이 포함되어 있습니다.\n\n- 브라우저의 흐름\nPasing HTML to construct the DOM tree      #pasing 분석 해석\n-> Render tree contruction\n-> Layout of the render tree  #화면 배치\n-> Painting the render tee     \n\n서버에서 전송한 데이터(HTML과 같은)가 클라이언트에 도착해야 할 곳은 'Browser'입니다.\n\nBrowser에는 데이터를 해석해주는 파서와 데이터를 화면에 표현해주는 렌더링엔진이 포함되어 있습니다.\n\n\n\n###웹서버\n웹 서버는 소프트웨어(Software)를 보통 말하지만, 웹 서버 소프트웨어가 동작하는 컴퓨터를 말합니다.\n웹 서버의 가장 중요한 기능은 클라이언트(Client)가 요청하는 HTML 문서나 각종 리소스(Resource)를 전달하는 것입니다.\n웹 브라우저나 웹 크롤러가 요청하는 리소스는 컴퓨터에 저장된 정적(static)인 데이터이거나 동적인 결과가 될 수 있습니다\n\n\n###웹 서버 소프트웨어의 종류\n\n가장 많이 사용하는 웹 서버는 Apache, Nginx, Microsoft IIS\n- Apache웹 서버는 Apache Software Foundation에서 개발한 웹서버로 오픈소스 소프트웨어(Open-source Software)이며, 거의 대부분 운영체제에서 설치 및 사용을 할 수 있습니다.\n- Nginx는 차세대 웹서버로 불리며 더 적은 자원으로 더 빠르게 데이터를 서비스하는 것을 목적으로 만들어진 서버이며 Apache웹 서버와 마찬가지로 오픈소스 소프트웨어입니다.\n\n\n###클라이언트와 서버 구조\n클라이언트는 서비스를 제공하는 서버에게 정보를 요청하여 응답받은 결과를 사용한다.\n웹서버와 웹 브라우저가 서버와 클라이언트의 관계이다.\n\n\n\n###미들웨어 (Middle Ware)\n\nDBMS의 문제점을 해결하기 위해서 생겨났다 (보안취약, 너무 많은 클라이언트 과부화)\n클라이언트 쪽에 비즈니스 로직이 많은 경우, 클라이언트 관리(배포 등)로 인해 비용이 많이 발생하는 문제 발생\n비즈니스 로직을 클라이언트와 DBMS 사이의 미들웨어 서버에서 동작하도록 함으로써 클라이언트는 입력과 출력만 담당하도록 함.\n\n\n\n### WAS (Web Application Server)\n브라우저와 클라이언트 사이에서 동작\nWAS는 일종의 미들웨어로 웹 클라이언트 (보통 웹 브라우저)의 요청 중 보통 웹 애플리케이션이 \n동작하도록 지원하는 목적을 가진다.\n\n기능\n- 프로그램 실행환경과 데이터베이스 접속 기능 제공\n- 여러개의 트랜젝션을 관리한다\n- 업무를 처리하는 비즈니스 로직을 수행한다\nex) Tomcat\n\n최초의 웹이 등장했을때 웹브라우저는 정적인데이터만 보여줬다\n사용자의 요구사항 커짐 -> 동적인 웹을 요구 ->\n\n\n###웹 서버 vs WAS\nWAS도 보통 자체적으로 웹 서버 기능을 내장하고 있습니다.\n현재는 WAS가 가지고 있는 웹 서버도 정적인 콘텐츠를 처리하는 데 있어서 성능상 큰 차이가 없습니다.\n규모가 커질수록 웹 서버와 WAS를 분리합니다.\n자원 이용의 효율성 및 장애 극복, 배포 및 유지보수의 편의성을 위해 웹서버와 WAS를 대체로 분리합니다\n\n\n\n\n\n\nhttps://jsbin.com/?html,output\n\n<br>\n\n### Ref\n[부스트코스](https://www.boostcourse.org/web326/lecture/58942/?isDesc=false)","slug":"boostcourse-04-web","published":1,"updated":"2022-01-06T14:20:12.128Z","_id":"cky31o1of00011trj9qi23jnx","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"웹의-동작-원리\"><a href=\"#웹의-동작-원리\" class=\"headerlink\" title=\"웹의 동작 원리\"></a>웹의 동작 원리</h3><p>인터넷 != WWW(World Wide Web)<br>인터넷 기반의 대표 서비스 중 하나<br>TCP/ IP 기반의 네크워크가 전세계적으로 확대되어 하나로 연결된 네트워크들의 네트워크<br>(네트워크의 결합체)</p>\n<br>\n\n<h3 id=\"HTTP-Hypertext-Transfer-Protocol-란\"><a href=\"#HTTP-Hypertext-Transfer-Protocol-란\" class=\"headerlink\" title=\"HTTP (Hypertext Transfer Protocol)란\"></a>HTTP (Hypertext Transfer Protocol)란</h3><p>HTTP는 서버와 클라이언트가 인터넷상에서 데이터를 주고받기 위한 프로토콜(protocol)입니다.<br>HTTP는 계속 발전하여 HTTP/2까지 버전이 등장한 상태입니다.</p>\n<br>\n\n<h3 id=\"HTTP-작동-방식\"><a href=\"#HTTP-작동-방식\" class=\"headerlink\" title=\"HTTP 작동 방식\"></a>HTTP 작동 방식</h3><p>HTTP는 서버/클라이언트 모델을 따릅니다.<br>클라이언트가 요청을 서버로 보내면 서버가 요청을 받아 클라이언트에게 응답을 보낸다</p>\n<p>장점</p>\n<ul>\n<li>불특정 다수를 대상으로 하는 서비스에는 적합하다.</li>\n<li>클라이언트와 서버가 계속 연결된 형태가 아니기 때문에 클라이언트와 서버 간의 최대 연결 수보다 훨씬 많은 요청과 응답을 처리할 수 있다.<br>단점</li>\n<li>연결을 끊어버리기 때문에, 클라이언트의 이전 상황을 알 수가 없다.</li>\n<li>이러한 특징을 무상태(Stateless)라고 말한다.</li>\n<li>이러한 특징 때문에 정보를 유지하기 위해서 Cookie와 같은 기술이 등장하게 되었다.</li>\n</ul>\n<p>###URL(Uniform Resource Locator)</p>\n<ul>\n<li>인터넷상의 자원의 위치</li>\n<li>특정 웹 서버의 특정 파일에 접근하기 위한 경로 혹은 주소</li>\n</ul>\n<p>접근프로토콜://IP주소또는도메인이름/문서의경로/문서이름<br><a href=\"http://www.oracle.co.kr/docs/index.html\">http://www.oracle.co.kr/docs/index.html</a></p>\n<p>IP -&gt; 우리집 주소, 하나의 집에 하나의 ip 존재<br>포트 -&gt; 집안의 방이 여러개임 방을 의미<br>서버 -&gt; 하나의 방에 여러개 서버 존재할 수 없다</p>\n<p>하나의 물리적 컴퓨터에는 여러개의 소프트웨어 서버 동작<br>서버는 포트값이 다르게 동작<br>포트값은 0보다 큰 숫자값이다.</p>\n<p><img src=\"/images/boostcourse_01/7.PNG\"></p>\n<p>요청 메서드 : GET, PUT, POST, PUSH, OPTIONS 등의 요청 방식이 온다.<br>요청 URI : 요청하는 자원의 위치를 명시한다.<br>HTTP 프로토콜 버전 : 웹 브라우저가 사용하는 프로토콜 버전이다.<br>첫번째 줄의 요청메소드는 서버에게 요청의 종류를 알려주기 위해서 사용됩니다.</p>\n<p>각각의 메소드 이름은 다음과 같은 의미를 가집니다.</p>\n<p>참고로 최초의 웹 서버는 GET방식만 지원해줬습니다.</p>\n<p>GET : 정보를 요청하기 위해서 사용한다. (SELECT)<br>POST : 정보를 밀어넣기 위해서 사용한다. (INSERT)<br>PUT : 정보를 업데이트하기 위해서 사용한다. (UPDATE)<br>DELETE : 정보를 삭제하기 위해서 사용한다. (DELETE)<br>HEAD : (HTTP)헤더 정보만 요청한다. 해당 자원이 존재하는지 혹은 서버에 문제가 없는지를 확인하기 위해서 사용한다.<br>OPTIONS : 웹서버가 지원하는 메서드의 종류를 요청한다.<br>TRACE : 클라이언트의 요청을 그대로 반환한다. 예컨데 echo 서비스로 서버 상태를 확인하기 위한 목적으로 주로 사용한다.</p>\n<h3 id=\"브라우저\"><a href=\"#브라우저\" class=\"headerlink\" title=\"브라우저\"></a>브라우저</h3><p>ex) 사파리, 구글크롬, 파이어폭스 …etc<br>서버에서 전송한 데이터(HTML과 같은)가 클라이언트에 도착하는곳<br>Browser에는 데이터를 해석해주는 파서와 데이터를 화면에 표현해주는 렌더링엔진이 포함되어 있습니다.</p>\n<ul>\n<li>브라우저의 흐름<br>Pasing HTML to construct the DOM tree      #pasing 분석 해석</li>\n<li><blockquote>\n<p>Render tree contruction</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>Layout of the render tree  #화면 배치</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>Painting the render tee     </p>\n</blockquote>\n</li>\n</ul>\n<p>서버에서 전송한 데이터(HTML과 같은)가 클라이언트에 도착해야 할 곳은 ‘Browser’입니다.</p>\n<p>Browser에는 데이터를 해석해주는 파서와 데이터를 화면에 표현해주는 렌더링엔진이 포함되어 있습니다.</p>\n<p>###웹서버<br>웹 서버는 소프트웨어(Software)를 보통 말하지만, 웹 서버 소프트웨어가 동작하는 컴퓨터를 말합니다.<br>웹 서버의 가장 중요한 기능은 클라이언트(Client)가 요청하는 HTML 문서나 각종 리소스(Resource)를 전달하는 것입니다.<br>웹 브라우저나 웹 크롤러가 요청하는 리소스는 컴퓨터에 저장된 정적(static)인 데이터이거나 동적인 결과가 될 수 있습니다</p>\n<p>###웹 서버 소프트웨어의 종류</p>\n<p>가장 많이 사용하는 웹 서버는 Apache, Nginx, Microsoft IIS</p>\n<ul>\n<li>Apache웹 서버는 Apache Software Foundation에서 개발한 웹서버로 오픈소스 소프트웨어(Open-source Software)이며, 거의 대부분 운영체제에서 설치 및 사용을 할 수 있습니다.</li>\n<li>Nginx는 차세대 웹서버로 불리며 더 적은 자원으로 더 빠르게 데이터를 서비스하는 것을 목적으로 만들어진 서버이며 Apache웹 서버와 마찬가지로 오픈소스 소프트웨어입니다.</li>\n</ul>\n<p>###클라이언트와 서버 구조<br>클라이언트는 서비스를 제공하는 서버에게 정보를 요청하여 응답받은 결과를 사용한다.<br>웹서버와 웹 브라우저가 서버와 클라이언트의 관계이다.</p>\n<p>###미들웨어 (Middle Ware)</p>\n<p>DBMS의 문제점을 해결하기 위해서 생겨났다 (보안취약, 너무 많은 클라이언트 과부화)<br>클라이언트 쪽에 비즈니스 로직이 많은 경우, 클라이언트 관리(배포 등)로 인해 비용이 많이 발생하는 문제 발생<br>비즈니스 로직을 클라이언트와 DBMS 사이의 미들웨어 서버에서 동작하도록 함으로써 클라이언트는 입력과 출력만 담당하도록 함.</p>\n<h3 id=\"WAS-Web-Application-Server\"><a href=\"#WAS-Web-Application-Server\" class=\"headerlink\" title=\"WAS (Web Application Server)\"></a>WAS (Web Application Server)</h3><p>브라우저와 클라이언트 사이에서 동작<br>WAS는 일종의 미들웨어로 웹 클라이언트 (보통 웹 브라우저)의 요청 중 보통 웹 애플리케이션이<br>동작하도록 지원하는 목적을 가진다.</p>\n<p>기능</p>\n<ul>\n<li>프로그램 실행환경과 데이터베이스 접속 기능 제공</li>\n<li>여러개의 트랜젝션을 관리한다</li>\n<li>업무를 처리하는 비즈니스 로직을 수행한다<br>ex) Tomcat</li>\n</ul>\n<p>최초의 웹이 등장했을때 웹브라우저는 정적인데이터만 보여줬다<br>사용자의 요구사항 커짐 -&gt; 동적인 웹을 요구 -&gt;</p>\n<p>###웹 서버 vs WAS<br>WAS도 보통 자체적으로 웹 서버 기능을 내장하고 있습니다.<br>현재는 WAS가 가지고 있는 웹 서버도 정적인 콘텐츠를 처리하는 데 있어서 성능상 큰 차이가 없습니다.<br>규모가 커질수록 웹 서버와 WAS를 분리합니다.<br>자원 이용의 효율성 및 장애 극복, 배포 및 유지보수의 편의성을 위해 웹서버와 WAS를 대체로 분리합니다</p>\n<p><a href=\"https://jsbin.com/?html,output\">https://jsbin.com/?html,output</a></p>\n<br>\n\n<h3 id=\"Ref\"><a href=\"#Ref\" class=\"headerlink\" title=\"Ref\"></a>Ref</h3><p><a href=\"https://www.boostcourse.org/web326/lecture/58942/?isDesc=false\">부스트코스</a></p>\n","site":{"data":{}},"excerpt":"웹의 동작 원리\n인터넷 != WWW(World Wide Web)\n인터넷 기반의 대표 서비스 중 하나\nTCP/ IP 기반의 네크워크가 전세계적으로 확대되어 하나로 연결된 네트워크들의 네트워크\n(네트워크의 결합체)\n\n\nHTTP (Hypertext Transfer Protocol)란\nHTTP는 서버와 클라이언트가 인터넷상에서 데이터를 주고받기 위한 프로토콜(protocol)입니다.\nHTTP는 계속 발전하여 HTTP/2까지 버전이 등장한 상태입니다.\n\n\nHTTP 작동 방식\nHTTP는 서버/클라이언트 모델을 따릅니다.\n클라이언트가 요청을 서","more":"<h3 id=\"웹의-동작-원리\"><a href=\"#웹의-동작-원리\" class=\"headerlink\" title=\"웹의 동작 원리\"></a>웹의 동작 원리</h3><p>인터넷 != WWW(World Wide Web)<br>인터넷 기반의 대표 서비스 중 하나<br>TCP/ IP 기반의 네크워크가 전세계적으로 확대되어 하나로 연결된 네트워크들의 네트워크<br>(네트워크의 결합체)</p>\n<br>\n\n<h3 id=\"HTTP-Hypertext-Transfer-Protocol-란\"><a href=\"#HTTP-Hypertext-Transfer-Protocol-란\" class=\"headerlink\" title=\"HTTP (Hypertext Transfer Protocol)란\"></a>HTTP (Hypertext Transfer Protocol)란</h3><p>HTTP는 서버와 클라이언트가 인터넷상에서 데이터를 주고받기 위한 프로토콜(protocol)입니다.<br>HTTP는 계속 발전하여 HTTP/2까지 버전이 등장한 상태입니다.</p>\n<br>\n\n<h3 id=\"HTTP-작동-방식\"><a href=\"#HTTP-작동-방식\" class=\"headerlink\" title=\"HTTP 작동 방식\"></a>HTTP 작동 방식</h3><p>HTTP는 서버/클라이언트 모델을 따릅니다.<br>클라이언트가 요청을 서버로 보내면 서버가 요청을 받아 클라이언트에게 응답을 보낸다</p>\n<p>장점</p>\n<ul>\n<li>불특정 다수를 대상으로 하는 서비스에는 적합하다.</li>\n<li>클라이언트와 서버가 계속 연결된 형태가 아니기 때문에 클라이언트와 서버 간의 최대 연결 수보다 훨씬 많은 요청과 응답을 처리할 수 있다.<br>단점</li>\n<li>연결을 끊어버리기 때문에, 클라이언트의 이전 상황을 알 수가 없다.</li>\n<li>이러한 특징을 무상태(Stateless)라고 말한다.</li>\n<li>이러한 특징 때문에 정보를 유지하기 위해서 Cookie와 같은 기술이 등장하게 되었다.</li>\n</ul>\n<p>###URL(Uniform Resource Locator)</p>\n<ul>\n<li>인터넷상의 자원의 위치</li>\n<li>특정 웹 서버의 특정 파일에 접근하기 위한 경로 혹은 주소</li>\n</ul>\n<p>접근프로토콜://IP주소또는도메인이름/문서의경로/문서이름<br><a href=\"http://www.oracle.co.kr/docs/index.html\">http://www.oracle.co.kr/docs/index.html</a></p>\n<p>IP -&gt; 우리집 주소, 하나의 집에 하나의 ip 존재<br>포트 -&gt; 집안의 방이 여러개임 방을 의미<br>서버 -&gt; 하나의 방에 여러개 서버 존재할 수 없다</p>\n<p>하나의 물리적 컴퓨터에는 여러개의 소프트웨어 서버 동작<br>서버는 포트값이 다르게 동작<br>포트값은 0보다 큰 숫자값이다.</p>\n<p><img src=\"/images/boostcourse_01/7.PNG\"></p>\n<p>요청 메서드 : GET, PUT, POST, PUSH, OPTIONS 등의 요청 방식이 온다.<br>요청 URI : 요청하는 자원의 위치를 명시한다.<br>HTTP 프로토콜 버전 : 웹 브라우저가 사용하는 프로토콜 버전이다.<br>첫번째 줄의 요청메소드는 서버에게 요청의 종류를 알려주기 위해서 사용됩니다.</p>\n<p>각각의 메소드 이름은 다음과 같은 의미를 가집니다.</p>\n<p>참고로 최초의 웹 서버는 GET방식만 지원해줬습니다.</p>\n<p>GET : 정보를 요청하기 위해서 사용한다. (SELECT)<br>POST : 정보를 밀어넣기 위해서 사용한다. (INSERT)<br>PUT : 정보를 업데이트하기 위해서 사용한다. (UPDATE)<br>DELETE : 정보를 삭제하기 위해서 사용한다. (DELETE)<br>HEAD : (HTTP)헤더 정보만 요청한다. 해당 자원이 존재하는지 혹은 서버에 문제가 없는지를 확인하기 위해서 사용한다.<br>OPTIONS : 웹서버가 지원하는 메서드의 종류를 요청한다.<br>TRACE : 클라이언트의 요청을 그대로 반환한다. 예컨데 echo 서비스로 서버 상태를 확인하기 위한 목적으로 주로 사용한다.</p>\n<h3 id=\"브라우저\"><a href=\"#브라우저\" class=\"headerlink\" title=\"브라우저\"></a>브라우저</h3><p>ex) 사파리, 구글크롬, 파이어폭스 …etc<br>서버에서 전송한 데이터(HTML과 같은)가 클라이언트에 도착하는곳<br>Browser에는 데이터를 해석해주는 파서와 데이터를 화면에 표현해주는 렌더링엔진이 포함되어 있습니다.</p>\n<ul>\n<li>브라우저의 흐름<br>Pasing HTML to construct the DOM tree      #pasing 분석 해석</li>\n<li><blockquote>\n<p>Render tree contruction</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>Layout of the render tree  #화면 배치</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>Painting the render tee     </p>\n</blockquote>\n</li>\n</ul>\n<p>서버에서 전송한 데이터(HTML과 같은)가 클라이언트에 도착해야 할 곳은 ‘Browser’입니다.</p>\n<p>Browser에는 데이터를 해석해주는 파서와 데이터를 화면에 표현해주는 렌더링엔진이 포함되어 있습니다.</p>\n<p>###웹서버<br>웹 서버는 소프트웨어(Software)를 보통 말하지만, 웹 서버 소프트웨어가 동작하는 컴퓨터를 말합니다.<br>웹 서버의 가장 중요한 기능은 클라이언트(Client)가 요청하는 HTML 문서나 각종 리소스(Resource)를 전달하는 것입니다.<br>웹 브라우저나 웹 크롤러가 요청하는 리소스는 컴퓨터에 저장된 정적(static)인 데이터이거나 동적인 결과가 될 수 있습니다</p>\n<p>###웹 서버 소프트웨어의 종류</p>\n<p>가장 많이 사용하는 웹 서버는 Apache, Nginx, Microsoft IIS</p>\n<ul>\n<li>Apache웹 서버는 Apache Software Foundation에서 개발한 웹서버로 오픈소스 소프트웨어(Open-source Software)이며, 거의 대부분 운영체제에서 설치 및 사용을 할 수 있습니다.</li>\n<li>Nginx는 차세대 웹서버로 불리며 더 적은 자원으로 더 빠르게 데이터를 서비스하는 것을 목적으로 만들어진 서버이며 Apache웹 서버와 마찬가지로 오픈소스 소프트웨어입니다.</li>\n</ul>\n<p>###클라이언트와 서버 구조<br>클라이언트는 서비스를 제공하는 서버에게 정보를 요청하여 응답받은 결과를 사용한다.<br>웹서버와 웹 브라우저가 서버와 클라이언트의 관계이다.</p>\n<p>###미들웨어 (Middle Ware)</p>\n<p>DBMS의 문제점을 해결하기 위해서 생겨났다 (보안취약, 너무 많은 클라이언트 과부화)<br>클라이언트 쪽에 비즈니스 로직이 많은 경우, 클라이언트 관리(배포 등)로 인해 비용이 많이 발생하는 문제 발생<br>비즈니스 로직을 클라이언트와 DBMS 사이의 미들웨어 서버에서 동작하도록 함으로써 클라이언트는 입력과 출력만 담당하도록 함.</p>\n<h3 id=\"WAS-Web-Application-Server\"><a href=\"#WAS-Web-Application-Server\" class=\"headerlink\" title=\"WAS (Web Application Server)\"></a>WAS (Web Application Server)</h3><p>브라우저와 클라이언트 사이에서 동작<br>WAS는 일종의 미들웨어로 웹 클라이언트 (보통 웹 브라우저)의 요청 중 보통 웹 애플리케이션이<br>동작하도록 지원하는 목적을 가진다.</p>\n<p>기능</p>\n<ul>\n<li>프로그램 실행환경과 데이터베이스 접속 기능 제공</li>\n<li>여러개의 트랜젝션을 관리한다</li>\n<li>업무를 처리하는 비즈니스 로직을 수행한다<br>ex) Tomcat</li>\n</ul>\n<p>최초의 웹이 등장했을때 웹브라우저는 정적인데이터만 보여줬다<br>사용자의 요구사항 커짐 -&gt; 동적인 웹을 요구 -&gt;</p>\n<p>###웹 서버 vs WAS<br>WAS도 보통 자체적으로 웹 서버 기능을 내장하고 있습니다.<br>현재는 WAS가 가지고 있는 웹 서버도 정적인 콘텐츠를 처리하는 데 있어서 성능상 큰 차이가 없습니다.<br>규모가 커질수록 웹 서버와 WAS를 분리합니다.<br>자원 이용의 효율성 및 장애 극복, 배포 및 유지보수의 편의성을 위해 웹서버와 WAS를 대체로 분리합니다</p>\n<p><a href=\"https://jsbin.com/?html,output\">https://jsbin.com/?html,output</a></p>\n<br>\n\n<h3 id=\"Ref\"><a href=\"#Ref\" class=\"headerlink\" title=\"Ref\"></a>Ref</h3><p><a href=\"https://www.boostcourse.org/web326/lecture/58942/?isDesc=false\">부스트코스</a></p>\n"},{"title":"JDBC | 부스트코스 백엔드03","date":"2022-01-02T15:00:00.000Z","toc":true,"_content":"![](/images/boostcourse_01/1.PNG)\n\n\n\n### JDBC란\n---\nJDBC(Java Database Connectivity)의 정의\n- 자바를 이용한 데이터베이스 접속과 SQL 문장의 실행, 그리고 실행 결과로 얻어진 데이터의 핸들링을 제공하는 방법과 절차에 관한 규약\n- 자바 프로그램 내에서 SQL문을 실행하기 위한 자바 API\n- SQL과 프로그래밍 언어의 통합 접근 중 한 형태\nJAVA는 표준 인터페이스인 JDBC API를 제공\n데이터베이스 벤더, 또는 기타 써드파티에서는 JDBC 인터페이스를 구현한 드라이버(driver)를 제공한다.\n\n\n+\n웹을 동작할때 프로그램이 데이터베이스를 사용할수 있게 이미 만들어진 툴이라고 생각하자\n\n### JDBC 환경 구성\n---\nJDK 설치\nJDBC 드라이버 설치\n- Maven에 다음과 같은 의존성을 추가한다. MySQL사이트에서 다운로드 한다.\n\n\n<dependency>   \n  <groupId>mysql</groupId>   \n       <artifactId>mysql-connector-java</artifactId>\n       <version>5.1.45</version>\n </dependency>\n\n\n\n###JDBC를 이용한 프로그래밍 방법\n\n1. import java.sql.*;\n2. 드라이버를 로드 한다.   \n3. Connection 객체를 생성한다.   //db에 접속\n4. Statement 객체를 생성 및 질의 수행  //쿼리 생성과 실행을 statement가 도와줌\n5. SQL문에 결과물이 있다면 ResultSet 객체를 생성한다.\n6. 모든 객체를 닫는다.\n\n### JDBC 클래스의 생성 관계\n\n![](/images/boostcourse_01/6.PNG)\n\n\n\n###JDBC 사용\n\n\n```java\n\n//import\nimport java.sql.*;\n\n//드라이버 로드\nClass.forName( \"com.mysql.jdbc.Driver\" );\n\n//connection 얻기\nString dburl  = \"jdbc:mysql://localhost/dbName\";\nConnection con =  DriverManager.getConnection ( dburl, ID, PWD );\n\n//소스코드 예제\npublic static Connection getConnection() throws Exception{\n\tString url = \"jdbc:oracle:thin:@117.16.46.111:1521:xe\";   //oracle\n\tString user = \"smu\";\n\tString password = \"smu\";\n\tConnection conn = null;\n\tClass.forName(\"oracle.jdbc.driver.OracleDriver\");\n\tconn = DriverManager.getConnection(url, user, password);\n\treturn conn;\n}\n\n//statement생성\nStatement stmt = con.createStatement();\n\n//질의 수행\nResultSet rs = stmt.executeQuery(\"select no from user\" );\n\nstmt.execute(“query”);             //any SQL\nstmt.executeQuery(“query”);     //SELECT\nstmt.executeUpdate(“query”);   //INSERT, UPDATE, DELETE\n\n//resultset으로 결과 받기\nResultSet rs =  stmt.executeQuery( \"select no from user\" );\nwhile ( rs.next() )\n      System.out.println( rs.getInt( \"no\") );\n\n//close\nrs.close();\n\nstmt.close();\n\ncon.close();\n```\n\n###예제01\n```java\npublic List<GuestBookVO> getGuestBookList(){\n\t\tList<GuestBookVO> list = new ArrayList<>();\n\t\tGuestBookVO vo = null;\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\tResultSet rs = null;\n\t\ttry{\n\t\t\tconn = DBUtil.getConnection();\n\t\t\tString sql = \"select * from guestbook\";\n\t\t\tps = conn.prepareStatement(sql);\n\t\t\trs = ps.executeQuery();\n\t\t\twhile(rs.next()){\n\t\t\t\tvo = new GuestBookVO();\n\t\t\t\tvo.setNo(rs.getInt(1));\n\t\t\t\tvo.setId(rs.getString(2));\n\t\t\t\tvo.setTitle(rs.getString(3));\n\t\t\t\tvo.setConetnt(rs.getString(4));\n\t\t\t\tvo.setRegDate(rs.getString(5));\n\t\t\t\tlist.add(vo);\n\t\t\t}\n\t\t}catch(Exception e){\n\t\t\te.printStackTrace();\n\t\t}finally {\n\t\t\tDBUtil.close(conn, ps, rs);\n\t\t}\t\t\n\t\treturn list;\t\t\n\t}\n```\n\n###예제02\n\n```java\npublic int addGuestBook(GuestBookVO vo){\n\t\tint result = 0;\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry{\n\t\t\tconn = DBUtil.getConnection();\n\t\t\tString sql = \"insert into guestbook values(\"\n\t\t\t\t\t+ \"guestbook_seq.nextval,?,?,?,sysdate)\";\n\t\t\tps = conn.prepareStatement(sql);\n\t\t\tps.setString(1, vo.getId());\n\t\t\tps.setString(2, vo.getTitle());\n\t\t\tps.setString(3, vo.getConetnt());\n\t\t\tresult = ps.executeUpdate();\n\t\t}catch(Exception e){\n\t\t\te.printStackTrace();\n\t\t}finally {\n\t\t\tDBUtil.close(conn, ps);\n\t\t}\n\t\t\n\t\treturn result;\n\t}\n```\n\n\n### 정리\n위의 두 예재를 보면 반복되는 부분이 많은데\n이것을 프레임워크화 하면 간편하게 사용할 수 있다.\n\n이 과정에서 앞으로 내가 사용할건 Spring 프레임 워크이다.\n\n\n","source":"_posts/boostcourse_03_jdbc.md","raw":"---\ntitle: JDBC | 부스트코스 백엔드03\ndate: 2022-01-03\ntags: database\ntoc: true\ncategories: \n- boostcourse 백엔드\n---\n![](/images/boostcourse_01/1.PNG)\n\n\n\n### JDBC란\n---\nJDBC(Java Database Connectivity)의 정의\n- 자바를 이용한 데이터베이스 접속과 SQL 문장의 실행, 그리고 실행 결과로 얻어진 데이터의 핸들링을 제공하는 방법과 절차에 관한 규약\n- 자바 프로그램 내에서 SQL문을 실행하기 위한 자바 API\n- SQL과 프로그래밍 언어의 통합 접근 중 한 형태\nJAVA는 표준 인터페이스인 JDBC API를 제공\n데이터베이스 벤더, 또는 기타 써드파티에서는 JDBC 인터페이스를 구현한 드라이버(driver)를 제공한다.\n\n\n+\n웹을 동작할때 프로그램이 데이터베이스를 사용할수 있게 이미 만들어진 툴이라고 생각하자\n\n### JDBC 환경 구성\n---\nJDK 설치\nJDBC 드라이버 설치\n- Maven에 다음과 같은 의존성을 추가한다. MySQL사이트에서 다운로드 한다.\n\n\n<dependency>   \n  <groupId>mysql</groupId>   \n       <artifactId>mysql-connector-java</artifactId>\n       <version>5.1.45</version>\n </dependency>\n\n\n\n###JDBC를 이용한 프로그래밍 방법\n\n1. import java.sql.*;\n2. 드라이버를 로드 한다.   \n3. Connection 객체를 생성한다.   //db에 접속\n4. Statement 객체를 생성 및 질의 수행  //쿼리 생성과 실행을 statement가 도와줌\n5. SQL문에 결과물이 있다면 ResultSet 객체를 생성한다.\n6. 모든 객체를 닫는다.\n\n### JDBC 클래스의 생성 관계\n\n![](/images/boostcourse_01/6.PNG)\n\n\n\n###JDBC 사용\n\n\n```java\n\n//import\nimport java.sql.*;\n\n//드라이버 로드\nClass.forName( \"com.mysql.jdbc.Driver\" );\n\n//connection 얻기\nString dburl  = \"jdbc:mysql://localhost/dbName\";\nConnection con =  DriverManager.getConnection ( dburl, ID, PWD );\n\n//소스코드 예제\npublic static Connection getConnection() throws Exception{\n\tString url = \"jdbc:oracle:thin:@117.16.46.111:1521:xe\";   //oracle\n\tString user = \"smu\";\n\tString password = \"smu\";\n\tConnection conn = null;\n\tClass.forName(\"oracle.jdbc.driver.OracleDriver\");\n\tconn = DriverManager.getConnection(url, user, password);\n\treturn conn;\n}\n\n//statement생성\nStatement stmt = con.createStatement();\n\n//질의 수행\nResultSet rs = stmt.executeQuery(\"select no from user\" );\n\nstmt.execute(“query”);             //any SQL\nstmt.executeQuery(“query”);     //SELECT\nstmt.executeUpdate(“query”);   //INSERT, UPDATE, DELETE\n\n//resultset으로 결과 받기\nResultSet rs =  stmt.executeQuery( \"select no from user\" );\nwhile ( rs.next() )\n      System.out.println( rs.getInt( \"no\") );\n\n//close\nrs.close();\n\nstmt.close();\n\ncon.close();\n```\n\n###예제01\n```java\npublic List<GuestBookVO> getGuestBookList(){\n\t\tList<GuestBookVO> list = new ArrayList<>();\n\t\tGuestBookVO vo = null;\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\tResultSet rs = null;\n\t\ttry{\n\t\t\tconn = DBUtil.getConnection();\n\t\t\tString sql = \"select * from guestbook\";\n\t\t\tps = conn.prepareStatement(sql);\n\t\t\trs = ps.executeQuery();\n\t\t\twhile(rs.next()){\n\t\t\t\tvo = new GuestBookVO();\n\t\t\t\tvo.setNo(rs.getInt(1));\n\t\t\t\tvo.setId(rs.getString(2));\n\t\t\t\tvo.setTitle(rs.getString(3));\n\t\t\t\tvo.setConetnt(rs.getString(4));\n\t\t\t\tvo.setRegDate(rs.getString(5));\n\t\t\t\tlist.add(vo);\n\t\t\t}\n\t\t}catch(Exception e){\n\t\t\te.printStackTrace();\n\t\t}finally {\n\t\t\tDBUtil.close(conn, ps, rs);\n\t\t}\t\t\n\t\treturn list;\t\t\n\t}\n```\n\n###예제02\n\n```java\npublic int addGuestBook(GuestBookVO vo){\n\t\tint result = 0;\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\ttry{\n\t\t\tconn = DBUtil.getConnection();\n\t\t\tString sql = \"insert into guestbook values(\"\n\t\t\t\t\t+ \"guestbook_seq.nextval,?,?,?,sysdate)\";\n\t\t\tps = conn.prepareStatement(sql);\n\t\t\tps.setString(1, vo.getId());\n\t\t\tps.setString(2, vo.getTitle());\n\t\t\tps.setString(3, vo.getConetnt());\n\t\t\tresult = ps.executeUpdate();\n\t\t}catch(Exception e){\n\t\t\te.printStackTrace();\n\t\t}finally {\n\t\t\tDBUtil.close(conn, ps);\n\t\t}\n\t\t\n\t\treturn result;\n\t}\n```\n\n\n### 정리\n위의 두 예재를 보면 반복되는 부분이 많은데\n이것을 프레임워크화 하면 간편하게 사용할 수 있다.\n\n이 과정에서 앞으로 내가 사용할건 Spring 프레임 워크이다.\n\n\n","slug":"boostcourse-03-jdbc","published":1,"updated":"2022-01-06T14:20:12.125Z","_id":"cky31o1og00031trj22i6etl6","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"/images/boostcourse_01/1.PNG\"></p>\n<h3 id=\"JDBC란\"><a href=\"#JDBC란\" class=\"headerlink\" title=\"JDBC란\"></a>JDBC란</h3><hr>\n<p>JDBC(Java Database Connectivity)의 정의</p>\n<ul>\n<li>자바를 이용한 데이터베이스 접속과 SQL 문장의 실행, 그리고 실행 결과로 얻어진 데이터의 핸들링을 제공하는 방법과 절차에 관한 규약</li>\n<li>자바 프로그램 내에서 SQL문을 실행하기 위한 자바 API</li>\n<li>SQL과 프로그래밍 언어의 통합 접근 중 한 형태<br>JAVA는 표준 인터페이스인 JDBC API를 제공<br>데이터베이스 벤더, 또는 기타 써드파티에서는 JDBC 인터페이스를 구현한 드라이버(driver)를 제공한다.</li>\n</ul>\n<p>+<br>웹을 동작할때 프로그램이 데이터베이스를 사용할수 있게 이미 만들어진 툴이라고 생각하자</p>\n<h3 id=\"JDBC-환경-구성\"><a href=\"#JDBC-환경-구성\" class=\"headerlink\" title=\"JDBC 환경 구성\"></a>JDBC 환경 구성</h3><hr>\n<p>JDK 설치<br>JDBC 드라이버 설치</p>\n<ul>\n<li>Maven에 다음과 같은 의존성을 추가한다. MySQL사이트에서 다운로드 한다.</li>\n</ul>\n<dependency>   \n  <groupId>mysql</groupId>   \n       <artifactId>mysql-connector-java</artifactId>\n       <version>5.1.45</version>\n </dependency>\n\n\n\n<p>###JDBC를 이용한 프로그래밍 방법</p>\n<ol>\n<li>import java.sql.*;</li>\n<li>드라이버를 로드 한다.   </li>\n<li>Connection 객체를 생성한다.   //db에 접속</li>\n<li>Statement 객체를 생성 및 질의 수행  //쿼리 생성과 실행을 statement가 도와줌</li>\n<li>SQL문에 결과물이 있다면 ResultSet 객체를 생성한다.</li>\n<li>모든 객체를 닫는다.</li>\n</ol>\n<h3 id=\"JDBC-클래스의-생성-관계\"><a href=\"#JDBC-클래스의-생성-관계\" class=\"headerlink\" title=\"JDBC 클래스의 생성 관계\"></a>JDBC 클래스의 생성 관계</h3><p><img src=\"/images/boostcourse_01/6.PNG\"></p>\n<p>###JDBC 사용</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//import</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//드라이버 로드</span></span><br><span class=\"line\">Class.forName( <span class=\"string\">&quot;com.mysql.jdbc.Driver&quot;</span> );</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//connection 얻기</span></span><br><span class=\"line\">String dburl  = <span class=\"string\">&quot;jdbc:mysql://localhost/dbName&quot;</span>;</span><br><span class=\"line\">Connection con =  DriverManager.getConnection ( dburl, ID, PWD );</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//소스코드 예제</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Connection <span class=\"title\">getConnection</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">\tString url = <span class=\"string\">&quot;jdbc:oracle:thin:@117.16.46.111:1521:xe&quot;</span>;   <span class=\"comment\">//oracle</span></span><br><span class=\"line\">\tString user = <span class=\"string\">&quot;smu&quot;</span>;</span><br><span class=\"line\">\tString password = <span class=\"string\">&quot;smu&quot;</span>;</span><br><span class=\"line\">\tConnection conn = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\tClass.forName(<span class=\"string\">&quot;oracle.jdbc.driver.OracleDriver&quot;</span>);</span><br><span class=\"line\">\tconn = DriverManager.getConnection(url, user, password);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> conn;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//statement생성</span></span><br><span class=\"line\">Statement stmt = con.createStatement();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//질의 수행</span></span><br><span class=\"line\">ResultSet rs = stmt.executeQuery(<span class=\"string\">&quot;select no from user&quot;</span> );</span><br><span class=\"line\"></span><br><span class=\"line\">stmt.execute(“query”);             <span class=\"comment\">//any SQL</span></span><br><span class=\"line\">stmt.executeQuery(“query”);     <span class=\"comment\">//SELECT</span></span><br><span class=\"line\">stmt.executeUpdate(“query”);   <span class=\"comment\">//INSERT, UPDATE, DELETE</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//resultset으로 결과 받기</span></span><br><span class=\"line\">ResultSet rs =  stmt.executeQuery( <span class=\"string\">&quot;select no from user&quot;</span> );</span><br><span class=\"line\"><span class=\"keyword\">while</span> ( rs.next() )</span><br><span class=\"line\">      System.out.println( rs.getInt( <span class=\"string\">&quot;no&quot;</span>) );</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//close</span></span><br><span class=\"line\">rs.close();</span><br><span class=\"line\"></span><br><span class=\"line\">stmt.close();</span><br><span class=\"line\"></span><br><span class=\"line\">con.close();</span><br></pre></td></tr></table></figure>\n\n<p>###예제01</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;GuestBookVO&gt; <span class=\"title\">getGuestBookList</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\tList&lt;GuestBookVO&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">\t\tGuestBookVO vo = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\tConnection conn = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\tPreparedStatement ps = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\tResultSet rs = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">\t\t\tconn = DBUtil.getConnection();</span><br><span class=\"line\">\t\t\tString sql = <span class=\"string\">&quot;select * from guestbook&quot;</span>;</span><br><span class=\"line\">\t\t\tps = conn.prepareStatement(sql);</span><br><span class=\"line\">\t\t\trs = ps.executeQuery();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span>(rs.next())&#123;</span><br><span class=\"line\">\t\t\t\tvo = <span class=\"keyword\">new</span> GuestBookVO();</span><br><span class=\"line\">\t\t\t\tvo.setNo(rs.getInt(<span class=\"number\">1</span>));</span><br><span class=\"line\">\t\t\t\tvo.setId(rs.getString(<span class=\"number\">2</span>));</span><br><span class=\"line\">\t\t\t\tvo.setTitle(rs.getString(<span class=\"number\">3</span>));</span><br><span class=\"line\">\t\t\t\tvo.setConetnt(rs.getString(<span class=\"number\">4</span>));</span><br><span class=\"line\">\t\t\t\tvo.setRegDate(rs.getString(<span class=\"number\">5</span>));</span><br><span class=\"line\">\t\t\t\tlist.add(vo);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">catch</span>(Exception e)&#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">\t\t\tDBUtil.close(conn, ps, rs);</span><br><span class=\"line\">\t\t&#125;\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> list;\t\t</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n<p>###예제02</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">addGuestBook</span><span class=\"params\">(GuestBookVO vo)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> result = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\tConnection conn = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\tPreparedStatement ps = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">\t\t\tconn = DBUtil.getConnection();</span><br><span class=\"line\">\t\t\tString sql = <span class=\"string\">&quot;insert into guestbook values(&quot;</span></span><br><span class=\"line\">\t\t\t\t\t+ <span class=\"string\">&quot;guestbook_seq.nextval,?,?,?,sysdate)&quot;</span>;</span><br><span class=\"line\">\t\t\tps = conn.prepareStatement(sql);</span><br><span class=\"line\">\t\t\tps.setString(<span class=\"number\">1</span>, vo.getId());</span><br><span class=\"line\">\t\t\tps.setString(<span class=\"number\">2</span>, vo.getTitle());</span><br><span class=\"line\">\t\t\tps.setString(<span class=\"number\">3</span>, vo.getConetnt());</span><br><span class=\"line\">\t\t\tresult = ps.executeUpdate();</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">catch</span>(Exception e)&#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">\t\t\tDBUtil.close(conn, ps);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"정리\"><a href=\"#정리\" class=\"headerlink\" title=\"정리\"></a>정리</h3><p>위의 두 예재를 보면 반복되는 부분이 많은데<br>이것을 프레임워크화 하면 간편하게 사용할 수 있다.</p>\n<p>이 과정에서 앞으로 내가 사용할건 Spring 프레임 워크이다.</p>\n","site":{"data":{}},"excerpt":"JDBC란\n\n\n\nJDBC(Java Database Connectivity)의 정의\n\n * 자바를 이용한 데이터베이스 접속과 SQL 문장의 실행, 그리고 실행 결과로 얻어진 데이터의 핸들링을 제공하는 방법과 절차에 관한 규약\n * 자바 프로그램 내에서 SQL문을 실행하기 위한 자바 API\n * SQL과 프로그래밍 언어의 통합 접근 중 한 형태\n   JAVA는 표준 인터페이스인 JDBC API를 제공\n   데이터베이스 벤더, 또는 기타 써드파티에서는 JDBC 인터페이스를 구현한 드라이버(driver)를 제공한다.\n\n+\n웹을 동작할때 프","more":"<p><img src=\"/images/boostcourse_01/1.PNG\"></p>\n<h3 id=\"JDBC란\"><a href=\"#JDBC란\" class=\"headerlink\" title=\"JDBC란\"></a>JDBC란</h3><hr>\n<p>JDBC(Java Database Connectivity)의 정의</p>\n<ul>\n<li>자바를 이용한 데이터베이스 접속과 SQL 문장의 실행, 그리고 실행 결과로 얻어진 데이터의 핸들링을 제공하는 방법과 절차에 관한 규약</li>\n<li>자바 프로그램 내에서 SQL문을 실행하기 위한 자바 API</li>\n<li>SQL과 프로그래밍 언어의 통합 접근 중 한 형태<br>JAVA는 표준 인터페이스인 JDBC API를 제공<br>데이터베이스 벤더, 또는 기타 써드파티에서는 JDBC 인터페이스를 구현한 드라이버(driver)를 제공한다.</li>\n</ul>\n<p>+<br>웹을 동작할때 프로그램이 데이터베이스를 사용할수 있게 이미 만들어진 툴이라고 생각하자</p>\n<h3 id=\"JDBC-환경-구성\"><a href=\"#JDBC-환경-구성\" class=\"headerlink\" title=\"JDBC 환경 구성\"></a>JDBC 환경 구성</h3><hr>\n<p>JDK 설치<br>JDBC 드라이버 설치</p>\n<ul>\n<li>Maven에 다음과 같은 의존성을 추가한다. MySQL사이트에서 다운로드 한다.</li>\n</ul>\n<dependency>   \n  <groupId>mysql</groupId>   \n       <artifactId>mysql-connector-java</artifactId>\n       <version>5.1.45</version>\n </dependency>\n\n\n\n<p>###JDBC를 이용한 프로그래밍 방법</p>\n<ol>\n<li>import java.sql.*;</li>\n<li>드라이버를 로드 한다.   </li>\n<li>Connection 객체를 생성한다.   //db에 접속</li>\n<li>Statement 객체를 생성 및 질의 수행  //쿼리 생성과 실행을 statement가 도와줌</li>\n<li>SQL문에 결과물이 있다면 ResultSet 객체를 생성한다.</li>\n<li>모든 객체를 닫는다.</li>\n</ol>\n<h3 id=\"JDBC-클래스의-생성-관계\"><a href=\"#JDBC-클래스의-생성-관계\" class=\"headerlink\" title=\"JDBC 클래스의 생성 관계\"></a>JDBC 클래스의 생성 관계</h3><p><img src=\"/images/boostcourse_01/6.PNG\"></p>\n<p>###JDBC 사용</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//import</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//드라이버 로드</span></span><br><span class=\"line\">Class.forName( <span class=\"string\">&quot;com.mysql.jdbc.Driver&quot;</span> );</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//connection 얻기</span></span><br><span class=\"line\">String dburl  = <span class=\"string\">&quot;jdbc:mysql://localhost/dbName&quot;</span>;</span><br><span class=\"line\">Connection con =  DriverManager.getConnection ( dburl, ID, PWD );</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//소스코드 예제</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Connection <span class=\"title\">getConnection</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">\tString url = <span class=\"string\">&quot;jdbc:oracle:thin:@117.16.46.111:1521:xe&quot;</span>;   <span class=\"comment\">//oracle</span></span><br><span class=\"line\">\tString user = <span class=\"string\">&quot;smu&quot;</span>;</span><br><span class=\"line\">\tString password = <span class=\"string\">&quot;smu&quot;</span>;</span><br><span class=\"line\">\tConnection conn = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\tClass.forName(<span class=\"string\">&quot;oracle.jdbc.driver.OracleDriver&quot;</span>);</span><br><span class=\"line\">\tconn = DriverManager.getConnection(url, user, password);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> conn;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//statement생성</span></span><br><span class=\"line\">Statement stmt = con.createStatement();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//질의 수행</span></span><br><span class=\"line\">ResultSet rs = stmt.executeQuery(<span class=\"string\">&quot;select no from user&quot;</span> );</span><br><span class=\"line\"></span><br><span class=\"line\">stmt.execute(“query”);             <span class=\"comment\">//any SQL</span></span><br><span class=\"line\">stmt.executeQuery(“query”);     <span class=\"comment\">//SELECT</span></span><br><span class=\"line\">stmt.executeUpdate(“query”);   <span class=\"comment\">//INSERT, UPDATE, DELETE</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//resultset으로 결과 받기</span></span><br><span class=\"line\">ResultSet rs =  stmt.executeQuery( <span class=\"string\">&quot;select no from user&quot;</span> );</span><br><span class=\"line\"><span class=\"keyword\">while</span> ( rs.next() )</span><br><span class=\"line\">      System.out.println( rs.getInt( <span class=\"string\">&quot;no&quot;</span>) );</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//close</span></span><br><span class=\"line\">rs.close();</span><br><span class=\"line\"></span><br><span class=\"line\">stmt.close();</span><br><span class=\"line\"></span><br><span class=\"line\">con.close();</span><br></pre></td></tr></table></figure>\n\n<p>###예제01</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;GuestBookVO&gt; <span class=\"title\">getGuestBookList</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\tList&lt;GuestBookVO&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">\t\tGuestBookVO vo = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\tConnection conn = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\tPreparedStatement ps = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\tResultSet rs = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">\t\t\tconn = DBUtil.getConnection();</span><br><span class=\"line\">\t\t\tString sql = <span class=\"string\">&quot;select * from guestbook&quot;</span>;</span><br><span class=\"line\">\t\t\tps = conn.prepareStatement(sql);</span><br><span class=\"line\">\t\t\trs = ps.executeQuery();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span>(rs.next())&#123;</span><br><span class=\"line\">\t\t\t\tvo = <span class=\"keyword\">new</span> GuestBookVO();</span><br><span class=\"line\">\t\t\t\tvo.setNo(rs.getInt(<span class=\"number\">1</span>));</span><br><span class=\"line\">\t\t\t\tvo.setId(rs.getString(<span class=\"number\">2</span>));</span><br><span class=\"line\">\t\t\t\tvo.setTitle(rs.getString(<span class=\"number\">3</span>));</span><br><span class=\"line\">\t\t\t\tvo.setConetnt(rs.getString(<span class=\"number\">4</span>));</span><br><span class=\"line\">\t\t\t\tvo.setRegDate(rs.getString(<span class=\"number\">5</span>));</span><br><span class=\"line\">\t\t\t\tlist.add(vo);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">catch</span>(Exception e)&#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">\t\t\tDBUtil.close(conn, ps, rs);</span><br><span class=\"line\">\t\t&#125;\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> list;\t\t</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n<p>###예제02</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">addGuestBook</span><span class=\"params\">(GuestBookVO vo)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> result = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\tConnection conn = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\tPreparedStatement ps = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">\t\t\tconn = DBUtil.getConnection();</span><br><span class=\"line\">\t\t\tString sql = <span class=\"string\">&quot;insert into guestbook values(&quot;</span></span><br><span class=\"line\">\t\t\t\t\t+ <span class=\"string\">&quot;guestbook_seq.nextval,?,?,?,sysdate)&quot;</span>;</span><br><span class=\"line\">\t\t\tps = conn.prepareStatement(sql);</span><br><span class=\"line\">\t\t\tps.setString(<span class=\"number\">1</span>, vo.getId());</span><br><span class=\"line\">\t\t\tps.setString(<span class=\"number\">2</span>, vo.getTitle());</span><br><span class=\"line\">\t\t\tps.setString(<span class=\"number\">3</span>, vo.getConetnt());</span><br><span class=\"line\">\t\t\tresult = ps.executeUpdate();</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">catch</span>(Exception e)&#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">\t\t\tDBUtil.close(conn, ps);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"정리\"><a href=\"#정리\" class=\"headerlink\" title=\"정리\"></a>정리</h3><p>위의 두 예재를 보면 반복되는 부분이 많은데<br>이것을 프레임워크화 하면 간편하게 사용할 수 있다.</p>\n<p>이 과정에서 앞으로 내가 사용할건 Spring 프레임 워크이다.</p>\n"},{"title":"톰캣 설치와 초기 설정 | 부스트코스 백엔드 06","date":"2022-01-02T15:00:00.000Z","toc":true,"_content":"\n\n\n네이버 블로그에 정리한거 다시 정리하기!!\n\n###Apache Tomcat이란?\n세계에서 가장 많이 사용되는 WAS(Web Application Server)이다.\n컴퓨터에 운영체제를 설치해야만 컴퓨터를 사용할 수 있는 것처럼, 자바를 이용하여 작성된 웹 어플리케이션은 WAS가 있어야만 실행 가능하다.\n\n\n<br>\n\n### 간단한 웹 어플리케이션 만들어보기\nnew -> servlet -> 이름 Helloservlet으로 설정해줌\nhttp://localhost:8080/{프로젝트이름}/{URL Mapping값}\nhttp://localhost:8080/firstweb/Helloservlet\n\n```java\n\tprotected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\t\tresponse.setContentType(\"text/html;charset=UTF-8\");\n\t\tPrintWriter out = response.getWriter();\n\t\tout.print(\"<h1>Hello Servlet</h1>\");\n\t\t\n\t\t}\n\n```\n위의 코드처럼 간단한 예제를 수행해보았다\ndoGet()메서드만 수정해주었다\n\n실행결과\n![](/images/boostcourse_01/8.PNG)\n![](/images/boostcourse_01/9.PNG)\n\n<br>\n\n### doGet() 메서드 \n웹서버가 get메서드 방식으로 요청을 보낼때 서블릿에 doGet()메서드가 호출이 된다\nget 메서드는 웹브라우저가 서버에게 문서를 요청할때 사용하는 방식\n\n<br>\n\n### 크롬 브라우저에서 보는법\nWindow -> Web Browser -> Chrome\n으로 설정하면 크롬에서 확인이 가능하다\n\n\n\n<br>\n\n\n\n\n\n\n\n\n\n","source":"_posts/boostcourse_06_tomcat.md","raw":"---\ntitle: 톰캣 설치와 초기 설정 | 부스트코스 백엔드 06\ndate: 2022-01-03\ntags: tomcat\ntoc: true\ncategories: \n- boostcourse 백엔드\n---\n\n\n\n네이버 블로그에 정리한거 다시 정리하기!!\n\n###Apache Tomcat이란?\n세계에서 가장 많이 사용되는 WAS(Web Application Server)이다.\n컴퓨터에 운영체제를 설치해야만 컴퓨터를 사용할 수 있는 것처럼, 자바를 이용하여 작성된 웹 어플리케이션은 WAS가 있어야만 실행 가능하다.\n\n\n<br>\n\n### 간단한 웹 어플리케이션 만들어보기\nnew -> servlet -> 이름 Helloservlet으로 설정해줌\nhttp://localhost:8080/{프로젝트이름}/{URL Mapping값}\nhttp://localhost:8080/firstweb/Helloservlet\n\n```java\n\tprotected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\t\tresponse.setContentType(\"text/html;charset=UTF-8\");\n\t\tPrintWriter out = response.getWriter();\n\t\tout.print(\"<h1>Hello Servlet</h1>\");\n\t\t\n\t\t}\n\n```\n위의 코드처럼 간단한 예제를 수행해보았다\ndoGet()메서드만 수정해주었다\n\n실행결과\n![](/images/boostcourse_01/8.PNG)\n![](/images/boostcourse_01/9.PNG)\n\n<br>\n\n### doGet() 메서드 \n웹서버가 get메서드 방식으로 요청을 보낼때 서블릿에 doGet()메서드가 호출이 된다\nget 메서드는 웹브라우저가 서버에게 문서를 요청할때 사용하는 방식\n\n<br>\n\n### 크롬 브라우저에서 보는법\nWindow -> Web Browser -> Chrome\n으로 설정하면 크롬에서 확인이 가능하다\n\n\n\n<br>\n\n\n\n\n\n\n\n\n\n","slug":"boostcourse-06-tomcat","published":1,"updated":"2022-01-06T14:20:12.119Z","_id":"cky31phnq00002srjezixbznn","comments":1,"layout":"post","photos":[],"link":"","content":"<p>네이버 블로그에 정리한거 다시 정리하기!!</p>\n<p>###Apache Tomcat이란?<br>세계에서 가장 많이 사용되는 WAS(Web Application Server)이다.<br>컴퓨터에 운영체제를 설치해야만 컴퓨터를 사용할 수 있는 것처럼, 자바를 이용하여 작성된 웹 어플리케이션은 WAS가 있어야만 실행 가능하다.</p>\n<br>\n\n<h3 id=\"간단한-웹-어플리케이션-만들어보기\"><a href=\"#간단한-웹-어플리케이션-만들어보기\" class=\"headerlink\" title=\"간단한 웹 어플리케이션 만들어보기\"></a>간단한 웹 어플리케이션 만들어보기</h3><p>new -&gt; servlet -&gt; 이름 Helloservlet으로 설정해줌<br><a href=\"http://localhost:8080/%7B%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EC%9D%B4%EB%A6%84%7D/%7BURL\">http://localhost:8080/{프로젝트이름}/{URL</a> Mapping값}<br><a href=\"http://localhost:8080/firstweb/Helloservlet\">http://localhost:8080/firstweb/Helloservlet</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\tresponse.setContentType(<span class=\"string\">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class=\"line\">\tPrintWriter out = response.getWriter();</span><br><span class=\"line\">\tout.print(<span class=\"string\">&quot;&lt;h1&gt;Hello Servlet&lt;/h1&gt;&quot;</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>위의 코드처럼 간단한 예제를 수행해보았다<br>doGet()메서드만 수정해주었다</p>\n<p>실행결과<br><img src=\"/images/boostcourse_01/8.PNG\"><br><img src=\"/images/boostcourse_01/9.PNG\"></p>\n<br>\n\n<h3 id=\"doGet-메서드\"><a href=\"#doGet-메서드\" class=\"headerlink\" title=\"doGet() 메서드\"></a>doGet() 메서드</h3><p>웹서버가 get메서드 방식으로 요청을 보낼때 서블릿에 doGet()메서드가 호출이 된다<br>get 메서드는 웹브라우저가 서버에게 문서를 요청할때 사용하는 방식</p>\n<br>\n\n<h3 id=\"크롬-브라우저에서-보는법\"><a href=\"#크롬-브라우저에서-보는법\" class=\"headerlink\" title=\"크롬 브라우저에서 보는법\"></a>크롬 브라우저에서 보는법</h3><p>Window -&gt; Web Browser -&gt; Chrome<br>으로 설정하면 크롬에서 확인이 가능하다</p>\n<br>\n\n\n\n\n\n\n\n\n\n","site":{"data":{}},"excerpt":"네이버 블로그에 정리한거 다시 정리하기!!\n\n###Apache Tomcat이란?\n세계에서 가장 많이 사용되는 WAS(Web Application Server)이다.\n컴퓨터에 운영체제를 설치해야만 컴퓨터를 사용할 수 있는 것처럼, 자바를 이용하여 작성된 웹 어플리케이션은 WAS가 있어야만 실행 가능하다.\n\n\n간단한 웹 어플리케이션 만들어보기\nnew -> servlet -> 이름 Helloservlet으로 설정해줌\nhttp://localhost:8080/{프로젝트이름}/{URL Mapping값}\nhttp://localhost:8080/","more":"<p>네이버 블로그에 정리한거 다시 정리하기!!</p>\n<p>###Apache Tomcat이란?<br>세계에서 가장 많이 사용되는 WAS(Web Application Server)이다.<br>컴퓨터에 운영체제를 설치해야만 컴퓨터를 사용할 수 있는 것처럼, 자바를 이용하여 작성된 웹 어플리케이션은 WAS가 있어야만 실행 가능하다.</p>\n<br>\n\n<h3 id=\"간단한-웹-어플리케이션-만들어보기\"><a href=\"#간단한-웹-어플리케이션-만들어보기\" class=\"headerlink\" title=\"간단한 웹 어플리케이션 만들어보기\"></a>간단한 웹 어플리케이션 만들어보기</h3><p>new -&gt; servlet -&gt; 이름 Helloservlet으로 설정해줌<br><a href=\"http://localhost:8080/%7B%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EC%9D%B4%EB%A6%84%7D/%7BURL\">http://localhost:8080/{프로젝트이름}/{URL</a> Mapping값}<br><a href=\"http://localhost:8080/firstweb/Helloservlet\">http://localhost:8080/firstweb/Helloservlet</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\tresponse.setContentType(<span class=\"string\">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class=\"line\">\tPrintWriter out = response.getWriter();</span><br><span class=\"line\">\tout.print(<span class=\"string\">&quot;&lt;h1&gt;Hello Servlet&lt;/h1&gt;&quot;</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>위의 코드처럼 간단한 예제를 수행해보았다<br>doGet()메서드만 수정해주었다</p>\n<p>실행결과<br><img src=\"/images/boostcourse_01/8.PNG\"><br><img src=\"/images/boostcourse_01/9.PNG\"></p>\n<br>\n\n<h3 id=\"doGet-메서드\"><a href=\"#doGet-메서드\" class=\"headerlink\" title=\"doGet() 메서드\"></a>doGet() 메서드</h3><p>웹서버가 get메서드 방식으로 요청을 보낼때 서블릿에 doGet()메서드가 호출이 된다<br>get 메서드는 웹브라우저가 서버에게 문서를 요청할때 사용하는 방식</p>\n<br>\n\n<h3 id=\"크롬-브라우저에서-보는법\"><a href=\"#크롬-브라우저에서-보는법\" class=\"headerlink\" title=\"크롬 브라우저에서 보는법\"></a>크롬 브라우저에서 보는법</h3><p>Window -&gt; Web Browser -&gt; Chrome<br>으로 설정하면 크롬에서 확인이 가능하다</p>\n<br>\n\n\n\n\n\n\n\n\n\n"},{"title":"Servlet | 부스트코스 백엔드 07","date":"2022-01-02T15:00:00.000Z","toc":true,"_content":"\n\n\n\n### 자바 웹 어플리케이션\nWAS에 설치되어 동작하는 어플리케이션\n자바 웹 어플리케이션에는 HTML, CSS, 이미지, 자바로 작성된 클래스(Servlet도 포함됨, package, 인터페이스 등), 각종 설정 파일 등이 포함됩니다.\n\n\n내가 인터넷에서 사용하는 쇼핑몰 블로그가 웹 어플리케이션이라고 말 할 수 있다.\n앞에서 만든건 서블릿으로만 이루어진 아주아주아주 간단한 웹 어플리케이션이라고 할 수 있다.\n\n<br>\n\n### 자바 웹 어플리케이션 폴더 구조\n- **WEB-INF**\n이 폴더 안에는 web.xml이 있다.\nweb.xml은 배포 기술자라고도 하고, 웹 어플리케이션에 대한 정보를 다 가지고 있는 파일이라고 할 수 있다.\nWEB-INF폴더 하위 폴더로 lib라는 폴더,classes 라는 폴더가 존재함\n\n- web.xml\nhttps://lordofkangs.tistory.com/35\nWEB-INF 폴더 밖은 접근 가능하지만, WEB-INF 폴더 안의 서블릿에는 접근이 불가능하다\n이때 WEB-INF 폴더 안의 서블릿에 접근 하기 위해서 진짜 경로를 숨기고 가짜 경로를 만들어 외부 접근으로부터\n서버로직을 보호할 수 있다.\n\n- lib폴더\n각종 jars 파일\n\n- classes 폴더 \njava 패키지, 컴파일 된 class 들..\n내가 작성한 서블릿 파일이 들어감\n\n\n- 리소스들\n각종 폴더, 이미지, 다양한 리소스들\n\n<br>\n\n\n### Servlet\n자바 웹 어플리케이션의 구성 요소 중 동적인 처리를 하는 프로그램의 역할\n동적으로 만들어 낸다는 것은!\n이미 응답할 페이지를 만들어서 가지고 있는게 아니라 , 요청이 들어왔을때 프로그램이 실행되면서\n응답할 코드를 만들어 내고 그 코드로 응답을 하는 것을 말한다.\n\n\n서블릿을 정의해보면 서블릿(servlet)은 WAS에 동작하는 JAVA 클래스입니다. \n\n서블릿은 HttpServlet 클래스를 상속받아야 합니다.\n\n서블릿과 JSP로부터 최상의 결과를 얻으려면, 웹 페이지를 개발할 때 이 두 가지(JSP, 서블릿)를 조화롭게 사용해야 합니다.\n\n예를 들어, 웹 페이지를 구성하는 화면(HTML)은 JSP로 표현하고, 복잡한 프로그래밍은 서블릿으로 구현합니다.\n\n<br>\n\n###Servlet 작성방법\n두가지가 있는데 \n- Servlet 3.0 이상일때 어노테이션을 사용한다\n- Servlet 3.0 미만에서는 web.xml  파일에 직접 적어서 한다\n\n현재 실무에서는 웹을 개발할때 서블릿을 써서 개발하지 않음\n조금 더 편하게 사용할 수 있게 도와주는 다양한 프레임 워크를 사용한다.\n\n하지만 프레임 워크들도 서블릿 없이는 동작 할 수 없기 때문에 서블릿의 기본적인 작성법이나, 서블릿의 라이프사이클을 이해할 줄 알면 좋다.\n\n<br>\n\n\n\n### Servlet 3.0 이상 방법에서 작성해보기\n새로운 다이나믹 웹 프로젝트를 만들때 Dynamic web module versiond을 3.1로 설정 하였다.\n\n\n- HttpServletRequest request, HttpServletResponse response\n클라이언트가 요청 -> 서버가 응답\n클라이언트가 요청할때 서버가 요청을 받아내는 객체와 응답을 하기 위한 객체를 두개를 자동을 만든다.\n요청에 대한 객체는 HttpServletRequest, 응답에 관한 객체는 HttpServletResponse에 담아둔다고 생각하면 된다.\n\n\n\n```java\n@WebServlet(\"/Ten\")\npublic class TenServlet extends HttpServlet {\n\tprivate static final long serialVersionUID = 1L;\n       \n    /**\n     * @see HttpServlet#HttpServlet()\n     */\n    public TenServlet() {\n        super();\n        // TODO Auto-generated constructor stub\n    }\n\n\t/**\n\t * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)\n\t */\n\tprotected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\t\tresponse.setContentType(\"text/html;charset=utf-8\");\n\t\tPrintWriter out = response.getWriter();\n\t\tout.println(\"<h1>1-10까지 출력 <h1>\");\n\t\tfor(int i = 1; i<=10; i++) {\n\t\t\tout.println(i + \"<br>\");\n\t\t\t\n\t\t}\n\n```\n\n- response.setContentType(\"text/html;charset=utf-8\");\n파일의 형식이 뭔지 알려준다\n위는 html임을 확인 할 수 있다.\n\n- PrintWriter out = response.getWriter();\nresponse 객체에 getWriter() 메서드가 존재하는데, \ngetWriter()라는 메서드를 수행하면 PrintWriter 객체가 반환 된다\n\n- @WebServlet(\"/Ten\")\nurl 주소값이다\n위의 코드의 주소가 http://localhost:8080/exam31/Ten로 설정 됨을 확인 할 수 있다\n\n<br>\n\n\n### Servlet 3.0 미만의 방법에서 작성해보기\n새로운 다이나믹 웹 프로젝트를 만들때 Dynamic web module versiond을 2.5로 설정 하였다.\n3.1과는 다르게 web.xml이 자동으로 만들어진다 (3.1은 프로젝트 만들면서 따로 체크해줘야함)\n\n```java\npublic class TenServlet extends HttpServlet {\n\tprivate static final long serialVersionUID = 1L;\n       \n    /**\n     * @see HttpServlet#HttpServlet()\n     */\n    public TenServlet() {\n        super();\n        // TODO Auto-generated constructor stub\n    }\n\n\t/**\n\t * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)\n\t */\n\tprotected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\t\t// TODO Auto-generated method stub\n\t\tresponse.getWriter().append(\"Served at: \").append(request.getContextPath());\n\t}\n\n\t/**\n\t * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)\n\t */\n\tprotected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\t\t// TODO Auto-generated method stub\n\t\tdoGet(request, response);\n\t}\n\n}\n\n```\n\n\n\n- 3.0미만의 버전은 어노테이션이 없다\n\n\n아래는 web.xml의 일부이다\n\n```java\n  <servlet>\n    <description></description>\n    <display-name>TenServlet</display-name>\n    <servlet-name>TenServlet</servlet-name>\n    <servlet-class>exam.TenServlet</servlet-class>\n  </servlet>\n  <servlet-mapping>\n    <servlet-name>TenServlet</servlet-name>\n    <url-pattern>/Ten</url-pattern>\n  </servlet-mapping>\n</web-app>\n\n```\n\nurl이 /ten이라는 요청이 들어오면 \n-> URL mapping에서 찾아낸다 url이 존재한다면 (존재안하면 404)\n-> <servlet-name>을 확인하고 이름이 TenServlet과 같은 이름을 <servlet> 에서 확인한다\n-> 서블릿을 찾아서 실행시킬 서블릿이 누군지 <servlet-class>에서 찾을 수 있다\n\n3.0이상의 버전에서는 어노테이션이 위의 같은 역할을 한다\n\n<br>\n\n\n### Servlet 라이프 싸이클 | \n서블릿이 언제 생성되고 이런 메서드들이 언제 호출이 되는지 알아볼 수 있다.\n```java\npackage examples;\n\nimport java.io.IOException;\nimport javax.servlet.ServletConfig;\nimport javax.servlet.ServletException;\nimport javax.servlet.annotation.WebServlet;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\n\n@WebServlet(\"/LifecycleServlet\")\npublic class LifecycleServlet extends HttpServlet {\n\tprivate static final long serialVersionUID = 1L;\n       \n\n    public LifecycleServlet() {\n        System.out.println(\"LifecycleServlet 생성\");  //콘솔에 출력\n    }\n\n    public void init(ServletConfig config) throws ServletException {\n        System.out.println(\"init 호출\");\n\t}\n\n    public void destroy() {\n        System.out.println(\"destroy 호출\");\n\t}\n\n    protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        System.out.println(\"service 호출\");\n\t}\n\n}\n\n\n```\n\tLifecycleServlet 생성\n\tinit 호출\n\tservice 호출\n\n위의 결과가 콘솔에 출력됨\n최초로 LifecycleServlet를 호출시 객체가 만들어지면서\n생성자가 만들어진다 따라서 생성자에 넣어준 메세지가 출력된다 -> LifecycleServlet 생성\n\n<br>\n \nservice 호출\n브라우저 새로고침시 저 한줄만 나온다\n서블릿은 서버에 객체를 여러번 만들지 않음\n요청된 객체가 메모리에 있는지 없는지 확인하고, 있으면 service라는 메서드만 호출한다\n\n<br>\n\ndestroy 호출\n서블릿이 수정되면 현재 메모리에 올라가 있는 서블릿 객체가 더 이상 사용될 수 없다\n이때 destroy 되면서 메모리에 객체를 삭제함\n\n\n\n- 정리\nServlet 생명주기\n\nWAS는 서블릿 요청을 받으면 해당 서블릿이 메모리에 있는지 확인합니다.\n if (메모리에 없음) {\n - 해당 서블릿 클래스를 메모리에 올림\n - init() 메소드를 실행\n}\n - service()메소드를 실행\nwas가 종료되거나, 웹 어플리케이션이 새롭게 갱신될 경우 destroy() 메소드가 실행됩니다.\n \n<br>\n\n### service (request, response) 메서드\nservice()메서드는 httpservlet에 구현이 되어 있다\nservice(request, response) 메소드\n\nHttpServlet의 service메소드는 템플릿 메소드 패턴으로 구현합니다.\n- 클라이언트의 요청이 GET일 경우에는 자신이 가지고 있는 doGet(request, response)메소드를 호출\n- 클라이언트의 요청이 Post일 경우에는 자신이 가지고 있는 doPost(request, response)를 호출\n\n\n예제\n\n```java\npackage examples;\n\nimport java.io.IOException;\nimport java.io.PrintWriter;\n\nimport javax.servlet.ServletConfig;\nimport javax.servlet.ServletException;\nimport javax.servlet.annotation.WebServlet;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\n\n@WebServlet(\"/LifecycleServlet\")\npublic class LifecycleServlet extends HttpServlet {\n\tprivate static final long serialVersionUID = 1L;\n       \n \n    public LifecycleServlet() {\n        System.out.println(\"LifecycleServlet 생성!!\");\n    }\n\n\tpublic void init(ServletConfig config) throws ServletException {\n\t\tSystem.out.println(\"init test 호출!!\");\n\t}\n\n\t\n\tpublic void destroy() {\n\t\tSystem.out.println(\"destroy 호출!!\");\n\t}\n\n\t@Override\n\tprotected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\t\tresponse.setContentType(\"text/html\");\n\t\tPrintWriter out = response.getWriter();\n\t\tout.println(\"<html>\");\n\t\tout.println(\"<head><title>form</title></head>\");\n\t\tout.println(\"<body>\");\n\t\tout.println(\"<form method='post' action='/firstweb/LifecycleServlet'>\");\n\t\tout.println(\"name : <input type='text' name='name'><br>\");\n\t\tout.println(\"<input type='submit' value='ok'><br>\");                                                 \n\t\tout.println(\"</form>\");\n\t\tout.println(\"</body>\");\n\t\tout.println(\"</html>\");\n\t\tout.close();\n\t}\n\n\tprotected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\t\tresponse.setContentType(\"text/html\");\n\t\tPrintWriter out = response.getWriter();\n\t\tString name = request.getParameter(\"name\");\n\t\tout.println(\"<h1> hello \" + name + \"</h1>\");\n\t\tout.close();\n\t}\n\n//\tprotected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n//\t\tSystem.out.println(\"service 호출!!\");\n//\t}\n//\t\n\t\n\n}\n\n```\n\n해당 서블릿의 url주소를 입력하거나, 링크를 클릭하는 것은 GET방식으로 서버에 요청을 보내는 것이다\n이 경우에 service  메서드가 호출이 되면서 doGet()메서드를 호출\n\n<form method='post' \n위는 코드 일부로 post로 설정되어서 ok라는 버튼이 눌렸을때 메서드 doPost가 실행된다\n\n\n![](/images/boostcourse_01/10.PNG)\n\n<br>\n\n아래처럼 요청이 들어가면 doPost 메서드가 실행된다\nrequest는 요청 정보를 추상화해서 가지고 있는 객체 인데\n위의 input상자 안에 있는  name의 값을 찾아서 String name에 넣어준다\n따라서 아래의 결과가 출력된다\n\n![](/images/boostcourse_01/11.PNG)\n\n프로그램이 동작하면서 응답 결과가 매번 바뀐다\n => 동적페이지\n\n<br>\n\n### HttpServletRequest와 HttpServletResponse (객체)\n\n웹 브라우저는 도메인과 포트번호를 이용해서 서버에 접속\n-> path 정보, 클라이언트의 IP, 클라이언트의 다양한 정보를 포함한 요청정보를 서버에 전송\n-> 클라이언트로부터 요청이 들어오면\n-> WAS는 HttpServletRequest와 HttpServletResponse 객체를 생성한다\n-> HttpServletRequest는 요청할떄 가지고 들어온 다양한 정보를 담는다\n-> HttpServletResponse는 요청을 보낸 클라이언트에게 보낼 정보를 담는다\n-> 이렇게 생성된 두개의 객체를 요청정보의 path로 매핑된 서블릿에 전달\n-> 이렇게 전달한 객체는 service(), doGet(), doPost() 같은 메서드의 파라미터로 전달되어서 사용한다\n\n![](/images/boostcourse_01/12.PNG)\n\n\n- HttpServletRequest\nhttp프로토콜의 request정보를 서블릿에게 전달하기 위한 목적으로 사용합니다.\n헤더정보, 파라미터, 쿠키, URI, URL 등의 정보를 읽어 들이는 메소드를 가지고 있습니다.\nBody의 Stream을 읽어 들이는 메소드를 가지고 있습니다.\n\n\n- HttpServletResponse\nWAS는 어떤 클라이언트가 요청을 보냈는지 알고 있고, 해당 클라이언트에게 응답을 보내기 위한 HttpServleResponse객체를 생성하여 서블릿에게 전달합니다.\n서블릿은 해당 객체를 이용하여 content type, 응답코드, 응답 메시지등을 전송합니다.\n\n<br>\n\n### 헤더 정보 읽어들이기\n```java\n\n@WebServlet(\"/header\")\npublic class HeaderServlet extends HttpServlet {\n\tprivate static final long serialVersionUID = 1L;\n\n    public HeaderServlet() {\n        super();\n        // TODO Auto-generated constructor stub\n    }\n\t\n\tprotected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\t\tresponse.setContentType(\"text/html\");\n\t\tPrintWriter out = response.getWriter();\n\t\tout.println(\"<html>\");\n\t\tout.println(\"<head><title>form</title></head>\");\n\t\tout.println(\"<body>\");\n\n\t\tEnumeration<String> headerNames = request.getHeaderNames();\n\t\twhile(headerNames.hasMoreElements()) {\n\t\t\tString headerName = headerNames.nextElement();\n\t\t\tString headerValue = request.getHeader(headerName);\n\t\t\tout.println(headerName + \" : \" + headerValue + \" <br> \");\n\t\t}\t\t\n\t\t\n\t\tout.println(\"</body>\");\n\t\tout.println(\"</html>\");\n\t}\n\n\tprotected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\t\t// TODO Auto-generated method stub\n\t\tdoGet(request, response);\n\t}\n\n}\n\n```\n\n위에 예제에서는 doGet 메서드를 오버라이드 하였다\n(뭘하던 상관 없다)\n\n\n\n\n\n\n\n\tEnumeration<String> headerNames = request.getHeaderNames();\n\t\t\twhile(headerNames.hasMoreElements()) {\n\t\t\t\tString headerName = headerNames.nextElement();\n\t\t\t\tString headerValue = request.getHeader(headerName);\n\t\t\t\tout.println(headerName + \" : \" + headerValue + \" <br> \");\n\t\t\t}\t\t\n\n\n- getHeaderNames()\nrequest가 getHeaderNames() 라는 메서드를 가지고 있음\n이 메서드는 모든 헤더 이름을 문자열 Enumeration 객체로 반환해준다\n\n- Enumeration \n내가 자바에서 배우지 못한 부분이다.\n인터넷을 찾아보니 그렇게 어려운 개념은 아닌것같다. 블로그에 추후에 따로 정리해서 올리도록 해야겠다\n위의 예제를 해석하면 \n\nheaderNames 객체에 다음 데이터가 존재하면 while문을 반복한다\nheaderNames의 데이터 값을 headerName 변수에 대입,\nrequest가 가지고 있는 getHeader를 통해 headerValue를 알아내 headerValue에 대입한다.\n\n![](/images/boostcourse_01/13.PNG)\n\n<br>\n\n\n### 파라미터 읽어들이기\n\n\n```java\nprotected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\t\tresponse.setContentType(\"text/html\");\n\t\tPrintWriter out = response.getWriter();\n\t\tout.println(\"<html>\");\n\t\tout.println(\"<head><title>form</title></head>\");\n\t\tout.println(\"<body>\");\n\n\t\tString name = request.getParameter(\"name\");\n\t\tString age = request.getParameter(\"age\");\n\t\t\n\t\tout.println(\"name : \" + name + \"<br>\");\n\t\tout.println(\"age : \" +age + \"<br>\");\n\t\t\n\t\tout.println(\"</body>\");\n\t\tout.println(\"</html>\");\n\t}\n\n```\n\nhttp://localhost8080/firstweb/param?name=jeewon&age=20\n위의 링크의 파라미터 값을\nname: jeewon\nage: 20\n로 정해줘서 위의 코드를 실행했을때 결과값도 파라미터 값과 동일하게 나온다\n\n<br>\n<br>\n<br>","source":"_posts/boostcourse_07_servlet.md","raw":"---\ntitle: Servlet | 부스트코스 백엔드 07\ndate: 2022-01-03\ntags: servlet, web.xml\ntoc: true\ncategories: \n- boostcourse 백엔드\n---\n\n\n\n\n### 자바 웹 어플리케이션\nWAS에 설치되어 동작하는 어플리케이션\n자바 웹 어플리케이션에는 HTML, CSS, 이미지, 자바로 작성된 클래스(Servlet도 포함됨, package, 인터페이스 등), 각종 설정 파일 등이 포함됩니다.\n\n\n내가 인터넷에서 사용하는 쇼핑몰 블로그가 웹 어플리케이션이라고 말 할 수 있다.\n앞에서 만든건 서블릿으로만 이루어진 아주아주아주 간단한 웹 어플리케이션이라고 할 수 있다.\n\n<br>\n\n### 자바 웹 어플리케이션 폴더 구조\n- **WEB-INF**\n이 폴더 안에는 web.xml이 있다.\nweb.xml은 배포 기술자라고도 하고, 웹 어플리케이션에 대한 정보를 다 가지고 있는 파일이라고 할 수 있다.\nWEB-INF폴더 하위 폴더로 lib라는 폴더,classes 라는 폴더가 존재함\n\n- web.xml\nhttps://lordofkangs.tistory.com/35\nWEB-INF 폴더 밖은 접근 가능하지만, WEB-INF 폴더 안의 서블릿에는 접근이 불가능하다\n이때 WEB-INF 폴더 안의 서블릿에 접근 하기 위해서 진짜 경로를 숨기고 가짜 경로를 만들어 외부 접근으로부터\n서버로직을 보호할 수 있다.\n\n- lib폴더\n각종 jars 파일\n\n- classes 폴더 \njava 패키지, 컴파일 된 class 들..\n내가 작성한 서블릿 파일이 들어감\n\n\n- 리소스들\n각종 폴더, 이미지, 다양한 리소스들\n\n<br>\n\n\n### Servlet\n자바 웹 어플리케이션의 구성 요소 중 동적인 처리를 하는 프로그램의 역할\n동적으로 만들어 낸다는 것은!\n이미 응답할 페이지를 만들어서 가지고 있는게 아니라 , 요청이 들어왔을때 프로그램이 실행되면서\n응답할 코드를 만들어 내고 그 코드로 응답을 하는 것을 말한다.\n\n\n서블릿을 정의해보면 서블릿(servlet)은 WAS에 동작하는 JAVA 클래스입니다. \n\n서블릿은 HttpServlet 클래스를 상속받아야 합니다.\n\n서블릿과 JSP로부터 최상의 결과를 얻으려면, 웹 페이지를 개발할 때 이 두 가지(JSP, 서블릿)를 조화롭게 사용해야 합니다.\n\n예를 들어, 웹 페이지를 구성하는 화면(HTML)은 JSP로 표현하고, 복잡한 프로그래밍은 서블릿으로 구현합니다.\n\n<br>\n\n###Servlet 작성방법\n두가지가 있는데 \n- Servlet 3.0 이상일때 어노테이션을 사용한다\n- Servlet 3.0 미만에서는 web.xml  파일에 직접 적어서 한다\n\n현재 실무에서는 웹을 개발할때 서블릿을 써서 개발하지 않음\n조금 더 편하게 사용할 수 있게 도와주는 다양한 프레임 워크를 사용한다.\n\n하지만 프레임 워크들도 서블릿 없이는 동작 할 수 없기 때문에 서블릿의 기본적인 작성법이나, 서블릿의 라이프사이클을 이해할 줄 알면 좋다.\n\n<br>\n\n\n\n### Servlet 3.0 이상 방법에서 작성해보기\n새로운 다이나믹 웹 프로젝트를 만들때 Dynamic web module versiond을 3.1로 설정 하였다.\n\n\n- HttpServletRequest request, HttpServletResponse response\n클라이언트가 요청 -> 서버가 응답\n클라이언트가 요청할때 서버가 요청을 받아내는 객체와 응답을 하기 위한 객체를 두개를 자동을 만든다.\n요청에 대한 객체는 HttpServletRequest, 응답에 관한 객체는 HttpServletResponse에 담아둔다고 생각하면 된다.\n\n\n\n```java\n@WebServlet(\"/Ten\")\npublic class TenServlet extends HttpServlet {\n\tprivate static final long serialVersionUID = 1L;\n       \n    /**\n     * @see HttpServlet#HttpServlet()\n     */\n    public TenServlet() {\n        super();\n        // TODO Auto-generated constructor stub\n    }\n\n\t/**\n\t * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)\n\t */\n\tprotected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\t\tresponse.setContentType(\"text/html;charset=utf-8\");\n\t\tPrintWriter out = response.getWriter();\n\t\tout.println(\"<h1>1-10까지 출력 <h1>\");\n\t\tfor(int i = 1; i<=10; i++) {\n\t\t\tout.println(i + \"<br>\");\n\t\t\t\n\t\t}\n\n```\n\n- response.setContentType(\"text/html;charset=utf-8\");\n파일의 형식이 뭔지 알려준다\n위는 html임을 확인 할 수 있다.\n\n- PrintWriter out = response.getWriter();\nresponse 객체에 getWriter() 메서드가 존재하는데, \ngetWriter()라는 메서드를 수행하면 PrintWriter 객체가 반환 된다\n\n- @WebServlet(\"/Ten\")\nurl 주소값이다\n위의 코드의 주소가 http://localhost:8080/exam31/Ten로 설정 됨을 확인 할 수 있다\n\n<br>\n\n\n### Servlet 3.0 미만의 방법에서 작성해보기\n새로운 다이나믹 웹 프로젝트를 만들때 Dynamic web module versiond을 2.5로 설정 하였다.\n3.1과는 다르게 web.xml이 자동으로 만들어진다 (3.1은 프로젝트 만들면서 따로 체크해줘야함)\n\n```java\npublic class TenServlet extends HttpServlet {\n\tprivate static final long serialVersionUID = 1L;\n       \n    /**\n     * @see HttpServlet#HttpServlet()\n     */\n    public TenServlet() {\n        super();\n        // TODO Auto-generated constructor stub\n    }\n\n\t/**\n\t * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)\n\t */\n\tprotected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\t\t// TODO Auto-generated method stub\n\t\tresponse.getWriter().append(\"Served at: \").append(request.getContextPath());\n\t}\n\n\t/**\n\t * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)\n\t */\n\tprotected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\t\t// TODO Auto-generated method stub\n\t\tdoGet(request, response);\n\t}\n\n}\n\n```\n\n\n\n- 3.0미만의 버전은 어노테이션이 없다\n\n\n아래는 web.xml의 일부이다\n\n```java\n  <servlet>\n    <description></description>\n    <display-name>TenServlet</display-name>\n    <servlet-name>TenServlet</servlet-name>\n    <servlet-class>exam.TenServlet</servlet-class>\n  </servlet>\n  <servlet-mapping>\n    <servlet-name>TenServlet</servlet-name>\n    <url-pattern>/Ten</url-pattern>\n  </servlet-mapping>\n</web-app>\n\n```\n\nurl이 /ten이라는 요청이 들어오면 \n-> URL mapping에서 찾아낸다 url이 존재한다면 (존재안하면 404)\n-> <servlet-name>을 확인하고 이름이 TenServlet과 같은 이름을 <servlet> 에서 확인한다\n-> 서블릿을 찾아서 실행시킬 서블릿이 누군지 <servlet-class>에서 찾을 수 있다\n\n3.0이상의 버전에서는 어노테이션이 위의 같은 역할을 한다\n\n<br>\n\n\n### Servlet 라이프 싸이클 | \n서블릿이 언제 생성되고 이런 메서드들이 언제 호출이 되는지 알아볼 수 있다.\n```java\npackage examples;\n\nimport java.io.IOException;\nimport javax.servlet.ServletConfig;\nimport javax.servlet.ServletException;\nimport javax.servlet.annotation.WebServlet;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\n\n@WebServlet(\"/LifecycleServlet\")\npublic class LifecycleServlet extends HttpServlet {\n\tprivate static final long serialVersionUID = 1L;\n       \n\n    public LifecycleServlet() {\n        System.out.println(\"LifecycleServlet 생성\");  //콘솔에 출력\n    }\n\n    public void init(ServletConfig config) throws ServletException {\n        System.out.println(\"init 호출\");\n\t}\n\n    public void destroy() {\n        System.out.println(\"destroy 호출\");\n\t}\n\n    protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        System.out.println(\"service 호출\");\n\t}\n\n}\n\n\n```\n\tLifecycleServlet 생성\n\tinit 호출\n\tservice 호출\n\n위의 결과가 콘솔에 출력됨\n최초로 LifecycleServlet를 호출시 객체가 만들어지면서\n생성자가 만들어진다 따라서 생성자에 넣어준 메세지가 출력된다 -> LifecycleServlet 생성\n\n<br>\n \nservice 호출\n브라우저 새로고침시 저 한줄만 나온다\n서블릿은 서버에 객체를 여러번 만들지 않음\n요청된 객체가 메모리에 있는지 없는지 확인하고, 있으면 service라는 메서드만 호출한다\n\n<br>\n\ndestroy 호출\n서블릿이 수정되면 현재 메모리에 올라가 있는 서블릿 객체가 더 이상 사용될 수 없다\n이때 destroy 되면서 메모리에 객체를 삭제함\n\n\n\n- 정리\nServlet 생명주기\n\nWAS는 서블릿 요청을 받으면 해당 서블릿이 메모리에 있는지 확인합니다.\n if (메모리에 없음) {\n - 해당 서블릿 클래스를 메모리에 올림\n - init() 메소드를 실행\n}\n - service()메소드를 실행\nwas가 종료되거나, 웹 어플리케이션이 새롭게 갱신될 경우 destroy() 메소드가 실행됩니다.\n \n<br>\n\n### service (request, response) 메서드\nservice()메서드는 httpservlet에 구현이 되어 있다\nservice(request, response) 메소드\n\nHttpServlet의 service메소드는 템플릿 메소드 패턴으로 구현합니다.\n- 클라이언트의 요청이 GET일 경우에는 자신이 가지고 있는 doGet(request, response)메소드를 호출\n- 클라이언트의 요청이 Post일 경우에는 자신이 가지고 있는 doPost(request, response)를 호출\n\n\n예제\n\n```java\npackage examples;\n\nimport java.io.IOException;\nimport java.io.PrintWriter;\n\nimport javax.servlet.ServletConfig;\nimport javax.servlet.ServletException;\nimport javax.servlet.annotation.WebServlet;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\n\n@WebServlet(\"/LifecycleServlet\")\npublic class LifecycleServlet extends HttpServlet {\n\tprivate static final long serialVersionUID = 1L;\n       \n \n    public LifecycleServlet() {\n        System.out.println(\"LifecycleServlet 생성!!\");\n    }\n\n\tpublic void init(ServletConfig config) throws ServletException {\n\t\tSystem.out.println(\"init test 호출!!\");\n\t}\n\n\t\n\tpublic void destroy() {\n\t\tSystem.out.println(\"destroy 호출!!\");\n\t}\n\n\t@Override\n\tprotected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\t\tresponse.setContentType(\"text/html\");\n\t\tPrintWriter out = response.getWriter();\n\t\tout.println(\"<html>\");\n\t\tout.println(\"<head><title>form</title></head>\");\n\t\tout.println(\"<body>\");\n\t\tout.println(\"<form method='post' action='/firstweb/LifecycleServlet'>\");\n\t\tout.println(\"name : <input type='text' name='name'><br>\");\n\t\tout.println(\"<input type='submit' value='ok'><br>\");                                                 \n\t\tout.println(\"</form>\");\n\t\tout.println(\"</body>\");\n\t\tout.println(\"</html>\");\n\t\tout.close();\n\t}\n\n\tprotected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\t\tresponse.setContentType(\"text/html\");\n\t\tPrintWriter out = response.getWriter();\n\t\tString name = request.getParameter(\"name\");\n\t\tout.println(\"<h1> hello \" + name + \"</h1>\");\n\t\tout.close();\n\t}\n\n//\tprotected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n//\t\tSystem.out.println(\"service 호출!!\");\n//\t}\n//\t\n\t\n\n}\n\n```\n\n해당 서블릿의 url주소를 입력하거나, 링크를 클릭하는 것은 GET방식으로 서버에 요청을 보내는 것이다\n이 경우에 service  메서드가 호출이 되면서 doGet()메서드를 호출\n\n<form method='post' \n위는 코드 일부로 post로 설정되어서 ok라는 버튼이 눌렸을때 메서드 doPost가 실행된다\n\n\n![](/images/boostcourse_01/10.PNG)\n\n<br>\n\n아래처럼 요청이 들어가면 doPost 메서드가 실행된다\nrequest는 요청 정보를 추상화해서 가지고 있는 객체 인데\n위의 input상자 안에 있는  name의 값을 찾아서 String name에 넣어준다\n따라서 아래의 결과가 출력된다\n\n![](/images/boostcourse_01/11.PNG)\n\n프로그램이 동작하면서 응답 결과가 매번 바뀐다\n => 동적페이지\n\n<br>\n\n### HttpServletRequest와 HttpServletResponse (객체)\n\n웹 브라우저는 도메인과 포트번호를 이용해서 서버에 접속\n-> path 정보, 클라이언트의 IP, 클라이언트의 다양한 정보를 포함한 요청정보를 서버에 전송\n-> 클라이언트로부터 요청이 들어오면\n-> WAS는 HttpServletRequest와 HttpServletResponse 객체를 생성한다\n-> HttpServletRequest는 요청할떄 가지고 들어온 다양한 정보를 담는다\n-> HttpServletResponse는 요청을 보낸 클라이언트에게 보낼 정보를 담는다\n-> 이렇게 생성된 두개의 객체를 요청정보의 path로 매핑된 서블릿에 전달\n-> 이렇게 전달한 객체는 service(), doGet(), doPost() 같은 메서드의 파라미터로 전달되어서 사용한다\n\n![](/images/boostcourse_01/12.PNG)\n\n\n- HttpServletRequest\nhttp프로토콜의 request정보를 서블릿에게 전달하기 위한 목적으로 사용합니다.\n헤더정보, 파라미터, 쿠키, URI, URL 등의 정보를 읽어 들이는 메소드를 가지고 있습니다.\nBody의 Stream을 읽어 들이는 메소드를 가지고 있습니다.\n\n\n- HttpServletResponse\nWAS는 어떤 클라이언트가 요청을 보냈는지 알고 있고, 해당 클라이언트에게 응답을 보내기 위한 HttpServleResponse객체를 생성하여 서블릿에게 전달합니다.\n서블릿은 해당 객체를 이용하여 content type, 응답코드, 응답 메시지등을 전송합니다.\n\n<br>\n\n### 헤더 정보 읽어들이기\n```java\n\n@WebServlet(\"/header\")\npublic class HeaderServlet extends HttpServlet {\n\tprivate static final long serialVersionUID = 1L;\n\n    public HeaderServlet() {\n        super();\n        // TODO Auto-generated constructor stub\n    }\n\t\n\tprotected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\t\tresponse.setContentType(\"text/html\");\n\t\tPrintWriter out = response.getWriter();\n\t\tout.println(\"<html>\");\n\t\tout.println(\"<head><title>form</title></head>\");\n\t\tout.println(\"<body>\");\n\n\t\tEnumeration<String> headerNames = request.getHeaderNames();\n\t\twhile(headerNames.hasMoreElements()) {\n\t\t\tString headerName = headerNames.nextElement();\n\t\t\tString headerValue = request.getHeader(headerName);\n\t\t\tout.println(headerName + \" : \" + headerValue + \" <br> \");\n\t\t}\t\t\n\t\t\n\t\tout.println(\"</body>\");\n\t\tout.println(\"</html>\");\n\t}\n\n\tprotected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\t\t// TODO Auto-generated method stub\n\t\tdoGet(request, response);\n\t}\n\n}\n\n```\n\n위에 예제에서는 doGet 메서드를 오버라이드 하였다\n(뭘하던 상관 없다)\n\n\n\n\n\n\n\n\tEnumeration<String> headerNames = request.getHeaderNames();\n\t\t\twhile(headerNames.hasMoreElements()) {\n\t\t\t\tString headerName = headerNames.nextElement();\n\t\t\t\tString headerValue = request.getHeader(headerName);\n\t\t\t\tout.println(headerName + \" : \" + headerValue + \" <br> \");\n\t\t\t}\t\t\n\n\n- getHeaderNames()\nrequest가 getHeaderNames() 라는 메서드를 가지고 있음\n이 메서드는 모든 헤더 이름을 문자열 Enumeration 객체로 반환해준다\n\n- Enumeration \n내가 자바에서 배우지 못한 부분이다.\n인터넷을 찾아보니 그렇게 어려운 개념은 아닌것같다. 블로그에 추후에 따로 정리해서 올리도록 해야겠다\n위의 예제를 해석하면 \n\nheaderNames 객체에 다음 데이터가 존재하면 while문을 반복한다\nheaderNames의 데이터 값을 headerName 변수에 대입,\nrequest가 가지고 있는 getHeader를 통해 headerValue를 알아내 headerValue에 대입한다.\n\n![](/images/boostcourse_01/13.PNG)\n\n<br>\n\n\n### 파라미터 읽어들이기\n\n\n```java\nprotected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\t\tresponse.setContentType(\"text/html\");\n\t\tPrintWriter out = response.getWriter();\n\t\tout.println(\"<html>\");\n\t\tout.println(\"<head><title>form</title></head>\");\n\t\tout.println(\"<body>\");\n\n\t\tString name = request.getParameter(\"name\");\n\t\tString age = request.getParameter(\"age\");\n\t\t\n\t\tout.println(\"name : \" + name + \"<br>\");\n\t\tout.println(\"age : \" +age + \"<br>\");\n\t\t\n\t\tout.println(\"</body>\");\n\t\tout.println(\"</html>\");\n\t}\n\n```\n\nhttp://localhost8080/firstweb/param?name=jeewon&age=20\n위의 링크의 파라미터 값을\nname: jeewon\nage: 20\n로 정해줘서 위의 코드를 실행했을때 결과값도 파라미터 값과 동일하게 나온다\n\n<br>\n<br>\n<br>","slug":"boostcourse-07-servlet","published":1,"updated":"2022-01-06T14:20:12.123Z","_id":"cky31phnr00012srja3fy6d4a","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"자바-웹-어플리케이션\"><a href=\"#자바-웹-어플리케이션\" class=\"headerlink\" title=\"자바 웹 어플리케이션\"></a>자바 웹 어플리케이션</h3><p>WAS에 설치되어 동작하는 어플리케이션<br>자바 웹 어플리케이션에는 HTML, CSS, 이미지, 자바로 작성된 클래스(Servlet도 포함됨, package, 인터페이스 등), 각종 설정 파일 등이 포함됩니다.</p>\n<p>내가 인터넷에서 사용하는 쇼핑몰 블로그가 웹 어플리케이션이라고 말 할 수 있다.<br>앞에서 만든건 서블릿으로만 이루어진 아주아주아주 간단한 웹 어플리케이션이라고 할 수 있다.</p>\n<br>\n\n<h3 id=\"자바-웹-어플리케이션-폴더-구조\"><a href=\"#자바-웹-어플리케이션-폴더-구조\" class=\"headerlink\" title=\"자바 웹 어플리케이션 폴더 구조\"></a>자바 웹 어플리케이션 폴더 구조</h3><ul>\n<li><p><strong>WEB-INF</strong><br>이 폴더 안에는 web.xml이 있다.<br>web.xml은 배포 기술자라고도 하고, 웹 어플리케이션에 대한 정보를 다 가지고 있는 파일이라고 할 수 있다.<br>WEB-INF폴더 하위 폴더로 lib라는 폴더,classes 라는 폴더가 존재함</p>\n</li>\n<li><p>web.xml<br><a href=\"https://lordofkangs.tistory.com/35\">https://lordofkangs.tistory.com/35</a><br>WEB-INF 폴더 밖은 접근 가능하지만, WEB-INF 폴더 안의 서블릿에는 접근이 불가능하다<br>이때 WEB-INF 폴더 안의 서블릿에 접근 하기 위해서 진짜 경로를 숨기고 가짜 경로를 만들어 외부 접근으로부터<br>서버로직을 보호할 수 있다.</p>\n</li>\n<li><p>lib폴더<br>각종 jars 파일</p>\n</li>\n<li><p>classes 폴더<br>java 패키지, 컴파일 된 class 들..<br>내가 작성한 서블릿 파일이 들어감</p>\n</li>\n</ul>\n<ul>\n<li>리소스들<br>각종 폴더, 이미지, 다양한 리소스들</li>\n</ul>\n<br>\n\n\n<h3 id=\"Servlet\"><a href=\"#Servlet\" class=\"headerlink\" title=\"Servlet\"></a>Servlet</h3><p>자바 웹 어플리케이션의 구성 요소 중 동적인 처리를 하는 프로그램의 역할<br>동적으로 만들어 낸다는 것은!<br>이미 응답할 페이지를 만들어서 가지고 있는게 아니라 , 요청이 들어왔을때 프로그램이 실행되면서<br>응답할 코드를 만들어 내고 그 코드로 응답을 하는 것을 말한다.</p>\n<p>서블릿을 정의해보면 서블릿(servlet)은 WAS에 동작하는 JAVA 클래스입니다. </p>\n<p>서블릿은 HttpServlet 클래스를 상속받아야 합니다.</p>\n<p>서블릿과 JSP로부터 최상의 결과를 얻으려면, 웹 페이지를 개발할 때 이 두 가지(JSP, 서블릿)를 조화롭게 사용해야 합니다.</p>\n<p>예를 들어, 웹 페이지를 구성하는 화면(HTML)은 JSP로 표현하고, 복잡한 프로그래밍은 서블릿으로 구현합니다.</p>\n<br>\n\n<p>###Servlet 작성방법<br>두가지가 있는데 </p>\n<ul>\n<li>Servlet 3.0 이상일때 어노테이션을 사용한다</li>\n<li>Servlet 3.0 미만에서는 web.xml  파일에 직접 적어서 한다</li>\n</ul>\n<p>현재 실무에서는 웹을 개발할때 서블릿을 써서 개발하지 않음<br>조금 더 편하게 사용할 수 있게 도와주는 다양한 프레임 워크를 사용한다.</p>\n<p>하지만 프레임 워크들도 서블릿 없이는 동작 할 수 없기 때문에 서블릿의 기본적인 작성법이나, 서블릿의 라이프사이클을 이해할 줄 알면 좋다.</p>\n<br>\n\n\n\n<h3 id=\"Servlet-3-0-이상-방법에서-작성해보기\"><a href=\"#Servlet-3-0-이상-방법에서-작성해보기\" class=\"headerlink\" title=\"Servlet 3.0 이상 방법에서 작성해보기\"></a>Servlet 3.0 이상 방법에서 작성해보기</h3><p>새로운 다이나믹 웹 프로젝트를 만들때 Dynamic web module versiond을 3.1로 설정 하였다.</p>\n<ul>\n<li>HttpServletRequest request, HttpServletResponse response<br>클라이언트가 요청 -&gt; 서버가 응답<br>클라이언트가 요청할때 서버가 요청을 받아내는 객체와 응답을 하기 위한 객체를 두개를 자동을 만든다.<br>요청에 대한 객체는 HttpServletRequest, 응답에 관한 객체는 HttpServletResponse에 담아둔다고 생각하면 된다.</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@WebServlet(&quot;/Ten&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TenServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;</span><br><span class=\"line\">       </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@see</span> HttpServlet#HttpServlet()</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TenServlet</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>();</span><br><span class=\"line\">        <span class=\"comment\">// TODO Auto-generated constructor stub</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@see</span> HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\tresponse.setContentType(<span class=\"string\">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class=\"line\">\t\tPrintWriter out = response.getWriter();</span><br><span class=\"line\">\t\tout.println(<span class=\"string\">&quot;&lt;h1&gt;1-10까지 출력 &lt;h1&gt;&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i&lt;=<span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">\t\t\tout.println(i + <span class=\"string\">&quot;&lt;br&gt;&quot;</span>);</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>response.setContentType(“text/html;charset=utf-8”);<br>파일의 형식이 뭔지 알려준다<br>위는 html임을 확인 할 수 있다.</p>\n</li>\n<li><p>PrintWriter out = response.getWriter();<br>response 객체에 getWriter() 메서드가 존재하는데,<br>getWriter()라는 메서드를 수행하면 PrintWriter 객체가 반환 된다</p>\n</li>\n<li><p>@WebServlet(“/Ten”)<br>url 주소값이다<br>위의 코드의 주소가 <a href=\"http://localhost:8080/exam31/Ten%EB%A1%9C\">http://localhost:8080/exam31/Ten로</a> 설정 됨을 확인 할 수 있다</p>\n</li>\n</ul>\n<br>\n\n\n<h3 id=\"Servlet-3-0-미만의-방법에서-작성해보기\"><a href=\"#Servlet-3-0-미만의-방법에서-작성해보기\" class=\"headerlink\" title=\"Servlet 3.0 미만의 방법에서 작성해보기\"></a>Servlet 3.0 미만의 방법에서 작성해보기</h3><p>새로운 다이나믹 웹 프로젝트를 만들때 Dynamic web module versiond을 2.5로 설정 하였다.<br>3.1과는 다르게 web.xml이 자동으로 만들어진다 (3.1은 프로젝트 만들면서 따로 체크해줘야함)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TenServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;</span><br><span class=\"line\">       </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@see</span> HttpServlet#HttpServlet()</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TenServlet</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>();</span><br><span class=\"line\">        <span class=\"comment\">// TODO Auto-generated constructor stub</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@see</span> HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">\t\tresponse.getWriter().append(<span class=\"string\">&quot;Served at: &quot;</span>).append(request.getContextPath());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@see</span> HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doPost</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">\t\tdoGet(request, response);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>3.0미만의 버전은 어노테이션이 없다</li>\n</ul>\n<p>아래는 web.xml의 일부이다</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  &lt;servlet&gt;</span><br><span class=\"line\">    &lt;description&gt;&lt;/description&gt;</span><br><span class=\"line\">    &lt;display-name&gt;TenServlet&lt;/display-name&gt;</span><br><span class=\"line\">    &lt;servlet-name&gt;TenServlet&lt;/servlet-name&gt;</span><br><span class=\"line\">    &lt;servlet-<span class=\"class\"><span class=\"keyword\">class</span>&gt;<span class=\"title\">exam</span>.<span class=\"title\">TenServlet</span>&lt;/<span class=\"title\">servlet</span>-<span class=\"title\">class</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">  &lt;/<span class=\"title\">servlet</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">  &lt;<span class=\"title\">servlet</span>-<span class=\"title\">mapping</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">    &lt;<span class=\"title\">servlet</span>-<span class=\"title\">name</span>&gt;<span class=\"title\">TenServlet</span>&lt;/<span class=\"title\">servlet</span>-<span class=\"title\">name</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">    &lt;<span class=\"title\">url</span>-<span class=\"title\">pattern</span>&gt;/<span class=\"title\">Ten</span>&lt;/<span class=\"title\">url</span>-<span class=\"title\">pattern</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">  &lt;/<span class=\"title\">servlet</span>-<span class=\"title\">mapping</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">&lt;/<span class=\"title\">web</span>-<span class=\"title\">app</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"></span></span><br></pre></td></tr></table></figure>\n\n<p>url이 /ten이라는 요청이 들어오면<br>-&gt; URL mapping에서 찾아낸다 url이 존재한다면 (존재안하면 404)<br>-&gt; <servlet-name>을 확인하고 이름이 TenServlet과 같은 이름을 <servlet> 에서 확인한다<br>-&gt; 서블릿을 찾아서 실행시킬 서블릿이 누군지 <servlet-class>에서 찾을 수 있다</p>\n<p>3.0이상의 버전에서는 어노테이션이 위의 같은 역할을 한다</p>\n<br>\n\n\n<h3 id=\"Servlet-라이프-싸이클\"><a href=\"#Servlet-라이프-싸이클\" class=\"headerlink\" title=\"Servlet 라이프 싸이클 |\"></a>Servlet 라이프 싸이클 |</h3><p>서블릿이 언제 생성되고 이런 메서드들이 언제 호출이 되는지 알아볼 수 있다.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> examples;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletConfig;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.annotation.WebServlet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServlet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@WebServlet(&quot;/LifecycleServlet&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LifecycleServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;</span><br><span class=\"line\">       </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LifecycleServlet</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;LifecycleServlet 생성&quot;</span>);  <span class=\"comment\">//콘솔에 출력</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(ServletConfig config)</span> <span class=\"keyword\">throws</span> ServletException </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;init 호출&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">destroy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;destroy 호출&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;service 호출&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<pre><code>LifecycleServlet 생성\ninit 호출\nservice 호출\n</code></pre>\n<p>위의 결과가 콘솔에 출력됨<br>최초로 LifecycleServlet를 호출시 객체가 만들어지면서<br>생성자가 만들어진다 따라서 생성자에 넣어준 메세지가 출력된다 -&gt; LifecycleServlet 생성</p>\n<br>\n \n<p>service 호출<br>브라우저 새로고침시 저 한줄만 나온다<br>서블릿은 서버에 객체를 여러번 만들지 않음<br>요청된 객체가 메모리에 있는지 없는지 확인하고, 있으면 service라는 메서드만 호출한다</p>\n<br>\n\n<p>destroy 호출<br>서블릿이 수정되면 현재 메모리에 올라가 있는 서블릿 객체가 더 이상 사용될 수 없다<br>이때 destroy 되면서 메모리에 객체를 삭제함</p>\n<ul>\n<li>정리<br>Servlet 생명주기</li>\n</ul>\n<p>WAS는 서블릿 요청을 받으면 해당 서블릿이 메모리에 있는지 확인합니다.<br> if (메모리에 없음) {</p>\n<ul>\n<li>해당 서블릿 클래스를 메모리에 올림</li>\n<li>init() 메소드를 실행<br>}</li>\n<li>service()메소드를 실행<br>was가 종료되거나, 웹 어플리케이션이 새롭게 갱신될 경우 destroy() 메소드가 실행됩니다.</li>\n</ul>\n<br>\n\n<h3 id=\"service-request-response-메서드\"><a href=\"#service-request-response-메서드\" class=\"headerlink\" title=\"service (request, response) 메서드\"></a>service (request, response) 메서드</h3><p>service()메서드는 httpservlet에 구현이 되어 있다<br>service(request, response) 메소드</p>\n<p>HttpServlet의 service메소드는 템플릿 메소드 패턴으로 구현합니다.</p>\n<ul>\n<li>클라이언트의 요청이 GET일 경우에는 자신이 가지고 있는 doGet(request, response)메소드를 호출</li>\n<li>클라이언트의 요청이 Post일 경우에는 자신이 가지고 있는 doPost(request, response)를 호출</li>\n</ul>\n<p>예제</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> examples;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.PrintWriter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletConfig;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.annotation.WebServlet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServlet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@WebServlet(&quot;/LifecycleServlet&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LifecycleServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;</span><br><span class=\"line\">       </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LifecycleServlet</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;LifecycleServlet 생성!!&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(ServletConfig config)</span> <span class=\"keyword\">throws</span> ServletException </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;init test 호출!!&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">destroy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;destroy 호출!!&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\tresponse.setContentType(<span class=\"string\">&quot;text/html&quot;</span>);</span><br><span class=\"line\">\t\tPrintWriter out = response.getWriter();</span><br><span class=\"line\">\t\tout.println(<span class=\"string\">&quot;&lt;html&gt;&quot;</span>);</span><br><span class=\"line\">\t\tout.println(<span class=\"string\">&quot;&lt;head&gt;&lt;title&gt;form&lt;/title&gt;&lt;/head&gt;&quot;</span>);</span><br><span class=\"line\">\t\tout.println(<span class=\"string\">&quot;&lt;body&gt;&quot;</span>);</span><br><span class=\"line\">\t\tout.println(<span class=\"string\">&quot;&lt;form method=&#x27;post&#x27; action=&#x27;/firstweb/LifecycleServlet&#x27;&gt;&quot;</span>);</span><br><span class=\"line\">\t\tout.println(<span class=\"string\">&quot;name : &lt;input type=&#x27;text&#x27; name=&#x27;name&#x27;&gt;&lt;br&gt;&quot;</span>);</span><br><span class=\"line\">\t\tout.println(<span class=\"string\">&quot;&lt;input type=&#x27;submit&#x27; value=&#x27;ok&#x27;&gt;&lt;br&gt;&quot;</span>);                                                 </span><br><span class=\"line\">\t\tout.println(<span class=\"string\">&quot;&lt;/form&gt;&quot;</span>);</span><br><span class=\"line\">\t\tout.println(<span class=\"string\">&quot;&lt;/body&gt;&quot;</span>);</span><br><span class=\"line\">\t\tout.println(<span class=\"string\">&quot;&lt;/html&gt;&quot;</span>);</span><br><span class=\"line\">\t\tout.close();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doPost</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\tresponse.setContentType(<span class=\"string\">&quot;text/html&quot;</span>);</span><br><span class=\"line\">\t\tPrintWriter out = response.getWriter();</span><br><span class=\"line\">\t\tString name = request.getParameter(<span class=\"string\">&quot;name&quot;</span>);</span><br><span class=\"line\">\t\tout.println(<span class=\"string\">&quot;&lt;h1&gt; hello &quot;</span> + name + <span class=\"string\">&quot;&lt;/h1&gt;&quot;</span>);</span><br><span class=\"line\">\t\tout.close();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//\tprotected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tSystem.out.println(&quot;service 호출!!&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">//\t&#125;</span></span><br><span class=\"line\"><span class=\"comment\">//\t</span></span><br><span class=\"line\">\t</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>해당 서블릿의 url주소를 입력하거나, 링크를 클릭하는 것은 GET방식으로 서버에 요청을 보내는 것이다<br>이 경우에 service  메서드가 호출이 되면서 doGet()메서드를 호출</p>\n<form method='post' \n위는 코드 일부로 post로 설정되어서 ok라는 버튼이 눌렸을때 메서드 doPost가 실행된다\n\n\n<p><img src=\"/images/boostcourse_01/10.PNG\"></p>\n<br>\n\n<p>아래처럼 요청이 들어가면 doPost 메서드가 실행된다<br>request는 요청 정보를 추상화해서 가지고 있는 객체 인데<br>위의 input상자 안에 있는  name의 값을 찾아서 String name에 넣어준다<br>따라서 아래의 결과가 출력된다</p>\n<p><img src=\"/images/boostcourse_01/11.PNG\"></p>\n<p>프로그램이 동작하면서 응답 결과가 매번 바뀐다<br> =&gt; 동적페이지</p>\n<br>\n\n<h3 id=\"HttpServletRequest와-HttpServletResponse-객체\"><a href=\"#HttpServletRequest와-HttpServletResponse-객체\" class=\"headerlink\" title=\"HttpServletRequest와 HttpServletResponse (객체)\"></a>HttpServletRequest와 HttpServletResponse (객체)</h3><p>웹 브라우저는 도메인과 포트번호를 이용해서 서버에 접속<br>-&gt; path 정보, 클라이언트의 IP, 클라이언트의 다양한 정보를 포함한 요청정보를 서버에 전송<br>-&gt; 클라이언트로부터 요청이 들어오면<br>-&gt; WAS는 HttpServletRequest와 HttpServletResponse 객체를 생성한다<br>-&gt; HttpServletRequest는 요청할떄 가지고 들어온 다양한 정보를 담는다<br>-&gt; HttpServletResponse는 요청을 보낸 클라이언트에게 보낼 정보를 담는다<br>-&gt; 이렇게 생성된 두개의 객체를 요청정보의 path로 매핑된 서블릿에 전달<br>-&gt; 이렇게 전달한 객체는 service(), doGet(), doPost() 같은 메서드의 파라미터로 전달되어서 사용한다</p>\n<p><img src=\"/images/boostcourse_01/12.PNG\"></p>\n<ul>\n<li>HttpServletRequest<br>http프로토콜의 request정보를 서블릿에게 전달하기 위한 목적으로 사용합니다.<br>헤더정보, 파라미터, 쿠키, URI, URL 등의 정보를 읽어 들이는 메소드를 가지고 있습니다.<br>Body의 Stream을 읽어 들이는 메소드를 가지고 있습니다.</li>\n</ul>\n<ul>\n<li>HttpServletResponse<br>WAS는 어떤 클라이언트가 요청을 보냈는지 알고 있고, 해당 클라이언트에게 응답을 보내기 위한 HttpServleResponse객체를 생성하여 서블릿에게 전달합니다.<br>서블릿은 해당 객체를 이용하여 content type, 응답코드, 응답 메시지등을 전송합니다.</li>\n</ul>\n<br>\n\n<h3 id=\"헤더-정보-읽어들이기\"><a href=\"#헤더-정보-읽어들이기\" class=\"headerlink\" title=\"헤더 정보 읽어들이기\"></a>헤더 정보 읽어들이기</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@WebServlet(&quot;/header&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HeaderServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HeaderServlet</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>();</span><br><span class=\"line\">        <span class=\"comment\">// TODO Auto-generated constructor stub</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\tresponse.setContentType(<span class=\"string\">&quot;text/html&quot;</span>);</span><br><span class=\"line\">\t\tPrintWriter out = response.getWriter();</span><br><span class=\"line\">\t\tout.println(<span class=\"string\">&quot;&lt;html&gt;&quot;</span>);</span><br><span class=\"line\">\t\tout.println(<span class=\"string\">&quot;&lt;head&gt;&lt;title&gt;form&lt;/title&gt;&lt;/head&gt;&quot;</span>);</span><br><span class=\"line\">\t\tout.println(<span class=\"string\">&quot;&lt;body&gt;&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tEnumeration&lt;String&gt; headerNames = request.getHeaderNames();</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(headerNames.hasMoreElements()) &#123;</span><br><span class=\"line\">\t\t\tString headerName = headerNames.nextElement();</span><br><span class=\"line\">\t\t\tString headerValue = request.getHeader(headerName);</span><br><span class=\"line\">\t\t\tout.println(headerName + <span class=\"string\">&quot; : &quot;</span> + headerValue + <span class=\"string\">&quot; &lt;br&gt; &quot;</span>);</span><br><span class=\"line\">\t\t&#125;\t\t</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tout.println(<span class=\"string\">&quot;&lt;/body&gt;&quot;</span>);</span><br><span class=\"line\">\t\tout.println(<span class=\"string\">&quot;&lt;/html&gt;&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doPost</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">\t\tdoGet(request, response);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>위에 예제에서는 doGet 메서드를 오버라이드 하였다<br>(뭘하던 상관 없다)</p>\n<pre><code>Enumeration&lt;String&gt; headerNames = request.getHeaderNames();\n        while(headerNames.hasMoreElements()) &#123;\n            String headerName = headerNames.nextElement();\n            String headerValue = request.getHeader(headerName);\n            out.println(headerName + &quot; : &quot; + headerValue + &quot; &lt;br&gt; &quot;);\n        &#125;        \n</code></pre>\n<ul>\n<li><p>getHeaderNames()<br>request가 getHeaderNames() 라는 메서드를 가지고 있음<br>이 메서드는 모든 헤더 이름을 문자열 Enumeration 객체로 반환해준다</p>\n</li>\n<li><p>Enumeration<br>내가 자바에서 배우지 못한 부분이다.<br>인터넷을 찾아보니 그렇게 어려운 개념은 아닌것같다. 블로그에 추후에 따로 정리해서 올리도록 해야겠다<br>위의 예제를 해석하면 </p>\n</li>\n</ul>\n<p>headerNames 객체에 다음 데이터가 존재하면 while문을 반복한다<br>headerNames의 데이터 값을 headerName 변수에 대입,<br>request가 가지고 있는 getHeader를 통해 headerValue를 알아내 headerValue에 대입한다.</p>\n<p><img src=\"/images/boostcourse_01/13.PNG\"></p>\n<br>\n\n\n<h3 id=\"파라미터-읽어들이기\"><a href=\"#파라미터-읽어들이기\" class=\"headerlink\" title=\"파라미터 읽어들이기\"></a>파라미터 읽어들이기</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\tresponse.setContentType(<span class=\"string\">&quot;text/html&quot;</span>);</span><br><span class=\"line\">\t\tPrintWriter out = response.getWriter();</span><br><span class=\"line\">\t\tout.println(<span class=\"string\">&quot;&lt;html&gt;&quot;</span>);</span><br><span class=\"line\">\t\tout.println(<span class=\"string\">&quot;&lt;head&gt;&lt;title&gt;form&lt;/title&gt;&lt;/head&gt;&quot;</span>);</span><br><span class=\"line\">\t\tout.println(<span class=\"string\">&quot;&lt;body&gt;&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tString name = request.getParameter(<span class=\"string\">&quot;name&quot;</span>);</span><br><span class=\"line\">\t\tString age = request.getParameter(<span class=\"string\">&quot;age&quot;</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tout.println(<span class=\"string\">&quot;name : &quot;</span> + name + <span class=\"string\">&quot;&lt;br&gt;&quot;</span>);</span><br><span class=\"line\">\t\tout.println(<span class=\"string\">&quot;age : &quot;</span> +age + <span class=\"string\">&quot;&lt;br&gt;&quot;</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tout.println(<span class=\"string\">&quot;&lt;/body&gt;&quot;</span>);</span><br><span class=\"line\">\t\tout.println(<span class=\"string\">&quot;&lt;/html&gt;&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><a href=\"http://localhost8080/firstweb/param?name=jeewon&amp;age=20\">http://localhost8080/firstweb/param?name=jeewon&amp;age=20</a><br>위의 링크의 파라미터 값을<br>name: jeewon<br>age: 20<br>로 정해줘서 위의 코드를 실행했을때 결과값도 파라미터 값과 동일하게 나온다</p>\n<br>\n<br>\n<br>","site":{"data":{}},"excerpt":"자바 웹 어플리케이션\nWAS에 설치되어 동작하는 어플리케이션\n자바 웹 어플리케이션에는 HTML, CSS, 이미지, 자바로 작성된 클래스(Servlet도 포함됨, package, 인터페이스 등), 각종 설정 파일 등이 포함됩니다.\n\n내가 인터넷에서 사용하는 쇼핑몰 블로그가 웹 어플리케이션이라고 말 할 수 있다.\n앞에서 만든건 서블릿으로만 이루어진 아주아주아주 간단한 웹 어플리케이션이라고 할 수 있다.\n\n\n자바 웹 어플리케이션 폴더 구조\n * WEB-INF\n   이 폴더 안에는 web.xml이 있다.\n   web.xml은 배포 기술자라","more":"<h3 id=\"자바-웹-어플리케이션\"><a href=\"#자바-웹-어플리케이션\" class=\"headerlink\" title=\"자바 웹 어플리케이션\"></a>자바 웹 어플리케이션</h3><p>WAS에 설치되어 동작하는 어플리케이션<br>자바 웹 어플리케이션에는 HTML, CSS, 이미지, 자바로 작성된 클래스(Servlet도 포함됨, package, 인터페이스 등), 각종 설정 파일 등이 포함됩니다.</p>\n<p>내가 인터넷에서 사용하는 쇼핑몰 블로그가 웹 어플리케이션이라고 말 할 수 있다.<br>앞에서 만든건 서블릿으로만 이루어진 아주아주아주 간단한 웹 어플리케이션이라고 할 수 있다.</p>\n<br>\n\n<h3 id=\"자바-웹-어플리케이션-폴더-구조\"><a href=\"#자바-웹-어플리케이션-폴더-구조\" class=\"headerlink\" title=\"자바 웹 어플리케이션 폴더 구조\"></a>자바 웹 어플리케이션 폴더 구조</h3><ul>\n<li><p><strong>WEB-INF</strong><br>이 폴더 안에는 web.xml이 있다.<br>web.xml은 배포 기술자라고도 하고, 웹 어플리케이션에 대한 정보를 다 가지고 있는 파일이라고 할 수 있다.<br>WEB-INF폴더 하위 폴더로 lib라는 폴더,classes 라는 폴더가 존재함</p>\n</li>\n<li><p>web.xml<br><a href=\"https://lordofkangs.tistory.com/35\">https://lordofkangs.tistory.com/35</a><br>WEB-INF 폴더 밖은 접근 가능하지만, WEB-INF 폴더 안의 서블릿에는 접근이 불가능하다<br>이때 WEB-INF 폴더 안의 서블릿에 접근 하기 위해서 진짜 경로를 숨기고 가짜 경로를 만들어 외부 접근으로부터<br>서버로직을 보호할 수 있다.</p>\n</li>\n<li><p>lib폴더<br>각종 jars 파일</p>\n</li>\n<li><p>classes 폴더<br>java 패키지, 컴파일 된 class 들..<br>내가 작성한 서블릿 파일이 들어감</p>\n</li>\n</ul>\n<ul>\n<li>리소스들<br>각종 폴더, 이미지, 다양한 리소스들</li>\n</ul>\n<br>\n\n\n<h3 id=\"Servlet\"><a href=\"#Servlet\" class=\"headerlink\" title=\"Servlet\"></a>Servlet</h3><p>자바 웹 어플리케이션의 구성 요소 중 동적인 처리를 하는 프로그램의 역할<br>동적으로 만들어 낸다는 것은!<br>이미 응답할 페이지를 만들어서 가지고 있는게 아니라 , 요청이 들어왔을때 프로그램이 실행되면서<br>응답할 코드를 만들어 내고 그 코드로 응답을 하는 것을 말한다.</p>\n<p>서블릿을 정의해보면 서블릿(servlet)은 WAS에 동작하는 JAVA 클래스입니다. </p>\n<p>서블릿은 HttpServlet 클래스를 상속받아야 합니다.</p>\n<p>서블릿과 JSP로부터 최상의 결과를 얻으려면, 웹 페이지를 개발할 때 이 두 가지(JSP, 서블릿)를 조화롭게 사용해야 합니다.</p>\n<p>예를 들어, 웹 페이지를 구성하는 화면(HTML)은 JSP로 표현하고, 복잡한 프로그래밍은 서블릿으로 구현합니다.</p>\n<br>\n\n<p>###Servlet 작성방법<br>두가지가 있는데 </p>\n<ul>\n<li>Servlet 3.0 이상일때 어노테이션을 사용한다</li>\n<li>Servlet 3.0 미만에서는 web.xml  파일에 직접 적어서 한다</li>\n</ul>\n<p>현재 실무에서는 웹을 개발할때 서블릿을 써서 개발하지 않음<br>조금 더 편하게 사용할 수 있게 도와주는 다양한 프레임 워크를 사용한다.</p>\n<p>하지만 프레임 워크들도 서블릿 없이는 동작 할 수 없기 때문에 서블릿의 기본적인 작성법이나, 서블릿의 라이프사이클을 이해할 줄 알면 좋다.</p>\n<br>\n\n\n\n<h3 id=\"Servlet-3-0-이상-방법에서-작성해보기\"><a href=\"#Servlet-3-0-이상-방법에서-작성해보기\" class=\"headerlink\" title=\"Servlet 3.0 이상 방법에서 작성해보기\"></a>Servlet 3.0 이상 방법에서 작성해보기</h3><p>새로운 다이나믹 웹 프로젝트를 만들때 Dynamic web module versiond을 3.1로 설정 하였다.</p>\n<ul>\n<li>HttpServletRequest request, HttpServletResponse response<br>클라이언트가 요청 -&gt; 서버가 응답<br>클라이언트가 요청할때 서버가 요청을 받아내는 객체와 응답을 하기 위한 객체를 두개를 자동을 만든다.<br>요청에 대한 객체는 HttpServletRequest, 응답에 관한 객체는 HttpServletResponse에 담아둔다고 생각하면 된다.</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@WebServlet(&quot;/Ten&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TenServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;</span><br><span class=\"line\">       </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@see</span> HttpServlet#HttpServlet()</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TenServlet</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>();</span><br><span class=\"line\">        <span class=\"comment\">// TODO Auto-generated constructor stub</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@see</span> HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\tresponse.setContentType(<span class=\"string\">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class=\"line\">\t\tPrintWriter out = response.getWriter();</span><br><span class=\"line\">\t\tout.println(<span class=\"string\">&quot;&lt;h1&gt;1-10까지 출력 &lt;h1&gt;&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i&lt;=<span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">\t\t\tout.println(i + <span class=\"string\">&quot;&lt;br&gt;&quot;</span>);</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>response.setContentType(“text/html;charset=utf-8”);<br>파일의 형식이 뭔지 알려준다<br>위는 html임을 확인 할 수 있다.</p>\n</li>\n<li><p>PrintWriter out = response.getWriter();<br>response 객체에 getWriter() 메서드가 존재하는데,<br>getWriter()라는 메서드를 수행하면 PrintWriter 객체가 반환 된다</p>\n</li>\n<li><p>@WebServlet(“/Ten”)<br>url 주소값이다<br>위의 코드의 주소가 <a href=\"http://localhost:8080/exam31/Ten%EB%A1%9C\">http://localhost:8080/exam31/Ten로</a> 설정 됨을 확인 할 수 있다</p>\n</li>\n</ul>\n<br>\n\n\n<h3 id=\"Servlet-3-0-미만의-방법에서-작성해보기\"><a href=\"#Servlet-3-0-미만의-방법에서-작성해보기\" class=\"headerlink\" title=\"Servlet 3.0 미만의 방법에서 작성해보기\"></a>Servlet 3.0 미만의 방법에서 작성해보기</h3><p>새로운 다이나믹 웹 프로젝트를 만들때 Dynamic web module versiond을 2.5로 설정 하였다.<br>3.1과는 다르게 web.xml이 자동으로 만들어진다 (3.1은 프로젝트 만들면서 따로 체크해줘야함)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TenServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;</span><br><span class=\"line\">       </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@see</span> HttpServlet#HttpServlet()</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TenServlet</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>();</span><br><span class=\"line\">        <span class=\"comment\">// TODO Auto-generated constructor stub</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@see</span> HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">\t\tresponse.getWriter().append(<span class=\"string\">&quot;Served at: &quot;</span>).append(request.getContextPath());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@see</span> HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doPost</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">\t\tdoGet(request, response);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>3.0미만의 버전은 어노테이션이 없다</li>\n</ul>\n<p>아래는 web.xml의 일부이다</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  &lt;servlet&gt;</span><br><span class=\"line\">    &lt;description&gt;&lt;/description&gt;</span><br><span class=\"line\">    &lt;display-name&gt;TenServlet&lt;/display-name&gt;</span><br><span class=\"line\">    &lt;servlet-name&gt;TenServlet&lt;/servlet-name&gt;</span><br><span class=\"line\">    &lt;servlet-<span class=\"class\"><span class=\"keyword\">class</span>&gt;<span class=\"title\">exam</span>.<span class=\"title\">TenServlet</span>&lt;/<span class=\"title\">servlet</span>-<span class=\"title\">class</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">  &lt;/<span class=\"title\">servlet</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">  &lt;<span class=\"title\">servlet</span>-<span class=\"title\">mapping</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">    &lt;<span class=\"title\">servlet</span>-<span class=\"title\">name</span>&gt;<span class=\"title\">TenServlet</span>&lt;/<span class=\"title\">servlet</span>-<span class=\"title\">name</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">    &lt;<span class=\"title\">url</span>-<span class=\"title\">pattern</span>&gt;/<span class=\"title\">Ten</span>&lt;/<span class=\"title\">url</span>-<span class=\"title\">pattern</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">  &lt;/<span class=\"title\">servlet</span>-<span class=\"title\">mapping</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">&lt;/<span class=\"title\">web</span>-<span class=\"title\">app</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"></span></span><br></pre></td></tr></table></figure>\n\n<p>url이 /ten이라는 요청이 들어오면<br>-&gt; URL mapping에서 찾아낸다 url이 존재한다면 (존재안하면 404)<br>-&gt; <servlet-name>을 확인하고 이름이 TenServlet과 같은 이름을 <servlet> 에서 확인한다<br>-&gt; 서블릿을 찾아서 실행시킬 서블릿이 누군지 <servlet-class>에서 찾을 수 있다</p>\n<p>3.0이상의 버전에서는 어노테이션이 위의 같은 역할을 한다</p>\n<br>\n\n\n<h3 id=\"Servlet-라이프-싸이클\"><a href=\"#Servlet-라이프-싸이클\" class=\"headerlink\" title=\"Servlet 라이프 싸이클 |\"></a>Servlet 라이프 싸이클 |</h3><p>서블릿이 언제 생성되고 이런 메서드들이 언제 호출이 되는지 알아볼 수 있다.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> examples;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletConfig;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.annotation.WebServlet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServlet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@WebServlet(&quot;/LifecycleServlet&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LifecycleServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;</span><br><span class=\"line\">       </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LifecycleServlet</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;LifecycleServlet 생성&quot;</span>);  <span class=\"comment\">//콘솔에 출력</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(ServletConfig config)</span> <span class=\"keyword\">throws</span> ServletException </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;init 호출&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">destroy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;destroy 호출&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;service 호출&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<pre><code>LifecycleServlet 생성\ninit 호출\nservice 호출\n</code></pre>\n<p>위의 결과가 콘솔에 출력됨<br>최초로 LifecycleServlet를 호출시 객체가 만들어지면서<br>생성자가 만들어진다 따라서 생성자에 넣어준 메세지가 출력된다 -&gt; LifecycleServlet 생성</p>\n<br>\n \n<p>service 호출<br>브라우저 새로고침시 저 한줄만 나온다<br>서블릿은 서버에 객체를 여러번 만들지 않음<br>요청된 객체가 메모리에 있는지 없는지 확인하고, 있으면 service라는 메서드만 호출한다</p>\n<br>\n\n<p>destroy 호출<br>서블릿이 수정되면 현재 메모리에 올라가 있는 서블릿 객체가 더 이상 사용될 수 없다<br>이때 destroy 되면서 메모리에 객체를 삭제함</p>\n<ul>\n<li>정리<br>Servlet 생명주기</li>\n</ul>\n<p>WAS는 서블릿 요청을 받으면 해당 서블릿이 메모리에 있는지 확인합니다.<br> if (메모리에 없음) {</p>\n<ul>\n<li>해당 서블릿 클래스를 메모리에 올림</li>\n<li>init() 메소드를 실행<br>}</li>\n<li>service()메소드를 실행<br>was가 종료되거나, 웹 어플리케이션이 새롭게 갱신될 경우 destroy() 메소드가 실행됩니다.</li>\n</ul>\n<br>\n\n<h3 id=\"service-request-response-메서드\"><a href=\"#service-request-response-메서드\" class=\"headerlink\" title=\"service (request, response) 메서드\"></a>service (request, response) 메서드</h3><p>service()메서드는 httpservlet에 구현이 되어 있다<br>service(request, response) 메소드</p>\n<p>HttpServlet의 service메소드는 템플릿 메소드 패턴으로 구현합니다.</p>\n<ul>\n<li>클라이언트의 요청이 GET일 경우에는 자신이 가지고 있는 doGet(request, response)메소드를 호출</li>\n<li>클라이언트의 요청이 Post일 경우에는 자신이 가지고 있는 doPost(request, response)를 호출</li>\n</ul>\n<p>예제</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> examples;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.PrintWriter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletConfig;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.annotation.WebServlet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServlet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@WebServlet(&quot;/LifecycleServlet&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LifecycleServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;</span><br><span class=\"line\">       </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LifecycleServlet</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;LifecycleServlet 생성!!&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(ServletConfig config)</span> <span class=\"keyword\">throws</span> ServletException </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;init test 호출!!&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">destroy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;destroy 호출!!&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\tresponse.setContentType(<span class=\"string\">&quot;text/html&quot;</span>);</span><br><span class=\"line\">\t\tPrintWriter out = response.getWriter();</span><br><span class=\"line\">\t\tout.println(<span class=\"string\">&quot;&lt;html&gt;&quot;</span>);</span><br><span class=\"line\">\t\tout.println(<span class=\"string\">&quot;&lt;head&gt;&lt;title&gt;form&lt;/title&gt;&lt;/head&gt;&quot;</span>);</span><br><span class=\"line\">\t\tout.println(<span class=\"string\">&quot;&lt;body&gt;&quot;</span>);</span><br><span class=\"line\">\t\tout.println(<span class=\"string\">&quot;&lt;form method=&#x27;post&#x27; action=&#x27;/firstweb/LifecycleServlet&#x27;&gt;&quot;</span>);</span><br><span class=\"line\">\t\tout.println(<span class=\"string\">&quot;name : &lt;input type=&#x27;text&#x27; name=&#x27;name&#x27;&gt;&lt;br&gt;&quot;</span>);</span><br><span class=\"line\">\t\tout.println(<span class=\"string\">&quot;&lt;input type=&#x27;submit&#x27; value=&#x27;ok&#x27;&gt;&lt;br&gt;&quot;</span>);                                                 </span><br><span class=\"line\">\t\tout.println(<span class=\"string\">&quot;&lt;/form&gt;&quot;</span>);</span><br><span class=\"line\">\t\tout.println(<span class=\"string\">&quot;&lt;/body&gt;&quot;</span>);</span><br><span class=\"line\">\t\tout.println(<span class=\"string\">&quot;&lt;/html&gt;&quot;</span>);</span><br><span class=\"line\">\t\tout.close();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doPost</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\tresponse.setContentType(<span class=\"string\">&quot;text/html&quot;</span>);</span><br><span class=\"line\">\t\tPrintWriter out = response.getWriter();</span><br><span class=\"line\">\t\tString name = request.getParameter(<span class=\"string\">&quot;name&quot;</span>);</span><br><span class=\"line\">\t\tout.println(<span class=\"string\">&quot;&lt;h1&gt; hello &quot;</span> + name + <span class=\"string\">&quot;&lt;/h1&gt;&quot;</span>);</span><br><span class=\"line\">\t\tout.close();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//\tprotected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tSystem.out.println(&quot;service 호출!!&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">//\t&#125;</span></span><br><span class=\"line\"><span class=\"comment\">//\t</span></span><br><span class=\"line\">\t</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>해당 서블릿의 url주소를 입력하거나, 링크를 클릭하는 것은 GET방식으로 서버에 요청을 보내는 것이다<br>이 경우에 service  메서드가 호출이 되면서 doGet()메서드를 호출</p>\n<form method='post' \n위는 코드 일부로 post로 설정되어서 ok라는 버튼이 눌렸을때 메서드 doPost가 실행된다\n\n\n<p><img src=\"/images/boostcourse_01/10.PNG\"></p>\n<br>\n\n<p>아래처럼 요청이 들어가면 doPost 메서드가 실행된다<br>request는 요청 정보를 추상화해서 가지고 있는 객체 인데<br>위의 input상자 안에 있는  name의 값을 찾아서 String name에 넣어준다<br>따라서 아래의 결과가 출력된다</p>\n<p><img src=\"/images/boostcourse_01/11.PNG\"></p>\n<p>프로그램이 동작하면서 응답 결과가 매번 바뀐다<br> =&gt; 동적페이지</p>\n<br>\n\n<h3 id=\"HttpServletRequest와-HttpServletResponse-객체\"><a href=\"#HttpServletRequest와-HttpServletResponse-객체\" class=\"headerlink\" title=\"HttpServletRequest와 HttpServletResponse (객체)\"></a>HttpServletRequest와 HttpServletResponse (객체)</h3><p>웹 브라우저는 도메인과 포트번호를 이용해서 서버에 접속<br>-&gt; path 정보, 클라이언트의 IP, 클라이언트의 다양한 정보를 포함한 요청정보를 서버에 전송<br>-&gt; 클라이언트로부터 요청이 들어오면<br>-&gt; WAS는 HttpServletRequest와 HttpServletResponse 객체를 생성한다<br>-&gt; HttpServletRequest는 요청할떄 가지고 들어온 다양한 정보를 담는다<br>-&gt; HttpServletResponse는 요청을 보낸 클라이언트에게 보낼 정보를 담는다<br>-&gt; 이렇게 생성된 두개의 객체를 요청정보의 path로 매핑된 서블릿에 전달<br>-&gt; 이렇게 전달한 객체는 service(), doGet(), doPost() 같은 메서드의 파라미터로 전달되어서 사용한다</p>\n<p><img src=\"/images/boostcourse_01/12.PNG\"></p>\n<ul>\n<li>HttpServletRequest<br>http프로토콜의 request정보를 서블릿에게 전달하기 위한 목적으로 사용합니다.<br>헤더정보, 파라미터, 쿠키, URI, URL 등의 정보를 읽어 들이는 메소드를 가지고 있습니다.<br>Body의 Stream을 읽어 들이는 메소드를 가지고 있습니다.</li>\n</ul>\n<ul>\n<li>HttpServletResponse<br>WAS는 어떤 클라이언트가 요청을 보냈는지 알고 있고, 해당 클라이언트에게 응답을 보내기 위한 HttpServleResponse객체를 생성하여 서블릿에게 전달합니다.<br>서블릿은 해당 객체를 이용하여 content type, 응답코드, 응답 메시지등을 전송합니다.</li>\n</ul>\n<br>\n\n<h3 id=\"헤더-정보-읽어들이기\"><a href=\"#헤더-정보-읽어들이기\" class=\"headerlink\" title=\"헤더 정보 읽어들이기\"></a>헤더 정보 읽어들이기</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@WebServlet(&quot;/header&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HeaderServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HeaderServlet</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>();</span><br><span class=\"line\">        <span class=\"comment\">// TODO Auto-generated constructor stub</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\tresponse.setContentType(<span class=\"string\">&quot;text/html&quot;</span>);</span><br><span class=\"line\">\t\tPrintWriter out = response.getWriter();</span><br><span class=\"line\">\t\tout.println(<span class=\"string\">&quot;&lt;html&gt;&quot;</span>);</span><br><span class=\"line\">\t\tout.println(<span class=\"string\">&quot;&lt;head&gt;&lt;title&gt;form&lt;/title&gt;&lt;/head&gt;&quot;</span>);</span><br><span class=\"line\">\t\tout.println(<span class=\"string\">&quot;&lt;body&gt;&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tEnumeration&lt;String&gt; headerNames = request.getHeaderNames();</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(headerNames.hasMoreElements()) &#123;</span><br><span class=\"line\">\t\t\tString headerName = headerNames.nextElement();</span><br><span class=\"line\">\t\t\tString headerValue = request.getHeader(headerName);</span><br><span class=\"line\">\t\t\tout.println(headerName + <span class=\"string\">&quot; : &quot;</span> + headerValue + <span class=\"string\">&quot; &lt;br&gt; &quot;</span>);</span><br><span class=\"line\">\t\t&#125;\t\t</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tout.println(<span class=\"string\">&quot;&lt;/body&gt;&quot;</span>);</span><br><span class=\"line\">\t\tout.println(<span class=\"string\">&quot;&lt;/html&gt;&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doPost</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">\t\tdoGet(request, response);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>위에 예제에서는 doGet 메서드를 오버라이드 하였다<br>(뭘하던 상관 없다)</p>\n<pre><code>Enumeration&lt;String&gt; headerNames = request.getHeaderNames();\n        while(headerNames.hasMoreElements()) &#123;\n            String headerName = headerNames.nextElement();\n            String headerValue = request.getHeader(headerName);\n            out.println(headerName + &quot; : &quot; + headerValue + &quot; &lt;br&gt; &quot;);\n        &#125;        \n</code></pre>\n<ul>\n<li><p>getHeaderNames()<br>request가 getHeaderNames() 라는 메서드를 가지고 있음<br>이 메서드는 모든 헤더 이름을 문자열 Enumeration 객체로 반환해준다</p>\n</li>\n<li><p>Enumeration<br>내가 자바에서 배우지 못한 부분이다.<br>인터넷을 찾아보니 그렇게 어려운 개념은 아닌것같다. 블로그에 추후에 따로 정리해서 올리도록 해야겠다<br>위의 예제를 해석하면 </p>\n</li>\n</ul>\n<p>headerNames 객체에 다음 데이터가 존재하면 while문을 반복한다<br>headerNames의 데이터 값을 headerName 변수에 대입,<br>request가 가지고 있는 getHeader를 통해 headerValue를 알아내 headerValue에 대입한다.</p>\n<p><img src=\"/images/boostcourse_01/13.PNG\"></p>\n<br>\n\n\n<h3 id=\"파라미터-읽어들이기\"><a href=\"#파라미터-읽어들이기\" class=\"headerlink\" title=\"파라미터 읽어들이기\"></a>파라미터 읽어들이기</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\tresponse.setContentType(<span class=\"string\">&quot;text/html&quot;</span>);</span><br><span class=\"line\">\t\tPrintWriter out = response.getWriter();</span><br><span class=\"line\">\t\tout.println(<span class=\"string\">&quot;&lt;html&gt;&quot;</span>);</span><br><span class=\"line\">\t\tout.println(<span class=\"string\">&quot;&lt;head&gt;&lt;title&gt;form&lt;/title&gt;&lt;/head&gt;&quot;</span>);</span><br><span class=\"line\">\t\tout.println(<span class=\"string\">&quot;&lt;body&gt;&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tString name = request.getParameter(<span class=\"string\">&quot;name&quot;</span>);</span><br><span class=\"line\">\t\tString age = request.getParameter(<span class=\"string\">&quot;age&quot;</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tout.println(<span class=\"string\">&quot;name : &quot;</span> + name + <span class=\"string\">&quot;&lt;br&gt;&quot;</span>);</span><br><span class=\"line\">\t\tout.println(<span class=\"string\">&quot;age : &quot;</span> +age + <span class=\"string\">&quot;&lt;br&gt;&quot;</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tout.println(<span class=\"string\">&quot;&lt;/body&gt;&quot;</span>);</span><br><span class=\"line\">\t\tout.println(<span class=\"string\">&quot;&lt;/html&gt;&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><a href=\"http://localhost8080/firstweb/param?name=jeewon&amp;age=20\">http://localhost8080/firstweb/param?name=jeewon&amp;age=20</a><br>위의 링크의 파라미터 값을<br>name: jeewon<br>age: 20<br>로 정해줘서 위의 코드를 실행했을때 결과값도 파라미터 값과 동일하게 나온다</p>\n<br>\n<br>\n<br>"},{"title":"JSP | 부스트코스 백엔드 08","date":"2022-01-02T15:00:00.000Z","toc":true,"_content":"\n\n선생님이 JSP는 Servlet으로 어떻게 바뀔지 생각하는게 중요하다고 하셨다!\n근데 사실 아직 왜 그게 중요한지 모르겠다\nJSP는 어렵지 않은데 이걸 어떤식으로 적용해서 실무에서 사용하는지는 잘 모르겟다\n프로젝트를 하다보면 알겠지..\n\n### JSP (Java Server Servlet)\n웹을 쉽게 개발 할 수 있는 스크립트 엔진을 만든것.\nJSP는 서블릿 기술을 사용한다\nhtml과 굉장히 비슷하다\nJSP는 JSP 자체가 동작하지 않고, 모든 JSP는 서블릿으로 바뀌어서 동작한다\n톰캣이 JSP를 서블릿으로 바꾸는것이다.\n\n<br>\n\n### JSP -> Servlet\n\n\nC:\\Users\\jiwon\\eclipse-workspace\\.metadata\\.plugins\\org.eclipse.wst.server.core\\tmp0\\work\\Catalina\\localhost\n위의 경로로 이동하면 JSP파일이 servlet으로 변환된것을 찾을 수 있다\n\n<br>\n\n###JSP의 실행순서\n\n1. 브라우저가 웹서버에 JSP에 대한 요청 정보를 전달한다.\n2. 브라우저가 요청한 JSP가 최초로 요청했을 경우만 JSP로 작성된 코드가 서블릿으로 코드로 변환한다. (java 파일 생성)\n3. 서블릿 코드를 컴파일해서 실행가능한 bytecode로 변환한다. (class 파일 생성)\n4. 서블릿 클래스를 로딩하고 인스턴스를 생성한다.\n5. 서블릿이 실행되어 요청을 처리하고 응답 정보를 생성한다.\n\n<br>\n\n\n### 간단한 예제\nFile -> new -> JSP\nJSP 파일 위치는 Web Content의 밑에 있다\n이 위치에 html, css, javascript 다 넣으면 된다.\n\n```java\n<%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\n    pageEncoding=\"UTF-8\"%>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n<title>sum10</title>\n</head>\n<body>\n\n<% \n    int total = 0;\n    for(int i = 1; i <= 10; i++){\n        total = total + i;\n    }\n%>\n\n1부터 10까지의 합 : <%=total %>\n\n</body>\n</html>\n```\n\n\n\n\n- 지시자\n<%@\n\n아래 코드는 JSP 파일에서 java 언어로 작성된 코드가 나온다고 의미함\n인코딩을 맞춰줬다 안하면 한글이 깨진다\n\n<%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\n    pageEncoding=\"UTF-8\"%>\n \n\n\n- Scriptlet\n<% %>\n<% %> 이런 기호들은 서블릿으로 바꿀때 어떻게 바꾸는지 알려주기 위한 부분을 의미한다\nJSP에서는 다른 언어도 사용이 가능하지만 보통 java만 사용한다\n\n\n\n- 표현식\n<%= %>\nout.print();와 똑같은 역할을 한다.\n\n<br>\n\n### JSP 문법\n스크립트 요소의 이해\n\nJSP 페이지에서는 선언문(Declaration), 스크립트릿(Scriptlet), 표현식(Expression) 이라는 3가지의 스크립트 요소를 제공\n선언문 <%! %>: 전역변수 선언 및 메소드 선언에 사용\n스크립트릿 <% %>: 프로그래밍 코드 기술에 사용\n표현식 <%=%>: 화면에 출력할 내용 기술에 사용\n\n\n\n\n- 선언문\nJSP가 Servlet으로 바뀌었을때, Service() 메서드 안에서 자바 코드로 바뀌어있다 \n그러나, 선언문을 사용했을때는 Service() 메서드가 아니라 클래스 바디쪽에 코드가 바뀌었음을 확인 할 수 있다\n아래는 그에 해당하는 예제이다\n\n```java\n<%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\n    pageEncoding=\"UTF-8\"%>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n<title>Insert title here</title>\n</head>\n<body>\n\nid : <%=getId() %>    //선언문 사용하지 않음 service() 안에 자바코드로 바뀌었음\n</body>\n</html>\n\n<%!\n    String id = \"u001\"; //멤버변수 선언\n    public String getId( ) { //메소드 선언\n        return id;\n    }\n%>       //선언문을 사용했기 때문에 클래스 바디에 선언됨\n\n```\n\n\n\n- 스크립트릿\n<% %>\n가장 일반적으로 많이 쓰이는 스크립트 요소\n주로 프로그래밍의 로직을 기술할 때 사용\n스크립트릿에서 선언된 변수는 지역변수 -> service() 메서드 안에 선언되는 변수이다\n\n\n```java\n<%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\n    pageEncoding=\"UTF-8\"%>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n<title>Insert title here</title>\n</head>\n<body>\n\n<%\nfor(int i = 1; i <= 5; i++){\n%>\n<H<%=i %>> 아름다운 한글 </H<%=i %>>\n<%\n}\n%>\n</body>\n</html>\n\n```\n\n<br>\n\n\n- 표현식\n<% %>\nJSP페이지에서 웹 브라우저에 출력할 부분을 표현\n즉, 화면에 출력하기 위한것\n스크립트릿 내에서 출력할 부분은 내장객체인 out객체의 print() 또는 println() 메소드를 사용해서 출력\n\n<br>\n\n\n###JSP 내장 객체\n\nJSP를 실행하면 서블릿 소스가 생성되고 실행된다.\nJSP에 입력한 대부분의 코드는 생성되는 서블릿 소스의 _jspService() 메소드 안에 삽입되는 코드로 생성된다.\n_jspService()에 삽입된 코드의 윗부분에 미리 선언된 객체들이 있는데, 해당 객체들은 jsp에서도 사용 가능하다.\nresponse, request, application, session, out과 같은 변수를 내장객체라고 한다.\n\n\n```java\n<%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\n    pageEncoding=\"UTF-8\"%>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n<title>Insert title here</title>\n</head>\n<body>\n<%\n    StringBuffer url = request.getRequestURL();\n\n    out.println(\"url : \" + url.toString());\n    out.println(\"<br>\");\n%>\n</body>\n</html>\n\n```\n위의 예제에서는 객체 선언이 빠져있다\n원래 java는 변수 선언이 무조건 되야하는데 JSP에서는 내장 객체가 선언되어 있어서  \n위의 예제에서는 객체 선언 없이 사용할 수 있었다.\n\n\tprotected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\tPrintWriter out = response.getWriter();\n위의 코드가 빠져있는셈이다\n\n\n\n<br>\n<br>\n<br>","source":"_posts/boostcourse_08_jsp.md","raw":"---\ntitle: JSP | 부스트코스 백엔드 08\ndate: 2022-01-03\ntags: servlet, jsp\ntoc: true\ncategories: \n- boostcourse 백엔드\n---\n\n\n선생님이 JSP는 Servlet으로 어떻게 바뀔지 생각하는게 중요하다고 하셨다!\n근데 사실 아직 왜 그게 중요한지 모르겠다\nJSP는 어렵지 않은데 이걸 어떤식으로 적용해서 실무에서 사용하는지는 잘 모르겟다\n프로젝트를 하다보면 알겠지..\n\n### JSP (Java Server Servlet)\n웹을 쉽게 개발 할 수 있는 스크립트 엔진을 만든것.\nJSP는 서블릿 기술을 사용한다\nhtml과 굉장히 비슷하다\nJSP는 JSP 자체가 동작하지 않고, 모든 JSP는 서블릿으로 바뀌어서 동작한다\n톰캣이 JSP를 서블릿으로 바꾸는것이다.\n\n<br>\n\n### JSP -> Servlet\n\n\nC:\\Users\\jiwon\\eclipse-workspace\\.metadata\\.plugins\\org.eclipse.wst.server.core\\tmp0\\work\\Catalina\\localhost\n위의 경로로 이동하면 JSP파일이 servlet으로 변환된것을 찾을 수 있다\n\n<br>\n\n###JSP의 실행순서\n\n1. 브라우저가 웹서버에 JSP에 대한 요청 정보를 전달한다.\n2. 브라우저가 요청한 JSP가 최초로 요청했을 경우만 JSP로 작성된 코드가 서블릿으로 코드로 변환한다. (java 파일 생성)\n3. 서블릿 코드를 컴파일해서 실행가능한 bytecode로 변환한다. (class 파일 생성)\n4. 서블릿 클래스를 로딩하고 인스턴스를 생성한다.\n5. 서블릿이 실행되어 요청을 처리하고 응답 정보를 생성한다.\n\n<br>\n\n\n### 간단한 예제\nFile -> new -> JSP\nJSP 파일 위치는 Web Content의 밑에 있다\n이 위치에 html, css, javascript 다 넣으면 된다.\n\n```java\n<%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\n    pageEncoding=\"UTF-8\"%>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n<title>sum10</title>\n</head>\n<body>\n\n<% \n    int total = 0;\n    for(int i = 1; i <= 10; i++){\n        total = total + i;\n    }\n%>\n\n1부터 10까지의 합 : <%=total %>\n\n</body>\n</html>\n```\n\n\n\n\n- 지시자\n<%@\n\n아래 코드는 JSP 파일에서 java 언어로 작성된 코드가 나온다고 의미함\n인코딩을 맞춰줬다 안하면 한글이 깨진다\n\n<%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\n    pageEncoding=\"UTF-8\"%>\n \n\n\n- Scriptlet\n<% %>\n<% %> 이런 기호들은 서블릿으로 바꿀때 어떻게 바꾸는지 알려주기 위한 부분을 의미한다\nJSP에서는 다른 언어도 사용이 가능하지만 보통 java만 사용한다\n\n\n\n- 표현식\n<%= %>\nout.print();와 똑같은 역할을 한다.\n\n<br>\n\n### JSP 문법\n스크립트 요소의 이해\n\nJSP 페이지에서는 선언문(Declaration), 스크립트릿(Scriptlet), 표현식(Expression) 이라는 3가지의 스크립트 요소를 제공\n선언문 <%! %>: 전역변수 선언 및 메소드 선언에 사용\n스크립트릿 <% %>: 프로그래밍 코드 기술에 사용\n표현식 <%=%>: 화면에 출력할 내용 기술에 사용\n\n\n\n\n- 선언문\nJSP가 Servlet으로 바뀌었을때, Service() 메서드 안에서 자바 코드로 바뀌어있다 \n그러나, 선언문을 사용했을때는 Service() 메서드가 아니라 클래스 바디쪽에 코드가 바뀌었음을 확인 할 수 있다\n아래는 그에 해당하는 예제이다\n\n```java\n<%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\n    pageEncoding=\"UTF-8\"%>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n<title>Insert title here</title>\n</head>\n<body>\n\nid : <%=getId() %>    //선언문 사용하지 않음 service() 안에 자바코드로 바뀌었음\n</body>\n</html>\n\n<%!\n    String id = \"u001\"; //멤버변수 선언\n    public String getId( ) { //메소드 선언\n        return id;\n    }\n%>       //선언문을 사용했기 때문에 클래스 바디에 선언됨\n\n```\n\n\n\n- 스크립트릿\n<% %>\n가장 일반적으로 많이 쓰이는 스크립트 요소\n주로 프로그래밍의 로직을 기술할 때 사용\n스크립트릿에서 선언된 변수는 지역변수 -> service() 메서드 안에 선언되는 변수이다\n\n\n```java\n<%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\n    pageEncoding=\"UTF-8\"%>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n<title>Insert title here</title>\n</head>\n<body>\n\n<%\nfor(int i = 1; i <= 5; i++){\n%>\n<H<%=i %>> 아름다운 한글 </H<%=i %>>\n<%\n}\n%>\n</body>\n</html>\n\n```\n\n<br>\n\n\n- 표현식\n<% %>\nJSP페이지에서 웹 브라우저에 출력할 부분을 표현\n즉, 화면에 출력하기 위한것\n스크립트릿 내에서 출력할 부분은 내장객체인 out객체의 print() 또는 println() 메소드를 사용해서 출력\n\n<br>\n\n\n###JSP 내장 객체\n\nJSP를 실행하면 서블릿 소스가 생성되고 실행된다.\nJSP에 입력한 대부분의 코드는 생성되는 서블릿 소스의 _jspService() 메소드 안에 삽입되는 코드로 생성된다.\n_jspService()에 삽입된 코드의 윗부분에 미리 선언된 객체들이 있는데, 해당 객체들은 jsp에서도 사용 가능하다.\nresponse, request, application, session, out과 같은 변수를 내장객체라고 한다.\n\n\n```java\n<%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\n    pageEncoding=\"UTF-8\"%>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n<title>Insert title here</title>\n</head>\n<body>\n<%\n    StringBuffer url = request.getRequestURL();\n\n    out.println(\"url : \" + url.toString());\n    out.println(\"<br>\");\n%>\n</body>\n</html>\n\n```\n위의 예제에서는 객체 선언이 빠져있다\n원래 java는 변수 선언이 무조건 되야하는데 JSP에서는 내장 객체가 선언되어 있어서  \n위의 예제에서는 객체 선언 없이 사용할 수 있었다.\n\n\tprotected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\tPrintWriter out = response.getWriter();\n위의 코드가 빠져있는셈이다\n\n\n\n<br>\n<br>\n<br>","slug":"boostcourse-08-jsp","published":1,"updated":"2022-01-06T14:20:12.129Z","_id":"cky31phns00022srjhvks0w80","comments":1,"layout":"post","photos":[],"link":"","content":"<p>선생님이 JSP는 Servlet으로 어떻게 바뀔지 생각하는게 중요하다고 하셨다!<br>근데 사실 아직 왜 그게 중요한지 모르겠다<br>JSP는 어렵지 않은데 이걸 어떤식으로 적용해서 실무에서 사용하는지는 잘 모르겟다<br>프로젝트를 하다보면 알겠지..</p>\n<h3 id=\"JSP-Java-Server-Servlet\"><a href=\"#JSP-Java-Server-Servlet\" class=\"headerlink\" title=\"JSP (Java Server Servlet)\"></a>JSP (Java Server Servlet)</h3><p>웹을 쉽게 개발 할 수 있는 스크립트 엔진을 만든것.<br>JSP는 서블릿 기술을 사용한다<br>html과 굉장히 비슷하다<br>JSP는 JSP 자체가 동작하지 않고, 모든 JSP는 서블릿으로 바뀌어서 동작한다<br>톰캣이 JSP를 서블릿으로 바꾸는것이다.</p>\n<br>\n\n<h3 id=\"JSP-gt-Servlet\"><a href=\"#JSP-gt-Servlet\" class=\"headerlink\" title=\"JSP -&gt; Servlet\"></a>JSP -&gt; Servlet</h3><p>C:\\Users\\jiwon\\eclipse-workspace.metadata.plugins\\org.eclipse.wst.server.core\\tmp0\\work\\Catalina\\localhost<br>위의 경로로 이동하면 JSP파일이 servlet으로 변환된것을 찾을 수 있다</p>\n<br>\n\n<p>###JSP의 실행순서</p>\n<ol>\n<li>브라우저가 웹서버에 JSP에 대한 요청 정보를 전달한다.</li>\n<li>브라우저가 요청한 JSP가 최초로 요청했을 경우만 JSP로 작성된 코드가 서블릿으로 코드로 변환한다. (java 파일 생성)</li>\n<li>서블릿 코드를 컴파일해서 실행가능한 bytecode로 변환한다. (class 파일 생성)</li>\n<li>서블릿 클래스를 로딩하고 인스턴스를 생성한다.</li>\n<li>서블릿이 실행되어 요청을 처리하고 응답 정보를 생성한다.</li>\n</ol>\n<br>\n\n\n<h3 id=\"간단한-예제\"><a href=\"#간단한-예제\" class=\"headerlink\" title=\"간단한 예제\"></a>간단한 예제</h3><p>File -&gt; new -&gt; JSP<br>JSP 파일 위치는 Web Content의 밑에 있다<br>이 위치에 html, css, javascript 다 넣으면 된다.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ page language=<span class=\"string\">&quot;java&quot;</span> contentType=<span class=\"string\">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class=\"line\">    pageEncoding=<span class=\"string\">&quot;UTF-8&quot;</span>%&gt;</span><br><span class=\"line\">&lt;!DOCTYPE html PUBLIC <span class=\"string\">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class=\"string\">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;meta http-equiv=<span class=\"string\">&quot;Content-Type&quot;</span> content=<span class=\"string\">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br><span class=\"line\">&lt;title&gt;sum10&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;% </span><br><span class=\"line\">    <span class=\"keyword\">int</span> total = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">10</span>; i++)&#123;</span><br><span class=\"line\">        total = total + i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">%&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1</span>부터 <span class=\"number\">10</span>까지의 합 : &lt;%=total %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n\n<ul>\n<li>지시자<br>&lt;%@</li>\n</ul>\n<p>아래 코드는 JSP 파일에서 java 언어로 작성된 코드가 나온다고 의미함<br>인코딩을 맞춰줬다 안하면 한글이 깨진다</p>\n<p>&lt;%@ page language=”java” contentType=”text/html; charset=UTF-8”<br>    pageEncoding=”UTF-8”%&gt;</p>\n<ul>\n<li>Scriptlet<br>&lt;% %&gt;<br>&lt;% %&gt; 이런 기호들은 서블릿으로 바꿀때 어떻게 바꾸는지 알려주기 위한 부분을 의미한다<br>JSP에서는 다른 언어도 사용이 가능하지만 보통 java만 사용한다</li>\n</ul>\n<ul>\n<li>표현식<br>&lt;%= %&gt;<br>out.print();와 똑같은 역할을 한다.</li>\n</ul>\n<br>\n\n<h3 id=\"JSP-문법\"><a href=\"#JSP-문법\" class=\"headerlink\" title=\"JSP 문법\"></a>JSP 문법</h3><p>스크립트 요소의 이해</p>\n<p>JSP 페이지에서는 선언문(Declaration), 스크립트릿(Scriptlet), 표현식(Expression) 이라는 3가지의 스크립트 요소를 제공<br>선언문 &lt;%! %&gt;: 전역변수 선언 및 메소드 선언에 사용<br>스크립트릿 &lt;% %&gt;: 프로그래밍 코드 기술에 사용<br>표현식 &lt;%=%&gt;: 화면에 출력할 내용 기술에 사용</p>\n<ul>\n<li>선언문<br>JSP가 Servlet으로 바뀌었을때, Service() 메서드 안에서 자바 코드로 바뀌어있다<br>그러나, 선언문을 사용했을때는 Service() 메서드가 아니라 클래스 바디쪽에 코드가 바뀌었음을 확인 할 수 있다<br>아래는 그에 해당하는 예제이다</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ page language=<span class=\"string\">&quot;java&quot;</span> contentType=<span class=\"string\">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class=\"line\">    pageEncoding=<span class=\"string\">&quot;UTF-8&quot;</span>%&gt;</span><br><span class=\"line\">&lt;!DOCTYPE html PUBLIC <span class=\"string\">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class=\"string\">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;meta http-equiv=<span class=\"string\">&quot;Content-Type&quot;</span> content=<span class=\"string\">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br><span class=\"line\">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">id : &lt;%=getId() %&gt;    <span class=\"comment\">//선언문 사용하지 않음 service() 안에 자바코드로 바뀌었음</span></span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;%!</span><br><span class=\"line\">    String id = <span class=\"string\">&quot;u001&quot;</span>; <span class=\"comment\">//멤버변수 선언</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getId</span><span class=\"params\">( )</span> </span>&#123; <span class=\"comment\">//메소드 선언</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">%&gt;       <span class=\"comment\">//선언문을 사용했기 때문에 클래스 바디에 선언됨</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>스크립트릿<br>&lt;% %&gt;<br>가장 일반적으로 많이 쓰이는 스크립트 요소<br>주로 프로그래밍의 로직을 기술할 때 사용<br>스크립트릿에서 선언된 변수는 지역변수 -&gt; service() 메서드 안에 선언되는 변수이다</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ page language=<span class=\"string\">&quot;java&quot;</span> contentType=<span class=\"string\">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class=\"line\">    pageEncoding=<span class=\"string\">&quot;UTF-8&quot;</span>%&gt;</span><br><span class=\"line\">&lt;!DOCTYPE html PUBLIC <span class=\"string\">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class=\"string\">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;meta http-equiv=<span class=\"string\">&quot;Content-Type&quot;</span> content=<span class=\"string\">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br><span class=\"line\">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;%</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">5</span>; i++)&#123;</span><br><span class=\"line\">%&gt;</span><br><span class=\"line\">&lt;H&lt;%=i %&gt;&gt; 아름다운 한글 &lt;/H&lt;%=i %&gt;&gt;</span><br><span class=\"line\">&lt;%</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">%&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n<ul>\n<li>표현식<br>&lt;% %&gt;<br>JSP페이지에서 웹 브라우저에 출력할 부분을 표현<br>즉, 화면에 출력하기 위한것<br>스크립트릿 내에서 출력할 부분은 내장객체인 out객체의 print() 또는 println() 메소드를 사용해서 출력</li>\n</ul>\n<br>\n\n\n<p>###JSP 내장 객체</p>\n<p>JSP를 실행하면 서블릿 소스가 생성되고 실행된다.<br>JSP에 입력한 대부분의 코드는 생성되는 서블릿 소스의 _jspService() 메소드 안에 삽입되는 코드로 생성된다.<br>_jspService()에 삽입된 코드의 윗부분에 미리 선언된 객체들이 있는데, 해당 객체들은 jsp에서도 사용 가능하다.<br>response, request, application, session, out과 같은 변수를 내장객체라고 한다.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ page language=<span class=\"string\">&quot;java&quot;</span> contentType=<span class=\"string\">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class=\"line\">    pageEncoding=<span class=\"string\">&quot;UTF-8&quot;</span>%&gt;</span><br><span class=\"line\">&lt;!DOCTYPE html PUBLIC <span class=\"string\">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class=\"string\">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;meta http-equiv=<span class=\"string\">&quot;Content-Type&quot;</span> content=<span class=\"string\">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br><span class=\"line\">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;%</span><br><span class=\"line\">    StringBuffer url = request.getRequestURL();</span><br><span class=\"line\"></span><br><span class=\"line\">    out.println(<span class=\"string\">&quot;url : &quot;</span> + url.toString());</span><br><span class=\"line\">    out.println(<span class=\"string\">&quot;&lt;br&gt;&quot;</span>);</span><br><span class=\"line\">%&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>위의 예제에서는 객체 선언이 빠져있다<br>원래 java는 변수 선언이 무조건 되야하는데 JSP에서는 내장 객체가 선언되어 있어서<br>위의 예제에서는 객체 선언 없이 사용할 수 있었다.</p>\n<pre><code>protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;\nPrintWriter out = response.getWriter();\n</code></pre>\n<p>위의 코드가 빠져있는셈이다</p>\n<br>\n<br>\n<br>","site":{"data":{}},"excerpt":"선생님이 JSP는 Servlet으로 어떻게 바뀔지 생각하는게 중요하다고 하셨다!\n근데 사실 아직 왜 그게 중요한지 모르겠다\nJSP는 어렵지 않은데 이걸 어떤식으로 적용해서 실무에서 사용하는지는 잘 모르겟다\n프로젝트를 하다보면 알겠지..\n\nJSP (Java Server Servlet)\n웹을 쉽게 개발 할 수 있는 스크립트 엔진을 만든것.\nJSP는 서블릿 기술을 사용한다\nhtml과 굉장히 비슷하다\nJSP는 JSP 자체가 동작하지 않고, 모든 JSP는 서블릿으로 바뀌어서 동작한다\n톰캣이 JSP를 서블릿으로 바꾸는것이다.\n\n\nJSP -> ","more":"<p>선생님이 JSP는 Servlet으로 어떻게 바뀔지 생각하는게 중요하다고 하셨다!<br>근데 사실 아직 왜 그게 중요한지 모르겠다<br>JSP는 어렵지 않은데 이걸 어떤식으로 적용해서 실무에서 사용하는지는 잘 모르겟다<br>프로젝트를 하다보면 알겠지..</p>\n<h3 id=\"JSP-Java-Server-Servlet\"><a href=\"#JSP-Java-Server-Servlet\" class=\"headerlink\" title=\"JSP (Java Server Servlet)\"></a>JSP (Java Server Servlet)</h3><p>웹을 쉽게 개발 할 수 있는 스크립트 엔진을 만든것.<br>JSP는 서블릿 기술을 사용한다<br>html과 굉장히 비슷하다<br>JSP는 JSP 자체가 동작하지 않고, 모든 JSP는 서블릿으로 바뀌어서 동작한다<br>톰캣이 JSP를 서블릿으로 바꾸는것이다.</p>\n<br>\n\n<h3 id=\"JSP-gt-Servlet\"><a href=\"#JSP-gt-Servlet\" class=\"headerlink\" title=\"JSP -&gt; Servlet\"></a>JSP -&gt; Servlet</h3><p>C:\\Users\\jiwon\\eclipse-workspace.metadata.plugins\\org.eclipse.wst.server.core\\tmp0\\work\\Catalina\\localhost<br>위의 경로로 이동하면 JSP파일이 servlet으로 변환된것을 찾을 수 있다</p>\n<br>\n\n<p>###JSP의 실행순서</p>\n<ol>\n<li>브라우저가 웹서버에 JSP에 대한 요청 정보를 전달한다.</li>\n<li>브라우저가 요청한 JSP가 최초로 요청했을 경우만 JSP로 작성된 코드가 서블릿으로 코드로 변환한다. (java 파일 생성)</li>\n<li>서블릿 코드를 컴파일해서 실행가능한 bytecode로 변환한다. (class 파일 생성)</li>\n<li>서블릿 클래스를 로딩하고 인스턴스를 생성한다.</li>\n<li>서블릿이 실행되어 요청을 처리하고 응답 정보를 생성한다.</li>\n</ol>\n<br>\n\n\n<h3 id=\"간단한-예제\"><a href=\"#간단한-예제\" class=\"headerlink\" title=\"간단한 예제\"></a>간단한 예제</h3><p>File -&gt; new -&gt; JSP<br>JSP 파일 위치는 Web Content의 밑에 있다<br>이 위치에 html, css, javascript 다 넣으면 된다.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ page language=<span class=\"string\">&quot;java&quot;</span> contentType=<span class=\"string\">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class=\"line\">    pageEncoding=<span class=\"string\">&quot;UTF-8&quot;</span>%&gt;</span><br><span class=\"line\">&lt;!DOCTYPE html PUBLIC <span class=\"string\">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class=\"string\">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;meta http-equiv=<span class=\"string\">&quot;Content-Type&quot;</span> content=<span class=\"string\">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br><span class=\"line\">&lt;title&gt;sum10&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;% </span><br><span class=\"line\">    <span class=\"keyword\">int</span> total = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">10</span>; i++)&#123;</span><br><span class=\"line\">        total = total + i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">%&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1</span>부터 <span class=\"number\">10</span>까지의 합 : &lt;%=total %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n\n<ul>\n<li>지시자<br>&lt;%@</li>\n</ul>\n<p>아래 코드는 JSP 파일에서 java 언어로 작성된 코드가 나온다고 의미함<br>인코딩을 맞춰줬다 안하면 한글이 깨진다</p>\n<p>&lt;%@ page language=”java” contentType=”text/html; charset=UTF-8”<br>    pageEncoding=”UTF-8”%&gt;</p>\n<ul>\n<li>Scriptlet<br>&lt;% %&gt;<br>&lt;% %&gt; 이런 기호들은 서블릿으로 바꿀때 어떻게 바꾸는지 알려주기 위한 부분을 의미한다<br>JSP에서는 다른 언어도 사용이 가능하지만 보통 java만 사용한다</li>\n</ul>\n<ul>\n<li>표현식<br>&lt;%= %&gt;<br>out.print();와 똑같은 역할을 한다.</li>\n</ul>\n<br>\n\n<h3 id=\"JSP-문법\"><a href=\"#JSP-문법\" class=\"headerlink\" title=\"JSP 문법\"></a>JSP 문법</h3><p>스크립트 요소의 이해</p>\n<p>JSP 페이지에서는 선언문(Declaration), 스크립트릿(Scriptlet), 표현식(Expression) 이라는 3가지의 스크립트 요소를 제공<br>선언문 &lt;%! %&gt;: 전역변수 선언 및 메소드 선언에 사용<br>스크립트릿 &lt;% %&gt;: 프로그래밍 코드 기술에 사용<br>표현식 &lt;%=%&gt;: 화면에 출력할 내용 기술에 사용</p>\n<ul>\n<li>선언문<br>JSP가 Servlet으로 바뀌었을때, Service() 메서드 안에서 자바 코드로 바뀌어있다<br>그러나, 선언문을 사용했을때는 Service() 메서드가 아니라 클래스 바디쪽에 코드가 바뀌었음을 확인 할 수 있다<br>아래는 그에 해당하는 예제이다</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ page language=<span class=\"string\">&quot;java&quot;</span> contentType=<span class=\"string\">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class=\"line\">    pageEncoding=<span class=\"string\">&quot;UTF-8&quot;</span>%&gt;</span><br><span class=\"line\">&lt;!DOCTYPE html PUBLIC <span class=\"string\">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class=\"string\">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;meta http-equiv=<span class=\"string\">&quot;Content-Type&quot;</span> content=<span class=\"string\">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br><span class=\"line\">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">id : &lt;%=getId() %&gt;    <span class=\"comment\">//선언문 사용하지 않음 service() 안에 자바코드로 바뀌었음</span></span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;%!</span><br><span class=\"line\">    String id = <span class=\"string\">&quot;u001&quot;</span>; <span class=\"comment\">//멤버변수 선언</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getId</span><span class=\"params\">( )</span> </span>&#123; <span class=\"comment\">//메소드 선언</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">%&gt;       <span class=\"comment\">//선언문을 사용했기 때문에 클래스 바디에 선언됨</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>스크립트릿<br>&lt;% %&gt;<br>가장 일반적으로 많이 쓰이는 스크립트 요소<br>주로 프로그래밍의 로직을 기술할 때 사용<br>스크립트릿에서 선언된 변수는 지역변수 -&gt; service() 메서드 안에 선언되는 변수이다</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ page language=<span class=\"string\">&quot;java&quot;</span> contentType=<span class=\"string\">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class=\"line\">    pageEncoding=<span class=\"string\">&quot;UTF-8&quot;</span>%&gt;</span><br><span class=\"line\">&lt;!DOCTYPE html PUBLIC <span class=\"string\">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class=\"string\">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;meta http-equiv=<span class=\"string\">&quot;Content-Type&quot;</span> content=<span class=\"string\">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br><span class=\"line\">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;%</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">5</span>; i++)&#123;</span><br><span class=\"line\">%&gt;</span><br><span class=\"line\">&lt;H&lt;%=i %&gt;&gt; 아름다운 한글 &lt;/H&lt;%=i %&gt;&gt;</span><br><span class=\"line\">&lt;%</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">%&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n<ul>\n<li>표현식<br>&lt;% %&gt;<br>JSP페이지에서 웹 브라우저에 출력할 부분을 표현<br>즉, 화면에 출력하기 위한것<br>스크립트릿 내에서 출력할 부분은 내장객체인 out객체의 print() 또는 println() 메소드를 사용해서 출력</li>\n</ul>\n<br>\n\n\n<p>###JSP 내장 객체</p>\n<p>JSP를 실행하면 서블릿 소스가 생성되고 실행된다.<br>JSP에 입력한 대부분의 코드는 생성되는 서블릿 소스의 _jspService() 메소드 안에 삽입되는 코드로 생성된다.<br>_jspService()에 삽입된 코드의 윗부분에 미리 선언된 객체들이 있는데, 해당 객체들은 jsp에서도 사용 가능하다.<br>response, request, application, session, out과 같은 변수를 내장객체라고 한다.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ page language=<span class=\"string\">&quot;java&quot;</span> contentType=<span class=\"string\">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class=\"line\">    pageEncoding=<span class=\"string\">&quot;UTF-8&quot;</span>%&gt;</span><br><span class=\"line\">&lt;!DOCTYPE html PUBLIC <span class=\"string\">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class=\"string\">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;meta http-equiv=<span class=\"string\">&quot;Content-Type&quot;</span> content=<span class=\"string\">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br><span class=\"line\">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;%</span><br><span class=\"line\">    StringBuffer url = request.getRequestURL();</span><br><span class=\"line\"></span><br><span class=\"line\">    out.println(<span class=\"string\">&quot;url : &quot;</span> + url.toString());</span><br><span class=\"line\">    out.println(<span class=\"string\">&quot;&lt;br&gt;&quot;</span>);</span><br><span class=\"line\">%&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>위의 예제에서는 객체 선언이 빠져있다<br>원래 java는 변수 선언이 무조건 되야하는데 JSP에서는 내장 객체가 선언되어 있어서<br>위의 예제에서는 객체 선언 없이 사용할 수 있었다.</p>\n<pre><code>protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;\nPrintWriter out = response.getWriter();\n</code></pre>\n<p>위의 코드가 빠져있는셈이다</p>\n<br>\n<br>\n<br>"},{"title":"HTTP | 부스트코스 백엔드 05","date":"2022-01-02T15:00:00.000Z","toc":true,"_content":"### HTTP (Hypertext Transfer Protocol)\n웹 브라우저와 웹 서버 간에도 서로 통신하기 위한 규약\n서버와 클라이언트가 인터넷상에서 데이터를 주고받기 위한 프로토콜이다.\n\n<br>\n\n### HTTP 작동방식\n\nHTTP는 서버/클라이언트 모델을 따릅니다.\n장점\n- 불특정 다수를 대상으로 하는 서비스에는 적합하다.\n- 클라이언트와 서버가 계속 연결된 형태가 아니기 때문에 클라이언트와 서버 간의 최대 연결 수보다 훨씬 많은 요청과 응답을 처리할 수 있다.\n단점\n- 연결을 끊어버리기 때문에, 클라이언트의 이전 상황을 알 수가 없다.\n- 이러한 특징을 무상태(Stateless)라고 말한다.\n- 이러한 특징 때문에 정보를 유지하기 위해서 Cookie와 같은 기술이 등장하게 되었다.\n\n<br>\n\n### URL (Uniform Resource Locator)\n\n인터넷 상의 자원의 위치\n특정 웹 서버의 특정 파일에 접근하기 위한 경로 혹은 주소\n\n<br>\n\n###요청 메서드 : GET, PUT, POST, PUSH, OPTIONS 등의 요청 방식이 온다.\n요청 URI : 요청하는 자원의 위치를 명시한다.\nHTTP 프로토콜 버전 : 웹 브라우저가 사용하는 프로토콜 버전이다.\n첫번째 줄의 요청메소드는 서버에게 요청의 종류를 알려주기 위해서 사용됩니다.\n\n각각의 메소드 이름은 다음과 같은 의미를 가집니다.\n\n참고로 최초의 웹 서버는 GET방식만 지원해줬습니다.\n\nGET : 정보를 요청하기 위해서 사용한다. (SELECT)\nPOST : 정보를 밀어넣기 위해서 사용한다. (INSERT)\nPUT : 정보를 업데이트하기 위해서 사용한다. (UPDATE)\nDELETE : 정보를 삭제하기 위해서 사용한다. (DELETE)\nHEAD : (HTTP)헤더 정보만 요청한다. 해당 자원이 존재하는지 혹은 서버에 문제가 없는지를 확인하기 위해서 사용한다.\nOPTIONS : 웹서버가 지원하는 메서드의 종류를 요청한다.\nTRACE : 클라이언트의 요청을 그대로 반환한다. 예컨데 echo 서비스로 서버 상태를 확인하기 위한 목적으로 주로 사용한다.\n\n<br>\n\n### 브라우저\nex) 사파리, 구글크롬, 파이어폭스 ...etc\n서버에서 전송한 데이터(HTML과 같은)가 클라이언트에 도착하는곳\nBrowser에는 데이터를 해석해주는 파서와 데이터를 화면에 표현해주는 렌더링엔진이 포함되어 있습니다.\n\n- 브라우저의 흐름\nPasing HTML to construct the DOM tree      #pasing 분석 해석\n-> Render tree contruction\n-> Layout of the render tree  #화면 배치\n-> Painting the render tee     \n\n\n<br>\n<br>\n<br>\n\n\n\n","source":"_posts/boostcourse_05_http.md","raw":"---\ntitle: HTTP | 부스트코스 백엔드 05\ndate: 2022-01-03\ntags: database\ntoc: true\ncategories: \n- boostcourse 백엔드\n---\n### HTTP (Hypertext Transfer Protocol)\n웹 브라우저와 웹 서버 간에도 서로 통신하기 위한 규약\n서버와 클라이언트가 인터넷상에서 데이터를 주고받기 위한 프로토콜이다.\n\n<br>\n\n### HTTP 작동방식\n\nHTTP는 서버/클라이언트 모델을 따릅니다.\n장점\n- 불특정 다수를 대상으로 하는 서비스에는 적합하다.\n- 클라이언트와 서버가 계속 연결된 형태가 아니기 때문에 클라이언트와 서버 간의 최대 연결 수보다 훨씬 많은 요청과 응답을 처리할 수 있다.\n단점\n- 연결을 끊어버리기 때문에, 클라이언트의 이전 상황을 알 수가 없다.\n- 이러한 특징을 무상태(Stateless)라고 말한다.\n- 이러한 특징 때문에 정보를 유지하기 위해서 Cookie와 같은 기술이 등장하게 되었다.\n\n<br>\n\n### URL (Uniform Resource Locator)\n\n인터넷 상의 자원의 위치\n특정 웹 서버의 특정 파일에 접근하기 위한 경로 혹은 주소\n\n<br>\n\n###요청 메서드 : GET, PUT, POST, PUSH, OPTIONS 등의 요청 방식이 온다.\n요청 URI : 요청하는 자원의 위치를 명시한다.\nHTTP 프로토콜 버전 : 웹 브라우저가 사용하는 프로토콜 버전이다.\n첫번째 줄의 요청메소드는 서버에게 요청의 종류를 알려주기 위해서 사용됩니다.\n\n각각의 메소드 이름은 다음과 같은 의미를 가집니다.\n\n참고로 최초의 웹 서버는 GET방식만 지원해줬습니다.\n\nGET : 정보를 요청하기 위해서 사용한다. (SELECT)\nPOST : 정보를 밀어넣기 위해서 사용한다. (INSERT)\nPUT : 정보를 업데이트하기 위해서 사용한다. (UPDATE)\nDELETE : 정보를 삭제하기 위해서 사용한다. (DELETE)\nHEAD : (HTTP)헤더 정보만 요청한다. 해당 자원이 존재하는지 혹은 서버에 문제가 없는지를 확인하기 위해서 사용한다.\nOPTIONS : 웹서버가 지원하는 메서드의 종류를 요청한다.\nTRACE : 클라이언트의 요청을 그대로 반환한다. 예컨데 echo 서비스로 서버 상태를 확인하기 위한 목적으로 주로 사용한다.\n\n<br>\n\n### 브라우저\nex) 사파리, 구글크롬, 파이어폭스 ...etc\n서버에서 전송한 데이터(HTML과 같은)가 클라이언트에 도착하는곳\nBrowser에는 데이터를 해석해주는 파서와 데이터를 화면에 표현해주는 렌더링엔진이 포함되어 있습니다.\n\n- 브라우저의 흐름\nPasing HTML to construct the DOM tree      #pasing 분석 해석\n-> Render tree contruction\n-> Layout of the render tree  #화면 배치\n-> Painting the render tee     \n\n\n<br>\n<br>\n<br>\n\n\n\n","slug":"boostcourse-05-http","published":1,"updated":"2022-01-06T14:20:12.126Z","_id":"cky31phnt00032srj28pn8x6h","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"HTTP-Hypertext-Transfer-Protocol\"><a href=\"#HTTP-Hypertext-Transfer-Protocol\" class=\"headerlink\" title=\"HTTP (Hypertext Transfer Protocol)\"></a>HTTP (Hypertext Transfer Protocol)</h3><p>웹 브라우저와 웹 서버 간에도 서로 통신하기 위한 규약<br>서버와 클라이언트가 인터넷상에서 데이터를 주고받기 위한 프로토콜이다.</p>\n<br>\n\n<h3 id=\"HTTP-작동방식\"><a href=\"#HTTP-작동방식\" class=\"headerlink\" title=\"HTTP 작동방식\"></a>HTTP 작동방식</h3><p>HTTP는 서버/클라이언트 모델을 따릅니다.<br>장점</p>\n<ul>\n<li>불특정 다수를 대상으로 하는 서비스에는 적합하다.</li>\n<li>클라이언트와 서버가 계속 연결된 형태가 아니기 때문에 클라이언트와 서버 간의 최대 연결 수보다 훨씬 많은 요청과 응답을 처리할 수 있다.<br>단점</li>\n<li>연결을 끊어버리기 때문에, 클라이언트의 이전 상황을 알 수가 없다.</li>\n<li>이러한 특징을 무상태(Stateless)라고 말한다.</li>\n<li>이러한 특징 때문에 정보를 유지하기 위해서 Cookie와 같은 기술이 등장하게 되었다.</li>\n</ul>\n<br>\n\n<h3 id=\"URL-Uniform-Resource-Locator\"><a href=\"#URL-Uniform-Resource-Locator\" class=\"headerlink\" title=\"URL (Uniform Resource Locator)\"></a>URL (Uniform Resource Locator)</h3><p>인터넷 상의 자원의 위치<br>특정 웹 서버의 특정 파일에 접근하기 위한 경로 혹은 주소</p>\n<br>\n\n<p>###요청 메서드 : GET, PUT, POST, PUSH, OPTIONS 등의 요청 방식이 온다.<br>요청 URI : 요청하는 자원의 위치를 명시한다.<br>HTTP 프로토콜 버전 : 웹 브라우저가 사용하는 프로토콜 버전이다.<br>첫번째 줄의 요청메소드는 서버에게 요청의 종류를 알려주기 위해서 사용됩니다.</p>\n<p>각각의 메소드 이름은 다음과 같은 의미를 가집니다.</p>\n<p>참고로 최초의 웹 서버는 GET방식만 지원해줬습니다.</p>\n<p>GET : 정보를 요청하기 위해서 사용한다. (SELECT)<br>POST : 정보를 밀어넣기 위해서 사용한다. (INSERT)<br>PUT : 정보를 업데이트하기 위해서 사용한다. (UPDATE)<br>DELETE : 정보를 삭제하기 위해서 사용한다. (DELETE)<br>HEAD : (HTTP)헤더 정보만 요청한다. 해당 자원이 존재하는지 혹은 서버에 문제가 없는지를 확인하기 위해서 사용한다.<br>OPTIONS : 웹서버가 지원하는 메서드의 종류를 요청한다.<br>TRACE : 클라이언트의 요청을 그대로 반환한다. 예컨데 echo 서비스로 서버 상태를 확인하기 위한 목적으로 주로 사용한다.</p>\n<br>\n\n<h3 id=\"브라우저\"><a href=\"#브라우저\" class=\"headerlink\" title=\"브라우저\"></a>브라우저</h3><p>ex) 사파리, 구글크롬, 파이어폭스 …etc<br>서버에서 전송한 데이터(HTML과 같은)가 클라이언트에 도착하는곳<br>Browser에는 데이터를 해석해주는 파서와 데이터를 화면에 표현해주는 렌더링엔진이 포함되어 있습니다.</p>\n<ul>\n<li>브라우저의 흐름<br>Pasing HTML to construct the DOM tree      #pasing 분석 해석</li>\n<li><blockquote>\n<p>Render tree contruction</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>Layout of the render tree  #화면 배치</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>Painting the render tee     </p>\n</blockquote>\n</li>\n</ul>\n<br>\n<br>\n<br>\n\n\n\n","site":{"data":{}},"excerpt":"HTTP (Hypertext Transfer Protocol)\n웹 브라우저와 웹 서버 간에도 서로 통신하기 위한 규약\n서버와 클라이언트가 인터넷상에서 데이터를 주고받기 위한 프로토콜이다.\n\n\nHTTP 작동방식\nHTTP는 서버/클라이언트 모델을 따릅니다.\n장점\n\n * 불특정 다수를 대상으로 하는 서비스에는 적합하다.\n * 클라이언트와 서버가 계속 연결된 형태가 아니기 때문에 클라이언트와 서버 간의 최대 연결 수보다 훨씬 많은 요청과 응답을 처리할 수 있다.\n   단점\n * 연결을 끊어버리기 때문에, 클라이언트의 이전 상황을 알 수가 ","more":"<h3 id=\"HTTP-Hypertext-Transfer-Protocol\"><a href=\"#HTTP-Hypertext-Transfer-Protocol\" class=\"headerlink\" title=\"HTTP (Hypertext Transfer Protocol)\"></a>HTTP (Hypertext Transfer Protocol)</h3><p>웹 브라우저와 웹 서버 간에도 서로 통신하기 위한 규약<br>서버와 클라이언트가 인터넷상에서 데이터를 주고받기 위한 프로토콜이다.</p>\n<br>\n\n<h3 id=\"HTTP-작동방식\"><a href=\"#HTTP-작동방식\" class=\"headerlink\" title=\"HTTP 작동방식\"></a>HTTP 작동방식</h3><p>HTTP는 서버/클라이언트 모델을 따릅니다.<br>장점</p>\n<ul>\n<li>불특정 다수를 대상으로 하는 서비스에는 적합하다.</li>\n<li>클라이언트와 서버가 계속 연결된 형태가 아니기 때문에 클라이언트와 서버 간의 최대 연결 수보다 훨씬 많은 요청과 응답을 처리할 수 있다.<br>단점</li>\n<li>연결을 끊어버리기 때문에, 클라이언트의 이전 상황을 알 수가 없다.</li>\n<li>이러한 특징을 무상태(Stateless)라고 말한다.</li>\n<li>이러한 특징 때문에 정보를 유지하기 위해서 Cookie와 같은 기술이 등장하게 되었다.</li>\n</ul>\n<br>\n\n<h3 id=\"URL-Uniform-Resource-Locator\"><a href=\"#URL-Uniform-Resource-Locator\" class=\"headerlink\" title=\"URL (Uniform Resource Locator)\"></a>URL (Uniform Resource Locator)</h3><p>인터넷 상의 자원의 위치<br>특정 웹 서버의 특정 파일에 접근하기 위한 경로 혹은 주소</p>\n<br>\n\n<p>###요청 메서드 : GET, PUT, POST, PUSH, OPTIONS 등의 요청 방식이 온다.<br>요청 URI : 요청하는 자원의 위치를 명시한다.<br>HTTP 프로토콜 버전 : 웹 브라우저가 사용하는 프로토콜 버전이다.<br>첫번째 줄의 요청메소드는 서버에게 요청의 종류를 알려주기 위해서 사용됩니다.</p>\n<p>각각의 메소드 이름은 다음과 같은 의미를 가집니다.</p>\n<p>참고로 최초의 웹 서버는 GET방식만 지원해줬습니다.</p>\n<p>GET : 정보를 요청하기 위해서 사용한다. (SELECT)<br>POST : 정보를 밀어넣기 위해서 사용한다. (INSERT)<br>PUT : 정보를 업데이트하기 위해서 사용한다. (UPDATE)<br>DELETE : 정보를 삭제하기 위해서 사용한다. (DELETE)<br>HEAD : (HTTP)헤더 정보만 요청한다. 해당 자원이 존재하는지 혹은 서버에 문제가 없는지를 확인하기 위해서 사용한다.<br>OPTIONS : 웹서버가 지원하는 메서드의 종류를 요청한다.<br>TRACE : 클라이언트의 요청을 그대로 반환한다. 예컨데 echo 서비스로 서버 상태를 확인하기 위한 목적으로 주로 사용한다.</p>\n<br>\n\n<h3 id=\"브라우저\"><a href=\"#브라우저\" class=\"headerlink\" title=\"브라우저\"></a>브라우저</h3><p>ex) 사파리, 구글크롬, 파이어폭스 …etc<br>서버에서 전송한 데이터(HTML과 같은)가 클라이언트에 도착하는곳<br>Browser에는 데이터를 해석해주는 파서와 데이터를 화면에 표현해주는 렌더링엔진이 포함되어 있습니다.</p>\n<ul>\n<li>브라우저의 흐름<br>Pasing HTML to construct the DOM tree      #pasing 분석 해석</li>\n<li><blockquote>\n<p>Render tree contruction</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>Layout of the render tree  #화면 배치</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>Painting the render tee     </p>\n</blockquote>\n</li>\n</ul>\n<br>\n<br>\n<br>\n\n\n\n"},{"title":"Scope | 부스트코스 백엔드 09","date":"2022-01-02T15:00:00.000Z","toc":true,"_content":"\n\n\n### Scope\n객체의 범위를 정의\n유효범위\n-> 스코프 예제를 한번 찾아봐야할것 같다\n\n\n- Application\n- Session\n- Request\n- Page\n\n\n![](/images/boostcourse_01/14.PNG)\n\n\n\n\n- Application \n웹 어플리케이션이 시작되고 종료될 때까지 변수가 유지되는 경우 사용\n\n- Session\n웹 브라우저 별로 변수가 관리되는 경우 사용\n세션 객체가 생성되서 세션 객체가 소멸 될때까지 사용할 수 있는 것이다.\n상태유지\n\n- Request\nhttp요청을 WAS가 받아서 웹 브라우저에게 응답할 때까지 변수가 유지되는 경우 사용\n클라이언트로 요청이 들어와서 서버가 어떤 일들을 수행한 다음에 응답을 할때까지 사용하는 것이다\n\n- Page\n페이지 내에서 지역변수처럼 사용\nPage Scope는 선언된 한 페이지 그 내에서만 사용할 수 있는 것이다\n \n\n\n### Page Scope\n- PageContext 추상 클래스를 사용한다.\n- JSP 페이지에서 pageContext라는 내장 객체로 사용 가능 하다.\n- forward가 될 경우 해당 Page scope에 지정된 변수는 사용할 수 없다.\n- 사용방법은 Application scope나 Session scope, request scope와 같다.\n- 마치 지역변수처럼 사용된다는 것이 다른 Scope들과 다르다.\n- jsp에서 pageScope에 값을 저장한 후 해당 값을 EL표기법 등에서 사용할 때 사용됩니다.\n- 지역 변수처럼 해당 jsp나 서블릿이 실행되는 동안에만 정보를 유지하고자 할 때 사용됩니다.\n\n\n\n\n\n### Request Scope\n- http 요청을 WAS가 받아서 웹 브라우저에게 응답할 때까지 변수값을 유지하고자 할 경우 사용한다.\n- HttpServletRequest 객체를 사용한다.\n- JSP에서는 request 내장 변수를 사용한다.\n- 서블릿에서는 HttpServletRequest 객체를 사용한다.\n- 값을 저장할 때는 request 객체의 setAttribute()메소드를 사용한다.\n- 값을 읽어 들일 때는 request 객체의 getAttribute()메소드를 사용한다.\n- forward 시 값을 유지하고자 사용한다.\n- 앞에서 forward에 대하여 배울 때 forward 하기 전에 request 객체의 setAttribute() 메소드로 값을 설정한 후, 서블릿이나 jsp에게 결과를 전달하여 값을 출력하도록 하였는데 이렇게 포워드 되는 동안 값이 유지되는 것이 Request scope를 이용했다고 합니다.\n\n\n### Session Scope\n- 웹 브라우저별로 변수를 관리하고자 할 경우 사용한다.\n- 웹 브라우저간의 탭 간에는 세션정보가 공유되기 때문에, 각각의 탭에서는 같은 세션정보를 사용할 수 있다.\n- HttpSession 인터페이스를 구현한 객체를 사용한다.\n- JSP에서는 session 내장 변수를 사용한다.\n- 서블릿에서는 HttpServletRequest의 getSession()메소드를 이용하여 session 객체를 얻는다.\n- 값을 저장할 때는 session 객체의 setAttribute()메소드를 사용한다.\n- 값을 읽어 들일 때는 session 객체의 getAttribute()메소드를 사용한다.\n- 장바구니처럼 사용자별로 유지가 되어야 할 정보가 있을 때 사용한다.\n\n\n###Application Scope\n- 웹 어플리케이션이 시작되고 종료될 때까지 변수를 사용할 수 있다.\n- ServletContext 인터페이스를 구현한 객체를 사용한다.\n- jsp에서는 application 내장 객체를 이용한다.\n- 서블릿의 경우는 getServletContext()메소드를 이용하여 application객체를 이용한다.\n- 웹 어플리케이션 하나당 하나의 application객체가 사용된다.\n- 값을 저장할 때는 application객체의 setAttribute()메소드를 사용한다.\n- 값을 읽어 들일 때는 application객체의 getAttribute()메소드를 사용한다.\n- 모든 클라이언트가 공통으로 사용해야 할 값들이 있을 때 사용한다.\n\n\n\n### Application Scope 예제\n- ApplicationScope01, ApplicationScope02 서블릿 2개 생성\n- applicationscope01.jsp를 생성\n- ApplicationScope02는 ApplicationScope로 value에 1을 저장한다.\n- ApplicationScope02는 Applicationscope로 저장된 value의 값에 1을 더한 후 그 결과를 출력\n- applicationscope01.jsp는 Application scope로 저장된 value의 값에 2를 더한 후 그 결과를 출력\n- Application scope는 웹 어플리케이션을 사용하는 모든 브라우저에서 같은 값을 사용하게 한다.\n테스트를 위해서 크롬과 인터넷 익스플로러를 사용해서 결과를 확인한다.\n\n\n\nApplicationScope01\n```java\n@WebServlet(\"/ApplicationScope01\")\npublic class ApplicationScope01 extends HttpServlet {\n\tprivate static final long serialVersionUID = 1L;\n       \n\n    public ApplicationScope01() {\n        super();\n        // TODO Auto-generated constructor stub\n    }\n\n\n\tprotected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\t\tresponse.setContentType(\"text/html; charset=UTF-8\");\n\n\t\tPrintWriter out = response.getWriter();\n\t\tServletContext application = getServletContext();\n\t\t\n\t\tint value = 1;\n\t\tapplication.setAttribute(\"value\", value);\n\t\t\n\t\tout.println(\"<h1>value: \"+ value + \"</h1>\");\n\t\t\n\t}\n\n}\n```\nsetAttribute와 getAttribute는 다른 scope에서도 동일하게 사용한다\n\n\n\nApplicationScope02\n```java\n@WebServlet(\"/ApplicationScope02\")\npublic class ApplicationScope02 extends HttpServlet {\n\tprivate static final long serialVersionUID = 1L;\n\n    public ApplicationScope02() {\n        super();\n        // TODO Auto-generated constructor stub\n    }\n\n\n\tprotected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\t\tresponse.setContentType(\"text/html; charset=UTF-8\");\n\t\t\n\t\tPrintWriter out = response.getWriter();\n\t\t\n\t\tServletContext application = getServletContext();\n\t\ttry {\n\t\tint value = (int)application.getAttribute(\"value\");\n\t\tvalue++;\n\t\tapplication.setAttribute(\"value\", value);\n\t\t\n\t\tout.println(\"<h1>value: \"+ value + \"</h1>\");\n\t\t}catch(NullPointerException e) {\n\t\t\tout.print(\"value의 값이 설정되지 않았습니다.\");\n\t\t}\n\t}\n}\n```\n\n\n\napplicationScope01.jsp\n```java\n<%@ page language=\"java\" contentType=\"text/html; charset=EUC-KR\"\n    pageEncoding=\"EUC-KR\"%>\n<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"EUC-KR\">\n<title>Insert title here</title>\n</head>\n<body>\n<%\n    try{\n        int value = (int)application.getAttribute(\"value\");\n        value = value + 2;\n        application.setAttribute(\"value\", value);\n%>\n        <h1><%=value %></h1>\n<%        \n    }catch(NullPointerException ex){\n%>\n        <h1>설정된 값이 없습니다.</h1>\n<%        \n    }\n%>\n\n</body>\n</html>\n```\n\n\n\n해당 어플리케이션 서버를 종료했다가 다시 재시작 해야지 value값이 초기화 됨\nApplication01을 먼저 시작해야지 value값이 초기화 됨\n\nApplication scope는 servletcontext라는 객체를 이용해서 얻어낼 수 있다\nservletcontext는 getServletContext라는 메서드로 알아낼 수 있다\nservletcontext라는 객체가 실제 웹 애플리케이션 영역으로 인터페이스를 구현한것이다 그러므로 실제 Servlet이다\nsetAttribute와 getAttribute는 다른 scope에서도 동일하게 사용한다\n\ntry-catch 사용하는 이유\nApplicationScope02가 01보다 먼저 실행되지 않는다면 값이 없기 때문에 null을 출력한다\n따라서 NullpointerException 처리를 해준것이다 \n\n\n\n\n\n\n\n\n","source":"_posts/boostcourse_09_scope.md","raw":"---\ntitle:  Scope | 부스트코스 백엔드 09\ndate: 2022-01-03\ntags: scope\ntoc: true\ncategories:\n- boostcourse 백엔드\n---\n\n\n\n### Scope\n객체의 범위를 정의\n유효범위\n-> 스코프 예제를 한번 찾아봐야할것 같다\n\n\n- Application\n- Session\n- Request\n- Page\n\n\n![](/images/boostcourse_01/14.PNG)\n\n\n\n\n- Application \n웹 어플리케이션이 시작되고 종료될 때까지 변수가 유지되는 경우 사용\n\n- Session\n웹 브라우저 별로 변수가 관리되는 경우 사용\n세션 객체가 생성되서 세션 객체가 소멸 될때까지 사용할 수 있는 것이다.\n상태유지\n\n- Request\nhttp요청을 WAS가 받아서 웹 브라우저에게 응답할 때까지 변수가 유지되는 경우 사용\n클라이언트로 요청이 들어와서 서버가 어떤 일들을 수행한 다음에 응답을 할때까지 사용하는 것이다\n\n- Page\n페이지 내에서 지역변수처럼 사용\nPage Scope는 선언된 한 페이지 그 내에서만 사용할 수 있는 것이다\n \n\n\n### Page Scope\n- PageContext 추상 클래스를 사용한다.\n- JSP 페이지에서 pageContext라는 내장 객체로 사용 가능 하다.\n- forward가 될 경우 해당 Page scope에 지정된 변수는 사용할 수 없다.\n- 사용방법은 Application scope나 Session scope, request scope와 같다.\n- 마치 지역변수처럼 사용된다는 것이 다른 Scope들과 다르다.\n- jsp에서 pageScope에 값을 저장한 후 해당 값을 EL표기법 등에서 사용할 때 사용됩니다.\n- 지역 변수처럼 해당 jsp나 서블릿이 실행되는 동안에만 정보를 유지하고자 할 때 사용됩니다.\n\n\n\n\n\n### Request Scope\n- http 요청을 WAS가 받아서 웹 브라우저에게 응답할 때까지 변수값을 유지하고자 할 경우 사용한다.\n- HttpServletRequest 객체를 사용한다.\n- JSP에서는 request 내장 변수를 사용한다.\n- 서블릿에서는 HttpServletRequest 객체를 사용한다.\n- 값을 저장할 때는 request 객체의 setAttribute()메소드를 사용한다.\n- 값을 읽어 들일 때는 request 객체의 getAttribute()메소드를 사용한다.\n- forward 시 값을 유지하고자 사용한다.\n- 앞에서 forward에 대하여 배울 때 forward 하기 전에 request 객체의 setAttribute() 메소드로 값을 설정한 후, 서블릿이나 jsp에게 결과를 전달하여 값을 출력하도록 하였는데 이렇게 포워드 되는 동안 값이 유지되는 것이 Request scope를 이용했다고 합니다.\n\n\n### Session Scope\n- 웹 브라우저별로 변수를 관리하고자 할 경우 사용한다.\n- 웹 브라우저간의 탭 간에는 세션정보가 공유되기 때문에, 각각의 탭에서는 같은 세션정보를 사용할 수 있다.\n- HttpSession 인터페이스를 구현한 객체를 사용한다.\n- JSP에서는 session 내장 변수를 사용한다.\n- 서블릿에서는 HttpServletRequest의 getSession()메소드를 이용하여 session 객체를 얻는다.\n- 값을 저장할 때는 session 객체의 setAttribute()메소드를 사용한다.\n- 값을 읽어 들일 때는 session 객체의 getAttribute()메소드를 사용한다.\n- 장바구니처럼 사용자별로 유지가 되어야 할 정보가 있을 때 사용한다.\n\n\n###Application Scope\n- 웹 어플리케이션이 시작되고 종료될 때까지 변수를 사용할 수 있다.\n- ServletContext 인터페이스를 구현한 객체를 사용한다.\n- jsp에서는 application 내장 객체를 이용한다.\n- 서블릿의 경우는 getServletContext()메소드를 이용하여 application객체를 이용한다.\n- 웹 어플리케이션 하나당 하나의 application객체가 사용된다.\n- 값을 저장할 때는 application객체의 setAttribute()메소드를 사용한다.\n- 값을 읽어 들일 때는 application객체의 getAttribute()메소드를 사용한다.\n- 모든 클라이언트가 공통으로 사용해야 할 값들이 있을 때 사용한다.\n\n\n\n### Application Scope 예제\n- ApplicationScope01, ApplicationScope02 서블릿 2개 생성\n- applicationscope01.jsp를 생성\n- ApplicationScope02는 ApplicationScope로 value에 1을 저장한다.\n- ApplicationScope02는 Applicationscope로 저장된 value의 값에 1을 더한 후 그 결과를 출력\n- applicationscope01.jsp는 Application scope로 저장된 value의 값에 2를 더한 후 그 결과를 출력\n- Application scope는 웹 어플리케이션을 사용하는 모든 브라우저에서 같은 값을 사용하게 한다.\n테스트를 위해서 크롬과 인터넷 익스플로러를 사용해서 결과를 확인한다.\n\n\n\nApplicationScope01\n```java\n@WebServlet(\"/ApplicationScope01\")\npublic class ApplicationScope01 extends HttpServlet {\n\tprivate static final long serialVersionUID = 1L;\n       \n\n    public ApplicationScope01() {\n        super();\n        // TODO Auto-generated constructor stub\n    }\n\n\n\tprotected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\t\tresponse.setContentType(\"text/html; charset=UTF-8\");\n\n\t\tPrintWriter out = response.getWriter();\n\t\tServletContext application = getServletContext();\n\t\t\n\t\tint value = 1;\n\t\tapplication.setAttribute(\"value\", value);\n\t\t\n\t\tout.println(\"<h1>value: \"+ value + \"</h1>\");\n\t\t\n\t}\n\n}\n```\nsetAttribute와 getAttribute는 다른 scope에서도 동일하게 사용한다\n\n\n\nApplicationScope02\n```java\n@WebServlet(\"/ApplicationScope02\")\npublic class ApplicationScope02 extends HttpServlet {\n\tprivate static final long serialVersionUID = 1L;\n\n    public ApplicationScope02() {\n        super();\n        // TODO Auto-generated constructor stub\n    }\n\n\n\tprotected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\t\tresponse.setContentType(\"text/html; charset=UTF-8\");\n\t\t\n\t\tPrintWriter out = response.getWriter();\n\t\t\n\t\tServletContext application = getServletContext();\n\t\ttry {\n\t\tint value = (int)application.getAttribute(\"value\");\n\t\tvalue++;\n\t\tapplication.setAttribute(\"value\", value);\n\t\t\n\t\tout.println(\"<h1>value: \"+ value + \"</h1>\");\n\t\t}catch(NullPointerException e) {\n\t\t\tout.print(\"value의 값이 설정되지 않았습니다.\");\n\t\t}\n\t}\n}\n```\n\n\n\napplicationScope01.jsp\n```java\n<%@ page language=\"java\" contentType=\"text/html; charset=EUC-KR\"\n    pageEncoding=\"EUC-KR\"%>\n<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"EUC-KR\">\n<title>Insert title here</title>\n</head>\n<body>\n<%\n    try{\n        int value = (int)application.getAttribute(\"value\");\n        value = value + 2;\n        application.setAttribute(\"value\", value);\n%>\n        <h1><%=value %></h1>\n<%        \n    }catch(NullPointerException ex){\n%>\n        <h1>설정된 값이 없습니다.</h1>\n<%        \n    }\n%>\n\n</body>\n</html>\n```\n\n\n\n해당 어플리케이션 서버를 종료했다가 다시 재시작 해야지 value값이 초기화 됨\nApplication01을 먼저 시작해야지 value값이 초기화 됨\n\nApplication scope는 servletcontext라는 객체를 이용해서 얻어낼 수 있다\nservletcontext는 getServletContext라는 메서드로 알아낼 수 있다\nservletcontext라는 객체가 실제 웹 애플리케이션 영역으로 인터페이스를 구현한것이다 그러므로 실제 Servlet이다\nsetAttribute와 getAttribute는 다른 scope에서도 동일하게 사용한다\n\ntry-catch 사용하는 이유\nApplicationScope02가 01보다 먼저 실행되지 않는다면 값이 없기 때문에 null을 출력한다\n따라서 NullpointerException 처리를 해준것이다 \n\n\n\n\n\n\n\n\n","slug":"boostcourse-09-scope","published":1,"updated":"2022-01-06T14:20:12.118Z","_id":"cky31phnt00042srjaojd3gl2","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"Scope\"><a href=\"#Scope\" class=\"headerlink\" title=\"Scope\"></a>Scope</h3><p>객체의 범위를 정의<br>유효범위<br>-&gt; 스코프 예제를 한번 찾아봐야할것 같다</p>\n<ul>\n<li>Application</li>\n<li>Session</li>\n<li>Request</li>\n<li>Page</li>\n</ul>\n<p><img src=\"/images/boostcourse_01/14.PNG\"></p>\n<ul>\n<li><p>Application<br>웹 어플리케이션이 시작되고 종료될 때까지 변수가 유지되는 경우 사용</p>\n</li>\n<li><p>Session<br>웹 브라우저 별로 변수가 관리되는 경우 사용<br>세션 객체가 생성되서 세션 객체가 소멸 될때까지 사용할 수 있는 것이다.<br>상태유지</p>\n</li>\n<li><p>Request<br>http요청을 WAS가 받아서 웹 브라우저에게 응답할 때까지 변수가 유지되는 경우 사용<br>클라이언트로 요청이 들어와서 서버가 어떤 일들을 수행한 다음에 응답을 할때까지 사용하는 것이다</p>\n</li>\n<li><p>Page<br>페이지 내에서 지역변수처럼 사용<br>Page Scope는 선언된 한 페이지 그 내에서만 사용할 수 있는 것이다</p>\n</li>\n</ul>\n<h3 id=\"Page-Scope\"><a href=\"#Page-Scope\" class=\"headerlink\" title=\"Page Scope\"></a>Page Scope</h3><ul>\n<li>PageContext 추상 클래스를 사용한다.</li>\n<li>JSP 페이지에서 pageContext라는 내장 객체로 사용 가능 하다.</li>\n<li>forward가 될 경우 해당 Page scope에 지정된 변수는 사용할 수 없다.</li>\n<li>사용방법은 Application scope나 Session scope, request scope와 같다.</li>\n<li>마치 지역변수처럼 사용된다는 것이 다른 Scope들과 다르다.</li>\n<li>jsp에서 pageScope에 값을 저장한 후 해당 값을 EL표기법 등에서 사용할 때 사용됩니다.</li>\n<li>지역 변수처럼 해당 jsp나 서블릿이 실행되는 동안에만 정보를 유지하고자 할 때 사용됩니다.</li>\n</ul>\n<h3 id=\"Request-Scope\"><a href=\"#Request-Scope\" class=\"headerlink\" title=\"Request Scope\"></a>Request Scope</h3><ul>\n<li>http 요청을 WAS가 받아서 웹 브라우저에게 응답할 때까지 변수값을 유지하고자 할 경우 사용한다.</li>\n<li>HttpServletRequest 객체를 사용한다.</li>\n<li>JSP에서는 request 내장 변수를 사용한다.</li>\n<li>서블릿에서는 HttpServletRequest 객체를 사용한다.</li>\n<li>값을 저장할 때는 request 객체의 setAttribute()메소드를 사용한다.</li>\n<li>값을 읽어 들일 때는 request 객체의 getAttribute()메소드를 사용한다.</li>\n<li>forward 시 값을 유지하고자 사용한다.</li>\n<li>앞에서 forward에 대하여 배울 때 forward 하기 전에 request 객체의 setAttribute() 메소드로 값을 설정한 후, 서블릿이나 jsp에게 결과를 전달하여 값을 출력하도록 하였는데 이렇게 포워드 되는 동안 값이 유지되는 것이 Request scope를 이용했다고 합니다.</li>\n</ul>\n<h3 id=\"Session-Scope\"><a href=\"#Session-Scope\" class=\"headerlink\" title=\"Session Scope\"></a>Session Scope</h3><ul>\n<li>웹 브라우저별로 변수를 관리하고자 할 경우 사용한다.</li>\n<li>웹 브라우저간의 탭 간에는 세션정보가 공유되기 때문에, 각각의 탭에서는 같은 세션정보를 사용할 수 있다.</li>\n<li>HttpSession 인터페이스를 구현한 객체를 사용한다.</li>\n<li>JSP에서는 session 내장 변수를 사용한다.</li>\n<li>서블릿에서는 HttpServletRequest의 getSession()메소드를 이용하여 session 객체를 얻는다.</li>\n<li>값을 저장할 때는 session 객체의 setAttribute()메소드를 사용한다.</li>\n<li>값을 읽어 들일 때는 session 객체의 getAttribute()메소드를 사용한다.</li>\n<li>장바구니처럼 사용자별로 유지가 되어야 할 정보가 있을 때 사용한다.</li>\n</ul>\n<p>###Application Scope</p>\n<ul>\n<li>웹 어플리케이션이 시작되고 종료될 때까지 변수를 사용할 수 있다.</li>\n<li>ServletContext 인터페이스를 구현한 객체를 사용한다.</li>\n<li>jsp에서는 application 내장 객체를 이용한다.</li>\n<li>서블릿의 경우는 getServletContext()메소드를 이용하여 application객체를 이용한다.</li>\n<li>웹 어플리케이션 하나당 하나의 application객체가 사용된다.</li>\n<li>값을 저장할 때는 application객체의 setAttribute()메소드를 사용한다.</li>\n<li>값을 읽어 들일 때는 application객체의 getAttribute()메소드를 사용한다.</li>\n<li>모든 클라이언트가 공통으로 사용해야 할 값들이 있을 때 사용한다.</li>\n</ul>\n<h3 id=\"Application-Scope-예제\"><a href=\"#Application-Scope-예제\" class=\"headerlink\" title=\"Application Scope 예제\"></a>Application Scope 예제</h3><ul>\n<li>ApplicationScope01, ApplicationScope02 서블릿 2개 생성</li>\n<li>applicationscope01.jsp를 생성</li>\n<li>ApplicationScope02는 ApplicationScope로 value에 1을 저장한다.</li>\n<li>ApplicationScope02는 Applicationscope로 저장된 value의 값에 1을 더한 후 그 결과를 출력</li>\n<li>applicationscope01.jsp는 Application scope로 저장된 value의 값에 2를 더한 후 그 결과를 출력</li>\n<li>Application scope는 웹 어플리케이션을 사용하는 모든 브라우저에서 같은 값을 사용하게 한다.<br>테스트를 위해서 크롬과 인터넷 익스플로러를 사용해서 결과를 확인한다.</li>\n</ul>\n<p>ApplicationScope01</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@WebServlet(&quot;/ApplicationScope01&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApplicationScope01</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;</span><br><span class=\"line\">       </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ApplicationScope01</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>();</span><br><span class=\"line\">        <span class=\"comment\">// TODO Auto-generated constructor stub</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\tresponse.setContentType(<span class=\"string\">&quot;text/html; charset=UTF-8&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tPrintWriter out = response.getWriter();</span><br><span class=\"line\">\t\tServletContext application = getServletContext();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> value = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tapplication.setAttribute(<span class=\"string\">&quot;value&quot;</span>, value);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tout.println(<span class=\"string\">&quot;&lt;h1&gt;value: &quot;</span>+ value + <span class=\"string\">&quot;&lt;/h1&gt;&quot;</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>setAttribute와 getAttribute는 다른 scope에서도 동일하게 사용한다</p>\n<p>ApplicationScope02</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@WebServlet(&quot;/ApplicationScope02&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApplicationScope02</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ApplicationScope02</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>();</span><br><span class=\"line\">        <span class=\"comment\">// TODO Auto-generated constructor stub</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\tresponse.setContentType(<span class=\"string\">&quot;text/html; charset=UTF-8&quot;</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tPrintWriter out = response.getWriter();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tServletContext application = getServletContext();</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> value = (<span class=\"keyword\">int</span>)application.getAttribute(<span class=\"string\">&quot;value&quot;</span>);</span><br><span class=\"line\">\t\tvalue++;</span><br><span class=\"line\">\t\tapplication.setAttribute(<span class=\"string\">&quot;value&quot;</span>, value);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tout.println(<span class=\"string\">&quot;&lt;h1&gt;value: &quot;</span>+ value + <span class=\"string\">&quot;&lt;/h1&gt;&quot;</span>);</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">catch</span>(NullPointerException e) &#123;</span><br><span class=\"line\">\t\t\tout.print(<span class=\"string\">&quot;value의 값이 설정되지 않았습니다.&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>applicationScope01.jsp</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ page language=<span class=\"string\">&quot;java&quot;</span> contentType=<span class=\"string\">&quot;text/html; charset=EUC-KR&quot;</span></span><br><span class=\"line\">    pageEncoding=<span class=\"string\">&quot;EUC-KR&quot;</span>%&gt;</span><br><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;meta charset=<span class=\"string\">&quot;EUC-KR&quot;</span>&gt;</span><br><span class=\"line\">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;%</span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> value = (<span class=\"keyword\">int</span>)application.getAttribute(<span class=\"string\">&quot;value&quot;</span>);</span><br><span class=\"line\">        value = value + <span class=\"number\">2</span>;</span><br><span class=\"line\">        application.setAttribute(<span class=\"string\">&quot;value&quot;</span>, value);</span><br><span class=\"line\">%&gt;</span><br><span class=\"line\">        &lt;h1&gt;&lt;%=value %&gt;&lt;/h1&gt;</span><br><span class=\"line\">&lt;%        </span><br><span class=\"line\">    &#125;<span class=\"keyword\">catch</span>(NullPointerException ex)&#123;</span><br><span class=\"line\">%&gt;</span><br><span class=\"line\">        &lt;h1&gt;설정된 값이 없습니다.&lt;/h1&gt;</span><br><span class=\"line\">&lt;%        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">%&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>해당 어플리케이션 서버를 종료했다가 다시 재시작 해야지 value값이 초기화 됨<br>Application01을 먼저 시작해야지 value값이 초기화 됨</p>\n<p>Application scope는 servletcontext라는 객체를 이용해서 얻어낼 수 있다<br>servletcontext는 getServletContext라는 메서드로 알아낼 수 있다<br>servletcontext라는 객체가 실제 웹 애플리케이션 영역으로 인터페이스를 구현한것이다 그러므로 실제 Servlet이다<br>setAttribute와 getAttribute는 다른 scope에서도 동일하게 사용한다</p>\n<p>try-catch 사용하는 이유<br>ApplicationScope02가 01보다 먼저 실행되지 않는다면 값이 없기 때문에 null을 출력한다<br>따라서 NullpointerException 처리를 해준것이다 </p>\n","site":{"data":{}},"excerpt":"Scope\n객체의 범위를 정의\n유효범위\n-> 스코프 예제를 한번 찾아봐야할것 같다\n\n * Application\n * Session\n * Request\n * Page\n\n\n\n * Application\n   웹 어플리케이션이 시작되고 종료될 때까지 변수가 유지되는 경우 사용\n   \n   \n * Session\n   웹 브라우저 별로 변수가 관리되는 경우 사용\n   세션 객체가 생성되서 세션 객체가 소멸 될때까지 사용할 수 있는 것이다.\n   상태유지\n   \n   \n * Request\n   http요청을 WAS가 받아서 웹 브라우저에게 응답","more":"<h3 id=\"Scope\"><a href=\"#Scope\" class=\"headerlink\" title=\"Scope\"></a>Scope</h3><p>객체의 범위를 정의<br>유효범위<br>-&gt; 스코프 예제를 한번 찾아봐야할것 같다</p>\n<ul>\n<li>Application</li>\n<li>Session</li>\n<li>Request</li>\n<li>Page</li>\n</ul>\n<p><img src=\"/images/boostcourse_01/14.PNG\"></p>\n<ul>\n<li><p>Application<br>웹 어플리케이션이 시작되고 종료될 때까지 변수가 유지되는 경우 사용</p>\n</li>\n<li><p>Session<br>웹 브라우저 별로 변수가 관리되는 경우 사용<br>세션 객체가 생성되서 세션 객체가 소멸 될때까지 사용할 수 있는 것이다.<br>상태유지</p>\n</li>\n<li><p>Request<br>http요청을 WAS가 받아서 웹 브라우저에게 응답할 때까지 변수가 유지되는 경우 사용<br>클라이언트로 요청이 들어와서 서버가 어떤 일들을 수행한 다음에 응답을 할때까지 사용하는 것이다</p>\n</li>\n<li><p>Page<br>페이지 내에서 지역변수처럼 사용<br>Page Scope는 선언된 한 페이지 그 내에서만 사용할 수 있는 것이다</p>\n</li>\n</ul>\n<h3 id=\"Page-Scope\"><a href=\"#Page-Scope\" class=\"headerlink\" title=\"Page Scope\"></a>Page Scope</h3><ul>\n<li>PageContext 추상 클래스를 사용한다.</li>\n<li>JSP 페이지에서 pageContext라는 내장 객체로 사용 가능 하다.</li>\n<li>forward가 될 경우 해당 Page scope에 지정된 변수는 사용할 수 없다.</li>\n<li>사용방법은 Application scope나 Session scope, request scope와 같다.</li>\n<li>마치 지역변수처럼 사용된다는 것이 다른 Scope들과 다르다.</li>\n<li>jsp에서 pageScope에 값을 저장한 후 해당 값을 EL표기법 등에서 사용할 때 사용됩니다.</li>\n<li>지역 변수처럼 해당 jsp나 서블릿이 실행되는 동안에만 정보를 유지하고자 할 때 사용됩니다.</li>\n</ul>\n<h3 id=\"Request-Scope\"><a href=\"#Request-Scope\" class=\"headerlink\" title=\"Request Scope\"></a>Request Scope</h3><ul>\n<li>http 요청을 WAS가 받아서 웹 브라우저에게 응답할 때까지 변수값을 유지하고자 할 경우 사용한다.</li>\n<li>HttpServletRequest 객체를 사용한다.</li>\n<li>JSP에서는 request 내장 변수를 사용한다.</li>\n<li>서블릿에서는 HttpServletRequest 객체를 사용한다.</li>\n<li>값을 저장할 때는 request 객체의 setAttribute()메소드를 사용한다.</li>\n<li>값을 읽어 들일 때는 request 객체의 getAttribute()메소드를 사용한다.</li>\n<li>forward 시 값을 유지하고자 사용한다.</li>\n<li>앞에서 forward에 대하여 배울 때 forward 하기 전에 request 객체의 setAttribute() 메소드로 값을 설정한 후, 서블릿이나 jsp에게 결과를 전달하여 값을 출력하도록 하였는데 이렇게 포워드 되는 동안 값이 유지되는 것이 Request scope를 이용했다고 합니다.</li>\n</ul>\n<h3 id=\"Session-Scope\"><a href=\"#Session-Scope\" class=\"headerlink\" title=\"Session Scope\"></a>Session Scope</h3><ul>\n<li>웹 브라우저별로 변수를 관리하고자 할 경우 사용한다.</li>\n<li>웹 브라우저간의 탭 간에는 세션정보가 공유되기 때문에, 각각의 탭에서는 같은 세션정보를 사용할 수 있다.</li>\n<li>HttpSession 인터페이스를 구현한 객체를 사용한다.</li>\n<li>JSP에서는 session 내장 변수를 사용한다.</li>\n<li>서블릿에서는 HttpServletRequest의 getSession()메소드를 이용하여 session 객체를 얻는다.</li>\n<li>값을 저장할 때는 session 객체의 setAttribute()메소드를 사용한다.</li>\n<li>값을 읽어 들일 때는 session 객체의 getAttribute()메소드를 사용한다.</li>\n<li>장바구니처럼 사용자별로 유지가 되어야 할 정보가 있을 때 사용한다.</li>\n</ul>\n<p>###Application Scope</p>\n<ul>\n<li>웹 어플리케이션이 시작되고 종료될 때까지 변수를 사용할 수 있다.</li>\n<li>ServletContext 인터페이스를 구현한 객체를 사용한다.</li>\n<li>jsp에서는 application 내장 객체를 이용한다.</li>\n<li>서블릿의 경우는 getServletContext()메소드를 이용하여 application객체를 이용한다.</li>\n<li>웹 어플리케이션 하나당 하나의 application객체가 사용된다.</li>\n<li>값을 저장할 때는 application객체의 setAttribute()메소드를 사용한다.</li>\n<li>값을 읽어 들일 때는 application객체의 getAttribute()메소드를 사용한다.</li>\n<li>모든 클라이언트가 공통으로 사용해야 할 값들이 있을 때 사용한다.</li>\n</ul>\n<h3 id=\"Application-Scope-예제\"><a href=\"#Application-Scope-예제\" class=\"headerlink\" title=\"Application Scope 예제\"></a>Application Scope 예제</h3><ul>\n<li>ApplicationScope01, ApplicationScope02 서블릿 2개 생성</li>\n<li>applicationscope01.jsp를 생성</li>\n<li>ApplicationScope02는 ApplicationScope로 value에 1을 저장한다.</li>\n<li>ApplicationScope02는 Applicationscope로 저장된 value의 값에 1을 더한 후 그 결과를 출력</li>\n<li>applicationscope01.jsp는 Application scope로 저장된 value의 값에 2를 더한 후 그 결과를 출력</li>\n<li>Application scope는 웹 어플리케이션을 사용하는 모든 브라우저에서 같은 값을 사용하게 한다.<br>테스트를 위해서 크롬과 인터넷 익스플로러를 사용해서 결과를 확인한다.</li>\n</ul>\n<p>ApplicationScope01</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@WebServlet(&quot;/ApplicationScope01&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApplicationScope01</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;</span><br><span class=\"line\">       </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ApplicationScope01</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>();</span><br><span class=\"line\">        <span class=\"comment\">// TODO Auto-generated constructor stub</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\tresponse.setContentType(<span class=\"string\">&quot;text/html; charset=UTF-8&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tPrintWriter out = response.getWriter();</span><br><span class=\"line\">\t\tServletContext application = getServletContext();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> value = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tapplication.setAttribute(<span class=\"string\">&quot;value&quot;</span>, value);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tout.println(<span class=\"string\">&quot;&lt;h1&gt;value: &quot;</span>+ value + <span class=\"string\">&quot;&lt;/h1&gt;&quot;</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>setAttribute와 getAttribute는 다른 scope에서도 동일하게 사용한다</p>\n<p>ApplicationScope02</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@WebServlet(&quot;/ApplicationScope02&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApplicationScope02</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ApplicationScope02</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>();</span><br><span class=\"line\">        <span class=\"comment\">// TODO Auto-generated constructor stub</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\tresponse.setContentType(<span class=\"string\">&quot;text/html; charset=UTF-8&quot;</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tPrintWriter out = response.getWriter();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tServletContext application = getServletContext();</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> value = (<span class=\"keyword\">int</span>)application.getAttribute(<span class=\"string\">&quot;value&quot;</span>);</span><br><span class=\"line\">\t\tvalue++;</span><br><span class=\"line\">\t\tapplication.setAttribute(<span class=\"string\">&quot;value&quot;</span>, value);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tout.println(<span class=\"string\">&quot;&lt;h1&gt;value: &quot;</span>+ value + <span class=\"string\">&quot;&lt;/h1&gt;&quot;</span>);</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">catch</span>(NullPointerException e) &#123;</span><br><span class=\"line\">\t\t\tout.print(<span class=\"string\">&quot;value의 값이 설정되지 않았습니다.&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>applicationScope01.jsp</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ page language=<span class=\"string\">&quot;java&quot;</span> contentType=<span class=\"string\">&quot;text/html; charset=EUC-KR&quot;</span></span><br><span class=\"line\">    pageEncoding=<span class=\"string\">&quot;EUC-KR&quot;</span>%&gt;</span><br><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;meta charset=<span class=\"string\">&quot;EUC-KR&quot;</span>&gt;</span><br><span class=\"line\">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;%</span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> value = (<span class=\"keyword\">int</span>)application.getAttribute(<span class=\"string\">&quot;value&quot;</span>);</span><br><span class=\"line\">        value = value + <span class=\"number\">2</span>;</span><br><span class=\"line\">        application.setAttribute(<span class=\"string\">&quot;value&quot;</span>, value);</span><br><span class=\"line\">%&gt;</span><br><span class=\"line\">        &lt;h1&gt;&lt;%=value %&gt;&lt;/h1&gt;</span><br><span class=\"line\">&lt;%        </span><br><span class=\"line\">    &#125;<span class=\"keyword\">catch</span>(NullPointerException ex)&#123;</span><br><span class=\"line\">%&gt;</span><br><span class=\"line\">        &lt;h1&gt;설정된 값이 없습니다.&lt;/h1&gt;</span><br><span class=\"line\">&lt;%        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">%&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>해당 어플리케이션 서버를 종료했다가 다시 재시작 해야지 value값이 초기화 됨<br>Application01을 먼저 시작해야지 value값이 초기화 됨</p>\n<p>Application scope는 servletcontext라는 객체를 이용해서 얻어낼 수 있다<br>servletcontext는 getServletContext라는 메서드로 알아낼 수 있다<br>servletcontext라는 객체가 실제 웹 애플리케이션 영역으로 인터페이스를 구현한것이다 그러므로 실제 Servlet이다<br>setAttribute와 getAttribute는 다른 scope에서도 동일하게 사용한다</p>\n<p>try-catch 사용하는 이유<br>ApplicationScope02가 01보다 먼저 실행되지 않는다면 값이 없기 때문에 null을 출력한다<br>따라서 NullpointerException 처리를 해준것이다 </p>\n"},{"title":"EL & JSTL | 부스트코스 백엔드 10","date":"2022-01-02T15:00:00.000Z","toc":true,"_content":"![](/images/boostcourse_01/9.PNG)\n\n### EL (Expression Language)\n표현언어이다.\n값을 표현하는데 사용되는 스크립트 언어로서 JSP의 기본 문법을 보완하는 역할을 한다\nJSP에서 내장객체를 가지고 자바 코드를 이용해서도 사용할 수 가 있긴함\n\n- 기능\nJSP의 스코프(scope)에 맞는 속성 사용\n집합 객체에 대한 접근 방법 제공\n수치 연산, 관계 연산, 논리 연산자 제공\n자바 클래스 메소드 호출 기능 제공\n표현언어만의 기본 객체 제공\n\n- 사용법\n${expr}\n\n- 예시\n\n![](/images/boostcourse_01/15.PNG)\n\n\n\n\n\n### Scope에 적용한 EL 표기법 예시\n각각의 스코프에다가 값을 설정하고, 설정한 값을 EL 코드를 통해서 출력해본다\n\n```java\n<%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\n    pageEncoding=\"UTF-8\"%>\n\n<%\n    pageContext.setAttribute(\"p1\", \"page scope value\");\n    request.setAttribute(\"r1\", \"request scope value\");\n    session.setAttribute(\"s1\", \"session scope value\");\n    application.setAttribute(\"a1\", \"application scope value\");\n%>    \n\n<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n<title>Insert title here</title>\n</head>\n<body>\n\npageContext.getAttribute(\"p1\") : ${pageScope.p1 }<br>\nrequest.getAttribute(\"r1\") : ${requestScope.r1 }<br>\nsession.getAttribute(\"s1\") : ${sessionScope.s1 }<br>\napplication.getAttribute(\"a1\") : ${applicationScope.a1 }<br>\n<br><br>\npageContext.getAttribute(\"p1\") : ${p1 }<br>    //더 정확하게 불러온것\nrequest.getAttribute(\"r1\") : ${r1 }<br>\nsession.getAttribute(\"s1\") : ${s1 }<br>\napplication.getAttribute(\"a1\") : ${a1 }<br>\n\n</body>\n</html>\n\n```\n\n    pageContext.setAttribute(\"p1\", \"page scope value\");\n    request.setAttribute(\"r1\", \"request scope value\");\n    session.setAttribute(\"s1\", \"session scope value\");\n    application.setAttribute(\"a1\", \"application scope value\");\n\npage scope, request scope, session scope, application scope에 각각의 값을 설정하였다\n\n\n  pageContext.getAttribute(\"p1\") : ${pageScope.p1 }<br>\n  request.getAttribute(\"r1\") : ${requestScope.r1 }<br>\n  session.getAttribute(\"s1\") : ${sessionScope.s1 }<br>\n  application.getAttribute(\"a1\") : ${applicationScope.a1 }<br>\n  <br><br>\n  pageContext.getAttribute(\"p1\") : ${p1 }<br>    //더 정확하게 불러온것\n  request.getAttribute(\"r1\") : ${r1 }<br>\n  session.getAttribute(\"s1\") : ${s1 }<br>\n  application.getAttribute(\"a1\") : ${a1 }<br>\n\n\n원래 JSP로는 아래와 같이 출력할 수 있다\npageContext.getAttribute(\"p1\") : <%=pageContext.getAttribute(\"p1\") %><br>\n\n\n- 결과값\n![](/images/boostcourse_01/16.PNG)\n\n\n\n### EL 표기법 예제\n\n    \n```java\n<%@ page language=\"java\" contentType=\"text/html; charset=EUC-KR\"\n    pageEncoding=\"EUC-KR\"%>\n    \n<%\nrequest.setAttribute(\"k\", 10); \nrequest.setAttribute(\"m\", true);\n%>\n    \n<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"EUC-KR\">\n<title>Insert title here</title>\n</head>\n<body>\n\nk : ${k } <br>\nk + 5 : ${k + 5} <br>\nk - 5 : ${k - 5} <br>\nk * 5 : ${k * 5} <br>\nk / 5 : ${ k div 5 } <br>\n\nk : ${k} <br>\nm : m{m} <br>\nk > 5 : ${ k > 5 } <br>\nk < 5 : ${ k < 5 } <br>\nk <= 10 : ${ k <= 10} <br>\nk >= 10 : ${ k >= 10 } <br>\nm : ${ m } <br>\n!m : ${ !m } <br>\n\n</body>\n</html>\n```\n\n위의 코드에서 맨 위에 <%@ page isELIgnored = \"true\" %> 를 추가하게 되면\nEL코드가 무시되어서 html로 출력된다\n\n<br>\n\n### JSTL (JSP Standard Tag Library)\nJSTL은 JSP 페이지에서 조건문 처리, 반복문 처리 등을 html tag형태로 작성할 수 있게 도와줍니다.\n내가 직접 태그를 만드는 것도 가능하다\nJSP는 java코드와 html 이 섞여있어서 프론트 개발자가 작업을 하기가 힘들었다 -> 유지보수가 어려움\n-> 이러한 문제를 해결하기 위해서 JSTL이 나왔다\n\n\n- JSTL 사용법\nhttp://tomcat.apache.org/download-taglibs.cgi\n\n![](/images/boostcourse_01/17.PNG)\n위의 사이트에서 아래의 세가지 코드를 다운받아 \nC:\\Users\\jiwon\\eclipse-workspace\\firstweb\\WebContent\\WEB-INF\\lib 경로에 넣어주었다\n\n![](/images/boostcourse_01/18.PNG)\n\n![](/images/boostcourse_01/19.PNG)\n<br>\n\n- JSTL 예제\n\n```java\n<%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\n    pageEncoding=\"UTF-8\"%>\n\n<%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\" %> \n\n<c:set var=\"value1\" scope=\"request\" value=\"kang\"/>\n\n<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n<title>Insert title here</title>\n</head>\n<body>\n\n성 : ${value1} <br>\n\n<c:remove var=\"value1\" scope=\"request\"/>\n\n성 : ${value1 }\n</body>\n</html>\n```\n\n\n<%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\" %> \n-> JSTL 라이브러리 사용을 알려줌\n\n\n\n### 변수지원 태그\n\n![](/images/boostcourse_01/20.PNG)\n\n\n### 흐름제어 태그 -if\n![](/images/boostcourse_01/21.PNG)\n\n```java\n<%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\npageEncoding=\"UTF-8\"%>\n<%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\" %> \n<%\nrequest.setAttribute(\"n\", 10);\n%>\n\n<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n<title>Insert title here</title>\n</head>\n<body>\n<c:if test=\"${n == 0}\">\nn은 과 0과 같습니다.\n</c:if>\n\n<c:if test=\"${n == 10}\">\nn은 과 10과 같습니다.\n</c:if>\n</body>\n</html>\n```\n\n\n\n###흐름제어 태그 -choose\n![](/images/boostcourse_01/21.PNG)\n```java\n<%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\n    pageEncoding=\"UTF-8\"%>\n<%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\" %> \n<%@ page import=\"java.util.*\" %>\n<%\n    request.setAttribute(\"score\", 83);\n%>\n\n<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n<title>Insert title here</title>\n</head>\n<body>\n<c:choose>\n    <c:when test=\"${score >=90 }\">\n    A학점입니다.\n    </c:when>\n    <c:when test=\"${score >=80 }\">\n    B학점입니다.\n    </c:when>\n    <c:when test=\"${score >=70 }\">\n    C학점입니다.\n    </c:when>\n    <c:when test=\"${score >=60 }\">\n    D학점입니다.\n    </c:when>\n    <c:otherwise>\n    F학점입니다.\n    </c:otherwise>            \n</c:choose>\n</body>\n</html>\n```\n\n###흐름제어 태그- forEach\n![](/images/boostcourse_01/21.PNG)\n```java\n<%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\n    pageEncoding=\"UTF-8\"%>\n<%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\" %> \n<%@ page import=\"java.util.*\" %>\n<%\n    List<String> list = new ArrayList<>();\n    list.add(\"hello\");\n    list.add(\"world\");\n    list.add(\"!!!\");\n    request.setAttribute(\"list\", list);\n%>\n\n<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n<title>Insert title here</title>\n</head>\n<body>\n<c:forEach items=\"${list}\" var=\"item\">\n${item } <br>\n</c:forEach>\n</body>\n</html>\n```\n###흐름제어태그 - import\n![](/images/boostcourse_01/24.PNG)\n\n\n- 아래예제\njstlValue.jsp\n\n```java\n<%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\n    pageEncoding=\"UTF-8\"%>\nKang kyungmi\n```\n\n<br>\n\njstl05.jsp\n```java\n<%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\n    pageEncoding=\"UTF-8\"%>\n<%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\" %> \n<%@ page import=\"java.util.*\" %>\n<c:import url=\"http://localhost:8080/webapp/jstlValue.jsp\" var=\"urlValue\" scope=\"request\"></c:import>\n\n<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n<title>Insert title here</title>\n</head>\n<body>\n읽어들인 값 : ${urlValue}\n</body>\n</html>\n\n```\n\n<br>\n\n\n### 흐름제어 태그 - redirect\n![](/images/boostcourse_01/25.PNG)\n\njtl06.jsp\n```java\n<%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\n    pageEncoding=\"UTF-8\"%>\n<%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\" %> \n<c:redirect url=\"jstlRedirectPage.jsp\"></c:redirect>\n```\n\njstlRedirectPage.jsp\n```java\n<%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\n    pageEncoding=\"UTF-8\"%>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n<title>Insert title here</title>\n</head>\n<body>\n<h1> redirect된 화면입니다.</h1>\n</body>\n</html>\n```\n\n<br>\n\n### 기타태그-out\n![](/images/boostcourse_01/26.PNG)\n\n```java\n<%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\n    pageEncoding=\"UTF-8\"%>\n<%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\" %>\n<%@ taglib prefix=\"fn\" uri=\"http://java.sun.com/jsp/jstl/functions\"%> \n<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n<title>Insert title here</title>\n</head>\n<body>\n<c:set var=\"t\" value=\"<script type='text/javascript'>alert(1);</script>\" />\n${t}\n<c:out value=\"${t}\" escapeXml=\"true\" />\n<c:out value=\"${t}\" escapeXml=\"false\" />\n</body>\n</html>\n```\n\n<br>\n","source":"_posts/boostcourse_10_jstl_el.md","raw":"---\ntitle: EL & JSTL | 부스트코스 백엔드 10\ndate: 2022-01-03\ntags: JSTL, EL\ntoc: true\ncategories: \n- 부스트코스 백엔드\n---\n![](/images/boostcourse_01/9.PNG)\n\n### EL (Expression Language)\n표현언어이다.\n값을 표현하는데 사용되는 스크립트 언어로서 JSP의 기본 문법을 보완하는 역할을 한다\nJSP에서 내장객체를 가지고 자바 코드를 이용해서도 사용할 수 가 있긴함\n\n- 기능\nJSP의 스코프(scope)에 맞는 속성 사용\n집합 객체에 대한 접근 방법 제공\n수치 연산, 관계 연산, 논리 연산자 제공\n자바 클래스 메소드 호출 기능 제공\n표현언어만의 기본 객체 제공\n\n- 사용법\n${expr}\n\n- 예시\n\n![](/images/boostcourse_01/15.PNG)\n\n\n\n\n\n### Scope에 적용한 EL 표기법 예시\n각각의 스코프에다가 값을 설정하고, 설정한 값을 EL 코드를 통해서 출력해본다\n\n```java\n<%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\n    pageEncoding=\"UTF-8\"%>\n\n<%\n    pageContext.setAttribute(\"p1\", \"page scope value\");\n    request.setAttribute(\"r1\", \"request scope value\");\n    session.setAttribute(\"s1\", \"session scope value\");\n    application.setAttribute(\"a1\", \"application scope value\");\n%>    \n\n<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n<title>Insert title here</title>\n</head>\n<body>\n\npageContext.getAttribute(\"p1\") : ${pageScope.p1 }<br>\nrequest.getAttribute(\"r1\") : ${requestScope.r1 }<br>\nsession.getAttribute(\"s1\") : ${sessionScope.s1 }<br>\napplication.getAttribute(\"a1\") : ${applicationScope.a1 }<br>\n<br><br>\npageContext.getAttribute(\"p1\") : ${p1 }<br>    //더 정확하게 불러온것\nrequest.getAttribute(\"r1\") : ${r1 }<br>\nsession.getAttribute(\"s1\") : ${s1 }<br>\napplication.getAttribute(\"a1\") : ${a1 }<br>\n\n</body>\n</html>\n\n```\n\n    pageContext.setAttribute(\"p1\", \"page scope value\");\n    request.setAttribute(\"r1\", \"request scope value\");\n    session.setAttribute(\"s1\", \"session scope value\");\n    application.setAttribute(\"a1\", \"application scope value\");\n\npage scope, request scope, session scope, application scope에 각각의 값을 설정하였다\n\n\n  pageContext.getAttribute(\"p1\") : ${pageScope.p1 }<br>\n  request.getAttribute(\"r1\") : ${requestScope.r1 }<br>\n  session.getAttribute(\"s1\") : ${sessionScope.s1 }<br>\n  application.getAttribute(\"a1\") : ${applicationScope.a1 }<br>\n  <br><br>\n  pageContext.getAttribute(\"p1\") : ${p1 }<br>    //더 정확하게 불러온것\n  request.getAttribute(\"r1\") : ${r1 }<br>\n  session.getAttribute(\"s1\") : ${s1 }<br>\n  application.getAttribute(\"a1\") : ${a1 }<br>\n\n\n원래 JSP로는 아래와 같이 출력할 수 있다\npageContext.getAttribute(\"p1\") : <%=pageContext.getAttribute(\"p1\") %><br>\n\n\n- 결과값\n![](/images/boostcourse_01/16.PNG)\n\n\n\n### EL 표기법 예제\n\n    \n```java\n<%@ page language=\"java\" contentType=\"text/html; charset=EUC-KR\"\n    pageEncoding=\"EUC-KR\"%>\n    \n<%\nrequest.setAttribute(\"k\", 10); \nrequest.setAttribute(\"m\", true);\n%>\n    \n<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"EUC-KR\">\n<title>Insert title here</title>\n</head>\n<body>\n\nk : ${k } <br>\nk + 5 : ${k + 5} <br>\nk - 5 : ${k - 5} <br>\nk * 5 : ${k * 5} <br>\nk / 5 : ${ k div 5 } <br>\n\nk : ${k} <br>\nm : m{m} <br>\nk > 5 : ${ k > 5 } <br>\nk < 5 : ${ k < 5 } <br>\nk <= 10 : ${ k <= 10} <br>\nk >= 10 : ${ k >= 10 } <br>\nm : ${ m } <br>\n!m : ${ !m } <br>\n\n</body>\n</html>\n```\n\n위의 코드에서 맨 위에 <%@ page isELIgnored = \"true\" %> 를 추가하게 되면\nEL코드가 무시되어서 html로 출력된다\n\n<br>\n\n### JSTL (JSP Standard Tag Library)\nJSTL은 JSP 페이지에서 조건문 처리, 반복문 처리 등을 html tag형태로 작성할 수 있게 도와줍니다.\n내가 직접 태그를 만드는 것도 가능하다\nJSP는 java코드와 html 이 섞여있어서 프론트 개발자가 작업을 하기가 힘들었다 -> 유지보수가 어려움\n-> 이러한 문제를 해결하기 위해서 JSTL이 나왔다\n\n\n- JSTL 사용법\nhttp://tomcat.apache.org/download-taglibs.cgi\n\n![](/images/boostcourse_01/17.PNG)\n위의 사이트에서 아래의 세가지 코드를 다운받아 \nC:\\Users\\jiwon\\eclipse-workspace\\firstweb\\WebContent\\WEB-INF\\lib 경로에 넣어주었다\n\n![](/images/boostcourse_01/18.PNG)\n\n![](/images/boostcourse_01/19.PNG)\n<br>\n\n- JSTL 예제\n\n```java\n<%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\n    pageEncoding=\"UTF-8\"%>\n\n<%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\" %> \n\n<c:set var=\"value1\" scope=\"request\" value=\"kang\"/>\n\n<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n<title>Insert title here</title>\n</head>\n<body>\n\n성 : ${value1} <br>\n\n<c:remove var=\"value1\" scope=\"request\"/>\n\n성 : ${value1 }\n</body>\n</html>\n```\n\n\n<%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\" %> \n-> JSTL 라이브러리 사용을 알려줌\n\n\n\n### 변수지원 태그\n\n![](/images/boostcourse_01/20.PNG)\n\n\n### 흐름제어 태그 -if\n![](/images/boostcourse_01/21.PNG)\n\n```java\n<%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\npageEncoding=\"UTF-8\"%>\n<%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\" %> \n<%\nrequest.setAttribute(\"n\", 10);\n%>\n\n<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n<title>Insert title here</title>\n</head>\n<body>\n<c:if test=\"${n == 0}\">\nn은 과 0과 같습니다.\n</c:if>\n\n<c:if test=\"${n == 10}\">\nn은 과 10과 같습니다.\n</c:if>\n</body>\n</html>\n```\n\n\n\n###흐름제어 태그 -choose\n![](/images/boostcourse_01/21.PNG)\n```java\n<%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\n    pageEncoding=\"UTF-8\"%>\n<%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\" %> \n<%@ page import=\"java.util.*\" %>\n<%\n    request.setAttribute(\"score\", 83);\n%>\n\n<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n<title>Insert title here</title>\n</head>\n<body>\n<c:choose>\n    <c:when test=\"${score >=90 }\">\n    A학점입니다.\n    </c:when>\n    <c:when test=\"${score >=80 }\">\n    B학점입니다.\n    </c:when>\n    <c:when test=\"${score >=70 }\">\n    C학점입니다.\n    </c:when>\n    <c:when test=\"${score >=60 }\">\n    D학점입니다.\n    </c:when>\n    <c:otherwise>\n    F학점입니다.\n    </c:otherwise>            \n</c:choose>\n</body>\n</html>\n```\n\n###흐름제어 태그- forEach\n![](/images/boostcourse_01/21.PNG)\n```java\n<%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\n    pageEncoding=\"UTF-8\"%>\n<%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\" %> \n<%@ page import=\"java.util.*\" %>\n<%\n    List<String> list = new ArrayList<>();\n    list.add(\"hello\");\n    list.add(\"world\");\n    list.add(\"!!!\");\n    request.setAttribute(\"list\", list);\n%>\n\n<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n<title>Insert title here</title>\n</head>\n<body>\n<c:forEach items=\"${list}\" var=\"item\">\n${item } <br>\n</c:forEach>\n</body>\n</html>\n```\n###흐름제어태그 - import\n![](/images/boostcourse_01/24.PNG)\n\n\n- 아래예제\njstlValue.jsp\n\n```java\n<%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\n    pageEncoding=\"UTF-8\"%>\nKang kyungmi\n```\n\n<br>\n\njstl05.jsp\n```java\n<%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\n    pageEncoding=\"UTF-8\"%>\n<%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\" %> \n<%@ page import=\"java.util.*\" %>\n<c:import url=\"http://localhost:8080/webapp/jstlValue.jsp\" var=\"urlValue\" scope=\"request\"></c:import>\n\n<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n<title>Insert title here</title>\n</head>\n<body>\n읽어들인 값 : ${urlValue}\n</body>\n</html>\n\n```\n\n<br>\n\n\n### 흐름제어 태그 - redirect\n![](/images/boostcourse_01/25.PNG)\n\njtl06.jsp\n```java\n<%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\n    pageEncoding=\"UTF-8\"%>\n<%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\" %> \n<c:redirect url=\"jstlRedirectPage.jsp\"></c:redirect>\n```\n\njstlRedirectPage.jsp\n```java\n<%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\n    pageEncoding=\"UTF-8\"%>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n<title>Insert title here</title>\n</head>\n<body>\n<h1> redirect된 화면입니다.</h1>\n</body>\n</html>\n```\n\n<br>\n\n### 기타태그-out\n![](/images/boostcourse_01/26.PNG)\n\n```java\n<%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\n    pageEncoding=\"UTF-8\"%>\n<%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\" %>\n<%@ taglib prefix=\"fn\" uri=\"http://java.sun.com/jsp/jstl/functions\"%> \n<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n<title>Insert title here</title>\n</head>\n<body>\n<c:set var=\"t\" value=\"<script type='text/javascript'>alert(1);</script>\" />\n${t}\n<c:out value=\"${t}\" escapeXml=\"true\" />\n<c:out value=\"${t}\" escapeXml=\"false\" />\n</body>\n</html>\n```\n\n<br>\n","slug":"boostcourse-10-jstl-el","published":1,"updated":"2022-01-06T14:20:12.121Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cky323taj00065xrj8idqflic","content":"<p><img src=\"/images/boostcourse_01/9.PNG\"></p>\n<h3 id=\"EL-Expression-Language\"><a href=\"#EL-Expression-Language\" class=\"headerlink\" title=\"EL (Expression Language)\"></a>EL (Expression Language)</h3><p>표현언어이다.<br>값을 표현하는데 사용되는 스크립트 언어로서 JSP의 기본 문법을 보완하는 역할을 한다<br>JSP에서 내장객체를 가지고 자바 코드를 이용해서도 사용할 수 가 있긴함</p>\n<ul>\n<li><p>기능<br>JSP의 스코프(scope)에 맞는 속성 사용<br>집합 객체에 대한 접근 방법 제공<br>수치 연산, 관계 연산, 논리 연산자 제공<br>자바 클래스 메소드 호출 기능 제공<br>표현언어만의 기본 객체 제공</p>\n</li>\n<li><p>사용법<br>${expr}</p>\n</li>\n<li><p>예시</p>\n</li>\n</ul>\n<p><img src=\"/images/boostcourse_01/15.PNG\"></p>\n<h3 id=\"Scope에-적용한-EL-표기법-예시\"><a href=\"#Scope에-적용한-EL-표기법-예시\" class=\"headerlink\" title=\"Scope에 적용한 EL 표기법 예시\"></a>Scope에 적용한 EL 표기법 예시</h3><p>각각의 스코프에다가 값을 설정하고, 설정한 값을 EL 코드를 통해서 출력해본다</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ page language=<span class=\"string\">&quot;java&quot;</span> contentType=<span class=\"string\">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class=\"line\">    pageEncoding=<span class=\"string\">&quot;UTF-8&quot;</span>%&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;%</span><br><span class=\"line\">    pageContext.setAttribute(<span class=\"string\">&quot;p1&quot;</span>, <span class=\"string\">&quot;page scope value&quot;</span>);</span><br><span class=\"line\">    request.setAttribute(<span class=\"string\">&quot;r1&quot;</span>, <span class=\"string\">&quot;request scope value&quot;</span>);</span><br><span class=\"line\">    session.setAttribute(<span class=\"string\">&quot;s1&quot;</span>, <span class=\"string\">&quot;session scope value&quot;</span>);</span><br><span class=\"line\">    application.setAttribute(<span class=\"string\">&quot;a1&quot;</span>, <span class=\"string\">&quot;application scope value&quot;</span>);</span><br><span class=\"line\">%&gt;    </span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!DOCTYPE html PUBLIC <span class=\"string\">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class=\"string\">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;meta http-equiv=<span class=\"string\">&quot;Content-Type&quot;</span> content=<span class=\"string\">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br><span class=\"line\">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">pageContext.getAttribute(<span class=\"string\">&quot;p1&quot;</span>) : $&#123;pageScope.p1 &#125;&lt;br&gt;</span><br><span class=\"line\">request.getAttribute(<span class=\"string\">&quot;r1&quot;</span>) : $&#123;requestScope.r1 &#125;&lt;br&gt;</span><br><span class=\"line\">session.getAttribute(<span class=\"string\">&quot;s1&quot;</span>) : $&#123;sessionScope.s1 &#125;&lt;br&gt;</span><br><span class=\"line\">application.getAttribute(<span class=\"string\">&quot;a1&quot;</span>) : $&#123;applicationScope.a1 &#125;&lt;br&gt;</span><br><span class=\"line\">&lt;br&gt;&lt;br&gt;</span><br><span class=\"line\">pageContext.getAttribute(<span class=\"string\">&quot;p1&quot;</span>) : $&#123;p1 &#125;&lt;br&gt;    <span class=\"comment\">//더 정확하게 불러온것</span></span><br><span class=\"line\">request.getAttribute(<span class=\"string\">&quot;r1&quot;</span>) : $&#123;r1 &#125;&lt;br&gt;</span><br><span class=\"line\">session.getAttribute(<span class=\"string\">&quot;s1&quot;</span>) : $&#123;s1 &#125;&lt;br&gt;</span><br><span class=\"line\">application.getAttribute(<span class=\"string\">&quot;a1&quot;</span>) : $&#123;a1 &#125;&lt;br&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<pre><code>pageContext.setAttribute(&quot;p1&quot;, &quot;page scope value&quot;);\nrequest.setAttribute(&quot;r1&quot;, &quot;request scope value&quot;);\nsession.setAttribute(&quot;s1&quot;, &quot;session scope value&quot;);\napplication.setAttribute(&quot;a1&quot;, &quot;application scope value&quot;);\n</code></pre>\n<p>page scope, request scope, session scope, application scope에 각각의 값을 설정하였다</p>\n<p>  pageContext.getAttribute(“p1”) : ${pageScope.p1 }<br><br>  request.getAttribute(“r1”) : ${requestScope.r1 }<br><br>  session.getAttribute(“s1”) : ${sessionScope.s1 }<br><br>  application.getAttribute(“a1”) : ${applicationScope.a1 }<br><br>  <br><br><br>  pageContext.getAttribute(“p1”) : ${p1 }<br>    //더 정확하게 불러온것<br>  request.getAttribute(“r1”) : ${r1 }<br><br>  session.getAttribute(“s1”) : ${s1 }<br><br>  application.getAttribute(“a1”) : ${a1 }<br></p>\n<p>원래 JSP로는 아래와 같이 출력할 수 있다<br>pageContext.getAttribute(“p1”) : &lt;%=pageContext.getAttribute(“p1”) %&gt;<br></p>\n<ul>\n<li>결과값<br><img src=\"/images/boostcourse_01/16.PNG\"></li>\n</ul>\n<h3 id=\"EL-표기법-예제\"><a href=\"#EL-표기법-예제\" class=\"headerlink\" title=\"EL 표기법 예제\"></a>EL 표기법 예제</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ page language=<span class=\"string\">&quot;java&quot;</span> contentType=<span class=\"string\">&quot;text/html; charset=EUC-KR&quot;</span></span><br><span class=\"line\">    pageEncoding=<span class=\"string\">&quot;EUC-KR&quot;</span>%&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">&lt;%</span><br><span class=\"line\">request.setAttribute(<span class=\"string\">&quot;k&quot;</span>, <span class=\"number\">10</span>); </span><br><span class=\"line\">request.setAttribute(<span class=\"string\">&quot;m&quot;</span>, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">%&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;meta charset=<span class=\"string\">&quot;EUC-KR&quot;</span>&gt;</span><br><span class=\"line\">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">k : $&#123;k &#125; &lt;br&gt;</span><br><span class=\"line\">k + <span class=\"number\">5</span> : $&#123;k + <span class=\"number\">5</span>&#125; &lt;br&gt;</span><br><span class=\"line\">k - <span class=\"number\">5</span> : $&#123;k - <span class=\"number\">5</span>&#125; &lt;br&gt;</span><br><span class=\"line\">k * <span class=\"number\">5</span> : $&#123;k * <span class=\"number\">5</span>&#125; &lt;br&gt;</span><br><span class=\"line\">k / <span class=\"number\">5</span> : $&#123; k div <span class=\"number\">5</span> &#125; &lt;br&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">k : $&#123;k&#125; &lt;br&gt;</span><br><span class=\"line\">m : m&#123;m&#125; &lt;br&gt;</span><br><span class=\"line\">k &gt; <span class=\"number\">5</span> : $&#123; k &gt; <span class=\"number\">5</span> &#125; &lt;br&gt;</span><br><span class=\"line\">k &lt; <span class=\"number\">5</span> : $&#123; k &lt; <span class=\"number\">5</span> &#125; &lt;br&gt;</span><br><span class=\"line\">k &lt;= <span class=\"number\">10</span> : $&#123; k &lt;= <span class=\"number\">10</span>&#125; &lt;br&gt;</span><br><span class=\"line\">k &gt;= <span class=\"number\">10</span> : $&#123; k &gt;= <span class=\"number\">10</span> &#125; &lt;br&gt;</span><br><span class=\"line\">m : $&#123; m &#125; &lt;br&gt;</span><br><span class=\"line\">!m : $&#123; !m &#125; &lt;br&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<p>위의 코드에서 맨 위에 &lt;%@ page isELIgnored = “true” %&gt; 를 추가하게 되면<br>EL코드가 무시되어서 html로 출력된다</p>\n<br>\n\n<h3 id=\"JSTL-JSP-Standard-Tag-Library\"><a href=\"#JSTL-JSP-Standard-Tag-Library\" class=\"headerlink\" title=\"JSTL (JSP Standard Tag Library)\"></a>JSTL (JSP Standard Tag Library)</h3><p>JSTL은 JSP 페이지에서 조건문 처리, 반복문 처리 등을 html tag형태로 작성할 수 있게 도와줍니다.<br>내가 직접 태그를 만드는 것도 가능하다<br>JSP는 java코드와 html 이 섞여있어서 프론트 개발자가 작업을 하기가 힘들었다 -&gt; 유지보수가 어려움<br>-&gt; 이러한 문제를 해결하기 위해서 JSTL이 나왔다</p>\n<ul>\n<li>JSTL 사용법<br><a href=\"http://tomcat.apache.org/download-taglibs.cgi\">http://tomcat.apache.org/download-taglibs.cgi</a></li>\n</ul>\n<p><img src=\"/images/boostcourse_01/17.PNG\"><br>위의 사이트에서 아래의 세가지 코드를 다운받아<br>C:\\Users\\jiwon\\eclipse-workspace\\firstweb\\WebContent\\WEB-INF\\lib 경로에 넣어주었다</p>\n<p><img src=\"/images/boostcourse_01/18.PNG\"></p>\n<p><img src=\"/images/boostcourse_01/19.PNG\"><br><br></p>\n<ul>\n<li>JSTL 예제</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ page language=<span class=\"string\">&quot;java&quot;</span> contentType=<span class=\"string\">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class=\"line\">    pageEncoding=<span class=\"string\">&quot;UTF-8&quot;</span>%&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;%@ taglib prefix=<span class=\"string\">&quot;c&quot;</span> uri=<span class=\"string\">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt; </span><br><span class=\"line\"></span><br><span class=\"line\">&lt;c:set <span class=\"keyword\">var</span>=<span class=\"string\">&quot;value1&quot;</span> scope=<span class=\"string\">&quot;request&quot;</span> value=<span class=\"string\">&quot;kang&quot;</span>/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!DOCTYPE html PUBLIC <span class=\"string\">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class=\"string\">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;meta http-equiv=<span class=\"string\">&quot;Content-Type&quot;</span> content=<span class=\"string\">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br><span class=\"line\">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">성 : $&#123;value1&#125; &lt;br&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;c:remove <span class=\"keyword\">var</span>=<span class=\"string\">&quot;value1&quot;</span> scope=<span class=\"string\">&quot;request&quot;</span>/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">성 : $&#123;value1 &#125;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n\n<p>&lt;%@ taglib prefix=”c” uri=”<a href=\"http://java.sun.com/jsp/jstl/core&quot;\">http://java.sun.com/jsp/jstl/core&quot;</a> %&gt;<br>-&gt; JSTL 라이브러리 사용을 알려줌</p>\n<h3 id=\"변수지원-태그\"><a href=\"#변수지원-태그\" class=\"headerlink\" title=\"변수지원 태그\"></a>변수지원 태그</h3><p><img src=\"/images/boostcourse_01/20.PNG\"></p>\n<h3 id=\"흐름제어-태그-if\"><a href=\"#흐름제어-태그-if\" class=\"headerlink\" title=\"흐름제어 태그 -if\"></a>흐름제어 태그 -if</h3><p><img src=\"/images/boostcourse_01/21.PNG\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ page language=<span class=\"string\">&quot;java&quot;</span> contentType=<span class=\"string\">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class=\"line\">pageEncoding=<span class=\"string\">&quot;UTF-8&quot;</span>%&gt;</span><br><span class=\"line\">&lt;%@ taglib prefix=<span class=\"string\">&quot;c&quot;</span> uri=<span class=\"string\">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt; </span><br><span class=\"line\">&lt;%</span><br><span class=\"line\">request.setAttribute(<span class=\"string\">&quot;n&quot;</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\">%&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!DOCTYPE html PUBLIC <span class=\"string\">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class=\"string\">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;meta http-equiv=<span class=\"string\">&quot;Content-Type&quot;</span> content=<span class=\"string\">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br><span class=\"line\">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;c:<span class=\"keyword\">if</span> test=<span class=\"string\">&quot;$&#123;n == 0&#125;&quot;</span>&gt;</span><br><span class=\"line\">n은 과 <span class=\"number\">0</span>과 같습니다.</span><br><span class=\"line\">&lt;/c:<span class=\"keyword\">if</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;c:<span class=\"keyword\">if</span> test=<span class=\"string\">&quot;$&#123;n == 10&#125;&quot;</span>&gt;</span><br><span class=\"line\">n은 과 <span class=\"number\">10</span>과 같습니다.</span><br><span class=\"line\">&lt;/c:<span class=\"keyword\">if</span>&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>###흐름제어 태그 -choose<br><img src=\"/images/boostcourse_01/21.PNG\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ page language=<span class=\"string\">&quot;java&quot;</span> contentType=<span class=\"string\">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class=\"line\">    pageEncoding=<span class=\"string\">&quot;UTF-8&quot;</span>%&gt;</span><br><span class=\"line\">&lt;%@ taglib prefix=<span class=\"string\">&quot;c&quot;</span> uri=<span class=\"string\">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt; </span><br><span class=\"line\">&lt;%@ page <span class=\"keyword\">import</span>=<span class=\"string\">&quot;java.util.*&quot;</span> %&gt;</span><br><span class=\"line\">&lt;%</span><br><span class=\"line\">    request.setAttribute(<span class=\"string\">&quot;score&quot;</span>, <span class=\"number\">83</span>);</span><br><span class=\"line\">%&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!DOCTYPE html PUBLIC <span class=\"string\">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class=\"string\">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;meta http-equiv=<span class=\"string\">&quot;Content-Type&quot;</span> content=<span class=\"string\">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br><span class=\"line\">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;c:choose&gt;</span><br><span class=\"line\">    &lt;c:when test=<span class=\"string\">&quot;$&#123;score &gt;=90 &#125;&quot;</span>&gt;</span><br><span class=\"line\">    A학점입니다.</span><br><span class=\"line\">    &lt;/c:when&gt;</span><br><span class=\"line\">    &lt;c:when test=<span class=\"string\">&quot;$&#123;score &gt;=80 &#125;&quot;</span>&gt;</span><br><span class=\"line\">    B학점입니다.</span><br><span class=\"line\">    &lt;/c:when&gt;</span><br><span class=\"line\">    &lt;c:when test=<span class=\"string\">&quot;$&#123;score &gt;=70 &#125;&quot;</span>&gt;</span><br><span class=\"line\">    C학점입니다.</span><br><span class=\"line\">    &lt;/c:when&gt;</span><br><span class=\"line\">    &lt;c:when test=<span class=\"string\">&quot;$&#123;score &gt;=60 &#125;&quot;</span>&gt;</span><br><span class=\"line\">    D학점입니다.</span><br><span class=\"line\">    &lt;/c:when&gt;</span><br><span class=\"line\">    &lt;c:otherwise&gt;</span><br><span class=\"line\">    F학점입니다.</span><br><span class=\"line\">    &lt;/c:otherwise&gt;            </span><br><span class=\"line\">&lt;/c:choose&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<p>###흐름제어 태그- forEach<br><img src=\"/images/boostcourse_01/21.PNG\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ page language=<span class=\"string\">&quot;java&quot;</span> contentType=<span class=\"string\">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class=\"line\">    pageEncoding=<span class=\"string\">&quot;UTF-8&quot;</span>%&gt;</span><br><span class=\"line\">&lt;%@ taglib prefix=<span class=\"string\">&quot;c&quot;</span> uri=<span class=\"string\">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt; </span><br><span class=\"line\">&lt;%@ page <span class=\"keyword\">import</span>=<span class=\"string\">&quot;java.util.*&quot;</span> %&gt;</span><br><span class=\"line\">&lt;%</span><br><span class=\"line\">    List&lt;String&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    list.add(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\">    list.add(<span class=\"string\">&quot;world&quot;</span>);</span><br><span class=\"line\">    list.add(<span class=\"string\">&quot;!!!&quot;</span>);</span><br><span class=\"line\">    request.setAttribute(<span class=\"string\">&quot;list&quot;</span>, list);</span><br><span class=\"line\">%&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!DOCTYPE html PUBLIC <span class=\"string\">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class=\"string\">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;meta http-equiv=<span class=\"string\">&quot;Content-Type&quot;</span> content=<span class=\"string\">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br><span class=\"line\">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;c:forEach items=<span class=\"string\">&quot;$&#123;list&#125;&quot;</span> <span class=\"keyword\">var</span>=<span class=\"string\">&quot;item&quot;</span>&gt;</span><br><span class=\"line\">$&#123;item &#125; &lt;br&gt;</span><br><span class=\"line\">&lt;/c:forEach&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>###흐름제어태그 - import<br><img src=\"/images/boostcourse_01/24.PNG\"></p>\n<ul>\n<li>아래예제<br>jstlValue.jsp</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ page language=<span class=\"string\">&quot;java&quot;</span> contentType=<span class=\"string\">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class=\"line\">    pageEncoding=<span class=\"string\">&quot;UTF-8&quot;</span>%&gt;</span><br><span class=\"line\">Kang kyungmi</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<p>jstl05.jsp</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ page language=<span class=\"string\">&quot;java&quot;</span> contentType=<span class=\"string\">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class=\"line\">    pageEncoding=<span class=\"string\">&quot;UTF-8&quot;</span>%&gt;</span><br><span class=\"line\">&lt;%@ taglib prefix=<span class=\"string\">&quot;c&quot;</span> uri=<span class=\"string\">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt; </span><br><span class=\"line\">&lt;%@ page <span class=\"keyword\">import</span>=<span class=\"string\">&quot;java.util.*&quot;</span> %&gt;</span><br><span class=\"line\">&lt;c:<span class=\"keyword\">import</span> url=<span class=\"string\">&quot;http://localhost:8080/webapp/jstlValue.jsp&quot;</span> <span class=\"keyword\">var</span>=<span class=\"string\">&quot;urlValue&quot;</span> scope=<span class=\"string\">&quot;request&quot;</span>&gt;&lt;/c:<span class=\"keyword\">import</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!DOCTYPE html PUBLIC <span class=\"string\">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class=\"string\">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;meta http-equiv=<span class=\"string\">&quot;Content-Type&quot;</span> content=<span class=\"string\">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br><span class=\"line\">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">읽어들인 값 : $&#123;urlValue&#125;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n<h3 id=\"흐름제어-태그-redirect\"><a href=\"#흐름제어-태그-redirect\" class=\"headerlink\" title=\"흐름제어 태그 - redirect\"></a>흐름제어 태그 - redirect</h3><p><img src=\"/images/boostcourse_01/25.PNG\"></p>\n<p>jtl06.jsp</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ page language=<span class=\"string\">&quot;java&quot;</span> contentType=<span class=\"string\">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class=\"line\">    pageEncoding=<span class=\"string\">&quot;UTF-8&quot;</span>%&gt;</span><br><span class=\"line\">&lt;%@ taglib prefix=<span class=\"string\">&quot;c&quot;</span> uri=<span class=\"string\">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt; </span><br><span class=\"line\">&lt;c:redirect url=<span class=\"string\">&quot;jstlRedirectPage.jsp&quot;</span>&gt;&lt;/c:redirect&gt;</span><br></pre></td></tr></table></figure>\n\n<p>jstlRedirectPage.jsp</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ page language=<span class=\"string\">&quot;java&quot;</span> contentType=<span class=\"string\">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class=\"line\">    pageEncoding=<span class=\"string\">&quot;UTF-8&quot;</span>%&gt;</span><br><span class=\"line\">&lt;!DOCTYPE html PUBLIC <span class=\"string\">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class=\"string\">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;meta http-equiv=<span class=\"string\">&quot;Content-Type&quot;</span> content=<span class=\"string\">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br><span class=\"line\">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;h1&gt; redirect된 화면입니다.&lt;/h1&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h3 id=\"기타태그-out\"><a href=\"#기타태그-out\" class=\"headerlink\" title=\"기타태그-out\"></a>기타태그-out</h3><p><img src=\"/images/boostcourse_01/26.PNG\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ page language=<span class=\"string\">&quot;java&quot;</span> contentType=<span class=\"string\">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class=\"line\">    pageEncoding=<span class=\"string\">&quot;UTF-8&quot;</span>%&gt;</span><br><span class=\"line\">&lt;%@ taglib prefix=<span class=\"string\">&quot;c&quot;</span> uri=<span class=\"string\">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br><span class=\"line\">&lt;%@ taglib prefix=<span class=\"string\">&quot;fn&quot;</span> uri=<span class=\"string\">&quot;http://java.sun.com/jsp/jstl/functions&quot;</span>%&gt; </span><br><span class=\"line\">&lt;!DOCTYPE html PUBLIC <span class=\"string\">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class=\"string\">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;meta http-equiv=<span class=\"string\">&quot;Content-Type&quot;</span> content=<span class=\"string\">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br><span class=\"line\">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;c:set <span class=\"keyword\">var</span>=<span class=\"string\">&quot;t&quot;</span> value=<span class=\"string\">&quot;&lt;script type=&#x27;text/javascript&#x27;&gt;alert(1);&lt;/script&gt;&quot;</span> /&gt;</span><br><span class=\"line\">$&#123;t&#125;</span><br><span class=\"line\">&lt;c:out value=<span class=\"string\">&quot;$&#123;t&#125;&quot;</span> escapeXml=<span class=\"string\">&quot;true&quot;</span> /&gt;</span><br><span class=\"line\">&lt;c:out value=<span class=\"string\">&quot;$&#123;t&#125;&quot;</span> escapeXml=<span class=\"string\">&quot;false&quot;</span> /&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<br>\n","site":{"data":{}},"excerpt":"EL (Expression Language)\n표현언어이다.\n값을 표현하는데 사용되는 스크립트 언어로서 JSP의 기본 문법을 보완하는 역할을 한다\nJSP에서 내장객체를 가지고 자바 코드를 이용해서도 사용할 수 가 있긴함\n\n * 기능\n   JSP의 스코프(scope)에 맞는 속성 사용\n   집합 객체에 대한 접근 방법 제공\n   수치 연산, 관계 연산, 논리 연산자 제공\n   자바 클래스 메소드 호출 기능 제공\n   표현언어만의 기본 객체 제공\n   \n   \n * 사용법\n   ${expr}\n   \n   \n * 예시\n   \n   \n\n\n\n","more":"<p><img src=\"/images/boostcourse_01/9.PNG\"></p>\n<h3 id=\"EL-Expression-Language\"><a href=\"#EL-Expression-Language\" class=\"headerlink\" title=\"EL (Expression Language)\"></a>EL (Expression Language)</h3><p>표현언어이다.<br>값을 표현하는데 사용되는 스크립트 언어로서 JSP의 기본 문법을 보완하는 역할을 한다<br>JSP에서 내장객체를 가지고 자바 코드를 이용해서도 사용할 수 가 있긴함</p>\n<ul>\n<li><p>기능<br>JSP의 스코프(scope)에 맞는 속성 사용<br>집합 객체에 대한 접근 방법 제공<br>수치 연산, 관계 연산, 논리 연산자 제공<br>자바 클래스 메소드 호출 기능 제공<br>표현언어만의 기본 객체 제공</p>\n</li>\n<li><p>사용법<br>${expr}</p>\n</li>\n<li><p>예시</p>\n</li>\n</ul>\n<p><img src=\"/images/boostcourse_01/15.PNG\"></p>\n<h3 id=\"Scope에-적용한-EL-표기법-예시\"><a href=\"#Scope에-적용한-EL-표기법-예시\" class=\"headerlink\" title=\"Scope에 적용한 EL 표기법 예시\"></a>Scope에 적용한 EL 표기법 예시</h3><p>각각의 스코프에다가 값을 설정하고, 설정한 값을 EL 코드를 통해서 출력해본다</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ page language=<span class=\"string\">&quot;java&quot;</span> contentType=<span class=\"string\">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class=\"line\">    pageEncoding=<span class=\"string\">&quot;UTF-8&quot;</span>%&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;%</span><br><span class=\"line\">    pageContext.setAttribute(<span class=\"string\">&quot;p1&quot;</span>, <span class=\"string\">&quot;page scope value&quot;</span>);</span><br><span class=\"line\">    request.setAttribute(<span class=\"string\">&quot;r1&quot;</span>, <span class=\"string\">&quot;request scope value&quot;</span>);</span><br><span class=\"line\">    session.setAttribute(<span class=\"string\">&quot;s1&quot;</span>, <span class=\"string\">&quot;session scope value&quot;</span>);</span><br><span class=\"line\">    application.setAttribute(<span class=\"string\">&quot;a1&quot;</span>, <span class=\"string\">&quot;application scope value&quot;</span>);</span><br><span class=\"line\">%&gt;    </span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!DOCTYPE html PUBLIC <span class=\"string\">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class=\"string\">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;meta http-equiv=<span class=\"string\">&quot;Content-Type&quot;</span> content=<span class=\"string\">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br><span class=\"line\">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">pageContext.getAttribute(<span class=\"string\">&quot;p1&quot;</span>) : $&#123;pageScope.p1 &#125;&lt;br&gt;</span><br><span class=\"line\">request.getAttribute(<span class=\"string\">&quot;r1&quot;</span>) : $&#123;requestScope.r1 &#125;&lt;br&gt;</span><br><span class=\"line\">session.getAttribute(<span class=\"string\">&quot;s1&quot;</span>) : $&#123;sessionScope.s1 &#125;&lt;br&gt;</span><br><span class=\"line\">application.getAttribute(<span class=\"string\">&quot;a1&quot;</span>) : $&#123;applicationScope.a1 &#125;&lt;br&gt;</span><br><span class=\"line\">&lt;br&gt;&lt;br&gt;</span><br><span class=\"line\">pageContext.getAttribute(<span class=\"string\">&quot;p1&quot;</span>) : $&#123;p1 &#125;&lt;br&gt;    <span class=\"comment\">//더 정확하게 불러온것</span></span><br><span class=\"line\">request.getAttribute(<span class=\"string\">&quot;r1&quot;</span>) : $&#123;r1 &#125;&lt;br&gt;</span><br><span class=\"line\">session.getAttribute(<span class=\"string\">&quot;s1&quot;</span>) : $&#123;s1 &#125;&lt;br&gt;</span><br><span class=\"line\">application.getAttribute(<span class=\"string\">&quot;a1&quot;</span>) : $&#123;a1 &#125;&lt;br&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<pre><code>pageContext.setAttribute(&quot;p1&quot;, &quot;page scope value&quot;);\nrequest.setAttribute(&quot;r1&quot;, &quot;request scope value&quot;);\nsession.setAttribute(&quot;s1&quot;, &quot;session scope value&quot;);\napplication.setAttribute(&quot;a1&quot;, &quot;application scope value&quot;);\n</code></pre>\n<p>page scope, request scope, session scope, application scope에 각각의 값을 설정하였다</p>\n<p>  pageContext.getAttribute(“p1”) : ${pageScope.p1 }<br><br>  request.getAttribute(“r1”) : ${requestScope.r1 }<br><br>  session.getAttribute(“s1”) : ${sessionScope.s1 }<br><br>  application.getAttribute(“a1”) : ${applicationScope.a1 }<br><br>  <br><br><br>  pageContext.getAttribute(“p1”) : ${p1 }<br>    //더 정확하게 불러온것<br>  request.getAttribute(“r1”) : ${r1 }<br><br>  session.getAttribute(“s1”) : ${s1 }<br><br>  application.getAttribute(“a1”) : ${a1 }<br></p>\n<p>원래 JSP로는 아래와 같이 출력할 수 있다<br>pageContext.getAttribute(“p1”) : &lt;%=pageContext.getAttribute(“p1”) %&gt;<br></p>\n<ul>\n<li>결과값<br><img src=\"/images/boostcourse_01/16.PNG\"></li>\n</ul>\n<h3 id=\"EL-표기법-예제\"><a href=\"#EL-표기법-예제\" class=\"headerlink\" title=\"EL 표기법 예제\"></a>EL 표기법 예제</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ page language=<span class=\"string\">&quot;java&quot;</span> contentType=<span class=\"string\">&quot;text/html; charset=EUC-KR&quot;</span></span><br><span class=\"line\">    pageEncoding=<span class=\"string\">&quot;EUC-KR&quot;</span>%&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">&lt;%</span><br><span class=\"line\">request.setAttribute(<span class=\"string\">&quot;k&quot;</span>, <span class=\"number\">10</span>); </span><br><span class=\"line\">request.setAttribute(<span class=\"string\">&quot;m&quot;</span>, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">%&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;meta charset=<span class=\"string\">&quot;EUC-KR&quot;</span>&gt;</span><br><span class=\"line\">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">k : $&#123;k &#125; &lt;br&gt;</span><br><span class=\"line\">k + <span class=\"number\">5</span> : $&#123;k + <span class=\"number\">5</span>&#125; &lt;br&gt;</span><br><span class=\"line\">k - <span class=\"number\">5</span> : $&#123;k - <span class=\"number\">5</span>&#125; &lt;br&gt;</span><br><span class=\"line\">k * <span class=\"number\">5</span> : $&#123;k * <span class=\"number\">5</span>&#125; &lt;br&gt;</span><br><span class=\"line\">k / <span class=\"number\">5</span> : $&#123; k div <span class=\"number\">5</span> &#125; &lt;br&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">k : $&#123;k&#125; &lt;br&gt;</span><br><span class=\"line\">m : m&#123;m&#125; &lt;br&gt;</span><br><span class=\"line\">k &gt; <span class=\"number\">5</span> : $&#123; k &gt; <span class=\"number\">5</span> &#125; &lt;br&gt;</span><br><span class=\"line\">k &lt; <span class=\"number\">5</span> : $&#123; k &lt; <span class=\"number\">5</span> &#125; &lt;br&gt;</span><br><span class=\"line\">k &lt;= <span class=\"number\">10</span> : $&#123; k &lt;= <span class=\"number\">10</span>&#125; &lt;br&gt;</span><br><span class=\"line\">k &gt;= <span class=\"number\">10</span> : $&#123; k &gt;= <span class=\"number\">10</span> &#125; &lt;br&gt;</span><br><span class=\"line\">m : $&#123; m &#125; &lt;br&gt;</span><br><span class=\"line\">!m : $&#123; !m &#125; &lt;br&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<p>위의 코드에서 맨 위에 &lt;%@ page isELIgnored = “true” %&gt; 를 추가하게 되면<br>EL코드가 무시되어서 html로 출력된다</p>\n<br>\n\n<h3 id=\"JSTL-JSP-Standard-Tag-Library\"><a href=\"#JSTL-JSP-Standard-Tag-Library\" class=\"headerlink\" title=\"JSTL (JSP Standard Tag Library)\"></a>JSTL (JSP Standard Tag Library)</h3><p>JSTL은 JSP 페이지에서 조건문 처리, 반복문 처리 등을 html tag형태로 작성할 수 있게 도와줍니다.<br>내가 직접 태그를 만드는 것도 가능하다<br>JSP는 java코드와 html 이 섞여있어서 프론트 개발자가 작업을 하기가 힘들었다 -&gt; 유지보수가 어려움<br>-&gt; 이러한 문제를 해결하기 위해서 JSTL이 나왔다</p>\n<ul>\n<li>JSTL 사용법<br><a href=\"http://tomcat.apache.org/download-taglibs.cgi\">http://tomcat.apache.org/download-taglibs.cgi</a></li>\n</ul>\n<p><img src=\"/images/boostcourse_01/17.PNG\"><br>위의 사이트에서 아래의 세가지 코드를 다운받아<br>C:\\Users\\jiwon\\eclipse-workspace\\firstweb\\WebContent\\WEB-INF\\lib 경로에 넣어주었다</p>\n<p><img src=\"/images/boostcourse_01/18.PNG\"></p>\n<p><img src=\"/images/boostcourse_01/19.PNG\"><br><br></p>\n<ul>\n<li>JSTL 예제</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ page language=<span class=\"string\">&quot;java&quot;</span> contentType=<span class=\"string\">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class=\"line\">    pageEncoding=<span class=\"string\">&quot;UTF-8&quot;</span>%&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;%@ taglib prefix=<span class=\"string\">&quot;c&quot;</span> uri=<span class=\"string\">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt; </span><br><span class=\"line\"></span><br><span class=\"line\">&lt;c:set <span class=\"keyword\">var</span>=<span class=\"string\">&quot;value1&quot;</span> scope=<span class=\"string\">&quot;request&quot;</span> value=<span class=\"string\">&quot;kang&quot;</span>/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!DOCTYPE html PUBLIC <span class=\"string\">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class=\"string\">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;meta http-equiv=<span class=\"string\">&quot;Content-Type&quot;</span> content=<span class=\"string\">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br><span class=\"line\">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">성 : $&#123;value1&#125; &lt;br&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;c:remove <span class=\"keyword\">var</span>=<span class=\"string\">&quot;value1&quot;</span> scope=<span class=\"string\">&quot;request&quot;</span>/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">성 : $&#123;value1 &#125;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n\n<p>&lt;%@ taglib prefix=”c” uri=”<a href=\"http://java.sun.com/jsp/jstl/core&quot;\">http://java.sun.com/jsp/jstl/core&quot;</a> %&gt;<br>-&gt; JSTL 라이브러리 사용을 알려줌</p>\n<h3 id=\"변수지원-태그\"><a href=\"#변수지원-태그\" class=\"headerlink\" title=\"변수지원 태그\"></a>변수지원 태그</h3><p><img src=\"/images/boostcourse_01/20.PNG\"></p>\n<h3 id=\"흐름제어-태그-if\"><a href=\"#흐름제어-태그-if\" class=\"headerlink\" title=\"흐름제어 태그 -if\"></a>흐름제어 태그 -if</h3><p><img src=\"/images/boostcourse_01/21.PNG\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ page language=<span class=\"string\">&quot;java&quot;</span> contentType=<span class=\"string\">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class=\"line\">pageEncoding=<span class=\"string\">&quot;UTF-8&quot;</span>%&gt;</span><br><span class=\"line\">&lt;%@ taglib prefix=<span class=\"string\">&quot;c&quot;</span> uri=<span class=\"string\">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt; </span><br><span class=\"line\">&lt;%</span><br><span class=\"line\">request.setAttribute(<span class=\"string\">&quot;n&quot;</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\">%&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!DOCTYPE html PUBLIC <span class=\"string\">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class=\"string\">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;meta http-equiv=<span class=\"string\">&quot;Content-Type&quot;</span> content=<span class=\"string\">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br><span class=\"line\">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;c:<span class=\"keyword\">if</span> test=<span class=\"string\">&quot;$&#123;n == 0&#125;&quot;</span>&gt;</span><br><span class=\"line\">n은 과 <span class=\"number\">0</span>과 같습니다.</span><br><span class=\"line\">&lt;/c:<span class=\"keyword\">if</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;c:<span class=\"keyword\">if</span> test=<span class=\"string\">&quot;$&#123;n == 10&#125;&quot;</span>&gt;</span><br><span class=\"line\">n은 과 <span class=\"number\">10</span>과 같습니다.</span><br><span class=\"line\">&lt;/c:<span class=\"keyword\">if</span>&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>###흐름제어 태그 -choose<br><img src=\"/images/boostcourse_01/21.PNG\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ page language=<span class=\"string\">&quot;java&quot;</span> contentType=<span class=\"string\">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class=\"line\">    pageEncoding=<span class=\"string\">&quot;UTF-8&quot;</span>%&gt;</span><br><span class=\"line\">&lt;%@ taglib prefix=<span class=\"string\">&quot;c&quot;</span> uri=<span class=\"string\">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt; </span><br><span class=\"line\">&lt;%@ page <span class=\"keyword\">import</span>=<span class=\"string\">&quot;java.util.*&quot;</span> %&gt;</span><br><span class=\"line\">&lt;%</span><br><span class=\"line\">    request.setAttribute(<span class=\"string\">&quot;score&quot;</span>, <span class=\"number\">83</span>);</span><br><span class=\"line\">%&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!DOCTYPE html PUBLIC <span class=\"string\">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class=\"string\">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;meta http-equiv=<span class=\"string\">&quot;Content-Type&quot;</span> content=<span class=\"string\">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br><span class=\"line\">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;c:choose&gt;</span><br><span class=\"line\">    &lt;c:when test=<span class=\"string\">&quot;$&#123;score &gt;=90 &#125;&quot;</span>&gt;</span><br><span class=\"line\">    A학점입니다.</span><br><span class=\"line\">    &lt;/c:when&gt;</span><br><span class=\"line\">    &lt;c:when test=<span class=\"string\">&quot;$&#123;score &gt;=80 &#125;&quot;</span>&gt;</span><br><span class=\"line\">    B학점입니다.</span><br><span class=\"line\">    &lt;/c:when&gt;</span><br><span class=\"line\">    &lt;c:when test=<span class=\"string\">&quot;$&#123;score &gt;=70 &#125;&quot;</span>&gt;</span><br><span class=\"line\">    C학점입니다.</span><br><span class=\"line\">    &lt;/c:when&gt;</span><br><span class=\"line\">    &lt;c:when test=<span class=\"string\">&quot;$&#123;score &gt;=60 &#125;&quot;</span>&gt;</span><br><span class=\"line\">    D학점입니다.</span><br><span class=\"line\">    &lt;/c:when&gt;</span><br><span class=\"line\">    &lt;c:otherwise&gt;</span><br><span class=\"line\">    F학점입니다.</span><br><span class=\"line\">    &lt;/c:otherwise&gt;            </span><br><span class=\"line\">&lt;/c:choose&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<p>###흐름제어 태그- forEach<br><img src=\"/images/boostcourse_01/21.PNG\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ page language=<span class=\"string\">&quot;java&quot;</span> contentType=<span class=\"string\">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class=\"line\">    pageEncoding=<span class=\"string\">&quot;UTF-8&quot;</span>%&gt;</span><br><span class=\"line\">&lt;%@ taglib prefix=<span class=\"string\">&quot;c&quot;</span> uri=<span class=\"string\">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt; </span><br><span class=\"line\">&lt;%@ page <span class=\"keyword\">import</span>=<span class=\"string\">&quot;java.util.*&quot;</span> %&gt;</span><br><span class=\"line\">&lt;%</span><br><span class=\"line\">    List&lt;String&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    list.add(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\">    list.add(<span class=\"string\">&quot;world&quot;</span>);</span><br><span class=\"line\">    list.add(<span class=\"string\">&quot;!!!&quot;</span>);</span><br><span class=\"line\">    request.setAttribute(<span class=\"string\">&quot;list&quot;</span>, list);</span><br><span class=\"line\">%&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!DOCTYPE html PUBLIC <span class=\"string\">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class=\"string\">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;meta http-equiv=<span class=\"string\">&quot;Content-Type&quot;</span> content=<span class=\"string\">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br><span class=\"line\">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;c:forEach items=<span class=\"string\">&quot;$&#123;list&#125;&quot;</span> <span class=\"keyword\">var</span>=<span class=\"string\">&quot;item&quot;</span>&gt;</span><br><span class=\"line\">$&#123;item &#125; &lt;br&gt;</span><br><span class=\"line\">&lt;/c:forEach&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>###흐름제어태그 - import<br><img src=\"/images/boostcourse_01/24.PNG\"></p>\n<ul>\n<li>아래예제<br>jstlValue.jsp</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ page language=<span class=\"string\">&quot;java&quot;</span> contentType=<span class=\"string\">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class=\"line\">    pageEncoding=<span class=\"string\">&quot;UTF-8&quot;</span>%&gt;</span><br><span class=\"line\">Kang kyungmi</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<p>jstl05.jsp</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ page language=<span class=\"string\">&quot;java&quot;</span> contentType=<span class=\"string\">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class=\"line\">    pageEncoding=<span class=\"string\">&quot;UTF-8&quot;</span>%&gt;</span><br><span class=\"line\">&lt;%@ taglib prefix=<span class=\"string\">&quot;c&quot;</span> uri=<span class=\"string\">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt; </span><br><span class=\"line\">&lt;%@ page <span class=\"keyword\">import</span>=<span class=\"string\">&quot;java.util.*&quot;</span> %&gt;</span><br><span class=\"line\">&lt;c:<span class=\"keyword\">import</span> url=<span class=\"string\">&quot;http://localhost:8080/webapp/jstlValue.jsp&quot;</span> <span class=\"keyword\">var</span>=<span class=\"string\">&quot;urlValue&quot;</span> scope=<span class=\"string\">&quot;request&quot;</span>&gt;&lt;/c:<span class=\"keyword\">import</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!DOCTYPE html PUBLIC <span class=\"string\">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class=\"string\">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;meta http-equiv=<span class=\"string\">&quot;Content-Type&quot;</span> content=<span class=\"string\">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br><span class=\"line\">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">읽어들인 값 : $&#123;urlValue&#125;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n<h3 id=\"흐름제어-태그-redirect\"><a href=\"#흐름제어-태그-redirect\" class=\"headerlink\" title=\"흐름제어 태그 - redirect\"></a>흐름제어 태그 - redirect</h3><p><img src=\"/images/boostcourse_01/25.PNG\"></p>\n<p>jtl06.jsp</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ page language=<span class=\"string\">&quot;java&quot;</span> contentType=<span class=\"string\">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class=\"line\">    pageEncoding=<span class=\"string\">&quot;UTF-8&quot;</span>%&gt;</span><br><span class=\"line\">&lt;%@ taglib prefix=<span class=\"string\">&quot;c&quot;</span> uri=<span class=\"string\">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt; </span><br><span class=\"line\">&lt;c:redirect url=<span class=\"string\">&quot;jstlRedirectPage.jsp&quot;</span>&gt;&lt;/c:redirect&gt;</span><br></pre></td></tr></table></figure>\n\n<p>jstlRedirectPage.jsp</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ page language=<span class=\"string\">&quot;java&quot;</span> contentType=<span class=\"string\">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class=\"line\">    pageEncoding=<span class=\"string\">&quot;UTF-8&quot;</span>%&gt;</span><br><span class=\"line\">&lt;!DOCTYPE html PUBLIC <span class=\"string\">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class=\"string\">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;meta http-equiv=<span class=\"string\">&quot;Content-Type&quot;</span> content=<span class=\"string\">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br><span class=\"line\">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;h1&gt; redirect된 화면입니다.&lt;/h1&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h3 id=\"기타태그-out\"><a href=\"#기타태그-out\" class=\"headerlink\" title=\"기타태그-out\"></a>기타태그-out</h3><p><img src=\"/images/boostcourse_01/26.PNG\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ page language=<span class=\"string\">&quot;java&quot;</span> contentType=<span class=\"string\">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class=\"line\">    pageEncoding=<span class=\"string\">&quot;UTF-8&quot;</span>%&gt;</span><br><span class=\"line\">&lt;%@ taglib prefix=<span class=\"string\">&quot;c&quot;</span> uri=<span class=\"string\">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br><span class=\"line\">&lt;%@ taglib prefix=<span class=\"string\">&quot;fn&quot;</span> uri=<span class=\"string\">&quot;http://java.sun.com/jsp/jstl/functions&quot;</span>%&gt; </span><br><span class=\"line\">&lt;!DOCTYPE html PUBLIC <span class=\"string\">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class=\"string\">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;meta http-equiv=<span class=\"string\">&quot;Content-Type&quot;</span> content=<span class=\"string\">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br><span class=\"line\">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;c:set <span class=\"keyword\">var</span>=<span class=\"string\">&quot;t&quot;</span> value=<span class=\"string\">&quot;&lt;script type=&#x27;text/javascript&#x27;&gt;alert(1);&lt;/script&gt;&quot;</span> /&gt;</span><br><span class=\"line\">$&#123;t&#125;</span><br><span class=\"line\">&lt;c:out value=<span class=\"string\">&quot;$&#123;t&#125;&quot;</span> escapeXml=<span class=\"string\">&quot;true&quot;</span> /&gt;</span><br><span class=\"line\">&lt;c:out value=<span class=\"string\">&quot;$&#123;t&#125;&quot;</span> escapeXml=<span class=\"string\">&quot;false&quot;</span> /&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<br>\n"},{"title":"Spring | 인프런","date":"2022-01-02T15:00:00.000Z","toc":true,"_content":"![](/images//.PNG)\n\n\n### 실행환경 \n- java 11\n- intellij\n\n\n### **Spring 프로젝트 만들기**\n---\n\nhttps://start.spring.io/\n![](/images//spring01.png)\n\n### **Maven vs Gradle Project**\n요즘에는 Gradle Project를 더 많이 사용한다.\n\n\n\n\n### 폴더 분석하기\n- main과 test로 나뉘어져 있는데 요즘 개발 트랜드에 test가 아주 중요하다\n- resources 는 실제 자바 코드를 제외한 설정 파일이 들어가 있음\n- build.gradle 에전에는 하나하나 쳤어야 했지만 요즘에는 스프링 부트가 만들어져서 간단하다 라이브러리나 버전 관리하는데 사용한다고 알아두자\n- ExternalLibraries 외부에서 땡겨온 라이브러리\n- ","source":"_posts/title-1.md","raw":"---\ntitle: Spring | 인프런\ndate: 2022-01-03\ntags: database\ntoc: true\ncategories: \n- 인프런\n---\n![](/images//.PNG)\n\n\n### 실행환경 \n- java 11\n- intellij\n\n\n### **Spring 프로젝트 만들기**\n---\n\nhttps://start.spring.io/\n![](/images//spring01.png)\n\n### **Maven vs Gradle Project**\n요즘에는 Gradle Project를 더 많이 사용한다.\n\n\n\n\n### 폴더 분석하기\n- main과 test로 나뉘어져 있는데 요즘 개발 트랜드에 test가 아주 중요하다\n- resources 는 실제 자바 코드를 제외한 설정 파일이 들어가 있음\n- build.gradle 에전에는 하나하나 쳤어야 했지만 요즘에는 스프링 부트가 만들어져서 간단하다 라이브러리나 버전 관리하는데 사용한다고 알아두자\n- ExternalLibraries 외부에서 땡겨온 라이브러리\n- ","slug":"title-1","published":1,"updated":"2022-01-26T08:03:19.347Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzz6hmdn0001derja4k88pvc","content":"<p><img src=\"/images//.PNG\"></p>\n<h3 id=\"실행환경\"><a href=\"#실행환경\" class=\"headerlink\" title=\"실행환경\"></a>실행환경</h3><ul>\n<li>java 11</li>\n<li>intellij</li>\n</ul>\n<h3 id=\"Spring-프로젝트-만들기\"><a href=\"#Spring-프로젝트-만들기\" class=\"headerlink\" title=\"Spring 프로젝트 만들기\"></a><strong>Spring 프로젝트 만들기</strong></h3><hr>\n<p><a href=\"https://start.spring.io/\">https://start.spring.io/</a><br><img src=\"/images//spring01.png\"></p>\n<h3 id=\"Maven-vs-Gradle-Project\"><a href=\"#Maven-vs-Gradle-Project\" class=\"headerlink\" title=\"Maven vs Gradle Project\"></a><strong>Maven vs Gradle Project</strong></h3><p>요즘에는 Gradle Project를 더 많이 사용한다.</p>\n<h3 id=\"폴더-분석하기\"><a href=\"#폴더-분석하기\" class=\"headerlink\" title=\"폴더 분석하기\"></a>폴더 분석하기</h3><ul>\n<li>main과 test로 나뉘어져 있는데 요즘 개발 트랜드에 test가 아주 중요하다</li>\n<li>resources 는 실제 자바 코드를 제외한 설정 파일이 들어가 있음</li>\n<li>build.gradle 에전에는 하나하나 쳤어야 했지만 요즘에는 스프링 부트가 만들어져서 간단하다 라이브러리나 버전 관리하는데 사용한다고 알아두자</li>\n<li>ExternalLibraries 외부에서 땡겨온 라이브러리</li>\n<li></li>\n</ul>\n","site":{"data":{}},"excerpt":"실행환경\n * java 11\n * intellij\n\nSpring 프로젝트 만들기\n\n\n\nhttps://start.spring.io/\n\n\nMaven vs Gradle Project\n요즘에는 Gradle Project를 더 많이 사용한다.\n\n폴더 분석하기\n * main과 test로 나뉘어져 있는데 요즘 개발 트랜드에 test가 아주 중요하다\n * resources 는 실제 자바 코드를 제외한 설정 파일이 들어가 있음\n * build.gradle 에전에는 하나하나 쳤어야 했지만 요즘에는 스프링 부트가 만들어져서 간단하다 라이브러리나 버전 ","more":"<p><img src=\"/images//.PNG\"></p>\n<h3 id=\"실행환경\"><a href=\"#실행환경\" class=\"headerlink\" title=\"실행환경\"></a>실행환경</h3><ul>\n<li>java 11</li>\n<li>intellij</li>\n</ul>\n<h3 id=\"Spring-프로젝트-만들기\"><a href=\"#Spring-프로젝트-만들기\" class=\"headerlink\" title=\"Spring 프로젝트 만들기\"></a><strong>Spring 프로젝트 만들기</strong></h3><hr>\n<p><a href=\"https://start.spring.io/\">https://start.spring.io/</a><br><img src=\"/images//spring01.png\"></p>\n<h3 id=\"Maven-vs-Gradle-Project\"><a href=\"#Maven-vs-Gradle-Project\" class=\"headerlink\" title=\"Maven vs Gradle Project\"></a><strong>Maven vs Gradle Project</strong></h3><p>요즘에는 Gradle Project를 더 많이 사용한다.</p>\n<h3 id=\"폴더-분석하기\"><a href=\"#폴더-분석하기\" class=\"headerlink\" title=\"폴더 분석하기\"></a>폴더 분석하기</h3><ul>\n<li>main과 test로 나뉘어져 있는데 요즘 개발 트랜드에 test가 아주 중요하다</li>\n<li>resources 는 실제 자바 코드를 제외한 설정 파일이 들어가 있음</li>\n<li>build.gradle 에전에는 하나하나 쳤어야 했지만 요즘에는 스프링 부트가 만들어져서 간단하다 라이브러리나 버전 관리하는데 사용한다고 알아두자</li>\n<li>ExternalLibraries 외부에서 땡겨온 라이브러리</li>\n<li></li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cky2hohek00055nrjea4g6t1i","category_id":"cky2hohel00085nrjg0q43dw3","_id":"cky2hohen000i5nrj7v78b0li"},{"post_id":"cky2hohek00065nrjdub8hf8m","category_id":"cky2hohej00035nrj20if8r15","_id":"cky2hohep000p5nrj628xc6fj"},{"post_id":"cky2hohek00065nrjdub8hf8m","category_id":"cky2hohem000d5nrj2amq8f91","_id":"cky2hoheq000t5nrjfziwbfxe"},{"post_id":"cky2hoheg00005nrjcwwm0v7y","category_id":"cky2hohej00035nrj20if8r15","_id":"cky2hoheq000w5nrj0myl6sc1"},{"post_id":"cky2hoheg00005nrjcwwm0v7y","category_id":"cky2hohem000d5nrj2amq8f91","_id":"cky2hoher000z5nrj8w1idcjn"},{"post_id":"cky2hohel00075nrj2yi673xf","category_id":"cky2hohej00035nrj20if8r15","_id":"cky2hoher00125nrjappr88s2"},{"post_id":"cky2hohel00075nrj2yi673xf","category_id":"cky2hohem000d5nrj2amq8f91","_id":"cky2hohes00175nrj7c2cd4dz"},{"post_id":"cky2hohep000n5nrjb9fw6guw","category_id":"cky2hoheu001t5nrj7otnhrhw","_id":"cky2hohew00275nrj97b11fxd"},{"post_id":"cky2hoheq000u5nrj9b3ph8c8","category_id":"cky2hohew00265nrja4rlauoy","_id":"cky2hohex002k5nrjbjwycdod"},{"post_id":"cky2hoheq000y5nrj4sz1699y","category_id":"cky2hohew00265nrja4rlauoy","_id":"cky2hohex002q5nrjgxw51gsa"},{"post_id":"cky2hoher00115nrj77w76lsx","category_id":"cky2hohew00265nrja4rlauoy","_id":"cky2hohey002s5nrjb6p19nq2"},{"post_id":"cky2hohel000b5nrj6nim20ji","category_id":"cky2hoheq000v5nrj7zzbay72","_id":"cky2hohey002w5nrj0y483n3k"},{"post_id":"cky2hohel000b5nrj6nim20ji","category_id":"cky2hohex002p5nrj9qwwhlf0","_id":"cky2hohey00305nrjf4d77ssp"},{"post_id":"cky2hohes00195nrjau3labgv","category_id":"cky2hohew00265nrja4rlauoy","_id":"cky2hohf000355nrj5bxb0c19"},{"post_id":"cky2hohel000c5nrj4xbvg3ap","category_id":"cky2hoheq000v5nrj7zzbay72","_id":"cky2hohf000395nrj9qpz75lw"},{"post_id":"cky2hohel000c5nrj4xbvg3ap","category_id":"cky2hohex002p5nrj9qwwhlf0","_id":"cky2hohf0003b5nrj0g4gbane"},{"post_id":"cky2hohes001c5nrjhg3k2um3","category_id":"cky2hohew00265nrja4rlauoy","_id":"cky2hohf0003e5nrj72ui4221"},{"post_id":"cky2hohet001f5nrj30172m79","category_id":"cky2hohew00265nrja4rlauoy","_id":"cky2hohf0003h5nrj2x53d6s1"},{"post_id":"cky2hohem000f5nrje9sx7ik0","category_id":"cky2hoheq000v5nrj7zzbay72","_id":"cky2hohf1003l5nrj9t3g7hr2"},{"post_id":"cky2hohem000f5nrje9sx7ik0","category_id":"cky2hohf0003d5nrj5u4s25a8","_id":"cky2hohf1003m5nrjgldnbm2j"},{"post_id":"cky2hohet001i5nrja5v22vnp","category_id":"cky2hohew00265nrja4rlauoy","_id":"cky2hohf1003o5nrjeaq28q7v"},{"post_id":"cky2hohet001l5nrjhz4efa6w","category_id":"cky2hohew00265nrja4rlauoy","_id":"cky2hohf1003p5nrj38yd8rqe"},{"post_id":"cky2hohem000h5nrj31p60qa7","category_id":"cky2hoheq000v5nrj7zzbay72","_id":"cky2hohf1003s5nrj7jrt5it5"},{"post_id":"cky2hohem000h5nrj31p60qa7","category_id":"cky2hohf1003n5nrj2cq26u9w","_id":"cky2hohf1003t5nrjhrerbze8"},{"post_id":"cky2hoheu001o5nrjfgk5gfea","category_id":"cky2hohew00265nrja4rlauoy","_id":"cky2hohf1003u5nrj462bhduq"},{"post_id":"cky2hohep000l5nrjavm6ezjf","category_id":"cky2hoheq000v5nrj7zzbay72","_id":"cky2hohf1003z5nrj6u1h7msc"},{"post_id":"cky2hohep000l5nrjavm6ezjf","category_id":"cky2hohf1003v5nrj1a82fcyy","_id":"cky2hohf100405nrj8eoffj96"},{"post_id":"cky2hoheu001u5nrj10ca95iy","category_id":"cky2hoheq000v5nrj7zzbay72","_id":"cky2hohf200425nrj7pdec40r"},{"post_id":"cky2hoheu001u5nrj10ca95iy","category_id":"cky2hohf1003n5nrj2cq26u9w","_id":"cky2hohf200435nrjgeyj8pwp"},{"post_id":"cky2hohev001w5nrjedm2csev","category_id":"cky2hohew00265nrja4rlauoy","_id":"cky2hohf200445nrj6j1r2jd6"},{"post_id":"cky2hohev001z5nrjh7ap4ivd","category_id":"cky2hoheq000v5nrj7zzbay72","_id":"cky2hohf200475nrjdhc6e0f6"},{"post_id":"cky2hohev001z5nrjh7ap4ivd","category_id":"cky2hohf200415nrj88235nma","_id":"cky2hohf200485nrj1frnevw1"},{"post_id":"cky2hohev00225nrje0dvbdhv","category_id":"cky2hoheq000v5nrj7zzbay72","_id":"cky2hohf200495nrje3zbfk5d"},{"post_id":"cky2hohev00225nrje0dvbdhv","category_id":"cky2hohf200415nrj88235nma","_id":"cky2hohf2004b5nrjh5ezf01l"},{"post_id":"cky2hoheq000r5nrj39y72in4","category_id":"cky2hoheq000v5nrj7zzbay72","_id":"cky2hohf2004d5nrj7vec12xc"},{"post_id":"cky2hoheq000r5nrj39y72in4","category_id":"cky2hohf200465nrj10c44ceb","_id":"cky2hohf2004e5nrj1tsvbutk"},{"post_id":"cky2hohev00255nrj6g7y0bef","category_id":"cky2hohew00265nrja4rlauoy","_id":"cky2hohf2004g5nrjea3wab1r"},{"post_id":"cky2hohew00295nrjc4wy02v3","category_id":"cky2hoheq000v5nrj7zzbay72","_id":"cky2hohf2004i5nrj7emz152c"},{"post_id":"cky2hohew00295nrjc4wy02v3","category_id":"cky2hohf200415nrj88235nma","_id":"cky2hohf3004j5nrj58spg4fm"},{"post_id":"cky2hohew002c5nrjfakdb40d","category_id":"cky2hoheq000v5nrj7zzbay72","_id":"cky2hohf3004l5nrj1dr95cg5"},{"post_id":"cky2hohew002c5nrjfakdb40d","category_id":"cky2hohf200415nrj88235nma","_id":"cky2hohf3004m5nrjb50x3jl7"},{"post_id":"cky2hohew002f5nrj2toc75fp","category_id":"cky2hoheq000v5nrj7zzbay72","_id":"cky2hohf3004o5nrjdu5lcu7h"},{"post_id":"cky2hohew002f5nrj2toc75fp","category_id":"cky2hohf0003d5nrj5u4s25a8","_id":"cky2hohf3004p5nrjgl0p5odx"},{"post_id":"cky2hohex002i5nrja0ub24ho","category_id":"cky2hoheq000v5nrj7zzbay72","_id":"cky2hohf3004r5nrj23p17knv"},{"post_id":"cky2hohex002i5nrja0ub24ho","category_id":"cky2hohex002p5nrj9qwwhlf0","_id":"cky2hohf3004s5nrj0upkbyzi"},{"post_id":"cky2hohex002m5nrjex96h500","category_id":"cky2hoheq000v5nrj7zzbay72","_id":"cky2hohf3004t5nrjd6qqhqes"},{"post_id":"cky2hohex002m5nrjex96h500","category_id":"cky2hohex002p5nrj9qwwhlf0","_id":"cky2hohf3004u5nrj182ibzni"},{"post_id":"cky2hoher00155nrj0r0cay5o","category_id":"cky2hohey002u5nrj5bma26v2","_id":"cky2hohf3004v5nrj5qyberlj"},{"post_id":"cky2hoher00155nrj0r0cay5o","category_id":"cky2hohf3004q5nrjbavpfb7j","_id":"cky2hohf3004w5nrjhcnn98wq"},{"post_id":"cky2hohf4004x5nrj1709bqcu","category_id":"cky2hohew00265nrja4rlauoy","_id":"cky2hohf500535nrj3b3mejso"},{"post_id":"cky2hohf4004y5nrjb2qq5zza","category_id":"cky2hoheq000v5nrj7zzbay72","_id":"cky2hohf500555nrjegchbm41"},{"post_id":"cky2hohf4004y5nrjb2qq5zza","category_id":"cky2hohex002p5nrj9qwwhlf0","_id":"cky2hohf500585nrj8d4dg9w1"},{"post_id":"cky2hohf500505nrj2f3vaco9","category_id":"cky2hoheq000v5nrj7zzbay72","_id":"cky2hohf6005b5nrj3emph22a"},{"post_id":"cky2hohf500505nrj2f3vaco9","category_id":"cky2hohex002p5nrj9qwwhlf0","_id":"cky2hohf6005c5nrj0lk43s1b"},{"post_id":"cky2hohf500525nrj574q04ei","category_id":"cky2hoheq000v5nrj7zzbay72","_id":"cky2hohf6005f5nrj9fp39rqn"},{"post_id":"cky2hohf500525nrj574q04ei","category_id":"cky2hohex002p5nrj9qwwhlf0","_id":"cky2hohf6005h5nrj0jrt16nh"},{"post_id":"cky2hohf500545nrj2kuf32ct","category_id":"cky2hoheq000v5nrj7zzbay72","_id":"cky2hohf6005k5nrjbkfm9oxv"},{"post_id":"cky2hohf500545nrj2kuf32ct","category_id":"cky2hohex002p5nrj9qwwhlf0","_id":"cky2hohf6005l5nrjfjo6gc6w"},{"post_id":"cky2hohf500565nrjgku6e3tg","category_id":"cky2hoheq000v5nrj7zzbay72","_id":"cky2hohf6005o5nrjh4z15yzq"},{"post_id":"cky2hohf500565nrjgku6e3tg","category_id":"cky2hohex002p5nrj9qwwhlf0","_id":"cky2hohf6005p5nrj9ousbxd1"},{"post_id":"cky2hohf6005a5nrj8hoc3l7b","category_id":"cky2hoheq000v5nrj7zzbay72","_id":"cky2hohf6005q5nrj7uvo8ia8"},{"post_id":"cky2hohf6005a5nrj8hoc3l7b","category_id":"cky2hohex002p5nrj9qwwhlf0","_id":"cky2hohf6005s5nrj79b3ecyt"},{"post_id":"cky30wsgu0001v8rjdhti7jv0","category_id":"cky30wsgv0002v8rjfj452lx0","_id":"cky30wsgv0005v8rj880a9l9p"},{"post_id":"cky31c9at0000z1rjd3zl5f9p","category_id":"cky30wsgv0002v8rjfj452lx0","_id":"cky31c9b10002z1rj1x9s2ye1"},{"post_id":"cky31o1oe00001trj5o449koa","category_id":"cky30wsgv0002v8rjfj452lx0","_id":"cky31o1oh00061trjfu95htsc"},{"post_id":"cky31o1of00011trj9qi23jnx","category_id":"cky30wsgv0002v8rjfj452lx0","_id":"cky31o1oh00091trj0j2pctpp"},{"post_id":"cky31o1og00031trj22i6etl6","category_id":"cky30wsgv0002v8rjfj452lx0","_id":"cky31o1oi000b1trj3kh40ke6"},{"post_id":"cky31phnq00002srjezixbznn","category_id":"cky30wsgv0002v8rjfj452lx0","_id":"cky323taf00025xrj944rfmhu"},{"post_id":"cky31phnt00032srj28pn8x6h","category_id":"cky30wsgv0002v8rjfj452lx0","_id":"cky323taf00035xrj48t16att"},{"post_id":"cky31phns00022srjhvks0w80","category_id":"cky30wsgv0002v8rjfj452lx0","_id":"cky323tak00075xrj52b394s2"},{"post_id":"cky31phnt00042srjaojd3gl2","category_id":"cky30wsgv0002v8rjfj452lx0","_id":"cky323tak00085xrj6zqh7mol"},{"post_id":"cky31phnr00012srja3fy6d4a","category_id":"cky30wsgv0002v8rjfj452lx0","_id":"cky323tak000c5xrj9ar8bu1l"},{"post_id":"cky323taj00065xrj8idqflic","category_id":"cky323tak000a5xrj8k775e3r","_id":"cky323tak000g5xrj58pn4wj3"},{"post_id":"cky2hoheu001r5nrj4vyt4bi2","category_id":"cky328tac00006vrjbmftfqr7","_id":"cky328tai00036vrj8ct877u1"},{"post_id":"ckzz6hmdn0001derja4k88pvc","category_id":"ckzz6hmdq0002derjfree5ycn","_id":"ckzz6hmdv0004derj3qms3t9r"}],"PostTag":[{"post_id":"cky2hoheg00005nrjcwwm0v7y","tag_id":"cky2hohek00045nrjeix3d6qc","_id":"cky2hohel000a5nrjd2yp8fml"},{"post_id":"cky2hohej00025nrj14wr3il2","tag_id":"cky2hohel00095nrj8m830z3a","_id":"cky2hohem000g5nrj2w7n7fq2"},{"post_id":"cky2hohek00065nrjdub8hf8m","tag_id":"cky2hohem000e5nrjcur9g7m4","_id":"cky2hohep000m5nrj3fhucl2t"},{"post_id":"cky2hohel00075nrj2yi673xf","tag_id":"cky2hohem000e5nrjcur9g7m4","_id":"cky2hoheq000s5nrjfv4y39ee"},{"post_id":"cky2hohel000b5nrj6nim20ji","tag_id":"cky2hohep000q5nrj4rbb1rew","_id":"cky2hoher00105nrjbcoa5uu6"},{"post_id":"cky2hoheq000u5nrj9b3ph8c8","tag_id":"cky2hohel00095nrj8m830z3a","_id":"cky2hoher00135nrja3ha7phx"},{"post_id":"cky2hoheq000y5nrj4sz1699y","tag_id":"cky2hohel00095nrj8m830z3a","_id":"cky2hohes00185nrj6wyj62yo"},{"post_id":"cky2hoher00115nrj77w76lsx","tag_id":"cky2hohel00095nrj8m830z3a","_id":"cky2hohes001a5nrjhzpb54wz"},{"post_id":"cky2hohel000c5nrj4xbvg3ap","tag_id":"cky2hoheq000x5nrj6dd1ghox","_id":"cky2hohet001e5nrj1l7eblcd"},{"post_id":"cky2hoher00155nrj0r0cay5o","tag_id":"cky2hohel00095nrj8m830z3a","_id":"cky2hohet001g5nrj4sf6gx52"},{"post_id":"cky2hohes00195nrjau3labgv","tag_id":"cky2hohel00095nrj8m830z3a","_id":"cky2hohet001k5nrj7vkx9a4e"},{"post_id":"cky2hohem000f5nrje9sx7ik0","tag_id":"cky2hoher00165nrja2dxcgln","_id":"cky2hoheu001m5nrjejeifn0s"},{"post_id":"cky2hohes001c5nrjhg3k2um3","tag_id":"cky2hohel00095nrj8m830z3a","_id":"cky2hoheu001p5nrj6n52cv0o"},{"post_id":"cky2hohet001f5nrj30172m79","tag_id":"cky2hohel00095nrj8m830z3a","_id":"cky2hoheu001s5nrjeu8e3etx"},{"post_id":"cky2hohem000h5nrj31p60qa7","tag_id":"cky2hohet001d5nrjarrn6f96","_id":"cky2hohev001v5nrjh3nbbveq"},{"post_id":"cky2hohet001i5nrja5v22vnp","tag_id":"cky2hohel00095nrj8m830z3a","_id":"cky2hohev001y5nrj34f8af5l"},{"post_id":"cky2hohep000l5nrjavm6ezjf","tag_id":"cky2hohet001j5nrj86qbguos","_id":"cky2hohev00215nrjch4u4e3d"},{"post_id":"cky2hoheu001o5nrjfgk5gfea","tag_id":"cky2hohel00095nrj8m830z3a","_id":"cky2hohev00245nrj65rphkge"},{"post_id":"cky2hohep000n5nrjb9fw6guw","tag_id":"cky2hoheu001q5nrjfvqoaqmy","_id":"cky2hohew00285nrj6zxl5az4"},{"post_id":"cky2hohev001w5nrjedm2csev","tag_id":"cky2hohel00095nrj8m830z3a","_id":"cky2hohew002b5nrj13njdqaw"},{"post_id":"cky2hoheq000r5nrj39y72in4","tag_id":"cky2hohev001x5nrj1h20cj5b","_id":"cky2hohew002e5nrj7xgp2c03"},{"post_id":"cky2hohev00255nrj6g7y0bef","tag_id":"cky2hohel00095nrj8m830z3a","_id":"cky2hohex002g5nrjb4ii043q"},{"post_id":"cky2hohet001l5nrjhz4efa6w","tag_id":"cky2hohev00235nrjfgvdb04y","_id":"cky2hohex002l5nrje0kcasql"},{"post_id":"cky2hoheu001u5nrj10ca95iy","tag_id":"cky2hohex002h5nrja117hhyj","_id":"cky2hohey002r5nrj0fve1aqz"},{"post_id":"cky2hohev001z5nrjh7ap4ivd","tag_id":"cky2hohex002o5nrj70h1gt0b","_id":"cky2hohey002v5nrj0vfydg1s"},{"post_id":"cky2hohev00225nrje0dvbdhv","tag_id":"cky2hohey002t5nrjgx8md2t3","_id":"cky2hohey002z5nrjhnkm9qja"},{"post_id":"cky2hohew00295nrjc4wy02v3","tag_id":"cky2hohey002x5nrjd2em20us","_id":"cky2hohez00335nrjcj61bbb6"},{"post_id":"cky2hohew002c5nrjfakdb40d","tag_id":"cky2hohey00325nrj06j87e1o","_id":"cky2hohf000375nrj70zhf62l"},{"post_id":"cky2hohew002f5nrj2toc75fp","tag_id":"cky2hohf000365nrjdmej56c7","_id":"cky2hohf0003c5nrj3ol59lj2"},{"post_id":"cky2hohex002i5nrja0ub24ho","tag_id":"cky2hohf0003a5nrjakwm90vg","_id":"cky2hohf0003g5nrj0x652tlw"},{"post_id":"cky2hohex002m5nrjex96h500","tag_id":"cky2hohf0003f5nrj8r3i472k","_id":"cky2hohf0003j5nrj2dl96icc"},{"post_id":"cky2hohf4004x5nrj1709bqcu","tag_id":"cky2hohel00095nrj8m830z3a","_id":"cky2hohf5004z5nrjggfh64j0"},{"post_id":"cky2hohf4004y5nrjb2qq5zza","tag_id":"cky2hohf500515nrj43jf0jcb","_id":"cky2hohf500595nrjgoih199y"},{"post_id":"cky2hohf6005a5nrj8hoc3l7b","tag_id":"cky2hohf500575nrj13nyfr9q","_id":"cky2hohf6005e5nrja7ffacyi"},{"post_id":"cky2hohf500505nrj2f3vaco9","tag_id":"cky2hohf500575nrj13nyfr9q","_id":"cky2hohf6005g5nrj0ynx35x3"},{"post_id":"cky2hohf500525nrj574q04ei","tag_id":"cky2hohf500575nrj13nyfr9q","_id":"cky2hohf6005j5nrj25jpdoom"},{"post_id":"cky2hohf500545nrj2kuf32ct","tag_id":"cky2hohf500575nrj13nyfr9q","_id":"cky2hohf6005n5nrjcve3fx55"},{"post_id":"cky2hohf500565nrjgku6e3tg","tag_id":"cky2hohf6005m5nrj9ui3cmol","_id":"cky2hohf6005r5nrj1blve6kt"},{"post_id":"cky30wsgu0001v8rjdhti7jv0","tag_id":"cky30wsgv0003v8rj83pt4le3","_id":"cky30wsgv0004v8rj162tdsni"},{"post_id":"cky31c9at0000z1rjd3zl5f9p","tag_id":"cky31c9aw0001z1rj585f4xb4","_id":"cky31c9b10003z1rjcr8k2v6d"},{"post_id":"cky31o1oe00001trj5o449koa","tag_id":"cky31c9aw0001z1rj585f4xb4","_id":"cky31o1og00021trjdci82vc5"},{"post_id":"cky31o1of00011trj9qi23jnx","tag_id":"cky31c9aw0001z1rj585f4xb4","_id":"cky31o1oh00041trj57ak8bfl"},{"post_id":"cky31o1og00031trj22i6etl6","tag_id":"cky31c9aw0001z1rj585f4xb4","_id":"cky31o1oh00071trj9h62cly4"},{"post_id":"cky31phnt00032srj28pn8x6h","tag_id":"cky31c9aw0001z1rj585f4xb4","_id":"cky323taf00015xrjd8on6ujl"},{"post_id":"cky31phnq00002srjezixbznn","tag_id":"cky323tab00005xrj5rf29l13","_id":"cky323tag00045xrjgifxh3ox"},{"post_id":"cky31phns00022srjhvks0w80","tag_id":"cky323taj00055xrj18wmb4yg","_id":"cky323tak000b5xrj4ep9f7ax"},{"post_id":"cky31phnt00042srjaojd3gl2","tag_id":"cky323tak00095xrj723tcymn","_id":"cky323tak000e5xrjg6k15vhr"},{"post_id":"cky31phnr00012srja3fy6d4a","tag_id":"cky323tak000d5xrj1hv6frwr","_id":"cky323tak000h5xrj0jyygvgs"},{"post_id":"cky323taj00065xrj8idqflic","tag_id":"cky323tak000f5xrjgopr16uo","_id":"cky323tal000i5xrjdxxa2wk9"},{"post_id":"cky2hoheu001r5nrj4vyt4bi2","tag_id":"cky328tai00016vrj4z03bqtr","_id":"cky328tai00026vrj1huu3xqe"},{"post_id":"ckzz6hmdn0001derja4k88pvc","tag_id":"cky31c9aw0001z1rj585f4xb4","_id":"ckzz6hmdu0003derjb004dqxp"}],"Tag":[{"name":"Node.js","_id":"cky2hohek00045nrjeix3d6qc"},{"name":"kaggle, plotly","_id":"cky2hohel00095nrj8m830z3a"},{"name":"github, hexo","_id":"cky2hohem000e5nrjcur9g7m4"},{"name":"python, coding, study","_id":"cky2hohep000q5nrj4rbb1rew"},{"name":"markdown, python, pycharm, numpy","_id":"cky2hoheq000x5nrj6dd1ghox"},{"name":"markdown, python, pycharm","_id":"cky2hoher00165nrja2dxcgln"},{"name":"markdown, python, pycharm, pandas","_id":"cky2hohet001d5nrjarrn6f96"},{"name":"markdown, python, pycharm, visualization","_id":"cky2hohet001j5nrj86qbguos"},{"name":"machine learning, decision tree","_id":"cky2hoheu001q5nrjfvqoaqmy"},{"name":"python, Heroku, Dashboard","_id":"cky2hohev001x5nrj1h20cj5b"},{"name":"kaggle, plotly, pie, bar","_id":"cky2hohev00235nrjfgvdb04y"},{"name":"Mac, Macbook","_id":"cky2hohew002a5nrj4mjuabki"},{"name":"python, pandas","_id":"cky2hohex002h5nrja117hhyj"},{"name":"plotly, bar graph, bar","_id":"cky2hohex002o5nrj70h1gt0b"},{"name":"plotly, heatmap graph, heatmap, subplot","_id":"cky2hohey002t5nrjgx8md2t3"},{"name":"plotly, pie graph, pie, sunburst","_id":"cky2hohey002x5nrjd2em20us"},{"name":"plotly, pie graph, pie, subplot","_id":"cky2hohey00325nrj06j87e1o"},{"name":"python, requirements.txt","_id":"cky2hohf000365nrjdmej56c7"},{"name":"python, list","_id":"cky2hohf0003a5nrjakwm90vg"},{"name":"python, tuple","_id":"cky2hohf0003f5nrj8r3i472k"},{"name":"python, dictionary","_id":"cky2hohf500515nrj43jf0jcb"},{"name":"python","_id":"cky2hohf500575nrj13nyfr9q"},{"name":"python, set","_id":"cky2hohf6005m5nrj9ui3cmol"},{"name":"tomcat, eclipse, oracle","_id":"cky30wsgv0003v8rj83pt4le3"},{"name":"database","_id":"cky31c9aw0001z1rj585f4xb4"},{"name":"tomcat","_id":"cky323tab00005xrj5rf29l13"},{"name":"servlet, jsp","_id":"cky323taj00055xrj18wmb4yg"},{"name":"scope","_id":"cky323tak00095xrj723tcymn"},{"name":"servlet, web.xml","_id":"cky323tak000d5xrj1hv6frwr"},{"name":"JSTL, EL","_id":"cky323tak000f5xrjgopr16uo"},{"name":"mac, macbook","_id":"cky328tai00016vrj4z03bqtr"}]}}