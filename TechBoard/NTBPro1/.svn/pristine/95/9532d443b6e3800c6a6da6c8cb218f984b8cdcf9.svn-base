package kr.co.negga.ntb.login.web;

import java.security.KeyFactory;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.spec.RSAPublicKeySpec;
import java.util.HashMap;

import javax.annotation.Resource;
import javax.crypto.Cipher;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import kr.co.negga.ntb.account.service.AccountVO;
import kr.co.negga.ntb.account.service.SHA256Util;
import kr.co.negga.ntb.login.service.LoginService;

@Controller
@RequestMapping("/login/*")
public class LoginController {
	
	@Resource(name="loginService")
	public LoginService loginService;
	
	/**
	 * 로그인 화면 시작
	 */
	@RequestMapping(value = "/logIn.do", method = RequestMethod.GET)
	public String Login(HttpServletRequest request, HttpServletResponse response) throws Exception{
		
		//RSA키 생성
		initRsa(request);
		
		return "/login/logIn";
	}
	
	/**
	 * 로그아웃
	 */
	@RequestMapping("/login/logOut.do")
	public String logout(HttpSession session) {
		session.invalidate();  // 세션초기화 
		return "redirect:/";
	}
	
	/**
	 * RSA를 사용하기 위한 key, instance
	 */
	private static String RSA_WEB_KEY = "_RSA_WEB_Key_"; // 개인키 session key
    private static String RSA_INSTANCE = "RSA"; // rsa transformation
	
    /*
     * 로그인 버튼 클릭
     */
	@RequestMapping(value = "/loginWriteSub.do")
	@ResponseBody
	public HashMap<String, Object> loginProcessString(AccountVO avo , HttpSession session , Model model,
											HttpServletRequest request) throws Exception{
		
		HashMap<String, Object> resultMap = new HashMap<String, Object>();
		
		String userId = (String) avo.getUser_id_real();
        String userPw = (String) avo.getUser_pw_real();
        System.out.println(userId);
		
        session = request.getSession();
        PrivateKey privateKey = (PrivateKey) session.getAttribute(LoginController.RSA_WEB_KEY);
        
        // 복호화
        userId = decryptRsa(privateKey, userId);
        userPw = decryptRsa(privateKey, userPw);
		
		// ShA 256 암호화 = 단방향 
		// 유저 고유 솔트값 해시 처리해서 비교 데이터 만들기
		String salt = loginService.selectUserSalt(userId);
		String hash_pw = SHA256Util.getEncrypt(userPw, salt);
		avo.setUser_id(userId);
		avo.setUser_pw(hash_pw);
		
		// 인터셉터 로그인시 안걸리게 하기
		model.addAttribute("sessionResult", "ok");
		
		// ID와 PW를 비교하여 로그인 처리
		int count = loginService.selectMemberCount(avo);
		
		if(count == 1) {
			
			// 개인키 삭제
	        session.removeAttribute(LoginController.RSA_WEB_KEY);
			
			// session 생성  
			session.setAttribute("Session_user_id", avo.getUser_id());
			session.setAttribute("Session_user_name", avo.getUser_name());
			
			// message 처리
			resultMap.put("result", "ok");
		}
		
		return resultMap;
	}
	
	/**
     * 복호화
     * 
     * @param privateKey
     * @param securedValue
     * @return
     * @throws Exception
     */
    private String decryptRsa(PrivateKey privateKey, String securedValue) throws Exception {
        Cipher cipher = Cipher.getInstance(LoginController.RSA_INSTANCE);
        byte[] encryptedBytes = hexToByteArray(securedValue);
        cipher.init(Cipher.DECRYPT_MODE, privateKey);
        byte[] decryptedBytes = cipher.doFinal(encryptedBytes); //여기서 걸림
        String decryptedValue = new String(decryptedBytes, "utf-8"); // 문자 인코딩 주의.
        return decryptedValue;
    }
 
    /**
     * 16진 문자열을 byte 배열로 변환한다.
     * 
     * @param hex
     * @return
     */
    public static byte[] hexToByteArray(String hex) {
        if (hex == null || hex.length() % 2 != 0) { return new byte[] {}; }
 
        byte[] bytes = new byte[hex.length() / 2];
        for (int i = 0; i < hex.length(); i += 2) {
            byte value = (byte) Integer.parseInt(hex.substring(i, i + 2), 16);
            bytes[(int) Math.floor(i / 2)] = value;
        }
        return bytes;
    }
	
	/**
     * rsa 공개키, 개인키 생성
     * 
     * @param request
     */
    public void initRsa(HttpServletRequest request) {
        HttpSession session = request.getSession();
 
        KeyPairGenerator generator;
        try {
            generator = KeyPairGenerator.getInstance(LoginController.RSA_INSTANCE);
            generator.initialize(1024);
 
            KeyPair keyPair = generator.genKeyPair();
            KeyFactory keyFactory = KeyFactory.getInstance(LoginController.RSA_INSTANCE);
            PublicKey publicKey = keyPair.getPublic();
            PrivateKey privateKey = keyPair.getPrivate();
 
            session.setAttribute(LoginController.RSA_WEB_KEY, privateKey); // session에 RSA 개인키를 세션에 저장
 
            RSAPublicKeySpec publicSpec = (RSAPublicKeySpec) keyFactory.getKeySpec(publicKey, RSAPublicKeySpec.class);
            String publicKeyModulus = publicSpec.getModulus().toString(16);
            String publicKeyExponent = publicSpec.getPublicExponent().toString(16);
 
            request.setAttribute("RSAModulus", publicKeyModulus); // rsa modulus 를 request 에 추가
            request.setAttribute("RSAExponent", publicKeyExponent); // rsa exponent 를 request 에 추가
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }
	
    
}
